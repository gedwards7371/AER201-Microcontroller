

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 14:01:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F4620 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002AB4                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _THIR
   137  002AB4  00FF               	dw	255
   138                           
   139                           	psect	idataBANK0
   140  002A76                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for printRTC@F3205
   144  002A76  4D                 	db	77
   145  002A77  4D                 	db	77
   146  002A78  4D                 	db	77
   147  002A79  00                 	db	0
   148                           
   149                           ;initializer for _THMAG
   150  002A7A  00FF               	dw	255
   151                           
   152                           ;initializer for _f_ID_receive
   153  002A7C  0001               	dw	1
   154                           
   155                           ;initializer for _first
   156  002A7E  0001               	dw	1
   157                           
   158                           	psect	mediumconst
   159  00FDB4                     __pmediumconst:
   160                           	opt stack 0
   161  00FDB4  00                 	db	0
   162  00FDB5                     _keys:
   163                           	opt stack 0
   164  00FDB5  31                 	db	49
   165  00FDB6  32                 	db	50
   166  00FDB7  33                 	db	51
   167  00FDB8  41                 	db	65
   168  00FDB9  34                 	db	52
   169  00FDBA  35                 	db	53
   170  00FDBB  36                 	db	54
   171  00FDBC  42                 	db	66
   172  00FDBD  37                 	db	55
   173  00FDBE  38                 	db	56
   174  00FDBF  39                 	db	57
   175  00FDC0  43                 	db	67
   176  00FDC1  2A                 	db	42
   177  00FDC2  30                 	db	48
   178  00FDC3  23                 	db	35
   179  00FDC4  44                 	db	68
   180  00FDC5  00                 	db	0
   181  00FDC6                     __end_of_keys:
   182                           	opt stack 0
   183  00FDC6                     _dpowers:
   184                           	opt stack 0
   185  00FDC6  0001               	dw	1
   186  00FDC8  000A               	dw	10
   187  00FDCA  0064               	dw	100
   188  00FDCC  03E8               	dw	1000
   189  00FDCE  2710               	dw	10000
   190  00FDD0                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _ADCON0	set	4034
   193  0000                     _ADCON0bits	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _ADRESH	set	4036
   196  0000                     _ADRESL	set	4035
   197  0000                     _CMCONbits	set	4020
   198  0000                     _CVRCON	set	4021
   199  0000                     _INTCONbits	set	4082
   200  0000                     _LATA	set	3977
   201  0000                     _LATAbits	set	3977
   202  0000                     _LATB	set	3978
   203  0000                     _LATC	set	3979
   204  0000                     _LATCbits	set	3979
   205  0000                     _LATD	set	3980
   206  0000                     _LATDbits	set	3980
   207  0000                     _LATE	set	3981
   208  0000                     _OSCCON	set	4051
   209  0000                     _OSCTUNEbits	set	3995
   210  0000                     _PORTAbits	set	3968
   211  0000                     _PORTB	set	3969
   212  0000                     _PORTBbits	set	3969
   213  0000                     _SSPADD	set	4040
   214  0000                     _SSPBUF	set	4041
   215  0000                     _SSPCON1	set	4038
   216  0000                     _SSPCON2	set	4037
   217  0000                     _SSPSTAT	set	4039
   218  0000                     _T0CON	set	4053
   219  0000                     _T1CON	set	4045
   220  0000                     _T3CON	set	4017
   221  0000                     _TMR0H	set	4055
   222  0000                     _TMR0L	set	4054
   223  0000                     _TMR1H	set	4047
   224  0000                     _TMR1L	set	4046
   225  0000                     _TMR3H	set	4019
   226  0000                     _TMR3L	set	4018
   227  0000                     _TRISA	set	3986
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISC	set	3988
   230  0000                     _TRISD	set	3989
   231  0000                     _TRISE	set	3990
   232  0000                     _ACKDT	set	32301
   233  0000                     _ACKEN	set	32300
   234  0000                     _ADFM	set	32263
   235  0000                     _ADIE	set	31982
   236  0000                     _ADON	set	32272
   237  0000                     _INT1IE	set	32643
   238  0000                     _INT1IF	set	32640
   239  0000                     _PEIE	set	32662
   240  0000                     _PEN	set	32298
   241  0000                     _RCEN	set	32299
   242  0000                     _RSEN	set	32297
   243  0000                     _SEN	set	32296
   244  0000                     _TMR0IE	set	32661
   245  0000                     _TMR0IF	set	32658
   246  0000                     _TMR0ON	set	32431
   247  0000                     _TMR1IE	set	31976
   248  0000                     _TMR1IF	set	31984
   249  0000                     _TMR1ON	set	32360
   250  0000                     _TMR2IE	set	31977
   251  0000                     _TMR3IE	set	32001
   252  0000                     _TMR3IF	set	32009
   253  0000                     _TMR3ON	set	32136
   254  0000                     _TRISC3	set	31907
   255  0000                     _TRISC4	set	31908
   256  0000                     _VCFG0	set	32268
   257  0000                     _VCFG1	set	32269
   258  0000                     _nRBPU	set	32655
   259  00FDD0                     STR_48:
   260  00FDD0  25                 	db	37
   261  00FDD1  30                 	db	48	;'0'
   262  00FDD2  32                 	db	50	;'2'
   263  00FDD3  64                 	db	100	;'d'
   264  00FDD4  25                 	db	37
   265  00FDD5  73                 	db	115	;'s'
   266  00FDD6  20                 	db	32
   267  00FDD7  7C                 	db	124
   268  00FDD8  20                 	db	32
   269  00FDD9  25                 	db	37
   270  00FDDA  30                 	db	48	;'0'
   271  00FDDB  32                 	db	50	;'2'
   272  00FDDC  64                 	db	100	;'d'
   273  00FDDD  3A                 	db	58	;':'
   274  00FDDE  25                 	db	37
   275  00FDDF  30                 	db	48	;'0'
   276  00FDE0  32                 	db	50	;'2'
   277  00FDE1  64                 	db	100	;'d'
   278  00FDE2  3A                 	db	58	;':'
   279  00FDE3  25                 	db	37
   280  00FDE4  30                 	db	48	;'0'
   281  00FDE5  32                 	db	50	;'2'
   282  00FDE6  64                 	db	100	;'d'
   283  00FDE7  00                 	db	0
   284  00FDE8                     STR_2:
   285  00FDE8  54                 	db	84	;'T'
   286  00FDE9  69                 	db	105	;'i'
   287  00FDEA  6D                 	db	109	;'m'
   288  00FDEB  65                 	db	101	;'e'
   289  00FDEC  3A                 	db	58	;':'
   290  00FDED  20                 	db	32
   291  00FDEE  25                 	db	37
   292  00FDEF  30                 	db	48	;'0'
   293  00FDF0  32                 	db	50	;'2'
   294  00FDF1  64                 	db	100	;'d'
   295  00FDF2  3A                 	db	58	;':'
   296  00FDF3  25                 	db	37
   297  00FDF4  30                 	db	48	;'0'
   298  00FDF5  32                 	db	50	;'2'
   299  00FDF6  64                 	db	100	;'d'
   300  00FDF7  3A                 	db	58	;':'
   301  00FDF8  25                 	db	37
   302  00FDF9  30                 	db	48	;'0'
   303  00FDFA  32                 	db	50	;'2'
   304  00FDFB  64                 	db	100	;'d'
   305  00FDFC  00                 	db	0
   306  00FDFD                     STR_3:
   307  00FDFD  2D                 	db	45
   308  00FDFE  2D                 	db	45
   309  00FDFF  20                 	db	32
   310  00FE00  4C                 	db	76	;'L'
   311  00FE01  6F                 	db	111	;'o'
   312  00FE02  67                 	db	103	;'g'
   313  00FE03  20                 	db	32
   314  00FE04  25                 	db	37
   315  00FE05  32                 	db	50	;'2'
   316  00FE06  64                 	db	100	;'d'
   317  00FE07  20                 	db	32
   318  00FE08  68                 	db	104	;'h'
   319  00FE09  65                 	db	101	;'e'
   320  00FE0A  72                 	db	114	;'r'
   321  00FE0B  65                 	db	101	;'e'
   322  00FE0C  2D                 	db	45
   323  00FE0D  2D                 	db	45
   324  00FE0E  00                 	db	0
   325  00FE0F                     STR_8:
   326  00FE0F  25                 	db	37
   327  00FE10  64                 	db	100	;'d'
   328  00FE11  20                 	db	32
   329  00FE12  6D                 	db	109	;'m'
   330  00FE13  69                 	db	105	;'i'
   331  00FE14  6E                 	db	110	;'n'
   332  00FE15  28                 	db	40
   333  00FE16  73                 	db	115	;'s'
   334  00FE17  29                 	db	41
   335  00FE18  20                 	db	32
   336  00FE19  25                 	db	37
   337  00FE1A  64                 	db	100	;'d'
   338  00FE1B  20                 	db	32
   339  00FE1C  73                 	db	115	;'s'
   340  00FE1D  65                 	db	101	;'e'
   341  00FE1E  63                 	db	99	;'c'
   342  00FE1F  73                 	db	115	;'s'
   343  00FE20  00                 	db	0
   344  00FE21                     STR_26:
   345  00FE21  4C                 	db	76	;'L'
   346  00FE22  4F                 	db	79	;'O'
   347  00FE23  47                 	db	71	;'G'
   348  00FE24  20                 	db	32
   349  00FE25  31                 	db	49	;'1'
   350  00FE26  20                 	db	32
   351  00FE27  20                 	db	32
   352  00FE28  20                 	db	32
   353  00FE29  20                 	db	32
   354  00FE2A  20                 	db	32
   355  00FE2B  20                 	db	32
   356  00FE2C  20                 	db	32
   357  00FE2D  20                 	db	32
   358  00FE2E  20                 	db	32
   359  00FE2F  20                 	db	32
   360  00FE30  20                 	db	32
   361  00FE31  00                 	db	0
   362  00FE32                     STR_25:
   363  00FE32  4C                 	db	76	;'L'
   364  00FE33  4F                 	db	79	;'O'
   365  00FE34  47                 	db	71	;'G'
   366  00FE35  20                 	db	32
   367  00FE36  32                 	db	50	;'2'
   368  00FE37  20                 	db	32
   369  00FE38  20                 	db	32
   370  00FE39  20                 	db	32
   371  00FE3A  20                 	db	32
   372  00FE3B  20                 	db	32
   373  00FE3C  20                 	db	32
   374  00FE3D  20                 	db	32
   375  00FE3E  20                 	db	32
   376  00FE3F  20                 	db	32
   377  00FE40  20                 	db	32
   378  00FE41  20                 	db	32
   379  00FE42  00                 	db	0
   380  00FE43                     STR_29:
   381  00FE43  4C                 	db	76	;'L'
   382  00FE44  4F                 	db	79	;'O'
   383  00FE45  47                 	db	71	;'G'
   384  00FE46  20                 	db	32
   385  00FE47  33                 	db	51	;'3'
   386  00FE48  20                 	db	32
   387  00FE49  20                 	db	32
   388  00FE4A  20                 	db	32
   389  00FE4B  20                 	db	32
   390  00FE4C  20                 	db	32
   391  00FE4D  20                 	db	32
   392  00FE4E  20                 	db	32
   393  00FE4F  20                 	db	32
   394  00FE50  20                 	db	32
   395  00FE51  20                 	db	32
   396  00FE52  20                 	db	32
   397  00FE53  00                 	db	0
   398  00FE54                     STR_33:
   399  00FE54  4C                 	db	76	;'L'
   400  00FE55  4F                 	db	79	;'O'
   401  00FE56  47                 	db	71	;'G'
   402  00FE57  20                 	db	32
   403  00FE58  34                 	db	52	;'4'
   404  00FE59  20                 	db	32
   405  00FE5A  20                 	db	32
   406  00FE5B  20                 	db	32
   407  00FE5C  20                 	db	32
   408  00FE5D  20                 	db	32
   409  00FE5E  20                 	db	32
   410  00FE5F  20                 	db	32
   411  00FE60  20                 	db	32
   412  00FE61  20                 	db	32
   413  00FE62  20                 	db	32
   414  00FE63  20                 	db	32
   415  00FE64  00                 	db	0
   416  00FE65                     STR_21:
   417  00FE65  33                 	db	51	;'3'
   418  00FE66  2E                 	db	46
   419  00FE67  20                 	db	32
   420  00FE68  4C                 	db	76	;'L'
   421  00FE69  4F                 	db	79	;'O'
   422  00FE6A  47                 	db	71	;'G'
   423  00FE6B  53                 	db	83	;'S'
   424  00FE6C  20                 	db	32
   425  00FE6D  20                 	db	32
   426  00FE6E  20                 	db	32
   427  00FE6F  20                 	db	32
   428  00FE70  20                 	db	32
   429  00FE71  20                 	db	32
   430  00FE72  20                 	db	32
   431  00FE73  20                 	db	32
   432  00FE74  20                 	db	32
   433  00FE75  00                 	db	0
   434  00FE76                     STR_17:
   435  00FE76  32                 	db	50	;'2'
   436  00FE77  2E                 	db	46
   437  00FE78  20                 	db	32
   438  00FE79  53                 	db	83	;'S'
   439  00FE7A  4F                 	db	79	;'O'
   440  00FE7B  52                 	db	82	;'R'
   441  00FE7C  54                 	db	84	;'T'
   442  00FE7D  20                 	db	32
   443  00FE7E  20                 	db	32
   444  00FE7F  20                 	db	32
   445  00FE80  20                 	db	32
   446  00FE81  20                 	db	32
   447  00FE82  20                 	db	32
   448  00FE83  20                 	db	32
   449  00FE84  20                 	db	32
   450  00FE85  20                 	db	32
   451  00FE86  00                 	db	0
   452  00FE87                     STR_18:
   453  00FE87  31                 	db	49	;'1'
   454  00FE88  2E                 	db	46
   455  00FE89  20                 	db	32
   456  00FE8A  44                 	db	68	;'D'
   457  00FE8B  41                 	db	65	;'A'
   458  00FE8C  54                 	db	84	;'T'
   459  00FE8D  45                 	db	69	;'E'
   460  00FE8E  2F                 	db	47
   461  00FE8F  54                 	db	84	;'T'
   462  00FE90  49                 	db	73	;'I'
   463  00FE91  4D                 	db	77	;'M'
   464  00FE92  45                 	db	69	;'E'
   465  00FE93  20                 	db	32
   466  00FE94  20                 	db	32
   467  00FE95  20                 	db	32
   468  00FE96  20                 	db	32
   469  00FE97  00                 	db	0
   470  00FE98                     STR_9:
   471  00FE98  20                 	db	32
   472  00FE99  2D                 	db	45
   473  00FE9A  2D                 	db	45
   474  00FE9B  20                 	db	32
   475  00FE9C  50                 	db	80	;'P'
   476  00FE9D  6F                 	db	111	;'o'
   477  00FE9E  70                 	db	112	;'p'
   478  00FE9F  20                 	db	32
   479  00FEA0  20                 	db	32
   480  00FEA1  63                 	db	99	;'c'
   481  00FEA2  61                 	db	97	;'a'
   482  00FEA3  6E                 	db	110	;'n'
   483  00FEA4  20                 	db	32
   484  00FEA5  2D                 	db	45
   485  00FEA6  2D                 	db	45
   486  00FEA7  20                 	db	32
   487  00FEA8  00                 	db	0
   488  00FEA9                     STR_11:
   489  00FEA9  20                 	db	32
   490  00FEAA  2D                 	db	45
   491  00FEAB  2D                 	db	45
   492  00FEAC  20                 	db	32
   493  00FEAD  53                 	db	83	;'S'
   494  00FEAE  6F                 	db	111	;'o'
   495  00FEAF  75                 	db	117	;'u'
   496  00FEB0  70                 	db	112	;'p'
   497  00FEB1  20                 	db	32
   498  00FEB2  63                 	db	99	;'c'
   499  00FEB3  61                 	db	97	;'a'
   500  00FEB4  6E                 	db	110	;'n'
   501  00FEB5  20                 	db	32
   502  00FEB6  2D                 	db	45
   503  00FEB7  2D                 	db	45
   504  00FEB8  20                 	db	32
   505  00FEB9  00                 	db	0
   506  00FEBA                     STR_1:
   507  00FEBA  21                 	db	33
   508  00FEBB  53                 	db	83	;'S'
   509  00FEBC  4F                 	db	79	;'O'
   510  00FEBD  52                 	db	82	;'R'
   511  00FEBE  54                 	db	84	;'T'
   512  00FEBF  20                 	db	32
   513  00FEC0  43                 	db	67	;'C'
   514  00FEC1  4F                 	db	79	;'O'
   515  00FEC2  4E                 	db	78	;'N'
   516  00FEC3  43                 	db	67	;'C'
   517  00FEC4  4C                 	db	76	;'L'
   518  00FEC5  55                 	db	85	;'U'
   519  00FEC6  44                 	db	68	;'D'
   520  00FEC7  45                 	db	69	;'E'
   521  00FEC8  44                 	db	68	;'D'
   522  00FEC9  21                 	db	33
   523  00FECA  00                 	db	0
   524  00FECB                     STR_13:
   525  00FECB  2D                 	db	45
   526  00FECC  2D                 	db	45
   527  00FECD  20                 	db	32
   528  00FECE  54                 	db	84	;'T'
   529  00FECF  6F                 	db	111	;'o'
   530  00FED0  74                 	db	116	;'t'
   531  00FED1  61                 	db	97	;'a'
   532  00FED2  6C                 	db	108	;'l'
   533  00FED3  20                 	db	32
   534  00FED4  63                 	db	99	;'c'
   535  00FED5  61                 	db	97	;'a'
   536  00FED6  6E                 	db	110	;'n'
   537  00FED7  73                 	db	115	;'s'
   538  00FED8  20                 	db	32
   539  00FED9  2D                 	db	45
   540  00FEDA  2D                 	db	45
   541  00FEDB  00                 	db	0
   542  00FEDC                     STR_10:
   543  00FEDC  4E                 	db	78	;'N'
   544  00FEDD  6F                 	db	111	;'o'
   545  00FEDE  20                 	db	32
   546  00FEDF  74                 	db	116	;'t'
   547  00FEE0  61                 	db	97	;'a'
   548  00FEE1  62                 	db	98	;'b'
   549  00FEE2  3A                 	db	58	;':'
   550  00FEE3  20                 	db	32
   551  00FEE4  39                 	db	57	;'9'
   552  00FEE5  7C                 	db	124
   553  00FEE6  54                 	db	84	;'T'
   554  00FEE7  61                 	db	97	;'a'
   555  00FEE8  62                 	db	98	;'b'
   556  00FEE9  3A                 	db	58	;':'
   557  00FEEA  20                 	db	32
   558  00FEEB  31                 	db	49	;'1'
   559  00FEEC  00                 	db	0
   560  00FEED                     STR_12:
   561  00FEED  4E                 	db	78	;'N'
   562  00FEEE  6F                 	db	111	;'o'
   563  00FEEF  20                 	db	32
   564  00FEF0  6C                 	db	108	;'l'
   565  00FEF1  62                 	db	98	;'b'
   566  00FEF2  6C                 	db	108	;'l'
   567  00FEF3  3A                 	db	58	;':'
   568  00FEF4  20                 	db	32
   569  00FEF5  31                 	db	49	;'1'
   570  00FEF6  7C                 	db	124
   571  00FEF7  6C                 	db	108	;'l'
   572  00FEF8  62                 	db	98	;'b'
   573  00FEF9  6C                 	db	108	;'l'
   574  00FEFA  3A                 	db	58	;':'
   575  00FEFB  20                 	db	32
   576  00FEFC  31                 	db	49	;'1'
   577  00FEFD  00                 	db	0
   578  00FEFE                     STR_6:
   579  00FEFE  30                 	db	48	;'0'
   580  00FEFF  36                 	db	54	;'6'
   581  00FF00  46                 	db	70	;'F'
   582  00FF01  65                 	db	101	;'e'
   583  00FF02  62                 	db	98	;'b'
   584  00FF03  20                 	db	32
   585  00FF04  7C                 	db	124
   586  00FF05  20                 	db	32
   587  00FF06  30                 	db	48	;'0'
   588  00FF07  31                 	db	49	;'1'
   589  00FF08  3A                 	db	58	;':'
   590  00FF09  30                 	db	48	;'0'
   591  00FF0A  38                 	db	56	;'8'
   592  00FF0B  3A                 	db	58	;':'
   593  00FF0C  35                 	db	53	;'5'
   594  00FF0D  36                 	db	54	;'6'
   595  00FF0E  00                 	db	0
   596  00FF0F                     STR_24:
   597  00FF0F  4C                 	db	76	;'L'
   598  00FF10  4F                 	db	79	;'O'
   599  00FF11  47                 	db	71	;'G'
   600  00FF12  20                 	db	32
   601  00FF13  31                 	db	49	;'1'
   602  00FF14  20                 	db	32
   603  00FF15  20                 	db	32
   604  00FF16  20                 	db	32
   605  00FF17  20                 	db	32
   606  00FF18  20                 	db	32
   607  00FF19  20                 	db	32
   608  00FF1A  20                 	db	32
   609  00FF1B  20                 	db	32
   610  00FF1C  20                 	db	32
   611  00FF1D  20                 	db	32
   612  00FF1E  3C                 	db	60	;'<'
   613  00FF1F  00                 	db	0
   614  00FF20                     STR_27:
   615  00FF20  4C                 	db	76	;'L'
   616  00FF21  4F                 	db	79	;'O'
   617  00FF22  47                 	db	71	;'G'
   618  00FF23  20                 	db	32
   619  00FF24  32                 	db	50	;'2'
   620  00FF25  20                 	db	32
   621  00FF26  20                 	db	32
   622  00FF27  20                 	db	32
   623  00FF28  20                 	db	32
   624  00FF29  20                 	db	32
   625  00FF2A  20                 	db	32
   626  00FF2B  20                 	db	32
   627  00FF2C  20                 	db	32
   628  00FF2D  20                 	db	32
   629  00FF2E  20                 	db	32
   630  00FF2F  3C                 	db	60	;'<'
   631  00FF30  00                 	db	0
   632  00FF31                     STR_31:
   633  00FF31  4C                 	db	76	;'L'
   634  00FF32  4F                 	db	79	;'O'
   635  00FF33  47                 	db	71	;'G'
   636  00FF34  20                 	db	32
   637  00FF35  33                 	db	51	;'3'
   638  00FF36  20                 	db	32
   639  00FF37  20                 	db	32
   640  00FF38  20                 	db	32
   641  00FF39  20                 	db	32
   642  00FF3A  20                 	db	32
   643  00FF3B  20                 	db	32
   644  00FF3C  20                 	db	32
   645  00FF3D  20                 	db	32
   646  00FF3E  20                 	db	32
   647  00FF3F  20                 	db	32
   648  00FF40  3C                 	db	60	;'<'
   649  00FF41  00                 	db	0
   650  00FF42                     STR_35:
   651  00FF42  4C                 	db	76	;'L'
   652  00FF43  4F                 	db	79	;'O'
   653  00FF44  47                 	db	71	;'G'
   654  00FF45  20                 	db	32
   655  00FF46  34                 	db	52	;'4'
   656  00FF47  20                 	db	32
   657  00FF48  20                 	db	32
   658  00FF49  20                 	db	32
   659  00FF4A  20                 	db	32
   660  00FF4B  20                 	db	32
   661  00FF4C  20                 	db	32
   662  00FF4D  20                 	db	32
   663  00FF4E  20                 	db	32
   664  00FF4F  20                 	db	32
   665  00FF50  20                 	db	32
   666  00FF51  3C                 	db	60	;'<'
   667  00FF52  00                 	db	0
   668  00FF53                     STR_23:
   669  00FF53  33                 	db	51	;'3'
   670  00FF54  2E                 	db	46
   671  00FF55  20                 	db	32
   672  00FF56  4C                 	db	76	;'L'
   673  00FF57  4F                 	db	79	;'O'
   674  00FF58  47                 	db	71	;'G'
   675  00FF59  53                 	db	83	;'S'
   676  00FF5A  20                 	db	32
   677  00FF5B  20                 	db	32
   678  00FF5C  20                 	db	32
   679  00FF5D  20                 	db	32
   680  00FF5E  20                 	db	32
   681  00FF5F  20                 	db	32
   682  00FF60  20                 	db	32
   683  00FF61  20                 	db	32
   684  00FF62  3C                 	db	60	;'<'
   685  00FF63  00                 	db	0
   686  00FF64                     STR_19:
   687  00FF64  32                 	db	50	;'2'
   688  00FF65  2E                 	db	46
   689  00FF66  20                 	db	32
   690  00FF67  53                 	db	83	;'S'
   691  00FF68  4F                 	db	79	;'O'
   692  00FF69  52                 	db	82	;'R'
   693  00FF6A  54                 	db	84	;'T'
   694  00FF6B  20                 	db	32
   695  00FF6C  20                 	db	32
   696  00FF6D  20                 	db	32
   697  00FF6E  20                 	db	32
   698  00FF6F  20                 	db	32
   699  00FF70  20                 	db	32
   700  00FF71  20                 	db	32
   701  00FF72  20                 	db	32
   702  00FF73  3C                 	db	60	;'<'
   703  00FF74  00                 	db	0
   704  00FF75                     STR_16:
   705  00FF75  31                 	db	49	;'1'
   706  00FF76  2E                 	db	46
   707  00FF77  20                 	db	32
   708  00FF78  44                 	db	68	;'D'
   709  00FF79  41                 	db	65	;'A'
   710  00FF7A  54                 	db	84	;'T'
   711  00FF7B  45                 	db	69	;'E'
   712  00FF7C  2F                 	db	47
   713  00FF7D  54                 	db	84	;'T'
   714  00FF7E  49                 	db	73	;'I'
   715  00FF7F  4D                 	db	77	;'M'
   716  00FF80  45                 	db	69	;'E'
   717  00FF81  20                 	db	32
   718  00FF82  20                 	db	32
   719  00FF83  20                 	db	32
   720  00FF84  3C                 	db	60	;'<'
   721  00FF85  00                 	db	0
   722  00FF86                     STR_4:
   723  00FF86  50                 	db	80	;'P'
   724  00FF87  61                 	db	97	;'a'
   725  00FF88  75                 	db	117	;'u'
   726  00FF89  73                 	db	115	;'s'
   727  00FF8A  65                 	db	101	;'e'
   728  00FF8B  3A                 	db	58	;':'
   729  00FF8C  3C                 	db	60	;'<'
   730  00FF8D  20                 	db	32
   731  00FF8E  7C                 	db	124
   732  00FF8F  20                 	db	32
   733  00FF90  42                 	db	66	;'B'
   734  00FF91  61                 	db	97	;'a'
   735  00FF92  63                 	db	99	;'c'
   736  00FF93  6B                 	db	107	;'k'
   737  00FF94  3A                 	db	58	;':'
   738  00FF95  3E                 	db	62	;'>'
   739  00FF96  00                 	db	0
   740  00FF97                     STR_15:
   741  00FF97  50                 	db	80	;'P'
   742  00FF98  55                 	db	85	;'U'
   743  00FF99  53                 	db	83	;'S'
   744  00FF9A  48                 	db	72	;'H'
   745  00FF9B  20                 	db	32
   746  00FF9C  54                 	db	84	;'T'
   747  00FF9D  4F                 	db	79	;'O'
   748  00FF9E  20                 	db	32
   749  00FF9F  43                 	db	67	;'C'
   750  00FFA0  4F                 	db	79	;'O'
   751  00FFA1  4E                 	db	78	;'N'
   752  00FFA2  54                 	db	84	;'T'
   753  00FFA3  49                 	db	73	;'I'
   754  00FFA4  4E                 	db	78	;'N'
   755  00FFA5  55                 	db	85	;'U'
   756  00FFA6  45                 	db	69	;'E'
   757  00FFA7  00                 	db	0
   758  00FFA8                     STR_49:
   759  00FFA8  53                 	db	83	;'S'
   760  00FFA9  6F                 	db	111	;'o'
   761  00FFAA  72                 	db	114	;'r'
   762  00FFAB  74                 	db	116	;'t'
   763  00FFAC  69                 	db	105	;'i'
   764  00FFAD  6E                 	db	110	;'n'
   765  00FFAE  67                 	db	103	;'g'
   766  00FFAF  2E                 	db	46
   767  00FFB0  2E                 	db	46
   768  00FFB1  2E                 	db	46
   769  00FFB2  00                 	db	0
   770  00FFB3                     STR_7:
   771  00FFB3  44                 	db	68	;'D'
   772  00FFB4  75                 	db	117	;'u'
   773  00FFB5  72                 	db	114	;'r'
   774  00FFB6  61                 	db	97	;'a'
   775  00FFB7  74                 	db	116	;'t'
   776  00FFB8  69                 	db	105	;'i'
   777  00FFB9  6F                 	db	111	;'o'
   778  00FFBA  6E                 	db	110	;'n'
   779  00FFBB  3A                 	db	58	;':'
   780  00FFBC  00                 	db	0
   781  00FFBD                     STR_51:
   782  00FFBD  28                 	db	40
   783  00FFBE  6E                 	db	110	;'n'
   784  00FFBF  75                 	db	117	;'u'
   785  00FFC0  6C                 	db	108	;'l'
   786  00FFC1  6C                 	db	108	;'l'
   787  00FFC2  29                 	db	41
   788  00FFC3  00                 	db	0
   789  00FFC4                     STR_5:
   790  00FFC4  53                 	db	83	;'S'
   791  00FFC5  74                 	db	116	;'t'
   792  00FFC6  61                 	db	97	;'a'
   793  00FFC7  72                 	db	114	;'r'
   794  00FFC8  74                 	db	116	;'t'
   795  00FFC9  3A                 	db	58	;':'
   796  00FFCA  00                 	db	0
   797  00FFCB                     STR_37:
   798  00FFCB  46                 	db	70	;'F'
   799  00FFCC  65                 	db	101	;'e'
   800  00FFCD  62                 	db	98	;'b'
   801  00FFCE  00                 	db	0
   802  00FFCF                     STR_47:
   803  00FFCF  44                 	db	68	;'D'
   804  00FFD0  65                 	db	101	;'e'
   805  00FFD1  63                 	db	99	;'c'
   806  00FFD2  00                 	db	0
   807  00FFD3                     STR_43:
   808  00FFD3  41                 	db	65	;'A'
   809  00FFD4  75                 	db	117	;'u'
   810  00FFD5  67                 	db	103	;'g'
   811  00FFD6  00                 	db	0
   812  00FFD7                     STR_42:
   813  00FFD7  4A                 	db	74	;'J'
   814  00FFD8  75                 	db	117	;'u'
   815  00FFD9  6C                 	db	108	;'l'
   816  00FFDA  00                 	db	0
   817  00FFDB                     STR_36:
   818  00FFDB  4A                 	db	74	;'J'
   819  00FFDC  61                 	db	97	;'a'
   820  00FFDD  6E                 	db	110	;'n'
   821  00FFDE  00                 	db	0
   822  00FFDF                     STR_41:
   823  00FFDF  4A                 	db	74	;'J'
   824  00FFE0  75                 	db	117	;'u'
   825  00FFE1  6E                 	db	110	;'n'
   826  00FFE2  00                 	db	0
   827  00FFE3                     STR_44:
   828  00FFE3  53                 	db	83	;'S'
   829  00FFE4  65                 	db	101	;'e'
   830  00FFE5  70                 	db	112	;'p'
   831  00FFE6  00                 	db	0
   832  00FFE7                     STR_38:
   833  00FFE7  4D                 	db	77	;'M'
   834  00FFE8  61                 	db	97	;'a'
   835  00FFE9  72                 	db	114	;'r'
   836  00FFEA  00                 	db	0
   837  00FFEB                     STR_39:
   838  00FFEB  41                 	db	65	;'A'
   839  00FFEC  70                 	db	112	;'p'
   840  00FFED  72                 	db	114	;'r'
   841  00FFEE  00                 	db	0
   842  00FFEF                     STR_45:
   843  00FFEF  4F                 	db	79	;'O'
   844  00FFF0  63                 	db	99	;'c'
   845  00FFF1  74                 	db	116	;'t'
   846  00FFF2  00                 	db	0
   847  00FFF3                     STR_46:
   848  00FFF3  4E                 	db	78	;'N'
   849  00FFF4  6F                 	db	111	;'o'
   850  00FFF5  76                 	db	118	;'v'
   851  00FFF6  00                 	db	0
   852  00FFF7                     STR_40:
   853  00FFF7  4D                 	db	77	;'M'
   854  00FFF8  61                 	db	97	;'a'
   855  00FFF9  79                 	db	121	;'y'
   856  00FFFA  00                 	db	0
   857  00FFFB                     STR_14:
   858  00FFFB  31                 	db	49	;'1'
   859  00FFFC  32                 	db	50	;'2'
   860  00FFFD  00                 	db	0
   861  0000                     
   862                           ; #config settings
   863  00FFFE  00                 	db	0	; dummy byte at the end
   864  0000                     
   865                           	psect	cinit
   866  002148                     __pcinit:
   867                           	opt stack 0
   868  002148                     start_initialization:
   869                           	opt stack 0
   870  002148                     __initialization:
   871                           	opt stack 0
   872                           
   873                           ; Initialize objects allocated to BANK0 (10 bytes)
   874                           ; load TBLPTR registers with __pidataBANK0
   875  002148  0E76               	movlw	low __pidataBANK0
   876  00214A  6EF6               	movwf	tblptrl,c
   877  00214C  0E2A               	movlw	high __pidataBANK0
   878  00214E  6EF7               	movwf	tblptrh,c
   879  002150  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   880  002152  6EF8               	movwf	tblptru,c
   881  002154  EE00  F0F3         	lfsr	0,__pdataBANK0
   882  002158  EE10 F00A          	lfsr	1,10
   883  00215C                     copy_data0:
   884  00215C  0009               	tblrd		*+
   885  00215E  CFF5 FFEE          	movff	tablat,postinc0
   886  002162  50E5               	movf	postdec1,w,c
   887  002164  50E1               	movf	fsr1l,w,c
   888  002166  E1FA               	bnz	copy_data0
   889                           
   890                           ; Initialize objects allocated to COMRAM (2 bytes)
   891                           ; load TBLPTR registers with __pidataCOMRAM
   892  002168  0EB4               	movlw	low __pidataCOMRAM
   893  00216A  6EF6               	movwf	tblptrl,c
   894  00216C  0E2A               	movlw	high __pidataCOMRAM
   895  00216E  6EF7               	movwf	tblptrh,c
   896  002170  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   897  002172  6EF8               	movwf	tblptru,c
   898  002174  0009               	tblrd		*+	;fetch initializer
   899  002176  CFF5 F07D          	movff	tablat,__pdataCOMRAM
   900  00217A  0009               	tblrd		*+	;fetch initializer
   901  00217C  CFF5 F07E          	movff	tablat,__pdataCOMRAM+1
   902                           
   903                           ; Clear objects allocated to BANK1 (14 bytes)
   904  002180  EE01  F000         	lfsr	0,__pbssBANK1
   905  002184  0E0E               	movlw	14
   906  002186                     clear_0:
   907  002186  6AEE               	clrf	postinc0,c
   908  002188  06E8               	decf	wreg,f,c
   909  00218A  E1FD               	bnz	clear_0
   910                           
   911                           ; Clear objects allocated to BANK0 (31 bytes)
   912  00218C  EE00  F0D4         	lfsr	0,__pbssBANK0
   913  002190  0E1F               	movlw	31
   914  002192                     clear_1:
   915  002192  6AEE               	clrf	postinc0,c
   916  002194  06E8               	decf	wreg,f,c
   917  002196  E1FD               	bnz	clear_1
   918                           
   919                           ; Clear objects allocated to COMRAM (34 bytes)
   920  002198  EE00  F05B         	lfsr	0,__pbssCOMRAM
   921  00219C  0E22               	movlw	34
   922  00219E                     clear_2:
   923  00219E  6AEE               	clrf	postinc0,c
   924  0021A0  06E8               	decf	wreg,f,c
   925  0021A2  E1FD               	bnz	clear_2
   926  0021A4                     end_of_initialization:
   927                           	opt stack 0
   928  0021A4                     __end_of__initialization:
   929                           	opt stack 0
   930  0021A4  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   931  0021A6  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   932  0021A8  0100               	movlb	0
   933  0021AA  EF3B  F00F         	goto	_main	;jump to C main() function
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943                           	psect	bssCOMRAM
   944  00005B                     __pbssCOMRAM:
   945                           	opt stack 0
   946  00005B                     _IR_signal:
   947                           	opt stack 0
   948  00005B                     	ds	2
   949  00005D                     _TMR3CF:
   950                           	opt stack 0
   951  00005D                     	ds	2
   952  00005F                     _TMR3counter:
   953                           	opt stack 0
   954  00005F                     	ds	2
   955  000061                     _UIenabled:
   956                           	opt stack 0
   957  000061                     	ds	2
   958  000063                     _back:
   959                           	opt stack 0
   960  000063                     	ds	2
   961  000065                     _count_can_no_lab:
   962                           	opt stack 0
   963  000065                     	ds	2
   964  000067                     _count_can_w_lab:
   965                           	opt stack 0
   966  000067                     	ds	2
   967  000069                     _count_pop_no_tab:
   968                           	opt stack 0
   969  000069                     	ds	2
   970  00006B                     _count_pop_w_tab:
   971                           	opt stack 0
   972  00006B                     	ds	2
   973  00006D                     _down:
   974                           	opt stack 0
   975  00006D                     	ds	2
   976  00006F                     _enter:
   977                           	opt stack 0
   978  00006F                     	ds	2
   979  000071                     _firstboot:
   980                           	opt stack 0
   981  000071                     	ds	2
   982  000073                     _timer3highbits:
   983                           	opt stack 0
   984  000073                     	ds	2
   985  000075                     _timer3lowbits:
   986                           	opt stack 0
   987  000075                     	ds	2
   988  000077                     _up:
   989                           	opt stack 0
   990  000077                     	ds	2
   991  000079                     _was_low:
   992                           	opt stack 0
   993  000079                     	ds	2
   994  00007B                     _block:
   995                           	opt stack 0
   996  00007B                     	ds	1
   997  00007C                     _input:
   998                           	opt stack 0
   999  00007C                     	ds	1
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           postdec1	equ	0xFE5
  1007                           fsr1l	equ	0xFE1
  1008                           
  1009                           	psect	dataCOMRAM
  1010  00007D                     __pdataCOMRAM:
  1011                           	opt stack 0
  1012  00007D                     _THIR:
  1013                           	opt stack 0
  1014  00007D                     	ds	2
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024                           	psect	bssBANK0
  1025  0000D4                     __pbssBANK0:
  1026                           	opt stack 0
  1027  0000D4                     _time:
  1028                           	opt stack 0
  1029  0000D4                     	ds	7
  1030  0000DB                     _MAG_signal:
  1031                           	opt stack 0
  1032  0000DB                     	ds	2
  1033  0000DD                     _count_total:
  1034                           	opt stack 0
  1035  0000DD                     	ds	2
  1036  0000DF                     _cur_state:
  1037                           	opt stack 0
  1038  0000DF                     	ds	2
  1039  0000E1                     _f_can_coming_to_ID:
  1040                           	opt stack 0
  1041  0000E1                     	ds	2
  1042  0000E3                     _f_can_coming_to_distribution:
  1043                           	opt stack 0
  1044  0000E3                     	ds	2
  1045  0000E5                     _f_can_distributed:
  1046                           	opt stack 0
  1047  0000E5                     	ds	2
  1048  0000E7                     _f_lastCan:
  1049                           	opt stack 0
  1050  0000E7                     	ds	2
  1051  0000E9                     _f_loadingNewCan:
  1052                           	opt stack 0
  1053  0000E9                     	ds	2
  1054  0000EB                     _log:
  1055                           	opt stack 0
  1056  0000EB                     	ds	2
  1057  0000ED                     _logstate:
  1058                           	opt stack 0
  1059  0000ED                     	ds	2
  1060  0000EF                     _total_time:
  1061                           	opt stack 0
  1062  0000EF                     	ds	2
  1063  0000F1                     _canType:
  1064                           	opt stack 0
  1065  0000F1                     	ds	1
  1066  0000F2                     _machine_state:
  1067                           	opt stack 0
  1068  0000F2                     	ds	1
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1l	equ	0xFE1
  1077                           
  1078                           	psect	dataBANK0
  1079  0000F3                     __pdataBANK0:
  1080                           	opt stack 0
  1081  0000F3                     printRTC@F3205:
  1082                           	opt stack 0
  1083  0000F3                     	ds	4
  1084  0000F7                     _THMAG:
  1085                           	opt stack 0
  1086  0000F7                     	ds	2
  1087  0000F9                     _f_ID_receive:
  1088                           	opt stack 0
  1089  0000F9                     	ds	2
  1090  0000FB                     _first:
  1091                           	opt stack 0
  1092  0000FB                     	ds	2
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           postinc0	equ	0xFEE
  1098                           wreg	equ	0xFE8
  1099                           postdec1	equ	0xFE5
  1100                           fsr1l	equ	0xFE1
  1101                           
  1102                           	psect	bssBANK1
  1103  000100                     __pbssBANK1:
  1104                           	opt stack 0
  1105  000100                     _startTime:
  1106                           	opt stack 0
  1107  000100                     	ds	14
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	cstackBANK0
  1118  000080                     __pcstackBANK0:
  1119                           	opt stack 0
  1120  000080                     ??_isdigit:
  1121  000080                     ??_readADC:
  1122  000080                     ??_I2C_Master_Wait:
  1123  000080                     ?___wmul:
  1124                           	opt stack 0
  1125  000080                     ?___awmod:
  1126                           	opt stack 0
  1127  000080                     ?___lwdiv:
  1128                           	opt stack 0
  1129  000080                     ?___lldiv:
  1130                           	opt stack 0
  1131  000080                     lcdNibble@temp:
  1132                           	opt stack 0
  1133  000080                     initTime@m:
  1134                           	opt stack 0
  1135  000080                     moveServoBlock@pulse:
  1136                           	opt stack 0
  1137  000080                     set_timer1@time_us:
  1138                           	opt stack 0
  1139  000080                     ___wmul@multiplier:
  1140                           	opt stack 0
  1141  000080                     ___awmod@dividend:
  1142                           	opt stack 0
  1143  000080                     ___lwdiv@dividend:
  1144                           	opt stack 0
  1145  000080                     strcpy@to:
  1146                           	opt stack 0
  1147  000080                     ___lldiv@dividend:
  1148                           	opt stack 0
  1149                           
  1150                           ; 4 bytes @ 0x0
  1151  000080                     	ds	1
  1152  000081                     readADC@channel:
  1153                           	opt stack 0
  1154  000081                     I2C_Master_Read@a:
  1155                           	opt stack 0
  1156  000081                     lcdNibble@data:
  1157                           	opt stack 0
  1158  000081                     initTime@h:
  1159                           	opt stack 0
  1160  000081                     _isdigit$1774:
  1161                           	opt stack 0
  1162  000081                     I2C_Master_Write@d:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x1
  1166  000081                     	ds	1
  1167  000082                     ??_set_timer1:
  1168  000082                     ??_readMAG:
  1169  000082                     I2C_Master_Read@temp:
  1170                           	opt stack 0
  1171  000082                     lcdInst@data:
  1172                           	opt stack 0
  1173  000082                     putch@data:
  1174                           	opt stack 0
  1175  000082                     initTime@w:
  1176                           	opt stack 0
  1177  000082                     moveServoBlock@myPosition:
  1178                           	opt stack 0
  1179  000082                     isdigit@c:
  1180                           	opt stack 0
  1181  000082                     ___wmul@multiplicand:
  1182                           	opt stack 0
  1183  000082                     ___awmod@divisor:
  1184                           	opt stack 0
  1185  000082                     ___lwdiv@divisor:
  1186                           	opt stack 0
  1187  000082                     strcpy@from:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x2
  1191  000082                     	ds	1
  1192  000083                     ??_initLCD:
  1193  000083                     initTime@DD:
  1194                           	opt stack 0
  1195  000083                     getRTC@i:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x3
  1199  000083                     	ds	1
  1200  000084                     initTime@MM:
  1201                           	opt stack 0
  1202  000084                     ___awmod@counter:
  1203                           	opt stack 0
  1204  000084                     readMAG@res:
  1205                           	opt stack 0
  1206  000084                     set_timer1@my_time:
  1207                           	opt stack 0
  1208  000084                     ___wmul@product:
  1209                           	opt stack 0
  1210  000084                     ___lwdiv@quotient:
  1211                           	opt stack 0
  1212  000084                     strcpy@cp:
  1213                           	opt stack 0
  1214  000084                     ___lldiv@divisor:
  1215                           	opt stack 0
  1216                           
  1217                           ; 4 bytes @ 0x4
  1218  000084                     	ds	1
  1219  000085                     ??_initSortTimer:
  1220  000085                     initTime@YY:
  1221                           	opt stack 0
  1222  000085                     ___awmod@sign:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x5
  1226  000085                     	ds	1
  1227  000086                     ??_ID:
  1228  000086                     ?___awdiv:
  1229                           	opt stack 0
  1230  000086                     initTime@s:
  1231                           	opt stack 0
  1232  000086                     moveServoCup@myPosition:
  1233                           	opt stack 0
  1234  000086                     ___lwdiv@counter:
  1235                           	opt stack 0
  1236  000086                     ___awdiv@dividend:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x6
  1240  000086                     	ds	1
  1241  000087                     ?___lwmod:
  1242                           	opt stack 0
  1243  000087                     moveServoCup@pulse:
  1244                           	opt stack 0
  1245  000087                     ___lwmod@dividend:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x7
  1249  000087                     	ds	1
  1250  000088                     ID@top_bottom_conductivity:
  1251                           	opt stack 0
  1252  000088                     initSortTimer@i:
  1253                           	opt stack 0
  1254  000088                     ___awdiv@divisor:
  1255                           	opt stack 0
  1256  000088                     ___lldiv@quotient:
  1257                           	opt stack 0
  1258                           
  1259                           ; 4 bytes @ 0x8
  1260  000088                     	ds	1
  1261  000089                     ___lwmod@divisor:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x9
  1265  000089                     	ds	1
  1266  00008A                     ??_Loading:
  1267  00008A                     ___awdiv@counter:
  1268                           	opt stack 0
  1269  00008A                     ID@side_conductivity:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0xA
  1273  00008A                     	ds	1
  1274  00008B                     ___awdiv@sign:
  1275                           	opt stack 0
  1276  00008B                     ___lwmod@counter:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0xB
  1280  00008B                     	ds	1
  1281  00008C                     ___lldiv@counter:
  1282                           	opt stack 0
  1283  00008C                     ID@magnetic:
  1284                           	opt stack 0
  1285  00008C                     ___awdiv@quotient:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0xC
  1289  00008C                     	ds	1
  1290  00008D                     I2C_Master_Init@c:
  1291                           	opt stack 0
  1292                           
  1293                           ; 4 bytes @ 0xD
  1294  00008D                     	ds	1
  1295  00008E                     ?_printf:
  1296                           	opt stack 0
  1297  00008E                     printf@f:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0xE
  1301  00008E                     	ds	3
  1302  000091                     ??_I2C_Master_Init:
  1303                           
  1304                           ; 1 bytes @ 0x11
  1305  000091                     	ds	4
  1306  000095                     ??_loadRTC:
  1307                           
  1308                           ; 1 bytes @ 0x15
  1309  000095                     	ds	1
  1310  000096                     loadRTC@i:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x16
  1314  000096                     	ds	4
  1315  00009A                     ??_printf:
  1316                           
  1317                           ; 1 bytes @ 0x1A
  1318  00009A                     	ds	4
  1319  00009E                     printf@prec:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x1E
  1323  00009E                     	ds	1
  1324  00009F                     printf@ap:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x1F
  1328  00009F                     	ds	2
  1329  0000A1                     printf@cp:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x21
  1333  0000A1                     	ds	2
  1334  0000A3                     printf@val:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x23
  1338  0000A3                     	ds	2
  1339  0000A5                     printf@len:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x25
  1343  0000A5                     	ds	2
  1344  0000A7                     printf@flag:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x27
  1348  0000A7                     	ds	1
  1349  0000A8                     printf@c:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x28
  1353  0000A8                     	ds	1
  1354  0000A9                     printf@width:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x29
  1358  0000A9                     	ds	2
  1359  0000AB                     ??_printRTC:
  1360                           
  1361                           ; 1 bytes @ 0x2B
  1362  0000AB                     	ds	3
  1363  0000AE                     printRTC@INT_time:
  1364                           	opt stack 0
  1365                           
  1366                           ; 14 bytes @ 0x2E
  1367  0000AE                     	ds	14
  1368  0000BC                     printRTC@RTC_month:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x3C
  1372  0000BC                     	ds	2
  1373  0000BE                     printRTC@month:
  1374                           	opt stack 0
  1375                           
  1376                           ; 4 bytes @ 0x3E
  1377  0000BE                     	ds	4
  1378  0000C2                     printRTC@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x42
  1382  0000C2                     	ds	2
  1383  0000C4                     ??_UI:
  1384                           
  1385                           ; 1 bytes @ 0x44
  1386  0000C4                     	ds	1
  1387  0000C5                     _UI$2132:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x45
  1391  0000C5                     	ds	2
  1392  0000C7                     UI@i:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x47
  1396  0000C7                     	ds	1
  1397  0000C8                     UI@i_630:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x48
  1401  0000C8                     	ds	1
  1402  0000C9                     UI@i_631:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x49
  1406  0000C9                     	ds	1
  1407  0000CA                     UI@i_634:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x4A
  1411  0000CA                     	ds	1
  1412  0000CB                     UI@i_635:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x4B
  1416  0000CB                     	ds	1
  1417  0000CC                     UI@i_638:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x4C
  1421  0000CC                     	ds	1
  1422  0000CD                     UI@i_639:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x4D
  1426  0000CD                     	ds	1
  1427  0000CE                     UI@i_642:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x4E
  1431  0000CE                     	ds	1
  1432  0000CF                     UI@i_643:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x4F
  1436  0000CF                     	ds	1
  1437  0000D0                     UI@i_646:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x50
  1441  0000D0                     	ds	1
  1442  0000D1                     UI@i_647:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x51
  1446  0000D1                     	ds	1
  1447  0000D2                     UI@i_650:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x52
  1451  0000D2                     	ds	1
  1452  0000D3                     UI@i_651:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x53
  1456  0000D3                     	ds	1
  1457  0000D4                     tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           postdec1	equ	0xFE5
  1464                           fsr1l	equ	0xFE1
  1465                           
  1466                           ; 1 bytes @ 0x54
  1467                           
  1468                           	psect	cstackCOMRAM
  1469  000001                     __pcstackCOMRAM:
  1470                           	opt stack 0
  1471  000001                     ??i2_I2C_Master_Wait:
  1472  000001                     ??i2_isdigit:
  1473  000001                     ?i2___wmul:
  1474                           	opt stack 0
  1475  000001                     ?i2___lwmod:
  1476                           	opt stack 0
  1477  000001                     i2lcdNibble@temp:
  1478                           	opt stack 0
  1479  000001                     dispLogs@myLog:
  1480                           	opt stack 0
  1481  000001                     i2set_timer1@time_us:
  1482                           	opt stack 0
  1483  000001                     i2___wmul@multiplier:
  1484                           	opt stack 0
  1485  000001                     i2___lwmod@dividend:
  1486                           	opt stack 0
  1487  000001                     i2strcpy@to:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x0
  1491  000001                     	ds	1
  1492  000002                     i2I2C_Master_Read@a:
  1493                           	opt stack 0
  1494  000002                     i2lcdNibble@data:
  1495                           	opt stack 0
  1496  000002                     i2_isdigit$1774:
  1497                           	opt stack 0
  1498  000002                     i2I2C_Master_Write@d:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x1
  1502  000002                     	ds	1
  1503  000003                     ??i2_set_timer1:
  1504  000003                     i2I2C_Master_Read@temp:
  1505                           	opt stack 0
  1506  000003                     i2lcdInst@data:
  1507                           	opt stack 0
  1508  000003                     i2putch@data:
  1509                           	opt stack 0
  1510  000003                     i2isdigit@c:
  1511                           	opt stack 0
  1512  000003                     i2___wmul@multiplicand:
  1513                           	opt stack 0
  1514  000003                     i2___lwmod@divisor:
  1515                           	opt stack 0
  1516  000003                     i2strcpy@from:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x2
  1520  000003                     	ds	1
  1521  000004                     i2getRTC@i:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x3
  1525  000004                     	ds	1
  1526  000005                     i2___lwmod@counter:
  1527                           	opt stack 0
  1528  000005                     i2set_timer1@my_time:
  1529                           	opt stack 0
  1530  000005                     i2___wmul@product:
  1531                           	opt stack 0
  1532  000005                     i2strcpy@cp:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x4
  1536  000005                     	ds	1
  1537  000006                     ?i2___lwdiv:
  1538                           	opt stack 0
  1539  000006                     i2___lwdiv@dividend:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x5
  1543  000006                     	ds	2
  1544  000008                     i2___lwdiv@divisor:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x7
  1548  000008                     	ds	2
  1549  00000A                     i2___lwdiv@quotient:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x9
  1553  00000A                     	ds	2
  1554  00000C                     i2___lwdiv@counter:
  1555                           	opt stack 0
  1556                           
  1557                           ; 1 bytes @ 0xB
  1558  00000C                     	ds	1
  1559  00000D                     ?i2_printf:
  1560                           	opt stack 0
  1561  00000D                     i2printf@f:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0xC
  1565  00000D                     	ds	12
  1566  000019                     ??i2_printf:
  1567                           
  1568                           ; 1 bytes @ 0x18
  1569  000019                     	ds	4
  1570  00001D                     i2printf@prec:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x1C
  1574  00001D                     	ds	1
  1575  00001E                     i2printf@ap:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x1D
  1579  00001E                     	ds	2
  1580  000020                     i2printf@cp:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x1F
  1584  000020                     	ds	2
  1585  000022                     i2printf@val:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x21
  1589  000022                     	ds	2
  1590  000024                     i2printf@len:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x23
  1594  000024                     	ds	2
  1595  000026                     i2printf@flag:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0x25
  1599  000026                     	ds	1
  1600  000027                     i2printf@c:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x26
  1604  000027                     	ds	1
  1605  000028                     i2printf@width:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x27
  1609  000028                     	ds	2
  1610  00002A                     ??_printSortTimer:
  1611  00002A                     ??i2_printRTC:
  1612  00002A                     ?_inputHandler:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x29
  1616  00002A                     	ds	2
  1617  00002C                     ??_inputHandler:
  1618                           
  1619                           ; 1 bytes @ 0x2B
  1620  00002C                     	ds	1
  1621  00002D                     printSortTimer@curTime:
  1622                           	opt stack 0
  1623  00002D                     i2printRTC@INT_time:
  1624                           	opt stack 0
  1625                           
  1626                           ; 14 bytes @ 0x2C
  1627  00002D                     	ds	14
  1628  00003B                     printSortTimer@start_sec:
  1629                           	opt stack 0
  1630  00003B                     i2printRTC@RTC_month:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x3A
  1634  00003B                     	ds	2
  1635  00003D                     printSortTimer@cur_sec:
  1636                           	opt stack 0
  1637  00003D                     i2printRTC@month:
  1638                           	opt stack 0
  1639                           
  1640                           ; 4 bytes @ 0x3C
  1641  00003D                     	ds	2
  1642  00003F                     printSortTimer@hour:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x3E
  1646  00003F                     	ds	2
  1647  000041                     printSortTimer@min:
  1648                           	opt stack 0
  1649  000041                     i2printRTC@i:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x40
  1653  000041                     	ds	2
  1654  000043                     ??_updateMenu:
  1655  000043                     printSortTimer@sec:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x42
  1659  000043                     	ds	2
  1660  000045                     _printSortTimer$2253:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x44
  1664  000045                     	ds	2
  1665  000047                     printSortTimer@timeDiff:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x46
  1669  000047                     	ds	2
  1670  000049                     printSortTimer@i:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x48
  1674  000049                     	ds	2
  1675  00004B                     ??_handler:
  1676                           
  1677                           ; 1 bytes @ 0x4A
  1678  00004B                     	ds	16
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           
  1688 ;;
  1689 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1690 ;;
  1691 ;; *************** function _main *****************
  1692 ;; Defined at:
  1693 ;;		line 16 in file "main.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;		None
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;Total ram usage:        0 bytes
  1712 ;; Hardware stack levels required when called:   13
  1713 ;; This function calls:
  1714 ;;		_PortTestA5
  1715 ;;		_UI
  1716 ;;		_initLCD
  1717 ;;		_initTime
  1718 ;;		_initUI
  1719 ;;		_machineConfig
  1720 ;;		_sort
  1721 ;;		_stopSignals
  1722 ;; This function is called by:
  1723 ;;		Startup code after reset
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text0
  1728  001E76                     __ptext0:
  1729                           	opt stack 0
  1730  001E76                     _main:
  1731                           	opt stack 18
  1732                           
  1733                           ;main.c: 17: machineConfig();
  1734                           
  1735                           ;incstack = 0
  1736  001E76  EC38  F011         	call	_machineConfig	;wreg free
  1737                           
  1738                           ;main.c: 18: initLCD();
  1739  001E7A  ECE4  F011         	call	_initLCD	;wreg free
  1740                           
  1741                           ;main.c: 19: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1742  001E7E  0E44               	movlw	68
  1743  001E80  0100               	movlb	0	; () banked
  1744  001E82  6F80               	movwf	initTime@m& (0+255),b
  1745  001E84  0E19               	movlw	25
  1746  001E86  0100               	movlb	0	; () banked
  1747  001E88  6F81               	movwf	initTime@h& (0+255),b
  1748  001E8A  0E06               	movlw	6
  1749  001E8C  0100               	movlb	0	; () banked
  1750  001E8E  6F82               	movwf	initTime@w& (0+255),b
  1751  001E90  0E24               	movlw	36
  1752  001E92  0100               	movlb	0	; () banked
  1753  001E94  6F83               	movwf	initTime@DD& (0+255),b
  1754  001E96  0E02               	movlw	2
  1755  001E98  0100               	movlb	0	; () banked
  1756  001E9A  6F84               	movwf	initTime@MM& (0+255),b
  1757  001E9C  0E17               	movlw	23
  1758  001E9E  0100               	movlb	0	; () banked
  1759  001EA0  6F85               	movwf	initTime@YY& (0+255),b
  1760  001EA2  0E42               	movlw	66
  1761  001EA4  ECC1  F014         	call	_initTime
  1762                           
  1763                           ;main.c: 20: initUI();
  1764  001EA8  ECE1  F014         	call	_initUI	;wreg free
  1765                           
  1766                           ;main.c: 24: switch(machine_state){
  1767                           
  1768                           ;main.c: 23: while(1){
  1769  001EAC  D016               	goto	l5873
  1770  001EAE                     l5857:
  1771                           
  1772                           ;main.c: 26: UI();
  1773  001EAE  EC09  F000         	call	_UI	;wreg free
  1774                           
  1775                           ;main.c: 27: break;
  1776  001EB2  D013               	goto	l5873
  1777  001EB4                     l5859:
  1778                           
  1779                           ;main.c: 29: sort();
  1780  001EB4  ECB0  F014         	call	_sort	;wreg free
  1781                           
  1782                           ;main.c: 30: break;
  1783  001EB8  D010               	goto	l5873
  1784  001EBA                     l5861:
  1785                           
  1786                           ;main.c: 32: stopSignals();
  1787  001EBA  ECEE  F014         	call	_stopSignals	;wreg free
  1788                           
  1789                           ;main.c: 33: first = 1;
  1790  001EBE  0E00               	movlw	0
  1791  001EC0  0100               	movlb	0	; () banked
  1792  001EC2  6FFC               	movwf	(_first+1)& (0+255),b
  1793  001EC4  0E01               	movlw	1
  1794  001EC6  6FFB               	movwf	_first& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 34: UI();
  1798  001EC8  EC09  F000         	call	_UI	;wreg free
  1799                           
  1800                           ;main.c: 35: break;
  1801  001ECC  D006               	goto	l5873
  1802  001ECE                     l5867:
  1803                           
  1804                           ;main.c: 37: PortTestA5();
  1805  001ECE  EC0D  F015         	call	_PortTestA5	;wreg free
  1806                           
  1807                           ;main.c: 38: break;
  1808  001ED2  D003               	goto	l5873
  1809  001ED4                     l5869:
  1810                           
  1811                           ;main.c: 40: stopSignals();
  1812  001ED4  ECEE  F014         	call	_stopSignals	;wreg free
  1813  001ED8                     l784:
  1814  001ED8  D7FF               	goto	l784
  1815  001EDA                     l5873:
  1816  001EDA  0100               	movlb	0	; () banked
  1817  001EDC  51F2               	movf	_machine_state& (0+255),w,b
  1818                           
  1819                           ; Switch size 1, requested type "space"
  1820                           ; Number of cases is 5, Range of values is 0 to 4
  1821                           ; switch strategies available:
  1822                           ; Name         Instructions Cycles
  1823                           ; simple_byte           16     9 (average)
  1824                           ;	Chosen strategy is simple_byte
  1825  001EDE  0A00               	xorlw	0	; case 0
  1826  001EE0  B4D8               	btfsc	status,2,c
  1827  001EE2  D7E5               	goto	l5857
  1828  001EE4  0A01               	xorlw	1	; case 1
  1829  001EE6  B4D8               	btfsc	status,2,c
  1830  001EE8  D7E5               	goto	l5859
  1831  001EEA  0A03               	xorlw	3	; case 2
  1832  001EEC  B4D8               	btfsc	status,2,c
  1833  001EEE  D7E5               	goto	l5861
  1834  001EF0  0A01               	xorlw	1	; case 3
  1835  001EF2  B4D8               	btfsc	status,2,c
  1836  001EF4  D7EC               	goto	l5867
  1837  001EF6  0A07               	xorlw	7	; case 4
  1838  001EF8  B4D8               	btfsc	status,2,c
  1839  001EFA  D7EC               	goto	l5869
  1840                           
  1841                           ; BSR set to: 0
  1842                           
  1843                           ; BSR set to: 0
  1844  001EFC  D7EE               	goto	l5873
  1845  001EFE                     __end_of_main:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1l	equ	0xFE1
  1855                           status	equ	0xFD8
  1856                           
  1857 ;; *************** function _stopSignals *****************
  1858 ;; Defined at:
  1859 ;;		line 49 in file "main.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;		None
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;		None
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      void 
  1866 ;; Registers used:
  1867 ;;		wreg, status,2
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;Total ram usage:        0 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    7
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_main
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text1
  1888  0029DC                     __ptext1:
  1889                           	opt stack 0
  1890  0029DC                     _stopSignals:
  1891                           	opt stack 23
  1892                           
  1893                           ;main.c: 50: LATA = 0x00;
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;incstack = 0
  1897  0029DC  0E00               	movlw	0
  1898  0029DE  6E89               	movwf	3977,c	;volatile
  1899                           
  1900                           ;main.c: 51: LATB = 0x00;
  1901  0029E0  0E00               	movlw	0
  1902  0029E2  6E8A               	movwf	3978,c	;volatile
  1903                           
  1904                           ;main.c: 52: LATC = 0x00;
  1905  0029E4  0E00               	movlw	0
  1906  0029E6  6E8B               	movwf	3979,c	;volatile
  1907                           
  1908                           ;main.c: 53: LATD = 0x00;
  1909  0029E8  0E00               	movlw	0
  1910  0029EA  6E8C               	movwf	3980,c	;volatile
  1911                           
  1912                           ;main.c: 54: LATE = 0x00;
  1913  0029EC  0E00               	movlw	0
  1914  0029EE  6E8D               	movwf	3981,c	;volatile
  1915  0029F0  0012               	return		;funcret
  1916  0029F2                     __end_of_stopSignals:
  1917                           	opt stack 0
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1l	equ	0xFE1
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function _sort *****************
  1929 ;; Defined at:
  1930 ;;		line 14 in file "sort.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;Total ram usage:        0 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:   12
  1951 ;; This function calls:
  1952 ;;		_Distribution
  1953 ;;		_ID
  1954 ;;		_Loading
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text2
  1961  002960                     __ptext2:
  1962                           	opt stack 0
  1963  002960                     _sort:
  1964                           	opt stack 18
  1965                           
  1966                           ;sort.c: 15: if(machine_state == Sorting_state){
  1967                           
  1968                           ;incstack = 0
  1969  002960  0100               	movlb	0	; () banked
  1970  002962  05F2               	decf	_machine_state& (0+255),w,b
  1971  002964  B4D8               	btfsc	status,2,c
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;sort.c: 16: Loading();
  1975  002966  ECA6  F00E         	call	_Loading	;wreg free
  1976                           
  1977                           ;sort.c: 17: }
  1978                           ;sort.c: 18: if(machine_state == Sorting_state){
  1979  00296A  0100               	movlb	0	; () banked
  1980  00296C  05F2               	decf	_machine_state& (0+255),w,b
  1981  00296E  B4D8               	btfsc	status,2,c
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;sort.c: 19: ID();
  1985  002970  ECD4  F00C         	call	_ID	;wreg free
  1986                           
  1987                           ;sort.c: 20: }
  1988                           ;sort.c: 21: if(machine_state == Sorting_state){
  1989  002974  0100               	movlb	0	; () banked
  1990  002976  05F2               	decf	_machine_state& (0+255),w,b
  1991  002978  A4D8               	btfss	status,2,c
  1992  00297A  0012               	return	
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;sort.c: 22: Distribution();
  1996  00297C  EC03  F013         	call	_Distribution	;wreg free
  1997  002980  0012               	return	
  1998  002982                     __end_of_sort:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           postdec1	equ	0xFE5
  2007                           fsr1l	equ	0xFE1
  2008                           status	equ	0xFD8
  2009                           
  2010 ;; *************** function _Loading *****************
  2011 ;; Defined at:
  2012 ;;		line 26 in file "sort.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;Total ram usage:        1 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:   11
  2033 ;; This function calls:
  2034 ;;		_initFlags
  2035 ;;		_initSortTimer
  2036 ;;		_lcdInst
  2037 ;;		_moveServoCup
  2038 ;; This function is called by:
  2039 ;;		_sort
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text3
  2044  001D4C                     __ptext3:
  2045                           	opt stack 0
  2046  001D4C                     _Loading:
  2047                           	opt stack 18
  2048                           
  2049                           ;sort.c: 27: if(first){
  2050                           
  2051                           ;incstack = 0
  2052  001D4C  0100               	movlb	0	; () banked
  2053  001D4E  51FB               	movf	_first& (0+255),w,b
  2054  001D50  0100               	movlb	0	; () banked
  2055  001D52  11FC               	iorwf	(_first+1)& (0+255),w,b
  2056  001D54  B4D8               	btfsc	status,2,c
  2057  001D56  D01A               	goto	l5099
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;sort.c: 28: first = 0;
  2061  001D58  0E00               	movlw	0
  2062  001D5A  0100               	movlb	0	; () banked
  2063  001D5C  6FFC               	movwf	(_first+1)& (0+255),b
  2064  001D5E  0E00               	movlw	0
  2065  001D60  6FFB               	movwf	_first& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;sort.c: 29: initFlags();
  2069  001D62  EC28  F012         	call	_initFlags	;wreg free
  2070                           
  2071                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2072  001D66  0E01               	movlw	1
  2073  001D68  EC27  F015         	call	_lcdInst
  2074  001D6C  0E68               	movlw	104
  2075  001D6E  0100               	movlb	0	; () banked
  2076  001D70  6F8A               	movwf	??_Loading& (0+255),b
  2077  001D72  0EE4               	movlw	228
  2078  001D74                     u4717:
  2079  001D74  2EE8               	decfsz	wreg,f,c
  2080  001D76  D7FE               	bra	u4717
  2081  001D78  2F8A               	decfsz	??_Loading& (0+255),f,b
  2082  001D7A  D7FC               	bra	u4717
  2083  001D7C  F000               	nop	
  2084                           
  2085                           ;sort.c: 31: initSortTimer();
  2086  001D7E  EC00  F00E         	call	_initSortTimer	;wreg free
  2087                           
  2088                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2089  001D82  8A89               	bsf	3977,5,c	;volatile
  2090                           
  2091                           ;sort.c: 37: moveServoCup(popCanNoTab);
  2092  001D84  0E01               	movlw	1
  2093  001D86  ECFE  F00F         	call	_moveServoCup
  2094                           
  2095                           ;sort.c: 39: }
  2096  001D8A  0012               	return	
  2097  001D8C                     l5099:
  2098                           
  2099                           ;sort.c: 40: else{
  2100                           ;sort.c: 43: if(!f_loadingNewCan){
  2101  001D8C  0100               	movlb	0	; () banked
  2102  001D8E  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2103  001D90  0100               	movlb	0	; () banked
  2104  001D92  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2105  001D94  A4D8               	btfss	status,2,c
  2106  001D96  D016               	goto	l5113
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;sort.c: 47: if(!f_loadingNewCan){
  2110  001D98  0100               	movlb	0	; () banked
  2111  001D9A  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2112  001D9C  0100               	movlb	0	; () banked
  2113  001D9E  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2114  001DA0  B4D8               	btfsc	status,2,c
  2115  001DA2  0012               	return	
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;sort.c: 51: else{
  2119                           ;sort.c: 52: count_total++;
  2120                           
  2121                           ; BSR set to: 0
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;sort.c: 49: }
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;sort.c: 48: return;
  2128  001DA4  0100               	movlb	0	; () banked
  2129  001DA6  4BDD               	infsnz	_count_total& (0+255),f,b
  2130  001DA8  2BDE               	incf	(_count_total+1)& (0+255),f,b
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;sort.c: 53: if(count_total == 12){
  2134  001DAA  0E0C               	movlw	12
  2135  001DAC  0100               	movlb	0	; () banked
  2136  001DAE  19DD               	xorwf	_count_total& (0+255),w,b
  2137  001DB0  0100               	movlb	0	; () banked
  2138  001DB2  11DE               	iorwf	(_count_total+1)& (0+255),w,b
  2139  001DB4  A4D8               	btfss	status,2,c
  2140  001DB6  0012               	return	
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;sort.c: 54: f_lastCan = 1;
  2144  001DB8  0E00               	movlw	0
  2145  001DBA  0100               	movlb	0	; () banked
  2146  001DBC  6FE8               	movwf	(_f_lastCan+1)& (0+255),b
  2147  001DBE  0E01               	movlw	1
  2148  001DC0  6FE7               	movwf	_f_lastCan& (0+255),b
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;sort.c: 55: }
  2152                           ;sort.c: 56: }
  2153                           ;sort.c: 57: }
  2154                           
  2155                           ; BSR set to: 0
  2156  001DC2  0012               	return	
  2157  001DC4                     l5113:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;sort.c: 60: else if(f_ID_receive){
  2161  001DC4  0100               	movlb	0	; () banked
  2162  001DC6  51F9               	movf	_f_ID_receive& (0+255),w,b
  2163  001DC8  0100               	movlb	0	; () banked
  2164  001DCA  11FA               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2165  001DCC  B4D8               	btfsc	status,2,c
  2166  001DCE  0012               	return	
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;sort.c: 61: f_loadingNewCan = 0;
  2170  001DD0  0E00               	movlw	0
  2171  001DD2  0100               	movlb	0	; () banked
  2172  001DD4  6FEA               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2173  001DD6  0E00               	movlw	0
  2174  001DD8  6FE9               	movwf	_f_loadingNewCan& (0+255),b
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;sort.c: 62: LATAbits.LATA4 = 1;
  2178  001DDA  8889               	bsf	3977,4,c	;volatile
  2179                           
  2180                           ;sort.c: 63: f_can_coming_to_ID = 1;
  2181  001DDC  0E00               	movlw	0
  2182  001DDE  0100               	movlb	0	; () banked
  2183  001DE0  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2184  001DE2  0E01               	movlw	1
  2185  001DE4  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;sort.c: 66: LATAbits.LATA4 = 0;
  2189  001DE6  9889               	bcf	3977,4,c	;volatile
  2190                           
  2191                           ; BSR set to: 0
  2192                           
  2193                           ; BSR set to: 0
  2194  001DE8  0012               	return	
  2195  001DEA                     __end_of_Loading:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           postdec1	equ	0xFE5
  2204                           fsr1l	equ	0xFE1
  2205                           status	equ	0xFD8
  2206                           
  2207 ;; *************** function _initSortTimer *****************
  2208 ;; Defined at:
  2209 ;;		line 119 in file "sort.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  i               2    8[BANK0 ] int 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;Total ram usage:        5 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:   10
  2230 ;; This function calls:
  2231 ;;		_getRTC
  2232 ;; This function is called by:
  2233 ;;		_Loading
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text4
  2238  001C00                     __ptext4:
  2239                           	opt stack 0
  2240  001C00                     _initSortTimer:
  2241                           	opt stack 18
  2242                           
  2243                           ;sort.c: 121: getRTC();
  2244                           
  2245                           ;incstack = 0
  2246  001C00  EC7F  F00F         	call	_getRTC	;wreg free
  2247                           
  2248                           ;sort.c: 122: for(int i = 0; i < 7; i++){
  2249  001C04  0E00               	movlw	0
  2250  001C06  0100               	movlb	0	; () banked
  2251  001C08  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2252  001C0A  0E00               	movlw	0
  2253  001C0C  6F88               	movwf	initSortTimer@i& (0+255),b
  2254  001C0E                     l4773:
  2255                           
  2256                           ; BSR set to: 0
  2257  001C0E  0100               	movlb	0	; () banked
  2258  001C10  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2259  001C12  D008               	goto	l4777
  2260  001C14  0100               	movlb	0	; () banked
  2261  001C16  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2262  001C18  E140               	bnz	l4783
  2263  001C1A  0E07               	movlw	7
  2264  001C1C  0100               	movlb	0	; () banked
  2265  001C1E  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2266  001C20  B0D8               	btfsc	status,0,c
  2267  001C22  D03B               	goto	l4783
  2268  001C24                     l4777:
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;sort.c: 123: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2272  001C24  0ED4               	movlw	low _time
  2273  001C26  0100               	movlb	0	; () banked
  2274  001C28  2588               	addwf	initSortTimer@i& (0+255),w,b
  2275  001C2A  6ED9               	movwf	fsr2l,c
  2276  001C2C  0E00               	movlw	high _time
  2277  001C2E  0100               	movlb	0	; () banked
  2278  001C30  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2279  001C32  6EDA               	movwf	fsr2h,c
  2280  001C34  50DF               	movf	indf2,w,c
  2281  001C36  0100               	movlb	0	; () banked
  2282  001C38  6F85               	movwf	??_initSortTimer& (0+255),b
  2283  001C3A  0100               	movlb	0	; () banked
  2284  001C3C  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2285  001C3E  0E0F               	movlw	15
  2286  001C40  1785               	andwf	??_initSortTimer& (0+255),f,b
  2287  001C42  0E0F               	movlw	15
  2288  001C44  0100               	movlb	0	; () banked
  2289  001C46  1785               	andwf	??_initSortTimer& (0+255),f,b
  2290  001C48  0100               	movlb	0	; () banked
  2291  001C4A  5185               	movf	??_initSortTimer& (0+255),w,b
  2292  001C4C  0D0A               	mullw	10
  2293  001C4E  0ED4               	movlw	low _time
  2294  001C50  0100               	movlb	0	; () banked
  2295  001C52  2588               	addwf	initSortTimer@i& (0+255),w,b
  2296  001C54  6ED9               	movwf	fsr2l,c
  2297  001C56  0E00               	movlw	high _time
  2298  001C58  0100               	movlb	0	; () banked
  2299  001C5A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2300  001C5C  6EDA               	movwf	fsr2h,c
  2301  001C5E  50DF               	movf	indf2,w,c
  2302  001C60  0B0F               	andlw	15
  2303  001C62  0100               	movlb	0	; () banked
  2304  001C64  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2305  001C66  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2306  001C68  50F3               	movf	prodl,w,c
  2307  001C6A  0100               	movlb	0	; () banked
  2308  001C6C  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2309  001C6E  50F4               	movf	prodh,w,c
  2310  001C70  0100               	movlb	0	; () banked
  2311  001C72  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2312  001C74  90D8               	bcf	status,0,c
  2313  001C76  0100               	movlb	0	; () banked
  2314  001C78  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2315  001C7A  6ED9               	movwf	fsr2l,c
  2316  001C7C  0100               	movlb	0	; () banked
  2317  001C7E  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2318  001C80  6EDA               	movwf	fsr2h,c
  2319  001C82  0E00               	movlw	low _startTime
  2320  001C84  26D9               	addwf	fsr2l,f,c
  2321  001C86  0E01               	movlw	high _startTime
  2322  001C88  22DA               	addwfc	fsr2h,f,c
  2323  001C8A  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2324  001C8E  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2325                           
  2326                           ; BSR set to: 0
  2327  001C92  0100               	movlb	0	; () banked
  2328  001C94  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2329  001C96  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2330  001C98  D7BA               	goto	l4773
  2331  001C9A                     l4783:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;sort.c: 124: }
  2335                           ;sort.c: 126: T0CON = 0b00010111;
  2336  001C9A  0E17               	movlw	23
  2337  001C9C  6ED5               	movwf	4053,c	;volatile
  2338                           
  2339                           ;sort.c: 135: TMR0H = 0b10000101;
  2340  001C9E  0E85               	movlw	133
  2341  001CA0  6ED7               	movwf	4055,c	;volatile
  2342                           
  2343                           ;sort.c: 136: TMR0L = 0b11101110;
  2344  001CA2  0EEE               	movlw	238
  2345  001CA4  6ED6               	movwf	4054,c	;volatile
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;sort.c: 137: TMR0ON = 1;
  2349  001CA6  8ED5               	bsf	4053,7,c	;volatile
  2350                           
  2351                           ; BSR set to: 0
  2352  001CA8  0012               	return		;funcret
  2353  001CAA                     __end_of_initSortTimer:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           indf2	equ	0xFDF
  2366                           postinc2	equ	0xFDE
  2367                           postdec2	equ	0xFDD
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _initFlags *****************
  2373 ;; Defined at:
  2374 ;;		line 111 in file "sort.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;Total ram usage:        0 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    7
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_Loading
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text5
  2403  002450                     __ptext5:
  2404                           	opt stack 0
  2405  002450                     _initFlags:
  2406                           	opt stack 21
  2407                           
  2408                           ;sort.c: 112: f_loadingNewCan = 0;
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;incstack = 0
  2412  002450  0E00               	movlw	0
  2413  002452  0100               	movlb	0	; () banked
  2414  002454  6FEA               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2415  002456  0E00               	movlw	0
  2416  002458  6FE9               	movwf	_f_loadingNewCan& (0+255),b
  2417                           
  2418                           ;sort.c: 113: f_lastCan = 0;
  2419  00245A  0E00               	movlw	0
  2420  00245C  0100               	movlb	0	; () banked
  2421  00245E  6FE8               	movwf	(_f_lastCan+1)& (0+255),b
  2422  002460  0E00               	movlw	0
  2423  002462  6FE7               	movwf	_f_lastCan& (0+255),b
  2424                           
  2425                           ;sort.c: 114: f_ID_receive = 1;
  2426  002464  0E00               	movlw	0
  2427  002466  0100               	movlb	0	; () banked
  2428  002468  6FFA               	movwf	(_f_ID_receive+1)& (0+255),b
  2429  00246A  0E01               	movlw	1
  2430  00246C  6FF9               	movwf	_f_ID_receive& (0+255),b
  2431                           
  2432                           ;sort.c: 115: f_can_coming_to_ID = 0;
  2433  00246E  0E00               	movlw	0
  2434  002470  0100               	movlb	0	; () banked
  2435  002472  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2436  002474  0E00               	movlw	0
  2437  002476  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2438                           
  2439                           ;sort.c: 116: f_can_coming_to_distribution = 0;
  2440  002478  0E00               	movlw	0
  2441  00247A  0100               	movlb	0	; () banked
  2442  00247C  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2443  00247E  0E00               	movlw	0
  2444  002480  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2445                           
  2446                           ;sort.c: 117: f_can_distributed = 0;
  2447  002482  0E00               	movlw	0
  2448  002484  0100               	movlb	0	; () banked
  2449  002486  6FE6               	movwf	(_f_can_distributed+1)& (0+255),b
  2450  002488  0E00               	movlw	0
  2451  00248A  6FE5               	movwf	_f_can_distributed& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454  00248C  0012               	return		;funcret
  2455  00248E                     __end_of_initFlags:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _ID *****************
  2475 ;; Defined at:
  2476 ;;		line 70 in file "sort.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  magnetic        2   12[BANK0 ] int 
  2481 ;;  side_conduct    2   10[BANK0 ] int 
  2482 ;;  top_bottom_c    2    8[BANK0 ] int 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        8 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    9
  2499 ;; This function calls:
  2500 ;;		_moveServoBlock
  2501 ;;		_readMAG
  2502 ;; This function is called by:
  2503 ;;		_sort
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text6
  2508  0019A8                     __ptext6:
  2509                           	opt stack 0
  2510  0019A8                     _ID:
  2511                           	opt stack 20
  2512                           
  2513                           ;sort.c: 71: if(f_can_coming_to_ID){
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;incstack = 0
  2517  0019A8  0100               	movlb	0	; () banked
  2518  0019AA  51E1               	movf	_f_can_coming_to_ID& (0+255),w,b
  2519  0019AC  0100               	movlb	0	; () banked
  2520  0019AE  11E2               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2521  0019B0  B4D8               	btfsc	status,2,c
  2522  0019B2  0012               	return	
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;sort.c: 73: _delay((unsigned long)((500)*(32000000/4000.0)));
  2526  0019B4  0E15               	movlw	21
  2527  0019B6  0100               	movlb	0	; () banked
  2528  0019B8  6F87               	movwf	(??_ID+1)& (0+255),b
  2529  0019BA  0E4B               	movlw	75
  2530  0019BC  0100               	movlb	0	; () banked
  2531  0019BE  6F86               	movwf	??_ID& (0+255),b
  2532  0019C0  0EBE               	movlw	190
  2533  0019C2                     u4727:
  2534  0019C2  2EE8               	decfsz	wreg,f,c
  2535  0019C4  D7FE               	bra	u4727
  2536  0019C6  2F86               	decfsz	??_ID& (0+255),f,b
  2537  0019C8  D7FC               	bra	u4727
  2538  0019CA  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2539  0019CC  D7FA               	bra	u4727
  2540  0019CE  F000               	nop	
  2541                           
  2542                           ;sort.c: 75: int side_conductivity = 0;
  2543  0019D0  0E00               	movlw	0
  2544  0019D2  0100               	movlb	0	; () banked
  2545  0019D4  6F8B               	movwf	(ID@side_conductivity+1)& (0+255),b
  2546  0019D6  0E00               	movlw	0
  2547  0019D8  6F8A               	movwf	ID@side_conductivity& (0+255),b
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;sort.c: 76: int magnetic = 0;
  2551  0019DA  0E00               	movlw	0
  2552  0019DC  0100               	movlb	0	; () banked
  2553  0019DE  6F8D               	movwf	(ID@magnetic+1)& (0+255),b
  2554  0019E0  0E00               	movlw	0
  2555  0019E2  6F8C               	movwf	ID@magnetic& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;sort.c: 77: int top_bottom_conductivity = 0;
  2559  0019E4  0E00               	movlw	0
  2560  0019E6  0100               	movlb	0	; () banked
  2561  0019E8  6F89               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2562  0019EA  0E00               	movlw	0
  2563  0019EC  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;sort.c: 79: side_conductivity = PORTAbits.RA2;
  2567  0019EE  A480               	btfss	3968,2,c	;volatile
  2568  0019F0  D004               	goto	u3500
  2569  0019F2  0100               	movlb	0	; () banked
  2570  0019F4  6B86               	clrf	??_ID& (0+255),b
  2571  0019F6  2B86               	incf	??_ID& (0+255),f,b
  2572  0019F8  D002               	goto	u3508
  2573  0019FA                     u3500:
  2574  0019FA  0100               	movlb	0	; () banked
  2575  0019FC  6B86               	clrf	??_ID& (0+255),b
  2576  0019FE                     u3508:
  2577  0019FE  0100               	movlb	0	; () banked
  2578  001A00  5186               	movf	??_ID& (0+255),w,b
  2579  001A02  0100               	movlb	0	; () banked
  2580  001A04  6F8A               	movwf	ID@side_conductivity& (0+255),b
  2581  001A06  6B8B               	clrf	(ID@side_conductivity+1)& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;sort.c: 80: if(!side_conductivity){
  2585  001A08  0100               	movlb	0	; () banked
  2586  001A0A  518A               	movf	ID@side_conductivity& (0+255),w,b
  2587  001A0C  0100               	movlb	0	; () banked
  2588  001A0E  118B               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2589  001A10  A4D8               	btfss	status,2,c
  2590  001A12  D028               	goto	l5149
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;sort.c: 81: readMAG();
  2594  001A14  EC65  F011         	call	_readMAG	;wreg free
  2595                           
  2596                           ;sort.c: 82: magnetic = MAG_signal;
  2597  001A18  C0DB  F08C         	movff	_MAG_signal,ID@magnetic
  2598  001A1C  C0DC  F08D         	movff	_MAG_signal+1,ID@magnetic+1
  2599                           
  2600                           ;sort.c: 83: if(!magnetic){
  2601  001A20  0100               	movlb	0	; () banked
  2602  001A22  518C               	movf	ID@magnetic& (0+255),w,b
  2603  001A24  0100               	movlb	0	; () banked
  2604  001A26  118D               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2605  001A28  A4D8               	btfss	status,2,c
  2606  001A2A  D01C               	goto	l5149
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;sort.c: 84: LATAbits.LATA3 = 1;
  2610  001A2C  8689               	bsf	3977,3,c	;volatile
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;sort.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
  2614  001A2E  0E05               	movlw	5
  2615  001A30  0100               	movlb	0	; () banked
  2616  001A32  6F87               	movwf	(??_ID+1)& (0+255),b
  2617  001A34  0E0F               	movlw	15
  2618  001A36  0100               	movlb	0	; () banked
  2619  001A38  6F86               	movwf	??_ID& (0+255),b
  2620  001A3A  0EF1               	movlw	241
  2621  001A3C                     u4737:
  2622  001A3C  2EE8               	decfsz	wreg,f,c
  2623  001A3E  D7FE               	bra	u4737
  2624  001A40  2F86               	decfsz	??_ID& (0+255),f,b
  2625  001A42  D7FC               	bra	u4737
  2626  001A44  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2627  001A46  D7FA               	bra	u4737
  2628                           
  2629                           ;sort.c: 87: top_bottom_conductivity = PORTAbits.RA2;
  2630  001A48  A480               	btfss	3968,2,c	;volatile
  2631  001A4A  D004               	goto	u3530
  2632  001A4C  0100               	movlb	0	; () banked
  2633  001A4E  6B86               	clrf	??_ID& (0+255),b
  2634  001A50  2B86               	incf	??_ID& (0+255),f,b
  2635  001A52  D002               	goto	u3538
  2636  001A54                     u3530:
  2637  001A54  0100               	movlb	0	; () banked
  2638  001A56  6B86               	clrf	??_ID& (0+255),b
  2639  001A58                     u3538:
  2640  001A58  0100               	movlb	0	; () banked
  2641  001A5A  5186               	movf	??_ID& (0+255),w,b
  2642  001A5C  0100               	movlb	0	; () banked
  2643  001A5E  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  2644  001A60  6B89               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;sort.c: 88: LATAbits.LATA3 = 0;
  2648  001A62  9689               	bcf	3977,3,c	;volatile
  2649  001A64                     l5149:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;sort.c: 89: }
  2653                           ;sort.c: 90: }
  2654                           ;sort.c: 93: moveServoBlock(Lower);
  2655  001A64  0E01               	movlw	1
  2656  001A66  EC7F  F012         	call	_moveServoBlock
  2657                           
  2658                           ;sort.c: 95: f_can_coming_to_distribution = 1;
  2659  001A6A  0E00               	movlw	0
  2660  001A6C  0100               	movlb	0	; () banked
  2661  001A6E  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2662  001A70  0E01               	movlw	1
  2663  001A72  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;sort.c: 96: moveServoBlock(Raise);
  2667  001A74  0E00               	movlw	0
  2668  001A76  EC7F  F012         	call	_moveServoBlock
  2669                           
  2670                           ;sort.c: 97: f_can_coming_to_ID = 0;
  2671  001A7A  0E00               	movlw	0
  2672  001A7C  0100               	movlb	0	; () banked
  2673  001A7E  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2674  001A80  0E00               	movlw	0
  2675  001A82  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2676  001A84  0012               	return	
  2677  001A86                     __end_of_ID:
  2678                           	opt stack 0
  2679                           tblptru	equ	0xFF8
  2680                           tblptrh	equ	0xFF7
  2681                           tblptrl	equ	0xFF6
  2682                           tablat	equ	0xFF5
  2683                           prodh	equ	0xFF4
  2684                           prodl	equ	0xFF3
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _readMAG *****************
  2697 ;; Defined at:
  2698 ;;		line 28 in file "ADCFunctionality.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;		None
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  res             2    4[BANK0 ] int 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;Total ram usage:        4 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    8
  2719 ;; This function calls:
  2720 ;;		_readADC
  2721 ;; This function is called by:
  2722 ;;		_ID
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text7
  2727  0022CA                     __ptext7:
  2728                           	opt stack 0
  2729  0022CA                     _readMAG:
  2730                           	opt stack 20
  2731                           
  2732                           ;ADCFunctionality.c: 29: readADC(1);
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;incstack = 0
  2736  0022CA  0E01               	movlw	1
  2737  0022CC  EC21  F014         	call	_readADC
  2738                           
  2739                           ;ADCFunctionality.c: 30: int res = ADRESH<<8 | ADRESL;
  2740  0022D0  50C3               	movf	4035,w,c	;volatile
  2741  0022D2  CFC4 F082          	movff	4036,??_readMAG	;volatile
  2742  0022D6  0100               	movlb	0	; () banked
  2743  0022D8  6B83               	clrf	(??_readMAG+1)& (0+255),b
  2744  0022DA  C082  F083         	movff	??_readMAG,??_readMAG+1
  2745  0022DE  0100               	movlb	0	; () banked
  2746  0022E0  6B82               	clrf	??_readMAG& (0+255),b
  2747  0022E2  0100               	movlb	0	; () banked
  2748  0022E4  1182               	iorwf	??_readMAG& (0+255),w,b
  2749  0022E6  0100               	movlb	0	; () banked
  2750  0022E8  6F84               	movwf	readMAG@res& (0+255),b
  2751  0022EA  0100               	movlb	0	; () banked
  2752  0022EC  5183               	movf	(??_readMAG+1)& (0+255),w,b
  2753  0022EE  0100               	movlb	0	; () banked
  2754  0022F0  6F85               	movwf	(readMAG@res+1)& (0+255),b
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;ADCFunctionality.c: 31: MAG_signal = (res < THMAG) ? 1 : 0;
  2758  0022F2  0100               	movlb	0	; () banked
  2759  0022F4  51F7               	movf	_THMAG& (0+255),w,b
  2760  0022F6  0100               	movlb	0	; () banked
  2761  0022F8  5D84               	subwf	readMAG@res& (0+255),w,b
  2762  0022FA  0100               	movlb	0	; () banked
  2763  0022FC  5185               	movf	(readMAG@res+1)& (0+255),w,b
  2764  0022FE  0A80               	xorlw	128
  2765  002300  0100               	movlb	0	; () banked
  2766  002302  6F82               	movwf	??_readMAG& (0+255),b
  2767  002304  0100               	movlb	0	; () banked
  2768  002306  51F8               	movf	(_THMAG+1)& (0+255),w,b
  2769  002308  0A80               	xorlw	128
  2770  00230A  0100               	movlb	0	; () banked
  2771  00230C  5982               	subwfb	??_readMAG& (0+255),w,b
  2772  00230E  B0D8               	btfsc	status,0,c
  2773  002310  D002               	goto	u3220
  2774  002312  0E01               	movlw	1
  2775  002314  D001               	goto	u3230
  2776  002316                     u3220:
  2777  002316  0E00               	movlw	0
  2778  002318                     u3230:
  2779  002318  0100               	movlb	0	; () banked
  2780  00231A  6FDB               	movwf	_MAG_signal& (0+255),b
  2781  00231C  6BDC               	clrf	(_MAG_signal+1)& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784  00231E  0012               	return		;funcret
  2785  002320                     __end_of_readMAG:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _readADC *****************
  2805 ;; Defined at:
  2806 ;;		line 14 in file "ADCFunctionality.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  channel         1    wreg     unsigned char 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  channel         1    1[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        2 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    7
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_readMAG
  2831 ;;		_readIR
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text8
  2836  002842                     __ptext8:
  2837                           	opt stack 0
  2838  002842                     _readADC:
  2839                           	opt stack 20
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;incstack = 0
  2843                           ;readADC@channel stored from wreg
  2844  002842  0100               	movlb	0	; () banked
  2845  002844  6F81               	movwf	readADC@channel& (0+255),b
  2846                           
  2847                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  2848  002846  0100               	movlb	0	; () banked
  2849  002848  4581               	rlncf	readADC@channel& (0+255),w,b
  2850  00284A  46E8               	rlncf	wreg,f,c
  2851  00284C  0BFC               	andlw	252
  2852  00284E  6EC2               	movwf	4034,c	;volatile
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;ADCFunctionality.c: 17: ADON = 1;
  2856  002850  80C2               	bsf	4034,0,c	;volatile
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  2860  002852  82C2               	bsf	4034,1,c	;volatile
  2861                           
  2862                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  2863  002854  D009               	goto	l4281
  2864  002856                     l4279:
  2865  002856  0E34               	movlw	52
  2866  002858  0100               	movlb	0	; () banked
  2867  00285A  6F80               	movwf	??_readADC& (0+255),b
  2868  00285C  0EF1               	movlw	241
  2869  00285E                     u4747:
  2870  00285E  2EE8               	decfsz	wreg,f,c
  2871  002860  D7FE               	bra	u4747
  2872  002862  2F80               	decfsz	??_readADC& (0+255),f,b
  2873  002864  D7FC               	bra	u4747
  2874  002866  D000               	nop2	
  2875  002868                     l4281:
  2876  002868  A2C2               	btfss	4034,1,c	;volatile
  2877  00286A  0012               	return	
  2878  00286C  D7F4               	goto	l4279
  2879  00286E                     __end_of_readADC:
  2880                           	opt stack 0
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           postinc2	equ	0xFDE
  2893                           postdec2	equ	0xFDD
  2894                           fsr2h	equ	0xFDA
  2895                           fsr2l	equ	0xFD9
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _moveServoBlock *****************
  2899 ;; Defined at:
  2900 ;;		line 189 in file "sort.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  myPosition      1    wreg     enum E3138
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  myPosition      1    2[BANK0 ] enum E3138
  2905 ;;  pulse           2    0[BANK0 ] int 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;Total ram usage:        3 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    7
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_ID
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text9
  2930  0024FE                     __ptext9:
  2931                           	opt stack 0
  2932  0024FE                     _moveServoBlock:
  2933                           	opt stack 21
  2934                           
  2935                           ;incstack = 0
  2936                           ;moveServoBlock@myPosition stored from wreg
  2937  0024FE  0100               	movlb	0	; () banked
  2938  002500  6F82               	movwf	moveServoBlock@myPosition& (0+255),b
  2939                           
  2940                           ;sort.c: 191: int pulse;
  2941                           ;sort.c: 192: switch(myPosition){
  2942  002502  D00B               	goto	l4815
  2943  002504                     l4809:
  2944                           
  2945                           ;sort.c: 195: pulse = 2000;
  2946  002504  0E07               	movlw	7
  2947  002506  0100               	movlb	0	; () banked
  2948  002508  6F81               	movwf	(moveServoBlock@pulse+1)& (0+255),b
  2949  00250A  0ED0               	movlw	208
  2950  00250C  D004               	goto	L1
  2951  00250E                     l4811:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;sort.c: 199: pulse = 1000;
  2955  00250E  0E03               	movlw	3
  2956  002510  0100               	movlb	0	; () banked
  2957  002512  6F81               	movwf	(moveServoBlock@pulse+1)& (0+255),b
  2958  002514  0EE8               	movlw	232
  2959  002516                     L1:
  2960  002516  6F80               	movwf	moveServoBlock@pulse& (0+255),b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;sort.c: 203: }
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;sort.c: 202: break;
  2967                           
  2968                           ;sort.c: 201: default:
  2969                           
  2970                           ;sort.c: 200: break;
  2971  002518  D008               	goto	l4817
  2972  00251A                     l4815:
  2973  00251A  0100               	movlb	0	; () banked
  2974  00251C  5182               	movf	moveServoBlock@myPosition& (0+255),w,b
  2975                           
  2976                           ; Switch size 1, requested type "space"
  2977                           ; Number of cases is 2, Range of values is 0 to 1
  2978                           ; switch strategies available:
  2979                           ; Name         Instructions Cycles
  2980                           ; simple_byte            7     4 (average)
  2981                           ;	Chosen strategy is simple_byte
  2982  00251E  0A00               	xorlw	0	; case 0
  2983  002520  B4D8               	btfsc	status,2,c
  2984  002522  D7F0               	goto	l4809
  2985  002524  0A01               	xorlw	1	; case 1
  2986  002526  B4D8               	btfsc	status,2,c
  2987  002528  D7F2               	goto	l4811
  2988  00252A                     l4817:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;sort.c: 205: was_low = 0;
  2992  00252A  0E00               	movlw	0
  2993  00252C  6E7A               	movwf	_was_low+1,c
  2994  00252E  0E00               	movlw	0
  2995  002530  6E79               	movwf	_was_low,c
  2996                           
  2997                           ; BSR set to: 0
  2998  002532  0012               	return		;funcret
  2999  002534                     __end_of_moveServoBlock:
  3000                           	opt stack 0
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           prodh	equ	0xFF4
  3006                           prodl	equ	0xFF3
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           postdec1	equ	0xFE5
  3010                           fsr1l	equ	0xFE1
  3011                           indf2	equ	0xFDF
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _Distribution *****************
  3019 ;; Defined at:
  3020 ;;		line 100 in file "sort.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    9
  3041 ;; This function calls:
  3042 ;;		_moveServoCup
  3043 ;; This function is called by:
  3044 ;;		_sort
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text10
  3049  002606                     __ptext10:
  3050                           	opt stack 0
  3051  002606                     _Distribution:
  3052                           	opt stack 20
  3053                           
  3054                           ;sort.c: 101: if(f_can_coming_to_distribution){
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;incstack = 0
  3058  002606  0100               	movlb	0	; () banked
  3059  002608  51E3               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3060  00260A  0100               	movlb	0	; () banked
  3061  00260C  11E4               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3062  00260E  B4D8               	btfsc	status,2,c
  3063  002610  0012               	return	
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;sort.c: 103: moveServoCup(canType);
  3067  002612  0100               	movlb	0	; () banked
  3068  002614  51F1               	movf	_canType& (0+255),w,b
  3069  002616  ECFE  F00F         	call	_moveServoCup
  3070                           
  3071                           ;sort.c: 105: moveServoCup(Home);
  3072  00261A  0E00               	movlw	0
  3073  00261C  ECFE  F00F         	call	_moveServoCup
  3074                           
  3075                           ;sort.c: 106: f_can_coming_to_distribution = 0;
  3076  002620  0E00               	movlw	0
  3077  002622  0100               	movlb	0	; () banked
  3078  002624  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3079  002626  0E00               	movlw	0
  3080  002628  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;sort.c: 107: f_can_distributed = 1;
  3084  00262A  0E00               	movlw	0
  3085  00262C  0100               	movlb	0	; () banked
  3086  00262E  6FE6               	movwf	(_f_can_distributed+1)& (0+255),b
  3087  002630  0E01               	movlw	1
  3088  002632  6FE5               	movwf	_f_can_distributed& (0+255),b
  3089  002634  0012               	return	
  3090  002636                     __end_of_Distribution:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           postinc0	equ	0xFEE
  3099                           wreg	equ	0xFE8
  3100                           postdec1	equ	0xFE5
  3101                           fsr1l	equ	0xFE1
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _moveServoCup *****************
  3110 ;; Defined at:
  3111 ;;		line 207 in file "sort.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  myPosition      1    wreg     enum E3131
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  myPosition      1    6[BANK0 ] enum E3131
  3116 ;;  pulse           2    7[BANK0 ] int 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;Total ram usage:        3 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    8
  3133 ;; This function calls:
  3134 ;;		_set_timer1
  3135 ;; This function is called by:
  3136 ;;		_Loading
  3137 ;;		_Distribution
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text11
  3142  001FFC                     __ptext11:
  3143                           	opt stack 0
  3144  001FFC                     _moveServoCup:
  3145                           	opt stack 20
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;incstack = 0
  3149                           ;moveServoCup@myPosition stored from wreg
  3150  001FFC  0100               	movlb	0	; () banked
  3151  001FFE  6F86               	movwf	moveServoCup@myPosition& (0+255),b
  3152                           
  3153                           ;sort.c: 209: int pulse;
  3154                           ;sort.c: 210: switch(myPosition){
  3155  002000  D01A               	goto	l4801
  3156  002002                     l4789:
  3157                           
  3158                           ;sort.c: 212: pulse = 1500;
  3159  002002  0E05               	movlw	5
  3160  002004  0100               	movlb	0	; () banked
  3161  002006  6F88               	movwf	(moveServoCup@pulse+1)& (0+255),b
  3162  002008  0EDC               	movlw	220
  3163  00200A  D013               	goto	L5
  3164  00200C                     l4791:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;sort.c: 216: pulse = 1000;
  3168  00200C  0E03               	movlw	3
  3169  00200E  0100               	movlb	0	; () banked
  3170  002010  6F88               	movwf	(moveServoCup@pulse+1)& (0+255),b
  3171  002012  0EE8               	movlw	232
  3172  002014  D00E               	goto	L5
  3173  002016                     l4793:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 220: pulse = 1333;
  3177  002016  0E05               	movlw	5
  3178  002018  0100               	movlb	0	; () banked
  3179  00201A  6F88               	movwf	(moveServoCup@pulse+1)& (0+255),b
  3180  00201C  0E35               	movlw	53
  3181  00201E  D009               	goto	L5
  3182  002020                     l4795:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;sort.c: 224: pulse = 1666;
  3186  002020  0E06               	movlw	6
  3187  002022  0100               	movlb	0	; () banked
  3188  002024  6F88               	movwf	(moveServoCup@pulse+1)& (0+255),b
  3189  002026  0E82               	movlw	130
  3190  002028  D004               	goto	L5
  3191  00202A                     l4797:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;sort.c: 228: pulse = 2000;
  3195  00202A  0E07               	movlw	7
  3196  00202C  0100               	movlb	0	; () banked
  3197  00202E  6F88               	movwf	(moveServoCup@pulse+1)& (0+255),b
  3198  002030  0ED0               	movlw	208
  3199  002032                     L5:
  3200  002032  6F87               	movwf	moveServoCup@pulse& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;sort.c: 232: }
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;sort.c: 231: break;
  3207                           
  3208                           ;sort.c: 230: default:
  3209                           
  3210                           ;sort.c: 229: break;
  3211  002034  D011               	goto	l4803
  3212  002036                     l4801:
  3213  002036  0100               	movlb	0	; () banked
  3214  002038  5186               	movf	moveServoCup@myPosition& (0+255),w,b
  3215                           
  3216                           ; Switch size 1, requested type "space"
  3217                           ; Number of cases is 5, Range of values is 0 to 4
  3218                           ; switch strategies available:
  3219                           ; Name         Instructions Cycles
  3220                           ; simple_byte           16     9 (average)
  3221                           ;	Chosen strategy is simple_byte
  3222  00203A  0A00               	xorlw	0	; case 0
  3223  00203C  B4D8               	btfsc	status,2,c
  3224  00203E  D7E1               	goto	l4789
  3225  002040  0A01               	xorlw	1	; case 1
  3226  002042  B4D8               	btfsc	status,2,c
  3227  002044  D7E3               	goto	l4791
  3228  002046  0A03               	xorlw	3	; case 2
  3229  002048  B4D8               	btfsc	status,2,c
  3230  00204A  D7E5               	goto	l4793
  3231  00204C  0A01               	xorlw	1	; case 3
  3232  00204E  B4D8               	btfsc	status,2,c
  3233  002050  D7E7               	goto	l4795
  3234  002052  0A07               	xorlw	7	; case 4
  3235  002054  B4D8               	btfsc	status,2,c
  3236  002056  D7E9               	goto	l4797
  3237  002058                     l4803:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;sort.c: 234: set_timer1(pulse);
  3241  002058  C087  F080         	movff	moveServoCup@pulse,set_timer1@time_us
  3242  00205C  C088  F081         	movff	moveServoCup@pulse+1,set_timer1@time_us+1
  3243  002060  ECD0  F012         	call	_set_timer1	;wreg free
  3244                           
  3245                           ;sort.c: 235: was_low = 0;
  3246  002064  0E00               	movlw	0
  3247  002066  6E7A               	movwf	_was_low+1,c
  3248  002068  0E00               	movlw	0
  3249  00206A  6E79               	movwf	_was_low,c
  3250  00206C  0012               	return		;funcret
  3251  00206E                     __end_of_moveServoCup:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           postdec1	equ	0xFE5
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _set_timer1 *****************
  3271 ;; Defined at:
  3272 ;;		line 238 in file "sort.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  time_us         2    0[BANK0 ] int 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  my_time         2    4[BANK0 ] unsigned int 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3286 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;Total ram usage:        6 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    7
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_moveServoCup
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text12
  3301  0025A0                     __ptext12:
  3302                           	opt stack 0
  3303  0025A0                     _set_timer1:
  3304                           	opt stack 20
  3305                           
  3306                           ;sort.c: 239: unsigned int my_time = 65535 - time_us;
  3307                           
  3308                           ;incstack = 0
  3309  0025A0  C080  F082         	movff	set_timer1@time_us,??_set_timer1
  3310  0025A4  C081  F083         	movff	set_timer1@time_us+1,??_set_timer1+1
  3311  0025A8  0100               	movlb	0	; () banked
  3312  0025AA  1F82               	comf	??_set_timer1& (0+255),f,b
  3313  0025AC  1F83               	comf	(??_set_timer1+1)& (0+255),f,b
  3314  0025AE  4B82               	infsnz	??_set_timer1& (0+255),f,b
  3315  0025B0  2B83               	incf	(??_set_timer1+1)& (0+255),f,b
  3316  0025B2  0EFF               	movlw	255
  3317  0025B4  0100               	movlb	0	; () banked
  3318  0025B6  2582               	addwf	??_set_timer1& (0+255),w,b
  3319  0025B8  0100               	movlb	0	; () banked
  3320  0025BA  6F84               	movwf	set_timer1@my_time& (0+255),b
  3321  0025BC  0EFF               	movlw	255
  3322  0025BE  0100               	movlb	0	; () banked
  3323  0025C0  2183               	addwfc	(??_set_timer1+1)& (0+255),w,b
  3324  0025C2  0100               	movlb	0	; () banked
  3325  0025C4  6F85               	movwf	(set_timer1@my_time+1)& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;sort.c: 240: TMR1H = my_time >> 8;
  3329  0025C6  0100               	movlb	0	; () banked
  3330  0025C8  5185               	movf	(set_timer1@my_time+1)& (0+255),w,b
  3331  0025CA  6ECF               	movwf	4047,c	;volatile
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;sort.c: 241: TMR1L = my_time & 0xFF;
  3335  0025CC  C084  FFCE         	movff	set_timer1@my_time,4046	;volatile
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 242: TMR1ON = 1;
  3339  0025D0  80CD               	bsf	4045,0,c	;volatile
  3340                           
  3341                           ; BSR set to: 0
  3342  0025D2  0012               	return		;funcret
  3343  0025D4                     __end_of_set_timer1:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           postinc0	equ	0xFEE
  3352                           wreg	equ	0xFE8
  3353                           postdec1	equ	0xFE5
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           fsr2h	equ	0xFDA
  3359                           fsr2l	equ	0xFD9
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function _machineConfig *****************
  3363 ;; Defined at:
  3364 ;;		line 14 in file "MachineConfig.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    7
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text13
  3393  002270                     __ptext13:
  3394                           	opt stack 0
  3395  002270                     _machineConfig:
  3396                           	opt stack 23
  3397                           
  3398                           ;MachineConfig.c: 16: OSCCON = 0xF0;
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;incstack = 0
  3402  002270  0EF0               	movlw	240
  3403  002272  6ED3               	movwf	4051,c	;volatile
  3404                           
  3405                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3406  002274  8C9B               	bsf	3995,6,c	;volatile
  3407                           
  3408                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3409  002276  0E47               	movlw	71
  3410  002278  6E92               	movwf	3986,c	;volatile
  3411                           
  3412                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3413  00227A  0EF2               	movlw	242
  3414  00227C  6E93               	movwf	3987,c	;volatile
  3415                           
  3416                           ;MachineConfig.c: 26: TRISC = 0x00;
  3417  00227E  0E00               	movlw	0
  3418  002280  6E94               	movwf	3988,c	;volatile
  3419                           
  3420                           ;MachineConfig.c: 30: TRISD = 0x00;
  3421  002282  0E00               	movlw	0
  3422  002284  6E95               	movwf	3989,c	;volatile
  3423                           
  3424                           ;MachineConfig.c: 33: TRISE = 0x00;
  3425  002286  0E00               	movlw	0
  3426  002288  6E96               	movwf	3990,c	;volatile
  3427                           
  3428                           ;MachineConfig.c: 36: LATA = 0x00;
  3429  00228A  0E00               	movlw	0
  3430  00228C  6E89               	movwf	3977,c	;volatile
  3431                           
  3432                           ;MachineConfig.c: 37: LATB = 0x00;
  3433  00228E  0E00               	movlw	0
  3434  002290  6E8A               	movwf	3978,c	;volatile
  3435                           
  3436                           ;MachineConfig.c: 38: LATC = 0x00;
  3437  002292  0E00               	movlw	0
  3438  002294  6E8B               	movwf	3979,c	;volatile
  3439                           
  3440                           ;MachineConfig.c: 39: LATD = 0x00;
  3441  002296  0E00               	movlw	0
  3442  002298  6E8C               	movwf	3980,c	;volatile
  3443                           
  3444                           ;MachineConfig.c: 40: LATE = 0x00;
  3445  00229A  0E00               	movlw	0
  3446  00229C  6E8D               	movwf	3981,c	;volatile
  3447                           
  3448                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3449  00229E  0E00               	movlw	0
  3450  0022A0  6EC2               	movwf	4034,c	;volatile
  3451                           
  3452                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3453  0022A2  0E0D               	movlw	13
  3454  0022A4  6EC1               	movwf	4033,c	;volatile
  3455                           
  3456                           ;MachineConfig.c: 47: VCFG1 = 0;
  3457  0022A6  9AC1               	bcf	4033,5,c	;volatile
  3458                           
  3459                           ;MachineConfig.c: 48: VCFG0 = 0;
  3460  0022A8  98C1               	bcf	4033,4,c	;volatile
  3461                           
  3462                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3463  0022AA  0E00               	movlw	0
  3464  0022AC  6EB5               	movwf	4021,c	;volatile
  3465                           
  3466                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3467  0022AE  96B4               	bcf	4020,3,c	;volatile
  3468                           
  3469                           ;MachineConfig.c: 51: ADFM = 1;
  3470  0022B0  8EC0               	bsf	4032,7,c	;volatile
  3471                           
  3472                           ;MachineConfig.c: 52: nRBPU = 0;
  3473  0022B2  9EF1               	bcf	intcon2,7,c	;volatile
  3474                           
  3475                           ;MachineConfig.c: 55: INT1IE = 1;
  3476  0022B4  86F0               	bsf	intcon3,3,c	;volatile
  3477                           
  3478                           ;MachineConfig.c: 57: TMR0IE = 1;
  3479  0022B6  8AF2               	bsf	intcon,5,c	;volatile
  3480                           
  3481                           ;MachineConfig.c: 58: TMR1IE = 1;
  3482  0022B8  809D               	bsf	3997,0,c	;volatile
  3483                           
  3484                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  3485  0022BA  0EB0               	movlw	176
  3486  0022BC  6ECD               	movwf	4045,c	;volatile
  3487                           
  3488                           ;MachineConfig.c: 60: TMR2IE = 1;
  3489  0022BE  829D               	bsf	3997,1,c	;volatile
  3490                           
  3491                           ;MachineConfig.c: 61: TMR3IE = 1;
  3492  0022C0  82A0               	bsf	4000,1,c	;volatile
  3493                           
  3494                           ;MachineConfig.c: 62: PEIE = 1;
  3495  0022C2  8CF2               	bsf	intcon,6,c	;volatile
  3496                           
  3497                           ;MachineConfig.c: 64: ADIE = 1;
  3498  0022C4  8C9D               	bsf	3997,6,c	;volatile
  3499                           
  3500                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  3501  0022C6  9EF2               	bcf	intcon,7,c	;volatile
  3502  0022C8  0012               	return		;funcret
  3503  0022CA                     __end_of_machineConfig:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           intcon2	equ	0xFF1
  3513                           intcon3	equ	0xFF0
  3514                           postinc0	equ	0xFEE
  3515                           wreg	equ	0xFE8
  3516                           postdec1	equ	0xFE5
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _initUI *****************
  3526 ;; Defined at:
  3527 ;;		line 61 in file "UI.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:   12
  3548 ;; This function calls:
  3549 ;;		_change_state_to_menu_start
  3550 ;;		_loadRTC
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text14
  3557  0029C2                     __ptext14:
  3558                           	opt stack 0
  3559  0029C2                     _initUI:
  3560                           	opt stack 18
  3561                           
  3562                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3563                           
  3564                           ;incstack = 0
  3565  0029C2  8EF2               	bsf	intcon,7,c	;volatile
  3566                           
  3567                           ;UI.c: 63: machine_state = UI_state;
  3568  0029C4  0E00               	movlw	0
  3569  0029C6  0100               	movlb	0	; () banked
  3570  0029C8  6FF2               	movwf	_machine_state& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;UI.c: 65: loadRTC();
  3574  0029CA  ECF5  F00E         	call	_loadRTC	;wreg free
  3575                           
  3576                           ;UI.c: 67: change_state_to_menu_start();
  3577  0029CE  EC37  F014         	call	_change_state_to_menu_start	;wreg free
  3578                           
  3579                           ;UI.c: 68: firstboot = 1;
  3580  0029D2  0E00               	movlw	0
  3581  0029D4  6E72               	movwf	_firstboot+1,c
  3582  0029D6  0E01               	movlw	1
  3583  0029D8  6E71               	movwf	_firstboot,c
  3584  0029DA  0012               	return		;funcret
  3585  0029DC                     __end_of_initUI:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           intcon2	equ	0xFF1
  3595                           intcon3	equ	0xFF0
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           postdec1	equ	0xFE5
  3599                           fsr1l	equ	0xFE1
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _loadRTC *****************
  3608 ;; Defined at:
  3609 ;;		line 27 in file "RTC.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  i               2   22[BANK0 ] int 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;Total ram usage:        3 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    9
  3630 ;; This function calls:
  3631 ;;		_I2C_Master_Init
  3632 ;;		_I2C_Master_Start
  3633 ;;		_I2C_Master_Stop
  3634 ;;		_I2C_Master_Write
  3635 ;; This function is called by:
  3636 ;;		_initUI
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text15
  3641  001DEA                     __ptext15:
  3642                           	opt stack 0
  3643  001DEA                     _loadRTC:
  3644                           	opt stack 20
  3645                           
  3646                           ;RTC.c: 29: I2C_Master_Init(10000);
  3647                           
  3648                           ;incstack = 0
  3649  001DEA  0E10               	movlw	16
  3650  001DEC  0100               	movlb	0	; () banked
  3651  001DEE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3652  001DF0  0E27               	movlw	39
  3653  001DF2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3654  001DF4  0E00               	movlw	0
  3655  001DF6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3656  001DF8  0E00               	movlw	0
  3657  001DFA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3658  001DFC  EC08  F011         	call	_I2C_Master_Init	;wreg free
  3659                           
  3660                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3661  001E00  9EF2               	bcf	intcon,7,c	;volatile
  3662                           
  3663                           ;RTC.c: 33: I2C_Master_Start();
  3664  001E02  EC4E  F015         	call	_I2C_Master_Start	;wreg free
  3665                           
  3666                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3667  001E06  0E00               	movlw	0
  3668  001E08  0100               	movlb	0	; () banked
  3669  001E0A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3670  001E0C  0ED0               	movlw	208
  3671  001E0E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3672  001E10  EC40  F015         	call	_I2C_Master_Write	;wreg free
  3673                           
  3674                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3675  001E14  0E00               	movlw	0
  3676  001E16  0100               	movlb	0	; () banked
  3677  001E18  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3678  001E1A  0E00               	movlw	0
  3679  001E1C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3680  001E1E  EC40  F015         	call	_I2C_Master_Write	;wreg free
  3681                           
  3682                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3683  001E22  0E00               	movlw	0
  3684  001E24  0100               	movlb	0	; () banked
  3685  001E26  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3686  001E28  0E00               	movlw	0
  3687  001E2A  6F96               	movwf	loadRTC@i& (0+255),b
  3688  001E2C                     l4897:
  3689                           
  3690                           ; BSR set to: 0
  3691  001E2C  0100               	movlb	0	; () banked
  3692  001E2E  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3693  001E30  D008               	goto	l4901
  3694  001E32  0100               	movlb	0	; () banked
  3695  001E34  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3696  001E36  E11B               	bnz	l4907
  3697  001E38  0E07               	movlw	7
  3698  001E3A  0100               	movlb	0	; () banked
  3699  001E3C  5D96               	subwf	loadRTC@i& (0+255),w,b
  3700  001E3E  B0D8               	btfsc	status,0,c
  3701  001E40  D016               	goto	l4907
  3702  001E42                     l4901:
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3706  001E42  0ED4               	movlw	low _time
  3707  001E44  0100               	movlb	0	; () banked
  3708  001E46  2596               	addwf	loadRTC@i& (0+255),w,b
  3709  001E48  6ED9               	movwf	fsr2l,c
  3710  001E4A  0E00               	movlw	high _time
  3711  001E4C  0100               	movlb	0	; () banked
  3712  001E4E  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3713  001E50  6EDA               	movwf	fsr2h,c
  3714  001E52  50DF               	movf	indf2,w,c
  3715  001E54  0100               	movlb	0	; () banked
  3716  001E56  6F95               	movwf	??_loadRTC& (0+255),b
  3717  001E58  0100               	movlb	0	; () banked
  3718  001E5A  5195               	movf	??_loadRTC& (0+255),w,b
  3719  001E5C  0100               	movlb	0	; () banked
  3720  001E5E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3721  001E60  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3722  001E62  EC40  F015         	call	_I2C_Master_Write	;wreg free
  3723  001E66  0100               	movlb	0	; () banked
  3724  001E68  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3725  001E6A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3726  001E6C  D7DF               	goto	l4897
  3727  001E6E                     l4907:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;RTC.c: 38: }
  3731                           ;RTC.c: 39: I2C_Master_Stop();
  3732  001E6E  EC4A  F015         	call	_I2C_Master_Stop	;wreg free
  3733                           
  3734                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3735  001E72  8EF2               	bsf	intcon,7,c	;volatile
  3736  001E74  0012               	return		;funcret
  3737  001E76                     __end_of_loadRTC:
  3738                           	opt stack 0
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           intcon	equ	0xFF2
  3746                           intcon2	equ	0xFF1
  3747                           intcon3	equ	0xFF0
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           postdec1	equ	0xFE5
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _I2C_Master_Init *****************
  3760 ;; Defined at:
  3761 ;;		line 14 in file "I2C.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  c               4   13[BANK0 ] const unsigned long 
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        8 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    8
  3782 ;; This function calls:
  3783 ;;		___lldiv
  3784 ;; This function is called by:
  3785 ;;		_loadRTC
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text16
  3790  002210                     __ptext16:
  3791                           	opt stack 0
  3792  002210                     _I2C_Master_Init:
  3793                           	opt stack 20
  3794                           
  3795                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  3796                           
  3797                           ;incstack = 0
  3798  002210  0E00               	movlw	0
  3799  002212  6EC7               	movwf	4039,c	;volatile
  3800                           
  3801                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  3802  002214  0E28               	movlw	40
  3803  002216  6EC6               	movwf	4038,c	;volatile
  3804                           
  3805                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  3806  002218  0E00               	movlw	0
  3807  00221A  6EC5               	movwf	4037,c	;volatile
  3808                           
  3809                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  3810  00221C  0E00               	movlw	0
  3811  00221E  0100               	movlb	0	; () banked
  3812  002220  6F80               	movwf	___lldiv@dividend& (0+255),b
  3813  002222  0E48               	movlw	72
  3814  002224  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3815  002226  0EE8               	movlw	232
  3816  002228  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3817  00222A  0E01               	movlw	1
  3818  00222C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3819  00222E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3820  002232  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3821  002236  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3822  00223A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3823  00223E  0E02               	movlw	2
  3824  002240                     u3245:
  3825  002240  90D8               	bcf	status,0,c
  3826  002242  0100               	movlb	0	; () banked
  3827  002244  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3828  002246  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3829  002248  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3830  00224A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3831  00224C  2EE8               	decfsz	wreg,f,c
  3832  00224E  D7F8               	goto	u3245
  3833  002250  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3834  002254  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3835  002258  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3836  00225C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3837  002260  ECA2  F00D         	call	___lldiv	;wreg free
  3838  002264  0100               	movlb	0	; () banked
  3839  002266  0580               	decf	?___lldiv& (0+255),w,b
  3840  002268  6EC8               	movwf	4040,c	;volatile
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;I2C.c: 21: TRISC3 = 1;
  3844  00226A  8694               	bsf	3988,3,c	;volatile
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;I2C.c: 22: TRISC4 = 1;
  3848  00226C  8894               	bsf	3988,4,c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851  00226E  0012               	return		;funcret
  3852  002270                     __end_of_I2C_Master_Init:
  3853                           	opt stack 0
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           intcon	equ	0xFF2
  3861                           intcon2	equ	0xFF1
  3862                           intcon3	equ	0xFF0
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postdec1	equ	0xFE5
  3866                           fsr1l	equ	0xFE1
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function ___lldiv *****************
  3875 ;; Defined at:
  3876 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  dividend        4    0[BANK0 ] unsigned long 
  3879 ;;  divisor         4    4[BANK0 ] unsigned long 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  quotient        4    8[BANK0 ] unsigned long 
  3882 ;;  counter         1   12[BANK0 ] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  4    0[BANK0 ] unsigned long 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3892 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;Total ram usage:       13 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    7
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_I2C_Master_Init
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text17
  3907  001B44                     __ptext17:
  3908                           	opt stack 0
  3909  001B44                     ___lldiv:
  3910                           	opt stack 20
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914  001B44  0E00               	movlw	0
  3915  001B46  0100               	movlb	0	; () banked
  3916  001B48  6F88               	movwf	___lldiv@quotient& (0+255),b
  3917  001B4A  0E00               	movlw	0
  3918  001B4C  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3919  001B4E  0E00               	movlw	0
  3920  001B50  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3921  001B52  0E00               	movlw	0
  3922  001B54  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3923                           
  3924                           ; BSR set to: 0
  3925  001B56  0100               	movlb	0	; () banked
  3926  001B58  5184               	movf	___lldiv@divisor& (0+255),w,b
  3927  001B5A  0100               	movlb	0	; () banked
  3928  001B5C  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3929  001B5E  0100               	movlb	0	; () banked
  3930  001B60  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3931  001B62  0100               	movlb	0	; () banked
  3932  001B64  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3933  001B66  B4D8               	btfsc	status,2,c
  3934  001B68  D042               	goto	l1751
  3935                           
  3936                           ; BSR set to: 0
  3937  001B6A  0E01               	movlw	1
  3938  001B6C  0100               	movlb	0	; () banked
  3939  001B6E  6F8C               	movwf	___lldiv@counter& (0+255),b
  3940  001B70  D008               	goto	l4453
  3941  001B72                     l4451:
  3942                           
  3943                           ; BSR set to: 0
  3944  001B72  0100               	movlb	0	; () banked
  3945  001B74  90D8               	bcf	status,0,c
  3946  001B76  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3947  001B78  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3948  001B7A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3949  001B7C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3950  001B7E  0100               	movlb	0	; () banked
  3951  001B80  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3952  001B82                     l4453:
  3953                           
  3954                           ; BSR set to: 0
  3955  001B82  0100               	movlb	0	; () banked
  3956  001B84  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3957  001B86  D7F5               	goto	l4451
  3958  001B88                     l4455:
  3959                           
  3960                           ; BSR set to: 0
  3961  001B88  0100               	movlb	0	; () banked
  3962  001B8A  90D8               	bcf	status,0,c
  3963  001B8C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3964  001B8E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3965  001B90  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3966  001B92  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3967                           
  3968                           ; BSR set to: 0
  3969  001B94  0100               	movlb	0	; () banked
  3970  001B96  5184               	movf	___lldiv@divisor& (0+255),w,b
  3971  001B98  0100               	movlb	0	; () banked
  3972  001B9A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3973  001B9C  0100               	movlb	0	; () banked
  3974  001B9E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3975  001BA0  0100               	movlb	0	; () banked
  3976  001BA2  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3977  001BA4  0100               	movlb	0	; () banked
  3978  001BA6  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3979  001BA8  0100               	movlb	0	; () banked
  3980  001BAA  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3981  001BAC  0100               	movlb	0	; () banked
  3982  001BAE  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3983  001BB0  0100               	movlb	0	; () banked
  3984  001BB2  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3985  001BB4  A0D8               	btfss	status,0,c
  3986  001BB6  D012               	goto	l4463
  3987                           
  3988                           ; BSR set to: 0
  3989  001BB8  0100               	movlb	0	; () banked
  3990  001BBA  5184               	movf	___lldiv@divisor& (0+255),w,b
  3991  001BBC  0100               	movlb	0	; () banked
  3992  001BBE  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3993  001BC0  0100               	movlb	0	; () banked
  3994  001BC2  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3995  001BC4  0100               	movlb	0	; () banked
  3996  001BC6  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3997  001BC8  0100               	movlb	0	; () banked
  3998  001BCA  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3999  001BCC  0100               	movlb	0	; () banked
  4000  001BCE  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4001  001BD0  0100               	movlb	0	; () banked
  4002  001BD2  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4003  001BD4  0100               	movlb	0	; () banked
  4004  001BD6  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4005                           
  4006                           ; BSR set to: 0
  4007  001BD8  0100               	movlb	0	; () banked
  4008  001BDA  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4009  001BDC                     l4463:
  4010                           
  4011                           ; BSR set to: 0
  4012  001BDC  0100               	movlb	0	; () banked
  4013  001BDE  90D8               	bcf	status,0,c
  4014  001BE0  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4015  001BE2  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4016  001BE4  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4017  001BE6  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4018                           
  4019                           ; BSR set to: 0
  4020  001BE8  0100               	movlb	0	; () banked
  4021  001BEA  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4022  001BEC  D7CD               	goto	l4455
  4023  001BEE                     l1751:
  4024                           
  4025                           ; BSR set to: 0
  4026  001BEE  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4027  001BF2  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4028  001BF6  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4029  001BFA  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4030                           
  4031                           ; BSR set to: 0
  4032  001BFE  0012               	return		;funcret
  4033  001C00                     __end_of___lldiv:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           intcon2	equ	0xFF1
  4043                           intcon3	equ	0xFF0
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postdec1	equ	0xFE5
  4047                           fsr1l	equ	0xFE1
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           postdec2	equ	0xFDD
  4051                           fsr2h	equ	0xFDA
  4052                           fsr2l	equ	0xFD9
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _change_state_to_menu_start *****************
  4056 ;; Defined at:
  4057 ;;		line 416 in file "UI.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;Total ram usage:        0 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:   11
  4078 ;; This function calls:
  4079 ;;		_lcdInst
  4080 ;;		_printRTC
  4081 ;;		_printf
  4082 ;; This function is called by:
  4083 ;;		_initUI
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text18
  4088  00286E                     __ptext18:
  4089                           	opt stack 0
  4090  00286E                     _change_state_to_menu_start:
  4091                           	opt stack 18
  4092                           
  4093                           ;UI.c: 417: cur_state = 0;
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;incstack = 0
  4097  00286E  0E00               	movlw	0
  4098  002870  0100               	movlb	0	; () banked
  4099  002872  6FE0               	movwf	(_cur_state+1)& (0+255),b
  4100  002874  0E00               	movlw	0
  4101  002876  6FDF               	movwf	_cur_state& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;UI.c: 419: lcdInst(0b10000000);;
  4105  002878  0E80               	movlw	128
  4106  00287A  EC27  F015         	call	_lcdInst
  4107                           
  4108                           ;UI.c: 420: printRTC();
  4109  00287E  EC63  F006         	call	_printRTC	;wreg free
  4110                           
  4111                           ;UI.c: 421: lcdInst(0b11000000);;
  4112  002882  0EC0               	movlw	192
  4113  002884  EC27  F015         	call	_lcdInst
  4114                           
  4115                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4116  002888  0E97               	movlw	low STR_15
  4117  00288A  0100               	movlb	0	; () banked
  4118  00288C  6F8E               	movwf	printf@f& (0+255),b
  4119  00288E  0EFF               	movlw	high STR_15
  4120  002890  0100               	movlb	0	; () banked
  4121  002892  6F8F               	movwf	(printf@f+1)& (0+255),b
  4122  002894  ECBB  F002         	call	_printf	;wreg free
  4123  002898  0012               	return		;funcret
  4124  00289A                     __end_of_change_state_to_menu_start:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           intcon2	equ	0xFF1
  4134                           intcon3	equ	0xFF0
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           postdec2	equ	0xFDD
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _initTime *****************
  4147 ;; Defined at:
  4148 ;;		line 16 in file "RTC.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  s               1    wreg     unsigned char 
  4151 ;;  m               1    0[BANK0 ] unsigned char 
  4152 ;;  h               1    1[BANK0 ] unsigned char 
  4153 ;;  w               1    2[BANK0 ] unsigned char 
  4154 ;;  DD              1    3[BANK0 ] unsigned char 
  4155 ;;  MM              1    4[BANK0 ] unsigned char 
  4156 ;;  YY              1    5[BANK0 ] unsigned char 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  s               1    6[BANK0 ] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4168 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;Total ram usage:        7 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text19
  4183  002982                     __ptext19:
  4184                           	opt stack 0
  4185  002982                     _initTime:
  4186                           	opt stack 23
  4187                           
  4188                           ;incstack = 0
  4189                           ;initTime@s stored from wreg
  4190  002982  0100               	movlb	0	; () banked
  4191  002984  6F86               	movwf	initTime@s& (0+255),b
  4192                           
  4193                           ;RTC.c: 18: time[0] = s;
  4194  002986  C086  F0D4         	movff	initTime@s,_time
  4195                           
  4196                           ;RTC.c: 19: time[1] = m;
  4197  00298A  C080  F0D5         	movff	initTime@m,_time+1
  4198                           
  4199                           ;RTC.c: 20: time[2] = h;
  4200  00298E  C081  F0D6         	movff	initTime@h,_time+2
  4201                           
  4202                           ;RTC.c: 21: time[3] = w;
  4203  002992  C082  F0D7         	movff	initTime@w,_time+3
  4204                           
  4205                           ;RTC.c: 22: time[4] = DD;
  4206  002996  C083  F0D8         	movff	initTime@DD,_time+4
  4207                           
  4208                           ;RTC.c: 23: time[5] = MM;
  4209  00299A  C084  F0D9         	movff	initTime@MM,_time+5
  4210                           
  4211                           ;RTC.c: 24: time[6] = YY;
  4212  00299E  C085  F0DA         	movff	initTime@YY,_time+6
  4213  0029A2  0012               	return		;funcret
  4214  0029A4                     __end_of_initTime:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           intcon2	equ	0xFF1
  4224                           intcon3	equ	0xFF0
  4225                           postinc0	equ	0xFEE
  4226                           wreg	equ	0xFE8
  4227                           postdec1	equ	0xFE5
  4228                           fsr1l	equ	0xFE1
  4229                           indf2	equ	0xFDF
  4230                           postinc2	equ	0xFDE
  4231                           postdec2	equ	0xFDD
  4232                           fsr2h	equ	0xFDA
  4233                           fsr2l	equ	0xFD9
  4234                           status	equ	0xFD8
  4235                           
  4236 ;; *************** function _initLCD *****************
  4237 ;; Defined at:
  4238 ;;		line 47 in file "lcd.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;Total ram usage:        1 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    9
  4259 ;; This function calls:
  4260 ;;		_lcdInst
  4261 ;; This function is called by:
  4262 ;;		_main
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text20
  4267  0023C8                     __ptext20:
  4268                           	opt stack 0
  4269  0023C8                     _initLCD:
  4270                           	opt stack 21
  4271                           
  4272                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4273                           
  4274                           ;incstack = 0
  4275  0023C8  0E9C               	movlw	156
  4276  0023CA  0100               	movlb	0	; () banked
  4277  0023CC  6F83               	movwf	??_initLCD& (0+255),b
  4278  0023CE  0ED7               	movlw	215
  4279  0023D0                     u4757:
  4280  0023D0  2EE8               	decfsz	wreg,f,c
  4281  0023D2  D7FE               	bra	u4757
  4282  0023D4  2F83               	decfsz	??_initLCD& (0+255),f,b
  4283  0023D6  D7FC               	bra	u4757
  4284                           
  4285                           ;lcd.c: 49: lcdInst(0b00110011);
  4286  0023D8  0E33               	movlw	51
  4287  0023DA  EC27  F015         	call	_lcdInst
  4288                           
  4289                           ;lcd.c: 50: lcdInst(0b00110010);
  4290  0023DE  0E32               	movlw	50
  4291  0023E0  EC27  F015         	call	_lcdInst
  4292                           
  4293                           ;lcd.c: 52: lcdInst(0b00101000);
  4294  0023E4  0E28               	movlw	40
  4295  0023E6  EC27  F015         	call	_lcdInst
  4296                           
  4297                           ;lcd.c: 53: lcdInst(0b00001100);
  4298  0023EA  0E0C               	movlw	12
  4299  0023EC  EC27  F015         	call	_lcdInst
  4300                           
  4301                           ;lcd.c: 54: lcdInst(0b00000110);
  4302  0023F0  0E06               	movlw	6
  4303  0023F2  EC27  F015         	call	_lcdInst
  4304                           
  4305                           ;lcd.c: 55: lcdInst(0b00000001);
  4306  0023F6  0E01               	movlw	1
  4307  0023F8  EC27  F015         	call	_lcdInst
  4308                           
  4309                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4310  0023FC  0E9C               	movlw	156
  4311  0023FE  0100               	movlb	0	; () banked
  4312  002400  6F83               	movwf	??_initLCD& (0+255),b
  4313  002402  0ED7               	movlw	215
  4314  002404                     u4767:
  4315  002404  2EE8               	decfsz	wreg,f,c
  4316  002406  D7FE               	bra	u4767
  4317  002408  2F83               	decfsz	??_initLCD& (0+255),f,b
  4318  00240A  D7FC               	bra	u4767
  4319  00240C  0012               	return		;funcret
  4320  00240E                     __end_of_initLCD:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           intcon2	equ	0xFF1
  4330                           intcon3	equ	0xFF0
  4331                           postinc0	equ	0xFEE
  4332                           wreg	equ	0xFE8
  4333                           postdec1	equ	0xFE5
  4334                           fsr1l	equ	0xFE1
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342 ;; *************** function _UI *****************
  4343 ;; Defined at:
  4344 ;;		line 72 in file "UI.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  i               1   83[BANK0 ] unsigned char 
  4349 ;;  i               1   82[BANK0 ] unsigned char 
  4350 ;;  i               1   81[BANK0 ] unsigned char 
  4351 ;;  i               1   80[BANK0 ] unsigned char 
  4352 ;;  i               1   79[BANK0 ] unsigned char 
  4353 ;;  i               1   78[BANK0 ] unsigned char 
  4354 ;;  i               1   77[BANK0 ] unsigned char 
  4355 ;;  i               1   76[BANK0 ] unsigned char 
  4356 ;;  i               1   75[BANK0 ] unsigned char 
  4357 ;;  i               1   74[BANK0 ] unsigned char 
  4358 ;;  i               1   73[BANK0 ] unsigned char 
  4359 ;;  i               1   72[BANK0 ] unsigned char 
  4360 ;;  i               1   71[BANK0 ] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;Total ram usage:       16 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:   11
  4377 ;; This function calls:
  4378 ;;		___awdiv
  4379 ;;		___awmod
  4380 ;;		_change_state_to_menu_12
  4381 ;;		_change_state_to_menu_22
  4382 ;;		_lcdInst
  4383 ;;		_printRTC
  4384 ;;		_printf
  4385 ;; This function is called by:
  4386 ;;		_main
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text21
  4391  000012                     __ptext21:
  4392                           	opt stack 0
  4393  000012                     _UI:
  4394                           	opt stack 19
  4395                           
  4396                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4397                           
  4398                           ;incstack = 0
  4399  000012  0E02               	movlw	2
  4400  000014  0100               	movlb	0	; () banked
  4401  000016  19F2               	xorwf	_machine_state& (0+255),w,b
  4402  000018  A4D8               	btfss	status,2,c
  4403  00001A  D071               	goto	l5297
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4407  00001C  0E01               	movlw	1
  4408  00001E  EC27  F015         	call	_lcdInst
  4409  000022  0E68               	movlw	104
  4410  000024  0100               	movlb	0	; () banked
  4411  000026  6FC4               	movwf	??_UI& (0+255),b
  4412  000028  0EE4               	movlw	228
  4413  00002A                     u4777:
  4414  00002A  2EE8               	decfsz	wreg,f,c
  4415  00002C  D7FE               	bra	u4777
  4416  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4417  000030  D7FC               	bra	u4777
  4418  000032  F000               	nop	
  4419                           
  4420                           ;UI.c: 75: lcdInst(0b10000000);;
  4421  000034  0E80               	movlw	128
  4422  000036  EC27  F015         	call	_lcdInst
  4423                           
  4424                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4425  00003A  0EBA               	movlw	low STR_1
  4426  00003C  0100               	movlb	0	; () banked
  4427  00003E  6F8E               	movwf	printf@f& (0+255),b
  4428  000040  0EFE               	movlw	high STR_1
  4429  000042  0100               	movlb	0	; () banked
  4430  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4431  000046  ECBB  F002         	call	_printf	;wreg free
  4432                           
  4433                           ;UI.c: 77: lcdInst(0b11000000);;
  4434  00004A  0EC0               	movlw	192
  4435  00004C  EC27  F015         	call	_lcdInst
  4436                           
  4437                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4438  000050  0E0E               	movlw	14
  4439  000052  0100               	movlb	0	; () banked
  4440  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4441  000056  0E10               	movlw	16
  4442  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4443  00005A  C0EF  F080         	movff	_total_time,___awmod@dividend
  4444  00005E  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4445  000062  EC55  F00E         	call	___awmod	;wreg free
  4446  000066  C080  F0C5         	movff	?___awmod,_UI$2132
  4447  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2132+1
  4448                           
  4449                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4450  00006E  0EE8               	movlw	low STR_2
  4451  000070  0100               	movlb	0	; () banked
  4452  000072  6F8E               	movwf	printf@f& (0+255),b
  4453  000074  0EFD               	movlw	high STR_2
  4454  000076  0100               	movlb	0	; () banked
  4455  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4456  00007A  0E00               	movlw	0
  4457  00007C  0100               	movlb	0	; () banked
  4458  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4459  000080  0E00               	movlw	0
  4460  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4461  000084  0E0E               	movlw	14
  4462  000086  0100               	movlb	0	; () banked
  4463  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4464  00008A  0E10               	movlw	16
  4465  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4466  00008E  C0EF  F080         	movff	_total_time,___awmod@dividend
  4467  000092  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4468  000096  EC55  F00E         	call	___awmod	;wreg free
  4469  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4470  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4471  0000A2  0E00               	movlw	0
  4472  0000A4  0100               	movlb	0	; () banked
  4473  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4474  0000A8  0E3C               	movlw	60
  4475  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4476  0000AC  EC43  F00D         	call	___awdiv	;wreg free
  4477  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4478  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4479  0000B8  C0C5  F080         	movff	_UI$2132,___awmod@dividend
  4480  0000BC  C0C6  F081         	movff	_UI$2132+1,___awmod@dividend+1
  4481  0000C0  0E00               	movlw	0
  4482  0000C2  0100               	movlb	0	; () banked
  4483  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4484  0000C6  0E3C               	movlw	60
  4485  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4486  0000CA  EC55  F00E         	call	___awmod	;wreg free
  4487  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4488  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4489  0000D6  ECBB  F002         	call	_printf	;wreg free
  4490                           
  4491                           ;UI.c: 79: machine_state = UI_state;
  4492  0000DA  0E00               	movlw	0
  4493  0000DC  0100               	movlb	0	; () banked
  4494  0000DE  6FF2               	movwf	_machine_state& (0+255),b
  4495  0000E0                     l398:
  4496  0000E0  A281               	btfss	3969,1,c	;volatile
  4497  0000E2  D7FE               	goto	l398
  4498                           
  4499                           ;UI.c: 82: }
  4500                           ;UI.c: 83: if(cur_state==12){
  4501  0000E4  0E0C               	movlw	12
  4502  0000E6  0100               	movlb	0	; () banked
  4503  0000E8  19DF               	xorwf	_cur_state& (0+255),w,b
  4504  0000EA  0100               	movlb	0	; () banked
  4505  0000EC  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4506  0000EE  A4D8               	btfss	status,2,c
  4507  0000F0  D003               	goto	l5295
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;UI.c: 84: change_state_to_menu_12();
  4511  0000F2  EC63  F012         	call	_change_state_to_menu_12	;wreg free
  4512                           
  4513                           ;UI.c: 85: }
  4514  0000F6  D238               	goto	l5553
  4515  0000F8                     l5295:
  4516                           
  4517                           ;UI.c: 86: else{
  4518                           ;UI.c: 87: change_state_to_menu_22();
  4519  0000F8  EC47  F012         	call	_change_state_to_menu_22	;wreg free
  4520                           
  4521                           ;UI.c: 88: }
  4522                           ;UI.c: 89: }
  4523  0000FC  D235               	goto	l5553
  4524  0000FE                     l5297:
  4525                           
  4526                           ;UI.c: 90: else if(cur_state == 0){
  4527  0000FE  0100               	movlb	0	; () banked
  4528  000100  51DF               	movf	_cur_state& (0+255),w,b
  4529  000102  0100               	movlb	0	; () banked
  4530  000104  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4531  000106  A4D8               	btfss	status,2,c
  4532  000108  D22F               	goto	l5553
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4536  00010A  0E00               	movlw	0
  4537  00010C  0100               	movlb	0	; () banked
  4538  00010E  6FC7               	movwf	UI@i& (0+255),b
  4539  000110                     l5301:
  4540                           
  4541                           ; BSR set to: 0
  4542  000110  0E63               	movlw	99
  4543  000112  0100               	movlb	0	; () banked
  4544  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4545  000116  D001               	goto	l5305
  4546  000118  D00C               	goto	l5309
  4547  00011A                     l5305:
  4548                           
  4549                           ; BSR set to: 0
  4550  00011A  0E68               	movlw	104
  4551  00011C  0100               	movlb	0	; () banked
  4552  00011E  6FC4               	movwf	??_UI& (0+255),b
  4553  000120  0EE4               	movlw	228
  4554  000122                     u4787:
  4555  000122  2EE8               	decfsz	wreg,f,c
  4556  000124  D7FE               	bra	u4787
  4557  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4558  000128  D7FC               	bra	u4787
  4559  00012A  F000               	nop	
  4560  00012C  0100               	movlb	0	; () banked
  4561  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4562  000130  D7EF               	goto	l5301
  4563  000132                     l5309:
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;UI.c: 92: if(cur_state == 0){
  4567  000132  0100               	movlb	0	; () banked
  4568  000134  51DF               	movf	_cur_state& (0+255),w,b
  4569  000136  0100               	movlb	0	; () banked
  4570  000138  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4571  00013A  A4D8               	btfss	status,2,c
  4572  00013C  D215               	goto	l5553
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;UI.c: 93: printRTC();
  4576  00013E  EC63  F006         	call	_printRTC	;wreg free
  4577                           
  4578                           ;UI.c: 94: }
  4579                           ;UI.c: 95: }
  4580                           ;UI.c: 96: while(logstate){
  4581  000142  D212               	goto	l5553
  4582  000144                     l5313:
  4583                           
  4584                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4585  000144  0E01               	movlw	1
  4586  000146  EC27  F015         	call	_lcdInst
  4587  00014A  0E68               	movlw	104
  4588  00014C  0100               	movlb	0	; () banked
  4589  00014E  6FC4               	movwf	??_UI& (0+255),b
  4590  000150  0EE4               	movlw	228
  4591  000152                     u4797:
  4592  000152  2EE8               	decfsz	wreg,f,c
  4593  000154  D7FE               	bra	u4797
  4594  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4595  000158  D7FC               	bra	u4797
  4596  00015A  F000               	nop	
  4597                           
  4598                           ;UI.c: 99: lcdInst(0b10000000);;
  4599  00015C  0E80               	movlw	128
  4600  00015E  EC27  F015         	call	_lcdInst
  4601                           
  4602                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4603  000162  0EFD               	movlw	low STR_3
  4604  000164  0100               	movlb	0	; () banked
  4605  000166  6F8E               	movwf	printf@f& (0+255),b
  4606  000168  0EFD               	movlw	high STR_3
  4607  00016A  0100               	movlb	0	; () banked
  4608  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4609  00016E  C0EB  F090         	movff	_log,?_printf+2
  4610  000172  C0EC  F091         	movff	_log+1,?_printf+3
  4611  000176  ECBB  F002         	call	_printf	;wreg free
  4612                           
  4613                           ;UI.c: 101: lcdInst(0b11000000);;
  4614  00017A  0EC0               	movlw	192
  4615  00017C  EC27  F015         	call	_lcdInst
  4616                           
  4617                           ;UI.c: 102: printf("Pause:< | Back:>");
  4618  000180  0E86               	movlw	low STR_4
  4619  000182  0100               	movlb	0	; () banked
  4620  000184  6F8E               	movwf	printf@f& (0+255),b
  4621  000186  0EFF               	movlw	high STR_4
  4622  000188  0100               	movlb	0	; () banked
  4623  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4624  00018C  ECBB  F002         	call	_printf	;wreg free
  4625                           
  4626                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4627  000190  0E00               	movlw	0
  4628  000192  0100               	movlb	0	; () banked
  4629  000194  6FC8               	movwf	UI@i_630& (0+255),b
  4630  000196                     l5327:
  4631                           
  4632                           ; BSR set to: 0
  4633  000196  0E63               	movlw	99
  4634  000198  0100               	movlb	0	; () banked
  4635  00019A  65C8               	cpfsgt	UI@i_630& (0+255),b
  4636  00019C  D001               	goto	l5331
  4637  00019E  D00C               	goto	l5335
  4638  0001A0                     l5331:
  4639                           
  4640                           ; BSR set to: 0
  4641  0001A0  0E68               	movlw	104
  4642  0001A2  0100               	movlb	0	; () banked
  4643  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4644  0001A6  0EE4               	movlw	228
  4645  0001A8                     u4807:
  4646  0001A8  2EE8               	decfsz	wreg,f,c
  4647  0001AA  D7FE               	bra	u4807
  4648  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4649  0001AE  D7FC               	bra	u4807
  4650  0001B0  F000               	nop	
  4651  0001B2  0100               	movlb	0	; () banked
  4652  0001B4  2BC8               	incf	UI@i_630& (0+255),f,b
  4653  0001B6  D7EF               	goto	l5327
  4654  0001B8                     l5335:
  4655                           
  4656                           ; BSR set to: 0
  4657  0001B8  0100               	movlb	0	; () banked
  4658  0001BA  51ED               	movf	_logstate& (0+255),w,b
  4659  0001BC  0100               	movlb	0	; () banked
  4660  0001BE  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4661  0001C0  B4D8               	btfsc	status,2,c
  4662  0001C2  0012               	return	
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4666                           
  4667                           ; BSR set to: 0
  4668                           
  4669                           ; BSR set to: 0
  4670  0001C4  0E00               	movlw	0
  4671  0001C6  0100               	movlb	0	; () banked
  4672  0001C8  6FC9               	movwf	UI@i_631& (0+255),b
  4673  0001CA                     l5341:
  4674                           
  4675                           ; BSR set to: 0
  4676  0001CA  0E63               	movlw	99
  4677  0001CC  0100               	movlb	0	; () banked
  4678  0001CE  65C9               	cpfsgt	UI@i_631& (0+255),b
  4679  0001D0  D001               	goto	l5345
  4680  0001D2  D00C               	goto	l5349
  4681  0001D4                     l5345:
  4682                           
  4683                           ; BSR set to: 0
  4684  0001D4  0E68               	movlw	104
  4685  0001D6  0100               	movlb	0	; () banked
  4686  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4687  0001DA  0EE4               	movlw	228
  4688  0001DC                     u4817:
  4689  0001DC  2EE8               	decfsz	wreg,f,c
  4690  0001DE  D7FE               	bra	u4817
  4691  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4692  0001E2  D7FC               	bra	u4817
  4693  0001E4  F000               	nop	
  4694  0001E6  0100               	movlb	0	; () banked
  4695  0001E8  2BC9               	incf	UI@i_631& (0+255),f,b
  4696  0001EA  D7EF               	goto	l5341
  4697  0001EC                     l5349:
  4698                           
  4699                           ; BSR set to: 0
  4700  0001EC  0100               	movlb	0	; () banked
  4701  0001EE  51ED               	movf	_logstate& (0+255),w,b
  4702  0001F0  0100               	movlb	0	; () banked
  4703  0001F2  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4704  0001F4  B4D8               	btfsc	status,2,c
  4705  0001F6  0012               	return	
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4709                           
  4710                           ; BSR set to: 0
  4711                           
  4712                           ; BSR set to: 0
  4713  0001F8  0E01               	movlw	1
  4714  0001FA  EC27  F015         	call	_lcdInst
  4715  0001FE  0E68               	movlw	104
  4716  000200  0100               	movlb	0	; () banked
  4717  000202  6FC4               	movwf	??_UI& (0+255),b
  4718  000204  0EE4               	movlw	228
  4719  000206                     u4827:
  4720  000206  2EE8               	decfsz	wreg,f,c
  4721  000208  D7FE               	bra	u4827
  4722  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4723  00020C  D7FC               	bra	u4827
  4724  00020E  F000               	nop	
  4725                           
  4726                           ;UI.c: 108: lcdInst(0b10000000);;
  4727  000210  0E80               	movlw	128
  4728  000212  EC27  F015         	call	_lcdInst
  4729                           
  4730                           ;UI.c: 109: printf("Start:");
  4731  000216  0EC4               	movlw	low STR_5
  4732  000218  0100               	movlb	0	; () banked
  4733  00021A  6F8E               	movwf	printf@f& (0+255),b
  4734  00021C  0EFF               	movlw	high STR_5
  4735  00021E  0100               	movlb	0	; () banked
  4736  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4737  000222  ECBB  F002         	call	_printf	;wreg free
  4738                           
  4739                           ;UI.c: 110: lcdInst(0b11000000);;
  4740  000226  0EC0               	movlw	192
  4741  000228  EC27  F015         	call	_lcdInst
  4742                           
  4743                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4744  00022C  0EFE               	movlw	low STR_6
  4745  00022E  0100               	movlb	0	; () banked
  4746  000230  6F8E               	movwf	printf@f& (0+255),b
  4747  000232  0EFE               	movlw	high STR_6
  4748  000234  0100               	movlb	0	; () banked
  4749  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4750  000238  ECBB  F002         	call	_printf	;wreg free
  4751                           
  4752                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4753  00023C  0E00               	movlw	0
  4754  00023E  0100               	movlb	0	; () banked
  4755  000240  6FCA               	movwf	UI@i_634& (0+255),b
  4756  000242                     l5367:
  4757                           
  4758                           ; BSR set to: 0
  4759  000242  0E63               	movlw	99
  4760  000244  0100               	movlb	0	; () banked
  4761  000246  65CA               	cpfsgt	UI@i_634& (0+255),b
  4762  000248  D001               	goto	l5371
  4763  00024A  D00C               	goto	l5375
  4764  00024C                     l5371:
  4765                           
  4766                           ; BSR set to: 0
  4767  00024C  0E68               	movlw	104
  4768  00024E  0100               	movlb	0	; () banked
  4769  000250  6FC4               	movwf	??_UI& (0+255),b
  4770  000252  0EE4               	movlw	228
  4771  000254                     u4837:
  4772  000254  2EE8               	decfsz	wreg,f,c
  4773  000256  D7FE               	bra	u4837
  4774  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4775  00025A  D7FC               	bra	u4837
  4776  00025C  F000               	nop	
  4777  00025E  0100               	movlb	0	; () banked
  4778  000260  2BCA               	incf	UI@i_634& (0+255),f,b
  4779  000262  D7EF               	goto	l5367
  4780  000264                     l5375:
  4781                           
  4782                           ; BSR set to: 0
  4783  000264  0100               	movlb	0	; () banked
  4784  000266  51ED               	movf	_logstate& (0+255),w,b
  4785  000268  0100               	movlb	0	; () banked
  4786  00026A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4787  00026C  B4D8               	btfsc	status,2,c
  4788  00026E  0012               	return	
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796  000270  0E00               	movlw	0
  4797  000272  0100               	movlb	0	; () banked
  4798  000274  6FCB               	movwf	UI@i_635& (0+255),b
  4799  000276                     l5381:
  4800                           
  4801                           ; BSR set to: 0
  4802  000276  0E63               	movlw	99
  4803  000278  0100               	movlb	0	; () banked
  4804  00027A  65CB               	cpfsgt	UI@i_635& (0+255),b
  4805  00027C  D001               	goto	l5385
  4806  00027E  D00C               	goto	l5389
  4807  000280                     l5385:
  4808                           
  4809                           ; BSR set to: 0
  4810  000280  0E68               	movlw	104
  4811  000282  0100               	movlb	0	; () banked
  4812  000284  6FC4               	movwf	??_UI& (0+255),b
  4813  000286  0EE4               	movlw	228
  4814  000288                     u4847:
  4815  000288  2EE8               	decfsz	wreg,f,c
  4816  00028A  D7FE               	bra	u4847
  4817  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4818  00028E  D7FC               	bra	u4847
  4819  000290  F000               	nop	
  4820  000292  0100               	movlb	0	; () banked
  4821  000294  2BCB               	incf	UI@i_635& (0+255),f,b
  4822  000296  D7EF               	goto	l5381
  4823  000298                     l5389:
  4824                           
  4825                           ; BSR set to: 0
  4826  000298  0100               	movlb	0	; () banked
  4827  00029A  51ED               	movf	_logstate& (0+255),w,b
  4828  00029C  0100               	movlb	0	; () banked
  4829  00029E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4830  0002A0  B4D8               	btfsc	status,2,c
  4831  0002A2  0012               	return	
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4835                           
  4836                           ; BSR set to: 0
  4837                           
  4838                           ; BSR set to: 0
  4839  0002A4  0E01               	movlw	1
  4840  0002A6  EC27  F015         	call	_lcdInst
  4841  0002AA  0E68               	movlw	104
  4842  0002AC  0100               	movlb	0	; () banked
  4843  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4844  0002B0  0EE4               	movlw	228
  4845  0002B2                     u4857:
  4846  0002B2  2EE8               	decfsz	wreg,f,c
  4847  0002B4  D7FE               	bra	u4857
  4848  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4849  0002B8  D7FC               	bra	u4857
  4850  0002BA  F000               	nop	
  4851                           
  4852                           ;UI.c: 117: lcdInst(0b10000000);;
  4853  0002BC  0E80               	movlw	128
  4854  0002BE  EC27  F015         	call	_lcdInst
  4855                           
  4856                           ;UI.c: 118: printf("Duration:");
  4857  0002C2  0EB3               	movlw	low STR_7
  4858  0002C4  0100               	movlb	0	; () banked
  4859  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4860  0002C8  0EFF               	movlw	high STR_7
  4861  0002CA  0100               	movlb	0	; () banked
  4862  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4863  0002CE  ECBB  F002         	call	_printf	;wreg free
  4864                           
  4865                           ;UI.c: 119: lcdInst(0b11000000);;
  4866  0002D2  0EC0               	movlw	192
  4867  0002D4  EC27  F015         	call	_lcdInst
  4868                           
  4869                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  4870  0002D8  0E0F               	movlw	low STR_8
  4871  0002DA  0100               	movlb	0	; () banked
  4872  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4873  0002DE  0EFE               	movlw	high STR_8
  4874  0002E0  0100               	movlb	0	; () banked
  4875  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4876  0002E4  0E00               	movlw	0
  4877  0002E6  0100               	movlb	0	; () banked
  4878  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4879  0002EA  0E02               	movlw	2
  4880  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4881  0002EE  0E00               	movlw	0
  4882  0002F0  0100               	movlb	0	; () banked
  4883  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4884  0002F4  0E2A               	movlw	42
  4885  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4886  0002F8  ECBB  F002         	call	_printf	;wreg free
  4887                           
  4888                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4889  0002FC  0E00               	movlw	0
  4890  0002FE  0100               	movlb	0	; () banked
  4891  000300  6FCC               	movwf	UI@i_638& (0+255),b
  4892  000302                     l5407:
  4893                           
  4894                           ; BSR set to: 0
  4895  000302  0E63               	movlw	99
  4896  000304  0100               	movlb	0	; () banked
  4897  000306  65CC               	cpfsgt	UI@i_638& (0+255),b
  4898  000308  D001               	goto	l5411
  4899  00030A  D00C               	goto	l5415
  4900  00030C                     l5411:
  4901                           
  4902                           ; BSR set to: 0
  4903  00030C  0E68               	movlw	104
  4904  00030E  0100               	movlb	0	; () banked
  4905  000310  6FC4               	movwf	??_UI& (0+255),b
  4906  000312  0EE4               	movlw	228
  4907  000314                     u4867:
  4908  000314  2EE8               	decfsz	wreg,f,c
  4909  000316  D7FE               	bra	u4867
  4910  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4911  00031A  D7FC               	bra	u4867
  4912  00031C  F000               	nop	
  4913  00031E  0100               	movlb	0	; () banked
  4914  000320  2BCC               	incf	UI@i_638& (0+255),f,b
  4915  000322  D7EF               	goto	l5407
  4916  000324                     l5415:
  4917                           
  4918                           ; BSR set to: 0
  4919  000324  0100               	movlb	0	; () banked
  4920  000326  51ED               	movf	_logstate& (0+255),w,b
  4921  000328  0100               	movlb	0	; () banked
  4922  00032A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4923  00032C  B4D8               	btfsc	status,2,c
  4924  00032E  0012               	return	
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4928                           
  4929                           ; BSR set to: 0
  4930                           
  4931                           ; BSR set to: 0
  4932  000330  0E00               	movlw	0
  4933  000332  0100               	movlb	0	; () banked
  4934  000334  6FCD               	movwf	UI@i_639& (0+255),b
  4935  000336                     l5421:
  4936                           
  4937                           ; BSR set to: 0
  4938  000336  0E63               	movlw	99
  4939  000338  0100               	movlb	0	; () banked
  4940  00033A  65CD               	cpfsgt	UI@i_639& (0+255),b
  4941  00033C  D001               	goto	l5425
  4942  00033E  D00C               	goto	l5429
  4943  000340                     l5425:
  4944                           
  4945                           ; BSR set to: 0
  4946  000340  0E68               	movlw	104
  4947  000342  0100               	movlb	0	; () banked
  4948  000344  6FC4               	movwf	??_UI& (0+255),b
  4949  000346  0EE4               	movlw	228
  4950  000348                     u4877:
  4951  000348  2EE8               	decfsz	wreg,f,c
  4952  00034A  D7FE               	bra	u4877
  4953  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  4954  00034E  D7FC               	bra	u4877
  4955  000350  F000               	nop	
  4956  000352  0100               	movlb	0	; () banked
  4957  000354  2BCD               	incf	UI@i_639& (0+255),f,b
  4958  000356  D7EF               	goto	l5421
  4959  000358                     l5429:
  4960                           
  4961                           ; BSR set to: 0
  4962  000358  0100               	movlb	0	; () banked
  4963  00035A  51ED               	movf	_logstate& (0+255),w,b
  4964  00035C  0100               	movlb	0	; () banked
  4965  00035E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4966  000360  B4D8               	btfsc	status,2,c
  4967  000362  0012               	return	
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975  000364  0E01               	movlw	1
  4976  000366  EC27  F015         	call	_lcdInst
  4977  00036A  0E68               	movlw	104
  4978  00036C  0100               	movlb	0	; () banked
  4979  00036E  6FC4               	movwf	??_UI& (0+255),b
  4980  000370  0EE4               	movlw	228
  4981  000372                     u4887:
  4982  000372  2EE8               	decfsz	wreg,f,c
  4983  000374  D7FE               	bra	u4887
  4984  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  4985  000378  D7FC               	bra	u4887
  4986  00037A  F000               	nop	
  4987                           
  4988                           ;UI.c: 126: lcdInst(0b10000000);;
  4989  00037C  0E80               	movlw	128
  4990  00037E  EC27  F015         	call	_lcdInst
  4991                           
  4992                           ;UI.c: 127: printf(" -- Pop  can -- ");
  4993  000382  0E98               	movlw	low STR_9
  4994  000384  0100               	movlb	0	; () banked
  4995  000386  6F8E               	movwf	printf@f& (0+255),b
  4996  000388  0EFE               	movlw	high STR_9
  4997  00038A  0100               	movlb	0	; () banked
  4998  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4999  00038E  ECBB  F002         	call	_printf	;wreg free
  5000                           
  5001                           ;UI.c: 128: lcdInst(0b11000000);;
  5002  000392  0EC0               	movlw	192
  5003  000394  EC27  F015         	call	_lcdInst
  5004                           
  5005                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5006  000398  0EDC               	movlw	low STR_10
  5007  00039A  0100               	movlb	0	; () banked
  5008  00039C  6F8E               	movwf	printf@f& (0+255),b
  5009  00039E  0EFE               	movlw	high STR_10
  5010  0003A0  0100               	movlb	0	; () banked
  5011  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5012  0003A4  ECBB  F002         	call	_printf	;wreg free
  5013                           
  5014                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5015  0003A8  0E00               	movlw	0
  5016  0003AA  0100               	movlb	0	; () banked
  5017  0003AC  6FCE               	movwf	UI@i_642& (0+255),b
  5018  0003AE                     l5447:
  5019                           
  5020                           ; BSR set to: 0
  5021  0003AE  0E63               	movlw	99
  5022  0003B0  0100               	movlb	0	; () banked
  5023  0003B2  65CE               	cpfsgt	UI@i_642& (0+255),b
  5024  0003B4  D001               	goto	l5451
  5025  0003B6  D00C               	goto	l5455
  5026  0003B8                     l5451:
  5027                           
  5028                           ; BSR set to: 0
  5029  0003B8  0E68               	movlw	104
  5030  0003BA  0100               	movlb	0	; () banked
  5031  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5032  0003BE  0EE4               	movlw	228
  5033  0003C0                     u4897:
  5034  0003C0  2EE8               	decfsz	wreg,f,c
  5035  0003C2  D7FE               	bra	u4897
  5036  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5037  0003C6  D7FC               	bra	u4897
  5038  0003C8  F000               	nop	
  5039  0003CA  0100               	movlb	0	; () banked
  5040  0003CC  2BCE               	incf	UI@i_642& (0+255),f,b
  5041  0003CE  D7EF               	goto	l5447
  5042  0003D0                     l5455:
  5043                           
  5044                           ; BSR set to: 0
  5045  0003D0  0100               	movlb	0	; () banked
  5046  0003D2  51ED               	movf	_logstate& (0+255),w,b
  5047  0003D4  0100               	movlb	0	; () banked
  5048  0003D6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5049  0003D8  B4D8               	btfsc	status,2,c
  5050  0003DA  0012               	return	
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5054                           
  5055                           ; BSR set to: 0
  5056                           
  5057                           ; BSR set to: 0
  5058  0003DC  0E00               	movlw	0
  5059  0003DE  0100               	movlb	0	; () banked
  5060  0003E0  6FCF               	movwf	UI@i_643& (0+255),b
  5061  0003E2                     l5461:
  5062                           
  5063                           ; BSR set to: 0
  5064  0003E2  0E63               	movlw	99
  5065  0003E4  0100               	movlb	0	; () banked
  5066  0003E6  65CF               	cpfsgt	UI@i_643& (0+255),b
  5067  0003E8  D001               	goto	l5465
  5068  0003EA  D00C               	goto	l5469
  5069  0003EC                     l5465:
  5070                           
  5071                           ; BSR set to: 0
  5072  0003EC  0E68               	movlw	104
  5073  0003EE  0100               	movlb	0	; () banked
  5074  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5075  0003F2  0EE4               	movlw	228
  5076  0003F4                     u4907:
  5077  0003F4  2EE8               	decfsz	wreg,f,c
  5078  0003F6  D7FE               	bra	u4907
  5079  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5080  0003FA  D7FC               	bra	u4907
  5081  0003FC  F000               	nop	
  5082  0003FE  0100               	movlb	0	; () banked
  5083  000400  2BCF               	incf	UI@i_643& (0+255),f,b
  5084  000402  D7EF               	goto	l5461
  5085  000404                     l5469:
  5086                           
  5087                           ; BSR set to: 0
  5088  000404  0100               	movlb	0	; () banked
  5089  000406  51ED               	movf	_logstate& (0+255),w,b
  5090  000408  0100               	movlb	0	; () banked
  5091  00040A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5092  00040C  B4D8               	btfsc	status,2,c
  5093  00040E  0012               	return	
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5097                           
  5098                           ; BSR set to: 0
  5099                           
  5100                           ; BSR set to: 0
  5101  000410  0E01               	movlw	1
  5102  000412  EC27  F015         	call	_lcdInst
  5103  000416  0E68               	movlw	104
  5104  000418  0100               	movlb	0	; () banked
  5105  00041A  6FC4               	movwf	??_UI& (0+255),b
  5106  00041C  0EE4               	movlw	228
  5107  00041E                     u4917:
  5108  00041E  2EE8               	decfsz	wreg,f,c
  5109  000420  D7FE               	bra	u4917
  5110  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5111  000424  D7FC               	bra	u4917
  5112  000426  F000               	nop	
  5113                           
  5114                           ;UI.c: 135: lcdInst(0b10000000);;
  5115  000428  0E80               	movlw	128
  5116  00042A  EC27  F015         	call	_lcdInst
  5117                           
  5118                           ;UI.c: 136: printf(" -- Soup can -- ");
  5119  00042E  0EA9               	movlw	low STR_11
  5120  000430  0100               	movlb	0	; () banked
  5121  000432  6F8E               	movwf	printf@f& (0+255),b
  5122  000434  0EFE               	movlw	high STR_11
  5123  000436  0100               	movlb	0	; () banked
  5124  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5125  00043A  ECBB  F002         	call	_printf	;wreg free
  5126                           
  5127                           ;UI.c: 137: lcdInst(0b11000000);;
  5128  00043E  0EC0               	movlw	192
  5129  000440  EC27  F015         	call	_lcdInst
  5130                           
  5131                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5132  000444  0EED               	movlw	low STR_12
  5133  000446  0100               	movlb	0	; () banked
  5134  000448  6F8E               	movwf	printf@f& (0+255),b
  5135  00044A  0EFE               	movlw	high STR_12
  5136  00044C  0100               	movlb	0	; () banked
  5137  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5138  000450  ECBB  F002         	call	_printf	;wreg free
  5139                           
  5140                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5141  000454  0E00               	movlw	0
  5142  000456  0100               	movlb	0	; () banked
  5143  000458  6FD0               	movwf	UI@i_646& (0+255),b
  5144  00045A                     l5487:
  5145                           
  5146                           ; BSR set to: 0
  5147  00045A  0E63               	movlw	99
  5148  00045C  0100               	movlb	0	; () banked
  5149  00045E  65D0               	cpfsgt	UI@i_646& (0+255),b
  5150  000460  D001               	goto	l5491
  5151  000462  D00C               	goto	l5495
  5152  000464                     l5491:
  5153                           
  5154                           ; BSR set to: 0
  5155  000464  0E68               	movlw	104
  5156  000466  0100               	movlb	0	; () banked
  5157  000468  6FC4               	movwf	??_UI& (0+255),b
  5158  00046A  0EE4               	movlw	228
  5159  00046C                     u4927:
  5160  00046C  2EE8               	decfsz	wreg,f,c
  5161  00046E  D7FE               	bra	u4927
  5162  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5163  000472  D7FC               	bra	u4927
  5164  000474  F000               	nop	
  5165  000476  0100               	movlb	0	; () banked
  5166  000478  2BD0               	incf	UI@i_646& (0+255),f,b
  5167  00047A  D7EF               	goto	l5487
  5168  00047C                     l5495:
  5169                           
  5170                           ; BSR set to: 0
  5171  00047C  0100               	movlb	0	; () banked
  5172  00047E  51ED               	movf	_logstate& (0+255),w,b
  5173  000480  0100               	movlb	0	; () banked
  5174  000482  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5175  000484  B4D8               	btfsc	status,2,c
  5176  000486  0012               	return	
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5180                           
  5181                           ; BSR set to: 0
  5182                           
  5183                           ; BSR set to: 0
  5184  000488  0E00               	movlw	0
  5185  00048A  0100               	movlb	0	; () banked
  5186  00048C  6FD1               	movwf	UI@i_647& (0+255),b
  5187  00048E                     l5501:
  5188                           
  5189                           ; BSR set to: 0
  5190  00048E  0E63               	movlw	99
  5191  000490  0100               	movlb	0	; () banked
  5192  000492  65D1               	cpfsgt	UI@i_647& (0+255),b
  5193  000494  D001               	goto	l5505
  5194  000496  D00C               	goto	l5509
  5195  000498                     l5505:
  5196                           
  5197                           ; BSR set to: 0
  5198  000498  0E68               	movlw	104
  5199  00049A  0100               	movlb	0	; () banked
  5200  00049C  6FC4               	movwf	??_UI& (0+255),b
  5201  00049E  0EE4               	movlw	228
  5202  0004A0                     u4937:
  5203  0004A0  2EE8               	decfsz	wreg,f,c
  5204  0004A2  D7FE               	bra	u4937
  5205  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5206  0004A6  D7FC               	bra	u4937
  5207  0004A8  F000               	nop	
  5208  0004AA  0100               	movlb	0	; () banked
  5209  0004AC  2BD1               	incf	UI@i_647& (0+255),f,b
  5210  0004AE  D7EF               	goto	l5501
  5211  0004B0                     l5509:
  5212                           
  5213                           ; BSR set to: 0
  5214  0004B0  0100               	movlb	0	; () banked
  5215  0004B2  51ED               	movf	_logstate& (0+255),w,b
  5216  0004B4  0100               	movlb	0	; () banked
  5217  0004B6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5218  0004B8  B4D8               	btfsc	status,2,c
  5219  0004BA  0012               	return	
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5223                           
  5224                           ; BSR set to: 0
  5225                           
  5226                           ; BSR set to: 0
  5227  0004BC  0E01               	movlw	1
  5228  0004BE  EC27  F015         	call	_lcdInst
  5229  0004C2  0E68               	movlw	104
  5230  0004C4  0100               	movlb	0	; () banked
  5231  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5232  0004C8  0EE4               	movlw	228
  5233  0004CA                     u4947:
  5234  0004CA  2EE8               	decfsz	wreg,f,c
  5235  0004CC  D7FE               	bra	u4947
  5236  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5237  0004D0  D7FC               	bra	u4947
  5238  0004D2  F000               	nop	
  5239                           
  5240                           ;UI.c: 144: lcdInst(0b10000000);;
  5241  0004D4  0E80               	movlw	128
  5242  0004D6  EC27  F015         	call	_lcdInst
  5243                           
  5244                           ;UI.c: 145: printf("-- Total cans --");
  5245  0004DA  0ECB               	movlw	low STR_13
  5246  0004DC  0100               	movlb	0	; () banked
  5247  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5248  0004E0  0EFE               	movlw	high STR_13
  5249  0004E2  0100               	movlb	0	; () banked
  5250  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5251  0004E6  ECBB  F002         	call	_printf	;wreg free
  5252                           
  5253                           ;UI.c: 146: lcdInst(0b11000000);;
  5254  0004EA  0EC0               	movlw	192
  5255  0004EC  EC27  F015         	call	_lcdInst
  5256                           
  5257                           ;UI.c: 147: printf("12");
  5258  0004F0  0EFB               	movlw	low STR_14
  5259  0004F2  0100               	movlb	0	; () banked
  5260  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5261  0004F6  0EFF               	movlw	high STR_14
  5262  0004F8  0100               	movlb	0	; () banked
  5263  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5264  0004FC  ECBB  F002         	call	_printf	;wreg free
  5265                           
  5266                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5267  000500  0E00               	movlw	0
  5268  000502  0100               	movlb	0	; () banked
  5269  000504  6FD2               	movwf	UI@i_650& (0+255),b
  5270  000506                     l5527:
  5271                           
  5272                           ; BSR set to: 0
  5273  000506  0E63               	movlw	99
  5274  000508  0100               	movlb	0	; () banked
  5275  00050A  65D2               	cpfsgt	UI@i_650& (0+255),b
  5276  00050C  D001               	goto	l5531
  5277  00050E  D00C               	goto	l5535
  5278  000510                     l5531:
  5279                           
  5280                           ; BSR set to: 0
  5281  000510  0E68               	movlw	104
  5282  000512  0100               	movlb	0	; () banked
  5283  000514  6FC4               	movwf	??_UI& (0+255),b
  5284  000516  0EE4               	movlw	228
  5285  000518                     u4957:
  5286  000518  2EE8               	decfsz	wreg,f,c
  5287  00051A  D7FE               	bra	u4957
  5288  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5289  00051E  D7FC               	bra	u4957
  5290  000520  F000               	nop	
  5291  000522  0100               	movlb	0	; () banked
  5292  000524  2BD2               	incf	UI@i_650& (0+255),f,b
  5293  000526  D7EF               	goto	l5527
  5294  000528                     l5535:
  5295                           
  5296                           ; BSR set to: 0
  5297  000528  0100               	movlb	0	; () banked
  5298  00052A  51ED               	movf	_logstate& (0+255),w,b
  5299  00052C  0100               	movlb	0	; () banked
  5300  00052E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5301  000530  B4D8               	btfsc	status,2,c
  5302  000532  0012               	return	
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5306                           
  5307                           ; BSR set to: 0
  5308                           
  5309                           ; BSR set to: 0
  5310  000534  0E00               	movlw	0
  5311  000536  0100               	movlb	0	; () banked
  5312  000538  6FD3               	movwf	UI@i_651& (0+255),b
  5313  00053A                     l5541:
  5314                           
  5315                           ; BSR set to: 0
  5316  00053A  0E63               	movlw	99
  5317  00053C  0100               	movlb	0	; () banked
  5318  00053E  65D3               	cpfsgt	UI@i_651& (0+255),b
  5319  000540  D001               	goto	l5545
  5320  000542  D00C               	goto	l5549
  5321  000544                     l5545:
  5322                           
  5323                           ; BSR set to: 0
  5324  000544  0E68               	movlw	104
  5325  000546  0100               	movlb	0	; () banked
  5326  000548  6FC4               	movwf	??_UI& (0+255),b
  5327  00054A  0EE4               	movlw	228
  5328  00054C                     u4967:
  5329  00054C  2EE8               	decfsz	wreg,f,c
  5330  00054E  D7FE               	bra	u4967
  5331  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5332  000552  D7FC               	bra	u4967
  5333  000554  F000               	nop	
  5334  000556  0100               	movlb	0	; () banked
  5335  000558  2BD3               	incf	UI@i_651& (0+255),f,b
  5336  00055A  D7EF               	goto	l5541
  5337  00055C                     l5549:
  5338                           
  5339                           ; BSR set to: 0
  5340  00055C  0100               	movlb	0	; () banked
  5341  00055E  51ED               	movf	_logstate& (0+255),w,b
  5342  000560  0100               	movlb	0	; () banked
  5343  000562  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5344  000564  B4D8               	btfsc	status,2,c
  5345  000566  0012               	return	
  5346  000568                     l5553:
  5347  000568  0100               	movlb	0	; () banked
  5348  00056A  51ED               	movf	_logstate& (0+255),w,b
  5349  00056C  0100               	movlb	0	; () banked
  5350  00056E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  5351  000570  B4D8               	btfsc	status,2,c
  5352  000572  0012               	return	
  5353  000574  D5E7               	goto	l5313
  5354  000576                     __end_of_UI:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           intcon2	equ	0xFF1
  5364                           intcon3	equ	0xFF0
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _printRTC *****************
  5377 ;; Defined at:
  5378 ;;		line 62 in file "RTC.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  i               2   66[BANK0 ] int 
  5383 ;;  INT_time       14   46[BANK0 ] int [7]
  5384 ;;  month           4   62[BANK0 ] unsigned char [4]
  5385 ;;  RTC_month       2   60[BANK0 ] int 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:       25 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:   10
  5402 ;; This function calls:
  5403 ;;		_getRTC
  5404 ;;		_lcdInst
  5405 ;;		_printf
  5406 ;;		_strcpy
  5407 ;; This function is called by:
  5408 ;;		_UI
  5409 ;;		_change_state_to_menu_start
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text22
  5414  000CC6                     __ptext22:
  5415                           	opt stack 0
  5416  000CC6                     _printRTC:
  5417                           	opt stack 18
  5418                           
  5419                           ;RTC.c: 63: getRTC();
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;incstack = 0
  5423  000CC6  EC7F  F00F         	call	_getRTC	;wreg free
  5424                           
  5425                           ;RTC.c: 64: char month[] = "MMM";
  5426  000CCA  C0F3  F0BE         	movff	printRTC@F3205,printRTC@month
  5427  000CCE  C0F4  F0BF         	movff	printRTC@F3205+1,printRTC@month+1
  5428  000CD2  C0F5  F0C0         	movff	printRTC@F3205+2,printRTC@month+2
  5429  000CD6  C0F6  F0C1         	movff	printRTC@F3205+3,printRTC@month+3
  5430                           
  5431                           ;RTC.c: 65: int INT_time[7];
  5432                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5433  000CDA  0E00               	movlw	0
  5434  000CDC  0100               	movlb	0	; () banked
  5435  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5436  000CE0  0E00               	movlw	0
  5437  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5438                           
  5439                           ; BSR set to: 0
  5440  000CE4  0100               	movlb	0	; () banked
  5441  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5442  000CE8  D008               	goto	l4645
  5443  000CEA  0100               	movlb	0	; () banked
  5444  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5445  000CEE  E146               	bnz	l1015
  5446  000CF0  0E07               	movlw	7
  5447  000CF2  0100               	movlb	0	; () banked
  5448  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5449  000CF6  B0D8               	btfsc	status,0,c
  5450  000CF8  D041               	goto	l1015
  5451  000CFA                     l4645:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5455  000CFA  0ED4               	movlw	low _time
  5456  000CFC  0100               	movlb	0	; () banked
  5457  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5458  000D00  6ED9               	movwf	fsr2l,c
  5459  000D02  0E00               	movlw	high _time
  5460  000D04  0100               	movlb	0	; () banked
  5461  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5462  000D08  6EDA               	movwf	fsr2h,c
  5463  000D0A  50DF               	movf	indf2,w,c
  5464  000D0C  0100               	movlb	0	; () banked
  5465  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5466  000D10  0100               	movlb	0	; () banked
  5467  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5468  000D14  0E0F               	movlw	15
  5469  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5470  000D18  0E0F               	movlw	15
  5471  000D1A  0100               	movlb	0	; () banked
  5472  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5473  000D1E  0100               	movlb	0	; () banked
  5474  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5475  000D22  0D0A               	mullw	10
  5476  000D24  0ED4               	movlw	low _time
  5477  000D26  0100               	movlb	0	; () banked
  5478  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5479  000D2A  6ED9               	movwf	fsr2l,c
  5480  000D2C  0E00               	movlw	high _time
  5481  000D2E  0100               	movlb	0	; () banked
  5482  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5483  000D32  6EDA               	movwf	fsr2h,c
  5484  000D34  50DF               	movf	indf2,w,c
  5485  000D36  0B0F               	andlw	15
  5486  000D38  0100               	movlb	0	; () banked
  5487  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5488  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5489  000D3E  50F3               	movf	prodl,w,c
  5490  000D40  0100               	movlb	0	; () banked
  5491  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5492  000D44  50F4               	movf	prodh,w,c
  5493  000D46  0100               	movlb	0	; () banked
  5494  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5495  000D4A  90D8               	bcf	status,0,c
  5496  000D4C  0100               	movlb	0	; () banked
  5497  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5498  000D50  6ED9               	movwf	fsr2l,c
  5499  000D52  0100               	movlb	0	; () banked
  5500  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5501  000D56  6EDA               	movwf	fsr2h,c
  5502  000D58  0EAE               	movlw	low printRTC@INT_time
  5503  000D5A  26D9               	addwf	fsr2l,f,c
  5504  000D5C  0E00               	movlw	high printRTC@INT_time
  5505  000D5E  22DA               	addwfc	fsr2h,f,c
  5506  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5507  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5508                           
  5509                           ; BSR set to: 0
  5510  000D68  0100               	movlb	0	; () banked
  5511  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5512  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515  000D6E  0100               	movlb	0	; () banked
  5516  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5517  000D72  D7C3               	goto	l4645
  5518  000D74  0100               	movlb	0	; () banked
  5519  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5520  000D78  E101               	bnz	u3260
  5521  000D7A  D7BA               	goto	L6
  5522  000D7C                     u3260:
  5523  000D7C                     l1015:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;RTC.c: 68: }
  5527                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5528  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5529  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5530                           
  5531                           ;RTC.c: 70: switch(RTC_month){
  5532  000D84  D0B4               	goto	l4677
  5533  000D86                     l4651:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;RTC.c: 72: strcpy(month, "Jan");
  5537  000D86  0EBE               	movlw	low printRTC@month
  5538  000D88  0100               	movlb	0	; () banked
  5539  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5540  000D8C  0E00               	movlw	high printRTC@month
  5541  000D8E  0100               	movlb	0	; () banked
  5542  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5543  000D92  0EDB               	movlw	low STR_36
  5544  000D94  0100               	movlb	0	; () banked
  5545  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5546  000D98  0EFF               	movlw	high STR_36
  5547  000D9A  0100               	movlb	0	; () banked
  5548  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5549  000D9E  EC9A  F012         	call	_strcpy	;wreg free
  5550                           
  5551                           ;RTC.c: 73: break;
  5552  000DA2  D0D4               	goto	l4679
  5553  000DA4                     l4653:
  5554                           
  5555                           ;RTC.c: 75: strcpy(month, "Feb");
  5556  000DA4  0EBE               	movlw	low printRTC@month
  5557  000DA6  0100               	movlb	0	; () banked
  5558  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5559  000DAA  0E00               	movlw	high printRTC@month
  5560  000DAC  0100               	movlb	0	; () banked
  5561  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5562  000DB0  0ECB               	movlw	low STR_37
  5563  000DB2  0100               	movlb	0	; () banked
  5564  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5565  000DB6  0EFF               	movlw	high STR_37
  5566  000DB8  0100               	movlb	0	; () banked
  5567  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5568  000DBC  EC9A  F012         	call	_strcpy	;wreg free
  5569                           
  5570                           ;RTC.c: 76: break;
  5571  000DC0  D0C5               	goto	l4679
  5572  000DC2                     l4655:
  5573                           
  5574                           ;RTC.c: 78: strcpy(month, "Mar");
  5575  000DC2  0EBE               	movlw	low printRTC@month
  5576  000DC4  0100               	movlb	0	; () banked
  5577  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5578  000DC8  0E00               	movlw	high printRTC@month
  5579  000DCA  0100               	movlb	0	; () banked
  5580  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5581  000DCE  0EE7               	movlw	low STR_38
  5582  000DD0  0100               	movlb	0	; () banked
  5583  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5584  000DD4  0EFF               	movlw	high STR_38
  5585  000DD6  0100               	movlb	0	; () banked
  5586  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5587  000DDA  EC9A  F012         	call	_strcpy	;wreg free
  5588                           
  5589                           ;RTC.c: 79: break;
  5590  000DDE  D0B6               	goto	l4679
  5591  000DE0                     l4657:
  5592                           
  5593                           ;RTC.c: 81: strcpy(month, "Apr");
  5594  000DE0  0EBE               	movlw	low printRTC@month
  5595  000DE2  0100               	movlb	0	; () banked
  5596  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5597  000DE6  0E00               	movlw	high printRTC@month
  5598  000DE8  0100               	movlb	0	; () banked
  5599  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5600  000DEC  0EEB               	movlw	low STR_39
  5601  000DEE  0100               	movlb	0	; () banked
  5602  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5603  000DF2  0EFF               	movlw	high STR_39
  5604  000DF4  0100               	movlb	0	; () banked
  5605  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5606  000DF8  EC9A  F012         	call	_strcpy	;wreg free
  5607                           
  5608                           ;RTC.c: 82: break;
  5609  000DFC  D0A7               	goto	l4679
  5610  000DFE                     l4659:
  5611                           
  5612                           ;RTC.c: 84: strcpy(month, "May");
  5613  000DFE  0EBE               	movlw	low printRTC@month
  5614  000E00  0100               	movlb	0	; () banked
  5615  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5616  000E04  0E00               	movlw	high printRTC@month
  5617  000E06  0100               	movlb	0	; () banked
  5618  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5619  000E0A  0EF7               	movlw	low STR_40
  5620  000E0C  0100               	movlb	0	; () banked
  5621  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5622  000E10  0EFF               	movlw	high STR_40
  5623  000E12  0100               	movlb	0	; () banked
  5624  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5625  000E16  EC9A  F012         	call	_strcpy	;wreg free
  5626                           
  5627                           ;RTC.c: 85: break;
  5628  000E1A  D098               	goto	l4679
  5629  000E1C                     l4661:
  5630                           
  5631                           ;RTC.c: 87: strcpy(month, "Jun");
  5632  000E1C  0EBE               	movlw	low printRTC@month
  5633  000E1E  0100               	movlb	0	; () banked
  5634  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5635  000E22  0E00               	movlw	high printRTC@month
  5636  000E24  0100               	movlb	0	; () banked
  5637  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5638  000E28  0EDF               	movlw	low STR_41
  5639  000E2A  0100               	movlb	0	; () banked
  5640  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5641  000E2E  0EFF               	movlw	high STR_41
  5642  000E30  0100               	movlb	0	; () banked
  5643  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5644  000E34  EC9A  F012         	call	_strcpy	;wreg free
  5645                           
  5646                           ;RTC.c: 88: break;
  5647  000E38  D089               	goto	l4679
  5648  000E3A                     l4663:
  5649                           
  5650                           ;RTC.c: 90: strcpy(month, "Jul");
  5651  000E3A  0EBE               	movlw	low printRTC@month
  5652  000E3C  0100               	movlb	0	; () banked
  5653  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5654  000E40  0E00               	movlw	high printRTC@month
  5655  000E42  0100               	movlb	0	; () banked
  5656  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5657  000E46  0ED7               	movlw	low STR_42
  5658  000E48  0100               	movlb	0	; () banked
  5659  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5660  000E4C  0EFF               	movlw	high STR_42
  5661  000E4E  0100               	movlb	0	; () banked
  5662  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5663  000E52  EC9A  F012         	call	_strcpy	;wreg free
  5664                           
  5665                           ;RTC.c: 91: break;
  5666  000E56  D07A               	goto	l4679
  5667  000E58                     l4665:
  5668                           
  5669                           ;RTC.c: 93: strcpy(month, "Aug");
  5670  000E58  0EBE               	movlw	low printRTC@month
  5671  000E5A  0100               	movlb	0	; () banked
  5672  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5673  000E5E  0E00               	movlw	high printRTC@month
  5674  000E60  0100               	movlb	0	; () banked
  5675  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5676  000E64  0ED3               	movlw	low STR_43
  5677  000E66  0100               	movlb	0	; () banked
  5678  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5679  000E6A  0EFF               	movlw	high STR_43
  5680  000E6C  0100               	movlb	0	; () banked
  5681  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5682  000E70  EC9A  F012         	call	_strcpy	;wreg free
  5683                           
  5684                           ;RTC.c: 94: break;
  5685  000E74  D06B               	goto	l4679
  5686  000E76                     l4667:
  5687                           
  5688                           ;RTC.c: 96: strcpy(month, "Sep");
  5689  000E76  0EBE               	movlw	low printRTC@month
  5690  000E78  0100               	movlb	0	; () banked
  5691  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5692  000E7C  0E00               	movlw	high printRTC@month
  5693  000E7E  0100               	movlb	0	; () banked
  5694  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5695  000E82  0EE3               	movlw	low STR_44
  5696  000E84  0100               	movlb	0	; () banked
  5697  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5698  000E88  0EFF               	movlw	high STR_44
  5699  000E8A  0100               	movlb	0	; () banked
  5700  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5701  000E8E  EC9A  F012         	call	_strcpy	;wreg free
  5702                           
  5703                           ;RTC.c: 97: break;
  5704  000E92  D05C               	goto	l4679
  5705  000E94                     l4669:
  5706                           
  5707                           ;RTC.c: 99: strcpy(month, "Oct");
  5708  000E94  0EBE               	movlw	low printRTC@month
  5709  000E96  0100               	movlb	0	; () banked
  5710  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5711  000E9A  0E00               	movlw	high printRTC@month
  5712  000E9C  0100               	movlb	0	; () banked
  5713  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5714  000EA0  0EEF               	movlw	low STR_45
  5715  000EA2  0100               	movlb	0	; () banked
  5716  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5717  000EA6  0EFF               	movlw	high STR_45
  5718  000EA8  0100               	movlb	0	; () banked
  5719  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5720  000EAC  EC9A  F012         	call	_strcpy	;wreg free
  5721                           
  5722                           ;RTC.c: 100: break;
  5723  000EB0  D04D               	goto	l4679
  5724  000EB2                     l4671:
  5725                           
  5726                           ;RTC.c: 102: strcpy(month, "Nov");
  5727  000EB2  0EBE               	movlw	low printRTC@month
  5728  000EB4  0100               	movlb	0	; () banked
  5729  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5730  000EB8  0E00               	movlw	high printRTC@month
  5731  000EBA  0100               	movlb	0	; () banked
  5732  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5733  000EBE  0EF3               	movlw	low STR_46
  5734  000EC0  0100               	movlb	0	; () banked
  5735  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5736  000EC4  0EFF               	movlw	high STR_46
  5737  000EC6  0100               	movlb	0	; () banked
  5738  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5739  000ECA  EC9A  F012         	call	_strcpy	;wreg free
  5740                           
  5741                           ;RTC.c: 103: break;
  5742  000ECE  D03E               	goto	l4679
  5743  000ED0                     l4673:
  5744                           
  5745                           ;RTC.c: 105: strcpy(month, "Dec");
  5746  000ED0  0EBE               	movlw	low printRTC@month
  5747  000ED2  0100               	movlb	0	; () banked
  5748  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5749  000ED6  0E00               	movlw	high printRTC@month
  5750  000ED8  0100               	movlb	0	; () banked
  5751  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5752  000EDC  0ECF               	movlw	low STR_47
  5753  000EDE  0100               	movlb	0	; () banked
  5754  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5755  000EE2  0EFF               	movlw	high STR_47
  5756  000EE4  0100               	movlb	0	; () banked
  5757  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5758  000EE8  EC9A  F012         	call	_strcpy	;wreg free
  5759                           
  5760                           ;RTC.c: 107: }
  5761                           
  5762                           ;RTC.c: 106: break;
  5763  000EEC  D02F               	goto	l4679
  5764  000EEE                     l4677:
  5765  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5766  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5767                           
  5768                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5769                           ; Switch size 1, requested type "space"
  5770                           ; Number of cases is 1, Range of values is 0 to 0
  5771                           ; switch strategies available:
  5772                           ; Name         Instructions Cycles
  5773                           ; simple_byte            4     3 (average)
  5774                           ;	Chosen strategy is simple_byte
  5775  000EF6  0100               	movlb	0	; () banked
  5776  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5777  000EFA  0A00               	xorlw	0	; case 0
  5778  000EFC  A4D8               	btfss	status,2,c
  5779  000EFE  D026               	goto	l4679
  5780                           
  5781                           ; BSR set to: 0
  5782                           ; Switch size 1, requested type "space"
  5783                           ; Number of cases is 12, Range of values is 1 to 12
  5784                           ; switch strategies available:
  5785                           ; Name         Instructions Cycles
  5786                           ; simple_byte           37    19 (average)
  5787                           ;	Chosen strategy is simple_byte
  5788  000F00  0100               	movlb	0	; () banked
  5789  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5790  000F04  0A01               	xorlw	1	; case 1
  5791  000F06  B4D8               	btfsc	status,2,c
  5792  000F08  D73E               	goto	l4651
  5793  000F0A  0A03               	xorlw	3	; case 2
  5794  000F0C  B4D8               	btfsc	status,2,c
  5795  000F0E  D74A               	goto	l4653
  5796  000F10  0A01               	xorlw	1	; case 3
  5797  000F12  B4D8               	btfsc	status,2,c
  5798  000F14  D756               	goto	l4655
  5799  000F16  0A07               	xorlw	7	; case 4
  5800  000F18  B4D8               	btfsc	status,2,c
  5801  000F1A  D762               	goto	l4657
  5802  000F1C  0A01               	xorlw	1	; case 5
  5803  000F1E  B4D8               	btfsc	status,2,c
  5804  000F20  D76E               	goto	l4659
  5805  000F22  0A03               	xorlw	3	; case 6
  5806  000F24  B4D8               	btfsc	status,2,c
  5807  000F26  D77A               	goto	l4661
  5808  000F28  0A01               	xorlw	1	; case 7
  5809  000F2A  B4D8               	btfsc	status,2,c
  5810  000F2C  D786               	goto	l4663
  5811  000F2E  0A0F               	xorlw	15	; case 8
  5812  000F30  B4D8               	btfsc	status,2,c
  5813  000F32  D792               	goto	l4665
  5814  000F34  0A01               	xorlw	1	; case 9
  5815  000F36  B4D8               	btfsc	status,2,c
  5816  000F38  D79E               	goto	l4667
  5817  000F3A  0A03               	xorlw	3	; case 10
  5818  000F3C  B4D8               	btfsc	status,2,c
  5819  000F3E  D7AA               	goto	l4669
  5820  000F40  0A01               	xorlw	1	; case 11
  5821  000F42  B4D8               	btfsc	status,2,c
  5822  000F44  D7B6               	goto	l4671
  5823  000F46  0A07               	xorlw	7	; case 12
  5824  000F48  B4D8               	btfsc	status,2,c
  5825  000F4A  D7C2               	goto	l4673
  5826  000F4C                     l4679:
  5827                           
  5828                           ;RTC.c: 108: lcdInst(0b10000000);;
  5829  000F4C  0E80               	movlw	128
  5830  000F4E  EC27  F015         	call	_lcdInst
  5831                           
  5832                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5833  000F52  0ED0               	movlw	low STR_48
  5834  000F54  0100               	movlb	0	; () banked
  5835  000F56  6F8E               	movwf	printf@f& (0+255),b
  5836  000F58  0EFD               	movlw	high STR_48
  5837  000F5A  0100               	movlb	0	; () banked
  5838  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5839  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5840  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5841  000F66  0EBE               	movlw	low printRTC@month
  5842  000F68  0100               	movlb	0	; () banked
  5843  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5844  000F6C  0E00               	movlw	high printRTC@month
  5845  000F6E  0100               	movlb	0	; () banked
  5846  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5847  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5848  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5849  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5850  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5851  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5852  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5853  000F8A  ECBB  F002         	call	_printf	;wreg free
  5854  000F8E  0012               	return		;funcret
  5855  000F90                     __end_of_printRTC:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           intcon2	equ	0xFF1
  5865                           intcon3	equ	0xFF0
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           postdec1	equ	0xFE5
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _strcpy *****************
  5878 ;; Defined at:
  5879 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5882 ;;		 -> printRTC@month(4), 
  5883 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5884 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5885 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5886 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5889 ;;		 -> printRTC@month(4), 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2    0[BANK0 ] PTR unsigned char 
  5892 ;; Registers used:
  5893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5899 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;Total ram usage:        6 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    7
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_printRTC
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text23
  5914  002534                     __ptext23:
  5915                           	opt stack 0
  5916  002534                     _strcpy:
  5917                           	opt stack 20
  5918                           
  5919                           ;incstack = 0
  5920  002534  C080  F084         	movff	strcpy@to,strcpy@cp
  5921  002538  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5922  00253C  D006               	goto	l4435
  5923  00253E                     l4433:
  5924  00253E  0100               	movlb	0	; () banked
  5925  002540  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5926  002542  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5927  002544  0100               	movlb	0	; () banked
  5928  002546  4B82               	infsnz	strcpy@from& (0+255),f,b
  5929  002548  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5930  00254A                     l4435:
  5931  00254A  C082  FFF6         	movff	strcpy@from,tblptrl
  5932  00254E  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5933  002552                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5934  002552  6AF8               	clrf	tblptru,c
  5935  002554                     	endif
  5936  002554                     	if	0	;tblptru may be non-zero
  5937  002554                     	endif
  5938  002554  C084  FFD9         	movff	strcpy@cp,fsr2l
  5939  002558  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5940  00255C  0008               	tblrd		*
  5941  00255E  CFF5 FFDF          	movff	tablat,indf2
  5942  002562  50DF               	movf	indf2,w,c
  5943  002564  B4D8               	btfsc	status,2,c
  5944  002566  0012               	return	
  5945  002568  D7EA               	goto	l4433
  5946  00256A                     __end_of_strcpy:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           intcon2	equ	0xFF1
  5956                           intcon3	equ	0xFF0
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           postdec1	equ	0xFE5
  5960                           fsr1l	equ	0xFE1
  5961                           indf2	equ	0xFDF
  5962                           postinc2	equ	0xFDE
  5963                           postdec2	equ	0xFDD
  5964                           fsr2h	equ	0xFDA
  5965                           fsr2l	equ	0xFD9
  5966                           status	equ	0xFD8
  5967                           
  5968 ;; *************** function _getRTC *****************
  5969 ;; Defined at:
  5970 ;;		line 43 in file "RTC.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;		None
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  i               2    3[BANK0 ] int 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      void 
  5977 ;; Registers used:
  5978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;Total ram usage:        2 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    9
  5991 ;; This function calls:
  5992 ;;		_I2C_Master_Read
  5993 ;;		_I2C_Master_Start
  5994 ;;		_I2C_Master_Stop
  5995 ;;		_I2C_Master_Write
  5996 ;; This function is called by:
  5997 ;;		_printRTC
  5998 ;;		_initSortTimer
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text24
  6003  001EFE                     __ptext24:
  6004                           	opt stack 0
  6005  001EFE                     _getRTC:
  6006                           	opt stack 18
  6007                           
  6008                           ;RTC.c: 47: I2C_Master_Start();
  6009                           
  6010                           ;incstack = 0
  6011  001EFE  EC4E  F015         	call	_I2C_Master_Start	;wreg free
  6012                           
  6013                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6014  001F02  0E00               	movlw	0
  6015  001F04  0100               	movlb	0	; () banked
  6016  001F06  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6017  001F08  0ED0               	movlw	208
  6018  001F0A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6019  001F0C  EC40  F015         	call	_I2C_Master_Write	;wreg free
  6020                           
  6021                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6022  001F10  0E00               	movlw	0
  6023  001F12  0100               	movlb	0	; () banked
  6024  001F14  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6025  001F16  0E00               	movlw	0
  6026  001F18  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6027  001F1A  EC40  F015         	call	_I2C_Master_Write	;wreg free
  6028                           
  6029                           ;RTC.c: 50: I2C_Master_Stop();
  6030  001F1E  EC4A  F015         	call	_I2C_Master_Stop	;wreg free
  6031                           
  6032                           ;RTC.c: 53: I2C_Master_Start();
  6033  001F22  EC4E  F015         	call	_I2C_Master_Start	;wreg free
  6034                           
  6035                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6036  001F26  0E00               	movlw	0
  6037  001F28  0100               	movlb	0	; () banked
  6038  001F2A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6039  001F2C  0ED1               	movlw	209
  6040  001F2E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6041  001F30  EC40  F015         	call	_I2C_Master_Write	;wreg free
  6042                           
  6043                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6044  001F34  0E00               	movlw	0
  6045  001F36  0100               	movlb	0	; () banked
  6046  001F38  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6047  001F3A  0E00               	movlw	0
  6048  001F3C  6F83               	movwf	getRTC@i& (0+255),b
  6049  001F3E                     l4419:
  6050                           
  6051                           ; BSR set to: 0
  6052  001F3E  0100               	movlb	0	; () banked
  6053  001F40  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6054  001F42  D008               	goto	l4423
  6055  001F44  0100               	movlb	0	; () banked
  6056  001F46  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6057  001F48  E115               	bnz	l4429
  6058  001F4A  0E06               	movlw	6
  6059  001F4C  0100               	movlb	0	; () banked
  6060  001F4E  5D83               	subwf	getRTC@i& (0+255),w,b
  6061  001F50  B0D8               	btfsc	status,0,c
  6062  001F52  D010               	goto	l4429
  6063  001F54                     l4423:
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6067  001F54  0ED4               	movlw	low _time
  6068  001F56  0100               	movlb	0	; () banked
  6069  001F58  2583               	addwf	getRTC@i& (0+255),w,b
  6070  001F5A  6ED9               	movwf	fsr2l,c
  6071  001F5C  0E00               	movlw	high _time
  6072  001F5E  0100               	movlb	0	; () banked
  6073  001F60  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6074  001F62  6EDA               	movwf	fsr2h,c
  6075  001F64  0E01               	movlw	1
  6076  001F66  ECF3  F013         	call	_I2C_Master_Read
  6077  001F6A  6EDF               	movwf	indf2,c
  6078  001F6C  0100               	movlb	0	; () banked
  6079  001F6E  4B83               	infsnz	getRTC@i& (0+255),f,b
  6080  001F70  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6081  001F72  D7E5               	goto	l4419
  6082  001F74                     l4429:
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;RTC.c: 57: }
  6086                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6087  001F74  0E00               	movlw	0
  6088  001F76  ECF3  F013         	call	_I2C_Master_Read
  6089  001F7A  0100               	movlb	0	; () banked
  6090  001F7C  6FDA               	movwf	(_time+6)& (0+255),b
  6091                           
  6092                           ;RTC.c: 59: I2C_Master_Stop();
  6093  001F7E  EC4A  F015         	call	_I2C_Master_Stop	;wreg free
  6094  001F82  0012               	return		;funcret
  6095  001F84                     __end_of_getRTC:
  6096                           	opt stack 0
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodh	equ	0xFF4
  6102                           prodl	equ	0xFF3
  6103                           intcon	equ	0xFF2
  6104                           intcon2	equ	0xFF1
  6105                           intcon3	equ	0xFF0
  6106                           postinc0	equ	0xFEE
  6107                           wreg	equ	0xFE8
  6108                           postdec1	equ	0xFE5
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function _I2C_Master_Write *****************
  6118 ;; Defined at:
  6119 ;;		line 48 in file "I2C.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  d               2    1[BANK0 ] unsigned int 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;Total ram usage:        2 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    8
  6140 ;; This function calls:
  6141 ;;		_I2C_Master_Wait
  6142 ;; This function is called by:
  6143 ;;		_loadRTC
  6144 ;;		_getRTC
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text25
  6149  002A80                     __ptext25:
  6150                           	opt stack 0
  6151  002A80                     _I2C_Master_Write:
  6152                           	opt stack 18
  6153                           
  6154                           ;I2C.c: 50: I2C_Master_Wait();
  6155                           
  6156                           ;incstack = 0
  6157  002A80  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6158                           
  6159                           ;I2C.c: 51: SSPBUF = d;
  6160  002A84  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6161  002A88  0012               	return		;funcret
  6162  002A8A                     __end_of_I2C_Master_Write:
  6163                           	opt stack 0
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           intcon2	equ	0xFF1
  6172                           intcon3	equ	0xFF0
  6173                           postinc0	equ	0xFEE
  6174                           wreg	equ	0xFE8
  6175                           postdec1	equ	0xFE5
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184 ;; *************** function _I2C_Master_Stop *****************
  6185 ;; Defined at:
  6186 ;;		line 42 in file "I2C.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;		None
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;		None
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  1    wreg      void 
  6193 ;; Registers used:
  6194 ;;		wreg, status,2, status,0, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;Total ram usage:        0 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    8
  6207 ;; This function calls:
  6208 ;;		_I2C_Master_Wait
  6209 ;; This function is called by:
  6210 ;;		_loadRTC
  6211 ;;		_getRTC
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text26
  6216  002A94                     __ptext26:
  6217                           	opt stack 0
  6218  002A94                     _I2C_Master_Stop:
  6219                           	opt stack 18
  6220                           
  6221                           ;I2C.c: 44: I2C_Master_Wait();
  6222                           
  6223                           ;incstack = 0
  6224  002A94  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6225                           
  6226                           ;I2C.c: 45: PEN = 1;
  6227  002A98  84C5               	bsf	4037,2,c	;volatile
  6228  002A9A  0012               	return		;funcret
  6229  002A9C                     __end_of_I2C_Master_Stop:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           intcon3	equ	0xFF0
  6240                           postinc0	equ	0xFEE
  6241                           wreg	equ	0xFE8
  6242                           postdec1	equ	0xFE5
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _I2C_Master_Start *****************
  6252 ;; Defined at:
  6253 ;;		line 30 in file "I2C.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0, cstack
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    8
  6274 ;; This function calls:
  6275 ;;		_I2C_Master_Wait
  6276 ;; This function is called by:
  6277 ;;		_loadRTC
  6278 ;;		_getRTC
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text27
  6283  002A9C                     __ptext27:
  6284                           	opt stack 0
  6285  002A9C                     _I2C_Master_Start:
  6286                           	opt stack 18
  6287                           
  6288                           ;I2C.c: 32: I2C_Master_Wait();
  6289                           
  6290                           ;incstack = 0
  6291  002A9C  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6292                           
  6293                           ;I2C.c: 33: SEN = 1;
  6294  002AA0  80C5               	bsf	4037,0,c	;volatile
  6295  002AA2  0012               	return		;funcret
  6296  002AA4                     __end_of_I2C_Master_Start:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           intcon	equ	0xFF2
  6305                           intcon2	equ	0xFF1
  6306                           intcon3	equ	0xFF0
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           postdec1	equ	0xFE5
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _I2C_Master_Read *****************
  6319 ;; Defined at:
  6320 ;;		line 54 in file "I2C.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  a               1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  a               1    1[BANK0 ] unsigned char 
  6325 ;;  temp            1    2[BANK0 ] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      unsigned char 
  6328 ;; Registers used:
  6329 ;;		wreg, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;Total ram usage:        2 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    8
  6342 ;; This function calls:
  6343 ;;		_I2C_Master_Wait
  6344 ;; This function is called by:
  6345 ;;		_getRTC
  6346 ;; This function uses a non-reentrant model
  6347 ;;
  6348                           
  6349                           	psect	text28
  6350  0027E6                     __ptext28:
  6351                           	opt stack 0
  6352  0027E6                     _I2C_Master_Read:
  6353                           	opt stack 18
  6354                           
  6355                           ;incstack = 0
  6356                           ;I2C_Master_Read@a stored from wreg
  6357  0027E6  0100               	movlb	0	; () banked
  6358  0027E8  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6359                           
  6360                           ;I2C.c: 56: unsigned char temp;
  6361                           ;I2C.c: 57: I2C_Master_Wait();
  6362  0027EA  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6363                           
  6364                           ;I2C.c: 58: RCEN = 1;
  6365  0027EE  86C5               	bsf	4037,3,c	;volatile
  6366                           
  6367                           ;I2C.c: 59: I2C_Master_Wait();
  6368  0027F0  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6369                           
  6370                           ;I2C.c: 60: temp = SSPBUF;
  6371  0027F4  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6372                           
  6373                           ;I2C.c: 61: I2C_Master_Wait();
  6374  0027F8  ECF9  F014         	call	_I2C_Master_Wait	;wreg free
  6375                           
  6376                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6377  0027FC  0100               	movlb	0	; () banked
  6378  0027FE  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6379  002800  0100               	movlb	0	; () banked
  6380  002802  A4D8               	btfss	status,2,c
  6381  002804  D002               	goto	u2400
  6382  002806  8AC5               	bsf	4037,5,c	;volatile
  6383  002808  D001               	goto	l4121
  6384  00280A                     u2400:
  6385  00280A  9AC5               	bcf	4037,5,c	;volatile
  6386  00280C                     l4121:
  6387                           
  6388                           ;I2C.c: 63: ACKEN = 1;
  6389  00280C  88C5               	bsf	4037,4,c	;volatile
  6390                           
  6391                           ;I2C.c: 64: return temp;
  6392  00280E  0100               	movlb	0	; () banked
  6393  002810  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6394  002812  0012               	return	
  6395  002814                     __end_of_I2C_Master_Read:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           intcon2	equ	0xFF1
  6405                           intcon3	equ	0xFF0
  6406                           postinc0	equ	0xFEE
  6407                           wreg	equ	0xFE8
  6408                           postdec1	equ	0xFE5
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _I2C_Master_Wait *****************
  6418 ;; Defined at:
  6419 ;;		line 25 in file "I2C.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;		None
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;Total ram usage:        1 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    7
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_I2C_Master_Start
  6444 ;;		_I2C_Master_Stop
  6445 ;;		_I2C_Master_Write
  6446 ;;		_I2C_Master_Read
  6447 ;;		_I2C_Master_RepeatedStart
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text29
  6452  0029F2                     __ptext29:
  6453                           	opt stack 0
  6454  0029F2                     _I2C_Master_Wait:
  6455                           	opt stack 18
  6456  0029F2                     l180:
  6457  0029F2  B4C7               	btfsc	4039,2,c	;volatile
  6458  0029F4  D7FE               	goto	l180
  6459  0029F6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6460  0029FA  0E1F               	movlw	31
  6461  0029FC  0100               	movlb	0	; () banked
  6462  0029FE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6463  002A00  B4D8               	btfsc	status,2,c
  6464  002A02  0012               	return	
  6465  002A04  D7F6               	goto	l180
  6466  002A06                     __end_of_I2C_Master_Wait:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           intcon3	equ	0xFF0
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postdec1	equ	0xFE5
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _change_state_to_menu_22 *****************
  6489 ;; Defined at:
  6490 ;;		line 440 in file "UI.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;Total ram usage:        0 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:   10
  6511 ;; This function calls:
  6512 ;;		_lcdInst
  6513 ;;		_printf
  6514 ;; This function is called by:
  6515 ;;		_UI
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           	psect	text30
  6520  00248E                     __ptext30:
  6521                           	opt stack 0
  6522  00248E                     _change_state_to_menu_22:
  6523                           	opt stack 19
  6524                           
  6525                           ;UI.c: 441: cur_state = 22;
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;incstack = 0
  6529  00248E  0E00               	movlw	0
  6530  002490  0100               	movlb	0	; () banked
  6531  002492  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6532  002494  0E16               	movlw	22
  6533  002496  6FDF               	movwf	_cur_state& (0+255),b
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;UI.c: 443: lcdInst(0b10000000);;
  6537  002498  0E80               	movlw	128
  6538  00249A  EC27  F015         	call	_lcdInst
  6539                           
  6540                           ;UI.c: 444: printf("2. SORT        <");
  6541  00249E  0E64               	movlw	low STR_19
  6542  0024A0  0100               	movlb	0	; () banked
  6543  0024A2  6F8E               	movwf	printf@f& (0+255),b
  6544  0024A4  0EFF               	movlw	high STR_19
  6545  0024A6  0100               	movlb	0	; () banked
  6546  0024A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6547  0024AA  ECBB  F002         	call	_printf	;wreg free
  6548                           
  6549                           ;UI.c: 445: lcdInst(0b11000000);;
  6550  0024AE  0EC0               	movlw	192
  6551  0024B0  EC27  F015         	call	_lcdInst
  6552                           
  6553                           ;UI.c: 446: printf("3. LOGS         ");
  6554  0024B4  0E65               	movlw	low STR_21
  6555  0024B6  0100               	movlb	0	; () banked
  6556  0024B8  6F8E               	movwf	printf@f& (0+255),b
  6557  0024BA  0EFE               	movlw	high STR_21
  6558  0024BC  0100               	movlb	0	; () banked
  6559  0024BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6560  0024C0  ECBB  F002         	call	_printf	;wreg free
  6561  0024C4  0012               	return		;funcret
  6562  0024C6                     __end_of_change_state_to_menu_22:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon2	equ	0xFF1
  6572                           intcon3	equ	0xFF0
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           postdec1	equ	0xFE5
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _change_state_to_menu_12 *****************
  6585 ;; Defined at:
  6586 ;;		line 432 in file "UI.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        0 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:   10
  6607 ;; This function calls:
  6608 ;;		_lcdInst
  6609 ;;		_printf
  6610 ;; This function is called by:
  6611 ;;		_UI
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text31
  6616  0024C6                     __ptext31:
  6617                           	opt stack 0
  6618  0024C6                     _change_state_to_menu_12:
  6619                           	opt stack 19
  6620                           
  6621                           ;UI.c: 433: cur_state = 12;
  6622                           
  6623                           ;incstack = 0
  6624  0024C6  0E00               	movlw	0
  6625  0024C8  0100               	movlb	0	; () banked
  6626  0024CA  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6627  0024CC  0E0C               	movlw	12
  6628  0024CE  6FDF               	movwf	_cur_state& (0+255),b
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;UI.c: 435: lcdInst(0b10000000);;
  6632  0024D0  0E80               	movlw	128
  6633  0024D2  EC27  F015         	call	_lcdInst
  6634                           
  6635                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6636  0024D6  0E87               	movlw	low STR_18
  6637  0024D8  0100               	movlb	0	; () banked
  6638  0024DA  6F8E               	movwf	printf@f& (0+255),b
  6639  0024DC  0EFE               	movlw	high STR_18
  6640  0024DE  0100               	movlb	0	; () banked
  6641  0024E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  6642  0024E2  ECBB  F002         	call	_printf	;wreg free
  6643                           
  6644                           ;UI.c: 437: lcdInst(0b11000000);;
  6645  0024E6  0EC0               	movlw	192
  6646  0024E8  EC27  F015         	call	_lcdInst
  6647                           
  6648                           ;UI.c: 438: printf("2. SORT        <");
  6649  0024EC  0E64               	movlw	low STR_19
  6650  0024EE  0100               	movlb	0	; () banked
  6651  0024F0  6F8E               	movwf	printf@f& (0+255),b
  6652  0024F2  0EFF               	movlw	high STR_19
  6653  0024F4  0100               	movlb	0	; () banked
  6654  0024F6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6655  0024F8  ECBB  F002         	call	_printf	;wreg free
  6656  0024FC  0012               	return		;funcret
  6657  0024FE                     __end_of_change_state_to_menu_12:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           intcon2	equ	0xFF1
  6667                           intcon3	equ	0xFF0
  6668                           postinc0	equ	0xFEE
  6669                           wreg	equ	0xFE8
  6670                           postdec1	equ	0xFE5
  6671                           fsr1l	equ	0xFE1
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _printf *****************
  6680 ;; Defined at:
  6681 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6684 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6685 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6686 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6687 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6688 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6689 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6690 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6691 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6692 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6693 ;;		 -> STR_2(21), STR_1(17), 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  tmpval          4    0        struct .
  6696 ;;  width           2   41[BANK0 ] int 
  6697 ;;  len             2   37[BANK0 ] unsigned int 
  6698 ;;  val             2   35[BANK0 ] unsigned int 
  6699 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6700 ;;		 -> STR_51(7), printRTC@month(4), 
  6701 ;;  ap              2   31[BANK0 ] PTR void [1]
  6702 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6703 ;;  c               1   40[BANK0 ] char 
  6704 ;;  flag            1   39[BANK0 ] unsigned char 
  6705 ;;  prec            1   30[BANK0 ] char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;                  2   14[BANK0 ] int 
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6715 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;Total ram usage:       29 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    9
  6722 ;; This function calls:
  6723 ;;		___lwdiv
  6724 ;;		___lwmod
  6725 ;;		___wmul
  6726 ;;		_isdigit
  6727 ;;		_putch
  6728 ;; This function is called by:
  6729 ;;		_UI
  6730 ;;		_change_state_to_menu_start
  6731 ;;		_change_state_to_menu_12
  6732 ;;		_change_state_to_menu_22
  6733 ;;		_printRTC
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           	psect	text32
  6738  000576                     __ptext32:
  6739                           	opt stack 0
  6740  000576                     _printf:
  6741                           	opt stack 19
  6742                           
  6743                           ;doprnt.c: 466: va_list ap;
  6744                           ;doprnt.c: 499: signed char c;
  6745                           ;doprnt.c: 501: int width;
  6746                           ;doprnt.c: 506: signed char prec;
  6747                           ;doprnt.c: 508: unsigned char flag;
  6748                           ;doprnt.c: 523: union {
  6749                           ;doprnt.c: 524: unsigned long vd;
  6750                           ;doprnt.c: 525: double integ;
  6751                           ;doprnt.c: 526: } tmpval;
  6752                           ;doprnt.c: 528: unsigned int val;
  6753                           ;doprnt.c: 529: unsigned len;
  6754                           ;doprnt.c: 530: const char * cp;
  6755                           ;doprnt.c: 533: *ap = __va_start();
  6756                           
  6757                           ;incstack = 0
  6758  000576  0E90               	movlw	low (?_printf+2)
  6759  000578  0100               	movlb	0	; () banked
  6760  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6761  00057C  0E00               	movlw	high (?_printf+2)
  6762  00057E  0100               	movlb	0	; () banked
  6763  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6764                           
  6765                           ;doprnt.c: 536: while(c = *f++) {
  6766  000582  D1EE               	goto	l4413
  6767  000584                     l4289:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;doprnt.c: 538: if(c != '%')
  6771  000584  0E25               	movlw	37
  6772  000586  0100               	movlb	0	; () banked
  6773  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6774  00058A  B4D8               	btfsc	status,2,c
  6775  00058C  D005               	goto	l4293
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;doprnt.c: 540: {
  6779                           ;doprnt.c: 541: (putch(c) );
  6780  00058E  0100               	movlb	0	; () banked
  6781  000590  51A8               	movf	printf@c& (0+255),w,b
  6782  000592  EC1F  F015         	call	_putch
  6783                           
  6784                           ;doprnt.c: 542: continue;
  6785  000596  D1E4               	goto	l4413
  6786  000598                     l4293:
  6787                           
  6788                           ;doprnt.c: 543: }
  6789                           ;doprnt.c: 546: width = 0;
  6790  000598  0E00               	movlw	0
  6791  00059A  0100               	movlb	0	; () banked
  6792  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6793  00059E  0E00               	movlw	0
  6794  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6795                           
  6796                           ;doprnt.c: 548: flag = 0;
  6797  0005A2  0E00               	movlw	0
  6798  0005A4  0100               	movlb	0	; () banked
  6799  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;doprnt.c: 551: switch(*f) {
  6803                           
  6804                           ;doprnt.c: 550: for(;;) {
  6805  0005A8  D005               	goto	l4299
  6806  0005AA                     l4295:
  6807                           
  6808                           ;doprnt.c: 580: flag |= 0x04;
  6809  0005AA  0100               	movlb	0	; () banked
  6810  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6811                           
  6812                           ;doprnt.c: 581: f++;
  6813  0005AE  0100               	movlb	0	; () banked
  6814  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6815  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6816  0005B4                     l4299:
  6817  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6818  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6819  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6820  0005BC  6AF8               	clrf	tblptru,c
  6821  0005BE                     	endif
  6822  0005BE                     	if	0	;tblptru may be non-zero
  6823  0005BE                     	endif
  6824  0005BE  0008               	tblrd		*
  6825  0005C0  50F5               	movf	tablat,w,c
  6826                           
  6827                           ; Switch size 1, requested type "space"
  6828                           ; Number of cases is 1, Range of values is 48 to 48
  6829                           ; switch strategies available:
  6830                           ; Name         Instructions Cycles
  6831                           ; simple_byte            4     3 (average)
  6832                           ;	Chosen strategy is simple_byte
  6833  0005C2  0A30               	xorlw	48	; case 48
  6834  0005C4  B4D8               	btfsc	status,2,c
  6835  0005C6  D7F1               	goto	l4295
  6836                           
  6837                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6838                           
  6839                           ;doprnt.c: 586: }
  6840                           
  6841                           ;doprnt.c: 585: break;
  6842  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6843  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6844  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6845  0005D0  6AF8               	clrf	tblptru,c
  6846  0005D2                     	endif
  6847  0005D2                     	if	0	;tblptru may be non-zero
  6848  0005D2                     	endif
  6849  0005D2  0008               	tblrd		*
  6850  0005D4  50F5               	movf	tablat,w,c
  6851  0005D6  EC4D  F014         	call	_isdigit
  6852  0005DA  A0D8               	btfss	status,0,c
  6853  0005DC  D0CF               	goto	l4345
  6854                           
  6855                           ;doprnt.c: 598: width = 0;
  6856  0005DE  0E00               	movlw	0
  6857  0005E0  0100               	movlb	0	; () banked
  6858  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6859  0005E4  0E00               	movlw	0
  6860  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6861  0005E8                     l4305:
  6862                           
  6863                           ;doprnt.c: 600: width *= 10;
  6864  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6865  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6866  0005F0  0E00               	movlw	0
  6867  0005F2  0100               	movlb	0	; () banked
  6868  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6869  0005F6  0E0A               	movlw	10
  6870  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6871  0005FA  ECB5  F012         	call	___wmul	;wreg free
  6872  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6873  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6874                           
  6875                           ;doprnt.c: 601: width += *f++ - '0';
  6876  000606  0ED0               	movlw	208
  6877  000608  0100               	movlb	0	; () banked
  6878  00060A  6F9A               	movwf	??_printf& (0+255),b
  6879  00060C  0EFF               	movlw	255
  6880  00060E  0100               	movlb	0	; () banked
  6881  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6882  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6883  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6884  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6885  00061A  6AF8               	clrf	tblptru,c
  6886  00061C                     	endif
  6887  00061C                     	if	0	;tblptru may be non-zero
  6888  00061C                     	endif
  6889  00061C  0008               	tblrd		*
  6890  00061E  50F5               	movf	tablat,w,c
  6891  000620  0100               	movlb	0	; () banked
  6892  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6893  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6894  000626  0100               	movlb	0	; () banked
  6895  000628  519A               	movf	??_printf& (0+255),w,b
  6896  00062A  0100               	movlb	0	; () banked
  6897  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6898  00062E  0100               	movlb	0	; () banked
  6899  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6900  000632  0100               	movlb	0	; () banked
  6901  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6902  000636  0100               	movlb	0	; () banked
  6903  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6904  00063A  0100               	movlb	0	; () banked
  6905  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6906  00063E  0100               	movlb	0	; () banked
  6907  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6908  000642  0100               	movlb	0	; () banked
  6909  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6910                           
  6911                           ; BSR set to: 0
  6912  000646  0100               	movlb	0	; () banked
  6913  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6914  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6918  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6919  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6920  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6921  000654  6AF8               	clrf	tblptru,c
  6922  000656                     	endif
  6923  000656                     	if	0	;tblptru may be non-zero
  6924  000656                     	endif
  6925  000656  0008               	tblrd		*
  6926  000658  50F5               	movf	tablat,w,c
  6927  00065A  EC4D  F014         	call	_isdigit
  6928  00065E  A0D8               	btfss	status,0,c
  6929  000660  D08D               	goto	l4345
  6930  000662  D7C2               	goto	l4305
  6931  000664                     l4313:
  6932                           
  6933                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6934  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  6935  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6936  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  6937  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  6938  000674  0E02               	movlw	2
  6939  000676  0100               	movlb	0	; () banked
  6940  000678  279F               	addwf	printf@ap& (0+255),f,b
  6941  00067A  0E00               	movlw	0
  6942  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;doprnt.c: 740: if(!cp)
  6946  00067E  0100               	movlb	0	; () banked
  6947  000680  51A1               	movf	printf@cp& (0+255),w,b
  6948  000682  0100               	movlb	0	; () banked
  6949  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  6950  000686  A4D8               	btfss	status,2,c
  6951  000688  D006               	goto	l4321
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;doprnt.c: 741: cp = "(null)";
  6955  00068A  0EBD               	movlw	low STR_51
  6956  00068C  0100               	movlb	0	; () banked
  6957  00068E  6FA1               	movwf	printf@cp& (0+255),b
  6958  000690  0EFF               	movlw	high STR_51
  6959  000692  0100               	movlb	0	; () banked
  6960  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  6961  000696                     l4321:
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;doprnt.c: 745: len = 0;
  6965  000696  0E00               	movlw	0
  6966  000698  0100               	movlb	0	; () banked
  6967  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  6968  00069C  0E00               	movlw	0
  6969  00069E  6FA5               	movwf	printf@len& (0+255),b
  6970                           
  6971                           ;doprnt.c: 746: while(cp[len])
  6972  0006A0  D003               	goto	l4325
  6973  0006A2                     l4323:
  6974                           
  6975                           ;doprnt.c: 747: len++;
  6976  0006A2  0100               	movlb	0	; () banked
  6977  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  6978  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  6979  0006A8                     l4325:
  6980                           
  6981                           ; BSR set to: 0
  6982  0006A8  0100               	movlb	0	; () banked
  6983  0006AA  51A5               	movf	printf@len& (0+255),w,b
  6984  0006AC  0100               	movlb	0	; () banked
  6985  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  6986  0006B0  0100               	movlb	0	; () banked
  6987  0006B2  6F9A               	movwf	??_printf& (0+255),b
  6988  0006B4  0100               	movlb	0	; () banked
  6989  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  6990  0006B8  0100               	movlb	0	; () banked
  6991  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  6992  0006BC  0100               	movlb	0	; () banked
  6993  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  6994  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  6995  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  6996  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  6997  0006CA  6EF8               	movwf	tblptru,c
  6998  0006CC  0E0F               	movlw	(high __ramtop+-1)
  6999  0006CE  64F7               	cpfsgt	tblptrh,c
  7000  0006D0  D003               	bra	u2657
  7001  0006D2  0008               	tblrd		*
  7002  0006D4  50F5               	movf	tablat,w,c
  7003  0006D6  D005               	bra	u2650
  7004  0006D8                     u2657:
  7005  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7006  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7007  0006E0  50EF               	movf	indf0,w,c
  7008  0006E2                     u2650:
  7009  0006E2  0900               	iorlw	0
  7010  0006E4  A4D8               	btfss	status,2,c
  7011  0006E6  D7DD               	goto	l4323
  7012                           
  7013                           ;doprnt.c: 757: if(width > len)
  7014  0006E8  0100               	movlb	0	; () banked
  7015  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7016  0006EC  0100               	movlb	0	; () banked
  7017  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7018  0006F0  0100               	movlb	0	; () banked
  7019  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7020  0006F4  0100               	movlb	0	; () banked
  7021  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7022  0006F8  B0D8               	btfsc	status,0,c
  7023  0006FA  D009               	goto	l4331
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;doprnt.c: 758: width -= len;
  7027  0006FC  0100               	movlb	0	; () banked
  7028  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7029  000700  0100               	movlb	0	; () banked
  7030  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7031  000704  0100               	movlb	0	; () banked
  7032  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7033  000708  0100               	movlb	0	; () banked
  7034  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7035  00070C  D009               	goto	l4335
  7036  00070E                     l4331:
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;doprnt.c: 759: else
  7040                           ;doprnt.c: 760: width = 0;
  7041  00070E  0E00               	movlw	0
  7042  000710  0100               	movlb	0	; () banked
  7043  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7044  000714  0E00               	movlw	0
  7045  000716  6FA9               	movwf	printf@width& (0+255),b
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;doprnt.c: 764: while(width--)
  7049  000718  D003               	goto	l4335
  7050  00071A                     l4333:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;doprnt.c: 765: (putch(' ') );
  7054  00071A  0E20               	movlw	32
  7055  00071C  EC1F  F015         	call	_putch
  7056  000720                     l4335:
  7057  000720  0100               	movlb	0	; () banked
  7058  000722  07A9               	decf	printf@width& (0+255),f,b
  7059  000724  A0D8               	btfss	status,0,c
  7060  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7061  000728  0100               	movlb	0	; () banked
  7062  00072A  29A9               	incf	printf@width& (0+255),w,b
  7063  00072C  E1F6               	bnz	l4333
  7064  00072E  0100               	movlb	0	; () banked
  7065  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7066  000732  B4D8               	btfsc	status,2,c
  7067  000734  D017               	goto	l4341
  7068  000736  D7F1               	goto	l4333
  7069  000738                     l4337:
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;doprnt.c: 768: (putch(*cp++) );
  7073  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7074  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7075  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7076  000742  6EF8               	movwf	tblptru,c
  7077  000744  0E0F               	movlw	(high __ramtop+-1)
  7078  000746  64F7               	cpfsgt	tblptrh,c
  7079  000748  D003               	bra	u2697
  7080  00074A  0008               	tblrd		*
  7081  00074C  50F5               	movf	tablat,w,c
  7082  00074E  D005               	bra	u2690
  7083  000750                     u2697:
  7084  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7085  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7086  000758  50EF               	movf	indf0,w,c
  7087  00075A                     u2690:
  7088  00075A  EC1F  F015         	call	_putch
  7089  00075E  0100               	movlb	0	; () banked
  7090  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7091  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7092  000764                     l4341:
  7093                           
  7094                           ; BSR set to: 0
  7095  000764  0100               	movlb	0	; () banked
  7096  000766  07A5               	decf	printf@len& (0+255),f,b
  7097  000768  A0D8               	btfss	status,0,c
  7098  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7099  00076C  0100               	movlb	0	; () banked
  7100  00076E  29A5               	incf	printf@len& (0+255),w,b
  7101  000770  E1E3               	bnz	l4337
  7102  000772  0100               	movlb	0	; () banked
  7103  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7104  000776  B4D8               	btfsc	status,2,c
  7105  000778  D0F3               	goto	l4413
  7106  00077A  D7DE               	goto	l4337
  7107  00077C                     l4345:
  7108  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7109  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7110  000784  0100               	movlb	0	; () banked
  7111  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7112  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7113  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7114  00078A  6AF8               	clrf	tblptru,c
  7115  00078C                     	endif
  7116  00078C                     	if	0	;tblptru may be non-zero
  7117  00078C                     	endif
  7118  00078C  0008               	tblrd		*
  7119  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7120  000792  0100               	movlb	0	; () banked
  7121  000794  51A8               	movf	printf@c& (0+255),w,b
  7122                           
  7123                           ; Switch size 1, requested type "space"
  7124                           ; Number of cases is 4, Range of values is 0 to 115
  7125                           ; switch strategies available:
  7126                           ; Name         Instructions Cycles
  7127                           ; simple_byte           13     7 (average)
  7128                           ;	Chosen strategy is simple_byte
  7129  000796  0A00               	xorlw	0	; case 0
  7130  000798  B4D8               	btfsc	status,2,c
  7131  00079A  0012               	return	
  7132  00079C  0A64               	xorlw	100	; case 100
  7133  00079E  B4D8               	btfsc	status,2,c
  7134  0007A0  D007               	goto	l4347
  7135  0007A2  0A0D               	xorlw	13	; case 105
  7136  0007A4  B4D8               	btfsc	status,2,c
  7137  0007A6  D004               	goto	l4347
  7138  0007A8  0A1A               	xorlw	26	; case 115
  7139  0007AA  B4D8               	btfsc	status,2,c
  7140  0007AC  D75B               	goto	l4313
  7141  0007AE  D0D8               	goto	l4413
  7142  0007B0                     l4347:
  7143                           
  7144                           ;doprnt.c: 1253: {
  7145                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7146  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7147  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7148  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7149  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7150  0007C0  0E02               	movlw	2
  7151  0007C2  0100               	movlb	0	; () banked
  7152  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7153  0007C6  0E00               	movlw	0
  7154  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;doprnt.c: 1261: if((int)val < 0) {
  7158  0007CA  0100               	movlb	0	; () banked
  7159  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7160  0007CE  D008               	goto	l4357
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;doprnt.c: 1262: flag |= 0x03;
  7164  0007D0  0E03               	movlw	3
  7165  0007D2  0100               	movlb	0	; () banked
  7166  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;doprnt.c: 1263: val = -val;
  7170  0007D6  0100               	movlb	0	; () banked
  7171  0007D8  6DA3               	negf	printf@val& (0+255),b
  7172  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7173  0007DC  B0D8               	btfsc	status,0,c
  7174  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7175  0007E0                     l4357:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;doprnt.c: 1264: }
  7179                           ;doprnt.c: 1266: }
  7180                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7181  0007E0  0E01               	movlw	1
  7182  0007E2  0100               	movlb	0	; () banked
  7183  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7184  0007E6                     l4359:
  7185                           
  7186                           ; BSR set to: 0
  7187  0007E6  0E05               	movlw	5
  7188  0007E8  0100               	movlb	0	; () banked
  7189  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7190  0007EC  B4D8               	btfsc	status,2,c
  7191  0007EE  D019               	goto	l4371
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;doprnt.c: 1306: if(val < dpowers[c])
  7195                           
  7196                           ; BSR set to: 0
  7197                           
  7198                           ; BSR set to: 0
  7199  0007F0  0100               	movlb	0	; () banked
  7200  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7201  0007F4  0D02               	mullw	2
  7202  0007F6  0EC6               	movlw	low _dpowers
  7203  0007F8  24F3               	addwf	prodl,w,c
  7204  0007FA  6EF6               	movwf	tblptrl,c
  7205  0007FC  0EFD               	movlw	high _dpowers
  7206  0007FE  20F4               	addwfc	prodh,w,c
  7207  000800  6EF7               	movwf	tblptrh,c
  7208  000802                     	if	1	;There are 3 active tblptr bytes
  7209  000802  6AF8               	clrf	tblptru,c
  7210  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7211  000806  22F8               	addwfc	tblptru,f,c
  7212  000808                     	endif
  7213  000808  0009               	tblrd		*+
  7214  00080A  50F5               	movf	tablat,w,c
  7215  00080C  0100               	movlb	0	; () banked
  7216  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7217  000810  0009               	tblrd		*+
  7218  000812  50F5               	movf	tablat,w,c
  7219  000814  0100               	movlb	0	; () banked
  7220  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7221  000818  A0D8               	btfss	status,0,c
  7222  00081A  D003               	goto	l4371
  7223                           
  7224                           ; BSR set to: 0
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;doprnt.c: 1307: break;
  7230  00081C  0100               	movlb	0	; () banked
  7231  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7232  000820  D7E2               	goto	l4359
  7233  000822                     l4371:
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7237  000822  0100               	movlb	0	; () banked
  7238  000824  51A9               	movf	printf@width& (0+255),w,b
  7239  000826  0100               	movlb	0	; () banked
  7240  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7241  00082A  B4D8               	btfsc	status,2,c
  7242  00082C  D00B               	goto	l4377
  7243                           
  7244                           ; BSR set to: 0
  7245  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7246  000832  0E03               	movlw	3
  7247  000834  0100               	movlb	0	; () banked
  7248  000836  179A               	andwf	??_printf& (0+255),f,b
  7249  000838  B4D8               	btfsc	status,2,c
  7250  00083A  D004               	goto	l4377
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;doprnt.c: 1346: width--;
  7254  00083C  0100               	movlb	0	; () banked
  7255  00083E  07A9               	decf	printf@width& (0+255),f,b
  7256  000840  A0D8               	btfss	status,0,c
  7257  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7258  000844                     l4377:
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;doprnt.c: 1381: if(width > c)
  7262  000844  0E80               	movlw	128
  7263  000846  0100               	movlb	0	; () banked
  7264  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7265  00084A  0E7F               	movlw	127
  7266  00084C  0100               	movlb	0	; () banked
  7267  00084E  6F9A               	movwf	??_printf& (0+255),b
  7268  000850  0100               	movlb	0	; () banked
  7269  000852  51A9               	movf	printf@width& (0+255),w,b
  7270  000854  0100               	movlb	0	; () banked
  7271  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7272  000858  0100               	movlb	0	; () banked
  7273  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7274  00085C  0A80               	xorlw	128
  7275  00085E  0100               	movlb	0	; () banked
  7276  000860  599A               	subwfb	??_printf& (0+255),w,b
  7277  000862  B0D8               	btfsc	status,0,c
  7278  000864  D00B               	goto	l4381
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;doprnt.c: 1382: width -= c;
  7282  000866  0100               	movlb	0	; () banked
  7283  000868  51A8               	movf	printf@c& (0+255),w,b
  7284  00086A  0100               	movlb	0	; () banked
  7285  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7286  00086E  0E00               	movlw	0
  7287  000870  0100               	movlb	0	; () banked
  7288  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7289  000874  0EFF               	movlw	255
  7290  000876  0100               	movlb	0	; () banked
  7291  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7292  00087A  D005               	goto	l4383
  7293  00087C                     l4381:
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;doprnt.c: 1383: else
  7297                           ;doprnt.c: 1384: width = 0;
  7298  00087C  0E00               	movlw	0
  7299  00087E  0100               	movlb	0	; () banked
  7300  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7301  000882  0E00               	movlw	0
  7302  000884  6FA9               	movwf	printf@width& (0+255),b
  7303  000886                     l4383:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;doprnt.c: 1387: if(flag & 0x04) {
  7307  000886  0100               	movlb	0	; () banked
  7308  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7309  00088A  D018               	goto	l4395
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;doprnt.c: 1392: if(flag & 0x03)
  7313  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7314  000890  0E03               	movlw	3
  7315  000892  0100               	movlb	0	; () banked
  7316  000894  179A               	andwf	??_printf& (0+255),f,b
  7317  000896  B4D8               	btfsc	status,2,c
  7318  000898  D003               	goto	l4389
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;doprnt.c: 1393: (putch('-') );
  7322  00089A  0E2D               	movlw	45
  7323  00089C  EC1F  F015         	call	_putch
  7324  0008A0                     l4389:
  7325                           
  7326                           ;doprnt.c: 1415: if(width)
  7327  0008A0  0100               	movlb	0	; () banked
  7328  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7329  0008A4  0100               	movlb	0	; () banked
  7330  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7331  0008A8  B4D8               	btfsc	status,2,c
  7332  0008AA  D025               	goto	l4405
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;doprnt.c: 1417: (putch('0') );
  7336                           
  7337                           ; BSR set to: 0
  7338                           
  7339                           ;doprnt.c: 1416: do
  7340  0008AC  0E30               	movlw	48
  7341  0008AE  EC1F  F015         	call	_putch
  7342                           
  7343                           ;doprnt.c: 1418: while(--width);
  7344  0008B2  0100               	movlb	0	; () banked
  7345  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7346  0008B6  A0D8               	btfss	status,0,c
  7347  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7348  0008BA  D7F2               	goto	l4389
  7349  0008BC                     l4395:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;doprnt.c: 1422: {
  7353                           ;doprnt.c: 1424: if(width
  7354                           ;doprnt.c: 1428: )
  7355  0008BC  0100               	movlb	0	; () banked
  7356  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7357  0008C0  0100               	movlb	0	; () banked
  7358  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7359  0008C4  B4D8               	btfsc	status,2,c
  7360  0008C6  D00D               	goto	l4401
  7361  0008C8                     l4397:
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;doprnt.c: 1430: (putch(' ') );
  7365  0008C8  0E20               	movlw	32
  7366  0008CA  EC1F  F015         	call	_putch
  7367                           
  7368                           ;doprnt.c: 1431: while(--width);
  7369  0008CE  0100               	movlb	0	; () banked
  7370  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7371  0008D2  A0D8               	btfss	status,0,c
  7372  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7373  0008D6  0100               	movlb	0	; () banked
  7374  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7375  0008DA  0100               	movlb	0	; () banked
  7376  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7377  0008DE  A4D8               	btfss	status,2,c
  7378  0008E0  D7F3               	goto	l4397
  7379  0008E2                     l4401:
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;doprnt.c: 1438: if(flag & 0x03)
  7383  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7384  0008E6  0E03               	movlw	3
  7385  0008E8  0100               	movlb	0	; () banked
  7386  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7387  0008EC  B4D8               	btfsc	status,2,c
  7388  0008EE  D003               	goto	l4405
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;doprnt.c: 1439: (putch('-') );
  7392  0008F0  0E2D               	movlw	45
  7393  0008F2  EC1F  F015         	call	_putch
  7394  0008F6                     l4405:
  7395                           
  7396                           ;doprnt.c: 1469: }
  7397                           ;doprnt.c: 1472: prec = c;
  7398  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7399                           
  7400                           ;doprnt.c: 1474: while(prec--) {
  7401  0008FA  D02C               	goto	l4411
  7402  0008FC                     l4407:
  7403                           
  7404                           ;doprnt.c: 1478: {
  7405                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7406  0008FC  0100               	movlb	0	; () banked
  7407  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7408  000900  0D02               	mullw	2
  7409  000902  0EC6               	movlw	low _dpowers
  7410  000904  24F3               	addwf	prodl,w,c
  7411  000906  6EF6               	movwf	tblptrl,c
  7412  000908  0EFD               	movlw	high _dpowers
  7413  00090A  20F4               	addwfc	prodh,w,c
  7414  00090C  6EF7               	movwf	tblptrh,c
  7415  00090E                     	if	1	;There are 3 active tblptr bytes
  7416  00090E  6AF8               	clrf	tblptru,c
  7417  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7418  000912  22F8               	addwfc	tblptru,f,c
  7419  000914                     	endif
  7420  000914  0009               	tblrd		*+
  7421  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7422  00091A  000A               	tblrd		*-
  7423  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7424  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7425  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7426  000928  ECC2  F00F         	call	___lwdiv	;wreg free
  7427  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7428  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7429  000934  0E00               	movlw	0
  7430  000936  0100               	movlb	0	; () banked
  7431  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7432  00093A  0E0A               	movlw	10
  7433  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7434  00093E  ECD7  F010         	call	___lwmod	;wreg free
  7435  000942  0100               	movlb	0	; () banked
  7436  000944  5187               	movf	?___lwmod& (0+255),w,b
  7437  000946  0F30               	addlw	48
  7438  000948  0100               	movlb	0	; () banked
  7439  00094A  6FA8               	movwf	printf@c& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;doprnt.c: 1523: }
  7443                           ;doprnt.c: 1524: (putch(c) );
  7444  00094C  0100               	movlb	0	; () banked
  7445  00094E  51A8               	movf	printf@c& (0+255),w,b
  7446  000950  EC1F  F015         	call	_putch
  7447  000954                     l4411:
  7448  000954  0100               	movlb	0	; () banked
  7449  000956  079E               	decf	printf@prec& (0+255),f,b
  7450  000958  0100               	movlb	0	; () banked
  7451  00095A  299E               	incf	printf@prec& (0+255),w,b
  7452  00095C  A4D8               	btfss	status,2,c
  7453  00095E  D7CE               	goto	l4407
  7454  000960                     l4413:
  7455  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7456  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7457  000968  0100               	movlb	0	; () banked
  7458  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7459  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7460  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7461  00096E  6AF8               	clrf	tblptru,c
  7462  000970                     	endif
  7463  000970                     	if	0	;tblptru may be non-zero
  7464  000970                     	endif
  7465  000970  0008               	tblrd		*
  7466  000972  CFF5 F0A8          	movff	tablat,printf@c
  7467  000976  0100               	movlb	0	; () banked
  7468  000978  51A8               	movf	printf@c& (0+255),w,b
  7469  00097A  B4D8               	btfsc	status,2,c
  7470  00097C  0012               	return	
  7471  00097E  D602               	goto	l4289
  7472  000980                     __end_of_printf:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           intcon2	equ	0xFF1
  7482                           intcon3	equ	0xFF0
  7483                           indf0	equ	0xFEF
  7484                           postinc0	equ	0xFEE
  7485                           fsr0h	equ	0xFEA
  7486                           fsr0l	equ	0xFE9
  7487                           wreg	equ	0xFE8
  7488                           postdec1	equ	0xFE5
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function _putch *****************
  7498 ;; Defined at:
  7499 ;;		line 19 in file "lcd.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  data            1    wreg     unsigned char 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  data            1    2[BANK0 ] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;Total ram usage:        1 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    8
  7520 ;; This function calls:
  7521 ;;		_lcdNibble
  7522 ;; This function is called by:
  7523 ;;		_printf
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text33
  7528  002A3E                     __ptext33:
  7529                           	opt stack 0
  7530  002A3E                     _putch:
  7531                           	opt stack 19
  7532                           
  7533                           ;incstack = 0
  7534                           ;putch@data stored from wreg
  7535  002A3E  0100               	movlb	0	; () banked
  7536  002A40  6F82               	movwf	putch@data& (0+255),b
  7537                           
  7538                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7539  002A42  848C               	bsf	3980,2,c	;volatile
  7540                           
  7541                           ;lcd.c: 21: lcdNibble(data);
  7542  002A44  0100               	movlb	0	; () banked
  7543  002A46  5182               	movf	putch@data& (0+255),w,b
  7544  002A48  EC70  F010         	call	_lcdNibble
  7545  002A4C  0012               	return		;funcret
  7546  002A4E                     __end_of_putch:
  7547                           	opt stack 0
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           intcon2	equ	0xFF1
  7556                           intcon3	equ	0xFF0
  7557                           indf0	equ	0xFEF
  7558                           postinc0	equ	0xFEE
  7559                           fsr0h	equ	0xFEA
  7560                           fsr0l	equ	0xFE9
  7561                           wreg	equ	0xFE8
  7562                           postdec1	equ	0xFE5
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _isdigit *****************
  7572 ;; Defined at:
  7573 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  c               1    wreg     unsigned char 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  c               1    2[BANK0 ] unsigned char 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;		None               void
  7580 ;; Registers used:
  7581 ;;		wreg, status,2, status,0
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;Total ram usage:        3 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    7
  7594 ;; This function calls:
  7595 ;;		Nothing
  7596 ;; This function is called by:
  7597 ;;		_printf
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           	psect	text34
  7602  00289A                     __ptext34:
  7603                           	opt stack 0
  7604  00289A                     _isdigit:
  7605                           	opt stack 20
  7606                           
  7607                           ;incstack = 0
  7608                           ;isdigit@c stored from wreg
  7609  00289A  0100               	movlb	0	; () banked
  7610  00289C  6F82               	movwf	isdigit@c& (0+255),b
  7611  00289E  0E00               	movlw	0
  7612  0028A0  0100               	movlb	0	; () banked
  7613  0028A2  6F81               	movwf	_isdigit$1774& (0+255),b
  7614                           
  7615                           ; BSR set to: 0
  7616  0028A4  0E3A               	movlw	58
  7617  0028A6  0100               	movlb	0	; () banked
  7618  0028A8  6182               	cpfslt	isdigit@c& (0+255),b
  7619  0028AA  D007               	goto	l4139
  7620                           
  7621                           ; BSR set to: 0
  7622  0028AC  0E2F               	movlw	47
  7623  0028AE  0100               	movlb	0	; () banked
  7624  0028B0  6582               	cpfsgt	isdigit@c& (0+255),b
  7625  0028B2  D003               	goto	l4139
  7626                           
  7627                           ; BSR set to: 0
  7628  0028B4  0E01               	movlw	1
  7629  0028B6  0100               	movlb	0	; () banked
  7630  0028B8  6F81               	movwf	_isdigit$1774& (0+255),b
  7631  0028BA                     l4139:
  7632                           
  7633                           ; BSR set to: 0
  7634  0028BA  C081  F080         	movff	_isdigit$1774,??_isdigit
  7635  0028BE  0100               	movlb	0	; () banked
  7636  0028C0  3180               	rrcf	??_isdigit& (0+255),w,b
  7637  0028C2  0012               	return	
  7638  0028C4                     __end_of_isdigit:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           intcon3	equ	0xFF0
  7649                           indf0	equ	0xFEF
  7650                           postinc0	equ	0xFEE
  7651                           fsr0h	equ	0xFEA
  7652                           fsr0l	equ	0xFE9
  7653                           wreg	equ	0xFE8
  7654                           postdec1	equ	0xFE5
  7655                           fsr1l	equ	0xFE1
  7656                           indf2	equ	0xFDF
  7657                           postinc2	equ	0xFDE
  7658                           postdec2	equ	0xFDD
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function ___wmul *****************
  7664 ;; Defined at:
  7665 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7668 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  product         2    4[BANK0 ] unsigned int 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  2    0[BANK0 ] unsigned int 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, prodl, prodh
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7680 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;Total ram usage:        6 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    7
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		_printf
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text35
  7695  00256A                     __ptext35:
  7696                           	opt stack 0
  7697  00256A                     ___wmul:
  7698                           	opt stack 20
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;incstack = 0
  7702  00256A  0100               	movlb	0	; () banked
  7703  00256C  5180               	movf	___wmul@multiplier& (0+255),w,b
  7704  00256E  0100               	movlb	0	; () banked
  7705  002570  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7706  002572  CFF3 F084          	movff	prodl,___wmul@product
  7707  002576  CFF4 F085          	movff	prodh,___wmul@product+1
  7708  00257A  0100               	movlb	0	; () banked
  7709  00257C  5180               	movf	___wmul@multiplier& (0+255),w,b
  7710  00257E  0100               	movlb	0	; () banked
  7711  002580  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7712  002582  50F3               	movf	prodl,w,c
  7713  002584  0100               	movlb	0	; () banked
  7714  002586  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7715  002588  0100               	movlb	0	; () banked
  7716  00258A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7717  00258C  0100               	movlb	0	; () banked
  7718  00258E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7719  002590  50F3               	movf	prodl,w,c
  7720  002592  0100               	movlb	0	; () banked
  7721  002594  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7722                           
  7723                           ; BSR set to: 0
  7724  002596  C084  F080         	movff	___wmul@product,?___wmul
  7725  00259A  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7726  00259E  0012               	return	
  7727  0025A0                     __end_of___wmul:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           intcon2	equ	0xFF1
  7737                           intcon3	equ	0xFF0
  7738                           indf0	equ	0xFEF
  7739                           postinc0	equ	0xFEE
  7740                           fsr0h	equ	0xFEA
  7741                           fsr0l	equ	0xFE9
  7742                           wreg	equ	0xFE8
  7743                           postdec1	equ	0xFE5
  7744                           fsr1l	equ	0xFE1
  7745                           indf2	equ	0xFDF
  7746                           postinc2	equ	0xFDE
  7747                           postdec2	equ	0xFDD
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function ___lwmod *****************
  7753 ;; Defined at:
  7754 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  dividend        2    7[BANK0 ] unsigned int 
  7757 ;;  divisor         2    9[BANK0 ] unsigned int 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  counter         1   11[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;                  2    7[BANK0 ] unsigned int 
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7769 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;Total ram usage:        5 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    7
  7776 ;; This function calls:
  7777 ;;		Nothing
  7778 ;; This function is called by:
  7779 ;;		_printf
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text36
  7784  0021AE                     __ptext36:
  7785                           	opt stack 0
  7786  0021AE                     ___lwmod:
  7787                           	opt stack 20
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;incstack = 0
  7791  0021AE  0100               	movlb	0	; () banked
  7792  0021B0  5189               	movf	___lwmod@divisor& (0+255),w,b
  7793  0021B2  0100               	movlb	0	; () banked
  7794  0021B4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7795  0021B6  B4D8               	btfsc	status,2,c
  7796  0021B8  D026               	goto	l1814
  7797                           
  7798                           ; BSR set to: 0
  7799  0021BA  0E01               	movlw	1
  7800  0021BC  0100               	movlb	0	; () banked
  7801  0021BE  6F8B               	movwf	___lwmod@counter& (0+255),b
  7802  0021C0  D006               	goto	l4177
  7803  0021C2                     l4175:
  7804                           
  7805                           ; BSR set to: 0
  7806  0021C2  0100               	movlb	0	; () banked
  7807  0021C4  90D8               	bcf	status,0,c
  7808  0021C6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7809  0021C8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7810  0021CA  0100               	movlb	0	; () banked
  7811  0021CC  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7812  0021CE                     l4177:
  7813                           
  7814                           ; BSR set to: 0
  7815  0021CE  0100               	movlb	0	; () banked
  7816  0021D0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7817  0021D2  D7F7               	goto	l4175
  7818  0021D4                     l4179:
  7819                           
  7820                           ; BSR set to: 0
  7821  0021D4  0100               	movlb	0	; () banked
  7822  0021D6  5189               	movf	___lwmod@divisor& (0+255),w,b
  7823  0021D8  0100               	movlb	0	; () banked
  7824  0021DA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7825  0021DC  0100               	movlb	0	; () banked
  7826  0021DE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7827  0021E0  0100               	movlb	0	; () banked
  7828  0021E2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7829  0021E4  A0D8               	btfss	status,0,c
  7830  0021E6  D008               	goto	l4183
  7831                           
  7832                           ; BSR set to: 0
  7833  0021E8  0100               	movlb	0	; () banked
  7834  0021EA  5189               	movf	___lwmod@divisor& (0+255),w,b
  7835  0021EC  0100               	movlb	0	; () banked
  7836  0021EE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7837  0021F0  0100               	movlb	0	; () banked
  7838  0021F2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7839  0021F4  0100               	movlb	0	; () banked
  7840  0021F6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7841  0021F8                     l4183:
  7842                           
  7843                           ; BSR set to: 0
  7844  0021F8  0100               	movlb	0	; () banked
  7845  0021FA  90D8               	bcf	status,0,c
  7846  0021FC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7847  0021FE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7848                           
  7849                           ; BSR set to: 0
  7850  002200  0100               	movlb	0	; () banked
  7851  002202  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7852  002204  D7E7               	goto	l4179
  7853  002206                     l1814:
  7854                           
  7855                           ; BSR set to: 0
  7856  002206  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7857  00220A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7858                           
  7859                           ; BSR set to: 0
  7860  00220E  0012               	return		;funcret
  7861  002210                     __end_of___lwmod:
  7862                           	opt stack 0
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           intcon2	equ	0xFF1
  7871                           intcon3	equ	0xFF0
  7872                           indf0	equ	0xFEF
  7873                           postinc0	equ	0xFEE
  7874                           fsr0h	equ	0xFEA
  7875                           fsr0l	equ	0xFE9
  7876                           wreg	equ	0xFE8
  7877                           postdec1	equ	0xFE5
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function ___lwdiv *****************
  7887 ;; Defined at:
  7888 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  dividend        2    0[BANK0 ] unsigned int 
  7891 ;;  divisor         2    2[BANK0 ] unsigned int 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  quotient        2    4[BANK0 ] unsigned int 
  7894 ;;  counter         1    6[BANK0 ] unsigned char 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  2    0[BANK0 ] unsigned int 
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;Total ram usage:        7 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; Hardware stack levels required when called:    7
  7911 ;; This function calls:
  7912 ;;		Nothing
  7913 ;; This function is called by:
  7914 ;;		_printf
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text37
  7919  001F84                     __ptext37:
  7920                           	opt stack 0
  7921  001F84                     ___lwdiv:
  7922                           	opt stack 20
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;incstack = 0
  7926  001F84  0E00               	movlw	0
  7927  001F86  0100               	movlb	0	; () banked
  7928  001F88  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7929  001F8A  0E00               	movlw	0
  7930  001F8C  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7931                           
  7932                           ; BSR set to: 0
  7933  001F8E  0100               	movlb	0	; () banked
  7934  001F90  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7935  001F92  0100               	movlb	0	; () banked
  7936  001F94  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7937  001F96  B4D8               	btfsc	status,2,c
  7938  001F98  D02C               	goto	l1804
  7939                           
  7940                           ; BSR set to: 0
  7941  001F9A  0E01               	movlw	1
  7942  001F9C  0100               	movlb	0	; () banked
  7943  001F9E  6F86               	movwf	___lwdiv@counter& (0+255),b
  7944  001FA0  D006               	goto	l4157
  7945  001FA2                     l4155:
  7946                           
  7947                           ; BSR set to: 0
  7948  001FA2  0100               	movlb	0	; () banked
  7949  001FA4  90D8               	bcf	status,0,c
  7950  001FA6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7951  001FA8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7952  001FAA  0100               	movlb	0	; () banked
  7953  001FAC  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7954  001FAE                     l4157:
  7955                           
  7956                           ; BSR set to: 0
  7957  001FAE  0100               	movlb	0	; () banked
  7958  001FB0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7959  001FB2  D7F7               	goto	l4155
  7960  001FB4                     l4159:
  7961                           
  7962                           ; BSR set to: 0
  7963  001FB4  0100               	movlb	0	; () banked
  7964  001FB6  90D8               	bcf	status,0,c
  7965  001FB8  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7966  001FBA  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7967                           
  7968                           ; BSR set to: 0
  7969  001FBC  0100               	movlb	0	; () banked
  7970  001FBE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7971  001FC0  0100               	movlb	0	; () banked
  7972  001FC2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7973  001FC4  0100               	movlb	0	; () banked
  7974  001FC6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7975  001FC8  0100               	movlb	0	; () banked
  7976  001FCA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7977  001FCC  A0D8               	btfss	status,0,c
  7978  001FCE  D00A               	goto	l4167
  7979                           
  7980                           ; BSR set to: 0
  7981  001FD0  0100               	movlb	0	; () banked
  7982  001FD2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7983  001FD4  0100               	movlb	0	; () banked
  7984  001FD6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7985  001FD8  0100               	movlb	0	; () banked
  7986  001FDA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7987  001FDC  0100               	movlb	0	; () banked
  7988  001FDE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7989                           
  7990                           ; BSR set to: 0
  7991  001FE0  0100               	movlb	0	; () banked
  7992  001FE2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7993  001FE4                     l4167:
  7994                           
  7995                           ; BSR set to: 0
  7996  001FE4  0100               	movlb	0	; () banked
  7997  001FE6  90D8               	bcf	status,0,c
  7998  001FE8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7999  001FEA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8000                           
  8001                           ; BSR set to: 0
  8002  001FEC  0100               	movlb	0	; () banked
  8003  001FEE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8004  001FF0  D7E1               	goto	l4159
  8005  001FF2                     l1804:
  8006                           
  8007                           ; BSR set to: 0
  8008  001FF2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8009  001FF6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8010                           
  8011                           ; BSR set to: 0
  8012  001FFA  0012               	return		;funcret
  8013  001FFC                     __end_of___lwdiv:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           intcon2	equ	0xFF1
  8023                           intcon3	equ	0xFF0
  8024                           indf0	equ	0xFEF
  8025                           postinc0	equ	0xFEE
  8026                           fsr0h	equ	0xFEA
  8027                           fsr0l	equ	0xFE9
  8028                           wreg	equ	0xFE8
  8029                           postdec1	equ	0xFE5
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function _lcdInst *****************
  8039 ;; Defined at:
  8040 ;;		line 14 in file "lcd.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  data            1    wreg     unsigned char 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  data            1    2[BANK0 ] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;Total ram usage:        1 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    8
  8061 ;; This function calls:
  8062 ;;		_lcdNibble
  8063 ;; This function is called by:
  8064 ;;		_UI
  8065 ;;		_change_state_to_menu_start
  8066 ;;		_change_state_to_menu_12
  8067 ;;		_change_state_to_menu_22
  8068 ;;		_initLCD
  8069 ;;		_printRTC
  8070 ;;		_Loading
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text38
  8075  002A4E                     __ptext38:
  8076                           	opt stack 0
  8077  002A4E                     _lcdInst:
  8078                           	opt stack 20
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;incstack = 0
  8082                           ;lcdInst@data stored from wreg
  8083  002A4E  0100               	movlb	0	; () banked
  8084  002A50  6F82               	movwf	lcdInst@data& (0+255),b
  8085                           
  8086                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8087  002A52  948C               	bcf	3980,2,c	;volatile
  8088                           
  8089                           ;lcd.c: 16: lcdNibble(data);
  8090  002A54  0100               	movlb	0	; () banked
  8091  002A56  5182               	movf	lcdInst@data& (0+255),w,b
  8092  002A58  EC70  F010         	call	_lcdNibble
  8093  002A5C  0012               	return		;funcret
  8094  002A5E                     __end_of_lcdInst:
  8095                           	opt stack 0
  8096                           tblptru	equ	0xFF8
  8097                           tblptrh	equ	0xFF7
  8098                           tblptrl	equ	0xFF6
  8099                           tablat	equ	0xFF5
  8100                           prodh	equ	0xFF4
  8101                           prodl	equ	0xFF3
  8102                           intcon	equ	0xFF2
  8103                           intcon2	equ	0xFF1
  8104                           intcon3	equ	0xFF0
  8105                           indf0	equ	0xFEF
  8106                           postinc0	equ	0xFEE
  8107                           fsr0h	equ	0xFEA
  8108                           fsr0l	equ	0xFE9
  8109                           wreg	equ	0xFE8
  8110                           postdec1	equ	0xFE5
  8111                           fsr1l	equ	0xFE1
  8112                           indf2	equ	0xFDF
  8113                           postinc2	equ	0xFDE
  8114                           postdec2	equ	0xFDD
  8115                           fsr2h	equ	0xFDA
  8116                           fsr2l	equ	0xFD9
  8117                           status	equ	0xFD8
  8118                           
  8119 ;; *************** function _lcdNibble *****************
  8120 ;; Defined at:
  8121 ;;		line 24 in file "lcd.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;  data            1    wreg     unsigned char 
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;  data            1    1[BANK0 ] unsigned char 
  8126 ;;  temp            1    0[BANK0 ] unsigned char 
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;Total ram usage:        2 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    7
  8143 ;; This function calls:
  8144 ;;		Nothing
  8145 ;; This function is called by:
  8146 ;;		_lcdInst
  8147 ;;		_putch
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text39
  8152  0020E0                     __ptext39:
  8153                           	opt stack 0
  8154  0020E0                     _lcdNibble:
  8155                           	opt stack 20
  8156                           
  8157                           ;incstack = 0
  8158                           ;lcdNibble@data stored from wreg
  8159  0020E0  0100               	movlb	0	; () banked
  8160  0020E2  6F81               	movwf	lcdNibble@data& (0+255),b
  8161                           
  8162                           ;lcd.c: 26: char temp = data & 0xF0;
  8163  0020E4  0100               	movlb	0	; () banked
  8164  0020E6  5181               	movf	lcdNibble@data& (0+255),w,b
  8165  0020E8  0BF0               	andlw	240
  8166  0020EA  0100               	movlb	0	; () banked
  8167  0020EC  6F80               	movwf	lcdNibble@temp& (0+255),b
  8168                           
  8169                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8170  0020EE  508C               	movf	3980,w,c	;volatile
  8171  0020F0  0B0F               	andlw	15
  8172  0020F2  6E8C               	movwf	3980,c	;volatile
  8173                           
  8174                           ;lcd.c: 28: LATD = temp | LATD;
  8175  0020F4  0100               	movlb	0	; () banked
  8176  0020F6  5180               	movf	lcdNibble@temp& (0+255),w,b
  8177  0020F8  108C               	iorwf	3980,w,c	;volatile
  8178  0020FA  6E8C               	movwf	3980,c	;volatile
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8182  0020FC  868C               	bsf	3980,3,c	;volatile
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8186  0020FE  0E42               	movlw	66
  8187  002100                     u4977:
  8188  002100  2EE8               	decfsz	wreg,f,c
  8189  002102  D7FE               	bra	u4977
  8190  002104  D000               	nop2	
  8191                           
  8192                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8193  002106  968C               	bcf	3980,3,c	;volatile
  8194                           
  8195                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8196  002108  0E42               	movlw	66
  8197  00210A                     u4987:
  8198  00210A  2EE8               	decfsz	wreg,f,c
  8199  00210C  D7FE               	bra	u4987
  8200  00210E  D000               	nop2	
  8201                           
  8202                           ;lcd.c: 35: data = data << 4;
  8203  002110  0100               	movlb	0	; () banked
  8204  002112  3981               	swapf	lcdNibble@data& (0+255),w,b
  8205  002114  0BF0               	andlw	240
  8206  002116  0100               	movlb	0	; () banked
  8207  002118  6F81               	movwf	lcdNibble@data& (0+255),b
  8208                           
  8209                           ;lcd.c: 37: temp = data & 0xF0;
  8210  00211A  0100               	movlb	0	; () banked
  8211  00211C  5181               	movf	lcdNibble@data& (0+255),w,b
  8212  00211E  0BF0               	andlw	240
  8213  002120  0100               	movlb	0	; () banked
  8214  002122  6F80               	movwf	lcdNibble@temp& (0+255),b
  8215                           
  8216                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8217  002124  508C               	movf	3980,w,c	;volatile
  8218  002126  0B0F               	andlw	15
  8219  002128  6E8C               	movwf	3980,c	;volatile
  8220                           
  8221                           ;lcd.c: 39: LATD = temp | LATD;
  8222  00212A  0100               	movlb	0	; () banked
  8223  00212C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8224  00212E  108C               	iorwf	3980,w,c	;volatile
  8225  002130  6E8C               	movwf	3980,c	;volatile
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8229  002132  868C               	bsf	3980,3,c	;volatile
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8233  002134  0E42               	movlw	66
  8234  002136                     u4997:
  8235  002136  2EE8               	decfsz	wreg,f,c
  8236  002138  D7FE               	bra	u4997
  8237  00213A  D000               	nop2	
  8238                           
  8239                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8240  00213C  968C               	bcf	3980,3,c	;volatile
  8241                           
  8242                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8243  00213E  0E42               	movlw	66
  8244  002140                     u5007:
  8245  002140  2EE8               	decfsz	wreg,f,c
  8246  002142  D7FE               	bra	u5007
  8247  002144  D000               	nop2	
  8248  002146  0012               	return		;funcret
  8249  002148                     __end_of_lcdNibble:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon2	equ	0xFF1
  8259                           intcon3	equ	0xFF0
  8260                           indf0	equ	0xFEF
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           postdec1	equ	0xFE5
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           postdec2	equ	0xFDD
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function ___awmod *****************
  8275 ;; Defined at:
  8276 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  dividend        2    0[BANK0 ] int 
  8279 ;;  divisor         2    2[BANK0 ] int 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  sign            1    5[BANK0 ] unsigned char 
  8282 ;;  counter         1    4[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  2    0[BANK0 ] int 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:        6 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    7
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_UI
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text40
  8307  001CAA                     __ptext40:
  8308                           	opt stack 0
  8309  001CAA                     ___awmod:
  8310                           	opt stack 22
  8311                           
  8312                           ;incstack = 0
  8313  001CAA  0E00               	movlw	0
  8314  001CAC  0100               	movlb	0	; () banked
  8315  001CAE  6F85               	movwf	___awmod@sign& (0+255),b
  8316                           
  8317                           ; BSR set to: 0
  8318  001CB0  0100               	movlb	0	; () banked
  8319  001CB2  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8320  001CB4  D008               	goto	l5217
  8321                           
  8322                           ; BSR set to: 0
  8323  001CB6  0100               	movlb	0	; () banked
  8324  001CB8  6D80               	negf	___awmod@dividend& (0+255),b
  8325  001CBA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8326  001CBC  B0D8               	btfsc	status,0,c
  8327  001CBE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 0
  8330  001CC0  0E01               	movlw	1
  8331  001CC2  0100               	movlb	0	; () banked
  8332  001CC4  6F85               	movwf	___awmod@sign& (0+255),b
  8333  001CC6                     l5217:
  8334                           
  8335                           ; BSR set to: 0
  8336  001CC6  0100               	movlb	0	; () banked
  8337  001CC8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8338  001CCA  D005               	goto	l5221
  8339                           
  8340                           ; BSR set to: 0
  8341  001CCC  0100               	movlb	0	; () banked
  8342  001CCE  6D82               	negf	___awmod@divisor& (0+255),b
  8343  001CD0  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8344  001CD2  B0D8               	btfsc	status,0,c
  8345  001CD4  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8346  001CD6                     l5221:
  8347                           
  8348                           ; BSR set to: 0
  8349  001CD6  0100               	movlb	0	; () banked
  8350  001CD8  5182               	movf	___awmod@divisor& (0+255),w,b
  8351  001CDA  0100               	movlb	0	; () banked
  8352  001CDC  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8353  001CDE  B4D8               	btfsc	status,2,c
  8354  001CE0  D026               	goto	l5237
  8355                           
  8356                           ; BSR set to: 0
  8357  001CE2  0E01               	movlw	1
  8358  001CE4  0100               	movlb	0	; () banked
  8359  001CE6  6F84               	movwf	___awmod@counter& (0+255),b
  8360  001CE8  D006               	goto	l5227
  8361  001CEA                     l5225:
  8362                           
  8363                           ; BSR set to: 0
  8364  001CEA  0100               	movlb	0	; () banked
  8365  001CEC  90D8               	bcf	status,0,c
  8366  001CEE  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8367  001CF0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8368  001CF2  0100               	movlb	0	; () banked
  8369  001CF4  2B84               	incf	___awmod@counter& (0+255),f,b
  8370  001CF6                     l5227:
  8371                           
  8372                           ; BSR set to: 0
  8373  001CF6  0100               	movlb	0	; () banked
  8374  001CF8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8375  001CFA  D7F7               	goto	l5225
  8376  001CFC                     l5229:
  8377                           
  8378                           ; BSR set to: 0
  8379  001CFC  0100               	movlb	0	; () banked
  8380  001CFE  5182               	movf	___awmod@divisor& (0+255),w,b
  8381  001D00  0100               	movlb	0	; () banked
  8382  001D02  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8383  001D04  0100               	movlb	0	; () banked
  8384  001D06  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8385  001D08  0100               	movlb	0	; () banked
  8386  001D0A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8387  001D0C  A0D8               	btfss	status,0,c
  8388  001D0E  D008               	goto	l5233
  8389                           
  8390                           ; BSR set to: 0
  8391  001D10  0100               	movlb	0	; () banked
  8392  001D12  5182               	movf	___awmod@divisor& (0+255),w,b
  8393  001D14  0100               	movlb	0	; () banked
  8394  001D16  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8395  001D18  0100               	movlb	0	; () banked
  8396  001D1A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8397  001D1C  0100               	movlb	0	; () banked
  8398  001D1E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8399  001D20                     l5233:
  8400                           
  8401                           ; BSR set to: 0
  8402  001D20  0100               	movlb	0	; () banked
  8403  001D22  90D8               	bcf	status,0,c
  8404  001D24  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8405  001D26  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8406                           
  8407                           ; BSR set to: 0
  8408  001D28  0100               	movlb	0	; () banked
  8409  001D2A  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8410  001D2C  D7E7               	goto	l5229
  8411  001D2E                     l5237:
  8412                           
  8413                           ; BSR set to: 0
  8414  001D2E  0100               	movlb	0	; () banked
  8415  001D30  5185               	movf	___awmod@sign& (0+255),w,b
  8416  001D32  0100               	movlb	0	; () banked
  8417  001D34  B4D8               	btfsc	status,2,c
  8418  001D36  D005               	goto	l5241
  8419                           
  8420                           ; BSR set to: 0
  8421  001D38  0100               	movlb	0	; () banked
  8422  001D3A  6D80               	negf	___awmod@dividend& (0+255),b
  8423  001D3C  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8424  001D3E  B0D8               	btfsc	status,0,c
  8425  001D40  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8426  001D42                     l5241:
  8427                           
  8428                           ; BSR set to: 0
  8429  001D42  C080  F080         	movff	___awmod@dividend,?___awmod
  8430  001D46  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8431  001D4A  0012               	return	
  8432  001D4C                     __end_of___awmod:
  8433                           	opt stack 0
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodh	equ	0xFF4
  8439                           prodl	equ	0xFF3
  8440                           intcon	equ	0xFF2
  8441                           intcon2	equ	0xFF1
  8442                           intcon3	equ	0xFF0
  8443                           indf0	equ	0xFEF
  8444                           postinc0	equ	0xFEE
  8445                           fsr0h	equ	0xFEA
  8446                           fsr0l	equ	0xFE9
  8447                           wreg	equ	0xFE8
  8448                           postdec1	equ	0xFE5
  8449                           fsr1l	equ	0xFE1
  8450                           indf2	equ	0xFDF
  8451                           postinc2	equ	0xFDE
  8452                           postdec2	equ	0xFDD
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function ___awdiv *****************
  8458 ;; Defined at:
  8459 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;  dividend        2    6[BANK0 ] int 
  8462 ;;  divisor         2    8[BANK0 ] int 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;  quotient        2   12[BANK0 ] int 
  8465 ;;  sign            1   11[BANK0 ] unsigned char 
  8466 ;;  counter         1   10[BANK0 ] unsigned char 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  2    6[BANK0 ] int 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;Total ram usage:        8 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    7
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_UI
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text41
  8491  001A86                     __ptext41:
  8492                           	opt stack 0
  8493  001A86                     ___awdiv:
  8494                           	opt stack 22
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;incstack = 0
  8498  001A86  0E00               	movlw	0
  8499  001A88  0100               	movlb	0	; () banked
  8500  001A8A  6F8B               	movwf	___awdiv@sign& (0+255),b
  8501                           
  8502                           ; BSR set to: 0
  8503  001A8C  0100               	movlb	0	; () banked
  8504  001A8E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8505  001A90  D008               	goto	l5173
  8506                           
  8507                           ; BSR set to: 0
  8508  001A92  0100               	movlb	0	; () banked
  8509  001A94  6D88               	negf	___awdiv@divisor& (0+255),b
  8510  001A96  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8511  001A98  B0D8               	btfsc	status,0,c
  8512  001A9A  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8513                           
  8514                           ; BSR set to: 0
  8515  001A9C  0E01               	movlw	1
  8516  001A9E  0100               	movlb	0	; () banked
  8517  001AA0  6F8B               	movwf	___awdiv@sign& (0+255),b
  8518  001AA2                     l5173:
  8519                           
  8520                           ; BSR set to: 0
  8521  001AA2  0100               	movlb	0	; () banked
  8522  001AA4  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8523  001AA6  D008               	goto	l5179
  8524                           
  8525                           ; BSR set to: 0
  8526  001AA8  0100               	movlb	0	; () banked
  8527  001AAA  6D86               	negf	___awdiv@dividend& (0+255),b
  8528  001AAC  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8529  001AAE  B0D8               	btfsc	status,0,c
  8530  001AB0  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8531                           
  8532                           ; BSR set to: 0
  8533  001AB2  0E01               	movlw	1
  8534  001AB4  0100               	movlb	0	; () banked
  8535  001AB6  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8536  001AB8                     l5179:
  8537                           
  8538                           ; BSR set to: 0
  8539  001AB8  0E00               	movlw	0
  8540  001ABA  0100               	movlb	0	; () banked
  8541  001ABC  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8542  001ABE  0E00               	movlw	0
  8543  001AC0  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546  001AC2  0100               	movlb	0	; () banked
  8547  001AC4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8548  001AC6  0100               	movlb	0	; () banked
  8549  001AC8  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8550  001ACA  B4D8               	btfsc	status,2,c
  8551  001ACC  D02C               	goto	l5201
  8552                           
  8553                           ; BSR set to: 0
  8554  001ACE  0E01               	movlw	1
  8555  001AD0  0100               	movlb	0	; () banked
  8556  001AD2  6F8A               	movwf	___awdiv@counter& (0+255),b
  8557  001AD4  D006               	goto	l5187
  8558  001AD6                     l5185:
  8559                           
  8560                           ; BSR set to: 0
  8561  001AD6  0100               	movlb	0	; () banked
  8562  001AD8  90D8               	bcf	status,0,c
  8563  001ADA  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8564  001ADC  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8565  001ADE  0100               	movlb	0	; () banked
  8566  001AE0  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8567  001AE2                     l5187:
  8568                           
  8569                           ; BSR set to: 0
  8570  001AE2  0100               	movlb	0	; () banked
  8571  001AE4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8572  001AE6  D7F7               	goto	l5185
  8573  001AE8                     l5189:
  8574                           
  8575                           ; BSR set to: 0
  8576  001AE8  0100               	movlb	0	; () banked
  8577  001AEA  90D8               	bcf	status,0,c
  8578  001AEC  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8579  001AEE  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8580                           
  8581                           ; BSR set to: 0
  8582  001AF0  0100               	movlb	0	; () banked
  8583  001AF2  5188               	movf	___awdiv@divisor& (0+255),w,b
  8584  001AF4  0100               	movlb	0	; () banked
  8585  001AF6  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8586  001AF8  0100               	movlb	0	; () banked
  8587  001AFA  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8588  001AFC  0100               	movlb	0	; () banked
  8589  001AFE  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8590  001B00  A0D8               	btfss	status,0,c
  8591  001B02  D00A               	goto	l5197
  8592                           
  8593                           ; BSR set to: 0
  8594  001B04  0100               	movlb	0	; () banked
  8595  001B06  5188               	movf	___awdiv@divisor& (0+255),w,b
  8596  001B08  0100               	movlb	0	; () banked
  8597  001B0A  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8598  001B0C  0100               	movlb	0	; () banked
  8599  001B0E  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8600  001B10  0100               	movlb	0	; () banked
  8601  001B12  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8602                           
  8603                           ; BSR set to: 0
  8604  001B14  0100               	movlb	0	; () banked
  8605  001B16  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8606  001B18                     l5197:
  8607                           
  8608                           ; BSR set to: 0
  8609  001B18  0100               	movlb	0	; () banked
  8610  001B1A  90D8               	bcf	status,0,c
  8611  001B1C  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8612  001B1E  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8613                           
  8614                           ; BSR set to: 0
  8615  001B20  0100               	movlb	0	; () banked
  8616  001B22  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8617  001B24  D7E1               	goto	l5189
  8618  001B26                     l5201:
  8619                           
  8620                           ; BSR set to: 0
  8621  001B26  0100               	movlb	0	; () banked
  8622  001B28  518B               	movf	___awdiv@sign& (0+255),w,b
  8623  001B2A  0100               	movlb	0	; () banked
  8624  001B2C  B4D8               	btfsc	status,2,c
  8625  001B2E  D005               	goto	l5205
  8626                           
  8627                           ; BSR set to: 0
  8628  001B30  0100               	movlb	0	; () banked
  8629  001B32  6D8C               	negf	___awdiv@quotient& (0+255),b
  8630  001B34  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8631  001B36  B0D8               	btfsc	status,0,c
  8632  001B38  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8633  001B3A                     l5205:
  8634                           
  8635                           ; BSR set to: 0
  8636  001B3A  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8637  001B3E  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8638  001B42  0012               	return	
  8639  001B44                     __end_of___awdiv:
  8640                           	opt stack 0
  8641                           tblptru	equ	0xFF8
  8642                           tblptrh	equ	0xFF7
  8643                           tblptrl	equ	0xFF6
  8644                           tablat	equ	0xFF5
  8645                           prodh	equ	0xFF4
  8646                           prodl	equ	0xFF3
  8647                           intcon	equ	0xFF2
  8648                           intcon2	equ	0xFF1
  8649                           intcon3	equ	0xFF0
  8650                           indf0	equ	0xFEF
  8651                           postinc0	equ	0xFEE
  8652                           fsr0h	equ	0xFEA
  8653                           fsr0l	equ	0xFE9
  8654                           wreg	equ	0xFE8
  8655                           postdec1	equ	0xFE5
  8656                           fsr1l	equ	0xFE1
  8657                           indf2	equ	0xFDF
  8658                           postinc2	equ	0xFDE
  8659                           postdec2	equ	0xFDD
  8660                           fsr2h	equ	0xFDA
  8661                           fsr2l	equ	0xFD9
  8662                           status	equ	0xFD8
  8663                           
  8664 ;; *************** function _PortTestA5 *****************
  8665 ;; Defined at:
  8666 ;;		line 14 in file "PortHigh.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;		None
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		None
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;Total ram usage:        0 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    7
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_main
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           	psect	text42
  8695  002A1A                     __ptext42:
  8696                           	opt stack 0
  8697  002A1A                     _PortTestA5:
  8698                           	opt stack 23
  8699  002A1A                     l269:
  8700  002A1A  A281               	btfss	3969,1,c	;volatile
  8701  002A1C  D7FE               	goto	l269
  8702                           
  8703                           ;PortHigh.c: 18: }
  8704                           ;PortHigh.c: 19: LATAbits.LATA5 = 1;
  8705  002A1E  8A89               	bsf	3977,5,c	;volatile
  8706  002A20                     l272:
  8707  002A20  B281               	btfsc	3969,1,c	;volatile
  8708  002A22  D7FE               	goto	l272
  8709                           
  8710                           ;PortHigh.c: 22: }
  8711                           ;PortHigh.c: 23: __nop();
  8712  002A24  F000               	nop	
  8713                           
  8714                           ;PortHigh.c: 24: __nop();
  8715  002A26  F000               	nop	
  8716                           
  8717                           ;PortHigh.c: 25: LATAbits.LATA5 = 0;
  8718  002A28  9A89               	bcf	3977,5,c	;volatile
  8719  002A2A  0012               	return		;funcret
  8720  002A2C                     __end_of_PortTestA5:
  8721                           	opt stack 0
  8722                           tblptru	equ	0xFF8
  8723                           tblptrh	equ	0xFF7
  8724                           tblptrl	equ	0xFF6
  8725                           tablat	equ	0xFF5
  8726                           prodh	equ	0xFF4
  8727                           prodl	equ	0xFF3
  8728                           intcon	equ	0xFF2
  8729                           intcon2	equ	0xFF1
  8730                           intcon3	equ	0xFF0
  8731                           indf0	equ	0xFEF
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           postdec1	equ	0xFE5
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _handler *****************
  8746 ;; Defined at:
  8747 ;;		line 15 in file "interruptHandler.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      void 
  8754 ;; Registers used:
  8755 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;Total ram usage:       16 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    6
  8768 ;; This function calls:
  8769 ;;		_printSortTimer
  8770 ;;		_updateMenu
  8771 ;;		i2_set_timer1
  8772 ;; This function is called by:
  8773 ;;		Interrupt level 2
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	intcode
  8778  000008                     __pintcode:
  8779                           	opt stack 0
  8780  000008                     _handler:
  8781                           	opt stack 18
  8782                           
  8783                           ;incstack = 0
  8784  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8785  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8786                           tblptru	equ	0xFF8
  8787                           tblptrh	equ	0xFF7
  8788                           tblptrl	equ	0xFF6
  8789                           tablat	equ	0xFF5
  8790                           prodh	equ	0xFF4
  8791                           prodl	equ	0xFF3
  8792                           intcon	equ	0xFF2
  8793                           intcon2	equ	0xFF1
  8794                           intcon3	equ	0xFF0
  8795                           indf0	equ	0xFEF
  8796                           postinc0	equ	0xFEE
  8797                           fsr0h	equ	0xFEA
  8798                           fsr0l	equ	0xFE9
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           postdec2	equ	0xFDD
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809                           	psect	intcode_body
  8810  001866                     __pintcode_body:
  8811                           	opt stack 18
  8812  001866                     int_func:
  8813                           	opt stack 18
  8814  001866  0006               	pop		; remove dummy address from shadow register refresh
  8815  001868  CFFA F04D          	movff	pclath,??_handler+2
  8816  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8817  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8818  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8819  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8820  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8821  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8822  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8823  001888  CFF3 F055          	movff	prodl,??_handler+10
  8824  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8825  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8826  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8827  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8828  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8829                           
  8830                           ;interruptHandler.c: 17: if(INT1IF){
  8831  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8832  0018A2  D018               	goto	i2l5907
  8833                           
  8834                           ;interruptHandler.c: 18: INT1IF = 0;
  8835  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8836                           
  8837                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  8838  0018A6  0100               	movlb	0	; () banked
  8839  0018A8  51F2               	movf	_machine_state& (0+255),w,b
  8840  0018AA  A4D8               	btfss	status,2,c
  8841  0018AC  D013               	goto	i2l5907
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  8845  0018AE  3881               	swapf	3969,w,c	;volatile
  8846  0018B0  0B0F               	andlw	15
  8847  0018B2  0B0F               	andlw	15
  8848  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8849  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8850  0018B8  0EB5               	movlw	low _keys
  8851  0018BA  244B               	addwf	??_handler,w,c
  8852  0018BC  6EF6               	movwf	tblptrl,c
  8853  0018BE  0EFD               	movlw	high _keys
  8854  0018C0  204C               	addwfc	??_handler+1,w,c
  8855  0018C2  6EF7               	movwf	tblptrh,c
  8856  0018C4                     	if	1	;There are 3 active tblptr bytes
  8857  0018C4  6AF8               	clrf	tblptru,c
  8858  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8859  0018C8  22F8               	addwfc	tblptru,f,c
  8860  0018CA                     	endif
  8861  0018CA  0008               	tblrd		*
  8862  0018CC  CFF5 F07C          	movff	tablat,_input
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;interruptHandler.c: 21: updateMenu();
  8866  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8867  0018D4                     i2l5907:
  8868                           
  8869                           ;interruptHandler.c: 22: }
  8870                           ;interruptHandler.c: 23: }
  8871                           ;interruptHandler.c: 26: if(TMR0IF){
  8872  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8873  0018D6  D00C               	goto	i2l5921
  8874                           
  8875                           ;interruptHandler.c: 27: TMR0IF = 0;
  8876  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8877                           
  8878                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  8879  0018DA  0100               	movlb	0	; () banked
  8880  0018DC  05F2               	decf	_machine_state& (0+255),w,b
  8881  0018DE  A4D8               	btfss	status,2,c
  8882  0018E0  D007               	goto	i2l5921
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;interruptHandler.c: 29: printSortTimer();
  8886  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8887                           
  8888                           ;interruptHandler.c: 31: TMR0H = 0b10000101;
  8889  0018E6  0E85               	movlw	133
  8890  0018E8  6ED7               	movwf	4055,c	;volatile
  8891                           
  8892                           ;interruptHandler.c: 32: TMR0L = 0b11101110;
  8893  0018EA  0EEE               	movlw	238
  8894  0018EC  6ED6               	movwf	4054,c	;volatile
  8895                           
  8896                           ;interruptHandler.c: 33: TMR0ON = 1;
  8897  0018EE  8ED5               	bsf	4053,7,c	;volatile
  8898  0018F0                     i2l5921:
  8899                           
  8900                           ;interruptHandler.c: 34: }
  8901                           ;interruptHandler.c: 35: }
  8902                           ;interruptHandler.c: 38: if(TMR1IF){
  8903  0018F0  A09E               	btfss	3998,0,c	;volatile
  8904  0018F2  D023               	goto	i2l5939
  8905                           
  8906                           ;interruptHandler.c: 39: TMR1IF = 0;
  8907  0018F4  909E               	bcf	3998,0,c	;volatile
  8908                           
  8909                           ;interruptHandler.c: 40: TMR1ON = 0;
  8910  0018F6  90CD               	bcf	4045,0,c	;volatile
  8911                           
  8912                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  8913  0018F8  0100               	movlb	0	; () banked
  8914  0018FA  05F2               	decf	_machine_state& (0+255),w,b
  8915  0018FC  A4D8               	btfss	status,2,c
  8916  0018FE  D01D               	goto	i2l5939
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;interruptHandler.c: 42: if(was_low){
  8920  001900  5079               	movf	_was_low,w,c
  8921  001902  107A               	iorwf	_was_low+1,w,c
  8922  001904  B4D8               	btfsc	status,2,c
  8923  001906  D00D               	goto	i2l1325
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;interruptHandler.c: 43: LATCbits.LATC1 = 1;
  8927  001908  828B               	bsf	3979,1,c	;volatile
  8928                           
  8929                           ;interruptHandler.c: 44: LATCbits.LATC2 = 1;
  8930  00190A  848B               	bsf	3979,2,c	;volatile
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;interruptHandler.c: 45: was_low = 0;
  8934  00190C  0E00               	movlw	0
  8935  00190E  6E7A               	movwf	_was_low+1,c
  8936  001910  0E00               	movlw	0
  8937  001912  6E79               	movwf	_was_low,c
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;interruptHandler.c: 47: set_timer1(1500);
  8941  001914  0E05               	movlw	5
  8942  001916  6E02               	movwf	i2set_timer1@time_us+1,c
  8943  001918  0EDC               	movlw	220
  8944  00191A  6E01               	movwf	i2set_timer1@time_us,c
  8945  00191C  EC62  F014         	call	i2_set_timer1	;wreg free
  8946                           
  8947                           ;interruptHandler.c: 48: }
  8948  001920  D00C               	goto	i2l5939
  8949  001922                     i2l1325:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;interruptHandler.c: 49: else{
  8953                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
  8954  001922  928B               	bcf	3979,1,c	;volatile
  8955                           
  8956                           ;interruptHandler.c: 51: LATCbits.LATC2 = 0;
  8957  001924  948B               	bcf	3979,2,c	;volatile
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;interruptHandler.c: 52: was_low = 1;
  8961  001926  0E00               	movlw	0
  8962  001928  6E7A               	movwf	_was_low+1,c
  8963  00192A  0E01               	movlw	1
  8964  00192C  6E79               	movwf	_was_low,c
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;interruptHandler.c: 54: set_timer1(18500);
  8968  00192E  0E48               	movlw	72
  8969  001930  6E02               	movwf	i2set_timer1@time_us+1,c
  8970  001932  0E44               	movlw	68
  8971  001934  6E01               	movwf	i2set_timer1@time_us,c
  8972  001936  EC62  F014         	call	i2_set_timer1	;wreg free
  8973  00193A                     i2l5939:
  8974                           
  8975                           ;interruptHandler.c: 55: }
  8976                           ;interruptHandler.c: 56: }
  8977                           ;interruptHandler.c: 57: }
  8978                           ;interruptHandler.c: 60: if(TMR3IF){
  8979  00193A  A2A1               	btfss	4001,1,c	;volatile
  8980  00193C  D017               	goto	i2l1330
  8981                           
  8982                           ;interruptHandler.c: 61: TMR3IF = 0;
  8983  00193E  92A1               	bcf	4001,1,c	;volatile
  8984                           
  8985                           ;interruptHandler.c: 62: TMR3ON = 0;
  8986  001940  90B1               	bcf	4017,0,c	;volatile
  8987                           
  8988                           ;interruptHandler.c: 63: TMR3counter++;
  8989  001942  4A5F               	infsnz	_TMR3counter,f,c
  8990  001944  2A60               	incf	_TMR3counter+1,f,c
  8991                           
  8992                           ;interruptHandler.c: 64: if(TMR3counter==10){
  8993  001946  0E0A               	movlw	10
  8994  001948  185F               	xorwf	_TMR3counter,w,c
  8995  00194A  1060               	iorwf	_TMR3counter+1,w,c
  8996  00194C  A4D8               	btfss	status,2,c
  8997  00194E  D009               	goto	i2l5949
  8998                           
  8999                           ;interruptHandler.c: 65: TMR3counter=0;
  9000  001950  0E00               	movlw	0
  9001  001952  6E60               	movwf	_TMR3counter+1,c
  9002  001954  0E00               	movlw	0
  9003  001956  6E5F               	movwf	_TMR3counter,c
  9004                           
  9005                           ;interruptHandler.c: 66: TMR3CF = 1;
  9006  001958  0E00               	movlw	0
  9007  00195A  6E5E               	movwf	_TMR3CF+1,c
  9008  00195C  0E01               	movlw	1
  9009  00195E  6E5D               	movwf	_TMR3CF,c
  9010                           
  9011                           ;interruptHandler.c: 67: }
  9012  001960  D005               	goto	i2l1330
  9013  001962                     i2l5949:
  9014                           
  9015                           ;interruptHandler.c: 68: else{
  9016                           ;interruptHandler.c: 69: TMR3H = 0b00111100;
  9017  001962  0E3C               	movlw	60
  9018  001964  6EB3               	movwf	4019,c	;volatile
  9019                           
  9020                           ;interruptHandler.c: 70: TMR3L = 0b10110000;
  9021  001966  0EB0               	movlw	176
  9022  001968  6EB2               	movwf	4018,c	;volatile
  9023                           
  9024                           ;interruptHandler.c: 71: TMR3ON = 1;
  9025  00196A  80B1               	bsf	4017,0,c	;volatile
  9026  00196C                     i2l1330:
  9027  00196C  C05A  FFF5         	movff	??_handler+15,tablat
  9028  001970  C059  FFF8         	movff	??_handler+14,tblptru
  9029  001974  C058  FFF7         	movff	??_handler+13,tblptrh
  9030  001978  C057  FFF6         	movff	??_handler+12,tblptrl
  9031  00197C  C056  FFF4         	movff	??_handler+11,prodh
  9032  001980  C055  FFF3         	movff	??_handler+10,prodl
  9033  001984  C054  FFDA         	movff	??_handler+9,fsr2h
  9034  001988  C053  FFD9         	movff	??_handler+8,fsr2l
  9035  00198C  C052  FFE2         	movff	??_handler+7,fsr1h
  9036  001990  C051  FFE1         	movff	??_handler+6,fsr1l
  9037  001994  C050  FFEA         	movff	??_handler+5,fsr0h
  9038  001998  C04F  FFE9         	movff	??_handler+4,fsr0l
  9039  00199C  C04E  FFFB         	movff	??_handler+3,pclatu
  9040  0019A0  C04D  FFFA         	movff	??_handler+2,pclath
  9041  0019A4  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9042  0019A6  0011               	retfie		f
  9043  0019A8                     __end_of_handler:
  9044                           	opt stack 0
  9045                           pclatu	equ	0xFFB
  9046                           pclath	equ	0xFFA
  9047                           tblptru	equ	0xFF8
  9048                           tblptrh	equ	0xFF7
  9049                           tblptrl	equ	0xFF6
  9050                           tablat	equ	0xFF5
  9051                           prodh	equ	0xFF4
  9052                           prodl	equ	0xFF3
  9053                           intcon	equ	0xFF2
  9054                           intcon2	equ	0xFF1
  9055                           intcon3	equ	0xFF0
  9056                           indf0	equ	0xFEF
  9057                           postinc0	equ	0xFEE
  9058                           fsr0h	equ	0xFEA
  9059                           fsr0l	equ	0xFE9
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1h	equ	0xFE2
  9063                           fsr1l	equ	0xFE1
  9064                           indf2	equ	0xFDF
  9065                           postinc2	equ	0xFDE
  9066                           postdec2	equ	0xFDD
  9067                           fsr2h	equ	0xFDA
  9068                           fsr2l	equ	0xFD9
  9069                           status	equ	0xFD8
  9070                           
  9071 ;; *************** function i2_set_timer1 *****************
  9072 ;; Defined at:
  9073 ;;		line 238 in file "sort.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;  time_us         2    0[COMRAM] int 
  9076 ;; Auto vars:     Size  Location     Type
  9077 ;;  set_timer1      2    4[COMRAM] unsigned int 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  1    wreg      void 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;Total ram usage:        6 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; This function calls:
  9094 ;;		Nothing
  9095 ;; This function is called by:
  9096 ;;		_handler
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           	psect	text44
  9101  0028C4                     __ptext44:
  9102                           	opt stack 0
  9103  0028C4                     i2_set_timer1:
  9104                           	opt stack 23
  9105                           
  9106                           ;sort.c: 239: unsigned int my_time = 65535 - time_us;
  9107                           
  9108                           ;incstack = 0
  9109  0028C4  C001  F003         	movff	i2set_timer1@time_us,??i2_set_timer1
  9110  0028C8  C002  F004         	movff	i2set_timer1@time_us+1,??i2_set_timer1+1
  9111  0028CC  1E03               	comf	??i2_set_timer1,f,c
  9112  0028CE  1E04               	comf	??i2_set_timer1+1,f,c
  9113  0028D0  4A03               	infsnz	??i2_set_timer1,f,c
  9114  0028D2  2A04               	incf	??i2_set_timer1+1,f,c
  9115  0028D4  0EFF               	movlw	255
  9116  0028D6  2403               	addwf	??i2_set_timer1,w,c
  9117  0028D8  6E05               	movwf	i2set_timer1@my_time,c
  9118  0028DA  0EFF               	movlw	255
  9119  0028DC  2004               	addwfc	??i2_set_timer1+1,w,c
  9120  0028DE  6E06               	movwf	i2set_timer1@my_time+1,c
  9121                           
  9122                           ;sort.c: 240: TMR1H = my_time >> 8;
  9123  0028E0  5006               	movf	i2set_timer1@my_time+1,w,c
  9124  0028E2  6ECF               	movwf	4047,c	;volatile
  9125                           
  9126                           ;sort.c: 241: TMR1L = my_time & 0xFF;
  9127  0028E4  C005  FFCE         	movff	i2set_timer1@my_time,4046	;volatile
  9128                           
  9129                           ;sort.c: 242: TMR1ON = 1;
  9130  0028E8  80CD               	bsf	4045,0,c	;volatile
  9131  0028EA  0012               	return		;funcret
  9132  0028EC                     __end_ofi2_set_timer1:
  9133                           	opt stack 0
  9134                           pclatu	equ	0xFFB
  9135                           pclath	equ	0xFFA
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon	equ	0xFF2
  9143                           intcon2	equ	0xFF1
  9144                           intcon3	equ	0xFF0
  9145                           indf0	equ	0xFEF
  9146                           postinc0	equ	0xFEE
  9147                           fsr0h	equ	0xFEA
  9148                           fsr0l	equ	0xFE9
  9149                           wreg	equ	0xFE8
  9150                           postdec1	equ	0xFE5
  9151                           fsr1h	equ	0xFE2
  9152                           fsr1l	equ	0xFE1
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _updateMenu *****************
  9161 ;; Defined at:
  9162 ;;		line 156 in file "UI.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;		None
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      void 
  9169 ;; Registers used:
  9170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;Total ram usage:        2 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    5
  9183 ;; This function calls:
  9184 ;;		_change_state_to_logs_11
  9185 ;;		_change_state_to_logs_12
  9186 ;;		_change_state_to_logs_22
  9187 ;;		_change_state_to_logs_23
  9188 ;;		_change_state_to_logs_33
  9189 ;;		_change_state_to_logs_34
  9190 ;;		_change_state_to_menu_11
  9191 ;;		_change_state_to_menu_23
  9192 ;;		_dispLogs
  9193 ;;		_inputHandler
  9194 ;;		i2_change_state_to_menu_12
  9195 ;;		i2_change_state_to_menu_22
  9196 ;;		i2_change_state_to_menu_start
  9197 ;; This function is called by:
  9198 ;;		_handler
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text45
  9203  000F90                     __ptext45:
  9204                           	opt stack 0
  9205  000F90                     _updateMenu:
  9206                           	opt stack 18
  9207                           
  9208                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9209                           
  9210                           ;incstack = 0
  9211  000F90  0E00               	movlw	0
  9212  000F92  6E78               	movwf	_up+1,c
  9213  000F94  0E00               	movlw	0
  9214  000F96  6E77               	movwf	_up,c
  9215  000F98  0E00               	movlw	0
  9216  000F9A  6E6E               	movwf	_down+1,c
  9217  000F9C  0E00               	movlw	0
  9218  000F9E  6E6D               	movwf	_down,c
  9219  000FA0  0E00               	movlw	0
  9220  000FA2  6E70               	movwf	_enter+1,c
  9221  000FA4  0E00               	movlw	0
  9222  000FA6  6E6F               	movwf	_enter,c
  9223  000FA8  0E00               	movlw	0
  9224  000FAA  6E64               	movwf	_back+1,c
  9225  000FAC  0E00               	movlw	0
  9226  000FAE  6E63               	movwf	_back,c
  9227                           
  9228                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9229  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9230                           
  9231                           ;UI.c: 160: if (inputHandler()
  9232                           ;UI.c: 163: ){
  9233  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  9234  000FB6  502A               	movf	?_inputHandler,w,c
  9235  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9236  000FBA  A4D8               	btfss	status,2,c
  9237  000FBC  D112               	goto	i2l5711
  9238  000FBE  D146               	goto	i2l450
  9239  000FC0                     i2l5563:
  9240                           
  9241                           ;UI.c: 167: change_state_to_menu_11();
  9242  000FC0  EC63  F013         	call	_change_state_to_menu_11	;wreg free
  9243                           
  9244                           ;UI.c: 168: break;
  9245  000FC4  D143               	goto	i2l450
  9246  000FC6                     i2l5565:
  9247                           
  9248                           ;UI.c: 171: if(up){
  9249  000FC6  5077               	movf	_up,w,c
  9250  000FC8  1078               	iorwf	_up+1,w,c
  9251  000FCA  B4D8               	btfsc	status,2,c
  9252  000FCC  D003               	goto	i2l5569
  9253                           
  9254                           ;UI.c: 172: change_state_to_menu_23();
  9255  000FCE  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9256                           
  9257                           ;UI.c: 173: }
  9258  000FD2  D13C               	goto	i2l450
  9259  000FD4                     i2l5569:
  9260                           
  9261                           ;UI.c: 174: else if(down){
  9262  000FD4  506D               	movf	_down,w,c
  9263  000FD6  106E               	iorwf	_down+1,w,c
  9264  000FD8  B4D8               	btfsc	status,2,c
  9265  000FDA  D003               	goto	i2l5573
  9266                           
  9267                           ;UI.c: 175: change_state_to_menu_12();
  9268  000FDC  EC33  F013         	call	i2_change_state_to_menu_12	;wreg free
  9269                           
  9270                           ;UI.c: 176: }
  9271  000FE0  D135               	goto	i2l450
  9272  000FE2                     i2l5573:
  9273                           
  9274                           ;UI.c: 177: else if(enter){
  9275  000FE2  506F               	movf	_enter,w,c
  9276  000FE4  1070               	iorwf	_enter+1,w,c
  9277  000FE6  B4D8               	btfsc	status,2,c
  9278  000FE8  D131               	goto	i2l450
  9279                           
  9280                           ;UI.c: 178: change_state_to_menu_start();
  9281  000FEA  EC76  F014         	call	i2_change_state_to_menu_start	;wreg free
  9282                           
  9283                           ;UI.c: 179: }
  9284                           ;UI.c: 180: break;
  9285  000FEE  D12E               	goto	i2l450
  9286  000FF0                     i2l5577:
  9287                           
  9288                           ;UI.c: 183: if(up){
  9289  000FF0  5077               	movf	_up,w,c
  9290  000FF2  1078               	iorwf	_up+1,w,c
  9291  000FF4  B4D8               	btfsc	status,2,c
  9292  000FF6  D003               	goto	i2l5581
  9293                           
  9294                           ;UI.c: 184: change_state_to_menu_11();
  9295  000FF8  EC63  F013         	call	_change_state_to_menu_11	;wreg free
  9296                           
  9297                           ;UI.c: 185: }
  9298  000FFC  D127               	goto	i2l450
  9299  000FFE                     i2l5581:
  9300                           
  9301                           ;UI.c: 186: else if(down){
  9302  000FFE  506D               	movf	_down,w,c
  9303  001000  106E               	iorwf	_down+1,w,c
  9304  001002  B4D8               	btfsc	status,2,c
  9305  001004  D011               	goto	i2l5597
  9306                           
  9307                           ;UI.c: 187: change_state_to_menu_23();
  9308  001006  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9309                           
  9310                           ;UI.c: 188: }
  9311  00100A  D120               	goto	i2l450
  9312  00100C                     i2l5589:
  9313                           
  9314                           ;UI.c: 195: if(up){
  9315  00100C  5077               	movf	_up,w,c
  9316  00100E  1078               	iorwf	_up+1,w,c
  9317  001010  B4D8               	btfsc	status,2,c
  9318  001012  D003               	goto	i2l5593
  9319                           
  9320                           ;UI.c: 196: change_state_to_menu_11();
  9321  001014  EC63  F013         	call	_change_state_to_menu_11	;wreg free
  9322                           
  9323                           ;UI.c: 197: }
  9324  001018  D119               	goto	i2l450
  9325  00101A                     i2l5593:
  9326                           
  9327                           ;UI.c: 198: else if(down){
  9328  00101A  506D               	movf	_down,w,c
  9329  00101C  106E               	iorwf	_down+1,w,c
  9330  00101E  B4D8               	btfsc	status,2,c
  9331  001020  D003               	goto	i2l5597
  9332                           
  9333                           ;UI.c: 199: change_state_to_menu_23();
  9334  001022  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9335                           
  9336                           ;UI.c: 200: }
  9337  001026  D112               	goto	i2l450
  9338  001028                     i2l5597:
  9339                           
  9340                           ;UI.c: 201: else if(enter){
  9341  001028  506F               	movf	_enter,w,c
  9342  00102A  1070               	iorwf	_enter+1,w,c
  9343  00102C  B4D8               	btfsc	status,2,c
  9344  00102E  D10E               	goto	i2l450
  9345                           
  9346                           ;UI.c: 202: machine_state = Sorting_state;
  9347  001030  0E01               	movlw	1
  9348  001032  0100               	movlb	0	; () banked
  9349  001034  6FF2               	movwf	_machine_state& (0+255),b
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;UI.c: 203: }
  9353                           ;UI.c: 204: break;
  9354                           
  9355                           ; BSR set to: 0
  9356                           
  9357                           ; BSR set to: 0
  9358  001036  D10A               	goto	i2l450
  9359  001038                     i2l5601:
  9360                           
  9361                           ;UI.c: 207: if(up){
  9362  001038  5077               	movf	_up,w,c
  9363  00103A  1078               	iorwf	_up+1,w,c
  9364  00103C  B4D8               	btfsc	status,2,c
  9365  00103E  D003               	goto	i2l5605
  9366                           
  9367                           ;UI.c: 208: change_state_to_menu_22();
  9368  001040  EC1B  F013         	call	i2_change_state_to_menu_22	;wreg free
  9369                           
  9370                           ;UI.c: 209: }
  9371  001044  D103               	goto	i2l450
  9372  001046                     i2l5605:
  9373                           
  9374                           ;UI.c: 210: else if(down){
  9375  001046  506D               	movf	_down,w,c
  9376  001048  106E               	iorwf	_down+1,w,c
  9377  00104A  B4D8               	btfsc	status,2,c
  9378  00104C  D003               	goto	i2l5609
  9379                           
  9380                           ;UI.c: 211: change_state_to_menu_11();
  9381  00104E  EC63  F013         	call	_change_state_to_menu_11	;wreg free
  9382                           
  9383                           ;UI.c: 212: }
  9384  001052  D0FC               	goto	i2l450
  9385  001054                     i2l5609:
  9386                           
  9387                           ;UI.c: 213: else if(enter){
  9388  001054  506F               	movf	_enter,w,c
  9389  001056  1070               	iorwf	_enter+1,w,c
  9390  001058  B4D8               	btfsc	status,2,c
  9391  00105A  D0F8               	goto	i2l450
  9392                           
  9393                           ;UI.c: 214: change_state_to_logs_11();
  9394  00105C  ECDB  F013         	call	_change_state_to_logs_11	;wreg free
  9395                           
  9396                           ;UI.c: 215: }
  9397                           ;UI.c: 216: break;
  9398  001060  D0F5               	goto	i2l450
  9399  001062                     i2l5613:
  9400                           
  9401                           ;UI.c: 219: if(up){
  9402  001062  5077               	movf	_up,w,c
  9403  001064  1078               	iorwf	_up+1,w,c
  9404  001066  B4D8               	btfsc	status,2,c
  9405  001068  D003               	goto	i2l5617
  9406                           
  9407                           ;UI.c: 220: change_state_to_logs_34();
  9408  00106A  EC7B  F013         	call	_change_state_to_logs_34	;wreg free
  9409                           
  9410                           ;UI.c: 221: }
  9411  00106E  D0EE               	goto	i2l450
  9412  001070                     i2l5617:
  9413                           
  9414                           ;UI.c: 222: else if(down){
  9415  001070  506D               	movf	_down,w,c
  9416  001072  106E               	iorwf	_down+1,w,c
  9417  001074  B4D8               	btfsc	status,2,c
  9418  001076  D003               	goto	i2l5621
  9419                           
  9420                           ;UI.c: 223: change_state_to_logs_12();
  9421  001078  ECC3  F013         	call	_change_state_to_logs_12	;wreg free
  9422                           
  9423                           ;UI.c: 224: }
  9424  00107C  D0E7               	goto	i2l450
  9425  00107E                     i2l5621:
  9426                           
  9427                           ;UI.c: 225: else if(enter){
  9428  00107E  506F               	movf	_enter,w,c
  9429  001080  1070               	iorwf	_enter+1,w,c
  9430  001082  B4D8               	btfsc	status,2,c
  9431  001084  D007               	goto	i2l5625
  9432                           
  9433                           ;UI.c: 226: dispLogs(1);
  9434  001086  0E00               	movlw	0
  9435  001088  6E02               	movwf	dispLogs@myLog+1,c
  9436  00108A  0E01               	movlw	1
  9437  00108C  6E01               	movwf	dispLogs@myLog,c
  9438  00108E  EC03  F015         	call	_dispLogs	;wreg free
  9439                           
  9440                           ;UI.c: 227: }
  9441  001092  D0DC               	goto	i2l450
  9442  001094                     i2l5625:
  9443                           
  9444                           ;UI.c: 228: else if(back){
  9445  001094  5063               	movf	_back,w,c
  9446  001096  1064               	iorwf	_back+1,w,c
  9447  001098  B4D8               	btfsc	status,2,c
  9448  00109A  D0D8               	goto	i2l450
  9449                           
  9450                           ;UI.c: 229: change_state_to_menu_23();
  9451  00109C  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9452                           
  9453                           ;UI.c: 230: }
  9454                           ;UI.c: 231: break;
  9455  0010A0  D0D5               	goto	i2l450
  9456  0010A2                     i2l5629:
  9457                           
  9458                           ;UI.c: 234: if(up){
  9459  0010A2  5077               	movf	_up,w,c
  9460  0010A4  1078               	iorwf	_up+1,w,c
  9461  0010A6  B4D8               	btfsc	status,2,c
  9462  0010A8  D003               	goto	i2l5633
  9463                           
  9464                           ;UI.c: 235: change_state_to_logs_11();
  9465  0010AA  ECDB  F013         	call	_change_state_to_logs_11	;wreg free
  9466                           
  9467                           ;UI.c: 236: }
  9468  0010AE  D0CE               	goto	i2l450
  9469  0010B0                     i2l5633:
  9470                           
  9471                           ;UI.c: 237: else if(down){
  9472  0010B0  506D               	movf	_down,w,c
  9473  0010B2  106E               	iorwf	_down+1,w,c
  9474  0010B4  B4D8               	btfsc	status,2,c
  9475  0010B6  D003               	goto	i2l5637
  9476                           
  9477                           ;UI.c: 238: change_state_to_logs_23();
  9478  0010B8  EC0A  F014         	call	_change_state_to_logs_23	;wreg free
  9479                           
  9480                           ;UI.c: 239: }
  9481  0010BC  D0C7               	goto	i2l450
  9482  0010BE                     i2l5637:
  9483                           
  9484                           ;UI.c: 240: else if(enter){
  9485  0010BE  506F               	movf	_enter,w,c
  9486  0010C0  1070               	iorwf	_enter+1,w,c
  9487  0010C2  B4D8               	btfsc	status,2,c
  9488  0010C4  D007               	goto	i2l5641
  9489                           
  9490                           ;UI.c: 241: dispLogs(2);
  9491  0010C6  0E00               	movlw	0
  9492  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9493  0010CA  0E02               	movlw	2
  9494  0010CC  6E01               	movwf	dispLogs@myLog,c
  9495  0010CE  EC03  F015         	call	_dispLogs	;wreg free
  9496                           
  9497                           ;UI.c: 242: }
  9498  0010D2  D0BC               	goto	i2l450
  9499  0010D4                     i2l5641:
  9500                           
  9501                           ;UI.c: 243: else if(back){
  9502  0010D4  5063               	movf	_back,w,c
  9503  0010D6  1064               	iorwf	_back+1,w,c
  9504  0010D8  B4D8               	btfsc	status,2,c
  9505  0010DA  D0B8               	goto	i2l450
  9506                           
  9507                           ;UI.c: 244: change_state_to_menu_23();
  9508  0010DC  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9509                           
  9510                           ;UI.c: 245: }
  9511                           ;UI.c: 246: break;
  9512  0010E0  D0B5               	goto	i2l450
  9513  0010E2                     i2l5645:
  9514                           
  9515                           ;UI.c: 249: if(up){
  9516  0010E2  5077               	movf	_up,w,c
  9517  0010E4  1078               	iorwf	_up+1,w,c
  9518  0010E6  B4D8               	btfsc	status,2,c
  9519  0010E8  D003               	goto	i2l5649
  9520                           
  9521                           ;UI.c: 250: change_state_to_logs_11();
  9522  0010EA  ECDB  F013         	call	_change_state_to_logs_11	;wreg free
  9523                           
  9524                           ;UI.c: 251: }
  9525  0010EE  D0AE               	goto	i2l450
  9526  0010F0                     i2l5649:
  9527                           
  9528                           ;UI.c: 252: else if(down){
  9529  0010F0  506D               	movf	_down,w,c
  9530  0010F2  106E               	iorwf	_down+1,w,c
  9531  0010F4  B4D8               	btfsc	status,2,c
  9532  0010F6  D003               	goto	i2l5653
  9533                           
  9534                           ;UI.c: 253: change_state_to_logs_23();
  9535  0010F8  EC0A  F014         	call	_change_state_to_logs_23	;wreg free
  9536                           
  9537                           ;UI.c: 254: }
  9538  0010FC  D0A7               	goto	i2l450
  9539  0010FE                     i2l5653:
  9540                           
  9541                           ;UI.c: 255: else if(enter){
  9542  0010FE  506F               	movf	_enter,w,c
  9543  001100  1070               	iorwf	_enter+1,w,c
  9544  001102  B4D8               	btfsc	status,2,c
  9545  001104  D007               	goto	i2l5657
  9546                           
  9547                           ;UI.c: 256: dispLogs(2);
  9548  001106  0E00               	movlw	0
  9549  001108  6E02               	movwf	dispLogs@myLog+1,c
  9550  00110A  0E02               	movlw	2
  9551  00110C  6E01               	movwf	dispLogs@myLog,c
  9552  00110E  EC03  F015         	call	_dispLogs	;wreg free
  9553                           
  9554                           ;UI.c: 257: }
  9555  001112  D09C               	goto	i2l450
  9556  001114                     i2l5657:
  9557                           
  9558                           ;UI.c: 258: else if(back){
  9559  001114  5063               	movf	_back,w,c
  9560  001116  1064               	iorwf	_back+1,w,c
  9561  001118  B4D8               	btfsc	status,2,c
  9562  00111A  D098               	goto	i2l450
  9563                           
  9564                           ;UI.c: 259: change_state_to_menu_23();
  9565  00111C  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9566                           
  9567                           ;UI.c: 260: }
  9568                           ;UI.c: 261: break;
  9569  001120  D095               	goto	i2l450
  9570  001122                     i2l5661:
  9571                           
  9572                           ;UI.c: 264: if(up){
  9573  001122  5077               	movf	_up,w,c
  9574  001124  1078               	iorwf	_up+1,w,c
  9575  001126  B4D8               	btfsc	status,2,c
  9576  001128  D003               	goto	i2l5665
  9577                           
  9578                           ;UI.c: 265: change_state_to_logs_22();
  9579  00112A  ECAB  F013         	call	_change_state_to_logs_22	;wreg free
  9580                           
  9581                           ;UI.c: 266: }
  9582  00112E  D08E               	goto	i2l450
  9583  001130                     i2l5665:
  9584                           
  9585                           ;UI.c: 267: else if(down){
  9586  001130  506D               	movf	_down,w,c
  9587  001132  106E               	iorwf	_down+1,w,c
  9588  001134  B4D8               	btfsc	status,2,c
  9589  001136  D003               	goto	i2l5669
  9590                           
  9591                           ;UI.c: 268: change_state_to_logs_34();
  9592  001138  EC7B  F013         	call	_change_state_to_logs_34	;wreg free
  9593                           
  9594                           ;UI.c: 269: }
  9595  00113C  D087               	goto	i2l450
  9596  00113E                     i2l5669:
  9597                           
  9598                           ;UI.c: 270: else if(enter){
  9599  00113E  506F               	movf	_enter,w,c
  9600  001140  1070               	iorwf	_enter+1,w,c
  9601  001142  B4D8               	btfsc	status,2,c
  9602  001144  D007               	goto	i2l5673
  9603                           
  9604                           ;UI.c: 271: dispLogs(3);
  9605  001146  0E00               	movlw	0
  9606  001148  6E02               	movwf	dispLogs@myLog+1,c
  9607  00114A  0E03               	movlw	3
  9608  00114C  6E01               	movwf	dispLogs@myLog,c
  9609  00114E  EC03  F015         	call	_dispLogs	;wreg free
  9610                           
  9611                           ;UI.c: 272: }
  9612  001152  D07C               	goto	i2l450
  9613  001154                     i2l5673:
  9614                           
  9615                           ;UI.c: 273: else if(back){
  9616  001154  5063               	movf	_back,w,c
  9617  001156  1064               	iorwf	_back+1,w,c
  9618  001158  B4D8               	btfsc	status,2,c
  9619  00115A  D078               	goto	i2l450
  9620                           
  9621                           ;UI.c: 274: change_state_to_menu_23();
  9622  00115C  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9623                           
  9624                           ;UI.c: 275: }
  9625                           ;UI.c: 276: break;
  9626  001160  D075               	goto	i2l450
  9627  001162                     i2l5677:
  9628                           
  9629                           ;UI.c: 279: if(up){
  9630  001162  5077               	movf	_up,w,c
  9631  001164  1078               	iorwf	_up+1,w,c
  9632  001166  B4D8               	btfsc	status,2,c
  9633  001168  D003               	goto	i2l5681
  9634                           
  9635                           ;UI.c: 280: change_state_to_logs_22();
  9636  00116A  ECAB  F013         	call	_change_state_to_logs_22	;wreg free
  9637                           
  9638                           ;UI.c: 281: }
  9639  00116E  D06E               	goto	i2l450
  9640  001170                     i2l5681:
  9641                           
  9642                           ;UI.c: 282: else if(down){
  9643  001170  506D               	movf	_down,w,c
  9644  001172  106E               	iorwf	_down+1,w,c
  9645  001174  B4D8               	btfsc	status,2,c
  9646  001176  D003               	goto	i2l5685
  9647                           
  9648                           ;UI.c: 283: change_state_to_logs_34();
  9649  001178  EC7B  F013         	call	_change_state_to_logs_34	;wreg free
  9650                           
  9651                           ;UI.c: 284: }
  9652  00117C  D067               	goto	i2l450
  9653  00117E                     i2l5685:
  9654                           
  9655                           ;UI.c: 285: else if(enter){
  9656  00117E  506F               	movf	_enter,w,c
  9657  001180  1070               	iorwf	_enter+1,w,c
  9658  001182  B4D8               	btfsc	status,2,c
  9659  001184  D007               	goto	i2l5689
  9660                           
  9661                           ;UI.c: 286: dispLogs(3);
  9662  001186  0E00               	movlw	0
  9663  001188  6E02               	movwf	dispLogs@myLog+1,c
  9664  00118A  0E03               	movlw	3
  9665  00118C  6E01               	movwf	dispLogs@myLog,c
  9666  00118E  EC03  F015         	call	_dispLogs	;wreg free
  9667                           
  9668                           ;UI.c: 287: }
  9669  001192  D05C               	goto	i2l450
  9670  001194                     i2l5689:
  9671                           
  9672                           ;UI.c: 288: else if(back){
  9673  001194  5063               	movf	_back,w,c
  9674  001196  1064               	iorwf	_back+1,w,c
  9675  001198  B4D8               	btfsc	status,2,c
  9676  00119A  D058               	goto	i2l450
  9677                           
  9678                           ;UI.c: 289: change_state_to_menu_23();
  9679  00119C  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9680                           
  9681                           ;UI.c: 290: }
  9682                           ;UI.c: 291: break;
  9683  0011A0  D055               	goto	i2l450
  9684  0011A2                     i2l5693:
  9685                           
  9686                           ;UI.c: 294: if(up){
  9687  0011A2  5077               	movf	_up,w,c
  9688  0011A4  1078               	iorwf	_up+1,w,c
  9689  0011A6  B4D8               	btfsc	status,2,c
  9690  0011A8  D003               	goto	i2l5697
  9691                           
  9692                           ;UI.c: 295: change_state_to_logs_33();
  9693  0011AA  EC93  F013         	call	_change_state_to_logs_33	;wreg free
  9694                           
  9695                           ;UI.c: 296: }
  9696  0011AE  D04E               	goto	i2l450
  9697  0011B0                     i2l5697:
  9698                           
  9699                           ;UI.c: 297: else if(down){
  9700  0011B0  506D               	movf	_down,w,c
  9701  0011B2  106E               	iorwf	_down+1,w,c
  9702  0011B4  B4D8               	btfsc	status,2,c
  9703  0011B6  D003               	goto	i2l5701
  9704                           
  9705                           ;UI.c: 298: change_state_to_logs_11();
  9706  0011B8  ECDB  F013         	call	_change_state_to_logs_11	;wreg free
  9707                           
  9708                           ;UI.c: 299: }
  9709  0011BC  D047               	goto	i2l450
  9710  0011BE                     i2l5701:
  9711                           
  9712                           ;UI.c: 300: else if(enter){
  9713  0011BE  506F               	movf	_enter,w,c
  9714  0011C0  1070               	iorwf	_enter+1,w,c
  9715  0011C2  B4D8               	btfsc	status,2,c
  9716  0011C4  D007               	goto	i2l5705
  9717                           
  9718                           ;UI.c: 301: dispLogs(4);
  9719  0011C6  0E00               	movlw	0
  9720  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9721  0011CA  0E04               	movlw	4
  9722  0011CC  6E01               	movwf	dispLogs@myLog,c
  9723  0011CE  EC03  F015         	call	_dispLogs	;wreg free
  9724                           
  9725                           ;UI.c: 302: }
  9726  0011D2  D03C               	goto	i2l450
  9727  0011D4                     i2l5705:
  9728                           
  9729                           ;UI.c: 303: else if(back){
  9730  0011D4  5063               	movf	_back,w,c
  9731  0011D6  1064               	iorwf	_back+1,w,c
  9732  0011D8  B4D8               	btfsc	status,2,c
  9733  0011DA  D038               	goto	i2l450
  9734                           
  9735                           ;UI.c: 304: change_state_to_menu_23();
  9736  0011DC  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
  9737                           
  9738                           ;UI.c: 310: }
  9739                           
  9740                           ;UI.c: 309: break;
  9741                           
  9742                           ;UI.c: 308: default:
  9743                           
  9744                           ;UI.c: 305: }
  9745                           ;UI.c: 306: break;
  9746  0011E0  D035               	goto	i2l450
  9747  0011E2                     i2l5711:
  9748  0011E2  C0DF  F043         	movff	_cur_state,??_updateMenu
  9749  0011E6  C0E0  F044         	movff	_cur_state+1,??_updateMenu+1
  9750                           
  9751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9752                           ; Switch size 1, requested type "space"
  9753                           ; Number of cases is 3, Range of values is 0 to 4
  9754                           ; switch strategies available:
  9755                           ; Name         Instructions Cycles
  9756                           ; simple_byte           10     6 (average)
  9757                           ;	Chosen strategy is simple_byte
  9758  0011EA  5044               	movf	??_updateMenu+1,w,c
  9759  0011EC  0A00               	xorlw	0	; case 0
  9760  0011EE  B4D8               	btfsc	status,2,c
  9761  0011F0  D007               	goto	i2l6095
  9762  0011F2  0A03               	xorlw	3	; case 3
  9763  0011F4  B4D8               	btfsc	status,2,c
  9764  0011F6  D015               	goto	i2l6097
  9765  0011F8  0A07               	xorlw	7	; case 4
  9766  0011FA  B4D8               	btfsc	status,2,c
  9767  0011FC  D020               	goto	i2l6099
  9768  0011FE  D026               	goto	i2l450
  9769  001200                     i2l6095:
  9770                           
  9771                           ; Switch size 1, requested type "space"
  9772                           ; Number of cases is 5, Range of values is 0 to 23
  9773                           ; switch strategies available:
  9774                           ; Name         Instructions Cycles
  9775                           ; simple_byte           16     9 (average)
  9776                           ;	Chosen strategy is simple_byte
  9777  001200  5043               	movf	??_updateMenu,w,c
  9778  001202  0A00               	xorlw	0	; case 0
  9779  001204  B4D8               	btfsc	status,2,c
  9780  001206  D6DC               	goto	i2l5563
  9781  001208  0A0B               	xorlw	11	; case 11
  9782  00120A  B4D8               	btfsc	status,2,c
  9783  00120C  D6DC               	goto	i2l5565
  9784  00120E  0A07               	xorlw	7	; case 12
  9785  001210  B4D8               	btfsc	status,2,c
  9786  001212  D6EE               	goto	i2l5577
  9787  001214  0A1A               	xorlw	26	; case 22
  9788  001216  B4D8               	btfsc	status,2,c
  9789  001218  D6F9               	goto	i2l5589
  9790  00121A  0A01               	xorlw	1	; case 23
  9791  00121C  B4D8               	btfsc	status,2,c
  9792  00121E  D70C               	goto	i2l5601
  9793  001220  D015               	goto	i2l450
  9794  001222                     i2l6097:
  9795                           
  9796                           ; Switch size 1, requested type "space"
  9797                           ; Number of cases is 4, Range of values is 243 to 255
  9798                           ; switch strategies available:
  9799                           ; Name         Instructions Cycles
  9800                           ; simple_byte           13     7 (average)
  9801                           ;	Chosen strategy is simple_byte
  9802  001222  5043               	movf	??_updateMenu,w,c
  9803  001224  0AF3               	xorlw	243	; case 243
  9804  001226  B4D8               	btfsc	status,2,c
  9805  001228  D71C               	goto	i2l5613
  9806  00122A  0A07               	xorlw	7	; case 244
  9807  00122C  B4D8               	btfsc	status,2,c
  9808  00122E  D739               	goto	i2l5629
  9809  001230  0A0A               	xorlw	10	; case 254
  9810  001232  B4D8               	btfsc	status,2,c
  9811  001234  D756               	goto	i2l5645
  9812  001236  0A01               	xorlw	1	; case 255
  9813  001238  B4D8               	btfsc	status,2,c
  9814  00123A  D773               	goto	i2l5661
  9815  00123C  D007               	goto	i2l450
  9816  00123E                     i2l6099:
  9817                           
  9818                           ; Switch size 1, requested type "space"
  9819                           ; Number of cases is 2, Range of values is 9 to 10
  9820                           ; switch strategies available:
  9821                           ; Name         Instructions Cycles
  9822                           ; simple_byte            7     4 (average)
  9823                           ;	Chosen strategy is simple_byte
  9824  00123E  5043               	movf	??_updateMenu,w,c
  9825  001240  0A09               	xorlw	9	; case 9
  9826  001242  B4D8               	btfsc	status,2,c
  9827  001244  D78E               	goto	i2l5677
  9828  001246  0A03               	xorlw	3	; case 10
  9829  001248  B4D8               	btfsc	status,2,c
  9830  00124A  D7AB               	goto	i2l5693
  9831  00124C                     i2l450:
  9832                           
  9833                           ;UI.c: 311: }
  9834                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9835  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9836  00124E  0012               	return		;funcret
  9837  001250                     __end_of_updateMenu:
  9838                           	opt stack 0
  9839                           pclatu	equ	0xFFB
  9840                           pclath	equ	0xFFA
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           intcon	equ	0xFF2
  9848                           intcon2	equ	0xFF1
  9849                           intcon3	equ	0xFF0
  9850                           indf0	equ	0xFEF
  9851                           postinc0	equ	0xFEE
  9852                           fsr0h	equ	0xFEA
  9853                           fsr0l	equ	0xFE9
  9854                           wreg	equ	0xFE8
  9855                           postdec1	equ	0xFE5
  9856                           fsr1h	equ	0xFE2
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function i2_change_state_to_menu_start *****************
  9866 ;; Defined at:
  9867 ;;		line 416 in file "UI.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:        0 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    4
  9888 ;; This function calls:
  9889 ;;		i2_lcdInst
  9890 ;;		i2_printRTC
  9891 ;;		i2_printf
  9892 ;; This function is called by:
  9893 ;;		_updateMenu
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           	psect	text46
  9898  0028EC                     __ptext46:
  9899                           	opt stack 0
  9900  0028EC                     i2_change_state_to_menu_start:
  9901                           	opt stack 18
  9902                           
  9903                           ;UI.c: 417: cur_state = 0;
  9904                           
  9905                           ;incstack = 0
  9906  0028EC  0E00               	movlw	0
  9907  0028EE  0100               	movlb	0	; () banked
  9908  0028F0  6FE0               	movwf	(_cur_state+1)& (0+255),b
  9909  0028F2  0E00               	movlw	0
  9910  0028F4  6FDF               	movwf	_cur_state& (0+255),b
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;UI.c: 419: lcdInst(0b10000000);;
  9914  0028F6  0E80               	movlw	128
  9915  0028F8  EC35  F015         	call	i2_lcdInst
  9916                           
  9917                           ;UI.c: 420: printRTC();
  9918  0028FC  EC28  F009         	call	i2_printRTC	;wreg free
  9919                           
  9920                           ;UI.c: 421: lcdInst(0b11000000);;
  9921  002900  0EC0               	movlw	192
  9922  002902  EC35  F015         	call	i2_lcdInst
  9923                           
  9924                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  9925  002906  0E97               	movlw	low STR_15
  9926  002908  6E0D               	movwf	i2printf@f,c
  9927  00290A  0EFF               	movlw	high STR_15
  9928  00290C  6E0E               	movwf	i2printf@f+1,c
  9929  00290E  ECC0  F004         	call	i2_printf	;wreg free
  9930  002912  0012               	return		;funcret
  9931  002914                     __end_ofi2_change_state_to_menu_start:
  9932                           	opt stack 0
  9933                           pclatu	equ	0xFFB
  9934                           pclath	equ	0xFFA
  9935                           tblptru	equ	0xFF8
  9936                           tblptrh	equ	0xFF7
  9937                           tblptrl	equ	0xFF6
  9938                           tablat	equ	0xFF5
  9939                           prodh	equ	0xFF4
  9940                           prodl	equ	0xFF3
  9941                           intcon	equ	0xFF2
  9942                           intcon2	equ	0xFF1
  9943                           intcon3	equ	0xFF0
  9944                           indf0	equ	0xFEF
  9945                           postinc0	equ	0xFEE
  9946                           fsr0h	equ	0xFEA
  9947                           fsr0l	equ	0xFE9
  9948                           wreg	equ	0xFE8
  9949                           postdec1	equ	0xFE5
  9950                           fsr1h	equ	0xFE2
  9951                           fsr1l	equ	0xFE1
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           postdec2	equ	0xFDD
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function i2_printRTC *****************
  9960 ;; Defined at:
  9961 ;;		line 62 in file "RTC.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  printRTC       14   44[COMRAM] int [7]
  9966 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9967 ;;  printRTC        2   64[COMRAM] int 
  9968 ;;  printRTC        2   58[COMRAM] int 
  9969 ;; Return value:  Size  Location     Type
  9970 ;;                  1    wreg      void 
  9971 ;; Registers used:
  9972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;Total ram usage:       25 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    3
  9985 ;; This function calls:
  9986 ;;		i2_getRTC
  9987 ;;		i2_lcdInst
  9988 ;;		i2_printf
  9989 ;;		i2_strcpy
  9990 ;; This function is called by:
  9991 ;;		i2_change_state_to_menu_start
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           	psect	text47
  9996  001250                     __ptext47:
  9997                           	opt stack 0
  9998  001250                     i2_printRTC:
  9999                           	opt stack 18
 10000                           
 10001                           ;RTC.c: 63: getRTC();
 10002                           
 10003                           ;incstack = 0
 10004  001250  EC37  F010         	call	i2_getRTC	;wreg free
 10005                           
 10006                           ;RTC.c: 64: char month[] = "MMM";
 10007  001254  C0F3  F03D         	movff	printRTC@F3205,i2printRTC@month
 10008  001258  C0F4  F03E         	movff	printRTC@F3205+1,i2printRTC@month+1
 10009  00125C  C0F5  F03F         	movff	printRTC@F3205+2,i2printRTC@month+2
 10010  001260  C0F6  F040         	movff	printRTC@F3205+3,i2printRTC@month+3
 10011                           
 10012                           ;RTC.c: 65: int INT_time[7];
 10013                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
 10014  001264  0E00               	movlw	0
 10015  001266  6E42               	movwf	i2printRTC@i+1,c
 10016  001268  0E00               	movlw	0
 10017  00126A  6E41               	movwf	i2printRTC@i,c
 10018  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
 10019  00126E  D006               	goto	i2l4849
 10020  001270  5042               	movf	i2printRTC@i+1,w,c
 10021  001272  E135               	bnz	i2l1015
 10022  001274  0E07               	movlw	7
 10023  001276  5C41               	subwf	i2printRTC@i,w,c
 10024  001278  B0D8               	btfsc	status,0,c
 10025  00127A  D031               	goto	i2l1015
 10026  00127C                     i2l4849:
 10027                           
 10028                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10029  00127C  0ED4               	movlw	low _time
 10030  00127E  2441               	addwf	i2printRTC@i,w,c
 10031  001280  6ED9               	movwf	fsr2l,c
 10032  001282  0E00               	movlw	high _time
 10033  001284  2042               	addwfc	i2printRTC@i+1,w,c
 10034  001286  6EDA               	movwf	fsr2h,c
 10035  001288  50DF               	movf	indf2,w,c
 10036  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
 10037  00128C  3A2A               	swapf	??i2_printRTC,f,c
 10038  00128E  0E0F               	movlw	15
 10039  001290  162A               	andwf	??i2_printRTC,f,c
 10040  001292  0E0F               	movlw	15
 10041  001294  162A               	andwf	??i2_printRTC,f,c
 10042  001296  502A               	movf	??i2_printRTC,w,c
 10043  001298  0D0A               	mullw	10
 10044  00129A  0ED4               	movlw	low _time
 10045  00129C  2441               	addwf	i2printRTC@i,w,c
 10046  00129E  6ED9               	movwf	fsr2l,c
 10047  0012A0  0E00               	movlw	high _time
 10048  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
 10049  0012A4  6EDA               	movwf	fsr2h,c
 10050  0012A6  50DF               	movf	indf2,w,c
 10051  0012A8  0B0F               	andlw	15
 10052  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10053  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10054  0012AE  50F3               	movf	prodl,w,c
 10055  0012B0  262B               	addwf	??i2_printRTC+1,f,c
 10056  0012B2  50F4               	movf	prodh,w,c
 10057  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
 10058  0012B6  90D8               	bcf	status,0,c
 10059  0012B8  3441               	rlcf	i2printRTC@i,w,c
 10060  0012BA  6ED9               	movwf	fsr2l,c
 10061  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
 10062  0012BE  6EDA               	movwf	fsr2h,c
 10063  0012C0  0E2D               	movlw	low i2printRTC@INT_time
 10064  0012C2  26D9               	addwf	fsr2l,f,c
 10065  0012C4  0E00               	movlw	high i2printRTC@INT_time
 10066  0012C6  22DA               	addwfc	fsr2h,f,c
 10067  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10068  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10069  0012D0  4A41               	infsnz	i2printRTC@i,f,c
 10070  0012D2  2A42               	incf	i2printRTC@i+1,f,c
 10071  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
 10072  0012D6  D7D2               	goto	i2l4849
 10073  0012D8  5042               	movf	i2printRTC@i+1,w,c
 10074  0012DA  E101               	bnz	i2u330_40
 10075  0012DC  D7CB               	goto	L7
 10076  0012DE                     i2u330_40:
 10077  0012DE                     i2l1015:
 10078                           
 10079                           ;RTC.c: 68: }
 10080                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10081  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10082  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10083                           
 10084                           ;RTC.c: 70: switch(RTC_month){
 10085  0012E6  D084               	goto	i2l4881
 10086  0012E8                     i2l4855:
 10087                           
 10088                           ;RTC.c: 72: strcpy(month, "Jan");
 10089  0012E8  0E3D               	movlw	low i2printRTC@month
 10090  0012EA  6E01               	movwf	i2strcpy@to,c
 10091  0012EC  0E00               	movlw	high i2printRTC@month
 10092  0012EE  6E02               	movwf	i2strcpy@to+1,c
 10093  0012F0  0EDB               	movlw	low STR_36
 10094  0012F2  6E03               	movwf	i2strcpy@from,c
 10095  0012F4  0EFF               	movlw	high STR_36
 10096  0012F6  6E04               	movwf	i2strcpy@from+1,c
 10097  0012F8  ECEA  F012         	call	i2_strcpy	;wreg free
 10098                           
 10099                           ;RTC.c: 73: break;
 10100  0012FC  D0A6               	goto	i2l4883
 10101  0012FE                     i2l4857:
 10102                           
 10103                           ;RTC.c: 75: strcpy(month, "Feb");
 10104  0012FE  0E3D               	movlw	low i2printRTC@month
 10105  001300  6E01               	movwf	i2strcpy@to,c
 10106  001302  0E00               	movlw	high i2printRTC@month
 10107  001304  6E02               	movwf	i2strcpy@to+1,c
 10108  001306  0ECB               	movlw	low STR_37
 10109  001308  6E03               	movwf	i2strcpy@from,c
 10110  00130A  0EFF               	movlw	high STR_37
 10111  00130C  6E04               	movwf	i2strcpy@from+1,c
 10112  00130E  ECEA  F012         	call	i2_strcpy	;wreg free
 10113                           
 10114                           ;RTC.c: 76: break;
 10115  001312  D09B               	goto	i2l4883
 10116  001314                     i2l4859:
 10117                           
 10118                           ;RTC.c: 78: strcpy(month, "Mar");
 10119  001314  0E3D               	movlw	low i2printRTC@month
 10120  001316  6E01               	movwf	i2strcpy@to,c
 10121  001318  0E00               	movlw	high i2printRTC@month
 10122  00131A  6E02               	movwf	i2strcpy@to+1,c
 10123  00131C  0EE7               	movlw	low STR_38
 10124  00131E  6E03               	movwf	i2strcpy@from,c
 10125  001320  0EFF               	movlw	high STR_38
 10126  001322  6E04               	movwf	i2strcpy@from+1,c
 10127  001324  ECEA  F012         	call	i2_strcpy	;wreg free
 10128                           
 10129                           ;RTC.c: 79: break;
 10130  001328  D090               	goto	i2l4883
 10131  00132A                     i2l4861:
 10132                           
 10133                           ;RTC.c: 81: strcpy(month, "Apr");
 10134  00132A  0E3D               	movlw	low i2printRTC@month
 10135  00132C  6E01               	movwf	i2strcpy@to,c
 10136  00132E  0E00               	movlw	high i2printRTC@month
 10137  001330  6E02               	movwf	i2strcpy@to+1,c
 10138  001332  0EEB               	movlw	low STR_39
 10139  001334  6E03               	movwf	i2strcpy@from,c
 10140  001336  0EFF               	movlw	high STR_39
 10141  001338  6E04               	movwf	i2strcpy@from+1,c
 10142  00133A  ECEA  F012         	call	i2_strcpy	;wreg free
 10143                           
 10144                           ;RTC.c: 82: break;
 10145  00133E  D085               	goto	i2l4883
 10146  001340                     i2l4863:
 10147                           
 10148                           ;RTC.c: 84: strcpy(month, "May");
 10149  001340  0E3D               	movlw	low i2printRTC@month
 10150  001342  6E01               	movwf	i2strcpy@to,c
 10151  001344  0E00               	movlw	high i2printRTC@month
 10152  001346  6E02               	movwf	i2strcpy@to+1,c
 10153  001348  0EF7               	movlw	low STR_40
 10154  00134A  6E03               	movwf	i2strcpy@from,c
 10155  00134C  0EFF               	movlw	high STR_40
 10156  00134E  6E04               	movwf	i2strcpy@from+1,c
 10157  001350  ECEA  F012         	call	i2_strcpy	;wreg free
 10158                           
 10159                           ;RTC.c: 85: break;
 10160  001354  D07A               	goto	i2l4883
 10161  001356                     i2l4865:
 10162                           
 10163                           ;RTC.c: 87: strcpy(month, "Jun");
 10164  001356  0E3D               	movlw	low i2printRTC@month
 10165  001358  6E01               	movwf	i2strcpy@to,c
 10166  00135A  0E00               	movlw	high i2printRTC@month
 10167  00135C  6E02               	movwf	i2strcpy@to+1,c
 10168  00135E  0EDF               	movlw	low STR_41
 10169  001360  6E03               	movwf	i2strcpy@from,c
 10170  001362  0EFF               	movlw	high STR_41
 10171  001364  6E04               	movwf	i2strcpy@from+1,c
 10172  001366  ECEA  F012         	call	i2_strcpy	;wreg free
 10173                           
 10174                           ;RTC.c: 88: break;
 10175  00136A  D06F               	goto	i2l4883
 10176  00136C                     i2l4867:
 10177                           
 10178                           ;RTC.c: 90: strcpy(month, "Jul");
 10179  00136C  0E3D               	movlw	low i2printRTC@month
 10180  00136E  6E01               	movwf	i2strcpy@to,c
 10181  001370  0E00               	movlw	high i2printRTC@month
 10182  001372  6E02               	movwf	i2strcpy@to+1,c
 10183  001374  0ED7               	movlw	low STR_42
 10184  001376  6E03               	movwf	i2strcpy@from,c
 10185  001378  0EFF               	movlw	high STR_42
 10186  00137A  6E04               	movwf	i2strcpy@from+1,c
 10187  00137C  ECEA  F012         	call	i2_strcpy	;wreg free
 10188                           
 10189                           ;RTC.c: 91: break;
 10190  001380  D064               	goto	i2l4883
 10191  001382                     i2l4869:
 10192                           
 10193                           ;RTC.c: 93: strcpy(month, "Aug");
 10194  001382  0E3D               	movlw	low i2printRTC@month
 10195  001384  6E01               	movwf	i2strcpy@to,c
 10196  001386  0E00               	movlw	high i2printRTC@month
 10197  001388  6E02               	movwf	i2strcpy@to+1,c
 10198  00138A  0ED3               	movlw	low STR_43
 10199  00138C  6E03               	movwf	i2strcpy@from,c
 10200  00138E  0EFF               	movlw	high STR_43
 10201  001390  6E04               	movwf	i2strcpy@from+1,c
 10202  001392  ECEA  F012         	call	i2_strcpy	;wreg free
 10203                           
 10204                           ;RTC.c: 94: break;
 10205  001396  D059               	goto	i2l4883
 10206  001398                     i2l4871:
 10207                           
 10208                           ;RTC.c: 96: strcpy(month, "Sep");
 10209  001398  0E3D               	movlw	low i2printRTC@month
 10210  00139A  6E01               	movwf	i2strcpy@to,c
 10211  00139C  0E00               	movlw	high i2printRTC@month
 10212  00139E  6E02               	movwf	i2strcpy@to+1,c
 10213  0013A0  0EE3               	movlw	low STR_44
 10214  0013A2  6E03               	movwf	i2strcpy@from,c
 10215  0013A4  0EFF               	movlw	high STR_44
 10216  0013A6  6E04               	movwf	i2strcpy@from+1,c
 10217  0013A8  ECEA  F012         	call	i2_strcpy	;wreg free
 10218                           
 10219                           ;RTC.c: 97: break;
 10220  0013AC  D04E               	goto	i2l4883
 10221  0013AE                     i2l4873:
 10222                           
 10223                           ;RTC.c: 99: strcpy(month, "Oct");
 10224  0013AE  0E3D               	movlw	low i2printRTC@month
 10225  0013B0  6E01               	movwf	i2strcpy@to,c
 10226  0013B2  0E00               	movlw	high i2printRTC@month
 10227  0013B4  6E02               	movwf	i2strcpy@to+1,c
 10228  0013B6  0EEF               	movlw	low STR_45
 10229  0013B8  6E03               	movwf	i2strcpy@from,c
 10230  0013BA  0EFF               	movlw	high STR_45
 10231  0013BC  6E04               	movwf	i2strcpy@from+1,c
 10232  0013BE  ECEA  F012         	call	i2_strcpy	;wreg free
 10233                           
 10234                           ;RTC.c: 100: break;
 10235  0013C2  D043               	goto	i2l4883
 10236  0013C4                     i2l4875:
 10237                           
 10238                           ;RTC.c: 102: strcpy(month, "Nov");
 10239  0013C4  0E3D               	movlw	low i2printRTC@month
 10240  0013C6  6E01               	movwf	i2strcpy@to,c
 10241  0013C8  0E00               	movlw	high i2printRTC@month
 10242  0013CA  6E02               	movwf	i2strcpy@to+1,c
 10243  0013CC  0EF3               	movlw	low STR_46
 10244  0013CE  6E03               	movwf	i2strcpy@from,c
 10245  0013D0  0EFF               	movlw	high STR_46
 10246  0013D2  6E04               	movwf	i2strcpy@from+1,c
 10247  0013D4  ECEA  F012         	call	i2_strcpy	;wreg free
 10248                           
 10249                           ;RTC.c: 103: break;
 10250  0013D8  D038               	goto	i2l4883
 10251  0013DA                     i2l4877:
 10252                           
 10253                           ;RTC.c: 105: strcpy(month, "Dec");
 10254  0013DA  0E3D               	movlw	low i2printRTC@month
 10255  0013DC  6E01               	movwf	i2strcpy@to,c
 10256  0013DE  0E00               	movlw	high i2printRTC@month
 10257  0013E0  6E02               	movwf	i2strcpy@to+1,c
 10258  0013E2  0ECF               	movlw	low STR_47
 10259  0013E4  6E03               	movwf	i2strcpy@from,c
 10260  0013E6  0EFF               	movlw	high STR_47
 10261  0013E8  6E04               	movwf	i2strcpy@from+1,c
 10262  0013EA  ECEA  F012         	call	i2_strcpy	;wreg free
 10263                           
 10264                           ;RTC.c: 107: }
 10265                           
 10266                           ;RTC.c: 106: break;
 10267  0013EE  D02D               	goto	i2l4883
 10268  0013F0                     i2l4881:
 10269  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10270  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10271                           
 10272                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10273                           ; Switch size 1, requested type "space"
 10274                           ; Number of cases is 1, Range of values is 0 to 0
 10275                           ; switch strategies available:
 10276                           ; Name         Instructions Cycles
 10277                           ; simple_byte            4     3 (average)
 10278                           ;	Chosen strategy is simple_byte
 10279  0013F8  502B               	movf	??i2_printRTC+1,w,c
 10280  0013FA  0A00               	xorlw	0	; case 0
 10281  0013FC  A4D8               	btfss	status,2,c
 10282  0013FE  D025               	goto	i2l4883
 10283                           
 10284                           ; Switch size 1, requested type "space"
 10285                           ; Number of cases is 12, Range of values is 1 to 12
 10286                           ; switch strategies available:
 10287                           ; Name         Instructions Cycles
 10288                           ; simple_byte           37    19 (average)
 10289                           ;	Chosen strategy is simple_byte
 10290  001400  502A               	movf	??i2_printRTC,w,c
 10291  001402  0A01               	xorlw	1	; case 1
 10292  001404  B4D8               	btfsc	status,2,c
 10293  001406  D770               	goto	i2l4855
 10294  001408  0A03               	xorlw	3	; case 2
 10295  00140A  B4D8               	btfsc	status,2,c
 10296  00140C  D778               	goto	i2l4857
 10297  00140E  0A01               	xorlw	1	; case 3
 10298  001410  B4D8               	btfsc	status,2,c
 10299  001412  D780               	goto	i2l4859
 10300  001414  0A07               	xorlw	7	; case 4
 10301  001416  B4D8               	btfsc	status,2,c
 10302  001418  D788               	goto	i2l4861
 10303  00141A  0A01               	xorlw	1	; case 5
 10304  00141C  B4D8               	btfsc	status,2,c
 10305  00141E  D790               	goto	i2l4863
 10306  001420  0A03               	xorlw	3	; case 6
 10307  001422  B4D8               	btfsc	status,2,c
 10308  001424  D798               	goto	i2l4865
 10309  001426  0A01               	xorlw	1	; case 7
 10310  001428  B4D8               	btfsc	status,2,c
 10311  00142A  D7A0               	goto	i2l4867
 10312  00142C  0A0F               	xorlw	15	; case 8
 10313  00142E  B4D8               	btfsc	status,2,c
 10314  001430  D7A8               	goto	i2l4869
 10315  001432  0A01               	xorlw	1	; case 9
 10316  001434  B4D8               	btfsc	status,2,c
 10317  001436  D7B0               	goto	i2l4871
 10318  001438  0A03               	xorlw	3	; case 10
 10319  00143A  B4D8               	btfsc	status,2,c
 10320  00143C  D7B8               	goto	i2l4873
 10321  00143E  0A01               	xorlw	1	; case 11
 10322  001440  B4D8               	btfsc	status,2,c
 10323  001442  D7C0               	goto	i2l4875
 10324  001444  0A07               	xorlw	7	; case 12
 10325  001446  B4D8               	btfsc	status,2,c
 10326  001448  D7C8               	goto	i2l4877
 10327  00144A                     i2l4883:
 10328                           
 10329                           ;RTC.c: 108: lcdInst(0b10000000);;
 10330  00144A  0E80               	movlw	128
 10331  00144C  EC35  F015         	call	i2_lcdInst
 10332                           
 10333                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10334  001450  0ED0               	movlw	low STR_48
 10335  001452  6E0D               	movwf	i2printf@f,c
 10336  001454  0EFD               	movlw	high STR_48
 10337  001456  6E0E               	movwf	i2printf@f+1,c
 10338  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10339  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10340  001460  0E3D               	movlw	low i2printRTC@month
 10341  001462  6E11               	movwf	?i2_printf+4,c
 10342  001464  0E00               	movlw	high i2printRTC@month
 10343  001466  6E12               	movwf	?i2_printf+5,c
 10344  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10345  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10346  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10347  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10348  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10349  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10350  001480  ECC0  F004         	call	i2_printf	;wreg free
 10351  001484  0012               	return		;funcret
 10352  001486                     __end_ofi2_printRTC:
 10353                           	opt stack 0
 10354                           pclatu	equ	0xFFB
 10355                           pclath	equ	0xFFA
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           intcon3	equ	0xFF0
 10365                           indf0	equ	0xFEF
 10366                           postinc0	equ	0xFEE
 10367                           fsr0h	equ	0xFEA
 10368                           fsr0l	equ	0xFE9
 10369                           wreg	equ	0xFE8
 10370                           postdec1	equ	0xFE5
 10371                           fsr1h	equ	0xFE2
 10372                           fsr1l	equ	0xFE1
 10373                           indf2	equ	0xFDF
 10374                           postinc2	equ	0xFDE
 10375                           postdec2	equ	0xFDD
 10376                           fsr2h	equ	0xFDA
 10377                           fsr2l	equ	0xFD9
 10378                           status	equ	0xFD8
 10379                           
 10380 ;; *************** function i2_strcpy *****************
 10381 ;; Defined at:
 10382 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;  to              2    0[COMRAM] PTR unsigned char 
 10385 ;;		 -> printRTC@month(4), 
 10386 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10387 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10388 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10389 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10392 ;;		 -> printRTC@month(4), 
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  2    0[COMRAM] PTR unsigned char 
 10395 ;; Registers used:
 10396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;Total ram usage:        6 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; This function calls:
 10409 ;;		Nothing
 10410 ;; This function is called by:
 10411 ;;		i2_printRTC
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           	psect	text48
 10416  0025D4                     __ptext48:
 10417                           	opt stack 0
 10418  0025D4                     i2_strcpy:
 10419                           	opt stack 20
 10420                           
 10421                           ;incstack = 0
 10422  0025D4  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10423  0025D8  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10424  0025DC  D004               	goto	i2l4619
 10425  0025DE                     i2l4617:
 10426  0025DE  4A05               	infsnz	i2strcpy@cp,f,c
 10427  0025E0  2A06               	incf	i2strcpy@cp+1,f,c
 10428  0025E2  4A03               	infsnz	i2strcpy@from,f,c
 10429  0025E4  2A04               	incf	i2strcpy@from+1,f,c
 10430  0025E6                     i2l4619:
 10431  0025E6  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10432  0025EA  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10433  0025EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10434  0025EE  6AF8               	clrf	tblptru,c
 10435  0025F0                     	endif
 10436  0025F0                     	if	0	;tblptru may be non-zero
 10437  0025F0                     	endif
 10438  0025F0  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10439  0025F4  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10440  0025F8  0008               	tblrd		*
 10441  0025FA  CFF5 FFDF          	movff	tablat,indf2
 10442  0025FE  50DF               	movf	indf2,w,c
 10443  002600  B4D8               	btfsc	status,2,c
 10444  002602  0012               	return	
 10445  002604  D7EC               	goto	i2l4617
 10446  002606                     __end_ofi2_strcpy:
 10447                           	opt stack 0
 10448                           pclatu	equ	0xFFB
 10449                           pclath	equ	0xFFA
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           intcon2	equ	0xFF1
 10458                           intcon3	equ	0xFF0
 10459                           indf0	equ	0xFEF
 10460                           postinc0	equ	0xFEE
 10461                           fsr0h	equ	0xFEA
 10462                           fsr0l	equ	0xFE9
 10463                           wreg	equ	0xFE8
 10464                           postdec1	equ	0xFE5
 10465                           fsr1h	equ	0xFE2
 10466                           fsr1l	equ	0xFE1
 10467                           indf2	equ	0xFDF
 10468                           postinc2	equ	0xFDE
 10469                           postdec2	equ	0xFDD
 10470                           fsr2h	equ	0xFDA
 10471                           fsr2l	equ	0xFD9
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function _inputHandler *****************
 10475 ;; Defined at:
 10476 ;;		line 315 in file "UI.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  2   41[COMRAM] int 
 10483 ;; Registers used:
 10484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;Total ram usage:        4 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    4
 10497 ;; This function calls:
 10498 ;;		_change_state_to_logs_11
 10499 ;;		_change_state_to_logs_12
 10500 ;;		_change_state_to_logs_22
 10501 ;;		_change_state_to_logs_23
 10502 ;;		_change_state_to_logs_33
 10503 ;;		_change_state_to_logs_34
 10504 ;;		_change_state_to_menu_11
 10505 ;;		_change_state_to_menu_23
 10506 ;;		i2_change_state_to_menu_12
 10507 ;;		i2_change_state_to_menu_22
 10508 ;; This function is called by:
 10509 ;;		_updateMenu
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           	psect	text49
 10514  001680                     __ptext49:
 10515                           	opt stack 0
 10516  001680                     _inputHandler:
 10517                           	opt stack 18
 10518                           
 10519                           ;UI.c: 320: if(firstboot){
 10520                           
 10521                           ;incstack = 0
 10522  001680  5071               	movf	_firstboot,w,c
 10523  001682  1072               	iorwf	_firstboot+1,w,c
 10524  001684  B4D8               	btfsc	status,2,c
 10525  001686  D00B               	goto	i2l4951
 10526                           
 10527                           ;UI.c: 321: change_state_to_menu_11();
 10528  001688  EC63  F013         	call	_change_state_to_menu_11	;wreg free
 10529                           
 10530                           ;UI.c: 322: firstboot = 0;
 10531  00168C  0E00               	movlw	0
 10532  00168E  6E72               	movwf	_firstboot+1,c
 10533  001690  0E00               	movlw	0
 10534  001692  6E71               	movwf	_firstboot,c
 10535                           
 10536                           ;UI.c: 323: return 0;
 10537  001694  0E00               	movlw	0
 10538  001696  6E2B               	movwf	?_inputHandler+1,c
 10539  001698  0E00               	movlw	0
 10540  00169A  6E2A               	movwf	?_inputHandler,c
 10541  00169C  0012               	return	
 10542  00169E                     i2l4951:
 10543                           
 10544                           ;UI.c: 324: }
 10545                           ;UI.c: 325: if (logstate){
 10546  00169E  0100               	movlb	0	; () banked
 10547  0016A0  51ED               	movf	_logstate& (0+255),w,b
 10548  0016A2  0100               	movlb	0	; () banked
 10549  0016A4  11EE               	iorwf	(_logstate+1)& (0+255),w,b
 10550  0016A6  B4D8               	btfsc	status,2,c
 10551  0016A8  D0C7               	goto	i2l5069
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10555  0016AA  0E43               	movlw	67
 10556  0016AC  187C               	xorwf	_input,w,c
 10557  0016AE  A4D8               	btfss	status,2,c
 10558  0016B0  D012               	goto	i2l4969
 10559                           
 10560                           ; BSR set to: 0
 10561  0016B2  B281               	btfsc	3969,1,c	;volatile
 10562  0016B4  D009               	goto	i2l4961
 10563  0016B6  D00F               	goto	i2l4969
 10564  0016B8                     i2l4959:
 10565                           
 10566                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10567  0016B8  0E68               	movlw	104
 10568  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10569  0016BC  0EE4               	movlw	228
 10570  0016BE                     i2u501_47:
 10571  0016BE  2EE8               	decfsz	wreg,f,c
 10572  0016C0  D7FE               	bra	i2u501_47
 10573  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10574  0016C4  D7FC               	bra	i2u501_47
 10575  0016C6  D000               	nop2	
 10576  0016C8                     i2l4961:
 10577  0016C8  B281               	btfsc	3969,1,c	;volatile
 10578  0016CA  D7F6               	goto	i2l4959
 10579  0016CC                     i2l4963:
 10580                           
 10581                           ;UI.c: 330: }
 10582                           ;UI.c: 331: return 0;
 10583  0016CC  0E00               	movlw	0
 10584  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10585  0016D0  0E00               	movlw	0
 10586  0016D2  6E2A               	movwf	?_inputHandler,c
 10587  0016D4  0012               	return	
 10588  0016D6                     i2l4969:
 10589                           
 10590                           ;UI.c: 333: else if (input == 'D'){
 10591  0016D6  0E44               	movlw	68
 10592  0016D8  187C               	xorwf	_input,w,c
 10593  0016DA  A4D8               	btfss	status,2,c
 10594  0016DC  D7F7               	goto	i2l4963
 10595                           
 10596                           ;UI.c: 335: logstate = 0;
 10597  0016DE  0E00               	movlw	0
 10598  0016E0  0100               	movlb	0	; () banked
 10599  0016E2  6FEE               	movwf	(_logstate+1)& (0+255),b
 10600  0016E4  0E00               	movlw	0
 10601  0016E6  6FED               	movwf	_logstate& (0+255),b
 10602                           
 10603                           ;UI.c: 336: switch(cur_state){
 10604  0016E8  D012               	goto	i2l4987
 10605  0016EA                     i2l4973:
 10606                           
 10607                           ;UI.c: 338: change_state_to_logs_11();
 10608  0016EA  ECDB  F013         	call	_change_state_to_logs_11	;wreg free
 10609                           
 10610                           ;UI.c: 339: break;
 10611  0016EE  D7EE               	goto	i2l4963
 10612  0016F0                     i2l4975:
 10613                           
 10614                           ;UI.c: 341: change_state_to_logs_12();
 10615  0016F0  ECC3  F013         	call	_change_state_to_logs_12	;wreg free
 10616                           
 10617                           ;UI.c: 342: break;
 10618  0016F4  D7EB               	goto	i2l4963
 10619  0016F6                     i2l4977:
 10620                           
 10621                           ;UI.c: 344: change_state_to_logs_22();
 10622  0016F6  ECAB  F013         	call	_change_state_to_logs_22	;wreg free
 10623                           
 10624                           ;UI.c: 345: break;
 10625  0016FA  D7E8               	goto	i2l4963
 10626  0016FC                     i2l4979:
 10627                           
 10628                           ;UI.c: 347: change_state_to_logs_23();
 10629  0016FC  EC0A  F014         	call	_change_state_to_logs_23	;wreg free
 10630                           
 10631                           ;UI.c: 348: break;
 10632  001700  D7E5               	goto	i2l4963
 10633  001702                     i2l4981:
 10634                           
 10635                           ;UI.c: 350: change_state_to_logs_33();
 10636  001702  EC93  F013         	call	_change_state_to_logs_33	;wreg free
 10637                           
 10638                           ;UI.c: 351: break;
 10639  001706  D7E2               	goto	i2l4963
 10640  001708                     i2l4983:
 10641                           
 10642                           ;UI.c: 353: change_state_to_logs_34();
 10643  001708  EC7B  F013         	call	_change_state_to_logs_34	;wreg free
 10644                           
 10645                           ;UI.c: 355: }
 10646                           
 10647                           ;UI.c: 354: break;
 10648  00170C  D7DF               	goto	i2l4963
 10649  00170E                     i2l4987:
 10650  00170E  C0DF  F02C         	movff	_cur_state,??_inputHandler
 10651  001712  C0E0  F02D         	movff	_cur_state+1,??_inputHandler+1
 10652                           
 10653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10654                           ; Switch size 1, requested type "space"
 10655                           ; Number of cases is 2, Range of values is 3 to 4
 10656                           ; switch strategies available:
 10657                           ; Name         Instructions Cycles
 10658                           ; simple_byte            7     4 (average)
 10659                           ;	Chosen strategy is simple_byte
 10660  001716  502D               	movf	??_inputHandler+1,w,c
 10661  001718  0A03               	xorlw	3	; case 3
 10662  00171A  B4D8               	btfsc	status,2,c
 10663  00171C  D004               	goto	i2l6103
 10664  00171E  0A07               	xorlw	7	; case 4
 10665  001720  B4D8               	btfsc	status,2,c
 10666  001722  D00F               	goto	i2l6105
 10667  001724  D7D3               	goto	i2l4963
 10668  001726                     i2l6103:
 10669                           
 10670                           ; Switch size 1, requested type "space"
 10671                           ; Number of cases is 4, Range of values is 243 to 255
 10672                           ; switch strategies available:
 10673                           ; Name         Instructions Cycles
 10674                           ; simple_byte           13     7 (average)
 10675                           ;	Chosen strategy is simple_byte
 10676  001726  502C               	movf	??_inputHandler,w,c
 10677  001728  0AF3               	xorlw	243	; case 243
 10678  00172A  B4D8               	btfsc	status,2,c
 10679  00172C  D7DE               	goto	i2l4973
 10680  00172E  0A07               	xorlw	7	; case 244
 10681  001730  B4D8               	btfsc	status,2,c
 10682  001732  D7DE               	goto	i2l4975
 10683  001734  0A0A               	xorlw	10	; case 254
 10684  001736  B4D8               	btfsc	status,2,c
 10685  001738  D7DE               	goto	i2l4977
 10686  00173A  0A01               	xorlw	1	; case 255
 10687  00173C  B4D8               	btfsc	status,2,c
 10688  00173E  D7DE               	goto	i2l4979
 10689  001740  D7C5               	goto	i2l4963
 10690  001742                     i2l6105:
 10691                           
 10692                           ; Switch size 1, requested type "space"
 10693                           ; Number of cases is 2, Range of values is 9 to 10
 10694                           ; switch strategies available:
 10695                           ; Name         Instructions Cycles
 10696                           ; simple_byte            7     4 (average)
 10697                           ;	Chosen strategy is simple_byte
 10698  001742  502C               	movf	??_inputHandler,w,c
 10699  001744  0A09               	xorlw	9	; case 9
 10700  001746  B4D8               	btfsc	status,2,c
 10701  001748  D7DC               	goto	i2l4981
 10702  00174A  0A03               	xorlw	3	; case 10
 10703  00174C  B4D8               	btfsc	status,2,c
 10704  00174E  D7DC               	goto	i2l4983
 10705  001750  D7BD               	goto	i2l4963
 10706  001752                     i2l4999:
 10707                           
 10708                           ;UI.c: 365: if(cur_state == 11){
 10709  001752  0E0B               	movlw	11
 10710  001754  0100               	movlb	0	; () banked
 10711  001756  19DF               	xorwf	_cur_state& (0+255),w,b
 10712  001758  0100               	movlb	0	; () banked
 10713  00175A  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10714  00175C  A4D8               	btfss	status,2,c
 10715  00175E  D005               	goto	i2l5007
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;UI.c: 366: return 0;
 10719  001760  0E00               	movlw	0
 10720  001762  6E2B               	movwf	?_inputHandler+1,c
 10721  001764  0E00               	movlw	0
 10722  001766  6E2A               	movwf	?_inputHandler,c
 10723                           
 10724                           ; BSR set to: 0
 10725  001768  0012               	return	
 10726  00176A                     i2l5007:
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;UI.c: 368: else{
 10730                           ;UI.c: 369: change_state_to_menu_11();
 10731  00176A  EC63  F013         	call	_change_state_to_menu_11	;wreg free
 10732                           
 10733                           ;UI.c: 370: }
 10734                           ;UI.c: 371: return 0;
 10735  00176E  0E00               	movlw	0
 10736  001770  6E2B               	movwf	?_inputHandler+1,c
 10737  001772  0E00               	movlw	0
 10738  001774  6E2A               	movwf	?_inputHandler,c
 10739  001776  0012               	return	
 10740  001778                     i2l5013:
 10741                           
 10742                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10743  001778  0E16               	movlw	22
 10744  00177A  0100               	movlb	0	; () banked
 10745  00177C  19DF               	xorwf	_cur_state& (0+255),w,b
 10746  00177E  0100               	movlb	0	; () banked
 10747  001780  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10748  001782  B4D8               	btfsc	status,2,c
 10749  001784  D007               	goto	i2l5017
 10750                           
 10751                           ; BSR set to: 0
 10752  001786  0E0C               	movlw	12
 10753  001788  0100               	movlb	0	; () banked
 10754  00178A  19DF               	xorwf	_cur_state& (0+255),w,b
 10755  00178C  0100               	movlb	0	; () banked
 10756  00178E  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10757  001790  A4D8               	btfss	status,2,c
 10758  001792  D005               	goto	i2l5023
 10759  001794                     i2l5017:
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;UI.c: 374: return 0;
 10763  001794  0E00               	movlw	0
 10764  001796  6E2B               	movwf	?_inputHandler+1,c
 10765  001798  0E00               	movlw	0
 10766  00179A  6E2A               	movwf	?_inputHandler,c
 10767                           
 10768                           ; BSR set to: 0
 10769  00179C  0012               	return	
 10770  00179E                     i2l5023:
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;UI.c: 376: else if(cur_state == 23){
 10774  00179E  0E17               	movlw	23
 10775  0017A0  0100               	movlb	0	; () banked
 10776  0017A2  19DF               	xorwf	_cur_state& (0+255),w,b
 10777  0017A4  0100               	movlb	0	; () banked
 10778  0017A6  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10779  0017A8  A4D8               	btfss	status,2,c
 10780  0017AA  D003               	goto	i2l5027
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;UI.c: 377: change_state_to_menu_22();
 10784  0017AC  EC1B  F013         	call	i2_change_state_to_menu_22	;wreg free
 10785                           
 10786                           ;UI.c: 378: }
 10787  0017B0  D002               	goto	i2l5029
 10788  0017B2                     i2l5027:
 10789                           
 10790                           ;UI.c: 379: else{
 10791                           ;UI.c: 380: change_state_to_menu_12();
 10792  0017B2  EC33  F013         	call	i2_change_state_to_menu_12	;wreg free
 10793  0017B6                     i2l5029:
 10794                           
 10795                           ;UI.c: 381: }
 10796                           ;UI.c: 382: return 0;
 10797  0017B6  0E00               	movlw	0
 10798  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10799  0017BA  0E00               	movlw	0
 10800  0017BC  6E2A               	movwf	?_inputHandler,c
 10801  0017BE  0012               	return	
 10802  0017C0                     i2l5033:
 10803                           
 10804                           ;UI.c: 384: if(cur_state == 23){
 10805  0017C0  0E17               	movlw	23
 10806  0017C2  0100               	movlb	0	; () banked
 10807  0017C4  19DF               	xorwf	_cur_state& (0+255),w,b
 10808  0017C6  0100               	movlb	0	; () banked
 10809  0017C8  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10810  0017CA  A4D8               	btfss	status,2,c
 10811  0017CC  D005               	goto	i2l5041
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;UI.c: 385: return 0;
 10815  0017CE  0E00               	movlw	0
 10816  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10817  0017D2  0E00               	movlw	0
 10818  0017D4  6E2A               	movwf	?_inputHandler,c
 10819                           
 10820                           ; BSR set to: 0
 10821  0017D6  0012               	return	
 10822  0017D8                     i2l5041:
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;UI.c: 387: else{
 10826                           ;UI.c: 388: change_state_to_menu_23();
 10827  0017D8  EC4B  F013         	call	_change_state_to_menu_23	;wreg free
 10828                           
 10829                           ;UI.c: 389: }
 10830                           ;UI.c: 390: return 0;
 10831  0017DC  0E00               	movlw	0
 10832  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10833  0017E0  0E00               	movlw	0
 10834  0017E2  6E2A               	movwf	?_inputHandler,c
 10835  0017E4  0012               	return	
 10836  0017E6                     i2l5047:
 10837                           
 10838                           ;UI.c: 393: up = 1;
 10839  0017E6  0E00               	movlw	0
 10840  0017E8  6E78               	movwf	_up+1,c
 10841  0017EA  0E01               	movlw	1
 10842  0017EC  6E77               	movwf	_up,c
 10843                           
 10844                           ;UI.c: 394: return 1;
 10845  0017EE  0E00               	movlw	0
 10846  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10847  0017F2  0E01               	movlw	1
 10848  0017F4  6E2A               	movwf	?_inputHandler,c
 10849  0017F6  0012               	return	
 10850  0017F8                     i2l5051:
 10851                           
 10852                           ;UI.c: 396: down = 1;
 10853  0017F8  0E00               	movlw	0
 10854  0017FA  6E6E               	movwf	_down+1,c
 10855  0017FC  0E01               	movlw	1
 10856  0017FE  6E6D               	movwf	_down,c
 10857                           
 10858                           ;UI.c: 397: return 1;
 10859  001800  0E00               	movlw	0
 10860  001802  6E2B               	movwf	?_inputHandler+1,c
 10861  001804  0E01               	movlw	1
 10862  001806  6E2A               	movwf	?_inputHandler,c
 10863  001808  0012               	return	
 10864  00180A                     i2l5055:
 10865                           
 10866                           ;UI.c: 399: enter = 1;
 10867  00180A  0E00               	movlw	0
 10868  00180C  6E70               	movwf	_enter+1,c
 10869  00180E  0E01               	movlw	1
 10870  001810  6E6F               	movwf	_enter,c
 10871                           
 10872                           ;UI.c: 400: return 1;
 10873  001812  0E00               	movlw	0
 10874  001814  6E2B               	movwf	?_inputHandler+1,c
 10875  001816  0E01               	movlw	1
 10876  001818  6E2A               	movwf	?_inputHandler,c
 10877  00181A  0012               	return	
 10878  00181C                     i2l5059:
 10879                           
 10880                           ;UI.c: 402: back = 1;
 10881  00181C  0E00               	movlw	0
 10882  00181E  6E64               	movwf	_back+1,c
 10883  001820  0E01               	movlw	1
 10884  001822  6E63               	movwf	_back,c
 10885                           
 10886                           ;UI.c: 403: return 1;
 10887  001824  0E00               	movlw	0
 10888  001826  6E2B               	movwf	?_inputHandler+1,c
 10889  001828  0E01               	movlw	1
 10890  00182A  6E2A               	movwf	?_inputHandler,c
 10891  00182C  0012               	return	
 10892  00182E                     i2l5063:
 10893                           
 10894                           ;UI.c: 406: return 1;
 10895  00182E  0E00               	movlw	0
 10896  001830  6E2B               	movwf	?_inputHandler+1,c
 10897  001832  0E01               	movlw	1
 10898  001834  6E2A               	movwf	?_inputHandler,c
 10899                           
 10900                           ;UI.c: 407: }
 10901  001836  0012               	return	
 10902  001838                     i2l5069:
 10903  001838  507C               	movf	_input,w,c
 10904                           
 10905                           ; Switch size 1, requested type "space"
 10906                           ; Number of cases is 7, Range of values is 49 to 68
 10907                           ; switch strategies available:
 10908                           ; Name         Instructions Cycles
 10909                           ; simple_byte           22    12 (average)
 10910                           ;	Chosen strategy is simple_byte
 10911  00183A  0A31               	xorlw	49	; case 49
 10912  00183C  B4D8               	btfsc	status,2,c
 10913  00183E  D789               	goto	i2l4999
 10914  001840  0A03               	xorlw	3	; case 50
 10915  001842  B4D8               	btfsc	status,2,c
 10916  001844  D799               	goto	i2l5013
 10917  001846  0A01               	xorlw	1	; case 51
 10918  001848  B4D8               	btfsc	status,2,c
 10919  00184A  D7BA               	goto	i2l5033
 10920  00184C  0A72               	xorlw	114	; case 65
 10921  00184E  B4D8               	btfsc	status,2,c
 10922  001850  D7CA               	goto	i2l5047
 10923  001852  0A03               	xorlw	3	; case 66
 10924  001854  B4D8               	btfsc	status,2,c
 10925  001856  D7D0               	goto	i2l5051
 10926  001858  0A01               	xorlw	1	; case 67
 10927  00185A  B4D8               	btfsc	status,2,c
 10928  00185C  D7D6               	goto	i2l5055
 10929  00185E  0A07               	xorlw	7	; case 68
 10930  001860  B4D8               	btfsc	status,2,c
 10931  001862  D7DC               	goto	i2l5059
 10932  001864  D7E4               	goto	i2l5063
 10933  001866                     __end_of_inputHandler:
 10934                           	opt stack 0
 10935                           pclatu	equ	0xFFB
 10936                           pclath	equ	0xFFA
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           intcon3	equ	0xFF0
 10946                           indf0	equ	0xFEF
 10947                           postinc0	equ	0xFEE
 10948                           fsr0h	equ	0xFEA
 10949                           fsr0l	equ	0xFE9
 10950                           wreg	equ	0xFE8
 10951                           postdec1	equ	0xFE5
 10952                           fsr1h	equ	0xFE2
 10953                           fsr1l	equ	0xFE1
 10954                           indf2	equ	0xFDF
 10955                           postinc2	equ	0xFDE
 10956                           postdec2	equ	0xFDD
 10957                           fsr2h	equ	0xFDA
 10958                           fsr2l	equ	0xFD9
 10959                           status	equ	0xFD8
 10960                           
 10961 ;; *************** function i2_change_state_to_menu_22 *****************
 10962 ;; Defined at:
 10963 ;;		line 440 in file "UI.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;		None
 10968 ;; Return value:  Size  Location     Type
 10969 ;;                  1    wreg      void 
 10970 ;; Registers used:
 10971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;Total ram usage:        0 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    3
 10984 ;; This function calls:
 10985 ;;		i2_lcdInst
 10986 ;;		i2_printf
 10987 ;; This function is called by:
 10988 ;;		_updateMenu
 10989 ;;		_inputHandler
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           	psect	text50
 10994  002636                     __ptext50:
 10995                           	opt stack 0
 10996  002636                     i2_change_state_to_menu_22:
 10997                           	opt stack 19
 10998                           
 10999                           ;UI.c: 441: cur_state = 22;
 11000                           
 11001                           ;incstack = 0
 11002  002636  0E00               	movlw	0
 11003  002638  0100               	movlb	0	; () banked
 11004  00263A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11005  00263C  0E16               	movlw	22
 11006  00263E  6FDF               	movwf	_cur_state& (0+255),b
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;UI.c: 443: lcdInst(0b10000000);;
 11010  002640  0E80               	movlw	128
 11011  002642  EC35  F015         	call	i2_lcdInst
 11012                           
 11013                           ;UI.c: 444: printf("2. SORT        <");
 11014  002646  0E64               	movlw	low STR_19
 11015  002648  6E0D               	movwf	i2printf@f,c
 11016  00264A  0EFF               	movlw	high STR_19
 11017  00264C  6E0E               	movwf	i2printf@f+1,c
 11018  00264E  ECC0  F004         	call	i2_printf	;wreg free
 11019                           
 11020                           ;UI.c: 445: lcdInst(0b11000000);;
 11021  002652  0EC0               	movlw	192
 11022  002654  EC35  F015         	call	i2_lcdInst
 11023                           
 11024                           ;UI.c: 446: printf("3. LOGS         ");
 11025  002658  0E65               	movlw	low STR_21
 11026  00265A  6E0D               	movwf	i2printf@f,c
 11027  00265C  0EFE               	movlw	high STR_21
 11028  00265E  6E0E               	movwf	i2printf@f+1,c
 11029  002660  ECC0  F004         	call	i2_printf	;wreg free
 11030  002664  0012               	return		;funcret
 11031  002666                     __end_ofi2_change_state_to_menu_22:
 11032                           	opt stack 0
 11033                           pclatu	equ	0xFFB
 11034                           pclath	equ	0xFFA
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           prodh	equ	0xFF4
 11040                           prodl	equ	0xFF3
 11041                           intcon	equ	0xFF2
 11042                           intcon2	equ	0xFF1
 11043                           intcon3	equ	0xFF0
 11044                           indf0	equ	0xFEF
 11045                           postinc0	equ	0xFEE
 11046                           fsr0h	equ	0xFEA
 11047                           fsr0l	equ	0xFE9
 11048                           wreg	equ	0xFE8
 11049                           postdec1	equ	0xFE5
 11050                           fsr1h	equ	0xFE2
 11051                           fsr1l	equ	0xFE1
 11052                           indf2	equ	0xFDF
 11053                           postinc2	equ	0xFDE
 11054                           postdec2	equ	0xFDD
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059 ;; *************** function i2_change_state_to_menu_12 *****************
 11060 ;; Defined at:
 11061 ;;		line 432 in file "UI.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;		None
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;		None
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  1    wreg      void 
 11068 ;; Registers used:
 11069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;Total ram usage:        0 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    3
 11082 ;; This function calls:
 11083 ;;		i2_lcdInst
 11084 ;;		i2_printf
 11085 ;; This function is called by:
 11086 ;;		_updateMenu
 11087 ;;		_inputHandler
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           	psect	text51
 11092  002666                     __ptext51:
 11093                           	opt stack 0
 11094  002666                     i2_change_state_to_menu_12:
 11095                           	opt stack 19
 11096                           
 11097                           ;UI.c: 433: cur_state = 12;
 11098                           
 11099                           ;incstack = 0
 11100  002666  0E00               	movlw	0
 11101  002668  0100               	movlb	0	; () banked
 11102  00266A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11103  00266C  0E0C               	movlw	12
 11104  00266E  6FDF               	movwf	_cur_state& (0+255),b
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;UI.c: 435: lcdInst(0b10000000);;
 11108  002670  0E80               	movlw	128
 11109  002672  EC35  F015         	call	i2_lcdInst
 11110                           
 11111                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11112  002676  0E87               	movlw	low STR_18
 11113  002678  6E0D               	movwf	i2printf@f,c
 11114  00267A  0EFE               	movlw	high STR_18
 11115  00267C  6E0E               	movwf	i2printf@f+1,c
 11116  00267E  ECC0  F004         	call	i2_printf	;wreg free
 11117                           
 11118                           ;UI.c: 437: lcdInst(0b11000000);;
 11119  002682  0EC0               	movlw	192
 11120  002684  EC35  F015         	call	i2_lcdInst
 11121                           
 11122                           ;UI.c: 438: printf("2. SORT        <");
 11123  002688  0E64               	movlw	low STR_19
 11124  00268A  6E0D               	movwf	i2printf@f,c
 11125  00268C  0EFF               	movlw	high STR_19
 11126  00268E  6E0E               	movwf	i2printf@f+1,c
 11127  002690  ECC0  F004         	call	i2_printf	;wreg free
 11128  002694  0012               	return		;funcret
 11129  002696                     __end_ofi2_change_state_to_menu_12:
 11130                           	opt stack 0
 11131                           pclatu	equ	0xFFB
 11132                           pclath	equ	0xFFA
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           intcon3	equ	0xFF0
 11142                           indf0	equ	0xFEF
 11143                           postinc0	equ	0xFEE
 11144                           fsr0h	equ	0xFEA
 11145                           fsr0l	equ	0xFE9
 11146                           wreg	equ	0xFE8
 11147                           postdec1	equ	0xFE5
 11148                           fsr1h	equ	0xFE2
 11149                           fsr1l	equ	0xFE1
 11150                           indf2	equ	0xFDF
 11151                           postinc2	equ	0xFDE
 11152                           postdec2	equ	0xFDD
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           
 11157 ;; *************** function _change_state_to_menu_23 *****************
 11158 ;; Defined at:
 11159 ;;		line 448 in file "UI.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      void 
 11166 ;; Registers used:
 11167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;Total ram usage:        0 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    3
 11180 ;; This function calls:
 11181 ;;		i2_lcdInst
 11182 ;;		i2_printf
 11183 ;; This function is called by:
 11184 ;;		_updateMenu
 11185 ;;		_inputHandler
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text52
 11190  002696                     __ptext52:
 11191                           	opt stack 0
 11192  002696                     _change_state_to_menu_23:
 11193                           	opt stack 18
 11194                           
 11195                           ;UI.c: 449: cur_state = 23;
 11196                           
 11197                           ;incstack = 0
 11198  002696  0E00               	movlw	0
 11199  002698  0100               	movlb	0	; () banked
 11200  00269A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11201  00269C  0E17               	movlw	23
 11202  00269E  6FDF               	movwf	_cur_state& (0+255),b
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;UI.c: 451: lcdInst(0b10000000);;
 11206  0026A0  0E80               	movlw	128
 11207  0026A2  EC35  F015         	call	i2_lcdInst
 11208                           
 11209                           ;UI.c: 452: printf("2. SORT         ");
 11210  0026A6  0E76               	movlw	low STR_17
 11211  0026A8  6E0D               	movwf	i2printf@f,c
 11212  0026AA  0EFE               	movlw	high STR_17
 11213  0026AC  6E0E               	movwf	i2printf@f+1,c
 11214  0026AE  ECC0  F004         	call	i2_printf	;wreg free
 11215                           
 11216                           ;UI.c: 453: lcdInst(0b11000000);;
 11217  0026B2  0EC0               	movlw	192
 11218  0026B4  EC35  F015         	call	i2_lcdInst
 11219                           
 11220                           ;UI.c: 454: printf("3. LOGS        <");
 11221  0026B8  0E53               	movlw	low STR_23
 11222  0026BA  6E0D               	movwf	i2printf@f,c
 11223  0026BC  0EFF               	movlw	high STR_23
 11224  0026BE  6E0E               	movwf	i2printf@f+1,c
 11225  0026C0  ECC0  F004         	call	i2_printf	;wreg free
 11226  0026C4  0012               	return		;funcret
 11227  0026C6                     __end_of_change_state_to_menu_23:
 11228                           	opt stack 0
 11229                           pclatu	equ	0xFFB
 11230                           pclath	equ	0xFFA
 11231                           tblptru	equ	0xFF8
 11232                           tblptrh	equ	0xFF7
 11233                           tblptrl	equ	0xFF6
 11234                           tablat	equ	0xFF5
 11235                           prodh	equ	0xFF4
 11236                           prodl	equ	0xFF3
 11237                           intcon	equ	0xFF2
 11238                           intcon2	equ	0xFF1
 11239                           intcon3	equ	0xFF0
 11240                           indf0	equ	0xFEF
 11241                           postinc0	equ	0xFEE
 11242                           fsr0h	equ	0xFEA
 11243                           fsr0l	equ	0xFE9
 11244                           wreg	equ	0xFE8
 11245                           postdec1	equ	0xFE5
 11246                           fsr1h	equ	0xFE2
 11247                           fsr1l	equ	0xFE1
 11248                           indf2	equ	0xFDF
 11249                           postinc2	equ	0xFDE
 11250                           postdec2	equ	0xFDD
 11251                           fsr2h	equ	0xFDA
 11252                           fsr2l	equ	0xFD9
 11253                           status	equ	0xFD8
 11254                           
 11255 ;; *************** function _change_state_to_menu_11 *****************
 11256 ;; Defined at:
 11257 ;;		line 424 in file "UI.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;		None
 11260 ;; Auto vars:     Size  Location     Type
 11261 ;;		None
 11262 ;; Return value:  Size  Location     Type
 11263 ;;                  1    wreg      void 
 11264 ;; Registers used:
 11265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11266 ;; Tracked objects:
 11267 ;;		On entry : 0/0
 11268 ;;		On exit  : 0/0
 11269 ;;		Unchanged: 0/0
 11270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;Total ram usage:        0 bytes
 11276 ;; Hardware stack levels used:    1
 11277 ;; Hardware stack levels required when called:    3
 11278 ;; This function calls:
 11279 ;;		i2_lcdInst
 11280 ;;		i2_printf
 11281 ;; This function is called by:
 11282 ;;		_updateMenu
 11283 ;;		_inputHandler
 11284 ;; This function uses a non-reentrant model
 11285 ;;
 11286                           
 11287                           	psect	text53
 11288  0026C6                     __ptext53:
 11289                           	opt stack 0
 11290  0026C6                     _change_state_to_menu_11:
 11291                           	opt stack 18
 11292                           
 11293                           ;UI.c: 425: cur_state = 11;
 11294                           
 11295                           ;incstack = 0
 11296  0026C6  0E00               	movlw	0
 11297  0026C8  0100               	movlb	0	; () banked
 11298  0026CA  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11299  0026CC  0E0B               	movlw	11
 11300  0026CE  6FDF               	movwf	_cur_state& (0+255),b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;UI.c: 427: lcdInst(0b10000000);;
 11304  0026D0  0E80               	movlw	128
 11305  0026D2  EC35  F015         	call	i2_lcdInst
 11306                           
 11307                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11308  0026D6  0E75               	movlw	low STR_16
 11309  0026D8  6E0D               	movwf	i2printf@f,c
 11310  0026DA  0EFF               	movlw	high STR_16
 11311  0026DC  6E0E               	movwf	i2printf@f+1,c
 11312  0026DE  ECC0  F004         	call	i2_printf	;wreg free
 11313                           
 11314                           ;UI.c: 429: lcdInst(0b11000000);;
 11315  0026E2  0EC0               	movlw	192
 11316  0026E4  EC35  F015         	call	i2_lcdInst
 11317                           
 11318                           ;UI.c: 430: printf("2. SORT         ");
 11319  0026E8  0E76               	movlw	low STR_17
 11320  0026EA  6E0D               	movwf	i2printf@f,c
 11321  0026EC  0EFE               	movlw	high STR_17
 11322  0026EE  6E0E               	movwf	i2printf@f+1,c
 11323  0026F0  ECC0  F004         	call	i2_printf	;wreg free
 11324  0026F4  0012               	return		;funcret
 11325  0026F6                     __end_of_change_state_to_menu_11:
 11326                           	opt stack 0
 11327                           pclatu	equ	0xFFB
 11328                           pclath	equ	0xFFA
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           intcon2	equ	0xFF1
 11337                           intcon3	equ	0xFF0
 11338                           indf0	equ	0xFEF
 11339                           postinc0	equ	0xFEE
 11340                           fsr0h	equ	0xFEA
 11341                           fsr0l	equ	0xFE9
 11342                           wreg	equ	0xFE8
 11343                           postdec1	equ	0xFE5
 11344                           fsr1h	equ	0xFE2
 11345                           fsr1l	equ	0xFE1
 11346                           indf2	equ	0xFDF
 11347                           postinc2	equ	0xFDE
 11348                           postdec2	equ	0xFDD
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _change_state_to_logs_34 *****************
 11354 ;; Defined at:
 11355 ;;		line 491 in file "UI.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      void 
 11362 ;; Registers used:
 11363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;Total ram usage:        0 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    3
 11376 ;; This function calls:
 11377 ;;		i2_lcdInst
 11378 ;;		i2_printf
 11379 ;; This function is called by:
 11380 ;;		_updateMenu
 11381 ;;		_inputHandler
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text54
 11386  0026F6                     __ptext54:
 11387                           	opt stack 0
 11388  0026F6                     _change_state_to_logs_34:
 11389                           	opt stack 18
 11390                           
 11391                           ;UI.c: 492: cur_state = 1034;
 11392                           
 11393                           ;incstack = 0
 11394  0026F6  0E04               	movlw	4
 11395  0026F8  0100               	movlb	0	; () banked
 11396  0026FA  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11397  0026FC  0E0A               	movlw	10
 11398  0026FE  6FDF               	movwf	_cur_state& (0+255),b
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;UI.c: 493: lcdInst(0b10000000);;
 11402  002700  0E80               	movlw	128
 11403  002702  EC35  F015         	call	i2_lcdInst
 11404                           
 11405                           ;UI.c: 494: printf("LOG 3           ");
 11406  002706  0E43               	movlw	low STR_29
 11407  002708  6E0D               	movwf	i2printf@f,c
 11408  00270A  0EFE               	movlw	high STR_29
 11409  00270C  6E0E               	movwf	i2printf@f+1,c
 11410  00270E  ECC0  F004         	call	i2_printf	;wreg free
 11411                           
 11412                           ;UI.c: 495: lcdInst(0b11000000);;
 11413  002712  0EC0               	movlw	192
 11414  002714  EC35  F015         	call	i2_lcdInst
 11415                           
 11416                           ;UI.c: 496: printf("LOG 4          <");
 11417  002718  0E42               	movlw	low STR_35
 11418  00271A  6E0D               	movwf	i2printf@f,c
 11419  00271C  0EFF               	movlw	high STR_35
 11420  00271E  6E0E               	movwf	i2printf@f+1,c
 11421  002720  ECC0  F004         	call	i2_printf	;wreg free
 11422  002724  0012               	return		;funcret
 11423  002726                     __end_of_change_state_to_logs_34:
 11424                           	opt stack 0
 11425                           pclatu	equ	0xFFB
 11426                           pclath	equ	0xFFA
 11427                           tblptru	equ	0xFF8
 11428                           tblptrh	equ	0xFF7
 11429                           tblptrl	equ	0xFF6
 11430                           tablat	equ	0xFF5
 11431                           prodh	equ	0xFF4
 11432                           prodl	equ	0xFF3
 11433                           intcon	equ	0xFF2
 11434                           intcon2	equ	0xFF1
 11435                           intcon3	equ	0xFF0
 11436                           indf0	equ	0xFEF
 11437                           postinc0	equ	0xFEE
 11438                           fsr0h	equ	0xFEA
 11439                           fsr0l	equ	0xFE9
 11440                           wreg	equ	0xFE8
 11441                           postdec1	equ	0xFE5
 11442                           fsr1h	equ	0xFE2
 11443                           fsr1l	equ	0xFE1
 11444                           indf2	equ	0xFDF
 11445                           postinc2	equ	0xFDE
 11446                           postdec2	equ	0xFDD
 11447                           fsr2h	equ	0xFDA
 11448                           fsr2l	equ	0xFD9
 11449                           status	equ	0xFD8
 11450                           
 11451 ;; *************** function _change_state_to_logs_33 *****************
 11452 ;; Defined at:
 11453 ;;		line 484 in file "UI.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;		None
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;		None
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  1    wreg      void 
 11460 ;; Registers used:
 11461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11471 ;;Total ram usage:        0 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    3
 11474 ;; This function calls:
 11475 ;;		i2_lcdInst
 11476 ;;		i2_printf
 11477 ;; This function is called by:
 11478 ;;		_updateMenu
 11479 ;;		_inputHandler
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text55
 11484  002726                     __ptext55:
 11485                           	opt stack 0
 11486  002726                     _change_state_to_logs_33:
 11487                           	opt stack 18
 11488                           
 11489                           ;UI.c: 485: cur_state = 1033;
 11490                           
 11491                           ;incstack = 0
 11492  002726  0E04               	movlw	4
 11493  002728  0100               	movlb	0	; () banked
 11494  00272A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11495  00272C  0E09               	movlw	9
 11496  00272E  6FDF               	movwf	_cur_state& (0+255),b
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;UI.c: 486: lcdInst(0b10000000);;
 11500  002730  0E80               	movlw	128
 11501  002732  EC35  F015         	call	i2_lcdInst
 11502                           
 11503                           ;UI.c: 487: printf("LOG 3          <");
 11504  002736  0E31               	movlw	low STR_31
 11505  002738  6E0D               	movwf	i2printf@f,c
 11506  00273A  0EFF               	movlw	high STR_31
 11507  00273C  6E0E               	movwf	i2printf@f+1,c
 11508  00273E  ECC0  F004         	call	i2_printf	;wreg free
 11509                           
 11510                           ;UI.c: 488: lcdInst(0b11000000);;
 11511  002742  0EC0               	movlw	192
 11512  002744  EC35  F015         	call	i2_lcdInst
 11513                           
 11514                           ;UI.c: 489: printf("LOG 4           ");
 11515  002748  0E54               	movlw	low STR_33
 11516  00274A  6E0D               	movwf	i2printf@f,c
 11517  00274C  0EFE               	movlw	high STR_33
 11518  00274E  6E0E               	movwf	i2printf@f+1,c
 11519  002750  ECC0  F004         	call	i2_printf	;wreg free
 11520  002754  0012               	return		;funcret
 11521  002756                     __end_of_change_state_to_logs_33:
 11522                           	opt stack 0
 11523                           pclatu	equ	0xFFB
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           intcon2	equ	0xFF1
 11533                           intcon3	equ	0xFF0
 11534                           indf0	equ	0xFEF
 11535                           postinc0	equ	0xFEE
 11536                           fsr0h	equ	0xFEA
 11537                           fsr0l	equ	0xFE9
 11538                           wreg	equ	0xFE8
 11539                           postdec1	equ	0xFE5
 11540                           fsr1h	equ	0xFE2
 11541                           fsr1l	equ	0xFE1
 11542                           indf2	equ	0xFDF
 11543                           postinc2	equ	0xFDE
 11544                           postdec2	equ	0xFDD
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _change_state_to_logs_23 *****************
 11550 ;; Defined at:
 11551 ;;		line 477 in file "UI.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  1    wreg      void 
 11558 ;; Registers used:
 11559 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;Total ram usage:        0 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    3
 11572 ;; This function calls:
 11573 ;;		i2_lcdInst
 11574 ;;		i2_printf
 11575 ;; This function is called by:
 11576 ;;		_updateMenu
 11577 ;;		_inputHandler
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           	psect	text56
 11582  002814                     __ptext56:
 11583                           	opt stack 0
 11584  002814                     _change_state_to_logs_23:
 11585                           	opt stack 18
 11586                           
 11587                           ;UI.c: 478: cur_state = 1023;
 11588                           
 11589                           ;incstack = 0
 11590  002814  0E03               	movlw	3
 11591  002816  0100               	movlb	0	; () banked
 11592  002818  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11593  00281A  69DF               	setf	_cur_state& (0+255),b
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;UI.c: 479: lcdInst(0b10000000);;
 11597  00281C  0E80               	movlw	128
 11598  00281E  EC35  F015         	call	i2_lcdInst
 11599                           
 11600                           ;UI.c: 480: printf("LOG 2           ");
 11601  002822  0E32               	movlw	low STR_25
 11602  002824  6E0D               	movwf	i2printf@f,c
 11603  002826  0EFE               	movlw	high STR_25
 11604  002828  6E0E               	movwf	i2printf@f+1,c
 11605  00282A  ECC0  F004         	call	i2_printf	;wreg free
 11606                           
 11607                           ;UI.c: 481: lcdInst(0b11000000);;
 11608  00282E  0EC0               	movlw	192
 11609  002830  EC35  F015         	call	i2_lcdInst
 11610                           
 11611                           ;UI.c: 482: printf("LOG 3          <");
 11612  002834  0E31               	movlw	low STR_31
 11613  002836  6E0D               	movwf	i2printf@f,c
 11614  002838  0EFF               	movlw	high STR_31
 11615  00283A  6E0E               	movwf	i2printf@f+1,c
 11616  00283C  ECC0  F004         	call	i2_printf	;wreg free
 11617  002840  0012               	return		;funcret
 11618  002842                     __end_of_change_state_to_logs_23:
 11619                           	opt stack 0
 11620                           pclatu	equ	0xFFB
 11621                           pclath	equ	0xFFA
 11622                           tblptru	equ	0xFF8
 11623                           tblptrh	equ	0xFF7
 11624                           tblptrl	equ	0xFF6
 11625                           tablat	equ	0xFF5
 11626                           prodh	equ	0xFF4
 11627                           prodl	equ	0xFF3
 11628                           intcon	equ	0xFF2
 11629                           intcon2	equ	0xFF1
 11630                           intcon3	equ	0xFF0
 11631                           indf0	equ	0xFEF
 11632                           postinc0	equ	0xFEE
 11633                           fsr0h	equ	0xFEA
 11634                           fsr0l	equ	0xFE9
 11635                           wreg	equ	0xFE8
 11636                           postdec1	equ	0xFE5
 11637                           fsr1h	equ	0xFE2
 11638                           fsr1l	equ	0xFE1
 11639                           indf2	equ	0xFDF
 11640                           postinc2	equ	0xFDE
 11641                           postdec2	equ	0xFDD
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8
 11645                           
 11646 ;; *************** function _change_state_to_logs_22 *****************
 11647 ;; Defined at:
 11648 ;;		line 470 in file "UI.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;		None
 11653 ;; Return value:  Size  Location     Type
 11654 ;;                  1    wreg      void 
 11655 ;; Registers used:
 11656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;Total ram usage:        0 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    3
 11669 ;; This function calls:
 11670 ;;		i2_lcdInst
 11671 ;;		i2_printf
 11672 ;; This function is called by:
 11673 ;;		_updateMenu
 11674 ;;		_inputHandler
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           	psect	text57
 11679  002756                     __ptext57:
 11680                           	opt stack 0
 11681  002756                     _change_state_to_logs_22:
 11682                           	opt stack 18
 11683                           
 11684                           ;UI.c: 471: cur_state = 1022;
 11685                           
 11686                           ;incstack = 0
 11687  002756  0E03               	movlw	3
 11688  002758  0100               	movlb	0	; () banked
 11689  00275A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11690  00275C  0EFE               	movlw	254
 11691  00275E  6FDF               	movwf	_cur_state& (0+255),b
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;UI.c: 472: lcdInst(0b10000000);;
 11695  002760  0E80               	movlw	128
 11696  002762  EC35  F015         	call	i2_lcdInst
 11697                           
 11698                           ;UI.c: 473: printf("LOG 2          <");
 11699  002766  0E20               	movlw	low STR_27
 11700  002768  6E0D               	movwf	i2printf@f,c
 11701  00276A  0EFF               	movlw	high STR_27
 11702  00276C  6E0E               	movwf	i2printf@f+1,c
 11703  00276E  ECC0  F004         	call	i2_printf	;wreg free
 11704                           
 11705                           ;UI.c: 474: lcdInst(0b11000000);;
 11706  002772  0EC0               	movlw	192
 11707  002774  EC35  F015         	call	i2_lcdInst
 11708                           
 11709                           ;UI.c: 475: printf("LOG 3           ");
 11710  002778  0E43               	movlw	low STR_29
 11711  00277A  6E0D               	movwf	i2printf@f,c
 11712  00277C  0EFE               	movlw	high STR_29
 11713  00277E  6E0E               	movwf	i2printf@f+1,c
 11714  002780  ECC0  F004         	call	i2_printf	;wreg free
 11715  002784  0012               	return		;funcret
 11716  002786                     __end_of_change_state_to_logs_22:
 11717                           	opt stack 0
 11718                           pclatu	equ	0xFFB
 11719                           pclath	equ	0xFFA
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           intcon2	equ	0xFF1
 11728                           intcon3	equ	0xFF0
 11729                           indf0	equ	0xFEF
 11730                           postinc0	equ	0xFEE
 11731                           fsr0h	equ	0xFEA
 11732                           fsr0l	equ	0xFE9
 11733                           wreg	equ	0xFE8
 11734                           postdec1	equ	0xFE5
 11735                           fsr1h	equ	0xFE2
 11736                           fsr1l	equ	0xFE1
 11737                           indf2	equ	0xFDF
 11738                           postinc2	equ	0xFDE
 11739                           postdec2	equ	0xFDD
 11740                           fsr2h	equ	0xFDA
 11741                           fsr2l	equ	0xFD9
 11742                           status	equ	0xFD8
 11743                           
 11744 ;; *************** function _change_state_to_logs_12 *****************
 11745 ;; Defined at:
 11746 ;;		line 463 in file "UI.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;		None
 11749 ;; Auto vars:     Size  Location     Type
 11750 ;;		None
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  1    wreg      void 
 11753 ;; Registers used:
 11754 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;Total ram usage:        0 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    3
 11767 ;; This function calls:
 11768 ;;		i2_lcdInst
 11769 ;;		i2_printf
 11770 ;; This function is called by:
 11771 ;;		_updateMenu
 11772 ;;		_inputHandler
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           	psect	text58
 11777  002786                     __ptext58:
 11778                           	opt stack 0
 11779  002786                     _change_state_to_logs_12:
 11780                           	opt stack 18
 11781                           
 11782                           ;UI.c: 464: cur_state = 1012;
 11783                           
 11784                           ;incstack = 0
 11785  002786  0E03               	movlw	3
 11786  002788  0100               	movlb	0	; () banked
 11787  00278A  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11788  00278C  0EF4               	movlw	244
 11789  00278E  6FDF               	movwf	_cur_state& (0+255),b
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;UI.c: 465: lcdInst(0b10000000);;
 11793  002790  0E80               	movlw	128
 11794  002792  EC35  F015         	call	i2_lcdInst
 11795                           
 11796                           ;UI.c: 466: printf("LOG 1           ");
 11797  002796  0E21               	movlw	low STR_26
 11798  002798  6E0D               	movwf	i2printf@f,c
 11799  00279A  0EFE               	movlw	high STR_26
 11800  00279C  6E0E               	movwf	i2printf@f+1,c
 11801  00279E  ECC0  F004         	call	i2_printf	;wreg free
 11802                           
 11803                           ;UI.c: 467: lcdInst(0b11000000);;
 11804  0027A2  0EC0               	movlw	192
 11805  0027A4  EC35  F015         	call	i2_lcdInst
 11806                           
 11807                           ;UI.c: 468: printf("LOG 2          <");
 11808  0027A8  0E20               	movlw	low STR_27
 11809  0027AA  6E0D               	movwf	i2printf@f,c
 11810  0027AC  0EFF               	movlw	high STR_27
 11811  0027AE  6E0E               	movwf	i2printf@f+1,c
 11812  0027B0  ECC0  F004         	call	i2_printf	;wreg free
 11813  0027B4  0012               	return		;funcret
 11814  0027B6                     __end_of_change_state_to_logs_12:
 11815                           	opt stack 0
 11816                           pclatu	equ	0xFFB
 11817                           pclath	equ	0xFFA
 11818                           tblptru	equ	0xFF8
 11819                           tblptrh	equ	0xFF7
 11820                           tblptrl	equ	0xFF6
 11821                           tablat	equ	0xFF5
 11822                           prodh	equ	0xFF4
 11823                           prodl	equ	0xFF3
 11824                           intcon	equ	0xFF2
 11825                           intcon2	equ	0xFF1
 11826                           intcon3	equ	0xFF0
 11827                           indf0	equ	0xFEF
 11828                           postinc0	equ	0xFEE
 11829                           fsr0h	equ	0xFEA
 11830                           fsr0l	equ	0xFE9
 11831                           wreg	equ	0xFE8
 11832                           postdec1	equ	0xFE5
 11833                           fsr1h	equ	0xFE2
 11834                           fsr1l	equ	0xFE1
 11835                           indf2	equ	0xFDF
 11836                           postinc2	equ	0xFDE
 11837                           postdec2	equ	0xFDD
 11838                           fsr2h	equ	0xFDA
 11839                           fsr2l	equ	0xFD9
 11840                           status	equ	0xFD8
 11841                           
 11842 ;; *************** function _change_state_to_logs_11 *****************
 11843 ;; Defined at:
 11844 ;;		line 456 in file "UI.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;		None
 11847 ;; Auto vars:     Size  Location     Type
 11848 ;;		None
 11849 ;; Return value:  Size  Location     Type
 11850 ;;                  1    wreg      void 
 11851 ;; Registers used:
 11852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11853 ;; Tracked objects:
 11854 ;;		On entry : 0/0
 11855 ;;		On exit  : 0/0
 11856 ;;		Unchanged: 0/0
 11857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11862 ;;Total ram usage:        0 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:    3
 11865 ;; This function calls:
 11866 ;;		i2_lcdInst
 11867 ;;		i2_printf
 11868 ;; This function is called by:
 11869 ;;		_updateMenu
 11870 ;;		_inputHandler
 11871 ;; This function uses a non-reentrant model
 11872 ;;
 11873                           
 11874                           	psect	text59
 11875  0027B6                     __ptext59:
 11876                           	opt stack 0
 11877  0027B6                     _change_state_to_logs_11:
 11878                           	opt stack 18
 11879                           
 11880                           ;UI.c: 457: cur_state = 1011;
 11881                           
 11882                           ;incstack = 0
 11883  0027B6  0E03               	movlw	3
 11884  0027B8  0100               	movlb	0	; () banked
 11885  0027BA  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11886  0027BC  0EF3               	movlw	243
 11887  0027BE  6FDF               	movwf	_cur_state& (0+255),b
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;UI.c: 458: lcdInst(0b10000000);;
 11891  0027C0  0E80               	movlw	128
 11892  0027C2  EC35  F015         	call	i2_lcdInst
 11893                           
 11894                           ;UI.c: 459: printf("LOG 1          <");
 11895  0027C6  0E0F               	movlw	low STR_24
 11896  0027C8  6E0D               	movwf	i2printf@f,c
 11897  0027CA  0EFF               	movlw	high STR_24
 11898  0027CC  6E0E               	movwf	i2printf@f+1,c
 11899  0027CE  ECC0  F004         	call	i2_printf	;wreg free
 11900                           
 11901                           ;UI.c: 460: lcdInst(0b11000000);;
 11902  0027D2  0EC0               	movlw	192
 11903  0027D4  EC35  F015         	call	i2_lcdInst
 11904                           
 11905                           ;UI.c: 461: printf("LOG 2           ");
 11906  0027D8  0E32               	movlw	low STR_25
 11907  0027DA  6E0D               	movwf	i2printf@f,c
 11908  0027DC  0EFE               	movlw	high STR_25
 11909  0027DE  6E0E               	movwf	i2printf@f+1,c
 11910  0027E0  ECC0  F004         	call	i2_printf	;wreg free
 11911  0027E4  0012               	return		;funcret
 11912  0027E6                     __end_of_change_state_to_logs_11:
 11913                           	opt stack 0
 11914                           pclatu	equ	0xFFB
 11915                           pclath	equ	0xFFA
 11916                           tblptru	equ	0xFF8
 11917                           tblptrh	equ	0xFF7
 11918                           tblptrl	equ	0xFF6
 11919                           tablat	equ	0xFF5
 11920                           prodh	equ	0xFF4
 11921                           prodl	equ	0xFF3
 11922                           intcon	equ	0xFF2
 11923                           intcon2	equ	0xFF1
 11924                           intcon3	equ	0xFF0
 11925                           indf0	equ	0xFEF
 11926                           postinc0	equ	0xFEE
 11927                           fsr0h	equ	0xFEA
 11928                           fsr0l	equ	0xFE9
 11929                           wreg	equ	0xFE8
 11930                           postdec1	equ	0xFE5
 11931                           fsr1h	equ	0xFE2
 11932                           fsr1l	equ	0xFE1
 11933                           indf2	equ	0xFDF
 11934                           postinc2	equ	0xFDE
 11935                           postdec2	equ	0xFDD
 11936                           fsr2h	equ	0xFDA
 11937                           fsr2l	equ	0xFD9
 11938                           status	equ	0xFD8
 11939                           
 11940 ;; *************** function _dispLogs *****************
 11941 ;; Defined at:
 11942 ;;		line 410 in file "UI.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  myLog           2    0[COMRAM] int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;		None
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  1    wreg      void 
 11949 ;; Registers used:
 11950 ;;		wreg, status,2
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11960 ;;Total ram usage:        2 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_updateMenu
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           	psect	text60
 11970  002A06                     __ptext60:
 11971                           	opt stack 0
 11972  002A06                     _dispLogs:
 11973                           	opt stack 22
 11974                           
 11975                           ;UI.c: 411: logstate = 1;
 11976                           
 11977                           ;incstack = 0
 11978  002A06  0E00               	movlw	0
 11979  002A08  0100               	movlb	0	; () banked
 11980  002A0A  6FEE               	movwf	(_logstate+1)& (0+255),b
 11981  002A0C  0E01               	movlw	1
 11982  002A0E  6FED               	movwf	_logstate& (0+255),b
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;UI.c: 412: log = myLog;
 11986  002A10  C001  F0EB         	movff	dispLogs@myLog,_log
 11987  002A14  C002  F0EC         	movff	dispLogs@myLog+1,_log+1
 11988                           
 11989                           ; BSR set to: 0
 11990  002A18  0012               	return		;funcret
 11991  002A1A                     __end_of_dispLogs:
 11992                           	opt stack 0
 11993                           pclatu	equ	0xFFB
 11994                           pclath	equ	0xFFA
 11995                           tblptru	equ	0xFF8
 11996                           tblptrh	equ	0xFF7
 11997                           tblptrl	equ	0xFF6
 11998                           tablat	equ	0xFF5
 11999                           prodh	equ	0xFF4
 12000                           prodl	equ	0xFF3
 12001                           intcon	equ	0xFF2
 12002                           intcon2	equ	0xFF1
 12003                           intcon3	equ	0xFF0
 12004                           indf0	equ	0xFEF
 12005                           postinc0	equ	0xFEE
 12006                           fsr0h	equ	0xFEA
 12007                           fsr0l	equ	0xFE9
 12008                           wreg	equ	0xFE8
 12009                           postdec1	equ	0xFE5
 12010                           fsr1h	equ	0xFE2
 12011                           fsr1l	equ	0xFE1
 12012                           indf2	equ	0xFDF
 12013                           postinc2	equ	0xFDE
 12014                           postdec2	equ	0xFDD
 12015                           fsr2h	equ	0xFDA
 12016                           fsr2l	equ	0xFD9
 12017                           status	equ	0xFD8
 12018                           
 12019 ;; *************** function _printSortTimer *****************
 12020 ;; Defined at:
 12021 ;;		line 139 in file "sort.c"
 12022 ;; Parameters:    Size  Location     Type
 12023 ;;		None
 12024 ;; Auto vars:     Size  Location     Type
 12025 ;;  i               2   72[COMRAM] int 
 12026 ;;  curTime        14   44[COMRAM] int [7]
 12027 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12028 ;;  sec             2   66[COMRAM] int 
 12029 ;;  min             2   64[COMRAM] int 
 12030 ;;  hour            2   62[COMRAM] int 
 12031 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12032 ;;  start_sec       2   58[COMRAM] unsigned int 
 12033 ;; Return value:  Size  Location     Type
 12034 ;;                  1    wreg      void 
 12035 ;; Registers used:
 12036 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;Total ram usage:       33 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; Hardware stack levels required when called:    3
 12049 ;; This function calls:
 12050 ;;		i2___lwdiv
 12051 ;;		i2___lwmod
 12052 ;;		i2___wmul
 12053 ;;		i2_getRTC
 12054 ;;		i2_lcdInst
 12055 ;;		i2_printf
 12056 ;; This function is called by:
 12057 ;;		_handler
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           	psect	text61
 12062  001486                     __ptext61:
 12063                           	opt stack 0
 12064  001486                     _printSortTimer:
 12065                           	opt stack 20
 12066                           
 12067                           ;sort.c: 140: getRTC();
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;incstack = 0
 12071  001486  EC37  F010         	call	i2_getRTC	;wreg free
 12072                           
 12073                           ;sort.c: 141: int curTime[7];
 12074                           ;sort.c: 142: for(int i = 0; i < 7; i++){
 12075  00148A  0E00               	movlw	0
 12076  00148C  6E4A               	movwf	printSortTimer@i+1,c
 12077  00148E  0E00               	movlw	0
 12078  001490  6E49               	movwf	printSortTimer@i,c
 12079  001492                     i2l5801:
 12080  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 12081  001494  D006               	goto	i2l5805
 12082  001496  504A               	movf	printSortTimer@i+1,w,c
 12083  001498  E131               	bnz	i2l5811
 12084  00149A  0E07               	movlw	7
 12085  00149C  5C49               	subwf	printSortTimer@i,w,c
 12086  00149E  B0D8               	btfsc	status,0,c
 12087  0014A0  D02D               	goto	i2l5811
 12088  0014A2                     i2l5805:
 12089                           
 12090                           ;sort.c: 143: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12091  0014A2  0ED4               	movlw	low _time
 12092  0014A4  2449               	addwf	printSortTimer@i,w,c
 12093  0014A6  6ED9               	movwf	fsr2l,c
 12094  0014A8  0E00               	movlw	high _time
 12095  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 12096  0014AC  6EDA               	movwf	fsr2h,c
 12097  0014AE  50DF               	movf	indf2,w,c
 12098  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 12099  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 12100  0014B4  0E0F               	movlw	15
 12101  0014B6  162A               	andwf	??_printSortTimer,f,c
 12102  0014B8  0E0F               	movlw	15
 12103  0014BA  162A               	andwf	??_printSortTimer,f,c
 12104  0014BC  502A               	movf	??_printSortTimer,w,c
 12105  0014BE  0D0A               	mullw	10
 12106  0014C0  0ED4               	movlw	low _time
 12107  0014C2  2449               	addwf	printSortTimer@i,w,c
 12108  0014C4  6ED9               	movwf	fsr2l,c
 12109  0014C6  0E00               	movlw	high _time
 12110  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 12111  0014CA  6EDA               	movwf	fsr2h,c
 12112  0014CC  50DF               	movf	indf2,w,c
 12113  0014CE  0B0F               	andlw	15
 12114  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12115  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12116  0014D4  50F3               	movf	prodl,w,c
 12117  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 12118  0014D8  50F4               	movf	prodh,w,c
 12119  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 12120  0014DC  90D8               	bcf	status,0,c
 12121  0014DE  3449               	rlcf	printSortTimer@i,w,c
 12122  0014E0  6ED9               	movwf	fsr2l,c
 12123  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 12124  0014E4  6EDA               	movwf	fsr2h,c
 12125  0014E6  0E2D               	movlw	low printSortTimer@curTime
 12126  0014E8  26D9               	addwf	fsr2l,f,c
 12127  0014EA  0E00               	movlw	high printSortTimer@curTime
 12128  0014EC  22DA               	addwfc	fsr2h,f,c
 12129  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12130  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12131  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 12132  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 12133  0014FA  D7CB               	goto	i2l5801
 12134  0014FC                     i2l5811:
 12135                           
 12136                           ;sort.c: 144: }
 12137                           ;sort.c: 145: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12138  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12139  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12140  001504  0E00               	movlw	0
 12141  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 12142  001508  0E3C               	movlw	60
 12143  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 12144  00150C  EC8A  F014         	call	i2___wmul	;wreg free
 12145  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12146  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12147  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12148  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12149  001520  0E0E               	movlw	14
 12150  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 12151  001524  0E10               	movlw	16
 12152  001526  6E03               	movwf	i2___wmul@multiplicand,c
 12153  001528  EC8A  F014         	call	i2___wmul	;wreg free
 12154  00152C  5001               	movf	?i2___wmul,w,c
 12155  00152E  262A               	addwf	??_printSortTimer,f,c
 12156  001530  5002               	movf	?i2___wmul+1,w,c
 12157  001532  222B               	addwfc	??_printSortTimer+1,f,c
 12158  001534  0101               	movlb	1	; () banked
 12159  001536  5100               	movf	_startTime& (0+255),w,b
 12160  001538  242A               	addwf	??_printSortTimer,w,c
 12161  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 12162  00153C  0101               	movlb	1	; () banked
 12163  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 12164  001540  202B               	addwfc	??_printSortTimer+1,w,c
 12165  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 12166                           
 12167                           ;sort.c: 146: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12168  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12169  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12170  00154C  0E00               	movlw	0
 12171  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 12172  001550  0E3C               	movlw	60
 12173  001552  6E03               	movwf	i2___wmul@multiplicand,c
 12174  001554  EC8A  F014         	call	i2___wmul	;wreg free
 12175  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12176  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12177  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12178  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12179  001568  0E0E               	movlw	14
 12180  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12181  00156C  0E10               	movlw	16
 12182  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 12183  001570  EC8A  F014         	call	i2___wmul	;wreg free
 12184  001574  5001               	movf	?i2___wmul,w,c
 12185  001576  262A               	addwf	??_printSortTimer,f,c
 12186  001578  5002               	movf	?i2___wmul+1,w,c
 12187  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 12188  00157C  502D               	movf	printSortTimer@curTime,w,c
 12189  00157E  242A               	addwf	??_printSortTimer,w,c
 12190  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 12191  001582  502E               	movf	printSortTimer@curTime+1,w,c
 12192  001584  202B               	addwfc	??_printSortTimer+1,w,c
 12193  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12194                           
 12195                           ;sort.c: 147: unsigned int timeDiff = cur_sec - start_sec;
 12196  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12197  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12198  001590  1E2A               	comf	??_printSortTimer,f,c
 12199  001592  1E2B               	comf	??_printSortTimer+1,f,c
 12200  001594  4A2A               	infsnz	??_printSortTimer,f,c
 12201  001596  2A2B               	incf	??_printSortTimer+1,f,c
 12202  001598  503D               	movf	printSortTimer@cur_sec,w,c
 12203  00159A  242A               	addwf	??_printSortTimer,w,c
 12204  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 12205  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 12206  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 12207  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 12208                           
 12209                           ;sort.c: 149: total_time = timeDiff;
 12210  0015A4  C047  F0EF         	movff	printSortTimer@timeDiff,_total_time
 12211  0015A8  C048  F0F0         	movff	printSortTimer@timeDiff+1,_total_time+1
 12212                           
 12213                           ;sort.c: 151: if(timeDiff >= 10){
 12214  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 12215  0015AE  E104               	bnz	i2u457_40
 12216  0015B0  0E0A               	movlw	10
 12217  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 12218  0015B4  A0D8               	btfss	status,0,c
 12219  0015B6  D003               	goto	i2l5821
 12220  0015B8                     i2u457_40:
 12221                           
 12222                           ;sort.c: 152: machine_state = DoneSorting_state;
 12223  0015B8  0E02               	movlw	2
 12224  0015BA  0100               	movlb	0	; () banked
 12225  0015BC  6FF2               	movwf	_machine_state& (0+255),b
 12226  0015BE                     i2l5821:
 12227                           
 12228                           ;sort.c: 154: }
 12229                           ;sort.c: 156: int hour = timeDiff / 3600;
 12230  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12231  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12232  0015C6  0E0E               	movlw	14
 12233  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12234  0015CA  0E10               	movlw	16
 12235  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 12236  0015CE  ECBB  F011         	call	i2___lwdiv	;wreg free
 12237  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12238  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12239                           
 12240                           ;sort.c: 157: int min = (timeDiff % 3600) / 60;
 12241  0015DA  0E0E               	movlw	14
 12242  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 12243  0015DE  0E10               	movlw	16
 12244  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 12245  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12246  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12247  0015EA  EC07  F012         	call	i2___lwmod	;wreg free
 12248  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12249  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12250  0015F6  0E00               	movlw	0
 12251  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12252  0015FA  0E3C               	movlw	60
 12253  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 12254  0015FE  ECBB  F011         	call	i2___lwdiv	;wreg free
 12255  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12256  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12257                           
 12258                           ;sort.c: 158: int sec = (timeDiff % 3600) % 60;
 12259  00160A  0E0E               	movlw	14
 12260  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 12261  00160E  0E10               	movlw	16
 12262  001610  6E03               	movwf	i2___lwmod@divisor,c
 12263  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12264  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12265  00161A  EC07  F012         	call	i2___lwmod	;wreg free
 12266  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2253
 12267  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2253+1
 12268                           
 12269                           ;sort.c: 158: int sec = (timeDiff % 3600) % 60;
 12270  001626  C045  F001         	movff	_printSortTimer$2253,i2___lwmod@dividend
 12271  00162A  C046  F002         	movff	_printSortTimer$2253+1,i2___lwmod@dividend+1
 12272  00162E  0E00               	movlw	0
 12273  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 12274  001632  0E3C               	movlw	60
 12275  001634  6E03               	movwf	i2___lwmod@divisor,c
 12276  001636  EC07  F012         	call	i2___lwmod	;wreg free
 12277  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12278  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12279                           
 12280                           ;sort.c: 160: lcdInst(0b10000000);;
 12281  001642  0E80               	movlw	128
 12282  001644  EC35  F015         	call	i2_lcdInst
 12283                           
 12284                           ;sort.c: 161: printf("Sorting...");
 12285  001648  0EA8               	movlw	low STR_49
 12286  00164A  6E0D               	movwf	i2printf@f,c
 12287  00164C  0EFF               	movlw	high STR_49
 12288  00164E  6E0E               	movwf	i2printf@f+1,c
 12289  001650  ECC0  F004         	call	i2_printf	;wreg free
 12290                           
 12291                           ;sort.c: 162: lcdInst(0b11000000);;
 12292  001654  0EC0               	movlw	192
 12293  001656  EC35  F015         	call	i2_lcdInst
 12294                           
 12295                           ;sort.c: 163: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12296  00165A  0EE8               	movlw	low STR_2
 12297  00165C  6E0D               	movwf	i2printf@f,c
 12298  00165E  0EFD               	movlw	high STR_2
 12299  001660  6E0E               	movwf	i2printf@f+1,c
 12300  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12301  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12302  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12303  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12304  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12305  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12306  00167A  ECC0  F004         	call	i2_printf	;wreg free
 12307  00167E  0012               	return		;funcret
 12308  001680                     __end_of_printSortTimer:
 12309                           	opt stack 0
 12310                           pclatu	equ	0xFFB
 12311                           pclath	equ	0xFFA
 12312                           tblptru	equ	0xFF8
 12313                           tblptrh	equ	0xFF7
 12314                           tblptrl	equ	0xFF6
 12315                           tablat	equ	0xFF5
 12316                           prodh	equ	0xFF4
 12317                           prodl	equ	0xFF3
 12318                           intcon	equ	0xFF2
 12319                           intcon2	equ	0xFF1
 12320                           intcon3	equ	0xFF0
 12321                           indf0	equ	0xFEF
 12322                           postinc0	equ	0xFEE
 12323                           fsr0h	equ	0xFEA
 12324                           fsr0l	equ	0xFE9
 12325                           wreg	equ	0xFE8
 12326                           postdec1	equ	0xFE5
 12327                           fsr1h	equ	0xFE2
 12328                           fsr1l	equ	0xFE1
 12329                           indf2	equ	0xFDF
 12330                           postinc2	equ	0xFDE
 12331                           postdec2	equ	0xFDD
 12332                           fsr2h	equ	0xFDA
 12333                           fsr2l	equ	0xFD9
 12334                           status	equ	0xFD8
 12335                           
 12336 ;; *************** function i2_printf *****************
 12337 ;; Defined at:
 12338 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12341 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12342 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12343 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12344 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12345 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12346 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12347 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12348 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12349 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12350 ;;		 -> STR_2(21), STR_1(17), 
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;  printf          4    0        struct .
 12353 ;;  printf          2   39[COMRAM] int 
 12354 ;;  printf          2   35[COMRAM] unsigned int 
 12355 ;;  printf          2   33[COMRAM] unsigned int 
 12356 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12357 ;;		 -> STR_51(7), printRTC@month(4), 
 12358 ;;  printf          2   29[COMRAM] PTR void [1]
 12359 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12360 ;;  printf          1   38[COMRAM] char 
 12361 ;;  printf          1   37[COMRAM] unsigned char 
 12362 ;;  printf          1   28[COMRAM] char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  2   12[COMRAM] int 
 12365 ;; Registers used:
 12366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:       29 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    2
 12379 ;; This function calls:
 12380 ;;		i2___lwdiv
 12381 ;;		i2___lwmod
 12382 ;;		i2___wmul
 12383 ;;		i2_isdigit
 12384 ;;		i2_putch
 12385 ;; This function is called by:
 12386 ;;		_change_state_to_menu_11
 12387 ;;		_change_state_to_menu_23
 12388 ;;		_change_state_to_logs_11
 12389 ;;		_change_state_to_logs_12
 12390 ;;		_change_state_to_logs_22
 12391 ;;		_change_state_to_logs_23
 12392 ;;		_change_state_to_logs_33
 12393 ;;		_change_state_to_logs_34
 12394 ;;		_printSortTimer
 12395 ;;		i2_change_state_to_menu_start
 12396 ;;		i2_change_state_to_menu_12
 12397 ;;		i2_change_state_to_menu_22
 12398 ;;		i2_printRTC
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           	psect	text62
 12403  000980                     __ptext62:
 12404                           	opt stack 0
 12405  000980                     i2_printf:
 12406                           	opt stack 19
 12407                           
 12408                           ;doprnt.c: 466: va_list ap;
 12409                           ;doprnt.c: 499: signed char c;
 12410                           ;doprnt.c: 501: int width;
 12411                           ;doprnt.c: 506: signed char prec;
 12412                           ;doprnt.c: 508: unsigned char flag;
 12413                           ;doprnt.c: 523: union {
 12414                           ;doprnt.c: 524: unsigned long vd;
 12415                           ;doprnt.c: 525: double integ;
 12416                           ;doprnt.c: 526: } tmpval;
 12417                           ;doprnt.c: 528: unsigned int val;
 12418                           ;doprnt.c: 529: unsigned len;
 12419                           ;doprnt.c: 530: const char * cp;
 12420                           ;doprnt.c: 533: *ap = __va_start();
 12421                           
 12422                           ;incstack = 0
 12423  000980  0E0F               	movlw	low (?i2_printf+2)
 12424  000982  6E1E               	movwf	i2printf@ap,c
 12425  000984  0E00               	movlw	high (?i2_printf+2)
 12426  000986  6E1F               	movwf	i2printf@ap+1,c
 12427                           
 12428                           ;doprnt.c: 536: while(c = *f++) {
 12429  000988  D190               	goto	i2l4613
 12430  00098A                     i2l4489:
 12431                           
 12432                           ;doprnt.c: 538: if(c != '%')
 12433  00098A  0E25               	movlw	37
 12434  00098C  1827               	xorwf	i2printf@c,w,c
 12435  00098E  B4D8               	btfsc	status,2,c
 12436  000990  D004               	goto	i2l4493
 12437                           
 12438                           ;doprnt.c: 540: {
 12439                           ;doprnt.c: 541: (putch(c) );
 12440  000992  5027               	movf	i2printf@c,w,c
 12441  000994  EC2F  F015         	call	i2_putch
 12442                           
 12443                           ;doprnt.c: 542: continue;
 12444  000998  D188               	goto	i2l4613
 12445  00099A                     i2l4493:
 12446                           
 12447                           ;doprnt.c: 543: }
 12448                           ;doprnt.c: 546: width = 0;
 12449  00099A  0E00               	movlw	0
 12450  00099C  6E29               	movwf	i2printf@width+1,c
 12451  00099E  0E00               	movlw	0
 12452  0009A0  6E28               	movwf	i2printf@width,c
 12453                           
 12454                           ;doprnt.c: 548: flag = 0;
 12455  0009A2  0E00               	movlw	0
 12456  0009A4  6E26               	movwf	i2printf@flag,c
 12457                           
 12458                           ;doprnt.c: 551: switch(*f) {
 12459                           
 12460                           ;doprnt.c: 550: for(;;) {
 12461  0009A6  D003               	goto	i2l4499
 12462  0009A8                     i2l4495:
 12463                           
 12464                           ;doprnt.c: 580: flag |= 0x04;
 12465  0009A8  8426               	bsf	i2printf@flag,2,c
 12466                           
 12467                           ;doprnt.c: 581: f++;
 12468  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12469  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12470  0009AE                     i2l4499:
 12471  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12472  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12473  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12474  0009B6  6AF8               	clrf	tblptru,c
 12475  0009B8                     	endif
 12476  0009B8                     	if	0	;tblptru may be non-zero
 12477  0009B8                     	endif
 12478  0009B8  0008               	tblrd		*
 12479  0009BA  50F5               	movf	tablat,w,c
 12480                           
 12481                           ; Switch size 1, requested type "space"
 12482                           ; Number of cases is 1, Range of values is 48 to 48
 12483                           ; switch strategies available:
 12484                           ; Name         Instructions Cycles
 12485                           ; simple_byte            4     3 (average)
 12486                           ;	Chosen strategy is simple_byte
 12487  0009BC  0A30               	xorlw	48	; case 48
 12488  0009BE  B4D8               	btfsc	status,2,c
 12489  0009C0  D7F3               	goto	i2l4495
 12490                           
 12491                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12492                           
 12493                           ;doprnt.c: 586: }
 12494                           
 12495                           ;doprnt.c: 585: break;
 12496  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12497  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12498  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12499  0009CA  6AF8               	clrf	tblptru,c
 12500  0009CC                     	endif
 12501  0009CC                     	if	0	;tblptru may be non-zero
 12502  0009CC                     	endif
 12503  0009CC  0008               	tblrd		*
 12504  0009CE  50F5               	movf	tablat,w,c
 12505  0009D0  ECD2  F014         	call	i2_isdigit
 12506  0009D4  A0D8               	btfss	status,0,c
 12507  0009D6  D0A4               	goto	i2l4545
 12508                           
 12509                           ;doprnt.c: 598: width = 0;
 12510  0009D8  0E00               	movlw	0
 12511  0009DA  6E29               	movwf	i2printf@width+1,c
 12512  0009DC  0E00               	movlw	0
 12513  0009DE  6E28               	movwf	i2printf@width,c
 12514  0009E0                     i2l4505:
 12515                           
 12516                           ;doprnt.c: 600: width *= 10;
 12517  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12518  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12519  0009E8  0E00               	movlw	0
 12520  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12521  0009EC  0E0A               	movlw	10
 12522  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12523  0009F0  EC8A  F014         	call	i2___wmul	;wreg free
 12524  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12525  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12526                           
 12527                           ;doprnt.c: 601: width += *f++ - '0';
 12528  0009FC  0ED0               	movlw	208
 12529  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12530  000A00  0EFF               	movlw	255
 12531  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12532  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12533  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12534  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12535  000A0C  6AF8               	clrf	tblptru,c
 12536  000A0E                     	endif
 12537  000A0E                     	if	0	;tblptru may be non-zero
 12538  000A0E                     	endif
 12539  000A0E  0008               	tblrd		*
 12540  000A10  50F5               	movf	tablat,w,c
 12541  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12542  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12543  000A16  5019               	movf	??i2_printf,w,c
 12544  000A18  261B               	addwf	??i2_printf+2,f,c
 12545  000A1A  501A               	movf	??i2_printf+1,w,c
 12546  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12547  000A1E  501B               	movf	??i2_printf+2,w,c
 12548  000A20  2628               	addwf	i2printf@width,f,c
 12549  000A22  501C               	movf	??i2_printf+3,w,c
 12550  000A24  2229               	addwfc	i2printf@width+1,f,c
 12551  000A26  4A0D               	infsnz	i2printf@f,f,c
 12552  000A28  2A0E               	incf	i2printf@f+1,f,c
 12553                           
 12554                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12555  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12556  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12557  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12558  000A32  6AF8               	clrf	tblptru,c
 12559  000A34                     	endif
 12560  000A34                     	if	0	;tblptru may be non-zero
 12561  000A34                     	endif
 12562  000A34  0008               	tblrd		*
 12563  000A36  50F5               	movf	tablat,w,c
 12564  000A38  ECD2  F014         	call	i2_isdigit
 12565  000A3C  A0D8               	btfss	status,0,c
 12566  000A3E  D070               	goto	i2l4545
 12567  000A40  D7CF               	goto	i2l4505
 12568  000A42                     i2l4513:
 12569                           
 12570                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12571  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12572  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12573  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12574  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12575  000A52  0E02               	movlw	2
 12576  000A54  261E               	addwf	i2printf@ap,f,c
 12577  000A56  0E00               	movlw	0
 12578  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12579                           
 12580                           ;doprnt.c: 740: if(!cp)
 12581  000A5A  5020               	movf	i2printf@cp,w,c
 12582  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12583  000A5E  A4D8               	btfss	status,2,c
 12584  000A60  D004               	goto	i2l4521
 12585                           
 12586                           ;doprnt.c: 741: cp = "(null)";
 12587  000A62  0EBD               	movlw	low STR_51
 12588  000A64  6E20               	movwf	i2printf@cp,c
 12589  000A66  0EFF               	movlw	high STR_51
 12590  000A68  6E21               	movwf	i2printf@cp+1,c
 12591  000A6A                     i2l4521:
 12592                           
 12593                           ;doprnt.c: 745: len = 0;
 12594  000A6A  0E00               	movlw	0
 12595  000A6C  6E25               	movwf	i2printf@len+1,c
 12596  000A6E  0E00               	movlw	0
 12597  000A70  6E24               	movwf	i2printf@len,c
 12598                           
 12599                           ;doprnt.c: 746: while(cp[len])
 12600  000A72  D002               	goto	i2l4525
 12601  000A74                     i2l4523:
 12602                           
 12603                           ;doprnt.c: 747: len++;
 12604  000A74  4A24               	infsnz	i2printf@len,f,c
 12605  000A76  2A25               	incf	i2printf@len+1,f,c
 12606  000A78                     i2l4525:
 12607  000A78  5024               	movf	i2printf@len,w,c
 12608  000A7A  2420               	addwf	i2printf@cp,w,c
 12609  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12610  000A7E  5025               	movf	i2printf@len+1,w,c
 12611  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12612  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12613  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12614  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12615  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12616  000A8E  6EF8               	movwf	tblptru,c
 12617  000A90  0E0F               	movlw	(high __ramtop+-1)
 12618  000A92  64F7               	cpfsgt	tblptrh,c
 12619  000A94  D003               	bra	i2u299_47
 12620  000A96  0008               	tblrd		*
 12621  000A98  50F5               	movf	tablat,w,c
 12622  000A9A  D005               	bra	i2u299_40
 12623  000A9C                     i2u299_47:
 12624  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12625  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12626  000AA4  50EF               	movf	indf0,w,c
 12627  000AA6                     i2u299_40:
 12628  000AA6  0900               	iorlw	0
 12629  000AA8  A4D8               	btfss	status,2,c
 12630  000AAA  D7E4               	goto	i2l4523
 12631                           
 12632                           ;doprnt.c: 757: if(width > len)
 12633  000AAC  5028               	movf	i2printf@width,w,c
 12634  000AAE  5C24               	subwf	i2printf@len,w,c
 12635  000AB0  5029               	movf	i2printf@width+1,w,c
 12636  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12637  000AB4  B0D8               	btfsc	status,0,c
 12638  000AB6  D005               	goto	i2l4531
 12639                           
 12640                           ;doprnt.c: 758: width -= len;
 12641  000AB8  5024               	movf	i2printf@len,w,c
 12642  000ABA  5E28               	subwf	i2printf@width,f,c
 12643  000ABC  5025               	movf	i2printf@len+1,w,c
 12644  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12645  000AC0  D008               	goto	i2l4535
 12646  000AC2                     i2l4531:
 12647                           
 12648                           ;doprnt.c: 759: else
 12649                           ;doprnt.c: 760: width = 0;
 12650  000AC2  0E00               	movlw	0
 12651  000AC4  6E29               	movwf	i2printf@width+1,c
 12652  000AC6  0E00               	movlw	0
 12653  000AC8  6E28               	movwf	i2printf@width,c
 12654                           
 12655                           ;doprnt.c: 764: while(width--)
 12656  000ACA  D003               	goto	i2l4535
 12657  000ACC                     i2l4533:
 12658                           
 12659                           ;doprnt.c: 765: (putch(' ') );
 12660  000ACC  0E20               	movlw	32
 12661  000ACE  EC2F  F015         	call	i2_putch
 12662  000AD2                     i2l4535:
 12663  000AD2  0628               	decf	i2printf@width,f,c
 12664  000AD4  A0D8               	btfss	status,0,c
 12665  000AD6  0629               	decf	i2printf@width+1,f,c
 12666  000AD8  2828               	incf	i2printf@width,w,c
 12667  000ADA  E1F8               	bnz	i2l4533
 12668  000ADC  2829               	incf	i2printf@width+1,w,c
 12669  000ADE  B4D8               	btfsc	status,2,c
 12670  000AE0  D016               	goto	i2l4541
 12671  000AE2  D7F4               	goto	i2l4533
 12672  000AE4                     i2l4537:
 12673                           
 12674                           ;doprnt.c: 768: (putch(*cp++) );
 12675  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12676  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12677  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12678  000AEE  6EF8               	movwf	tblptru,c
 12679  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12680  000AF2  64F7               	cpfsgt	tblptrh,c
 12681  000AF4  D003               	bra	i2u303_47
 12682  000AF6  0008               	tblrd		*
 12683  000AF8  50F5               	movf	tablat,w,c
 12684  000AFA  D005               	bra	i2u303_40
 12685  000AFC                     i2u303_47:
 12686  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12687  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12688  000B04  50EF               	movf	indf0,w,c
 12689  000B06                     i2u303_40:
 12690  000B06  EC2F  F015         	call	i2_putch
 12691  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12692  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12693  000B0E                     i2l4541:
 12694  000B0E  0624               	decf	i2printf@len,f,c
 12695  000B10  A0D8               	btfss	status,0,c
 12696  000B12  0625               	decf	i2printf@len+1,f,c
 12697  000B14  2824               	incf	i2printf@len,w,c
 12698  000B16  E1E6               	bnz	i2l4537
 12699  000B18  2825               	incf	i2printf@len+1,w,c
 12700  000B1A  B4D8               	btfsc	status,2,c
 12701  000B1C  D0C6               	goto	i2l4613
 12702  000B1E  D7E2               	goto	i2l4537
 12703  000B20                     i2l4545:
 12704  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12705  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12706  000B28  4A0D               	infsnz	i2printf@f,f,c
 12707  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12708  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12709  000B2C  6AF8               	clrf	tblptru,c
 12710  000B2E                     	endif
 12711  000B2E                     	if	0	;tblptru may be non-zero
 12712  000B2E                     	endif
 12713  000B2E  0008               	tblrd		*
 12714  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12715  000B34  5027               	movf	i2printf@c,w,c
 12716                           
 12717                           ; Switch size 1, requested type "space"
 12718                           ; Number of cases is 4, Range of values is 0 to 115
 12719                           ; switch strategies available:
 12720                           ; Name         Instructions Cycles
 12721                           ; simple_byte           13     7 (average)
 12722                           ;	Chosen strategy is simple_byte
 12723  000B36  0A00               	xorlw	0	; case 0
 12724  000B38  B4D8               	btfsc	status,2,c
 12725  000B3A  0012               	return	
 12726  000B3C  0A64               	xorlw	100	; case 100
 12727  000B3E  B4D8               	btfsc	status,2,c
 12728  000B40  D007               	goto	i2l4547
 12729  000B42  0A0D               	xorlw	13	; case 105
 12730  000B44  B4D8               	btfsc	status,2,c
 12731  000B46  D004               	goto	i2l4547
 12732  000B48  0A1A               	xorlw	26	; case 115
 12733  000B4A  B4D8               	btfsc	status,2,c
 12734  000B4C  D77A               	goto	i2l4513
 12735  000B4E  D0AD               	goto	i2l4613
 12736  000B50                     i2l4547:
 12737                           
 12738                           ;doprnt.c: 1253: {
 12739                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12740  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12741  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12742  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12743  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12744  000B60  0E02               	movlw	2
 12745  000B62  261E               	addwf	i2printf@ap,f,c
 12746  000B64  0E00               	movlw	0
 12747  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12748                           
 12749                           ;doprnt.c: 1261: if((int)val < 0) {
 12750  000B68  AE23               	btfss	i2printf@val+1,7,c
 12751  000B6A  D006               	goto	i2l4557
 12752                           
 12753                           ;doprnt.c: 1262: flag |= 0x03;
 12754  000B6C  0E03               	movlw	3
 12755  000B6E  1226               	iorwf	i2printf@flag,f,c
 12756                           
 12757                           ;doprnt.c: 1263: val = -val;
 12758  000B70  6C22               	negf	i2printf@val,c
 12759  000B72  1E23               	comf	i2printf@val+1,f,c
 12760  000B74  B0D8               	btfsc	status,0,c
 12761  000B76  2A23               	incf	i2printf@val+1,f,c
 12762  000B78                     i2l4557:
 12763                           
 12764                           ;doprnt.c: 1264: }
 12765                           ;doprnt.c: 1266: }
 12766                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12767  000B78  0E01               	movlw	1
 12768  000B7A  6E27               	movwf	i2printf@c,c
 12769  000B7C                     i2l4559:
 12770  000B7C  0E05               	movlw	5
 12771  000B7E  1827               	xorwf	i2printf@c,w,c
 12772  000B80  B4D8               	btfsc	status,2,c
 12773  000B82  D015               	goto	i2l4571
 12774                           
 12775                           ;doprnt.c: 1306: if(val < dpowers[c])
 12776  000B84  5027               	movf	i2printf@c,w,c
 12777  000B86  0D02               	mullw	2
 12778  000B88  0EC6               	movlw	low _dpowers
 12779  000B8A  24F3               	addwf	prodl,w,c
 12780  000B8C  6EF6               	movwf	tblptrl,c
 12781  000B8E  0EFD               	movlw	high _dpowers
 12782  000B90  20F4               	addwfc	prodh,w,c
 12783  000B92  6EF7               	movwf	tblptrh,c
 12784  000B94                     	if	1	;There are 3 active tblptr bytes
 12785  000B94  6AF8               	clrf	tblptru,c
 12786  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12787  000B98  22F8               	addwfc	tblptru,f,c
 12788  000B9A                     	endif
 12789  000B9A  0009               	tblrd		*+
 12790  000B9C  50F5               	movf	tablat,w,c
 12791  000B9E  5C22               	subwf	i2printf@val,w,c
 12792  000BA0  0009               	tblrd		*+
 12793  000BA2  50F5               	movf	tablat,w,c
 12794  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12795  000BA6  A0D8               	btfss	status,0,c
 12796  000BA8  D002               	goto	i2l4571
 12797                           
 12798                           ;doprnt.c: 1307: break;
 12799  000BAA  2A27               	incf	i2printf@c,f,c
 12800  000BAC  D7E7               	goto	i2l4559
 12801  000BAE                     i2l4571:
 12802                           
 12803                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12804  000BAE  5028               	movf	i2printf@width,w,c
 12805  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12806  000BB2  B4D8               	btfsc	status,2,c
 12807  000BB4  D009               	goto	i2l4577
 12808  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12809  000BBA  0E03               	movlw	3
 12810  000BBC  1619               	andwf	??i2_printf,f,c
 12811  000BBE  B4D8               	btfsc	status,2,c
 12812  000BC0  D003               	goto	i2l4577
 12813                           
 12814                           ;doprnt.c: 1346: width--;
 12815  000BC2  0628               	decf	i2printf@width,f,c
 12816  000BC4  A0D8               	btfss	status,0,c
 12817  000BC6  0629               	decf	i2printf@width+1,f,c
 12818  000BC8                     i2l4577:
 12819                           
 12820                           ;doprnt.c: 1381: if(width > c)
 12821  000BC8  0E80               	movlw	128
 12822  000BCA  BE27               	btfsc	i2printf@c,7,c
 12823  000BCC  0E7F               	movlw	127
 12824  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12825  000BD0  5028               	movf	i2printf@width,w,c
 12826  000BD2  5C27               	subwf	i2printf@c,w,c
 12827  000BD4  5029               	movf	i2printf@width+1,w,c
 12828  000BD6  0A80               	xorlw	128
 12829  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12830  000BDA  B0D8               	btfsc	status,0,c
 12831  000BDC  D007               	goto	i2l4581
 12832                           
 12833                           ;doprnt.c: 1382: width -= c;
 12834  000BDE  5027               	movf	i2printf@c,w,c
 12835  000BE0  5E28               	subwf	i2printf@width,f,c
 12836  000BE2  0E00               	movlw	0
 12837  000BE4  BE27               	btfsc	i2printf@c,7,c
 12838  000BE6  0EFF               	movlw	255
 12839  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12840  000BEA  D004               	goto	i2l4583
 12841  000BEC                     i2l4581:
 12842                           
 12843                           ;doprnt.c: 1383: else
 12844                           ;doprnt.c: 1384: width = 0;
 12845  000BEC  0E00               	movlw	0
 12846  000BEE  6E29               	movwf	i2printf@width+1,c
 12847  000BF0  0E00               	movlw	0
 12848  000BF2  6E28               	movwf	i2printf@width,c
 12849  000BF4                     i2l4583:
 12850                           
 12851                           ;doprnt.c: 1387: if(flag & 0x04) {
 12852  000BF4  A426               	btfss	i2printf@flag,2,c
 12853  000BF6  D014               	goto	i2l4595
 12854                           
 12855                           ;doprnt.c: 1392: if(flag & 0x03)
 12856  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12857  000BFC  0E03               	movlw	3
 12858  000BFE  1619               	andwf	??i2_printf,f,c
 12859  000C00  B4D8               	btfsc	status,2,c
 12860  000C02  D003               	goto	i2l4589
 12861                           
 12862                           ;doprnt.c: 1393: (putch('-') );
 12863  000C04  0E2D               	movlw	45
 12864  000C06  EC2F  F015         	call	i2_putch
 12865  000C0A                     i2l4589:
 12866                           
 12867                           ;doprnt.c: 1415: if(width)
 12868  000C0A  5028               	movf	i2printf@width,w,c
 12869  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12870  000C0E  B4D8               	btfsc	status,2,c
 12871  000C10  D01E               	goto	i2l4605
 12872                           
 12873                           ;doprnt.c: 1417: (putch('0') );
 12874                           
 12875                           ;doprnt.c: 1416: do
 12876  000C12  0E30               	movlw	48
 12877  000C14  EC2F  F015         	call	i2_putch
 12878                           
 12879                           ;doprnt.c: 1418: while(--width);
 12880  000C18  0628               	decf	i2printf@width,f,c
 12881  000C1A  A0D8               	btfss	status,0,c
 12882  000C1C  0629               	decf	i2printf@width+1,f,c
 12883  000C1E  D7F5               	goto	i2l4589
 12884  000C20                     i2l4595:
 12885                           
 12886                           ;doprnt.c: 1422: {
 12887                           ;doprnt.c: 1424: if(width
 12888                           ;doprnt.c: 1428: )
 12889  000C20  5028               	movf	i2printf@width,w,c
 12890  000C22  1029               	iorwf	i2printf@width+1,w,c
 12891  000C24  B4D8               	btfsc	status,2,c
 12892  000C26  D00A               	goto	i2l4601
 12893  000C28                     i2l4597:
 12894                           
 12895                           ;doprnt.c: 1430: (putch(' ') );
 12896  000C28  0E20               	movlw	32
 12897  000C2A  EC2F  F015         	call	i2_putch
 12898                           
 12899                           ;doprnt.c: 1431: while(--width);
 12900  000C2E  0628               	decf	i2printf@width,f,c
 12901  000C30  A0D8               	btfss	status,0,c
 12902  000C32  0629               	decf	i2printf@width+1,f,c
 12903  000C34  5028               	movf	i2printf@width,w,c
 12904  000C36  1029               	iorwf	i2printf@width+1,w,c
 12905  000C38  A4D8               	btfss	status,2,c
 12906  000C3A  D7F6               	goto	i2l4597
 12907  000C3C                     i2l4601:
 12908                           
 12909                           ;doprnt.c: 1438: if(flag & 0x03)
 12910  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12911  000C40  0E03               	movlw	3
 12912  000C42  1619               	andwf	??i2_printf,f,c
 12913  000C44  B4D8               	btfsc	status,2,c
 12914  000C46  D003               	goto	i2l4605
 12915                           
 12916                           ;doprnt.c: 1439: (putch('-') );
 12917  000C48  0E2D               	movlw	45
 12918  000C4A  EC2F  F015         	call	i2_putch
 12919  000C4E                     i2l4605:
 12920                           
 12921                           ;doprnt.c: 1469: }
 12922                           ;doprnt.c: 1472: prec = c;
 12923  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12924                           
 12925                           ;doprnt.c: 1474: while(prec--) {
 12926  000C52  D027               	goto	i2l4611
 12927  000C54                     i2l4607:
 12928                           
 12929                           ;doprnt.c: 1478: {
 12930                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12931  000C54  501D               	movf	i2printf@prec,w,c
 12932  000C56  0D02               	mullw	2
 12933  000C58  0EC6               	movlw	low _dpowers
 12934  000C5A  24F3               	addwf	prodl,w,c
 12935  000C5C  6EF6               	movwf	tblptrl,c
 12936  000C5E  0EFD               	movlw	high _dpowers
 12937  000C60  20F4               	addwfc	prodh,w,c
 12938  000C62  6EF7               	movwf	tblptrh,c
 12939  000C64                     	if	1	;There are 3 active tblptr bytes
 12940  000C64  6AF8               	clrf	tblptru,c
 12941  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12942  000C68  22F8               	addwfc	tblptru,f,c
 12943  000C6A                     	endif
 12944  000C6A  0009               	tblrd		*+
 12945  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12946  000C70  000A               	tblrd		*-
 12947  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12948  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12949  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12950  000C7E  ECBB  F011         	call	i2___lwdiv	;wreg free
 12951  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12952  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12953  000C8A  0E00               	movlw	0
 12954  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12955  000C8E  0E0A               	movlw	10
 12956  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12957  000C92  EC07  F012         	call	i2___lwmod	;wreg free
 12958  000C96  5001               	movf	?i2___lwmod,w,c
 12959  000C98  0F30               	addlw	48
 12960  000C9A  6E27               	movwf	i2printf@c,c
 12961                           
 12962                           ;doprnt.c: 1523: }
 12963                           ;doprnt.c: 1524: (putch(c) );
 12964  000C9C  5027               	movf	i2printf@c,w,c
 12965  000C9E  EC2F  F015         	call	i2_putch
 12966  000CA2                     i2l4611:
 12967  000CA2  061D               	decf	i2printf@prec,f,c
 12968  000CA4  281D               	incf	i2printf@prec,w,c
 12969  000CA6  A4D8               	btfss	status,2,c
 12970  000CA8  D7D5               	goto	i2l4607
 12971  000CAA                     i2l4613:
 12972  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12973  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12974  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12975  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12976  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12977  000CB6  6AF8               	clrf	tblptru,c
 12978  000CB8                     	endif
 12979  000CB8                     	if	0	;tblptru may be non-zero
 12980  000CB8                     	endif
 12981  000CB8  0008               	tblrd		*
 12982  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12983  000CBE  5027               	movf	i2printf@c,w,c
 12984  000CC0  B4D8               	btfsc	status,2,c
 12985  000CC2  0012               	return	
 12986  000CC4  D662               	goto	i2l4489
 12987  000CC6                     __end_ofi2_printf:
 12988                           	opt stack 0
 12989                           pclatu	equ	0xFFB
 12990                           pclath	equ	0xFFA
 12991                           tblptru	equ	0xFF8
 12992                           tblptrh	equ	0xFF7
 12993                           tblptrl	equ	0xFF6
 12994                           tablat	equ	0xFF5
 12995                           prodh	equ	0xFF4
 12996                           prodl	equ	0xFF3
 12997                           intcon	equ	0xFF2
 12998                           intcon2	equ	0xFF1
 12999                           intcon3	equ	0xFF0
 13000                           indf0	equ	0xFEF
 13001                           postinc0	equ	0xFEE
 13002                           fsr0h	equ	0xFEA
 13003                           fsr0l	equ	0xFE9
 13004                           wreg	equ	0xFE8
 13005                           postdec1	equ	0xFE5
 13006                           fsr1h	equ	0xFE2
 13007                           fsr1l	equ	0xFE1
 13008                           indf2	equ	0xFDF
 13009                           postinc2	equ	0xFDE
 13010                           postdec2	equ	0xFDD
 13011                           fsr2h	equ	0xFDA
 13012                           fsr2l	equ	0xFD9
 13013                           status	equ	0xFD8
 13014                           
 13015 ;; *************** function i2_putch *****************
 13016 ;; Defined at:
 13017 ;;		line 19 in file "lcd.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;  data            1    wreg     unsigned char 
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  data            1    2[COMRAM] unsigned char 
 13022 ;; Return value:  Size  Location     Type
 13023 ;;                  1    wreg      void 
 13024 ;; Registers used:
 13025 ;;		wreg, status,2, status,0, cstack
 13026 ;; Tracked objects:
 13027 ;;		On entry : 0/0
 13028 ;;		On exit  : 0/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13035 ;;Total ram usage:        1 bytes
 13036 ;; Hardware stack levels used:    1
 13037 ;; Hardware stack levels required when called:    1
 13038 ;; This function calls:
 13039 ;;		i2_lcdNibble
 13040 ;; This function is called by:
 13041 ;;		i2_printf
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           	psect	text63
 13046  002A5E                     __ptext63:
 13047                           	opt stack 0
 13048  002A5E                     i2_putch:
 13049                           	opt stack 19
 13050                           
 13051                           ;incstack = 0
 13052                           ;i2putch@data stored from wreg
 13053  002A5E  6E03               	movwf	i2putch@data,c
 13054                           
 13055                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13056  002A60  848C               	bsf	3980,2,c	;volatile
 13057                           
 13058                           ;lcd.c: 21: lcdNibble(data);
 13059  002A62  5003               	movf	i2putch@data,w,c
 13060  002A64  EC90  F011         	call	i2_lcdNibble
 13061  002A68  0012               	return		;funcret
 13062  002A6A                     __end_ofi2_putch:
 13063                           	opt stack 0
 13064                           pclatu	equ	0xFFB
 13065                           pclath	equ	0xFFA
 13066                           tblptru	equ	0xFF8
 13067                           tblptrh	equ	0xFF7
 13068                           tblptrl	equ	0xFF6
 13069                           tablat	equ	0xFF5
 13070                           prodh	equ	0xFF4
 13071                           prodl	equ	0xFF3
 13072                           intcon	equ	0xFF2
 13073                           intcon2	equ	0xFF1
 13074                           intcon3	equ	0xFF0
 13075                           indf0	equ	0xFEF
 13076                           postinc0	equ	0xFEE
 13077                           fsr0h	equ	0xFEA
 13078                           fsr0l	equ	0xFE9
 13079                           wreg	equ	0xFE8
 13080                           postdec1	equ	0xFE5
 13081                           fsr1h	equ	0xFE2
 13082                           fsr1l	equ	0xFE1
 13083                           indf2	equ	0xFDF
 13084                           postinc2	equ	0xFDE
 13085                           postdec2	equ	0xFDD
 13086                           fsr2h	equ	0xFDA
 13087                           fsr2l	equ	0xFD9
 13088                           status	equ	0xFD8
 13089                           
 13090 ;; *************** function i2_isdigit *****************
 13091 ;; Defined at:
 13092 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13093 ;; Parameters:    Size  Location     Type
 13094 ;;  c               1    wreg     unsigned char 
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;  c               1    2[COMRAM] unsigned char 
 13097 ;; Return value:  Size  Location     Type
 13098 ;;		None               void
 13099 ;; Registers used:
 13100 ;;		wreg, status,2, status,0
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;Total ram usage:        3 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		i2_printf
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text64
 13120  0029A4                     __ptext64:
 13121                           	opt stack 0
 13122  0029A4                     i2_isdigit:
 13123                           	opt stack 20
 13124                           
 13125                           ;incstack = 0
 13126                           ;i2isdigit@c stored from wreg
 13127  0029A4  6E03               	movwf	i2isdigit@c,c
 13128  0029A6  0E00               	movlw	0
 13129  0029A8  6E02               	movwf	i2_isdigit$1774,c
 13130  0029AA  0E3A               	movlw	58
 13131  0029AC  6003               	cpfslt	i2isdigit@c,c
 13132  0029AE  D005               	goto	i2l4231
 13133  0029B0  0E2F               	movlw	47
 13134  0029B2  6403               	cpfsgt	i2isdigit@c,c
 13135  0029B4  D002               	goto	i2l4231
 13136  0029B6  0E01               	movlw	1
 13137  0029B8  6E02               	movwf	i2_isdigit$1774,c
 13138  0029BA                     i2l4231:
 13139  0029BA  C002  F001         	movff	i2_isdigit$1774,??i2_isdigit
 13140  0029BE  3001               	rrcf	??i2_isdigit,w,c
 13141  0029C0  0012               	return	
 13142  0029C2                     __end_ofi2_isdigit:
 13143                           	opt stack 0
 13144                           pclatu	equ	0xFFB
 13145                           pclath	equ	0xFFA
 13146                           tblptru	equ	0xFF8
 13147                           tblptrh	equ	0xFF7
 13148                           tblptrl	equ	0xFF6
 13149                           tablat	equ	0xFF5
 13150                           prodh	equ	0xFF4
 13151                           prodl	equ	0xFF3
 13152                           intcon	equ	0xFF2
 13153                           intcon2	equ	0xFF1
 13154                           intcon3	equ	0xFF0
 13155                           indf0	equ	0xFEF
 13156                           postinc0	equ	0xFEE
 13157                           fsr0h	equ	0xFEA
 13158                           fsr0l	equ	0xFE9
 13159                           wreg	equ	0xFE8
 13160                           postdec1	equ	0xFE5
 13161                           fsr1h	equ	0xFE2
 13162                           fsr1l	equ	0xFE1
 13163                           indf2	equ	0xFDF
 13164                           postinc2	equ	0xFDE
 13165                           postdec2	equ	0xFDD
 13166                           fsr2h	equ	0xFDA
 13167                           fsr2l	equ	0xFD9
 13168                           status	equ	0xFD8
 13169                           
 13170 ;; *************** function i2___wmul *****************
 13171 ;; Defined at:
 13172 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;  multiplier      2    0[COMRAM] unsigned int 
 13175 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  __wmul          2    4[COMRAM] unsigned int 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  2    0[COMRAM] unsigned int 
 13180 ;; Registers used:
 13181 ;;		wreg, status,2, status,0, prodl, prodh
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;Total ram usage:        6 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_printSortTimer
 13197 ;;		i2_printf
 13198 ;; This function uses a non-reentrant model
 13199 ;;
 13200                           
 13201                           	psect	text65
 13202  002914                     __ptext65:
 13203                           	opt stack 0
 13204  002914                     i2___wmul:
 13205                           	opt stack 20
 13206                           
 13207                           ;incstack = 0
 13208  002914  5001               	movf	i2___wmul@multiplier,w,c
 13209  002916  0203               	mulwf	i2___wmul@multiplicand,c
 13210  002918  CFF3 F005          	movff	prodl,i2___wmul@product
 13211  00291C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13212  002920  5001               	movf	i2___wmul@multiplier,w,c
 13213  002922  0204               	mulwf	i2___wmul@multiplicand+1,c
 13214  002924  50F3               	movf	prodl,w,c
 13215  002926  2606               	addwf	i2___wmul@product+1,f,c
 13216  002928  5002               	movf	i2___wmul@multiplier+1,w,c
 13217  00292A  0203               	mulwf	i2___wmul@multiplicand,c
 13218  00292C  50F3               	movf	prodl,w,c
 13219  00292E  2606               	addwf	i2___wmul@product+1,f,c
 13220  002930  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13221  002934  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13222  002938  0012               	return	
 13223  00293A                     __end_ofi2___wmul:
 13224                           	opt stack 0
 13225                           pclatu	equ	0xFFB
 13226                           pclath	equ	0xFFA
 13227                           tblptru	equ	0xFF8
 13228                           tblptrh	equ	0xFF7
 13229                           tblptrl	equ	0xFF6
 13230                           tablat	equ	0xFF5
 13231                           prodh	equ	0xFF4
 13232                           prodl	equ	0xFF3
 13233                           intcon	equ	0xFF2
 13234                           intcon2	equ	0xFF1
 13235                           intcon3	equ	0xFF0
 13236                           indf0	equ	0xFEF
 13237                           postinc0	equ	0xFEE
 13238                           fsr0h	equ	0xFEA
 13239                           fsr0l	equ	0xFE9
 13240                           wreg	equ	0xFE8
 13241                           postdec1	equ	0xFE5
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function i2___lwmod *****************
 13252 ;; Defined at:
 13253 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  dividend        2    0[COMRAM] unsigned int 
 13256 ;;  divisor         2    2[COMRAM] unsigned int 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  2    0[COMRAM] unsigned int 
 13261 ;; Registers used:
 13262 ;;		wreg, status,2, status,0
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;Total ram usage:        5 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_printSortTimer
 13278 ;;		i2_printf
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           	psect	text66
 13283  00240E                     __ptext66:
 13284                           	opt stack 0
 13285  00240E                     i2___lwmod:
 13286                           	opt stack 20
 13287                           
 13288                           ;incstack = 0
 13289  00240E  5003               	movf	i2___lwmod@divisor,w,c
 13290  002410  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13291  002412  B4D8               	btfsc	status,2,c
 13292  002414  D018               	goto	i2l1814
 13293  002416  0E01               	movlw	1
 13294  002418  6E05               	movwf	i2___lwmod@counter,c
 13295  00241A  D004               	goto	i2l4263
 13296  00241C                     i2l4261:
 13297  00241C  90D8               	bcf	status,0,c
 13298  00241E  3603               	rlcf	i2___lwmod@divisor,f,c
 13299  002420  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13300  002422  2A05               	incf	i2___lwmod@counter,f,c
 13301  002424                     i2l4263:
 13302  002424  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13303  002426  D7FA               	goto	i2l4261
 13304  002428                     i2l4265:
 13305  002428  5003               	movf	i2___lwmod@divisor,w,c
 13306  00242A  5C01               	subwf	i2___lwmod@dividend,w,c
 13307  00242C  5004               	movf	i2___lwmod@divisor+1,w,c
 13308  00242E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13309  002430  A0D8               	btfss	status,0,c
 13310  002432  D004               	goto	i2l4269
 13311  002434  5003               	movf	i2___lwmod@divisor,w,c
 13312  002436  5E01               	subwf	i2___lwmod@dividend,f,c
 13313  002438  5004               	movf	i2___lwmod@divisor+1,w,c
 13314  00243A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13315  00243C                     i2l4269:
 13316  00243C  90D8               	bcf	status,0,c
 13317  00243E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13318  002440  3203               	rrcf	i2___lwmod@divisor,f,c
 13319  002442  2E05               	decfsz	i2___lwmod@counter,f,c
 13320  002444  D7F1               	goto	i2l4265
 13321  002446                     i2l1814:
 13322  002446  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13323  00244A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13324  00244E  0012               	return		;funcret
 13325  002450                     __end_ofi2___lwmod:
 13326                           	opt stack 0
 13327                           pclatu	equ	0xFFB
 13328                           pclath	equ	0xFFA
 13329                           tblptru	equ	0xFF8
 13330                           tblptrh	equ	0xFF7
 13331                           tblptrl	equ	0xFF6
 13332                           tablat	equ	0xFF5
 13333                           prodh	equ	0xFF4
 13334                           prodl	equ	0xFF3
 13335                           intcon	equ	0xFF2
 13336                           intcon2	equ	0xFF1
 13337                           intcon3	equ	0xFF0
 13338                           indf0	equ	0xFEF
 13339                           postinc0	equ	0xFEE
 13340                           fsr0h	equ	0xFEA
 13341                           fsr0l	equ	0xFE9
 13342                           wreg	equ	0xFE8
 13343                           postdec1	equ	0xFE5
 13344                           fsr1h	equ	0xFE2
 13345                           fsr1l	equ	0xFE1
 13346                           indf2	equ	0xFDF
 13347                           postinc2	equ	0xFDE
 13348                           postdec2	equ	0xFDD
 13349                           fsr2h	equ	0xFDA
 13350                           fsr2l	equ	0xFD9
 13351                           status	equ	0xFD8
 13352                           
 13353 ;; *************** function i2___lwdiv *****************
 13354 ;; Defined at:
 13355 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;  dividend        2    5[COMRAM] unsigned int 
 13358 ;;  divisor         2    7[COMRAM] unsigned int 
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13361 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13362 ;; Return value:  Size  Location     Type
 13363 ;;                  2    5[COMRAM] unsigned int 
 13364 ;; Registers used:
 13365 ;;		wreg, status,2, status,0
 13366 ;; Tracked objects:
 13367 ;;		On entry : 0/0
 13368 ;;		On exit  : 0/0
 13369 ;;		Unchanged: 0/0
 13370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13371 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13374 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13375 ;;Total ram usage:        7 bytes
 13376 ;; Hardware stack levels used:    1
 13377 ;; This function calls:
 13378 ;;		Nothing
 13379 ;; This function is called by:
 13380 ;;		_printSortTimer
 13381 ;;		i2_printf
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           	psect	text67
 13386  002376                     __ptext67:
 13387                           	opt stack 0
 13388  002376                     i2___lwdiv:
 13389                           	opt stack 20
 13390                           
 13391                           ;incstack = 0
 13392  002376  0E00               	movlw	0
 13393  002378  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13394  00237A  0E00               	movlw	0
 13395  00237C  6E0A               	movwf	i2___lwdiv@quotient,c
 13396  00237E  5008               	movf	i2___lwdiv@divisor,w,c
 13397  002380  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13398  002382  B4D8               	btfsc	status,2,c
 13399  002384  D01C               	goto	i2l1804
 13400  002386  0E01               	movlw	1
 13401  002388  6E0C               	movwf	i2___lwdiv@counter,c
 13402  00238A  D004               	goto	i2l4243
 13403  00238C                     i2l4241:
 13404  00238C  90D8               	bcf	status,0,c
 13405  00238E  3608               	rlcf	i2___lwdiv@divisor,f,c
 13406  002390  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13407  002392  2A0C               	incf	i2___lwdiv@counter,f,c
 13408  002394                     i2l4243:
 13409  002394  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13410  002396  D7FA               	goto	i2l4241
 13411  002398                     i2l4245:
 13412  002398  90D8               	bcf	status,0,c
 13413  00239A  360A               	rlcf	i2___lwdiv@quotient,f,c
 13414  00239C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13415  00239E  5008               	movf	i2___lwdiv@divisor,w,c
 13416  0023A0  5C06               	subwf	i2___lwdiv@dividend,w,c
 13417  0023A2  5009               	movf	i2___lwdiv@divisor+1,w,c
 13418  0023A4  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13419  0023A6  A0D8               	btfss	status,0,c
 13420  0023A8  D005               	goto	i2l4253
 13421  0023AA  5008               	movf	i2___lwdiv@divisor,w,c
 13422  0023AC  5E06               	subwf	i2___lwdiv@dividend,f,c
 13423  0023AE  5009               	movf	i2___lwdiv@divisor+1,w,c
 13424  0023B0  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13425  0023B2  800A               	bsf	i2___lwdiv@quotient,0,c
 13426  0023B4                     i2l4253:
 13427  0023B4  90D8               	bcf	status,0,c
 13428  0023B6  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13429  0023B8  3208               	rrcf	i2___lwdiv@divisor,f,c
 13430  0023BA  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13431  0023BC  D7ED               	goto	i2l4245
 13432  0023BE                     i2l1804:
 13433  0023BE  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13434  0023C2  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13435  0023C6  0012               	return		;funcret
 13436  0023C8                     __end_ofi2___lwdiv:
 13437                           	opt stack 0
 13438                           pclatu	equ	0xFFB
 13439                           pclath	equ	0xFFA
 13440                           tblptru	equ	0xFF8
 13441                           tblptrh	equ	0xFF7
 13442                           tblptrl	equ	0xFF6
 13443                           tablat	equ	0xFF5
 13444                           prodh	equ	0xFF4
 13445                           prodl	equ	0xFF3
 13446                           intcon	equ	0xFF2
 13447                           intcon2	equ	0xFF1
 13448                           intcon3	equ	0xFF0
 13449                           indf0	equ	0xFEF
 13450                           postinc0	equ	0xFEE
 13451                           fsr0h	equ	0xFEA
 13452                           fsr0l	equ	0xFE9
 13453                           wreg	equ	0xFE8
 13454                           postdec1	equ	0xFE5
 13455                           fsr1h	equ	0xFE2
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function i2_lcdInst *****************
 13465 ;; Defined at:
 13466 ;;		line 14 in file "lcd.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  data            1    wreg     unsigned char 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  data            1    2[COMRAM] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      void 
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0, cstack
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;Total ram usage:        1 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    1
 13487 ;; This function calls:
 13488 ;;		i2_lcdNibble
 13489 ;; This function is called by:
 13490 ;;		_change_state_to_menu_11
 13491 ;;		_change_state_to_menu_23
 13492 ;;		_change_state_to_logs_11
 13493 ;;		_change_state_to_logs_12
 13494 ;;		_change_state_to_logs_22
 13495 ;;		_change_state_to_logs_23
 13496 ;;		_change_state_to_logs_33
 13497 ;;		_change_state_to_logs_34
 13498 ;;		_printSortTimer
 13499 ;;		i2_change_state_to_menu_start
 13500 ;;		i2_change_state_to_menu_12
 13501 ;;		i2_change_state_to_menu_22
 13502 ;;		i2_printRTC
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text68
 13507  002A6A                     __ptext68:
 13508                           	opt stack 0
 13509  002A6A                     i2_lcdInst:
 13510                           	opt stack 19
 13511                           
 13512                           ;incstack = 0
 13513                           ;i2lcdInst@data stored from wreg
 13514  002A6A  6E03               	movwf	i2lcdInst@data,c
 13515                           
 13516                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13517  002A6C  948C               	bcf	3980,2,c	;volatile
 13518                           
 13519                           ;lcd.c: 16: lcdNibble(data);
 13520  002A6E  5003               	movf	i2lcdInst@data,w,c
 13521  002A70  EC90  F011         	call	i2_lcdNibble
 13522  002A74  0012               	return		;funcret
 13523  002A76                     __end_ofi2_lcdInst:
 13524                           	opt stack 0
 13525                           pclatu	equ	0xFFB
 13526                           pclath	equ	0xFFA
 13527                           tblptru	equ	0xFF8
 13528                           tblptrh	equ	0xFF7
 13529                           tblptrl	equ	0xFF6
 13530                           tablat	equ	0xFF5
 13531                           prodh	equ	0xFF4
 13532                           prodl	equ	0xFF3
 13533                           intcon	equ	0xFF2
 13534                           intcon2	equ	0xFF1
 13535                           intcon3	equ	0xFF0
 13536                           indf0	equ	0xFEF
 13537                           postinc0	equ	0xFEE
 13538                           fsr0h	equ	0xFEA
 13539                           fsr0l	equ	0xFE9
 13540                           wreg	equ	0xFE8
 13541                           postdec1	equ	0xFE5
 13542                           fsr1h	equ	0xFE2
 13543                           fsr1l	equ	0xFE1
 13544                           indf2	equ	0xFDF
 13545                           postinc2	equ	0xFDE
 13546                           postdec2	equ	0xFDD
 13547                           fsr2h	equ	0xFDA
 13548                           fsr2l	equ	0xFD9
 13549                           status	equ	0xFD8
 13550                           
 13551 ;; *************** function i2_lcdNibble *****************
 13552 ;; Defined at:
 13553 ;;		line 24 in file "lcd.c"
 13554 ;; Parameters:    Size  Location     Type
 13555 ;;  data            1    wreg     unsigned char 
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;  data            1    1[COMRAM] unsigned char 
 13558 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13559 ;; Return value:  Size  Location     Type
 13560 ;;                  1    wreg      void 
 13561 ;; Registers used:
 13562 ;;		wreg, status,2, status,0
 13563 ;; Tracked objects:
 13564 ;;		On entry : 0/0
 13565 ;;		On exit  : 0/0
 13566 ;;		Unchanged: 0/0
 13567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13572 ;;Total ram usage:        2 bytes
 13573 ;; Hardware stack levels used:    1
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		i2_lcdInst
 13578 ;;		i2_putch
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           	psect	text69
 13583  002320                     __ptext69:
 13584                           	opt stack 0
 13585  002320                     i2_lcdNibble:
 13586                           	opt stack 19
 13587                           
 13588                           ;incstack = 0
 13589                           ;i2lcdNibble@data stored from wreg
 13590  002320  6E02               	movwf	i2lcdNibble@data,c
 13591                           
 13592                           ;lcd.c: 26: char temp = data & 0xF0;
 13593  002322  5002               	movf	i2lcdNibble@data,w,c
 13594  002324  0BF0               	andlw	240
 13595  002326  6E01               	movwf	i2lcdNibble@temp,c
 13596                           
 13597                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13598  002328  508C               	movf	3980,w,c	;volatile
 13599  00232A  0B0F               	andlw	15
 13600  00232C  6E8C               	movwf	3980,c	;volatile
 13601                           
 13602                           ;lcd.c: 28: LATD = temp | LATD;
 13603  00232E  5001               	movf	i2lcdNibble@temp,w,c
 13604  002330  108C               	iorwf	3980,w,c	;volatile
 13605  002332  6E8C               	movwf	3980,c	;volatile
 13606                           
 13607                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13608  002334  868C               	bsf	3980,3,c	;volatile
 13609                           
 13610                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13611  002336  0E42               	movlw	66
 13612  002338                     i2u502_47:
 13613  002338  2EE8               	decfsz	wreg,f,c
 13614  00233A  D7FE               	bra	i2u502_47
 13615  00233C  D000               	nop2	
 13616                           
 13617                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13618  00233E  968C               	bcf	3980,3,c	;volatile
 13619                           
 13620                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13621  002340  0E42               	movlw	66
 13622  002342                     i2u503_47:
 13623  002342  2EE8               	decfsz	wreg,f,c
 13624  002344  D7FE               	bra	i2u503_47
 13625  002346  D000               	nop2	
 13626                           
 13627                           ;lcd.c: 35: data = data << 4;
 13628  002348  3802               	swapf	i2lcdNibble@data,w,c
 13629  00234A  0BF0               	andlw	240
 13630  00234C  6E02               	movwf	i2lcdNibble@data,c
 13631                           
 13632                           ;lcd.c: 37: temp = data & 0xF0;
 13633  00234E  5002               	movf	i2lcdNibble@data,w,c
 13634  002350  0BF0               	andlw	240
 13635  002352  6E01               	movwf	i2lcdNibble@temp,c
 13636                           
 13637                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13638  002354  508C               	movf	3980,w,c	;volatile
 13639  002356  0B0F               	andlw	15
 13640  002358  6E8C               	movwf	3980,c	;volatile
 13641                           
 13642                           ;lcd.c: 39: LATD = temp | LATD;
 13643  00235A  5001               	movf	i2lcdNibble@temp,w,c
 13644  00235C  108C               	iorwf	3980,w,c	;volatile
 13645  00235E  6E8C               	movwf	3980,c	;volatile
 13646                           
 13647                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13648  002360  868C               	bsf	3980,3,c	;volatile
 13649                           
 13650                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13651  002362  0E42               	movlw	66
 13652  002364                     i2u504_47:
 13653  002364  2EE8               	decfsz	wreg,f,c
 13654  002366  D7FE               	bra	i2u504_47
 13655  002368  D000               	nop2	
 13656                           
 13657                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13658  00236A  968C               	bcf	3980,3,c	;volatile
 13659                           
 13660                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13661  00236C  0E42               	movlw	66
 13662  00236E                     i2u505_47:
 13663  00236E  2EE8               	decfsz	wreg,f,c
 13664  002370  D7FE               	bra	i2u505_47
 13665  002372  D000               	nop2	
 13666  002374  0012               	return		;funcret
 13667  002376                     __end_ofi2_lcdNibble:
 13668                           	opt stack 0
 13669                           pclatu	equ	0xFFB
 13670                           pclath	equ	0xFFA
 13671                           tblptru	equ	0xFF8
 13672                           tblptrh	equ	0xFF7
 13673                           tblptrl	equ	0xFF6
 13674                           tablat	equ	0xFF5
 13675                           prodh	equ	0xFF4
 13676                           prodl	equ	0xFF3
 13677                           intcon	equ	0xFF2
 13678                           intcon2	equ	0xFF1
 13679                           intcon3	equ	0xFF0
 13680                           indf0	equ	0xFEF
 13681                           postinc0	equ	0xFEE
 13682                           fsr0h	equ	0xFEA
 13683                           fsr0l	equ	0xFE9
 13684                           wreg	equ	0xFE8
 13685                           postdec1	equ	0xFE5
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function i2_getRTC *****************
 13696 ;; Defined at:
 13697 ;;		line 43 in file "RTC.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;		None
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  getRTC          2    3[COMRAM] int 
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  1    wreg      void 
 13704 ;; Registers used:
 13705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;Total ram usage:        2 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:    2
 13718 ;; This function calls:
 13719 ;;		i2_I2C_Master_Read
 13720 ;;		i2_I2C_Master_Start
 13721 ;;		i2_I2C_Master_Stop
 13722 ;;		i2_I2C_Master_Write
 13723 ;; This function is called by:
 13724 ;;		_printSortTimer
 13725 ;;		i2_printRTC
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           	psect	text70
 13730  00206E                     __ptext70:
 13731                           	opt stack 0
 13732  00206E                     i2_getRTC:
 13733                           	opt stack 18
 13734                           
 13735                           ;RTC.c: 47: I2C_Master_Start();
 13736                           
 13737                           ;incstack = 0
 13738  00206E  EC56  F015         	call	i2_I2C_Master_Start	;wreg free
 13739                           
 13740                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13741  002072  0E00               	movlw	0
 13742  002074  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13743  002076  0ED0               	movlw	208
 13744  002078  6E02               	movwf	i2I2C_Master_Write@d,c
 13745  00207A  EC45  F015         	call	i2_I2C_Master_Write	;wreg free
 13746                           
 13747                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13748  00207E  0E00               	movlw	0
 13749  002080  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13750  002082  0E00               	movlw	0
 13751  002084  6E02               	movwf	i2I2C_Master_Write@d,c
 13752  002086  EC45  F015         	call	i2_I2C_Master_Write	;wreg free
 13753                           
 13754                           ;RTC.c: 50: I2C_Master_Stop();
 13755  00208A  EC52  F015         	call	i2_I2C_Master_Stop	;wreg free
 13756                           
 13757                           ;RTC.c: 53: I2C_Master_Start();
 13758  00208E  EC56  F015         	call	i2_I2C_Master_Start	;wreg free
 13759                           
 13760                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13761  002092  0E00               	movlw	0
 13762  002094  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13763  002096  0ED1               	movlw	209
 13764  002098  6E02               	movwf	i2I2C_Master_Write@d,c
 13765  00209A  EC45  F015         	call	i2_I2C_Master_Write	;wreg free
 13766                           
 13767                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13768  00209E  0E00               	movlw	0
 13769  0020A0  6E05               	movwf	i2getRTC@i+1,c
 13770  0020A2  0E00               	movlw	0
 13771  0020A4  6E04               	movwf	i2getRTC@i,c
 13772  0020A6                     i2l4475:
 13773  0020A6  BE05               	btfsc	i2getRTC@i+1,7,c
 13774  0020A8  D006               	goto	i2l4479
 13775  0020AA  5005               	movf	i2getRTC@i+1,w,c
 13776  0020AC  E111               	bnz	i2l4485
 13777  0020AE  0E06               	movlw	6
 13778  0020B0  5C04               	subwf	i2getRTC@i,w,c
 13779  0020B2  B0D8               	btfsc	status,0,c
 13780  0020B4  D00D               	goto	i2l4485
 13781  0020B6                     i2l4479:
 13782                           
 13783                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13784  0020B6  0ED4               	movlw	low _time
 13785  0020B8  2404               	addwf	i2getRTC@i,w,c
 13786  0020BA  6ED9               	movwf	fsr2l,c
 13787  0020BC  0E00               	movlw	high _time
 13788  0020BE  2005               	addwfc	i2getRTC@i+1,w,c
 13789  0020C0  6EDA               	movwf	fsr2h,c
 13790  0020C2  0E01               	movlw	1
 13791  0020C4  EC9D  F014         	call	i2_I2C_Master_Read
 13792  0020C8  6EDF               	movwf	indf2,c
 13793  0020CA  4A04               	infsnz	i2getRTC@i,f,c
 13794  0020CC  2A05               	incf	i2getRTC@i+1,f,c
 13795  0020CE  D7EB               	goto	i2l4475
 13796  0020D0                     i2l4485:
 13797                           
 13798                           ;RTC.c: 57: }
 13799                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13800  0020D0  0E00               	movlw	0
 13801  0020D2  EC9D  F014         	call	i2_I2C_Master_Read
 13802  0020D6  0100               	movlb	0	; () banked
 13803  0020D8  6FDA               	movwf	(_time+6)& (0+255),b
 13804                           
 13805                           ;RTC.c: 59: I2C_Master_Stop();
 13806  0020DA  EC52  F015         	call	i2_I2C_Master_Stop	;wreg free
 13807  0020DE  0012               	return		;funcret
 13808  0020E0                     __end_ofi2_getRTC:
 13809                           	opt stack 0
 13810                           pclatu	equ	0xFFB
 13811                           pclath	equ	0xFFA
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           intcon2	equ	0xFF1
 13820                           intcon3	equ	0xFF0
 13821                           indf0	equ	0xFEF
 13822                           postinc0	equ	0xFEE
 13823                           fsr0h	equ	0xFEA
 13824                           fsr0l	equ	0xFE9
 13825                           wreg	equ	0xFE8
 13826                           postdec1	equ	0xFE5
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function i2_I2C_Master_Write *****************
 13837 ;; Defined at:
 13838 ;;		line 48 in file "I2C.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;  d               2    1[COMRAM] unsigned int 
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;		None
 13843 ;; Return value:  Size  Location     Type
 13844 ;;                  1    wreg      void 
 13845 ;; Registers used:
 13846 ;;		wreg, status,2, status,0, cstack
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13856 ;;Total ram usage:        2 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; Hardware stack levels required when called:    1
 13859 ;; This function calls:
 13860 ;;		i2_I2C_Master_Wait
 13861 ;; This function is called by:
 13862 ;;		i2_getRTC
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text71
 13867  002A8A                     __ptext71:
 13868                           	opt stack 0
 13869  002A8A                     i2_I2C_Master_Write:
 13870                           	opt stack 18
 13871                           
 13872                           ;I2C.c: 50: I2C_Master_Wait();
 13873                           
 13874                           ;incstack = 0
 13875  002A8A  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 13876                           
 13877                           ;I2C.c: 51: SSPBUF = d;
 13878  002A8E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13879  002A92  0012               	return		;funcret
 13880  002A94                     __end_ofi2_I2C_Master_Write:
 13881                           	opt stack 0
 13882                           pclatu	equ	0xFFB
 13883                           pclath	equ	0xFFA
 13884                           tblptru	equ	0xFF8
 13885                           tblptrh	equ	0xFF7
 13886                           tblptrl	equ	0xFF6
 13887                           tablat	equ	0xFF5
 13888                           prodh	equ	0xFF4
 13889                           prodl	equ	0xFF3
 13890                           intcon	equ	0xFF2
 13891                           intcon2	equ	0xFF1
 13892                           intcon3	equ	0xFF0
 13893                           indf0	equ	0xFEF
 13894                           postinc0	equ	0xFEE
 13895                           fsr0h	equ	0xFEA
 13896                           fsr0l	equ	0xFE9
 13897                           wreg	equ	0xFE8
 13898                           postdec1	equ	0xFE5
 13899                           fsr1h	equ	0xFE2
 13900                           fsr1l	equ	0xFE1
 13901                           indf2	equ	0xFDF
 13902                           postinc2	equ	0xFDE
 13903                           postdec2	equ	0xFDD
 13904                           fsr2h	equ	0xFDA
 13905                           fsr2l	equ	0xFD9
 13906                           status	equ	0xFD8
 13907                           
 13908 ;; *************** function i2_I2C_Master_Stop *****************
 13909 ;; Defined at:
 13910 ;;		line 42 in file "I2C.c"
 13911 ;; Parameters:    Size  Location     Type
 13912 ;;		None
 13913 ;; Auto vars:     Size  Location     Type
 13914 ;;		None
 13915 ;; Return value:  Size  Location     Type
 13916 ;;                  1    wreg      void 
 13917 ;; Registers used:
 13918 ;;		wreg, status,2, status,0, cstack
 13919 ;; Tracked objects:
 13920 ;;		On entry : 0/0
 13921 ;;		On exit  : 0/0
 13922 ;;		Unchanged: 0/0
 13923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13928 ;;Total ram usage:        0 bytes
 13929 ;; Hardware stack levels used:    1
 13930 ;; Hardware stack levels required when called:    1
 13931 ;; This function calls:
 13932 ;;		i2_I2C_Master_Wait
 13933 ;; This function is called by:
 13934 ;;		i2_getRTC
 13935 ;; This function uses a non-reentrant model
 13936 ;;
 13937                           
 13938                           	psect	text72
 13939  002AA4                     __ptext72:
 13940                           	opt stack 0
 13941  002AA4                     i2_I2C_Master_Stop:
 13942                           	opt stack 18
 13943                           
 13944                           ;I2C.c: 44: I2C_Master_Wait();
 13945                           
 13946                           ;incstack = 0
 13947  002AA4  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 13948                           
 13949                           ;I2C.c: 45: PEN = 1;
 13950  002AA8  84C5               	bsf	4037,2,c	;volatile
 13951  002AAA  0012               	return		;funcret
 13952  002AAC                     __end_ofi2_I2C_Master_Stop:
 13953                           	opt stack 0
 13954                           pclatu	equ	0xFFB
 13955                           pclath	equ	0xFFA
 13956                           tblptru	equ	0xFF8
 13957                           tblptrh	equ	0xFF7
 13958                           tblptrl	equ	0xFF6
 13959                           tablat	equ	0xFF5
 13960                           prodh	equ	0xFF4
 13961                           prodl	equ	0xFF3
 13962                           intcon	equ	0xFF2
 13963                           intcon2	equ	0xFF1
 13964                           intcon3	equ	0xFF0
 13965                           indf0	equ	0xFEF
 13966                           postinc0	equ	0xFEE
 13967                           fsr0h	equ	0xFEA
 13968                           fsr0l	equ	0xFE9
 13969                           wreg	equ	0xFE8
 13970                           postdec1	equ	0xFE5
 13971                           fsr1h	equ	0xFE2
 13972                           fsr1l	equ	0xFE1
 13973                           indf2	equ	0xFDF
 13974                           postinc2	equ	0xFDE
 13975                           postdec2	equ	0xFDD
 13976                           fsr2h	equ	0xFDA
 13977                           fsr2l	equ	0xFD9
 13978                           status	equ	0xFD8
 13979                           
 13980 ;; *************** function i2_I2C_Master_Start *****************
 13981 ;; Defined at:
 13982 ;;		line 30 in file "I2C.c"
 13983 ;; Parameters:    Size  Location     Type
 13984 ;;		None
 13985 ;; Auto vars:     Size  Location     Type
 13986 ;;		None
 13987 ;; Return value:  Size  Location     Type
 13988 ;;                  1    wreg      void 
 13989 ;; Registers used:
 13990 ;;		wreg, status,2, status,0, cstack
 13991 ;; Tracked objects:
 13992 ;;		On entry : 0/0
 13993 ;;		On exit  : 0/0
 13994 ;;		Unchanged: 0/0
 13995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;Total ram usage:        0 bytes
 14001 ;; Hardware stack levels used:    1
 14002 ;; Hardware stack levels required when called:    1
 14003 ;; This function calls:
 14004 ;;		i2_I2C_Master_Wait
 14005 ;; This function is called by:
 14006 ;;		i2_getRTC
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           	psect	text73
 14011  002AAC                     __ptext73:
 14012                           	opt stack 0
 14013  002AAC                     i2_I2C_Master_Start:
 14014                           	opt stack 18
 14015                           
 14016                           ;I2C.c: 32: I2C_Master_Wait();
 14017                           
 14018                           ;incstack = 0
 14019  002AAC  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 14020                           
 14021                           ;I2C.c: 33: SEN = 1;
 14022  002AB0  80C5               	bsf	4037,0,c	;volatile
 14023  002AB2  0012               	return		;funcret
 14024  002AB4                     __end_ofi2_I2C_Master_Start:
 14025                           	opt stack 0
 14026                           pclatu	equ	0xFFB
 14027                           pclath	equ	0xFFA
 14028                           tblptru	equ	0xFF8
 14029                           tblptrh	equ	0xFF7
 14030                           tblptrl	equ	0xFF6
 14031                           tablat	equ	0xFF5
 14032                           prodh	equ	0xFF4
 14033                           prodl	equ	0xFF3
 14034                           intcon	equ	0xFF2
 14035                           intcon2	equ	0xFF1
 14036                           intcon3	equ	0xFF0
 14037                           indf0	equ	0xFEF
 14038                           postinc0	equ	0xFEE
 14039                           fsr0h	equ	0xFEA
 14040                           fsr0l	equ	0xFE9
 14041                           wreg	equ	0xFE8
 14042                           postdec1	equ	0xFE5
 14043                           fsr1h	equ	0xFE2
 14044                           fsr1l	equ	0xFE1
 14045                           indf2	equ	0xFDF
 14046                           postinc2	equ	0xFDE
 14047                           postdec2	equ	0xFDD
 14048                           fsr2h	equ	0xFDA
 14049                           fsr2l	equ	0xFD9
 14050                           status	equ	0xFD8
 14051                           
 14052 ;; *************** function i2_I2C_Master_Read *****************
 14053 ;; Defined at:
 14054 ;;		line 54 in file "I2C.c"
 14055 ;; Parameters:    Size  Location     Type
 14056 ;;  a               1    wreg     unsigned char 
 14057 ;; Auto vars:     Size  Location     Type
 14058 ;;  a               1    1[COMRAM] unsigned char 
 14059 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14060 ;; Return value:  Size  Location     Type
 14061 ;;                  1    wreg      unsigned char 
 14062 ;; Registers used:
 14063 ;;		wreg, status,2, status,0, cstack
 14064 ;; Tracked objects:
 14065 ;;		On entry : 0/0
 14066 ;;		On exit  : 0/0
 14067 ;;		Unchanged: 0/0
 14068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;Total ram usage:        2 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    1
 14076 ;; This function calls:
 14077 ;;		i2_I2C_Master_Wait
 14078 ;; This function is called by:
 14079 ;;		i2_getRTC
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           	psect	text74
 14084  00293A                     __ptext74:
 14085                           	opt stack 0
 14086  00293A                     i2_I2C_Master_Read:
 14087                           	opt stack 18
 14088                           
 14089                           ;incstack = 0
 14090                           ;i2I2C_Master_Read@a stored from wreg
 14091  00293A  6E02               	movwf	i2I2C_Master_Read@a,c
 14092                           
 14093                           ;I2C.c: 56: unsigned char temp;
 14094                           ;I2C.c: 57: I2C_Master_Wait();
 14095  00293C  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 14096                           
 14097                           ;I2C.c: 58: RCEN = 1;
 14098  002940  86C5               	bsf	4037,3,c	;volatile
 14099                           
 14100                           ;I2C.c: 59: I2C_Master_Wait();
 14101  002942  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 14102                           
 14103                           ;I2C.c: 60: temp = SSPBUF;
 14104  002946  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14105                           
 14106                           ;I2C.c: 61: I2C_Master_Wait();
 14107  00294A  EC16  F015         	call	i2_I2C_Master_Wait	;wreg free
 14108                           
 14109                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14110  00294E  5002               	movf	i2I2C_Master_Read@a,w,c
 14111  002950  A4D8               	btfss	status,2,c
 14112  002952  D002               	goto	i2u250_40
 14113  002954  8AC5               	bsf	4037,5,c	;volatile
 14114  002956  D001               	goto	i2l4207
 14115  002958                     i2u250_40:
 14116  002958  9AC5               	bcf	4037,5,c	;volatile
 14117  00295A                     i2l4207:
 14118                           
 14119                           ;I2C.c: 63: ACKEN = 1;
 14120  00295A  88C5               	bsf	4037,4,c	;volatile
 14121                           
 14122                           ;I2C.c: 64: return temp;
 14123  00295C  5003               	movf	i2I2C_Master_Read@temp,w,c
 14124  00295E  0012               	return	
 14125  002960                     __end_ofi2_I2C_Master_Read:
 14126                           	opt stack 0
 14127                           pclatu	equ	0xFFB
 14128                           pclath	equ	0xFFA
 14129                           tblptru	equ	0xFF8
 14130                           tblptrh	equ	0xFF7
 14131                           tblptrl	equ	0xFF6
 14132                           tablat	equ	0xFF5
 14133                           prodh	equ	0xFF4
 14134                           prodl	equ	0xFF3
 14135                           intcon	equ	0xFF2
 14136                           intcon2	equ	0xFF1
 14137                           intcon3	equ	0xFF0
 14138                           indf0	equ	0xFEF
 14139                           postinc0	equ	0xFEE
 14140                           fsr0h	equ	0xFEA
 14141                           fsr0l	equ	0xFE9
 14142                           wreg	equ	0xFE8
 14143                           postdec1	equ	0xFE5
 14144                           fsr1h	equ	0xFE2
 14145                           fsr1l	equ	0xFE1
 14146                           indf2	equ	0xFDF
 14147                           postinc2	equ	0xFDE
 14148                           postdec2	equ	0xFDD
 14149                           fsr2h	equ	0xFDA
 14150                           fsr2l	equ	0xFD9
 14151                           status	equ	0xFD8
 14152                           
 14153 ;; *************** function i2_I2C_Master_Wait *****************
 14154 ;; Defined at:
 14155 ;;		line 25 in file "I2C.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;		None
 14158 ;; Auto vars:     Size  Location     Type
 14159 ;;		None
 14160 ;; Return value:  Size  Location     Type
 14161 ;;                  1    wreg      void 
 14162 ;; Registers used:
 14163 ;;		wreg, status,2, status,0
 14164 ;; Tracked objects:
 14165 ;;		On entry : 0/0
 14166 ;;		On exit  : 0/0
 14167 ;;		Unchanged: 0/0
 14168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;Total ram usage:        1 bytes
 14174 ;; Hardware stack levels used:    1
 14175 ;; This function calls:
 14176 ;;		Nothing
 14177 ;; This function is called by:
 14178 ;;		i2_I2C_Master_Start
 14179 ;;		i2_I2C_Master_Stop
 14180 ;;		i2_I2C_Master_Write
 14181 ;;		i2_I2C_Master_Read
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           	psect	text75
 14186  002A2C                     __ptext75:
 14187                           	opt stack 0
 14188  002A2C                     i2_I2C_Master_Wait:
 14189                           	opt stack 18
 14190  002A2C                     i2l180:
 14191  002A2C  B4C7               	btfsc	4039,2,c	;volatile
 14192  002A2E  D7FE               	goto	i2l180
 14193  002A30  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14194  002A34  0E1F               	movlw	31
 14195  002A36  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14196  002A38  B4D8               	btfsc	status,2,c
 14197  002A3A  0012               	return	
 14198  002A3C  D7F7               	goto	i2l180
 14199  002A3E                     __end_ofi2_I2C_Master_Wait:
 14200                           	opt stack 0
 14201                           pclatu	equ	0xFFB
 14202                           pclath	equ	0xFFA
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           intcon	equ	0xFF2
 14210                           intcon2	equ	0xFF1
 14211                           intcon3	equ	0xFF0
 14212                           indf0	equ	0xFEF
 14213                           postinc0	equ	0xFEE
 14214                           fsr0h	equ	0xFEA
 14215                           fsr0l	equ	0xFE9
 14216                           wreg	equ	0xFE8
 14217                           postdec1	equ	0xFE5
 14218                           fsr1h	equ	0xFE2
 14219                           fsr1l	equ	0xFE1
 14220                           indf2	equ	0xFDF
 14221                           postinc2	equ	0xFDE
 14222                           postdec2	equ	0xFDD
 14223                           fsr2h	equ	0xFDA
 14224                           fsr2l	equ	0xFD9
 14225                           status	equ	0xFD8
 14226                           pclatu	equ	0xFFB
 14227                           pclath	equ	0xFFA
 14228                           tblptru	equ	0xFF8
 14229                           tblptrh	equ	0xFF7
 14230                           tblptrl	equ	0xFF6
 14231                           tablat	equ	0xFF5
 14232                           prodh	equ	0xFF4
 14233                           prodl	equ	0xFF3
 14234                           intcon	equ	0xFF2
 14235                           intcon2	equ	0xFF1
 14236                           intcon3	equ	0xFF0
 14237                           indf0	equ	0xFEF
 14238                           postinc0	equ	0xFEE
 14239                           fsr0h	equ	0xFEA
 14240                           fsr0l	equ	0xFE9
 14241                           wreg	equ	0xFE8
 14242                           postdec1	equ	0xFE5
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           fsr2h	equ	0xFDA
 14249                           fsr2l	equ	0xFD9
 14250                           status	equ	0xFD8
 14251                           
 14252                           	psect	rparam
 14253  0000                     pclatu	equ	0xFFB
 14254                           pclath	equ	0xFFA
 14255                           tblptru	equ	0xFF8
 14256                           tblptrh	equ	0xFF7
 14257                           tblptrl	equ	0xFF6
 14258                           tablat	equ	0xFF5
 14259                           prodh	equ	0xFF4
 14260                           prodl	equ	0xFF3
 14261                           intcon	equ	0xFF2
 14262                           intcon2	equ	0xFF1
 14263                           intcon3	equ	0xFF0
 14264                           indf0	equ	0xFEF
 14265                           postinc0	equ	0xFEE
 14266                           fsr0h	equ	0xFEA
 14267                           fsr0l	equ	0xFE9
 14268                           wreg	equ	0xFE8
 14269                           postdec1	equ	0xFE5
 14270                           fsr1h	equ	0xFE2
 14271                           fsr1l	equ	0xFE1
 14272                           indf2	equ	0xFDF
 14273                           postinc2	equ	0xFDE
 14274                           postdec2	equ	0xFDD
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279                           	psect	temp
 14280  00007F                     btemp:
 14281                           	opt stack 0
 14282  00007F                     	ds	1
 14283  0000                     int$flags	set	btemp
 14284                           pclatu	equ	0xFFB
 14285                           pclath	equ	0xFFA
 14286                           tblptru	equ	0xFF8
 14287                           tblptrh	equ	0xFF7
 14288                           tblptrl	equ	0xFF6
 14289                           tablat	equ	0xFF5
 14290                           prodh	equ	0xFF4
 14291                           prodl	equ	0xFF3
 14292                           intcon	equ	0xFF2
 14293                           intcon2	equ	0xFF1
 14294                           intcon3	equ	0xFF0
 14295                           indf0	equ	0xFEF
 14296                           postinc0	equ	0xFEE
 14297                           fsr0h	equ	0xFEA
 14298                           fsr0l	equ	0xFE9
 14299                           wreg	equ	0xFE8
 14300                           postdec1	equ	0xFE5
 14301                           fsr1h	equ	0xFE2
 14302                           fsr1l	equ	0xFE1
 14303                           indf2	equ	0xFDF
 14304                           postinc2	equ	0xFDE
 14305                           postdec2	equ	0xFDD
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     126
    BANK0           128     84     125
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_moveServoCup
    _moveServoCup->_set_timer1
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39025
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    1397
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0    1022
                                             10 BANK0      1     1      0
                          _initFlags
                      _initSortTimer
                            _lcdInst
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     119
                                              6 BANK0      8     8      0
                     _moveServoBlock
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       3     3      0      24
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0     256
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         3     3      0     256
                                              6 BANK0      3     3      0
                         _set_timer1
 ---------------------------------------------------------------------------------
 (4) _set_timer1                                           6     4      2     207
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73679
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
                       i2_set_timer1
 ---------------------------------------------------------------------------------
 (8) i2_set_timer1                                         6     4      2     119
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
         _set_timer1
     _ID
       _moveServoBlock
       _readMAG
         _readADC
     _Loading
       _initFlags
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _moveServoCup
         _set_timer1
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   i2_set_timer1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     109      34        0.0%
DATA                 0      0     109       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 14:01:14 2017

                   i2_I2C_Master_Start 2AAC                     i2_I2C_Master_Write 2A8A  
                                   _ID 19A8                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l180 29F2                                    l272 2A20  
                                  l269 2A1A                                    l398 00E0  
                                  l784 1ED8                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EB                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
      __end_of_change_state_to_menu_11 26F6        __end_of_change_state_to_menu_12 24FE  
      __end_of_change_state_to_menu_22 24C6        __end_of_change_state_to_menu_23 26C6  
         _f_can_coming_to_distribution 00E3                         ??_Distribution 0089  
      __end_of_change_state_to_logs_11 27E6        __end_of_change_state_to_logs_12 27B6  
      __end_of_change_state_to_logs_22 2786        __end_of_change_state_to_logs_23 2842  
      __end_of_change_state_to_logs_33 2756        __end_of_change_state_to_logs_34 2726  
                                 ??_ID 0086                                   ??_UI 00C4  
                 __end_ofi2_set_timer1 28EC                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1015 0D7C  
                                 l4121 280C                                   l1804 1FF2  
                                 l1814 2206                                   l1751 1BEE  
                                 l5201 1B26                                   l4401 08E2  
                                 l4321 0696                                   l4313 0664  
                                 l4305 05E8                                   l5113 1DC4  
                                 l4155 1FA2                                   l4139 28BA  
                                 l4411 0954                                   l4331 070E  
                                 l4323 06A2                                   l5205 1B3A  
                                 l5221 1CD6                                   l4157 1FAE  
                                 l4405 08F6                                   l4341 0764  
                                 l4333 071A                                   l4325 06A8  
                                 l4413 0960                                   l5301 0110  
                                 l4167 1FE4                                   l4159 1FB4  
                                 l4183 21F8                                   l4175 21C2  
                                 l4407 08FC                                   l4335 0720  
                                 l4423 1F54                                   l5241 1D42  
                                 l5233 1D20                                   l5225 1CEA  
                                 l5217 1CC6                                   l4177 21CE  
                                 l4337 0738                                   l4345 077C  
                                 l4433 253E                                   l5313 0144  
                                 l5305 011A                                   l4281 2868  
                                 l5227 1CF6                                   l4179 21D4  
                                 l4371 0822                                   l4347 07B0  
                                 l4419 1F3E                                   l4435 254A  
                                 l5411 030C                                   l5331 01A0  
                                 l4451 1B72                                   l5173 1AA2  
                                 l5229 1CFC                                   l5237 1D2E  
                                 l4381 087C                                   l4357 07E0  
                                 l4293 0598                                   l4429 1F74  
                                 l5501 048E                                   l5421 0336  
                                 l5341 01CA                                   l5309 0132  
                                 l4453 1B82                                   l5149 1A64  
                                 l4383 0886                                   l4359 07E6  
                                 l4295 05AA                                   l5415 0324  
                                 l5407 0302                                   l5335 01B8  
                                 l5327 0196                                   l4463 1BDC  
                                 l4455 1B88                                   l4279 2856  
                                 l5185 1AD6                                   l4377 0844  
                                 l4289 0584                                   l5505 0498  
                                 l5425 0340                                   l5345 01D4  
                                 l4801 2036                                   l5187 1AE2  
                                 l5179 1AB8                                   l4395 08BC  
                                 l4299 05B4                                   l4651 0D86  
                                 l5531 0510                                   l5451 03B8  
                                 l5371 024C                                   l4803 2058  
                                 l4811 250E                                   l5099 1D8C  
                                 l5197 1B18                                   l5189 1AE8  
                                 l4397 08C8                                   l4389 08A0  
                                 l4661 0E1C                                   l4653 0DA4  
                                 l4645 0CFA                                   l5541 053A  
                                 l5509 04B0                                   l5461 03E2  
                                 l5429 0358                                   l5381 0276  
                                 l5349 01EC                                   l4901 1E42  
                                 l4671 0EB2                                   l4663 0E3A  
                                 l4655 0DC2                                   l5535 0528  
                                 l5527 0506                                   l5455 03D0  
                                 l5447 03AE                                   l5375 0264  
                                 l5367 0242                                   l5295 00F8  
                                 l4815 251A                                   l4673 0ED0  
                                 l4665 0E58                                   l4657 0DE0  
                                 l5545 0544                                   l5465 03EC  
                                 l5385 0280                                   l5553 0568  
                                 l5297 00FE                                   l4817 252A  
                                 l4809 2504                                   l4667 0E76  
                                 l4659 0DFE                                   l5491 0464  
                                 l4907 1E6E                                   l4669 0E94  
                                 l4677 0EEE                                   l5549 055C  
                                 l5469 0404                                   l5389 0298  
                                 l4773 1C0E                                   l4679 0F4C  
                                 l5495 047C                                   l5487 045A  
                                 l4791 200C                                   l4783 1C9A  
                                 _ADIE 007CEE                                   l4793 2016  
                                 l4777 1C24                                   _ADFM 007E07  
                                 l4795 2020                                   l4797 202A  
                                 l4789 2002                                   l5861 1EBA  
                                 l4897 1E2C                                   l5857 1EAE  
                                 l5873 1EDA                                   l5867 1ECE  
                                 l5859 1EB4                                   l5869 1ED4  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   u2400 280A  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3220 2316                                   u3230 2318  
                                 u3260 0D7C                                   u3500 19FA  
                                 u3245 2240                                   u5007 2140  
                                 u2650 06E2                                   u3530 1A54  
                                 u3508 19FE                                   u2657 06D8  
                                 u2690 075A                                   u3538 1A58  
                                 _PEIE 007F96                                   u2697 0750  
                                 _RCEN 007E2B                                   u4717 1D74  
                                 u4807 01A8                                   u4727 19C2  
                                 u4817 01DC                                   u4737 1A3C  
                                 u4907 03F4                                   u4827 0206  
                                 u4747 285E                                   u4917 041E  
                                 u4837 0254                                   u4757 23D0  
                                 u4927 046C                                   u4847 0288  
                                 u4767 2404                                   u4937 04A0  
                                 u4857 02B2                                   u4777 002A  
                                 u4947 04CA                                   u4867 0314  
                                 u4787 0122                                   u4957 0518  
                                 u4877 0348                                   u4797 0152  
                                 u4967 054C                                   u4887 0372  
                                 u4977 2100                                   u4897 03C0  
                                 u4987 210A                                   u4997 2136  
                                 _THIR 007D                                   _RSEN 007E29  
                          _stopSignals 29DC                                   _back 0063  
                                 _main 1E76                                   _down 006D  
                                 _keys FDB5                                   _time 00D4  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 2960  
                                 btemp 007F                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 2A6A  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1250                            i2_lcdNibble 2320  
                      __end_of_Loading 1DEA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1B44                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1D4C                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1C00  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 1FFC                        __end_of___lwmod 2210  
                                i2l180 2A2C                                  i2l450 124C  
                      ___awdiv@counter 008A                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _THMAG 00F7  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2A5E  
                      __end_of_handler 19A8                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 286E                        __end_of_initLCD 240E  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 1E76                        __end_of_readMAG 2320  
                                _block 007B                        __end_of_dpowers FDD0  
                                _first 00FB                                  _enter 006F  
                      __end_of_isdigit 28C4                                  _input 007C  
                                _putch 2A3E                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 0036  
                     __end_ofi2___wmul 293A                       __end_ofi2_getRTC 20E0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0086                       __end_ofi2_strcpy 2606  
                     _count_can_no_lab 0065                        __initialization 2148  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1EFE  
                         __end_of_keys FDC6                           __end_of_sort 2982  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                               ??_sort 008E                          __activetblptr 000003  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 2666  
            i2_change_state_to_menu_22 2636                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1015 12DE                                 i2l1330 196C  
                               i2l1325 1922                                 i2l1804 23BE  
                               i2l5013 1778                                 i2l1814 2446  
                               i2l4207 295A                                 i2l4231 29BA  
                               i2l5023 179E                                 i2l5007 176A  
                               i2l4241 238C                                 i2l5041 17D8  
                               i2l5033 17C0                                 i2l5017 1794  
                               i2l4243 2394                                 i2l5051 17F8  
                               i2l5027 17B2                                 i2l4253 23B4  
                               i2l4245 2398                                 i2l4261 241C  
                               i2l5029 17B6                                 i2l4263 2424  
                               i2l5063 182E                                 i2l5055 180A  
                               i2l5047 17E6                                 i2l6103 1726  
                               i2l4265 2428                                 i2l4601 0C3C  
                               i2l4521 0A6A                                 i2l4513 0A42  
                               i2l4505 09E0                                 i2l6105 1742  
                               i2l4611 0CA2                                 i2l4531 0AC2  
                               i2l4523 0A74                                 i2l5059 181C  
                               i2l4269 243C                                 i2l4605 0C4E  
                               i2l4541 0B0E                                 i2l4533 0ACC  
                               i2l4525 0A78                                 i2l4613 0CAA  
                               i2l5069 1838                                 i2l4607 0C54  
                               i2l4535 0AD2                                 i2l4537 0AE4  
                               i2l4545 0B20                                 i2l4617 25DE  
                               i2l5601 1038                                 i2l4475 20A6  
                               i2l4571 0BAE                                 i2l4547 0B50  
                               i2l4619 25E6                                 i2l4485 20D0  
                               i2l4581 0BEC                                 i2l4557 0B78  
                               i2l4493 099A                                 i2l5701 11BE  
                               i2l5621 107E                                 i2l5613 1062  
                               i2l5605 1046                                 i2l4479 20B6  
                               i2l4583 0BF4                                 i2l4559 0B7C  
                               i2l4495 09A8                                 i2l6095 1200  
                               i2l5711 11E2                                 i2l4577 0BC8  
                               i2l4489 098A                                 i2l5801 1492  
                               i2l6097 1222                                 i2l5705 11D4  
                               i2l5641 10D4                                 i2l5633 10B0  
                               i2l5625 1094                                 i2l5617 1070  
                               i2l5609 1054                                 i2l4595 0C20  
                               i2l4499 09AE                                 i2l5811 14FC  
                               i2l6099 123E                                 i2l5563 0FC0  
                               i2l4597 0C28                                 i2l4589 0C0A  
                               i2l5821 15BE                                 i2l5805 14A2  
                               i2l4861 132A                                 i2l5661 1122  
                               i2l5653 10FE                                 i2l5645 10E2  
                               i2l5637 10BE                                 i2l5629 10A2  
                               i2l5581 0FFE                                 i2l5573 0FE2  
                               i2l5565 0FC6                                 i2l4951 169E  
                               i2l4871 1398                                 i2l4863 1340  
                               i2l4855 12E8                                 i2l4961 16C8  
                               i2l4873 13AE                                 i2l4865 1356  
                               i2l4857 12FE                                 i2l4881 13F0  
                               i2l4849 127C                                 i2l5681 1170  
                               i2l5673 1154                                 i2l5665 1130  
                               i2l5657 1114                                 i2l5649 10F0  
                               i2l5593 101A                                 i2l5577 0FF0  
                               i2l5569 0FD4                                 i2l5921 18F0  
                               i2l4963 16CC                                 i2l4875 13C4  
                               i2l4867 136C                                 i2l4859 1314  
                               i2l4883 144A                                 i2l5907 18D4  
                               i2l4981 1702                                 i2l4973 16EA  
                               i2l4877 13DA                                 i2l4869 1382  
                               i2l5693 11A2                                 i2l5685 117E  
                               i2l5677 1162                                 i2l5669 113E  
                               i2l5597 1028                                 i2l5589 100C  
                               i2l4983 1708                                 i2l4975 16F0  
                               i2l4959 16B8                                 i2l4977 16F6  
                               i2l4969 16D6                                 i2l5697 11B0  
                               i2l5689 1194                                 i2l4979 16FC  
                               i2l4987 170E                                 i2l5939 193A  
                               i2l5949 1962                                 i2l4999 1752  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                                 _TMR3CF 005D  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 2A1A  
                          ?i2_printRTC 0001                   __end_of_Distribution 2636  
                               ___wmul 256A                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1EFE                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 29A4  
                               _initUI 29C2                                 clear_0 2186  
                               clear_1 2192                                 clear_2 219E  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 2A1A                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                    moveServoBlock@pulse 0080  
                               _strcpy 2534                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082                  __size_ofi2_set_timer1 0028  
 __end_ofi2_change_state_to_menu_start 2914  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 28EC                           __pdataCOMRAM 007D  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 23C8  
                     __end_of_printRTC 0F90                           __mediumconst FDB4  
                    __end_ofi2___lwmod 2450                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 2A76                      __end_ofi2_isdigit 29C2  
                           __accesstop 0080                __end_of__initialization 21A4  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 2A76  
                         i2_set_timer1 28C4                            i2printRTC@i 0041  
                        _initSortTimer 1C00                          __end_of_putch 2A4E  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1A86                             __end_of_UI 0576  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 289A          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 286E                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0069                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                         _moveServoBlock 24FE  
                           __pbssBANK0 00D4                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                    moveServoCup@pulse 0087                     __size_of_initFlags 003E  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_630 00C8                                UI@i_631 00C9  
                              UI@i_650 00D2                                UI@i_642 00CE  
                              UI@i_634 00CA                                UI@i_651 00D3  
                              UI@i_643 00CF                                UI@i_635 00CB  
                       ?_initSortTimer 0001                                UI@i_646 00D0  
                              UI@i_638 00CC                                UI@i_647 00D1  
                              UI@i_639 00CD                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0088                                _UI$2132 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 2534  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 2A5E  
                            ?_initTime 0080                        _f_loadingNewCan 00E9  
                      i2printRTC@month 003D                  __size_of_Distribution 0030  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2148  
                              _Loading 1D4C            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 1A86  
                              ___awmod 1CAA                                ___lldiv 1B44  
                      __size_of___wmul 0036                                ___lwdiv 1F84  
                              ___lwmod 21AE                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                              _canType 00F1                        __size_of_initUI 001A  
                              __pcinit 2148                                __ramtop 1000  
                              _lcdInst 2A4E                                _handler 0008  
                              __ptext0 1E76                                __ptext1 29DC  
                              __ptext2 2960                                __ptext3 1D4C  
                              __ptext4 1C00                                __ptext5 2450  
                              __ptext6 19A8                                __ptext7 22CA  
                              __ptext8 2842                                __ptext9 24FE  
                    __end_of_initFlags 248E                        __size_of_printf 040A  
                       ??_moveServoCup 0086                                _readADC 2842  
                      __size_of_strcpy 0036                                _initLCD 23C8  
                              _loadRTC 1DEA                                _readMAG 22CA  
                              _dpowers FDC6                                _isdigit 289A  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0079                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 2606  
                       __pintcode_body 1866                   end_of_initialization 21A4  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                             _set_timer1 25A0  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 1866                  __end_of_machineConfig 22CA  
                           _updateMenu 0F90                      i2_I2C_Master_Read 293A  
                            _IR_signal 005B                      i2_I2C_Master_Wait 2A2C  
                    i2_I2C_Master_Stop 2AA4                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 2376                              i2___lwmod 240E  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1486  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 2A6A                             _total_time 00EF  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                           ID@magnetic 008C                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 29A4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 0061                         __end_of___wmul 25A0  
                       __end_of_getRTC 1F84                   __size_ofi2_lcdNibble 0056  
                        __pidataCOMRAM 2AB4                          i2lcdInst@data 0003  
                       __end_of_initUI 29DC                       i2___wmul@product 0005  
                       __end_of_printf 0980                           i2printf@flag 0026  
                       __end_of_strcpy 256A              __end_ofi2_I2C_Master_Read 2960  
            __end_ofi2_I2C_Master_Wait 2A3E                           i2printf@prec 001D  
                  start_initialization 2148              __end_ofi2_I2C_Master_Stop 2AAC  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0067            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                         _timer3highbits 0073  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 206E  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                          ?_set_timer1 0080                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK0 00F3  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                  i2set_timer1@my_time 0005                               ??_printf 009A  
                  i2set_timer1@time_us 0001       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2253 0045                            __pbssCOMRAM 005B  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1774 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 006B  
                   __end_of_PortTestA5 2A2C                       _I2C_Master_Start 2A9C  
                            _f_lastCan 00E7                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 2A80  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FDB4                              _lcdNibble 20E0  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                       ??_moveServoBlock 0080  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0071                              _initFlags 2450  
                            _cur_state 00DF                       ___lwdiv@quotient 0084  
                  __size_of_set_timer1 0034                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 00DE                            __size_of_UI 0564  
           __end_ofi2_I2C_Master_Start 2AB4             __end_ofi2_I2C_Master_Write 2A94  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 1680  
                          ??i2_isdigit 0001                               i2u303_40 0B06  
                             i2u303_47 0AFC                               i2u250_40 2958  
                             i2u330_40 12DE                               i2u501_47 16BE  
                             i2u502_47 2338                               i2u503_47 2342  
                             i2u504_47 2364                               i2u505_47 236E  
                             i2u457_40 15B8                               i2u299_40 0AA6  
                             i2u299_47 0A9C                    __size_of_updateMenu 02C0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                  ID@side_conductivity 008A                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 2914                          lcdNibble@data 0081  
                             i2_getRTC 206E                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                           ?_initFlags 0001                               i2_printf 0980  
                             i2_strcpy 25D4                    I2C_Master_Read@temp 0082  
                            copy_data0 215C                  __size_of_moveServoCup 0072  
                     __size_ofi2_putch 000C                            _count_total 00DD  
                             __Hrparam 0000                          _timer3lowbits 0075  
                     __size_of_Loading 009E                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                          ?i2_set_timer1 0001  
                __end_of_initSortTimer 1CAA                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 26C6  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 24C6  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 248E  
              _change_state_to_menu_23 2696                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 27B6                _change_state_to_logs_12 2786  
              _change_state_to_logs_22 2756                _change_state_to_logs_23 2814  
              _change_state_to_logs_33 2726                _change_state_to_logs_34 26F6  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 19A0                        _I2C_Master_Init 2210  
                     __size_of_readADC 002C                        _I2C_Master_Read 27E6  
                     __size_of_initLCD 0046                           _f_ID_receive 00F9  
                         _moveServoCup 1FFC                       __size_of_loadRTC 008C  
                     __size_of_readMAG 0056                        _I2C_Master_Wait 29F2  
                      _I2C_Master_Stop 2A94                       __size_of_isdigit 002A  
                       _printSortTimer 1486                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 2606  
                             __ptext11 1FFC                               __ptext20 23C8  
                             __ptext12 25A0                               __ptext21 0012  
                             __ptext13 2270                               __ptext30 248E  
                             __ptext22 0CC6                               __ptext14 29C2  
                             __ptext31 24C6                               __ptext23 2534  
                             __ptext15 1DEA                               __ptext40 1CAA  
                             __ptext32 0576                               __ptext24 1EFE  
                             __ptext16 2210                               __ptext41 1A86  
                             __ptext33 2A3E                               __ptext25 2A80  
                             __ptext17 1B44                               __ptext50 2636  
                             __ptext42 2A1A                               __ptext34 289A  
                             __ptext26 2A94                               __ptext18 286E  
                             __ptext51 2666                               __ptext35 256A  
                             __ptext27 2A9C                               __ptext19 2982  
                             __ptext60 2A06                               __ptext52 2696  
                             __ptext44 28C4                               __ptext36 21AE  
                             __ptext28 27E6                               __ptext61 1486  
                             __ptext53 26C6                               __ptext45 0F90  
                             __ptext37 1F84                               __ptext29 29F2  
                             __ptext70 206E                               __ptext62 0980  
                             __ptext54 26F6                               __ptext46 28EC  
                             __ptext38 2A4E                               __ptext71 2A8A  
                             __ptext63 2A5E                               __ptext55 2726  
                             __ptext47 1250                               __ptext39 20E0  
                             __ptext72 2AA4                               __ptext64 29A4  
                             __ptext56 2814                               __ptext48 25D4  
                             __ptext73 2AAC                               __ptext65 2914  
                             __ptext57 2756                               __ptext49 1680  
                             __ptext74 293A                               __ptext66 240E  
                             __ptext58 2786                               __ptext75 2A2C  
                             __ptext67 2376                               __ptext59 27B6  
                             __ptext68 2A6A                               __ptext69 2320  
                             _dispLogs 2A06                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1774 0002  
                             _initTime 2982                          __size_of_main 0088  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00ED                 __size_of_machineConfig 005A  
                       ??i2_set_timer1 0003                           ??_set_timer1 0082  
                        ??i2_lcdNibble 0001                               _printRTC 0CC6  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007F                     _f_can_coming_to_ID 00E1  
                            printf@len 00A5                              printf@val 00A3  
    __end_ofi2_change_state_to_menu_12 2696      __end_ofi2_change_state_to_menu_22 2666  
                             loadRTC@i 0096                 __end_of_printSortTimer 1680  
                            putch@data 0082               __end_of_I2C_Master_Start 2AA4  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 2A8A  
                           _INTCONbits 000FF2                           ??_updateMenu 0043  
                          ??_initFlags 0080                             _MAG_signal 00DB  
                             isdigit@c 0082                               intlevel2 0000  
                   __end_of_set_timer1 25D4                       ___lwmod@dividend 0087  
                    set_timer1@my_time 0084                      set_timer1@time_us 0080  
                     ___lldiv@dividend 0080                    __end_of_stopSignals 29F2  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2270  
              __end_of_I2C_Master_Read 2814                __end_of_I2C_Master_Wait 2A06  
              __end_of_I2C_Master_Stop 2A9C                          printRTC@F3205 00F3  
                          lcdInst@data 0082                    __end_ofi2_lcdNibble 2376  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 00E5                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2270  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0082  
                          _TMR3counter 005F                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F2  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
