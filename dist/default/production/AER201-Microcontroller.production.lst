

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 04 17:24:55 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107  0000                     
   108                           ; Version 1.40
   109                           ; Generated 01/12/2016 GMT
   110                           ; 
   111                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC18F4620 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     
   143                           	psect	idataBANK1
   144  004200                     __pidataBANK1:
   145                           	opt stack 0
   146                           
   147                           ;initializer for UI@F3220
   148  004200  4D                 	db	77
   149  004201  4D                 	db	77
   150  004202  4D                 	db	77
   151  004203  00                 	db	0
   152                           
   153                           ;initializer for printRTC@F3211
   154  004204  4D                 	db	77
   155  004205  4D                 	db	77
   156  004206  4D                 	db	77
   157  004207  00                 	db	0
   158                           
   159                           	psect	mediumconst
   160  00FB38                     __pmediumconst:
   161                           	opt stack 0
   162  00FB38  00                 	db	0
   163  00FB39                     _keys:
   164                           	opt stack 0
   165  00FB39  31                 	db	49
   166  00FB3A  32                 	db	50
   167  00FB3B  33                 	db	51
   168  00FB3C  41                 	db	65
   169  00FB3D  34                 	db	52
   170  00FB3E  35                 	db	53
   171  00FB3F  36                 	db	54
   172  00FB40  42                 	db	66
   173  00FB41  37                 	db	55
   174  00FB42  38                 	db	56
   175  00FB43  39                 	db	57
   176  00FB44  43                 	db	67
   177  00FB45  2A                 	db	42
   178  00FB46  30                 	db	48
   179  00FB47  23                 	db	35
   180  00FB48  44                 	db	68
   181  00FB49  00                 	db	0
   182  00FB4A                     __end_of_keys:
   183                           	opt stack 0
   184  00FB4A                     _dpowers:
   185                           	opt stack 0
   186  00FB4A  0001               	dw	1
   187  00FB4C  000A               	dw	10
   188  00FB4E  0064               	dw	100
   189  00FB50  03E8               	dw	1000
   190  00FB52  2710               	dw	10000
   191  00FB54                     __end_of_dpowers:
   192                           	opt stack 0
   193  0000                     _ADCON0	set	4034
   194  0000                     _ADCON0bits	set	4034
   195  0000                     _ADCON1	set	4033
   196  0000                     _ADCON2	set	4032
   197  0000                     _ADRESH	set	4036
   198  0000                     _ADRESL	set	4035
   199  0000                     _CMCONbits	set	4020
   200  0000                     _CVRCON	set	4021
   201  0000                     _EEADR	set	4009
   202  0000                     _EEADRH	set	4010
   203  0000                     _EECON1bits	set	4006
   204  0000                     _EECON2	set	4007
   205  0000                     _EEDATA	set	4008
   206  0000                     _INTCONbits	set	4082
   207  0000                     _LATA	set	3977
   208  0000                     _LATAbits	set	3977
   209  0000                     _LATB	set	3978
   210  0000                     _LATC	set	3979
   211  0000                     _LATCbits	set	3979
   212  0000                     _LATD	set	3980
   213  0000                     _LATDbits	set	3980
   214  0000                     _LATE	set	3981
   215  0000                     _LATEbits	set	3981
   216  0000                     _OSCCON	set	4051
   217  0000                     _OSCTUNEbits	set	3995
   218  0000                     _PIR2bits	set	4001
   219  0000                     _PORTAbits	set	3968
   220  0000                     _PORTB	set	3969
   221  0000                     _PORTBbits	set	3969
   222  0000                     _SSPADD	set	4040
   223  0000                     _SSPBUF	set	4041
   224  0000                     _SSPCON1	set	4038
   225  0000                     _SSPCON2	set	4037
   226  0000                     _SSPSTAT	set	4039
   227  0000                     _T0CON	set	4053
   228  0000                     _T1CON	set	4045
   229  0000                     _TMR0H	set	4055
   230  0000                     _TMR0L	set	4054
   231  0000                     _TMR1H	set	4047
   232  0000                     _TMR1L	set	4046
   233  0000                     _TMR3H	set	4019
   234  0000                     _TMR3L	set	4018
   235  0000                     _TRISA	set	3986
   236  0000                     _TRISB	set	3987
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISD	set	3989
   239  0000                     _TRISE	set	3990
   240  0000                     _ACKDT	set	32301
   241  0000                     _ACKEN	set	32300
   242  0000                     _ADIE	set	31982
   243  0000                     _INT1IE	set	32643
   244  0000                     _INT1IF	set	32640
   245  0000                     _PEIE	set	32662
   246  0000                     _PEN	set	32298
   247  0000                     _RCEN	set	32299
   248  0000                     _RSEN	set	32297
   249  0000                     _SEN	set	32296
   250  0000                     _TMR0IE	set	32661
   251  0000                     _TMR0IF	set	32658
   252  0000                     _TMR0ON	set	32431
   253  0000                     _TMR1IE	set	31976
   254  0000                     _TMR1IF	set	31984
   255  0000                     _TMR1ON	set	32360
   256  0000                     _TMR2IE	set	31977
   257  0000                     _TMR3IE	set	32001
   258  0000                     _TMR3IF	set	32009
   259  0000                     _TMR3ON	set	32136
   260  0000                     _TRISC3	set	31907
   261  0000                     _TRISC4	set	31908
   262  0000                     _nRBPU	set	32655
   263  00FB54                     STR_21:
   264  00FB54  25                 	db	37
   265  00FB55  30                 	db	48	;'0'
   266  00FB56  32                 	db	50	;'2'
   267  00FB57  64                 	db	100	;'d'
   268  00FB58  25                 	db	37
   269  00FB59  73                 	db	115	;'s'
   270  00FB5A  20                 	db	32
   271  00FB5B  7C                 	db	124
   272  00FB5C  20                 	db	32
   273  00FB5D  25                 	db	37
   274  00FB5E  30                 	db	48	;'0'
   275  00FB5F  32                 	db	50	;'2'
   276  00FB60  64                 	db	100	;'d'
   277  00FB61  3A                 	db	58	;':'
   278  00FB62  25                 	db	37
   279  00FB63  30                 	db	48	;'0'
   280  00FB64  32                 	db	50	;'2'
   281  00FB65  64                 	db	100	;'d'
   282  00FB66  3A                 	db	58	;':'
   283  00FB67  25                 	db	37
   284  00FB68  30                 	db	48	;'0'
   285  00FB69  32                 	db	50	;'2'
   286  00FB6A  64                 	db	100	;'d'
   287  00FB6B  00                 	db	0
   288  00FB6C                     STR_66:
   289  00FB6C  28                 	db	40
   290  00FB6D  64                 	db	100	;'d'
   291  00FB6E  61                 	db	97	;'a'
   292  00FB6F  74                 	db	116	;'t'
   293  00FB70  61                 	db	97	;'a'
   294  00FB71  3A                 	db	58	;':'
   295  00FB72  20                 	db	32
   296  00FB73  25                 	db	37
   297  00FB74  75                 	db	117	;'u'
   298  00FB75  2C                 	db	44
   299  00FB76  20                 	db	32
   300  00FB77  61                 	db	97	;'a'
   301  00FB78  64                 	db	100	;'d'
   302  00FB79  64                 	db	100	;'d'
   303  00FB7A  72                 	db	114	;'r'
   304  00FB7B  3A                 	db	58	;':'
   305  00FB7C  20                 	db	32
   306  00FB7D  25                 	db	37
   307  00FB7E  75                 	db	117	;'u'
   308  00FB7F  29                 	db	41
   309  00FB80  00                 	db	0
   310  00FB81                     STR_27:
   311  00FB81  4E                 	db	78	;'N'
   312  00FB82  4F                 	db	79	;'O'
   313  00FB83  20                 	db	32
   314  00FB84  4C                 	db	76	;'L'
   315  00FB85  41                 	db	65	;'A'
   316  00FB86  42                 	db	66	;'B'
   317  00FB87  3A                 	db	58	;':'
   318  00FB88  20                 	db	32
   319  00FB89  25                 	db	37
   320  00FB8A  64                 	db	100	;'d'
   321  00FB8B  7C                 	db	124
   322  00FB8C  4C                 	db	76	;'L'
   323  00FB8D  41                 	db	65	;'A'
   324  00FB8E  42                 	db	66	;'B'
   325  00FB8F  3A                 	db	58	;':'
   326  00FB90  20                 	db	32
   327  00FB91  25                 	db	37
   328  00FB92  64                 	db	100	;'d'
   329  00FB93  00                 	db	0
   330  00FB94                     STR_25:
   331  00FB94  4E                 	db	78	;'N'
   332  00FB95  4F                 	db	79	;'O'
   333  00FB96  20                 	db	32
   334  00FB97  54                 	db	84	;'T'
   335  00FB98  41                 	db	65	;'A'
   336  00FB99  42                 	db	66	;'B'
   337  00FB9A  3A                 	db	58	;':'
   338  00FB9B  20                 	db	32
   339  00FB9C  25                 	db	37
   340  00FB9D  64                 	db	100	;'d'
   341  00FB9E  7C                 	db	124
   342  00FB9F  54                 	db	84	;'T'
   343  00FBA0  41                 	db	65	;'A'
   344  00FBA1  42                 	db	66	;'B'
   345  00FBA2  3A                 	db	58	;':'
   346  00FBA3  20                 	db	32
   347  00FBA4  25                 	db	37
   348  00FBA5  64                 	db	100	;'d'
   349  00FBA6  00                 	db	0
   350  00FBA7                     STR_105:
   351  00FBA7  44                 	db	68	;'D'
   352  00FBA8  20                 	db	32
   353  00FBA9  57                 	db	87	;'W'
   354  00FBAA  49                 	db	73	;'I'
   355  00FBAB  4C                 	db	76	;'L'
   356  00FBAC  4C                 	db	76	;'L'
   357  00FBAD  20                 	db	32
   358  00FBAE  52                 	db	82	;'R'
   359  00FBAF  45                 	db	69	;'E'
   360  00FBB0  54                 	db	84	;'T'
   361  00FBB1  55                 	db	85	;'U'
   362  00FBB2  52                 	db	82	;'R'
   363  00FBB3  4E                 	db	78	;'N'
   364  00FBB4  20                 	db	32
   365  00FBB5  20                 	db	32
   366  00FBB6  20                 	db	32
   367  00FBB7  20                 	db	32
   368  00FBB8  00                 	db	0
   369  00FBB9                     STR_106:
   370  00FBB9  4F                 	db	79	;'O'
   371  00FBBA  54                 	db	84	;'T'
   372  00FBBB  48                 	db	72	;'H'
   373  00FBBC  45                 	db	69	;'E'
   374  00FBBD  52                 	db	82	;'R'
   375  00FBBE  20                 	db	32
   376  00FBBF  53                 	db	83	;'S'
   377  00FBC0  45                 	db	69	;'E'
   378  00FBC1  54                 	db	84	;'T'
   379  00FBC2  53                 	db	83	;'S'
   380  00FBC3  20                 	db	32
   381  00FBC4  52                 	db	82	;'R'
   382  00FBC5  41                 	db	65	;'A'
   383  00FBC6  35                 	db	53	;'5'
   384  00FBC7  20                 	db	32
   385  00FBC8  20                 	db	32
   386  00FBC9  20                 	db	32
   387  00FBCA  00                 	db	0
   388  00FBCB                     STR_3:
   389  00FBCB  2D                 	db	45
   390  00FBCC  2D                 	db	45
   391  00FBCD  20                 	db	32
   392  00FBCE  4C                 	db	76	;'L'
   393  00FBCF  4F                 	db	79	;'O'
   394  00FBD0  47                 	db	71	;'G'
   395  00FBD1  20                 	db	32
   396  00FBD2  25                 	db	37
   397  00FBD3  32                 	db	50	;'2'
   398  00FBD4  64                 	db	100	;'d'
   399  00FBD5  20                 	db	32
   400  00FBD6  48                 	db	72	;'H'
   401  00FBD7  45                 	db	69	;'E'
   402  00FBD8  52                 	db	82	;'R'
   403  00FBD9  45                 	db	69	;'E'
   404  00FBDA  2D                 	db	45
   405  00FBDB  2D                 	db	45
   406  00FBDC  00                 	db	0
   407  00FBDD                     STR_1:
   408  00FBDD  52                 	db	82	;'R'
   409  00FBDE  45                 	db	69	;'E'
   410  00FBDF  53                 	db	83	;'S'
   411  00FBE0  55                 	db	85	;'U'
   412  00FBE1  4C                 	db	76	;'L'
   413  00FBE2  54                 	db	84	;'T'
   414  00FBE3  53                 	db	83	;'S'
   415  00FBE4  20                 	db	32
   416  00FBE5  49                 	db	73	;'I'
   417  00FBE6  4E                 	db	78	;'N'
   418  00FBE7  20                 	db	32
   419  00FBE8  4C                 	db	76	;'L'
   420  00FBE9  4F                 	db	79	;'O'
   421  00FBEA  47                 	db	71	;'G'
   422  00FBEB  20                 	db	32
   423  00FBEC  25                 	db	37
   424  00FBED  64                 	db	100	;'d'
   425  00FBEE  00                 	db	0
   426  00FBEF                     STR_97:
   427  00FBEF  4D                 	db	77	;'M'
   428  00FBF0  49                 	db	73	;'I'
   429  00FBF1  44                 	db	68	;'D'
   430  00FBF2  20                 	db	32
   431  00FBF3  2D                 	db	45
   432  00FBF4  2D                 	db	45
   433  00FBF5  20                 	db	32
   434  00FBF6  32                 	db	50	;'2'
   435  00FBF7  73                 	db	115	;'s'
   436  00FBF8  20                 	db	32
   437  00FBF9  20                 	db	32
   438  00FBFA  20                 	db	32
   439  00FBFB  20                 	db	32
   440  00FBFC  20                 	db	32
   441  00FBFD  20                 	db	32
   442  00FBFE  20                 	db	32
   443  00FBFF  00                 	db	0
   444  00FC00                     STR_100:
   445  00FC00  44                 	db	68	;'D'
   446  00FC01  52                 	db	82	;'R'
   447  00FC02  4F                 	db	79	;'O'
   448  00FC03  50                 	db	80	;'P'
   449  00FC04  20                 	db	32
   450  00FC05  2D                 	db	45
   451  00FC06  2D                 	db	45
   452  00FC07  20                 	db	32
   453  00FC08  32                 	db	50	;'2'
   454  00FC09  73                 	db	115	;'s'
   455  00FC0A  20                 	db	32
   456  00FC0B  20                 	db	32
   457  00FC0C  20                 	db	32
   458  00FC0D  20                 	db	32
   459  00FC0E  20                 	db	32
   460  00FC0F  20                 	db	32
   461  00FC10  00                 	db	0
   462  00FC11                     STR_94:
   463  00FC11  4C                 	db	76	;'L'
   464  00FC12  45                 	db	69	;'E'
   465  00FC13  46                 	db	70	;'F'
   466  00FC14  54                 	db	84	;'T'
   467  00FC15  20                 	db	32
   468  00FC16  2D                 	db	45
   469  00FC17  2D                 	db	45
   470  00FC18  20                 	db	32
   471  00FC19  32                 	db	50	;'2'
   472  00FC1A  73                 	db	115	;'s'
   473  00FC1B  20                 	db	32
   474  00FC1C  20                 	db	32
   475  00FC1D  20                 	db	32
   476  00FC1E  20                 	db	32
   477  00FC1F  20                 	db	32
   478  00FC20  20                 	db	32
   479  00FC21  00                 	db	0
   480  00FC22                     STR_99:
   481  00FC22  4C                 	db	76	;'L'
   482  00FC23  45                 	db	69	;'E'
   483  00FC24  56                 	db	86	;'V'
   484  00FC25  45                 	db	69	;'E'
   485  00FC26  4C                 	db	76	;'L'
   486  00FC27  20                 	db	32
   487  00FC28  2D                 	db	45
   488  00FC29  2D                 	db	45
   489  00FC2A  20                 	db	32
   490  00FC2B  32                 	db	50	;'2'
   491  00FC2C  73                 	db	115	;'s'
   492  00FC2D  20                 	db	32
   493  00FC2E  20                 	db	32
   494  00FC2F  20                 	db	32
   495  00FC30  20                 	db	32
   496  00FC31  20                 	db	32
   497  00FC32  00                 	db	0
   498  00FC33                     STR_93:
   499  00FC33  52                 	db	82	;'R'
   500  00FC34  49                 	db	73	;'I'
   501  00FC35  47                 	db	71	;'G'
   502  00FC36  48                 	db	72	;'H'
   503  00FC37  54                 	db	84	;'T'
   504  00FC38  20                 	db	32
   505  00FC39  2D                 	db	45
   506  00FC3A  2D                 	db	45
   507  00FC3B  20                 	db	32
   508  00FC3C  32                 	db	50	;'2'
   509  00FC3D  73                 	db	115	;'s'
   510  00FC3E  20                 	db	32
   511  00FC3F  20                 	db	32
   512  00FC40  20                 	db	32
   513  00FC41  20                 	db	32
   514  00FC42  20                 	db	32
   515  00FC43  00                 	db	0
   516  00FC44                     STR_92:
   517  00FC44  4D                 	db	77	;'M'
   518  00FC45  49                 	db	73	;'I'
   519  00FC46  44                 	db	68	;'D'
   520  00FC47  44                 	db	68	;'D'
   521  00FC48  4C                 	db	76	;'L'
   522  00FC49  45                 	db	69	;'E'
   523  00FC4A  20                 	db	32
   524  00FC4B  2D                 	db	45
   525  00FC4C  2D                 	db	45
   526  00FC4D  20                 	db	32
   527  00FC4E  32                 	db	50	;'2'
   528  00FC4F  73                 	db	115	;'s'
   529  00FC50  20                 	db	32
   530  00FC51  20                 	db	32
   531  00FC52  20                 	db	32
   532  00FC53  20                 	db	32
   533  00FC54  00                 	db	0
   534  00FC55                     STR_109:
   535  00FC55  44                 	db	68	;'D'
   536  00FC56  20                 	db	32
   537  00FC57  57                 	db	87	;'W'
   538  00FC58  49                 	db	73	;'I'
   539  00FC59  4C                 	db	76	;'L'
   540  00FC5A  4C                 	db	76	;'L'
   541  00FC5B  20                 	db	32
   542  00FC5C  52                 	db	82	;'R'
   543  00FC5D  45                 	db	69	;'E'
   544  00FC5E  54                 	db	84	;'T'
   545  00FC5F  55                 	db	85	;'U'
   546  00FC60  52                 	db	82	;'R'
   547  00FC61  4E                 	db	78	;'N'
   548  00FC62  20                 	db	32
   549  00FC63  20                 	db	32
   550  00FC64  20                 	db	32
   551  00FC65  00                 	db	0
   552  00FC66                     STR_95:
   553  00FC66  4D                 	db	77	;'M'
   554  00FC67  49                 	db	73	;'I'
   555  00FC68  44                 	db	68	;'D'
   556  00FC69  2D                 	db	45
   557  00FC6A  4C                 	db	76	;'L'
   558  00FC6B  45                 	db	69	;'E'
   559  00FC6C  46                 	db	70	;'F'
   560  00FC6D  54                 	db	84	;'T'
   561  00FC6E  20                 	db	32
   562  00FC6F  2D                 	db	45
   563  00FC70  2D                 	db	45
   564  00FC71  20                 	db	32
   565  00FC72  32                 	db	50	;'2'
   566  00FC73  73                 	db	115	;'s'
   567  00FC74  20                 	db	32
   568  00FC75  20                 	db	32
   569  00FC76  00                 	db	0
   570  00FC77                     STR_96:
   571  00FC77  4D                 	db	77	;'M'
   572  00FC78  49                 	db	73	;'I'
   573  00FC79  44                 	db	68	;'D'
   574  00FC7A  2D                 	db	45
   575  00FC7B  52                 	db	82	;'R'
   576  00FC7C  49                 	db	73	;'I'
   577  00FC7D  47                 	db	71	;'G'
   578  00FC7E  48                 	db	72	;'H'
   579  00FC7F  54                 	db	84	;'T'
   580  00FC80  20                 	db	32
   581  00FC81  2D                 	db	45
   582  00FC82  2D                 	db	45
   583  00FC83  20                 	db	32
   584  00FC84  32                 	db	50	;'2'
   585  00FC85  73                 	db	115	;'s'
   586  00FC86  20                 	db	32
   587  00FC87  00                 	db	0
   588  00FC88                     STR_110:
   589  00FC88  45                 	db	69	;'E'
   590  00FC89  4C                 	db	76	;'L'
   591  00FC8A  53                 	db	83	;'S'
   592  00FC8B  45                 	db	69	;'E'
   593  00FC8C  20                 	db	32
   594  00FC8D  54                 	db	84	;'T'
   595  00FC8E  4F                 	db	79	;'O'
   596  00FC8F  47                 	db	71	;'G'
   597  00FC90  47                 	db	71	;'G'
   598  00FC91  4C                 	db	76	;'L'
   599  00FC92  45                 	db	69	;'E'
   600  00FC93  53                 	db	83	;'S'
   601  00FC94  20                 	db	32
   602  00FC95  52                 	db	82	;'R'
   603  00FC96  41                 	db	65	;'A'
   604  00FC97  35                 	db	53	;'5'
   605  00FC98  00                 	db	0
   606  00FC99                     STR_72:
   607  00FC99  41                 	db	65	;'A'
   608  00FC9A  4C                 	db	76	;'L'
   609  00FC9B  47                 	db	71	;'G'
   610  00FC9C  31                 	db	49	;'1'
   611  00FC9D  3A                 	db	58	;':'
   612  00FC9E  20                 	db	32
   613  00FC9F  39                 	db	57	;'9'
   614  00FCA0  20                 	db	32
   615  00FCA1  50                 	db	80	;'P'
   616  00FCA2  4F                 	db	79	;'O'
   617  00FCA3  50                 	db	80	;'P'
   618  00FCA4  4E                 	db	78	;'N'
   619  00FCA5  4F                 	db	79	;'O'
   620  00FCA6  54                 	db	84	;'T'
   621  00FCA7  41                 	db	65	;'A'
   622  00FCA8  42                 	db	66	;'B'
   623  00FCA9  00                 	db	0
   624  00FCAA                     STR_68:
   625  00FCAA  31                 	db	49	;'1'
   626  00FCAB  2E                 	db	46
   627  00FCAC  41                 	db	65	;'A'
   628  00FCAD  4C                 	db	76	;'L'
   629  00FCAE  47                 	db	71	;'G'
   630  00FCAF  7C                 	db	124
   631  00FCB0  32                 	db	50	;'2'
   632  00FCB1  2E                 	db	46
   633  00FCB2  53                 	db	83	;'S'
   634  00FCB3  4E                 	db	78	;'N'
   635  00FCB4  52                 	db	82	;'R'
   636  00FCB5  7C                 	db	124
   637  00FCB6  33                 	db	51	;'3'
   638  00FCB7  2E                 	db	46
   639  00FCB8  41                 	db	65	;'A'
   640  00FCB9  43                 	db	67	;'C'
   641  00FCBA  00                 	db	0
   642  00FCBB                     STR_87:
   643  00FCBB  54                 	db	84	;'T'
   644  00FCBC  53                 	db	83	;'S'
   645  00FCBD  54                 	db	84	;'T'
   646  00FCBE  3A                 	db	58	;':'
   647  00FCBF  20                 	db	32
   648  00FCC0  43                 	db	67	;'C'
   649  00FCC1  4F                 	db	79	;'O'
   650  00FCC2  4E                 	db	78	;'N'
   651  00FCC3  44                 	db	68	;'D'
   652  00FCC4  20                 	db	32
   653  00FCC5  53                 	db	83	;'S'
   654  00FCC6  4F                 	db	79	;'O'
   655  00FCC7  4C                 	db	76	;'L'
   656  00FCC8  4E                 	db	78	;'N'
   657  00FCC9  27                 	db	39
   658  00FCCA  44                 	db	68	;'D'
   659  00FCCB  00                 	db	0
   660  00FCCC                     STR_89:
   661  00FCCC  54                 	db	84	;'T'
   662  00FCCD  53                 	db	83	;'S'
   663  00FCCE  54                 	db	84	;'T'
   664  00FCCF  3A                 	db	58	;':'
   665  00FCD0  20                 	db	32
   666  00FCD1  50                 	db	80	;'P'
   667  00FCD2  55                 	db	85	;'U'
   668  00FCD3  53                 	db	83	;'S'
   669  00FCD4  48                 	db	72	;'H'
   670  00FCD5  20                 	db	32
   671  00FCD6  53                 	db	83	;'S'
   672  00FCD7  4F                 	db	79	;'O'
   673  00FCD8  4C                 	db	76	;'L'
   674  00FCD9  4E                 	db	78	;'N'
   675  00FCDA  27                 	db	39
   676  00FCDB  44                 	db	68	;'D'
   677  00FCDC  00                 	db	0
   678  00FCDD                     STR_69:
   679  00FCDD  34                 	db	52	;'4'
   680  00FCDE  2E                 	db	46
   681  00FCDF  48                 	db	72	;'H'
   682  00FCE0  49                 	db	73	;'I'
   683  00FCE1  7C                 	db	124
   684  00FCE2  35                 	db	53	;'5'
   685  00FCE3  2E                 	db	46
   686  00FCE4  54                 	db	84	;'T'
   687  00FCE5  4F                 	db	79	;'O'
   688  00FCE6  47                 	db	71	;'G'
   689  00FCE7  7C                 	db	124
   690  00FCE8  36                 	db	54	;'6'
   691  00FCE9  2E                 	db	46
   692  00FCEA  45                 	db	69	;'E'
   693  00FCEB  45                 	db	69	;'E'
   694  00FCEC  50                 	db	80	;'P'
   695  00FCED  00                 	db	0
   696  00FCEE                     STR_41:
   697  00FCEE  4C                 	db	76	;'L'
   698  00FCEF  4F                 	db	79	;'O'
   699  00FCF0  47                 	db	71	;'G'
   700  00FCF1  20                 	db	32
   701  00FCF2  31                 	db	49	;'1'
   702  00FCF3  20                 	db	32
   703  00FCF4  20                 	db	32
   704  00FCF5  20                 	db	32
   705  00FCF6  20                 	db	32
   706  00FCF7  20                 	db	32
   707  00FCF8  20                 	db	32
   708  00FCF9  20                 	db	32
   709  00FCFA  20                 	db	32
   710  00FCFB  20                 	db	32
   711  00FCFC  20                 	db	32
   712  00FCFD  20                 	db	32
   713  00FCFE  00                 	db	0
   714  00FCFF                     STR_40:
   715  00FCFF  4C                 	db	76	;'L'
   716  00FD00  4F                 	db	79	;'O'
   717  00FD01  47                 	db	71	;'G'
   718  00FD02  20                 	db	32
   719  00FD03  32                 	db	50	;'2'
   720  00FD04  20                 	db	32
   721  00FD05  20                 	db	32
   722  00FD06  20                 	db	32
   723  00FD07  20                 	db	32
   724  00FD08  20                 	db	32
   725  00FD09  20                 	db	32
   726  00FD0A  20                 	db	32
   727  00FD0B  20                 	db	32
   728  00FD0C  20                 	db	32
   729  00FD0D  20                 	db	32
   730  00FD0E  20                 	db	32
   731  00FD0F  00                 	db	0
   732  00FD10                     STR_44:
   733  00FD10  4C                 	db	76	;'L'
   734  00FD11  4F                 	db	79	;'O'
   735  00FD12  47                 	db	71	;'G'
   736  00FD13  20                 	db	32
   737  00FD14  33                 	db	51	;'3'
   738  00FD15  20                 	db	32
   739  00FD16  20                 	db	32
   740  00FD17  20                 	db	32
   741  00FD18  20                 	db	32
   742  00FD19  20                 	db	32
   743  00FD1A  20                 	db	32
   744  00FD1B  20                 	db	32
   745  00FD1C  20                 	db	32
   746  00FD1D  20                 	db	32
   747  00FD1E  20                 	db	32
   748  00FD1F  20                 	db	32
   749  00FD20  00                 	db	0
   750  00FD21                     STR_48:
   751  00FD21  4C                 	db	76	;'L'
   752  00FD22  4F                 	db	79	;'O'
   753  00FD23  47                 	db	71	;'G'
   754  00FD24  20                 	db	32
   755  00FD25  34                 	db	52	;'4'
   756  00FD26  20                 	db	32
   757  00FD27  20                 	db	32
   758  00FD28  20                 	db	32
   759  00FD29  20                 	db	32
   760  00FD2A  20                 	db	32
   761  00FD2B  20                 	db	32
   762  00FD2C  20                 	db	32
   763  00FD2D  20                 	db	32
   764  00FD2E  20                 	db	32
   765  00FD2F  20                 	db	32
   766  00FD30  20                 	db	32
   767  00FD31  00                 	db	0
   768  00FD32                     STR_36:
   769  00FD32  33                 	db	51	;'3'
   770  00FD33  2E                 	db	46
   771  00FD34  20                 	db	32
   772  00FD35  4C                 	db	76	;'L'
   773  00FD36  4F                 	db	79	;'O'
   774  00FD37  47                 	db	71	;'G'
   775  00FD38  53                 	db	83	;'S'
   776  00FD39  20                 	db	32
   777  00FD3A  20                 	db	32
   778  00FD3B  20                 	db	32
   779  00FD3C  20                 	db	32
   780  00FD3D  20                 	db	32
   781  00FD3E  20                 	db	32
   782  00FD3F  20                 	db	32
   783  00FD40  20                 	db	32
   784  00FD41  20                 	db	32
   785  00FD42  00                 	db	0
   786  00FD43                     STR_32:
   787  00FD43  32                 	db	50	;'2'
   788  00FD44  2E                 	db	46
   789  00FD45  20                 	db	32
   790  00FD46  53                 	db	83	;'S'
   791  00FD47  4F                 	db	79	;'O'
   792  00FD48  52                 	db	82	;'R'
   793  00FD49  54                 	db	84	;'T'
   794  00FD4A  20                 	db	32
   795  00FD4B  20                 	db	32
   796  00FD4C  20                 	db	32
   797  00FD4D  20                 	db	32
   798  00FD4E  20                 	db	32
   799  00FD4F  20                 	db	32
   800  00FD50  20                 	db	32
   801  00FD51  20                 	db	32
   802  00FD52  20                 	db	32
   803  00FD53  00                 	db	0
   804  00FD54                     STR_33:
   805  00FD54  31                 	db	49	;'1'
   806  00FD55  2E                 	db	46
   807  00FD56  20                 	db	32
   808  00FD57  44                 	db	68	;'D'
   809  00FD58  41                 	db	65	;'A'
   810  00FD59  54                 	db	84	;'T'
   811  00FD5A  45                 	db	69	;'E'
   812  00FD5B  2F                 	db	47
   813  00FD5C  54                 	db	84	;'T'
   814  00FD5D  49                 	db	73	;'I'
   815  00FD5E  4D                 	db	77	;'M'
   816  00FD5F  45                 	db	69	;'E'
   817  00FD60  20                 	db	32
   818  00FD61  20                 	db	32
   819  00FD62  20                 	db	32
   820  00FD63  20                 	db	32
   821  00FD64  00                 	db	0
   822  00FD65                     STR_24:
   823  00FD65  20                 	db	32
   824  00FD66  2D                 	db	45
   825  00FD67  2D                 	db	45
   826  00FD68  20                 	db	32
   827  00FD69  50                 	db	80	;'P'
   828  00FD6A  4F                 	db	79	;'O'
   829  00FD6B  50                 	db	80	;'P'
   830  00FD6C  20                 	db	32
   831  00FD6D  20                 	db	32
   832  00FD6E  43                 	db	67	;'C'
   833  00FD6F  41                 	db	65	;'A'
   834  00FD70  4E                 	db	78	;'N'
   835  00FD71  20                 	db	32
   836  00FD72  2D                 	db	45
   837  00FD73  2D                 	db	45
   838  00FD74  20                 	db	32
   839  00FD75  00                 	db	0
   840  00FD76                     STR_26:
   841  00FD76  20                 	db	32
   842  00FD77  2D                 	db	45
   843  00FD78  2D                 	db	45
   844  00FD79  20                 	db	32
   845  00FD7A  53                 	db	83	;'S'
   846  00FD7B  4F                 	db	79	;'O'
   847  00FD7C  55                 	db	85	;'U'
   848  00FD7D  50                 	db	80	;'P'
   849  00FD7E  20                 	db	32
   850  00FD7F  43                 	db	67	;'C'
   851  00FD80  41                 	db	65	;'A'
   852  00FD81  4E                 	db	78	;'N'
   853  00FD82  20                 	db	32
   854  00FD83  2D                 	db	45
   855  00FD84  2D                 	db	45
   856  00FD85  20                 	db	32
   857  00FD86  00                 	db	0
   858  00FD87                     STR_28:
   859  00FD87  2D                 	db	45
   860  00FD88  2D                 	db	45
   861  00FD89  20                 	db	32
   862  00FD8A  54                 	db	84	;'T'
   863  00FD8B  4F                 	db	79	;'O'
   864  00FD8C  54                 	db	84	;'T'
   865  00FD8D  41                 	db	65	;'A'
   866  00FD8E  4C                 	db	76	;'L'
   867  00FD8F  20                 	db	32
   868  00FD90  43                 	db	67	;'C'
   869  00FD91  41                 	db	65	;'A'
   870  00FD92  4E                 	db	78	;'N'
   871  00FD93  53                 	db	83	;'S'
   872  00FD94  20                 	db	32
   873  00FD95  2D                 	db	45
   874  00FD96  2D                 	db	45
   875  00FD97  00                 	db	0
   876  00FD98                     STR_39:
   877  00FD98  4C                 	db	76	;'L'
   878  00FD99  4F                 	db	79	;'O'
   879  00FD9A  47                 	db	71	;'G'
   880  00FD9B  20                 	db	32
   881  00FD9C  31                 	db	49	;'1'
   882  00FD9D  20                 	db	32
   883  00FD9E  20                 	db	32
   884  00FD9F  20                 	db	32
   885  00FDA0  20                 	db	32
   886  00FDA1  20                 	db	32
   887  00FDA2  20                 	db	32
   888  00FDA3  20                 	db	32
   889  00FDA4  20                 	db	32
   890  00FDA5  20                 	db	32
   891  00FDA6  20                 	db	32
   892  00FDA7  3C                 	db	60	;'<'
   893  00FDA8  00                 	db	0
   894  00FDA9                     STR_42:
   895  00FDA9  4C                 	db	76	;'L'
   896  00FDAA  4F                 	db	79	;'O'
   897  00FDAB  47                 	db	71	;'G'
   898  00FDAC  20                 	db	32
   899  00FDAD  32                 	db	50	;'2'
   900  00FDAE  20                 	db	32
   901  00FDAF  20                 	db	32
   902  00FDB0  20                 	db	32
   903  00FDB1  20                 	db	32
   904  00FDB2  20                 	db	32
   905  00FDB3  20                 	db	32
   906  00FDB4  20                 	db	32
   907  00FDB5  20                 	db	32
   908  00FDB6  20                 	db	32
   909  00FDB7  20                 	db	32
   910  00FDB8  3C                 	db	60	;'<'
   911  00FDB9  00                 	db	0
   912  00FDBA                     STR_46:
   913  00FDBA  4C                 	db	76	;'L'
   914  00FDBB  4F                 	db	79	;'O'
   915  00FDBC  47                 	db	71	;'G'
   916  00FDBD  20                 	db	32
   917  00FDBE  33                 	db	51	;'3'
   918  00FDBF  20                 	db	32
   919  00FDC0  20                 	db	32
   920  00FDC1  20                 	db	32
   921  00FDC2  20                 	db	32
   922  00FDC3  20                 	db	32
   923  00FDC4  20                 	db	32
   924  00FDC5  20                 	db	32
   925  00FDC6  20                 	db	32
   926  00FDC7  20                 	db	32
   927  00FDC8  20                 	db	32
   928  00FDC9  3C                 	db	60	;'<'
   929  00FDCA  00                 	db	0
   930  00FDCB                     STR_50:
   931  00FDCB  4C                 	db	76	;'L'
   932  00FDCC  4F                 	db	79	;'O'
   933  00FDCD  47                 	db	71	;'G'
   934  00FDCE  20                 	db	32
   935  00FDCF  34                 	db	52	;'4'
   936  00FDD0  20                 	db	32
   937  00FDD1  20                 	db	32
   938  00FDD2  20                 	db	32
   939  00FDD3  20                 	db	32
   940  00FDD4  20                 	db	32
   941  00FDD5  20                 	db	32
   942  00FDD6  20                 	db	32
   943  00FDD7  20                 	db	32
   944  00FDD8  20                 	db	32
   945  00FDD9  20                 	db	32
   946  00FDDA  3C                 	db	60	;'<'
   947  00FDDB  00                 	db	0
   948  00FDDC                     STR_38:
   949  00FDDC  33                 	db	51	;'3'
   950  00FDDD  2E                 	db	46
   951  00FDDE  20                 	db	32
   952  00FDDF  4C                 	db	76	;'L'
   953  00FDE0  4F                 	db	79	;'O'
   954  00FDE1  47                 	db	71	;'G'
   955  00FDE2  53                 	db	83	;'S'
   956  00FDE3  20                 	db	32
   957  00FDE4  20                 	db	32
   958  00FDE5  20                 	db	32
   959  00FDE6  20                 	db	32
   960  00FDE7  20                 	db	32
   961  00FDE8  20                 	db	32
   962  00FDE9  20                 	db	32
   963  00FDEA  20                 	db	32
   964  00FDEB  3C                 	db	60	;'<'
   965  00FDEC  00                 	db	0
   966  00FDED                     STR_34:
   967  00FDED  32                 	db	50	;'2'
   968  00FDEE  2E                 	db	46
   969  00FDEF  20                 	db	32
   970  00FDF0  53                 	db	83	;'S'
   971  00FDF1  4F                 	db	79	;'O'
   972  00FDF2  52                 	db	82	;'R'
   973  00FDF3  54                 	db	84	;'T'
   974  00FDF4  20                 	db	32
   975  00FDF5  20                 	db	32
   976  00FDF6  20                 	db	32
   977  00FDF7  20                 	db	32
   978  00FDF8  20                 	db	32
   979  00FDF9  20                 	db	32
   980  00FDFA  20                 	db	32
   981  00FDFB  20                 	db	32
   982  00FDFC  3C                 	db	60	;'<'
   983  00FDFD  00                 	db	0
   984  00FDFE                     STR_31:
   985  00FDFE  31                 	db	49	;'1'
   986  00FDFF  2E                 	db	46
   987  00FE00  20                 	db	32
   988  00FE01  44                 	db	68	;'D'
   989  00FE02  41                 	db	65	;'A'
   990  00FE03  54                 	db	84	;'T'
   991  00FE04  45                 	db	69	;'E'
   992  00FE05  2F                 	db	47
   993  00FE06  54                 	db	84	;'T'
   994  00FE07  49                 	db	73	;'I'
   995  00FE08  4D                 	db	77	;'M'
   996  00FE09  45                 	db	69	;'E'
   997  00FE0A  20                 	db	32
   998  00FE0B  20                 	db	32
   999  00FE0C  20                 	db	32
  1000  00FE0D  3C                 	db	60	;'<'
  1001  00FE0E  00                 	db	0
  1002  00FE0F                     STR_6:
  1003  00FE0F  50                 	db	80	;'P'
  1004  00FE10  41                 	db	65	;'A'
  1005  00FE11  55                 	db	85	;'U'
  1006  00FE12  53                 	db	83	;'S'
  1007  00FE13  45                 	db	69	;'E'
  1008  00FE14  20                 	db	32
  1009  00FE15  3C                 	db	60	;'<'
  1010  00FE16  20                 	db	32
  1011  00FE17  7C                 	db	124
  1012  00FE18  20                 	db	32
  1013  00FE19  42                 	db	66	;'B'
  1014  00FE1A  41                 	db	65	;'A'
  1015  00FE1B  43                 	db	67	;'C'
  1016  00FE1C  4B                 	db	75	;'K'
  1017  00FE1D  20                 	db	32
  1018  00FE1E  3E                 	db	62	;'>'
  1019  00FE1F  00                 	db	0
  1020  00FE20                     STR_30:
  1021  00FE20  50                 	db	80	;'P'
  1022  00FE21  55                 	db	85	;'U'
  1023  00FE22  53                 	db	83	;'S'
  1024  00FE23  48                 	db	72	;'H'
  1025  00FE24  20                 	db	32
  1026  00FE25  54                 	db	84	;'T'
  1027  00FE26  4F                 	db	79	;'O'
  1028  00FE27  20                 	db	32
  1029  00FE28  43                 	db	67	;'C'
  1030  00FE29  4F                 	db	79	;'O'
  1031  00FE2A  4E                 	db	78	;'N'
  1032  00FE2B  54                 	db	84	;'T'
  1033  00FE2C  49                 	db	73	;'I'
  1034  00FE2D  4E                 	db	78	;'N'
  1035  00FE2E  55                 	db	85	;'U'
  1036  00FE2F  45                 	db	69	;'E'
  1037  00FE30  00                 	db	0
  1038  00FE31                     STR_82:
  1039  00FE31  4D                 	db	77	;'M'
  1040  00FE32  41                 	db	65	;'A'
  1041  00FE33  47                 	db	71	;'G'
  1042  00FE34  5F                 	db	95	;'_'
  1043  00FE35  73                 	db	115	;'s'
  1044  00FE36  69                 	db	105	;'i'
  1045  00FE37  67                 	db	103	;'g'
  1046  00FE38  6E                 	db	110	;'n'
  1047  00FE39  61                 	db	97	;'a'
  1048  00FE3A  6C                 	db	108	;'l'
  1049  00FE3B  3A                 	db	58	;':'
  1050  00FE3C  20                 	db	32
  1051  00FE3D  25                 	db	37
  1052  00FE3E  64                 	db	100	;'d'
  1053  00FE3F  20                 	db	32
  1054  00FE40  00                 	db	0
  1055  00FE41                     STR_98:
  1056  00FE41  54                 	db	84	;'T'
  1057  00FE42  53                 	db	83	;'S'
  1058  00FE43  54                 	db	84	;'T'
  1059  00FE44  3A                 	db	58	;':'
  1060  00FE45  20                 	db	32
  1061  00FE46  54                 	db	84	;'T'
  1062  00FE47  49                 	db	73	;'I'
  1063  00FE48  4C                 	db	76	;'L'
  1064  00FE49  54                 	db	84	;'T'
  1065  00FE4A  20                 	db	32
  1066  00FE4B  53                 	db	83	;'S'
  1067  00FE4C  45                 	db	69	;'E'
  1068  00FE4D  52                 	db	82	;'R'
  1069  00FE4E  56                 	db	86	;'V'
  1070  00FE4F  4F                 	db	79	;'O'
  1071  00FE50  00                 	db	0
  1072  00FE51                     STR_4:
  1073  00FE51  44                 	db	68	;'D'
  1074  00FE52  49                 	db	73	;'I'
  1075  00FE53  44                 	db	68	;'D'
  1076  00FE54  4E                 	db	78	;'N'
  1077  00FE55  27                 	db	39
  1078  00FE56  54                 	db	84	;'T'
  1079  00FE57  20                 	db	32
  1080  00FE58  43                 	db	67	;'C'
  1081  00FE59  4F                 	db	79	;'O'
  1082  00FE5A  4D                 	db	77	;'M'
  1083  00FE5B  50                 	db	80	;'P'
  1084  00FE5C  4C                 	db	76	;'L'
  1085  00FE5D  45                 	db	69	;'E'
  1086  00FE5E  54                 	db	84	;'T'
  1087  00FE5F  45                 	db	69	;'E'
  1088  00FE60  00                 	db	0
  1089  00FE61                     STR_80:
  1090  00FE61  49                 	db	73	;'I'
  1091  00FE62  52                 	db	82	;'R'
  1092  00FE63  5F                 	db	95	;'_'
  1093  00FE64  73                 	db	115	;'s'
  1094  00FE65  69                 	db	105	;'i'
  1095  00FE66  67                 	db	103	;'g'
  1096  00FE67  6E                 	db	110	;'n'
  1097  00FE68  61                 	db	97	;'a'
  1098  00FE69  6C                 	db	108	;'l'
  1099  00FE6A  3A                 	db	58	;':'
  1100  00FE6B  20                 	db	32
  1101  00FE6C  25                 	db	37
  1102  00FE6D  64                 	db	100	;'d'
  1103  00FE6E  20                 	db	32
  1104  00FE6F  00                 	db	0
  1105  00FE70                     STR_104:
  1106  00FE70  43                 	db	67	;'C'
  1107  00FE71  41                 	db	65	;'A'
  1108  00FE72  4D                 	db	77	;'M'
  1109  00FE73  20                 	db	32
  1110  00FE74  44                 	db	68	;'D'
  1111  00FE75  57                 	db	87	;'W'
  1112  00FE76  4E                 	db	78	;'N'
  1113  00FE77  20                 	db	32
  1114  00FE78  7C                 	db	124
  1115  00FE79  52                 	db	82	;'R'
  1116  00FE7A  43                 	db	67	;'C'
  1117  00FE7B  30                 	db	48	;'0'
  1118  00FE7C  3D                 	db	61	;'='
  1119  00FE7D  30                 	db	48	;'0'
  1120  00FE7E  00                 	db	0
  1121  00FE7F                     STR_103:
  1122  00FE7F  43                 	db	67	;'C'
  1123  00FE80  41                 	db	65	;'A'
  1124  00FE81  4D                 	db	77	;'M'
  1125  00FE82  20                 	db	32
  1126  00FE83  55                 	db	85	;'U'
  1127  00FE84  50                 	db	80	;'P'
  1128  00FE85  20                 	db	32
  1129  00FE86  20                 	db	32
  1130  00FE87  7C                 	db	124
  1131  00FE88  52                 	db	82	;'R'
  1132  00FE89  43                 	db	67	;'C'
  1133  00FE8A  30                 	db	48	;'0'
  1134  00FE8B  3D                 	db	61	;'='
  1135  00FE8C  31                 	db	49	;'1'
  1136  00FE8D  00                 	db	0
  1137  00FE8E                     STR_81:
  1138  00FE8E  54                 	db	84	;'T'
  1139  00FE8F  53                 	db	83	;'S'
  1140  00FE90  54                 	db	84	;'T'
  1141  00FE91  3A                 	db	58	;':'
  1142  00FE92  20                 	db	32
  1143  00FE93  4D                 	db	77	;'M'
  1144  00FE94  41                 	db	65	;'A'
  1145  00FE95  47                 	db	71	;'G'
  1146  00FE96  4E                 	db	78	;'N'
  1147  00FE97  45                 	db	69	;'E'
  1148  00FE98  54                 	db	84	;'T'
  1149  00FE99  49                 	db	73	;'I'
  1150  00FE9A  53                 	db	83	;'S'
  1151  00FE9B  4D                 	db	77	;'M'
  1152  00FE9C  00                 	db	0
  1153  00FE9D                     STR_102:
  1154  00FE9D  54                 	db	84	;'T'
  1155  00FE9E  53                 	db	83	;'S'
  1156  00FE9F  54                 	db	84	;'T'
  1157  00FEA0  3A                 	db	58	;':'
  1158  00FEA1  20                 	db	32
  1159  00FEA2  43                 	db	67	;'C'
  1160  00FEA3  41                 	db	65	;'A'
  1161  00FEA4  4D                 	db	77	;'M'
  1162  00FEA5  20                 	db	32
  1163  00FEA6  53                 	db	83	;'S'
  1164  00FEA7  45                 	db	69	;'E'
  1165  00FEA8  52                 	db	82	;'R'
  1166  00FEA9  56                 	db	86	;'V'
  1167  00FEAA  4F                 	db	79	;'O'
  1168  00FEAB  00                 	db	0
  1169  00FEAC                     STR_91:
  1170  00FEAC  54                 	db	84	;'T'
  1171  00FEAD  53                 	db	83	;'S'
  1172  00FEAE  54                 	db	84	;'T'
  1173  00FEAF  3A                 	db	58	;':'
  1174  00FEB0  20                 	db	32
  1175  00FEB1  50                 	db	80	;'P'
  1176  00FEB2  41                 	db	65	;'A'
  1177  00FEB3  4E                 	db	78	;'N'
  1178  00FEB4  20                 	db	32
  1179  00FEB5  53                 	db	83	;'S'
  1180  00FEB6  45                 	db	69	;'E'
  1181  00FEB7  52                 	db	82	;'R'
  1182  00FEB8  56                 	db	86	;'V'
  1183  00FEB9  4F                 	db	79	;'O'
  1184  00FEBA  00                 	db	0
  1185  00FEBB                     STR_75:
  1186  00FEBB  41                 	db	65	;'A'
  1187  00FEBC  4C                 	db	76	;'L'
  1188  00FEBD  47                 	db	71	;'G'
  1189  00FEBE  34                 	db	52	;'4'
  1190  00FEBF  3A                 	db	58	;':'
  1191  00FEC0  20                 	db	32
  1192  00FEC1  41                 	db	65	;'A'
  1193  00FEC2  4C                 	db	76	;'L'
  1194  00FEC3  4C                 	db	76	;'L'
  1195  00FEC4  20                 	db	32
  1196  00FEC5  43                 	db	67	;'C'
  1197  00FEC6  41                 	db	65	;'A'
  1198  00FEC7  4E                 	db	78	;'N'
  1199  00FEC8  53                 	db	83	;'S'
  1200  00FEC9  00                 	db	0
  1201  00FECA                     STR_85:
  1202  00FECA  54                 	db	84	;'T'
  1203  00FECB  53                 	db	83	;'S'
  1204  00FECC  54                 	db	84	;'T'
  1205  00FECD  3A                 	db	58	;':'
  1206  00FECE  20                 	db	32
  1207  00FECF  44                 	db	68	;'D'
  1208  00FED0  43                 	db	67	;'C'
  1209  00FED1  20                 	db	32
  1210  00FED2  4D                 	db	77	;'M'
  1211  00FED3  4F                 	db	79	;'O'
  1212  00FED4  54                 	db	84	;'T'
  1213  00FED5  4F                 	db	79	;'O'
  1214  00FED6  52                 	db	82	;'R'
  1215  00FED7  53                 	db	83	;'S'
  1216  00FED8  00                 	db	0
  1217  00FED9                     STR_70:
  1218  00FED9  41                 	db	65	;'A'
  1219  00FEDA  4C                 	db	76	;'L'
  1220  00FEDB  47                 	db	71	;'G'
  1221  00FEDC  4F                 	db	79	;'O'
  1222  00FEDD  52                 	db	82	;'R'
  1223  00FEDE  49                 	db	73	;'I'
  1224  00FEDF  54                 	db	84	;'T'
  1225  00FEE0  48                 	db	72	;'H'
  1226  00FEE1  4D                 	db	77	;'M'
  1227  00FEE2  20                 	db	32
  1228  00FEE3  54                 	db	84	;'T'
  1229  00FEE4  45                 	db	69	;'E'
  1230  00FEE5  53                 	db	83	;'S'
  1231  00FEE6  54                 	db	84	;'T'
  1232  00FEE7  00                 	db	0
  1233  00FEE8                     STR_86:
  1234  00FEE8  50                 	db	80	;'P'
  1235  00FEE9  49                 	db	73	;'I'
  1236  00FEEA  4E                 	db	78	;'N'
  1237  00FEEB  20                 	db	32
  1238  00FEEC  52                 	db	82	;'R'
  1239  00FEED  41                 	db	65	;'A'
  1240  00FEEE  35                 	db	53	;'5'
  1241  00FEEF  20                 	db	32
  1242  00FEF0  48                 	db	72	;'H'
  1243  00FEF1  49                 	db	73	;'I'
  1244  00FEF2  47                 	db	71	;'G'
  1245  00FEF3  48                 	db	72	;'H'
  1246  00FEF4  2E                 	db	46
  1247  00FEF5  00                 	db	0
  1248  00FEF6                     STR_73:
  1249  00FEF6  41                 	db	65	;'A'
  1250  00FEF7  4C                 	db	76	;'L'
  1251  00FEF8  47                 	db	71	;'G'
  1252  00FEF9  32                 	db	50	;'2'
  1253  00FEFA  3A                 	db	58	;':'
  1254  00FEFB  20                 	db	32
  1255  00FEFC  31                 	db	49	;'1'
  1256  00FEFD  32                 	db	50	;'2'
  1257  00FEFE  20                 	db	32
  1258  00FEFF  43                 	db	67	;'C'
  1259  00FF00  41                 	db	65	;'A'
  1260  00FF01  4E                 	db	78	;'N'
  1261  00FF02  53                 	db	83	;'S'
  1262  00FF03  00                 	db	0
  1263  00FF04                     STR_76:
  1264  00FF04  41                 	db	65	;'A'
  1265  00FF05  4C                 	db	76	;'L'
  1266  00FF06  47                 	db	71	;'G'
  1267  00FF07  35                 	db	53	;'5'
  1268  00FF08  3A                 	db	58	;':'
  1269  00FF09  20                 	db	32
  1270  00FF0A  4E                 	db	78	;'N'
  1271  00FF0B  4F                 	db	79	;'O'
  1272  00FF0C  20                 	db	32
  1273  00FF0D  43                 	db	67	;'C'
  1274  00FF0E  41                 	db	65	;'A'
  1275  00FF0F  4E                 	db	78	;'N'
  1276  00FF10  53                 	db	83	;'S'
  1277  00FF11  00                 	db	0
  1278  00FF12                     STR_71:
  1279  00FF12  50                 	db	80	;'P'
  1280  00FF13  55                 	db	85	;'U'
  1281  00FF14  53                 	db	83	;'S'
  1282  00FF15  48                 	db	72	;'H'
  1283  00FF16  20                 	db	32
  1284  00FF17  54                 	db	84	;'T'
  1285  00FF18  4F                 	db	79	;'O'
  1286  00FF19  20                 	db	32
  1287  00FF1A  53                 	db	83	;'S'
  1288  00FF1B  54                 	db	84	;'T'
  1289  00FF1C  41                 	db	65	;'A'
  1290  00FF1D  52                 	db	82	;'R'
  1291  00FF1E  54                 	db	84	;'T'
  1292  00FF1F  00                 	db	0
  1293  00FF20                     STR_23:
  1294  00FF20  25                 	db	37
  1295  00FF21  64                 	db	100	;'d'
  1296  00FF22  20                 	db	32
  1297  00FF23  4D                 	db	77	;'M'
  1298  00FF24  49                 	db	73	;'I'
  1299  00FF25  4E                 	db	78	;'N'
  1300  00FF26  20                 	db	32
  1301  00FF27  25                 	db	37
  1302  00FF28  64                 	db	100	;'d'
  1303  00FF29  20                 	db	32
  1304  00FF2A  53                 	db	83	;'S'
  1305  00FF2B  45                 	db	69	;'E'
  1306  00FF2C  43                 	db	67	;'C'
  1307  00FF2D  00                 	db	0
  1308  00FF2E                     STR_2:
  1309  00FF2E  54                 	db	84	;'T'
  1310  00FF2F  49                 	db	73	;'I'
  1311  00FF30  4D                 	db	77	;'M'
  1312  00FF31  45                 	db	69	;'E'
  1313  00FF32  3A                 	db	58	;':'
  1314  00FF33  20                 	db	32
  1315  00FF34  25                 	db	37
  1316  00FF35  64                 	db	100	;'d'
  1317  00FF36  3A                 	db	58	;':'
  1318  00FF37  25                 	db	37
  1319  00FF38  30                 	db	48	;'0'
  1320  00FF39  32                 	db	50	;'2'
  1321  00FF3A  64                 	db	100	;'d'
  1322  00FF3B  00                 	db	0
  1323  00FF3C                     STR_79:
  1324  00FF3C  54                 	db	84	;'T'
  1325  00FF3D  53                 	db	83	;'S'
  1326  00FF3E  54                 	db	84	;'T'
  1327  00FF3F  3A                 	db	58	;':'
  1328  00FF40  20                 	db	32
  1329  00FF41  49                 	db	73	;'I'
  1330  00FF42  52                 	db	82	;'R'
  1331  00FF43  20                 	db	32
  1332  00FF44  53                 	db	83	;'S'
  1333  00FF45  4E                 	db	78	;'N'
  1334  00FF46  53                 	db	83	;'S'
  1335  00FF47  52                 	db	82	;'R'
  1336  00FF48  00                 	db	0
  1337  00FF49                     STR_107:
  1338  00FF49  53                 	db	83	;'S'
  1339  00FF4A  4F                 	db	79	;'O'
  1340  00FF4B  4C                 	db	76	;'L'
  1341  00FF4C  45                 	db	69	;'E'
  1342  00FF4D  4E                 	db	78	;'N'
  1343  00FF4E  4F                 	db	79	;'O'
  1344  00FF4F  49                 	db	73	;'I'
  1345  00FF50  44                 	db	68	;'D'
  1346  00FF51  20                 	db	32
  1347  00FF52  54                 	db	84	;'T'
  1348  00FF53  53                 	db	83	;'S'
  1349  00FF54  54                 	db	84	;'T'
  1350  00FF55  00                 	db	0
  1351  00FF56                     STR_65:
  1352  00FF56  54                 	db	84	;'T'
  1353  00FF57  49                 	db	73	;'I'
  1354  00FF58  4D                 	db	77	;'M'
  1355  00FF59  45                 	db	69	;'E'
  1356  00FF5A  20                 	db	32
  1357  00FF5B  25                 	db	37
  1358  00FF5C  64                 	db	100	;'d'
  1359  00FF5D  3A                 	db	58	;':'
  1360  00FF5E  25                 	db	37
  1361  00FF5F  30                 	db	48	;'0'
  1362  00FF60  32                 	db	50	;'2'
  1363  00FF61  64                 	db	100	;'d'
  1364  00FF62  00                 	db	0
  1365  00FF63                     STR_74:
  1366  00FF63  41                 	db	65	;'A'
  1367  00FF64  4C                 	db	76	;'L'
  1368  00FF65  47                 	db	71	;'G'
  1369  00FF66  33                 	db	51	;'3'
  1370  00FF67  3A                 	db	58	;':'
  1371  00FF68  20                 	db	32
  1372  00FF69  31                 	db	49	;'1'
  1373  00FF6A  20                 	db	32
  1374  00FF6B  43                 	db	67	;'C'
  1375  00FF6C  41                 	db	65	;'A'
  1376  00FF6D  4E                 	db	78	;'N'
  1377  00FF6E  00                 	db	0
  1378  00FF6F                     STR_88:
  1379  00FF6F  50                 	db	80	;'P'
  1380  00FF70  49                 	db	73	;'I'
  1381  00FF71  4E                 	db	78	;'N'
  1382  00FF72  20                 	db	32
  1383  00FF73  52                 	db	82	;'R'
  1384  00FF74  41                 	db	65	;'A'
  1385  00FF75  33                 	db	51	;'3'
  1386  00FF76  2E                 	db	46
  1387  00FF77  2E                 	db	46
  1388  00FF78  2E                 	db	46
  1389  00FF79  00                 	db	0
  1390  00FF7A                     STR_90:
  1391  00FF7A  50                 	db	80	;'P'
  1392  00FF7B  49                 	db	73	;'I'
  1393  00FF7C  4E                 	db	78	;'N'
  1394  00FF7D  20                 	db	32
  1395  00FF7E  52                 	db	82	;'R'
  1396  00FF7F  41                 	db	65	;'A'
  1397  00FF80  34                 	db	52	;'4'
  1398  00FF81  2E                 	db	46
  1399  00FF82  2E                 	db	46
  1400  00FF83  2E                 	db	46
  1401  00FF84  00                 	db	0
  1402  00FF85                     STR_64:
  1403  00FF85  53                 	db	83	;'S'
  1404  00FF86  4F                 	db	79	;'O'
  1405  00FF87  52                 	db	82	;'R'
  1406  00FF88  54                 	db	84	;'T'
  1407  00FF89  49                 	db	73	;'I'
  1408  00FF8A  4E                 	db	78	;'N'
  1409  00FF8B  47                 	db	71	;'G'
  1410  00FF8C  2E                 	db	46
  1411  00FF8D  2E                 	db	46
  1412  00FF8E  2E                 	db	46
  1413  00FF8F  00                 	db	0
  1414  00FF90                     STR_108:
  1415  00FF90  50                 	db	80	;'P'
  1416  00FF91  55                 	db	85	;'U'
  1417  00FF92  53                 	db	83	;'S'
  1418  00FF93  48                 	db	72	;'H'
  1419  00FF94  20                 	db	32
  1420  00FF95  44                 	db	68	;'D'
  1421  00FF96  4F                 	db	79	;'O'
  1422  00FF97  4E                 	db	78	;'N'
  1423  00FF98  45                 	db	69	;'E'
  1424  00FF99  00                 	db	0
  1425  00FF9A                     STR_83:
  1426  00FF9A  41                 	db	65	;'A'
  1427  00FF9B  43                 	db	67	;'C'
  1428  00FF9C  54                 	db	84	;'T'
  1429  00FF9D  55                 	db	85	;'U'
  1430  00FF9E  41                 	db	65	;'A'
  1431  00FF9F  54                 	db	84	;'T'
  1432  00FFA0  4F                 	db	79	;'O'
  1433  00FFA1  52                 	db	82	;'R'
  1434  00FFA2  53                 	db	83	;'S'
  1435  00FFA3  00                 	db	0
  1436  00FFA4                     STR_22:
  1437  00FFA4  44                 	db	68	;'D'
  1438  00FFA5  55                 	db	85	;'U'
  1439  00FFA6  52                 	db	82	;'R'
  1440  00FFA7  41                 	db	65	;'A'
  1441  00FFA8  54                 	db	84	;'T'
  1442  00FFA9  49                 	db	73	;'I'
  1443  00FFAA  4F                 	db	79	;'O'
  1444  00FFAB  4E                 	db	78	;'N'
  1445  00FFAC  3A                 	db	58	;':'
  1446  00FFAD  00                 	db	0
  1447  00FFAE                     STR_77:
  1448  00FFAE  53                 	db	83	;'S'
  1449  00FFAF  45                 	db	69	;'E'
  1450  00FFB0  4E                 	db	78	;'N'
  1451  00FFB1  53                 	db	83	;'S'
  1452  00FFB2  4F                 	db	79	;'O'
  1453  00FFB3  52                 	db	82	;'R'
  1454  00FFB4  53                 	db	83	;'S'
  1455  00FFB5  00                 	db	0
  1456  00FFB6                     STR_111:
  1457  00FFB6  28                 	db	40
  1458  00FFB7  6E                 	db	110	;'n'
  1459  00FFB8  75                 	db	117	;'u'
  1460  00FFB9  6C                 	db	108	;'l'
  1461  00FFBA  6C                 	db	108	;'l'
  1462  00FFBB  29                 	db	41
  1463  00FFBC  00                 	db	0
  1464  00FFBD                     STR_67:
  1465  00FFBD  46                 	db	70	;'F'
  1466  00FFBE  41                 	db	65	;'A'
  1467  00FFBF  49                 	db	73	;'I'
  1468  00FFC0  4C                 	db	76	;'L'
  1469  00FFC1  45                 	db	69	;'E'
  1470  00FFC2  44                 	db	68	;'D'
  1471  00FFC3  00                 	db	0
  1472  00FFC4                     STR_7:
  1473  00FFC4  53                 	db	83	;'S'
  1474  00FFC5  54                 	db	84	;'T'
  1475  00FFC6  41                 	db	65	;'A'
  1476  00FFC7  52                 	db	82	;'R'
  1477  00FFC8  54                 	db	84	;'T'
  1478  00FFC9  3A                 	db	58	;':'
  1479  00FFCA  00                 	db	0
  1480  00FFCB                     STR_9:
  1481  00FFCB  46                 	db	70	;'F'
  1482  00FFCC  45                 	db	69	;'E'
  1483  00FFCD  42                 	db	66	;'B'
  1484  00FFCE  00                 	db	0
  1485  00FFCF                     STR_19:
  1486  00FFCF  44                 	db	68	;'D'
  1487  00FFD0  45                 	db	69	;'E'
  1488  00FFD1  43                 	db	67	;'C'
  1489  00FFD2  00                 	db	0
  1490  00FFD3                     STR_15:
  1491  00FFD3  41                 	db	65	;'A'
  1492  00FFD4  55                 	db	85	;'U'
  1493  00FFD5  47                 	db	71	;'G'
  1494  00FFD6  00                 	db	0
  1495  00FFD7                     STR_14:
  1496  00FFD7  4A                 	db	74	;'J'
  1497  00FFD8  55                 	db	85	;'U'
  1498  00FFD9  4C                 	db	76	;'L'
  1499  00FFDA  00                 	db	0
  1500  00FFDB                     STR_8:
  1501  00FFDB  4A                 	db	74	;'J'
  1502  00FFDC  41                 	db	65	;'A'
  1503  00FFDD  4E                 	db	78	;'N'
  1504  00FFDE  00                 	db	0
  1505  00FFDF                     STR_13:
  1506  00FFDF  4A                 	db	74	;'J'
  1507  00FFE0  55                 	db	85	;'U'
  1508  00FFE1  4E                 	db	78	;'N'
  1509  00FFE2  00                 	db	0
  1510  00FFE3                     STR_16:
  1511  00FFE3  53                 	db	83	;'S'
  1512  00FFE4  45                 	db	69	;'E'
  1513  00FFE5  50                 	db	80	;'P'
  1514  00FFE6  00                 	db	0
  1515  00FFE7                     STR_10:
  1516  00FFE7  4D                 	db	77	;'M'
  1517  00FFE8  41                 	db	65	;'A'
  1518  00FFE9  52                 	db	82	;'R'
  1519  00FFEA  00                 	db	0
  1520  00FFEB                     STR_11:
  1521  00FFEB  41                 	db	65	;'A'
  1522  00FFEC  50                 	db	80	;'P'
  1523  00FFED  52                 	db	82	;'R'
  1524  00FFEE  00                 	db	0
  1525  00FFEF                     STR_20:
  1526  00FFEF  45                 	db	69	;'E'
  1527  00FFF0  52                 	db	82	;'R'
  1528  00FFF1  52                 	db	82	;'R'
  1529  00FFF2  00                 	db	0
  1530  00FFF3                     STR_17:
  1531  00FFF3  4F                 	db	79	;'O'
  1532  00FFF4  43                 	db	67	;'C'
  1533  00FFF5  54                 	db	84	;'T'
  1534  00FFF6  00                 	db	0
  1535  00FFF7                     STR_18:
  1536  00FFF7  4E                 	db	78	;'N'
  1537  00FFF8  4F                 	db	79	;'O'
  1538  00FFF9  56                 	db	86	;'V'
  1539  00FFFA  00                 	db	0
  1540  00FFFB                     STR_12:
  1541  00FFFB  4D                 	db	77	;'M'
  1542  00FFFC  41                 	db	65	;'A'
  1543  00FFFD  59                 	db	89	;'Y'
  1544  00FFFE  00                 	db	0
  1545  0000                     
  1546                           ; #config settings
  1547  00FFFF  00                 	db	0	; dummy byte at the end
  1548  0000                     
  1549                           	psect	cinit
  1550  003AEE                     __pcinit:
  1551                           	opt stack 0
  1552  003AEE                     start_initialization:
  1553                           	opt stack 0
  1554  003AEE                     __initialization:
  1555                           	opt stack 0
  1556                           
  1557                           ; Initialize objects allocated to BANK1 (8 bytes)
  1558                           ; load TBLPTR registers with __pidataBANK1
  1559  003AEE  0E00               	movlw	low __pidataBANK1
  1560  003AF0  6EF6               	movwf	tblptrl,c
  1561  003AF2  0E42               	movlw	high __pidataBANK1
  1562  003AF4  6EF7               	movwf	tblptrh,c
  1563  003AF6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1564  003AF8  6EF8               	movwf	tblptru,c
  1565  003AFA  EE01  F02D         	lfsr	0,__pdataBANK1
  1566  003AFE  EE10 F008          	lfsr	1,8
  1567  003B02                     copy_data0:
  1568  003B02  0009               	tblrd		*+
  1569  003B04  CFF5 FFEE          	movff	tablat,postinc0
  1570  003B08  50E5               	movf	postdec1,w,c
  1571  003B0A  50E1               	movf	fsr1l,w,c
  1572  003B0C  E1FA               	bnz	copy_data0
  1573                           
  1574                           ; Clear objects allocated to BANK1 (45 bytes)
  1575  003B0E  EE01  F000         	lfsr	0,__pbssBANK1
  1576  003B12  0E2D               	movlw	45
  1577  003B14                     clear_0:
  1578  003B14  6AEE               	clrf	postinc0,c
  1579  003B16  06E8               	decf	wreg,f,c
  1580  003B18  E1FD               	bnz	clear_0
  1581                           
  1582                           ; Clear objects allocated to BANK0 (38 bytes)
  1583  003B1A  EE00  F0DA         	lfsr	0,__pbssBANK0
  1584  003B1E  0E26               	movlw	38
  1585  003B20                     clear_1:
  1586  003B20  6AEE               	clrf	postinc0,c
  1587  003B22  06E8               	decf	wreg,f,c
  1588  003B24  E1FD               	bnz	clear_1
  1589                           
  1590                           ; Clear objects allocated to COMRAM (35 bytes)
  1591  003B26  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1592  003B2A  0E23               	movlw	35
  1593  003B2C                     clear_2:
  1594  003B2C  6AEE               	clrf	postinc0,c
  1595  003B2E  06E8               	decf	wreg,f,c
  1596  003B30  E1FD               	bnz	clear_2
  1597  003B32                     end_of_initialization:
  1598                           	opt stack 0
  1599  003B32                     __end_of__initialization:
  1600                           	opt stack 0
  1601  003B32  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1602  003B34  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1603  003B36  0100               	movlb	0
  1604  003B38  EFC9  F019         	goto	_main	;jump to C main() function
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postdec1	equ	0xFE5
  1612                           fsr1l	equ	0xFE1
  1613                           
  1614                           	psect	bssCOMRAM
  1615  00005B                     __pbssCOMRAM:
  1616                           	opt stack 0
  1617  00005B                     _back:
  1618                           	opt stack 0
  1619  00005B                     	ds	2
  1620  00005D                     _count_can_no_lab:
  1621                           	opt stack 0
  1622  00005D                     	ds	2
  1623  00005F                     _count_can_w_lab:
  1624                           	opt stack 0
  1625  00005F                     	ds	2
  1626  000061                     _count_pop_no_tab:
  1627                           	opt stack 0
  1628  000061                     	ds	2
  1629  000063                     _count_pop_w_tab:
  1630                           	opt stack 0
  1631  000063                     	ds	2
  1632  000065                     _cur_can:
  1633                           	opt stack 0
  1634  000065                     	ds	2
  1635  000067                     _down:
  1636                           	opt stack 0
  1637  000067                     	ds	2
  1638  000069                     _enter:
  1639                           	opt stack 0
  1640  000069                     	ds	2
  1641  00006B                     _f_ID_receive:
  1642                           	opt stack 0
  1643  00006B                     	ds	2
  1644  00006D                     _f_can_coming_to_ID:
  1645                           	opt stack 0
  1646  00006D                     	ds	2
  1647  00006F                     _f_can_coming_to_distribution:
  1648                           	opt stack 0
  1649  00006F                     	ds	2
  1650  000071                     _f_can_distributed:
  1651                           	opt stack 0
  1652  000071                     	ds	2
  1653  000073                     _f_lastCan:
  1654                           	opt stack 0
  1655  000073                     	ds	2
  1656  000075                     _firstboot:
  1657                           	opt stack 0
  1658  000075                     	ds	2
  1659  000077                     _up:
  1660                           	opt stack 0
  1661  000077                     	ds	2
  1662  000079                     _was_low_1:
  1663                           	opt stack 0
  1664  000079                     	ds	2
  1665  00007B                     _was_low_3:
  1666                           	opt stack 0
  1667  00007B                     	ds	2
  1668  00007D                     _input:
  1669                           	opt stack 0
  1670  00007D                     	ds	1
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1l	equ	0xFE1
  1679                           
  1680                           	psect	bssBANK0
  1681  0000DA                     __pbssBANK0:
  1682                           	opt stack 0
  1683  0000DA                     _IR_signal:
  1684                           	opt stack 0
  1685  0000DA                     	ds	2
  1686  0000DC                     _MAG_signal:
  1687                           	opt stack 0
  1688  0000DC                     	ds	2
  1689  0000DE                     _cur_state:
  1690                           	opt stack 0
  1691  0000DE                     	ds	2
  1692  0000E0                     _debug:
  1693                           	opt stack 0
  1694  0000E0                     	ds	2
  1695  0000E2                     _f_loadingNewCan:
  1696                           	opt stack 0
  1697  0000E2                     	ds	2
  1698  0000E4                     _first:
  1699                           	opt stack 0
  1700  0000E4                     	ds	2
  1701  0000E6                     _log:
  1702                           	opt stack 0
  1703  0000E6                     	ds	2
  1704  0000E8                     _log_completion:
  1705                           	opt stack 0
  1706  0000E8                     	ds	2
  1707  0000EA                     _log_count_can_no_lab:
  1708                           	opt stack 0
  1709  0000EA                     	ds	2
  1710  0000EC                     _log_count_can_w_lab:
  1711                           	opt stack 0
  1712  0000EC                     	ds	2
  1713  0000EE                     _log_count_pop_no_tab:
  1714                           	opt stack 0
  1715  0000EE                     	ds	2
  1716  0000F0                     _log_count_pop_w_tab:
  1717                           	opt stack 0
  1718  0000F0                     	ds	2
  1719  0000F2                     _log_count_total:
  1720                           	opt stack 0
  1721  0000F2                     	ds	2
  1722  0000F4                     _log_total_time:
  1723                           	opt stack 0
  1724  0000F4                     	ds	2
  1725  0000F6                     _logstate:
  1726                           	opt stack 0
  1727  0000F6                     	ds	2
  1728  0000F8                     _total_time:
  1729                           	opt stack 0
  1730  0000F8                     	ds	2
  1731  0000FA                     _var:
  1732                           	opt stack 0
  1733  0000FA                     	ds	2
  1734  0000FC                     _machine_state:
  1735                           	opt stack 0
  1736  0000FC                     	ds	1
  1737  0000FD                     _sel:
  1738                           	opt stack 0
  1739  0000FD                     	ds	1
  1740  0000FE                     _count_total:
  1741                           	opt stack 0
  1742  0000FE                     	ds	2
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	bssBANK1
  1753  000100                     __pbssBANK1:
  1754                           	opt stack 0
  1755  000100                     _log_startTime:
  1756                           	opt stack 0
  1757  000100                     	ds	14
  1758  00010E                     _startTime:
  1759                           	opt stack 0
  1760  00010E                     	ds	14
  1761  00011C                     _servoTimes:
  1762                           	opt stack 0
  1763  00011C                     	ds	8
  1764  000124                     _time:
  1765                           	opt stack 0
  1766  000124                     	ds	7
  1767  00012B                     _i:
  1768                           	opt stack 0
  1769  00012B                     	ds	2
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           postdec1	equ	0xFE5
  1777                           fsr1l	equ	0xFE1
  1778                           
  1779                           	psect	dataBANK1
  1780  00012D                     __pdataBANK1:
  1781                           	opt stack 0
  1782  00012D                     UI@F3220:
  1783                           	opt stack 0
  1784  00012D                     	ds	4
  1785  000131                     printRTC@F3211:
  1786                           	opt stack 0
  1787  000131                     	ds	4
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1l	equ	0xFE1
  1796                           
  1797                           	psect	cstackBANK0
  1798  000080                     __pcstackBANK0:
  1799                           	opt stack 0
  1800  000080                     ??_PortTests:
  1801  000080                     ??_isdigit:
  1802  000080                     ??_readADC:
  1803  000080                     ??_I2C_Master_Wait:
  1804  000080                     ?___wmul:
  1805                           	opt stack 0
  1806  000080                     ?___awmod:
  1807                           	opt stack 0
  1808  000080                     ?___lwdiv:
  1809                           	opt stack 0
  1810  000080                     ?___lldiv:
  1811                           	opt stack 0
  1812  000080                     lcdNibble@temp:
  1813                           	opt stack 0
  1814  000080                     initTime@m:
  1815                           	opt stack 0
  1816  000080                     updateServoPosition@time_us:
  1817                           	opt stack 0
  1818  000080                     EEPROM_read@address:
  1819                           	opt stack 0
  1820  000080                     ___wmul@multiplier:
  1821                           	opt stack 0
  1822  000080                     ___awmod@dividend:
  1823                           	opt stack 0
  1824  000080                     ___lwdiv@dividend:
  1825                           	opt stack 0
  1826  000080                     strcpy@to:
  1827                           	opt stack 0
  1828  000080                     ___lldiv@dividend:
  1829                           	opt stack 0
  1830                           
  1831                           ; 4 bytes @ 0x0
  1832  000080                     	ds	1
  1833  000081                     readADC@channel:
  1834                           	opt stack 0
  1835  000081                     I2C_Master_Read@a:
  1836                           	opt stack 0
  1837  000081                     lcdNibble@data:
  1838                           	opt stack 0
  1839  000081                     initTime@h:
  1840                           	opt stack 0
  1841  000081                     _isdigit$1872:
  1842                           	opt stack 0
  1843  000081                     I2C_Master_Write@d:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x1
  1847  000081                     	ds	1
  1848  000082                     ??_readIR:
  1849  000082                     ??_readMAG:
  1850  000082                     I2C_Master_Read@temp:
  1851                           	opt stack 0
  1852  000082                     lcdInst@data:
  1853                           	opt stack 0
  1854  000082                     putch@data:
  1855                           	opt stack 0
  1856  000082                     initTime@w:
  1857                           	opt stack 0
  1858  000082                     isdigit@c:
  1859                           	opt stack 0
  1860  000082                     updateServoPosition@timer:
  1861                           	opt stack 0
  1862  000082                     ___wmul@multiplicand:
  1863                           	opt stack 0
  1864  000082                     ___awmod@divisor:
  1865                           	opt stack 0
  1866  000082                     ___lwdiv@divisor:
  1867                           	opt stack 0
  1868  000082                     strcpy@from:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x2
  1872  000082                     	ds	1
  1873  000083                     ??_initLCD:
  1874  000083                     initTime@DD:
  1875                           	opt stack 0
  1876  000083                     getRTC@i:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x3
  1880  000083                     	ds	1
  1881  000084                     ??_updateServoPosition:
  1882  000084                     initTime@MM:
  1883                           	opt stack 0
  1884  000084                     ___awmod@counter:
  1885                           	opt stack 0
  1886  000084                     readIR@res:
  1887                           	opt stack 0
  1888  000084                     readMAG@res:
  1889                           	opt stack 0
  1890  000084                     ___wmul@product:
  1891                           	opt stack 0
  1892  000084                     ___lwdiv@quotient:
  1893                           	opt stack 0
  1894  000084                     strcpy@cp:
  1895                           	opt stack 0
  1896  000084                     ___lldiv@divisor:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x4
  1900  000084                     	ds	1
  1901  000085                     ??_initSortTimer:
  1902  000085                     initTime@YY:
  1903                           	opt stack 0
  1904  000085                     ___awmod@sign:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x5
  1908  000085                     	ds	1
  1909  000086                     ??_ID:
  1910  000086                     ??_getIR:
  1911  000086                     ?___awdiv:
  1912                           	opt stack 0
  1913  000086                     initTime@s:
  1914                           	opt stack 0
  1915  000086                     ___lwdiv@counter:
  1916                           	opt stack 0
  1917  000086                     updateServoPosition@my_time:
  1918                           	opt stack 0
  1919  000086                     ___awdiv@dividend:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x6
  1923  000086                     	ds	1
  1924  000087                     ?___lwmod:
  1925                           	opt stack 0
  1926  000087                     ___lwmod@dividend:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x7
  1930  000087                     	ds	1
  1931  000088                     ??_Distribution:
  1932  000088                     ??_initServos:
  1933  000088                     initSortTimer@i:
  1934                           	opt stack 0
  1935  000088                     ___awdiv@divisor:
  1936                           	opt stack 0
  1937  000088                     ___lldiv@quotient:
  1938                           	opt stack 0
  1939  000088                     ID@sensor_outputs:
  1940                           	opt stack 0
  1941                           
  1942                           ; 6 bytes @ 0x8
  1943  000088                     	ds	1
  1944  000089                     ___lwmod@divisor:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x9
  1948  000089                     	ds	1
  1949  00008A                     ___awdiv@counter:
  1950                           	opt stack 0
  1951                           
  1952                           ; 1 bytes @ 0xA
  1953  00008A                     	ds	1
  1954  00008B                     ___awdiv@sign:
  1955                           	opt stack 0
  1956  00008B                     ___lwmod@counter:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0xB
  1960  00008B                     	ds	1
  1961  00008C                     ___lldiv@counter:
  1962                           	opt stack 0
  1963  00008C                     ___awdiv@quotient:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0xC
  1967  00008C                     	ds	1
  1968  00008D                     I2C_Master_Init@c:
  1969                           	opt stack 0
  1970                           
  1971                           ; 4 bytes @ 0xD
  1972  00008D                     	ds	1
  1973  00008E                     ?_printf:
  1974                           	opt stack 0
  1975  00008E                     printf@f:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0xE
  1979  00008E                     	ds	3
  1980  000091                     ??_I2C_Master_Init:
  1981                           
  1982                           ; 1 bytes @ 0x11
  1983  000091                     	ds	4
  1984  000095                     ??_loadRTC:
  1985                           
  1986                           ; 1 bytes @ 0x15
  1987  000095                     	ds	1
  1988  000096                     loadRTC@i:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x16
  1992  000096                     	ds	4
  1993  00009A                     ??_printf:
  1994                           
  1995                           ; 1 bytes @ 0x1A
  1996  00009A                     	ds	4
  1997  00009E                     printf@prec:
  1998                           	opt stack 0
  1999                           
  2000                           ; 1 bytes @ 0x1E
  2001  00009E                     	ds	1
  2002  00009F                     printf@cp:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x1F
  2006  00009F                     	ds	2
  2007  0000A1                     printf@ap:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x21
  2011  0000A1                     	ds	2
  2012  0000A3                     printf@len:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x23
  2016  0000A3                     	ds	2
  2017  0000A5                     printf@val:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x25
  2021  0000A5                     	ds	2
  2022  0000A7                     printf@flag:
  2023                           	opt stack 0
  2024                           
  2025                           ; 1 bytes @ 0x27
  2026  0000A7                     	ds	1
  2027  0000A8                     printf@c:
  2028                           	opt stack 0
  2029                           
  2030                           ; 1 bytes @ 0x28
  2031  0000A8                     	ds	1
  2032  0000A9                     printf@width:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x29
  2036  0000A9                     	ds	2
  2037  0000AB                     ??_printRTC:
  2038  0000AB                     ??_algorithmTest:
  2039  0000AB                     ??_sensorTest:
  2040  0000AB                     ??_actuatorTest:
  2041  0000AB                     ??_PortTestA5:
  2042  0000AB                     ??_ToggleTestA5:
  2043  0000AB                     ??_SolenoidTestA5:
  2044  0000AB                     EEPROM_write@address:
  2045                           	opt stack 0
  2046                           
  2047                           ; 2 bytes @ 0x2B
  2048  0000AB                     	ds	1
  2049  0000AC                     ToggleTestA5@on:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x2C
  2053  0000AC                     	ds	1
  2054  0000AD                     EEPROM_write@data:
  2055                           	opt stack 0
  2056  0000AD                     actuatorTest@i_1565:
  2057                           	opt stack 0
  2058  0000AD                     sensorTest@on:
  2059                           	opt stack 0
  2060  0000AD                     SolenoidTestA5@i:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x2D
  2064  0000AD                     	ds	1
  2065  0000AE                     ??_EEPROM_write:
  2066  0000AE                     actuatorTest@i_1572:
  2067                           	opt stack 0
  2068  0000AE                     printRTC@INT_time:
  2069                           	opt stack 0
  2070                           
  2071                           ; 14 bytes @ 0x2E
  2072  0000AE                     	ds	1
  2073  0000AF                     EEPROM_write@i:
  2074                           	opt stack 0
  2075  0000AF                     actuatorTest@i_1573:
  2076                           	opt stack 0
  2077  0000AF                     SolenoidTestA5@i_1616:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x2F
  2081  0000AF                     	ds	1
  2082  0000B0                     EEPROM_write@i_1310:
  2083                           	opt stack 0
  2084  0000B0                     actuatorTest@i_1575:
  2085                           	opt stack 0
  2086  0000B0                     SolenoidTestA5@i_1618:
  2087                           	opt stack 0
  2088                           
  2089                           ; 1 bytes @ 0x30
  2090  0000B0                     	ds	1
  2091  0000B1                     ??_Loading:
  2092  0000B1                     logRun@num:
  2093                           	opt stack 0
  2094  0000B1                     actuatorTest@i_1576:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x31
  2098  0000B1                     	ds	1
  2099  0000B2                     logRun@byte1:
  2100                           	opt stack 0
  2101  0000B2                     actuatorTest@i_1578:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x32
  2105  0000B2                     	ds	1
  2106  0000B3                     logRun@byte2:
  2107                           	opt stack 0
  2108  0000B3                     actuatorTest@i_1579:
  2109                           	opt stack 0
  2110  0000B3                     Loading@addr:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x33
  2114  0000B3                     	ds	1
  2115  0000B4                     logRun@byte3:
  2116                           	opt stack 0
  2117  0000B4                     actuatorTest@i_1581:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x34
  2121  0000B4                     	ds	1
  2122  0000B5                     Loading@byte1:
  2123                           	opt stack 0
  2124  0000B5                     logRun@byte_i:
  2125                           	opt stack 0
  2126  0000B5                     actuatorTest@i_1582:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x35
  2130  0000B5                     	ds	1
  2131  0000B6                     logRun@byte11:
  2132                           	opt stack 0
  2133  0000B6                     actuatorTest@i_1584:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x36
  2137  0000B6                     	ds	1
  2138  0000B7                     actuatorTest@i_1585:
  2139                           	opt stack 0
  2140  0000B7                     logRun@i:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x37
  2144  0000B7                     	ds	1
  2145  0000B8                     actuatorTest@i_1587:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x38
  2149  0000B8                     	ds	1
  2150  0000B9                     actuatorTest@i_1588:
  2151                           	opt stack 0
  2152  0000B9                     logRun@addr:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x39
  2156  0000B9                     	ds	1
  2157  0000BA                     actuatorTest@i_1591:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x3A
  2161  0000BA                     	ds	1
  2162  0000BB                     actuatorTest@i_1592:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x3B
  2166  0000BB                     	ds	1
  2167  0000BC                     actuatorTest@i_1594:
  2168                           	opt stack 0
  2169  0000BC                     printRTC@RTC_month:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x3C
  2173  0000BC                     	ds	1
  2174  0000BD                     actuatorTest@i_1595:
  2175                           	opt stack 0
  2176                           
  2177                           ; 1 bytes @ 0x3D
  2178  0000BD                     	ds	1
  2179  0000BE                     actuatorTest@i_1597:
  2180                           	opt stack 0
  2181  0000BE                     printRTC@month:
  2182                           	opt stack 0
  2183                           
  2184                           ; 4 bytes @ 0x3E
  2185  0000BE                     	ds	1
  2186  0000BF                     actuatorTest@i_1598:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x3F
  2190  0000BF                     	ds	1
  2191  0000C0                     actuatorTest@i_1601:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0x40
  2195  0000C0                     	ds	1
  2196  0000C1                     actuatorTest@i_1602:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0x41
  2200  0000C1                     	ds	1
  2201  0000C2                     actuatorTest@i_1604:
  2202                           	opt stack 0
  2203  0000C2                     printRTC@i:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0x42
  2207  0000C2                     	ds	1
  2208  0000C3                     actuatorTest@i_1605:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x43
  2212  0000C3                     	ds	1
  2213  0000C4                     ??_UI:
  2214  0000C4                     actuatorTest@i:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x44
  2218  0000C4                     	ds	2
  2219  0000C6                     ??_Test:
  2220  0000C6                     _UI$2225:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x46
  2224  0000C6                     	ds	2
  2225  0000C8                     UI@i:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x48
  2229  0000C8                     	ds	1
  2230  0000C9                     UI@i_408:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x49
  2234  0000C9                     	ds	1
  2235  0000CA                     UI@i_411:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x4A
  2239  0000CA                     	ds	1
  2240  0000CB                     UI@i_412:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x4B
  2244  0000CB                     	ds	1
  2245  0000CC                     UI@i_430:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x4C
  2249  0000CC                     	ds	1
  2250  0000CD                     UI@i_431:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x4D
  2254  0000CD                     	ds	1
  2255  0000CE                     UI@i_434:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x4E
  2259  0000CE                     	ds	1
  2260  0000CF                     UI@i_435:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x4F
  2264  0000CF                     	ds	1
  2265  0000D0                     UI@i_438:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x50
  2269  0000D0                     	ds	1
  2270  0000D1                     UI@i_439:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x51
  2274  0000D1                     	ds	1
  2275  0000D2                     UI@i_442:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x52
  2279  0000D2                     	ds	1
  2280  0000D3                     UI@i_443:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x53
  2284  0000D3                     	ds	1
  2285  0000D4                     UI@i_446:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x54
  2289  0000D4                     	ds	1
  2290  0000D5                     UI@i_447:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x55
  2294  0000D5                     	ds	1
  2295  0000D6                     UI@month:
  2296                           	opt stack 0
  2297                           
  2298                           ; 4 bytes @ 0x56
  2299  0000D6                     	ds	4
  2300  0000DA                     tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           postinc0	equ	0xFEE
  2305                           wreg	equ	0xFE8
  2306                           postdec1	equ	0xFE5
  2307                           fsr1l	equ	0xFE1
  2308                           
  2309                           ; 1 bytes @ 0x5A
  2310                           
  2311                           	psect	cstackCOMRAM
  2312  000001                     __pcstackCOMRAM:
  2313                           	opt stack 0
  2314  000001                     ??i2_I2C_Master_Wait:
  2315  000001                     ??i2_isdigit:
  2316  000001                     ?i2___wmul:
  2317                           	opt stack 0
  2318  000001                     ?i2___lwmod:
  2319                           	opt stack 0
  2320  000001                     i2lcdNibble@temp:
  2321                           	opt stack 0
  2322  000001                     i2EEPROM_read@address:
  2323                           	opt stack 0
  2324  000001                     i2___wmul@multiplier:
  2325                           	opt stack 0
  2326  000001                     i2___lwmod@dividend:
  2327                           	opt stack 0
  2328  000001                     i2strcpy@to:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x0
  2332  000001                     	ds	1
  2333  000002                     i2I2C_Master_Read@a:
  2334                           	opt stack 0
  2335  000002                     i2lcdNibble@data:
  2336                           	opt stack 0
  2337  000002                     i2_isdigit$1872:
  2338                           	opt stack 0
  2339  000002                     i2I2C_Master_Write@d:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x1
  2343  000002                     	ds	1
  2344  000003                     i2I2C_Master_Read@temp:
  2345                           	opt stack 0
  2346  000003                     i2lcdInst@data:
  2347                           	opt stack 0
  2348  000003                     i2putch@data:
  2349                           	opt stack 0
  2350  000003                     i2isdigit@c:
  2351                           	opt stack 0
  2352  000003                     i2___wmul@multiplicand:
  2353                           	opt stack 0
  2354  000003                     i2___lwmod@divisor:
  2355                           	opt stack 0
  2356  000003                     i2strcpy@from:
  2357                           	opt stack 0
  2358                           
  2359                           ; 2 bytes @ 0x2
  2360  000003                     	ds	1
  2361  000004                     i2getRTC@i:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x3
  2365  000004                     	ds	1
  2366  000005                     i2___lwmod@counter:
  2367                           	opt stack 0
  2368  000005                     i2___wmul@product:
  2369                           	opt stack 0
  2370  000005                     i2strcpy@cp:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x4
  2374  000005                     	ds	1
  2375  000006                     ?i2___lwdiv:
  2376                           	opt stack 0
  2377  000006                     i2___lwdiv@dividend:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x5
  2381  000006                     	ds	1
  2382  000007                     retrieveLog@logNum:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x6
  2386  000007                     	ds	1
  2387  000008                     i2___lwdiv@divisor:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x7
  2391  000008                     	ds	1
  2392  000009                     ??_retrieveLog:
  2393                           
  2394                           ; 1 bytes @ 0x8
  2395  000009                     	ds	1
  2396  00000A                     i2___lwdiv@quotient:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x9
  2400  00000A                     	ds	1
  2401  00000B                     retrieveLog@byte1:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0xA
  2405  00000B                     	ds	1
  2406  00000C                     retrieveLog@byte2:
  2407                           	opt stack 0
  2408  00000C                     i2___lwdiv@counter:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0xB
  2412  00000C                     	ds	1
  2413  00000D                     ?i2_printf:
  2414                           	opt stack 0
  2415  00000D                     retrieveLog@byte3:
  2416                           	opt stack 0
  2417  00000D                     i2printf@f:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0xC
  2421  00000D                     	ds	1
  2422  00000E                     retrieveLog@i:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0xD
  2426  00000E                     	ds	2
  2427  000010                     retrieveLog@addr:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0xF
  2431  000010                     	ds	2
  2432  000012                     dispLogs@myLog:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x11
  2436  000012                     	ds	2
  2437  000014                     
  2438                           ; 1 bytes @ 0x13
  2439  000014                     	ds	5
  2440  000019                     ??i2_printf:
  2441                           
  2442                           ; 1 bytes @ 0x18
  2443  000019                     	ds	4
  2444  00001D                     i2printf@prec:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x1C
  2448  00001D                     	ds	1
  2449  00001E                     i2printf@cp:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x1D
  2453  00001E                     	ds	2
  2454  000020                     i2printf@ap:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x1F
  2458  000020                     	ds	2
  2459  000022                     i2printf@len:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x21
  2463  000022                     	ds	2
  2464  000024                     i2printf@val:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x23
  2468  000024                     	ds	2
  2469  000026                     i2printf@flag:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x25
  2473  000026                     	ds	1
  2474  000027                     i2printf@c:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x26
  2478  000027                     	ds	1
  2479  000028                     i2printf@width:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x27
  2483  000028                     	ds	2
  2484  00002A                     ??_printSortTimer:
  2485  00002A                     ??i2_printRTC:
  2486  00002A                     ?_inputHandler:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x29
  2490  00002A                     	ds	2
  2491  00002C                     ??_inputHandler:
  2492                           
  2493                           ; 1 bytes @ 0x2B
  2494  00002C                     	ds	1
  2495  00002D                     printSortTimer@hour:
  2496                           	opt stack 0
  2497  00002D                     i2printRTC@INT_time:
  2498                           	opt stack 0
  2499                           
  2500                           ; 14 bytes @ 0x2C
  2501  00002D                     	ds	2
  2502  00002F                     printSortTimer@curTime:
  2503                           	opt stack 0
  2504                           
  2505                           ; 14 bytes @ 0x2E
  2506  00002F                     	ds	12
  2507  00003B                     i2printRTC@RTC_month:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x3A
  2511  00003B                     	ds	2
  2512  00003D                     printSortTimer@start_sec:
  2513                           	opt stack 0
  2514  00003D                     i2printRTC@month:
  2515                           	opt stack 0
  2516                           
  2517                           ; 4 bytes @ 0x3C
  2518  00003D                     	ds	2
  2519  00003F                     printSortTimer@cur_sec:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x3E
  2523  00003F                     	ds	2
  2524  000041                     printSortTimer@min:
  2525                           	opt stack 0
  2526  000041                     i2printRTC@i:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x40
  2530  000041                     	ds	2
  2531  000043                     ??_updateMenu:
  2532  000043                     printSortTimer@sec:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x42
  2536  000043                     	ds	2
  2537  000045                     _printSortTimer$2345:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x44
  2541  000045                     	ds	2
  2542  000047                     printSortTimer@timeDiff:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x46
  2546  000047                     	ds	2
  2547  000049                     printSortTimer@i:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x48
  2551  000049                     	ds	2
  2552  00004B                     ??_handler:
  2553                           
  2554                           ; 1 bytes @ 0x4A
  2555  00004B                     	ds	16
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           postdec1	equ	0xFE5
  2563                           fsr1l	equ	0xFE1
  2564                           
  2565 ;;
  2566 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2567 ;;
  2568 ;; *************** function _main *****************
  2569 ;; Defined at:
  2570 ;;		line 18 in file "main.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels required when called:   13
  2590 ;; This function calls:
  2591 ;;		_Test
  2592 ;;		_UI
  2593 ;;		_initLCD
  2594 ;;		_initTime
  2595 ;;		_initUI
  2596 ;;		_logRun
  2597 ;;		_machineConfig
  2598 ;;		_sort
  2599 ;;		_stopSignals
  2600 ;; This function is called by:
  2601 ;;		Startup code after reset
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text0
  2606  003392                     __ptext0:
  2607                           	opt stack 0
  2608  003392                     _main:
  2609                           	opt stack 18
  2610                           
  2611                           ;main.c: 19: machineConfig();
  2612                           
  2613                           ;incstack = 0
  2614  003392  ECF7  F01C         	call	_machineConfig	;wreg free
  2615                           
  2616                           ;main.c: 20: initLCD();
  2617  003396  ECEB  F01D         	call	_initLCD	;wreg free
  2618                           
  2619                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2620  00339A  0E20               	movlw	32
  2621  00339C  0100               	movlb	0	; () banked
  2622  00339E  6F80               	movwf	initTime@m& (0+255),b
  2623  0033A0  0E13               	movlw	19
  2624  0033A2  0100               	movlb	0	; () banked
  2625  0033A4  6F81               	movwf	initTime@h& (0+255),b
  2626  0033A6  0E04               	movlw	4
  2627  0033A8  0100               	movlb	0	; () banked
  2628  0033AA  6F82               	movwf	initTime@w& (0+255),b
  2629  0033AC  0E01               	movlw	1
  2630  0033AE  0100               	movlb	0	; () banked
  2631  0033B0  6F83               	movwf	initTime@DD& (0+255),b
  2632  0033B2  0E03               	movlw	3
  2633  0033B4  0100               	movlb	0	; () banked
  2634  0033B6  6F84               	movwf	initTime@MM& (0+255),b
  2635  0033B8  0E17               	movlw	23
  2636  0033BA  0100               	movlb	0	; () banked
  2637  0033BC  6F85               	movwf	initTime@YY& (0+255),b
  2638  0033BE  0E42               	movlw	66
  2639  0033C0  EC85  F020         	call	_initTime
  2640                           
  2641                           ;main.c: 22: initUI();
  2642  0033C4  EC50  F020         	call	_initUI	;wreg free
  2643                           
  2644                           ;main.c: 23: first = 1;
  2645  0033C8  0E00               	movlw	0
  2646  0033CA  0100               	movlb	0	; () banked
  2647  0033CC  6FE5               	movwf	(_first+1)& (0+255),b
  2648  0033CE  0E01               	movlw	1
  2649  0033D0  6FE4               	movwf	_first& (0+255),b
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 34: switch(machine_state){
  2653                           
  2654                           ;main.c: 33: while(1){
  2655  0033D2  D018               	goto	l7724
  2656  0033D4                     l7706:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 36: UI();
  2660  0033D4  EC09  F000         	call	_UI	;wreg free
  2661                           
  2662                           ;main.c: 37: break;
  2663  0033D8  D015               	goto	l7724
  2664  0033DA                     l7708:
  2665                           
  2666                           ;main.c: 39: sort();
  2667  0033DA  EC74  F020         	call	_sort	;wreg free
  2668                           
  2669                           ;main.c: 40: break;
  2670  0033DE  D012               	goto	l7724
  2671  0033E0                     l7710:
  2672                           
  2673                           ;main.c: 42: stopSignals();
  2674  0033E0  ECB1  F020         	call	_stopSignals	;wreg free
  2675                           
  2676                           ;main.c: 43: logRun();
  2677  0033E4  EC5A  F014         	call	_logRun	;wreg free
  2678                           
  2679                           ;main.c: 44: first = 1;
  2680  0033E8  0E00               	movlw	0
  2681  0033EA  0100               	movlb	0	; () banked
  2682  0033EC  6FE5               	movwf	(_first+1)& (0+255),b
  2683  0033EE  0E01               	movlw	1
  2684  0033F0  6FE4               	movwf	_first& (0+255),b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 45: UI();
  2688  0033F2  EC09  F000         	call	_UI	;wreg free
  2689                           
  2690                           ;main.c: 46: break;
  2691  0033F6  D006               	goto	l7724
  2692  0033F8                     l7718:
  2693                           
  2694                           ;main.c: 48: Test();
  2695  0033F8  EC95  F016         	call	_Test	;wreg free
  2696                           
  2697                           ;main.c: 49: break;
  2698  0033FC  D003               	goto	l7724
  2699  0033FE                     l7720:
  2700                           
  2701                           ;main.c: 51: stopSignals();
  2702  0033FE  ECB1  F020         	call	_stopSignals	;wreg free
  2703  003402                     l478:
  2704  003402  D7FF               	goto	l478
  2705  003404                     l7724:
  2706  003404  0100               	movlb	0	; () banked
  2707  003406  51FC               	movf	_machine_state& (0+255),w,b
  2708                           
  2709                           ; Switch size 1, requested type "space"
  2710                           ; Number of cases is 5, Range of values is 0 to 4
  2711                           ; switch strategies available:
  2712                           ; Name         Instructions Cycles
  2713                           ; simple_byte           16     9 (average)
  2714                           ;	Chosen strategy is simple_byte
  2715  003408  0A00               	xorlw	0	; case 0
  2716  00340A  B4D8               	btfsc	status,2,c
  2717  00340C  D7E3               	goto	l7706
  2718  00340E  0A01               	xorlw	1	; case 1
  2719  003410  B4D8               	btfsc	status,2,c
  2720  003412  D7E3               	goto	l7708
  2721  003414  0A03               	xorlw	3	; case 2
  2722  003416  B4D8               	btfsc	status,2,c
  2723  003418  D7E3               	goto	l7710
  2724  00341A  0A01               	xorlw	1	; case 3
  2725  00341C  B4D8               	btfsc	status,2,c
  2726  00341E  D7EC               	goto	l7718
  2727  003420  0A07               	xorlw	7	; case 4
  2728  003422  B4D8               	btfsc	status,2,c
  2729  003424  D7EC               	goto	l7720
  2730                           
  2731                           ; BSR set to: 0
  2732                           
  2733                           ; BSR set to: 0
  2734  003426  D7EE               	goto	l7724
  2735  003428                     __end_of_main:
  2736                           	opt stack 0
  2737                           tblptru	equ	0xFF8
  2738                           tblptrh	equ	0xFF7
  2739                           tblptrl	equ	0xFF6
  2740                           tablat	equ	0xFF5
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1l	equ	0xFE1
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function _stopSignals *****************
  2748 ;; Defined at:
  2749 ;;		line 60 in file "main.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;		None
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;Total ram usage:        0 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    7
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text1
  2778  004162                     __ptext1:
  2779                           	opt stack 0
  2780  004162                     _stopSignals:
  2781                           	opt stack 23
  2782                           
  2783                           ;main.c: 61: LATA = 0x00;
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;incstack = 0
  2787  004162  0E00               	movlw	0
  2788  004164  6E89               	movwf	3977,c	;volatile
  2789                           
  2790                           ;main.c: 62: LATB = 0x00;
  2791  004166  0E00               	movlw	0
  2792  004168  6E8A               	movwf	3978,c	;volatile
  2793                           
  2794                           ;main.c: 63: LATC = 0x00;
  2795  00416A  0E00               	movlw	0
  2796  00416C  6E8B               	movwf	3979,c	;volatile
  2797                           
  2798                           ;main.c: 64: LATD = 0x00;
  2799  00416E  0E00               	movlw	0
  2800  004170  6E8C               	movwf	3980,c	;volatile
  2801                           
  2802                           ;main.c: 65: LATE = 0x00;
  2803  004172  0E00               	movlw	0
  2804  004174  6E8D               	movwf	3981,c	;volatile
  2805  004176  0012               	return		;funcret
  2806  004178                     __end_of_stopSignals:
  2807                           	opt stack 0
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           postdec1	equ	0xFE5
  2815                           fsr1l	equ	0xFE1
  2816                           status	equ	0xFD8
  2817                           
  2818 ;; *************** function _sort *****************
  2819 ;; Defined at:
  2820 ;;		line 55 in file "sort.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;Total ram usage:        0 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:   12
  2841 ;; This function calls:
  2842 ;;		_Distribution
  2843 ;;		_ID
  2844 ;;		_Loading
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text2
  2851  0040E8                     __ptext2:
  2852                           	opt stack 0
  2853  0040E8                     _sort:
  2854                           	opt stack 18
  2855                           
  2856                           ;sort.c: 56: if(machine_state == Sorting_state){
  2857                           
  2858                           ;incstack = 0
  2859  0040E8  0100               	movlb	0	; () banked
  2860  0040EA  05FC               	decf	_machine_state& (0+255),w,b
  2861  0040EC  B4D8               	btfsc	status,2,c
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;sort.c: 57: Loading();
  2865  0040EE  EC13  F017         	call	_Loading	;wreg free
  2866                           
  2867                           ;sort.c: 58: }
  2868                           ;sort.c: 59: if(machine_state == Sorting_state){
  2869  0040F2  0100               	movlb	0	; () banked
  2870  0040F4  05FC               	decf	_machine_state& (0+255),w,b
  2871  0040F6  B4D8               	btfsc	status,2,c
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;sort.c: 60: ID();
  2875  0040F8  ECF8  F014         	call	_ID	;wreg free
  2876                           
  2877                           ;sort.c: 61: }
  2878                           ;sort.c: 62: if(machine_state == Sorting_state){
  2879  0040FC  0100               	movlb	0	; () banked
  2880  0040FE  05FC               	decf	_machine_state& (0+255),w,b
  2881  004100  A4D8               	btfss	status,2,c
  2882  004102  0012               	return	
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;sort.c: 63: Distribution();
  2886  004104  ECBA  F013         	call	_Distribution	;wreg free
  2887  004108  0012               	return	
  2888  00410A                     __end_of_sort:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           postdec1	equ	0xFE5
  2897                           fsr1l	equ	0xFE1
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _Loading *****************
  2901 ;; Defined at:
  2902 ;;		line 67 in file "sort.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  addr            2   51[BANK0 ] unsigned short 
  2907 ;;  byte1           1   53[BANK0 ] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        5 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:   11
  2924 ;; This function calls:
  2925 ;;		_EEPROM_read
  2926 ;;		_EEPROM_write
  2927 ;;		_getIR
  2928 ;;		_initGlobalVars
  2929 ;;		_initServos
  2930 ;;		_initSortTimer
  2931 ;;		_lcdInst
  2932 ;; This function is called by:
  2933 ;;		_sort
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text3
  2938  002E26                     __ptext3:
  2939                           	opt stack 0
  2940  002E26                     _Loading:
  2941                           	opt stack 18
  2942                           
  2943                           ;sort.c: 68: if(first){
  2944                           
  2945                           ;incstack = 0
  2946  002E26  0100               	movlb	0	; () banked
  2947  002E28  51E4               	movf	_first& (0+255),w,b
  2948  002E2A  0100               	movlb	0	; () banked
  2949  002E2C  11E5               	iorwf	(_first+1)& (0+255),w,b
  2950  002E2E  B4D8               	btfsc	status,2,c
  2951  002E30  D033               	goto	l6150
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;sort.c: 69: initGlobalVars();
  2955  002E32  ECD3  F01B         	call	_initGlobalVars	;wreg free
  2956                           
  2957                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2958  002E36  0E01               	movlw	1
  2959  002E38  ECE2  F020         	call	_lcdInst
  2960  002E3C  0E68               	movlw	104
  2961  002E3E  0100               	movlb	0	; () banked
  2962  002E40  6FB1               	movwf	??_Loading& (0+255),b
  2963  002E42  0EE4               	movlw	228
  2964  002E44                     u6717:
  2965  002E44  2EE8               	decfsz	wreg,f,c
  2966  002E46  D7FE               	bra	u6717
  2967  002E48  2FB1               	decfsz	??_Loading& (0+255),f,b
  2968  002E4A  D7FC               	bra	u6717
  2969  002E4C  F000               	nop	
  2970                           
  2971                           ;sort.c: 71: initSortTimer();
  2972  002E4E  EC23  F019         	call	_initSortTimer	;wreg free
  2973                           
  2974                           ;sort.c: 76: sel = EEPROM_read(0);
  2975  002E52  0E00               	movlw	0
  2976  002E54  0100               	movlb	0	; () banked
  2977  002E56  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2978  002E58  0E00               	movlw	0
  2979  002E5A  6F80               	movwf	EEPROM_read@address& (0+255),b
  2980  002E5C  ECA5  F020         	call	_EEPROM_read	;wreg free
  2981  002E60  0100               	movlb	0	; () banked
  2982  002E62  6FFD               	movwf	_sel& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2986  002E64  0100               	movlb	0	; () banked
  2987  002E66  51FD               	movf	_sel& (0+255),w,b
  2988  002E68  0D0B               	mullw	11
  2989  002E6A  0E01               	movlw	1
  2990  002E6C  24F3               	addwf	prodl,w,c
  2991  002E6E  0100               	movlb	0	; () banked
  2992  002E70  6FB3               	movwf	Loading@addr& (0+255),b
  2993  002E72  0E00               	movlw	0
  2994  002E74  20F4               	addwfc	prodh,w,c
  2995  002E76  0100               	movlb	0	; () banked
  2996  002E78  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  3000  002E7A  0E7F               	movlw	127
  3001  002E7C  0100               	movlb	0	; () banked
  3002  002E7E  6FB5               	movwf	Loading@byte1& (0+255),b
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;sort.c: 79: EEPROM_write(addr, byte1);
  3006  002E80  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3007  002E84  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3008  002E88  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3009  002E8C  EC87  F017         	call	_EEPROM_write	;wreg free
  3010                           
  3011                           ;sort.c: 82: LATAbits.LATA5 = 1;
  3012  002E90  8A89               	bsf	3977,5,c	;volatile
  3013                           
  3014                           ;sort.c: 85: initServos();
  3015  002E92  ECCA  F01C         	call	_initServos	;wreg free
  3016                           
  3017                           ;sort.c: 86: }
  3018  002E96  0012               	return	
  3019  002E98                     l6150:
  3020                           
  3021                           ;sort.c: 87: else{
  3022                           ;sort.c: 90: if(!f_loadingNewCan){
  3023  002E98  0100               	movlb	0	; () banked
  3024  002E9A  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3025  002E9C  0100               	movlb	0	; () banked
  3026  002E9E  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3027  002EA0  A4D8               	btfss	status,2,c
  3028  002EA2  D017               	goto	l6166
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;sort.c: 92: getIR();
  3032  002EA4  EC9E  F01D         	call	_getIR	;wreg free
  3033                           
  3034                           ;sort.c: 94: if(!f_loadingNewCan){
  3035  002EA8  0100               	movlb	0	; () banked
  3036  002EAA  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3037  002EAC  0100               	movlb	0	; () banked
  3038  002EAE  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3039  002EB0  B4D8               	btfsc	status,2,c
  3040  002EB2  0012               	return	
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;sort.c: 98: else{
  3044                           ;sort.c: 99: count_total++;
  3045                           
  3046                           ; BSR set to: 0
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;sort.c: 96: }
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;sort.c: 95: return;
  3053  002EB4  0100               	movlb	0	; () banked
  3054  002EB6  4BFE               	infsnz	_count_total& (0+255),f,b
  3055  002EB8  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;sort.c: 100: if(count_total == 12){
  3059  002EBA  0E0C               	movlw	12
  3060  002EBC  0100               	movlb	0	; () banked
  3061  002EBE  19FE               	xorwf	_count_total& (0+255),w,b
  3062  002EC0  0100               	movlb	0	; () banked
  3063  002EC2  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3064  002EC4  A4D8               	btfss	status,2,c
  3065  002EC6  0012               	return	
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;sort.c: 101: f_lastCan = 1;
  3069  002EC8  0E00               	movlw	0
  3070  002ECA  6E74               	movwf	_f_lastCan+1,c
  3071  002ECC  0E01               	movlw	1
  3072  002ECE  6E73               	movwf	_f_lastCan,c
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;sort.c: 102: }
  3076                           ;sort.c: 103: }
  3077                           ;sort.c: 104: }
  3078                           
  3079                           ; BSR set to: 0
  3080  002ED0  0012               	return	
  3081  002ED2                     l6166:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;sort.c: 107: else if(f_ID_receive){
  3085  002ED2  506B               	movf	_f_ID_receive,w,c
  3086  002ED4  106C               	iorwf	_f_ID_receive+1,w,c
  3087  002ED6  B4D8               	btfsc	status,2,c
  3088  002ED8  0012               	return	
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;sort.c: 108: f_loadingNewCan = 0;
  3092  002EDA  0E00               	movlw	0
  3093  002EDC  0100               	movlb	0	; () banked
  3094  002EDE  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3095  002EE0  0E00               	movlw	0
  3096  002EE2  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;sort.c: 109: LATAbits.LATA4 = 1;
  3100  002EE4  8889               	bsf	3977,4,c	;volatile
  3101                           
  3102                           ;sort.c: 110: f_can_coming_to_ID = 1;
  3103  002EE6  0E00               	movlw	0
  3104  002EE8  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3105  002EEA  0E01               	movlw	1
  3106  002EEC  6E6D               	movwf	_f_can_coming_to_ID,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;sort.c: 111: _delay((unsigned long)((300)*(32000000/4000.0)));
  3110  002EEE  0E0D               	movlw	13
  3111  002EF0  0100               	movlb	0	; () banked
  3112  002EF2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3113  002EF4  0E2D               	movlw	45
  3114  002EF6  0100               	movlb	0	; () banked
  3115  002EF8  6FB1               	movwf	??_Loading& (0+255),b
  3116  002EFA  0ED7               	movlw	215
  3117  002EFC                     u6727:
  3118  002EFC  2EE8               	decfsz	wreg,f,c
  3119  002EFE  D7FE               	bra	u6727
  3120  002F00  2FB1               	decfsz	??_Loading& (0+255),f,b
  3121  002F02  D7FC               	bra	u6727
  3122  002F04  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3123  002F06  D7FA               	bra	u6727
  3124  002F08  D000               	nop2	
  3125                           
  3126                           ;sort.c: 112: LATAbits.LATA4 = 0;
  3127  002F0A  9889               	bcf	3977,4,c	;volatile
  3128  002F0C  0012               	return	
  3129  002F0E                     __end_of_Loading:
  3130                           	opt stack 0
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           prodh	equ	0xFF4
  3136                           prodl	equ	0xFF3
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1l	equ	0xFE1
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _initSortTimer *****************
  3144 ;; Defined at:
  3145 ;;		line 228 in file "sort.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;		None
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  i               2    8[BANK0 ] int 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;Total ram usage:        5 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:   10
  3166 ;; This function calls:
  3167 ;;		_getRTC
  3168 ;; This function is called by:
  3169 ;;		_Loading
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text4
  3174  003246                     __ptext4:
  3175                           	opt stack 0
  3176  003246                     _initSortTimer:
  3177                           	opt stack 18
  3178                           
  3179                           ;sort.c: 230: getRTC();
  3180                           
  3181                           ;incstack = 0
  3182  003246  EC9E  F01A         	call	_getRTC	;wreg free
  3183                           
  3184                           ;sort.c: 231: for(int i = 0; i < 7; i++){
  3185  00324A  0E00               	movlw	0
  3186  00324C  0100               	movlb	0	; () banked
  3187  00324E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3188  003250  0E00               	movlw	0
  3189  003252  6F88               	movwf	initSortTimer@i& (0+255),b
  3190  003254                     l5770:
  3191                           
  3192                           ; BSR set to: 0
  3193  003254  0100               	movlb	0	; () banked
  3194  003256  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3195  003258  D008               	goto	l5774
  3196  00325A  0100               	movlb	0	; () banked
  3197  00325C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3198  00325E  E140               	bnz	l5780
  3199  003260  0E07               	movlw	7
  3200  003262  0100               	movlb	0	; () banked
  3201  003264  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3202  003266  B0D8               	btfsc	status,0,c
  3203  003268  D03B               	goto	l5780
  3204  00326A                     l5774:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;sort.c: 232: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3208  00326A  0E24               	movlw	low _time
  3209  00326C  0100               	movlb	0	; () banked
  3210  00326E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3211  003270  6ED9               	movwf	fsr2l,c
  3212  003272  0E01               	movlw	high _time
  3213  003274  0100               	movlb	0	; () banked
  3214  003276  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3215  003278  6EDA               	movwf	fsr2h,c
  3216  00327A  50DF               	movf	indf2,w,c
  3217  00327C  0100               	movlb	0	; () banked
  3218  00327E  6F85               	movwf	??_initSortTimer& (0+255),b
  3219  003280  0100               	movlb	0	; () banked
  3220  003282  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3221  003284  0E0F               	movlw	15
  3222  003286  1785               	andwf	??_initSortTimer& (0+255),f,b
  3223  003288  0E0F               	movlw	15
  3224  00328A  0100               	movlb	0	; () banked
  3225  00328C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3226  00328E  0100               	movlb	0	; () banked
  3227  003290  5185               	movf	??_initSortTimer& (0+255),w,b
  3228  003292  0D0A               	mullw	10
  3229  003294  0E24               	movlw	low _time
  3230  003296  0100               	movlb	0	; () banked
  3231  003298  2588               	addwf	initSortTimer@i& (0+255),w,b
  3232  00329A  6ED9               	movwf	fsr2l,c
  3233  00329C  0E01               	movlw	high _time
  3234  00329E  0100               	movlb	0	; () banked
  3235  0032A0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3236  0032A2  6EDA               	movwf	fsr2h,c
  3237  0032A4  50DF               	movf	indf2,w,c
  3238  0032A6  0B0F               	andlw	15
  3239  0032A8  0100               	movlb	0	; () banked
  3240  0032AA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3241  0032AC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3242  0032AE  50F3               	movf	prodl,w,c
  3243  0032B0  0100               	movlb	0	; () banked
  3244  0032B2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3245  0032B4  50F4               	movf	prodh,w,c
  3246  0032B6  0100               	movlb	0	; () banked
  3247  0032B8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3248  0032BA  90D8               	bcf	status,0,c
  3249  0032BC  0100               	movlb	0	; () banked
  3250  0032BE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3251  0032C0  6ED9               	movwf	fsr2l,c
  3252  0032C2  0100               	movlb	0	; () banked
  3253  0032C4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3254  0032C6  6EDA               	movwf	fsr2h,c
  3255  0032C8  0E0E               	movlw	low _startTime
  3256  0032CA  26D9               	addwf	fsr2l,f,c
  3257  0032CC  0E01               	movlw	high _startTime
  3258  0032CE  22DA               	addwfc	fsr2h,f,c
  3259  0032D0  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3260  0032D4  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3261                           
  3262                           ; BSR set to: 0
  3263  0032D8  0100               	movlb	0	; () banked
  3264  0032DA  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3265  0032DC  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3266  0032DE  D7BA               	goto	l5770
  3267  0032E0                     l5780:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;sort.c: 233: }
  3271                           ;sort.c: 235: T0CON = 0b00010111;
  3272  0032E0  0E17               	movlw	23
  3273  0032E2  6ED5               	movwf	4053,c	;volatile
  3274                           
  3275                           ;sort.c: 244: TMR0H = 0b10000101;
  3276  0032E4  0E85               	movlw	133
  3277  0032E6  6ED7               	movwf	4055,c	;volatile
  3278                           
  3279                           ;sort.c: 245: TMR0L = 0b11101110;
  3280  0032E8  0EEE               	movlw	238
  3281  0032EA  6ED6               	movwf	4054,c	;volatile
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;sort.c: 246: TMR0ON = 1;
  3285  0032EC  8ED5               	bsf	4053,7,c	;volatile
  3286                           
  3287                           ; BSR set to: 0
  3288  0032EE  0012               	return		;funcret
  3289  0032F0                     __end_of_initSortTimer:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _initServos *****************
  3309 ;; Defined at:
  3310 ;;		line 248 in file "sort.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    8
  3331 ;; This function calls:
  3332 ;;		_updateServoPosition
  3333 ;; This function is called by:
  3334 ;;		_Loading
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text5
  3339  003994                     __ptext5:
  3340                           	opt stack 0
  3341  003994                     _initServos:
  3342                           	opt stack 20
  3343                           
  3344                           ;sort.c: 249: updateServoPosition(1500, 1);
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;incstack = 0
  3348  003994  0E05               	movlw	5
  3349  003996  0100               	movlb	0	; () banked
  3350  003998  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3351  00399A  0EDC               	movlw	220
  3352  00399C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3353  00399E  0E00               	movlw	0
  3354  0039A0  0100               	movlb	0	; () banked
  3355  0039A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3356  0039A4  0E01               	movlw	1
  3357  0039A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3358  0039A8  EC5F  F01B         	call	_updateServoPosition	;wreg free
  3359                           
  3360                           ;sort.c: 250: updateServoPosition(1000, 3);
  3361  0039AC  0E03               	movlw	3
  3362  0039AE  0100               	movlb	0	; () banked
  3363  0039B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3364  0039B2  0EE8               	movlw	232
  3365  0039B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3366  0039B6  0E00               	movlw	0
  3367  0039B8  0100               	movlb	0	; () banked
  3368  0039BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3369  0039BC  0E03               	movlw	3
  3370  0039BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3371  0039C0  EC5F  F01B         	call	_updateServoPosition	;wreg free
  3372                           
  3373                           ;sort.c: 251: TMR1ON = 1;
  3374  0039C4  80CD               	bsf	4045,0,c	;volatile
  3375                           
  3376                           ;sort.c: 252: was_low_1 = 0;
  3377  0039C6  0E00               	movlw	0
  3378  0039C8  6E7A               	movwf	_was_low_1+1,c	;volatile
  3379  0039CA  0E00               	movlw	0
  3380  0039CC  6E79               	movwf	_was_low_1,c	;volatile
  3381                           
  3382                           ;sort.c: 253: _delay((unsigned long)((5)*(32000000/4000.0)));
  3383  0039CE  0E34               	movlw	52
  3384  0039D0  0100               	movlb	0	; () banked
  3385  0039D2  6F88               	movwf	??_initServos& (0+255),b
  3386  0039D4  0EF1               	movlw	241
  3387  0039D6                     u6737:
  3388  0039D6  2EE8               	decfsz	wreg,f,c
  3389  0039D8  D7FE               	bra	u6737
  3390  0039DA  2F88               	decfsz	??_initServos& (0+255),f,b
  3391  0039DC  D7FC               	bra	u6737
  3392  0039DE  D000               	nop2	
  3393                           
  3394                           ;sort.c: 254: TMR3ON = 1;
  3395  0039E0  80B1               	bsf	4017,0,c	;volatile
  3396                           
  3397                           ;sort.c: 255: was_low_3 = 0;
  3398  0039E2  0E00               	movlw	0
  3399  0039E4  6E7C               	movwf	_was_low_3+1,c	;volatile
  3400  0039E6  0E00               	movlw	0
  3401  0039E8  6E7B               	movwf	_was_low_3,c	;volatile
  3402                           
  3403                           ;sort.c: 256: LATCbits.LATC0 = 0;
  3404  0039EA  908B               	bcf	3979,0,c	;volatile
  3405  0039EC  0012               	return		;funcret
  3406  0039EE                     __end_of_initServos:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           postinc0	equ	0xFEE
  3415                           wreg	equ	0xFE8
  3416                           postdec1	equ	0xFE5
  3417                           fsr1l	equ	0xFE1
  3418                           indf2	equ	0xFDF
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _initGlobalVars *****************
  3426 ;; Defined at:
  3427 ;;		line 209 in file "sort.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    7
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_Loading
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text6
  3456  0037A6                     __ptext6:
  3457                           	opt stack 0
  3458  0037A6                     _initGlobalVars:
  3459                           	opt stack 21
  3460                           
  3461                           ;sort.c: 211: first = 0;
  3462                           
  3463                           ;incstack = 0
  3464  0037A6  0E00               	movlw	0
  3465  0037A8  0100               	movlb	0	; () banked
  3466  0037AA  6FE5               	movwf	(_first+1)& (0+255),b
  3467  0037AC  0E00               	movlw	0
  3468  0037AE  6FE4               	movwf	_first& (0+255),b
  3469                           
  3470                           ;sort.c: 214: f_loadingNewCan = 0;
  3471  0037B0  0E00               	movlw	0
  3472  0037B2  0100               	movlb	0	; () banked
  3473  0037B4  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3474  0037B6  0E00               	movlw	0
  3475  0037B8  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3476                           
  3477                           ;sort.c: 215: f_lastCan = 0;
  3478  0037BA  0E00               	movlw	0
  3479  0037BC  6E74               	movwf	_f_lastCan+1,c
  3480  0037BE  0E00               	movlw	0
  3481  0037C0  6E73               	movwf	_f_lastCan,c
  3482                           
  3483                           ;sort.c: 216: f_ID_receive = 1;
  3484  0037C2  0E00               	movlw	0
  3485  0037C4  6E6C               	movwf	_f_ID_receive+1,c
  3486  0037C6  0E01               	movlw	1
  3487  0037C8  6E6B               	movwf	_f_ID_receive,c
  3488                           
  3489                           ;sort.c: 217: f_can_coming_to_ID = 0;
  3490  0037CA  0E00               	movlw	0
  3491  0037CC  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3492  0037CE  0E00               	movlw	0
  3493  0037D0  6E6D               	movwf	_f_can_coming_to_ID,c
  3494                           
  3495                           ;sort.c: 218: f_can_coming_to_distribution = 0;
  3496  0037D2  0E00               	movlw	0
  3497  0037D4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3498  0037D6  0E00               	movlw	0
  3499  0037D8  6E6F               	movwf	_f_can_coming_to_distribution,c
  3500                           
  3501                           ;sort.c: 219: f_can_distributed = 0;
  3502  0037DA  0E00               	movlw	0
  3503  0037DC  6E72               	movwf	_f_can_distributed+1,c
  3504  0037DE  0E00               	movlw	0
  3505  0037E0  6E71               	movwf	_f_can_distributed,c
  3506                           
  3507                           ;sort.c: 222: count_total = 0;
  3508  0037E2  0E00               	movlw	0
  3509  0037E4  0100               	movlb	0	; () banked
  3510  0037E6  6FFF               	movwf	(_count_total+1)& (0+255),b
  3511  0037E8  0E00               	movlw	0
  3512  0037EA  6FFE               	movwf	_count_total& (0+255),b
  3513                           
  3514                           ;sort.c: 223: count_pop_no_tab = 0;
  3515  0037EC  0E00               	movlw	0
  3516  0037EE  6E62               	movwf	_count_pop_no_tab+1,c
  3517  0037F0  0E00               	movlw	0
  3518  0037F2  6E61               	movwf	_count_pop_no_tab,c
  3519                           
  3520                           ;sort.c: 224: count_pop_w_tab = 0;
  3521  0037F4  0E00               	movlw	0
  3522  0037F6  6E64               	movwf	_count_pop_w_tab+1,c
  3523  0037F8  0E00               	movlw	0
  3524  0037FA  6E63               	movwf	_count_pop_w_tab,c
  3525                           
  3526                           ;sort.c: 225: count_can_w_lab = 0;
  3527  0037FC  0E00               	movlw	0
  3528  0037FE  6E60               	movwf	_count_can_w_lab+1,c
  3529  003800  0E00               	movlw	0
  3530  003802  6E5F               	movwf	_count_can_w_lab,c
  3531                           
  3532                           ;sort.c: 226: count_can_no_lab = 0;
  3533  003804  0E00               	movlw	0
  3534  003806  6E5E               	movwf	_count_can_no_lab+1,c
  3535  003808  0E00               	movlw	0
  3536  00380A  6E5D               	movwf	_count_can_no_lab,c
  3537                           
  3538                           ; BSR set to: 0
  3539  00380C  0012               	return		;funcret
  3540  00380E                     __end_of_initGlobalVars:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           postdec1	equ	0xFE5
  3551                           fsr1l	equ	0xFE1
  3552                           indf2	equ	0xFDF
  3553                           postinc2	equ	0xFDE
  3554                           postdec2	equ	0xFDD
  3555                           fsr2h	equ	0xFDA
  3556                           fsr2l	equ	0xFD9
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _getIR *****************
  3560 ;; Defined at:
  3561 ;;		line 285 in file "sort.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        2 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    9
  3582 ;; This function calls:
  3583 ;;		_readIR
  3584 ;; This function is called by:
  3585 ;;		_Loading
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text7
  3590  003B3C                     __ptext7:
  3591                           	opt stack 0
  3592  003B3C                     _getIR:
  3593                           	opt stack 19
  3594                           
  3595                           ;sort.c: 286: readIR();
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;incstack = 0
  3599  003B3C  EC9D  F01E         	call	_readIR	;wreg free
  3600                           
  3601                           ;sort.c: 287: if(IR_signal==1){
  3602  003B40  0100               	movlb	0	; () banked
  3603  003B42  05DA               	decf	_IR_signal& (0+255),w,b
  3604  003B44  0100               	movlb	0	; () banked
  3605  003B46  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3606  003B48  A4D8               	btfss	status,2,c
  3607  003B4A  0012               	return	
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;sort.c: 288: _delay((unsigned long)((100)*(32000000/4000.0)));
  3611  003B4C  0E05               	movlw	5
  3612  003B4E  0100               	movlb	0	; () banked
  3613  003B50  6F87               	movwf	(??_getIR+1)& (0+255),b
  3614  003B52  0E0F               	movlw	15
  3615  003B54  0100               	movlb	0	; () banked
  3616  003B56  6F86               	movwf	??_getIR& (0+255),b
  3617  003B58  0EF1               	movlw	241
  3618  003B5A                     u6747:
  3619  003B5A  2EE8               	decfsz	wreg,f,c
  3620  003B5C  D7FE               	bra	u6747
  3621  003B5E  2F86               	decfsz	??_getIR& (0+255),f,b
  3622  003B60  D7FC               	bra	u6747
  3623  003B62  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3624  003B64  D7FA               	bra	u6747
  3625                           
  3626                           ;sort.c: 289: if(IR_signal==1){
  3627  003B66  0100               	movlb	0	; () banked
  3628  003B68  05DA               	decf	_IR_signal& (0+255),w,b
  3629  003B6A  0100               	movlb	0	; () banked
  3630  003B6C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3631  003B6E  A4D8               	btfss	status,2,c
  3632  003B70  D006               	goto	l5860
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;sort.c: 290: f_loadingNewCan = 1;
  3636  003B72  0E00               	movlw	0
  3637  003B74  0100               	movlb	0	; () banked
  3638  003B76  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3639  003B78  0E01               	movlw	1
  3640  003B7A  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3641                           
  3642                           ;sort.c: 291: }
  3643  003B7C  0012               	return	
  3644  003B7E                     l5860:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;sort.c: 292: else{
  3648                           ;sort.c: 293: f_loadingNewCan = 0;
  3649  003B7E  0E00               	movlw	0
  3650  003B80  0100               	movlb	0	; () banked
  3651  003B82  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3652  003B84  0E00               	movlw	0
  3653  003B86  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656  003B88  0012               	return	
  3657  003B8A                     __end_of_getIR:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _ID *****************
  3677 ;; Defined at:
  3678 ;;		line 116 in file "sort.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;Total ram usage:        8 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    9
  3699 ;; This function calls:
  3700 ;;		_readMAG
  3701 ;; This function is called by:
  3702 ;;		_sort
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text8
  3707  0029F0                     __ptext8:
  3708                           	opt stack 0
  3709  0029F0                     _ID:
  3710                           	opt stack 20
  3711                           
  3712                           ;sort.c: 117: if(f_can_coming_to_ID){
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;incstack = 0
  3716  0029F0  506D               	movf	_f_can_coming_to_ID,w,c
  3717  0029F2  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3718  0029F4  B4D8               	btfsc	status,2,c
  3719  0029F6  0012               	return	
  3720                           
  3721                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3722  0029F8  0E15               	movlw	21
  3723  0029FA  0100               	movlb	0	; () banked
  3724  0029FC  6F87               	movwf	(??_ID+1)& (0+255),b
  3725  0029FE  0E4B               	movlw	75
  3726  002A00  0100               	movlb	0	; () banked
  3727  002A02  6F86               	movwf	??_ID& (0+255),b
  3728  002A04  0EBE               	movlw	190
  3729  002A06                     u6757:
  3730  002A06  2EE8               	decfsz	wreg,f,c
  3731  002A08  D7FE               	bra	u6757
  3732  002A0A  2F86               	decfsz	??_ID& (0+255),f,b
  3733  002A0C  D7FC               	bra	u6757
  3734  002A0E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3735  002A10  D7FA               	bra	u6757
  3736  002A12  F000               	nop	
  3737                           
  3738                           ;sort.c: 124: int sensor_outputs[3];
  3739                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3740  002A14  A480               	btfss	3968,2,c	;volatile
  3741  002A16  D004               	goto	u4650
  3742  002A18  0100               	movlb	0	; () banked
  3743  002A1A  6B86               	clrf	??_ID& (0+255),b
  3744  002A1C  2B86               	incf	??_ID& (0+255),f,b
  3745  002A1E  D002               	goto	u4658
  3746  002A20                     u4650:
  3747  002A20  0100               	movlb	0	; () banked
  3748  002A22  6B86               	clrf	??_ID& (0+255),b
  3749  002A24                     u4658:
  3750  002A24  0100               	movlb	0	; () banked
  3751  002A26  5186               	movf	??_ID& (0+255),w,b
  3752  002A28  0100               	movlb	0	; () banked
  3753  002A2A  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3754  002A2C  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;sort.c: 130: if(!sensor_outputs[0]){
  3758  002A2E  0100               	movlb	0	; () banked
  3759  002A30  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3760  002A32  0100               	movlb	0	; () banked
  3761  002A34  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3762  002A36  A4D8               	btfss	status,2,c
  3763  002A38  D029               	goto	l6198
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;sort.c: 131: readMAG();
  3767  002A3A  ECC5  F01D         	call	_readMAG	;wreg free
  3768                           
  3769                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3770  002A3E  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3771  002A42  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3772                           
  3773                           ;sort.c: 133: if(!sensor_outputs[1]){
  3774  002A46  0100               	movlb	0	; () banked
  3775  002A48  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3776  002A4A  0100               	movlb	0	; () banked
  3777  002A4C  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3778  002A4E  A4D8               	btfss	status,2,c
  3779  002A50  D01D               	goto	l6198
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3783  002A52  8689               	bsf	3977,3,c	;volatile
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;sort.c: 136: _delay((unsigned long)((300)*(32000000/4000.0)));
  3787  002A54  0E0D               	movlw	13
  3788  002A56  0100               	movlb	0	; () banked
  3789  002A58  6F87               	movwf	(??_ID+1)& (0+255),b
  3790  002A5A  0E2D               	movlw	45
  3791  002A5C  0100               	movlb	0	; () banked
  3792  002A5E  6F86               	movwf	??_ID& (0+255),b
  3793  002A60  0ED7               	movlw	215
  3794  002A62                     u6767:
  3795  002A62  2EE8               	decfsz	wreg,f,c
  3796  002A64  D7FE               	bra	u6767
  3797  002A66  2F86               	decfsz	??_ID& (0+255),f,b
  3798  002A68  D7FC               	bra	u6767
  3799  002A6A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3800  002A6C  D7FA               	bra	u6767
  3801  002A6E  D000               	nop2	
  3802                           
  3803                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3804  002A70  A480               	btfss	3968,2,c	;volatile
  3805  002A72  D004               	goto	u4680
  3806  002A74  0100               	movlb	0	; () banked
  3807  002A76  6B86               	clrf	??_ID& (0+255),b
  3808  002A78  2B86               	incf	??_ID& (0+255),f,b
  3809  002A7A  D002               	goto	u4688
  3810  002A7C                     u4680:
  3811  002A7C  0100               	movlb	0	; () banked
  3812  002A7E  6B86               	clrf	??_ID& (0+255),b
  3813  002A80                     u4688:
  3814  002A80  0100               	movlb	0	; () banked
  3815  002A82  5186               	movf	??_ID& (0+255),w,b
  3816  002A84  0100               	movlb	0	; () banked
  3817  002A86  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3818  002A88  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3822  002A8A  9689               	bcf	3977,3,c	;volatile
  3823  002A8C                     l6198:
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;sort.c: 139: }
  3827                           ;sort.c: 140: }
  3828                           ;sort.c: 143: if(!sensor_outputs[0]){
  3829  002A8C  0100               	movlb	0	; () banked
  3830  002A8E  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3831  002A90  0100               	movlb	0	; () banked
  3832  002A92  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3833  002A94  A4D8               	btfss	status,2,c
  3834  002A96  D01E               	goto	l6216
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;sort.c: 144: if(!sensor_outputs[1]){
  3838  002A98  0100               	movlb	0	; () banked
  3839  002A9A  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3840  002A9C  0100               	movlb	0	; () banked
  3841  002A9E  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3842  002AA0  A4D8               	btfss	status,2,c
  3843  002AA2  D012               	goto	l6212
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;sort.c: 145: if(!sensor_outputs[2]){
  3847  002AA4  0100               	movlb	0	; () banked
  3848  002AA6  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3849  002AA8  0100               	movlb	0	; () banked
  3850  002AAA  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3851  002AAC  A4D8               	btfss	status,2,c
  3852  002AAE  D006               	goto	l6208
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;sort.c: 146: count_pop_no_tab++;
  3856  002AB0  4A61               	infsnz	_count_pop_no_tab,f,c
  3857  002AB2  2A62               	incf	_count_pop_no_tab+1,f,c
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;sort.c: 147: cur_can = 0;
  3861  002AB4  0E00               	movlw	0
  3862  002AB6  6E66               	movwf	_cur_can+1,c
  3863  002AB8  0E00               	movlw	0
  3864  002ABA  D011               	goto	L3
  3865  002ABC                     l6208:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;sort.c: 149: else{
  3869                           ;sort.c: 150: count_pop_w_tab++;
  3870  002ABC  4A63               	infsnz	_count_pop_w_tab,f,c
  3871  002ABE  2A64               	incf	_count_pop_w_tab+1,f,c
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;sort.c: 151: cur_can = 1;
  3875  002AC0  0E00               	movlw	0
  3876  002AC2  6E66               	movwf	_cur_can+1,c
  3877  002AC4  0E01               	movlw	1
  3878  002AC6  D00B               	goto	L3
  3879  002AC8                     l6212:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;sort.c: 154: else{
  3883                           ;sort.c: 155: count_can_w_lab++;
  3884  002AC8  4A5F               	infsnz	_count_can_w_lab,f,c
  3885  002ACA  2A60               	incf	_count_can_w_lab+1,f,c
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;sort.c: 156: cur_can = 2;
  3889  002ACC  0E00               	movlw	0
  3890  002ACE  6E66               	movwf	_cur_can+1,c
  3891  002AD0  0E02               	movlw	2
  3892  002AD2  D005               	goto	L3
  3893  002AD4                     l6216:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;sort.c: 159: else{
  3897                           ;sort.c: 160: count_can_no_lab++;
  3898  002AD4  4A5D               	infsnz	_count_can_no_lab,f,c
  3899  002AD6  2A5E               	incf	_count_can_no_lab+1,f,c
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;sort.c: 161: cur_can = 3;
  3903  002AD8  0E00               	movlw	0
  3904  002ADA  6E66               	movwf	_cur_can+1,c
  3905  002ADC  0E03               	movlw	3
  3906  002ADE                     L3:
  3907  002ADE  6E65               	movwf	_cur_can,c
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;sort.c: 162: }
  3911                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3912                           
  3913                           ; BSR set to: 0
  3914  002AE0  808B               	bsf	3979,0,c	;volatile
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3918  002AE2  0E00               	movlw	0
  3919  002AE4  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3920  002AE6  0E01               	movlw	1
  3921  002AE8  6E6F               	movwf	_f_can_coming_to_distribution,c
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3925  002AEA  0E15               	movlw	21
  3926  002AEC  0100               	movlb	0	; () banked
  3927  002AEE  6F87               	movwf	(??_ID+1)& (0+255),b
  3928  002AF0  0E4B               	movlw	75
  3929  002AF2  0100               	movlb	0	; () banked
  3930  002AF4  6F86               	movwf	??_ID& (0+255),b
  3931  002AF6  0EBE               	movlw	190
  3932  002AF8                     u6777:
  3933  002AF8  2EE8               	decfsz	wreg,f,c
  3934  002AFA  D7FE               	bra	u6777
  3935  002AFC  2F86               	decfsz	??_ID& (0+255),f,b
  3936  002AFE  D7FC               	bra	u6777
  3937  002B00  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3938  002B02  D7FA               	bra	u6777
  3939  002B04  F000               	nop	
  3940                           
  3941                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3942  002B06  908B               	bcf	3979,0,c	;volatile
  3943                           
  3944                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3945  002B08  0E00               	movlw	0
  3946  002B0A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3947  002B0C  0E00               	movlw	0
  3948  002B0E  6E6D               	movwf	_f_can_coming_to_ID,c
  3949  002B10  0012               	return	
  3950  002B12                     __end_of_ID:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           fsr1l	equ	0xFE1
  3962                           indf2	equ	0xFDF
  3963                           postinc2	equ	0xFDE
  3964                           postdec2	equ	0xFDD
  3965                           fsr2h	equ	0xFDA
  3966                           fsr2l	equ	0xFD9
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _Distribution *****************
  3970 ;; Defined at:
  3971 ;;		line 172 in file "sort.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:        2 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    8
  3992 ;; This function calls:
  3993 ;;		_updateServoPosition
  3994 ;; This function is called by:
  3995 ;;		_sort
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text9
  4000  002774                     __ptext9:
  4001                           	opt stack 0
  4002  002774                     _Distribution:
  4003                           	opt stack 21
  4004                           
  4005                           ;sort.c: 173: if(f_can_coming_to_distribution){
  4006                           
  4007                           ;incstack = 0
  4008  002774  506F               	movf	_f_can_coming_to_distribution,w,c
  4009  002776  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4010  002778  B4D8               	btfsc	status,2,c
  4011  00277A  0012               	return	
  4012  00277C  D034               	goto	l6244
  4013  00277E                     l6234:
  4014                           
  4015                           ;sort.c: 178: updateServoPosition(1000, 1);
  4016  00277E  0E03               	movlw	3
  4017  002780  0100               	movlb	0	; () banked
  4018  002782  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4019  002784  0EE8               	movlw	232
  4020  002786  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4021  002788  0E00               	movlw	0
  4022  00278A  0100               	movlb	0	; () banked
  4023  00278C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4024  00278E  0E01               	movlw	1
  4025  002790  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4026  002792  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4027                           
  4028                           ;sort.c: 179: break;
  4029  002796  D03E               	goto	l6246
  4030  002798                     l6236:
  4031                           
  4032                           ;sort.c: 181: updateServoPosition(1333, 1);
  4033  002798  0E05               	movlw	5
  4034  00279A  0100               	movlb	0	; () banked
  4035  00279C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4036  00279E  0E35               	movlw	53
  4037  0027A0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4038  0027A2  0E00               	movlw	0
  4039  0027A4  0100               	movlb	0	; () banked
  4040  0027A6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4041  0027A8  0E01               	movlw	1
  4042  0027AA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4043  0027AC  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4044                           
  4045                           ;sort.c: 182: break;
  4046  0027B0  D031               	goto	l6246
  4047  0027B2                     l6238:
  4048                           
  4049                           ;sort.c: 184: updateServoPosition(1666, 1);
  4050  0027B2  0E06               	movlw	6
  4051  0027B4  0100               	movlb	0	; () banked
  4052  0027B6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4053  0027B8  0E82               	movlw	130
  4054  0027BA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4055  0027BC  0E00               	movlw	0
  4056  0027BE  0100               	movlb	0	; () banked
  4057  0027C0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4058  0027C2  0E01               	movlw	1
  4059  0027C4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4060  0027C6  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4061                           
  4062                           ;sort.c: 185: break;
  4063  0027CA  D024               	goto	l6246
  4064  0027CC                     l6240:
  4065                           
  4066                           ;sort.c: 187: updateServoPosition(2000, 1);
  4067  0027CC  0E07               	movlw	7
  4068  0027CE  0100               	movlb	0	; () banked
  4069  0027D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4070  0027D2  0ED0               	movlw	208
  4071  0027D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4072  0027D6  0E00               	movlw	0
  4073  0027D8  0100               	movlb	0	; () banked
  4074  0027DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4075  0027DC  0E01               	movlw	1
  4076  0027DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4077  0027E0  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4078                           
  4079                           ;sort.c: 191: }
  4080                           
  4081                           ;sort.c: 190: break;
  4082                           
  4083                           ;sort.c: 189: default:
  4084                           
  4085                           ;sort.c: 188: break;
  4086  0027E4  D017               	goto	l6246
  4087  0027E6                     l6244:
  4088  0027E6  C065  F088         	movff	_cur_can,??_Distribution
  4089  0027EA  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4090                           
  4091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4092                           ; Switch size 1, requested type "space"
  4093                           ; Number of cases is 1, Range of values is 0 to 0
  4094                           ; switch strategies available:
  4095                           ; Name         Instructions Cycles
  4096                           ; simple_byte            4     3 (average)
  4097                           ;	Chosen strategy is simple_byte
  4098  0027EE  0100               	movlb	0	; () banked
  4099  0027F0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4100  0027F2  0A00               	xorlw	0	; case 0
  4101  0027F4  A4D8               	btfss	status,2,c
  4102  0027F6  D00E               	goto	l6246
  4103                           
  4104                           ; BSR set to: 0
  4105                           ; Switch size 1, requested type "space"
  4106                           ; Number of cases is 4, Range of values is 0 to 3
  4107                           ; switch strategies available:
  4108                           ; Name         Instructions Cycles
  4109                           ; simple_byte           13     7 (average)
  4110                           ;	Chosen strategy is simple_byte
  4111  0027F8  0100               	movlb	0	; () banked
  4112  0027FA  5188               	movf	??_Distribution& (0+255),w,b
  4113  0027FC  0A00               	xorlw	0	; case 0
  4114  0027FE  B4D8               	btfsc	status,2,c
  4115  002800  D7BE               	goto	l6234
  4116  002802  0A01               	xorlw	1	; case 1
  4117  002804  B4D8               	btfsc	status,2,c
  4118  002806  D7C8               	goto	l6236
  4119  002808  0A03               	xorlw	3	; case 2
  4120  00280A  B4D8               	btfsc	status,2,c
  4121  00280C  D7D2               	goto	l6238
  4122  00280E  0A01               	xorlw	1	; case 3
  4123  002810  B4D8               	btfsc	status,2,c
  4124  002812  D7DC               	goto	l6240
  4125  002814                     l6246:
  4126                           
  4127                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  4128  002814  0E15               	movlw	21
  4129  002816  0100               	movlb	0	; () banked
  4130  002818  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4131  00281A  0E4B               	movlw	75
  4132  00281C  0100               	movlb	0	; () banked
  4133  00281E  6F88               	movwf	??_Distribution& (0+255),b
  4134  002820  0EBE               	movlw	190
  4135  002822                     u6787:
  4136  002822  2EE8               	decfsz	wreg,f,c
  4137  002824  D7FE               	bra	u6787
  4138  002826  2F88               	decfsz	??_Distribution& (0+255),f,b
  4139  002828  D7FC               	bra	u6787
  4140  00282A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4141  00282C  D7FA               	bra	u6787
  4142  00282E  F000               	nop	
  4143                           
  4144                           ;sort.c: 195: updateServoPosition(1500, 3);
  4145  002830  0E05               	movlw	5
  4146  002832  0100               	movlb	0	; () banked
  4147  002834  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4148  002836  0EDC               	movlw	220
  4149  002838  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4150  00283A  0E00               	movlw	0
  4151  00283C  0100               	movlb	0	; () banked
  4152  00283E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4153  002840  0E03               	movlw	3
  4154  002842  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4155  002844  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4156                           
  4157                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4158  002848  0E15               	movlw	21
  4159  00284A  0100               	movlb	0	; () banked
  4160  00284C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4161  00284E  0E4B               	movlw	75
  4162  002850  0100               	movlb	0	; () banked
  4163  002852  6F88               	movwf	??_Distribution& (0+255),b
  4164  002854  0EBE               	movlw	190
  4165  002856                     u6797:
  4166  002856  2EE8               	decfsz	wreg,f,c
  4167  002858  D7FE               	bra	u6797
  4168  00285A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4169  00285C  D7FC               	bra	u6797
  4170  00285E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4171  002860  D7FA               	bra	u6797
  4172  002862  F000               	nop	
  4173                           
  4174                           ;sort.c: 199: updateServoPosition(1500, 1);
  4175  002864  0E05               	movlw	5
  4176  002866  0100               	movlb	0	; () banked
  4177  002868  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4178  00286A  0EDC               	movlw	220
  4179  00286C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4180  00286E  0E00               	movlw	0
  4181  002870  0100               	movlb	0	; () banked
  4182  002872  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4183  002874  0E01               	movlw	1
  4184  002876  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4185  002878  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4186                           
  4187                           ;sort.c: 200: updateServoPosition(1000, 3);
  4188  00287C  0E03               	movlw	3
  4189  00287E  0100               	movlb	0	; () banked
  4190  002880  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4191  002882  0EE8               	movlw	232
  4192  002884  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4193  002886  0E00               	movlw	0
  4194  002888  0100               	movlb	0	; () banked
  4195  00288A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4196  00288C  0E03               	movlw	3
  4197  00288E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4198  002890  EC5F  F01B         	call	_updateServoPosition	;wreg free
  4199                           
  4200                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4201  002894  0E00               	movlw	0
  4202  002896  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4203  002898  0E00               	movlw	0
  4204  00289A  6E6F               	movwf	_f_can_coming_to_distribution,c
  4205                           
  4206                           ;sort.c: 202: f_can_distributed = 1;
  4207  00289C  0E00               	movlw	0
  4208  00289E  6E72               	movwf	_f_can_distributed+1,c
  4209  0028A0  0E01               	movlw	1
  4210  0028A2  6E71               	movwf	_f_can_distributed,c
  4211                           
  4212                           ;sort.c: 203: if(f_lastCan == 1){
  4213  0028A4  0473               	decf	_f_lastCan,w,c
  4214  0028A6  1074               	iorwf	_f_lastCan+1,w,c
  4215  0028A8  A4D8               	btfss	status,2,c
  4216  0028AA  0012               	return	
  4217                           
  4218                           ;sort.c: 204: machine_state = DoneSorting_state;
  4219  0028AC  0E02               	movlw	2
  4220  0028AE  0100               	movlb	0	; () banked
  4221  0028B0  6FFC               	movwf	_machine_state& (0+255),b
  4222                           
  4223                           ; BSR set to: 0
  4224  0028B2  0012               	return	
  4225  0028B4                     __end_of_Distribution:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _machineConfig *****************
  4245 ;; Defined at:
  4246 ;;		line 15 in file "MachineConfig.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    7
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text10
  4275  0039EE                     __ptext10:
  4276                           	opt stack 0
  4277  0039EE                     _machineConfig:
  4278                           	opt stack 23
  4279                           
  4280                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4281                           
  4282                           ;incstack = 0
  4283  0039EE  0EF0               	movlw	240
  4284  0039F0  6ED3               	movwf	4051,c	;volatile
  4285                           
  4286                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4287  0039F2  8C9B               	bsf	3995,6,c	;volatile
  4288                           
  4289                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4290  0039F4  0E47               	movlw	71
  4291  0039F6  6E92               	movwf	3986,c	;volatile
  4292                           
  4293                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4294  0039F8  0EF2               	movlw	242
  4295  0039FA  6E93               	movwf	3987,c	;volatile
  4296                           
  4297                           ;MachineConfig.c: 27: TRISC = 0x00;
  4298  0039FC  0E00               	movlw	0
  4299  0039FE  6E94               	movwf	3988,c	;volatile
  4300                           
  4301                           ;MachineConfig.c: 31: TRISD = 0x00;
  4302  003A00  0E00               	movlw	0
  4303  003A02  6E95               	movwf	3989,c	;volatile
  4304                           
  4305                           ;MachineConfig.c: 34: TRISE = 0x00;
  4306  003A04  0E00               	movlw	0
  4307  003A06  6E96               	movwf	3990,c	;volatile
  4308                           
  4309                           ;MachineConfig.c: 37: LATA = 0x00;
  4310  003A08  0E00               	movlw	0
  4311  003A0A  6E89               	movwf	3977,c	;volatile
  4312                           
  4313                           ;MachineConfig.c: 38: LATB = 0x00;
  4314  003A0C  0E00               	movlw	0
  4315  003A0E  6E8A               	movwf	3978,c	;volatile
  4316                           
  4317                           ;MachineConfig.c: 39: LATC = 0x00;
  4318  003A10  0E00               	movlw	0
  4319  003A12  6E8B               	movwf	3979,c	;volatile
  4320                           
  4321                           ;MachineConfig.c: 40: LATD = 0x00;
  4322  003A14  0E00               	movlw	0
  4323  003A16  6E8C               	movwf	3980,c	;volatile
  4324                           
  4325                           ;MachineConfig.c: 41: LATE = 0x00;
  4326  003A18  0E00               	movlw	0
  4327  003A1A  6E8D               	movwf	3981,c	;volatile
  4328                           
  4329                           ;MachineConfig.c: 43: nRBPU = 0;
  4330  003A1C  9EF1               	bcf	intcon2,7,c	;volatile
  4331                           
  4332                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4333  003A1E  0E00               	movlw	0
  4334  003A20  6EC2               	movwf	4034,c	;volatile
  4335                           
  4336                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4337  003A22  0E0D               	movlw	13
  4338  003A24  6EC1               	movwf	4033,c	;volatile
  4339                           
  4340                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4341  003A26  0E00               	movlw	0
  4342  003A28  6EB5               	movwf	4021,c	;volatile
  4343                           
  4344                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4345  003A2A  96B4               	bcf	4020,3,c	;volatile
  4346                           
  4347                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4348  003A2C  0EB1               	movlw	177
  4349  003A2E  6EC0               	movwf	4032,c	;volatile
  4350                           
  4351                           ;MachineConfig.c: 55: INT1IE = 1;
  4352  003A30  86F0               	bsf	intcon3,3,c	;volatile
  4353                           
  4354                           ;MachineConfig.c: 57: TMR0IE = 1;
  4355  003A32  8AF2               	bsf	intcon,5,c	;volatile
  4356                           
  4357                           ;MachineConfig.c: 58: TMR1IE = 1;
  4358  003A34  809D               	bsf	3997,0,c	;volatile
  4359                           
  4360                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4361  003A36  0EB0               	movlw	176
  4362  003A38  6ECD               	movwf	4045,c	;volatile
  4363                           
  4364                           ;MachineConfig.c: 60: TMR2IE = 1;
  4365  003A3A  829D               	bsf	3997,1,c	;volatile
  4366                           
  4367                           ;MachineConfig.c: 61: TMR3IE = 1;
  4368  003A3C  82A0               	bsf	4000,1,c	;volatile
  4369                           
  4370                           ;MachineConfig.c: 62: PEIE = 1;
  4371  003A3E  8CF2               	bsf	intcon,6,c	;volatile
  4372                           
  4373                           ;MachineConfig.c: 63: ADIE = 0;
  4374  003A40  9C9D               	bcf	3997,6,c	;volatile
  4375                           
  4376                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4377  003A42  9EF2               	bcf	intcon,7,c	;volatile
  4378  003A44  0012               	return		;funcret
  4379  003A46                     __end_of_machineConfig:
  4380                           	opt stack 0
  4381                           tblptru	equ	0xFF8
  4382                           tblptrh	equ	0xFF7
  4383                           tblptrl	equ	0xFF6
  4384                           tablat	equ	0xFF5
  4385                           prodh	equ	0xFF4
  4386                           prodl	equ	0xFF3
  4387                           intcon	equ	0xFF2
  4388                           intcon2	equ	0xFF1
  4389                           intcon3	equ	0xFF0
  4390                           postinc0	equ	0xFEE
  4391                           wreg	equ	0xFE8
  4392                           postdec1	equ	0xFE5
  4393                           fsr1l	equ	0xFE1
  4394                           indf2	equ	0xFDF
  4395                           postinc2	equ	0xFDE
  4396                           postdec2	equ	0xFDD
  4397                           fsr2h	equ	0xFDA
  4398                           fsr2l	equ	0xFD9
  4399                           status	equ	0xFD8
  4400                           
  4401 ;; *************** function _logRun *****************
  4402 ;; Defined at:
  4403 ;;		line 84 in file "EEPROM.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4408 ;;  i               2   55[BANK0 ] int 
  4409 ;;  num             1   49[BANK0 ] unsigned char 
  4410 ;;  addr            2   57[BANK0 ] unsigned short 
  4411 ;;  byte11          1   54[BANK0 ] unsigned char 
  4412 ;;  byte3           1   52[BANK0 ] unsigned char 
  4413 ;;  byte2           1   51[BANK0 ] unsigned char 
  4414 ;;  byte1           1   50[BANK0 ] unsigned char 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;Total ram usage:       10 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:   11
  4431 ;; This function calls:
  4432 ;;		_EEPROM_read
  4433 ;;		_EEPROM_write
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text11
  4440  0028B4                     __ptext11:
  4441                           	opt stack 0
  4442  0028B4                     _logRun:
  4443                           	opt stack 19
  4444                           
  4445                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4446                           
  4447                           ;incstack = 0
  4448  0028B4  0E00               	movlw	0
  4449  0028B6  0100               	movlb	0	; () banked
  4450  0028B8  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4451  0028BA  0E00               	movlw	0
  4452  0028BC  6F80               	movwf	EEPROM_read@address& (0+255),b
  4453  0028BE  ECA5  F020         	call	_EEPROM_read	;wreg free
  4454  0028C2  0100               	movlb	0	; () banked
  4455  0028C4  6FFD               	movwf	_sel& (0+255),b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4459  0028C6  0100               	movlb	0	; () banked
  4460  0028C8  51FD               	movf	_sel& (0+255),w,b
  4461  0028CA  0D0B               	mullw	11
  4462  0028CC  0E01               	movlw	1
  4463  0028CE  24F3               	addwf	prodl,w,c
  4464  0028D0  0100               	movlb	0	; () banked
  4465  0028D2  6FB9               	movwf	logRun@addr& (0+255),b
  4466  0028D4  0E00               	movlw	0
  4467  0028D6  20F4               	addwfc	prodh,w,c
  4468  0028D8  0100               	movlb	0	; () banked
  4469  0028DA  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;EEPROM.c: 101: if (sel < 3){
  4473  0028DC  0E03               	movlw	3
  4474  0028DE  0100               	movlb	0	; () banked
  4475  0028E0  61FD               	cpfslt	_sel& (0+255),b
  4476  0028E2  D00E               	goto	l7572
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4480  0028E4  0100               	movlb	0	; () banked
  4481  0028E6  29FD               	incf	_sel& (0+255),w,b
  4482  0028E8  0100               	movlb	0	; () banked
  4483  0028EA  6FB1               	movwf	logRun@num& (0+255),b
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4487  0028EC  0E00               	movlw	0
  4488  0028EE  0100               	movlb	0	; () banked
  4489  0028F0  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4490  0028F2  0E00               	movlw	0
  4491  0028F4  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4492  0028F6  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4493  0028FA  EC87  F017         	call	_EEPROM_write	;wreg free
  4494                           
  4495                           ;EEPROM.c: 104: }
  4496  0028FE  D00A               	goto	l7574
  4497  002900                     l7572:
  4498                           
  4499                           ;EEPROM.c: 105: else{
  4500                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4501  002900  0E00               	movlw	0
  4502  002902  0100               	movlb	0	; () banked
  4503  002904  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4504  002906  0E00               	movlw	0
  4505  002908  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4506  00290A  0E00               	movlw	0
  4507  00290C  0100               	movlb	0	; () banked
  4508  00290E  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4509  002910  EC87  F017         	call	_EEPROM_write	;wreg free
  4510  002914                     l7574:
  4511                           
  4512                           ;EEPROM.c: 107: }
  4513                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4514  002914  0100               	movlb	0	; () banked
  4515  002916  51FE               	movf	_count_total& (0+255),w,b
  4516  002918  0980               	iorlw	128
  4517  00291A  0100               	movlb	0	; () banked
  4518  00291C  6FB2               	movwf	logRun@byte1& (0+255),b
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4522  00291E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4523  002922  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4524  002926  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4525  00292A  EC87  F017         	call	_EEPROM_write	;wreg free
  4526                           
  4527                           ;EEPROM.c: 112: addr++;
  4528  00292E  0100               	movlb	0	; () banked
  4529  002930  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4530  002932  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4534  002934  3861               	swapf	_count_pop_no_tab,w,c
  4535  002936  0BF0               	andlw	240
  4536  002938  1063               	iorwf	_count_pop_w_tab,w,c
  4537  00293A  0100               	movlb	0	; () banked
  4538  00293C  6FB3               	movwf	logRun@byte2& (0+255),b
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4542  00293E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4543  002942  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4544  002946  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4545  00294A  EC87  F017         	call	_EEPROM_write	;wreg free
  4546                           
  4547                           ;EEPROM.c: 117: addr++;
  4548  00294E  0100               	movlb	0	; () banked
  4549  002950  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4550  002952  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4554  002954  385F               	swapf	_count_can_w_lab,w,c
  4555  002956  0BF0               	andlw	240
  4556  002958  105D               	iorwf	_count_can_no_lab,w,c
  4557  00295A  0100               	movlb	0	; () banked
  4558  00295C  6FB4               	movwf	logRun@byte3& (0+255),b
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4562  00295E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4563  002962  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4564  002966  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4565  00296A  EC87  F017         	call	_EEPROM_write	;wreg free
  4566                           
  4567                           ;EEPROM.c: 120: addr++;
  4568  00296E  0100               	movlb	0	; () banked
  4569  002970  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4570  002972  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4574  002974  0E00               	movlw	0
  4575  002976  0100               	movlb	0	; () banked
  4576  002978  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4577  00297A  0E00               	movlw	0
  4578  00297C  6FB7               	movwf	logRun@i& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581  00297E  0100               	movlb	0	; () banked
  4582  002980  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4583  002982  D008               	goto	l7598
  4584  002984  0100               	movlb	0	; () banked
  4585  002986  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4586  002988  E128               	bnz	l923
  4587  00298A  0E07               	movlw	7
  4588  00298C  0100               	movlb	0	; () banked
  4589  00298E  5DB7               	subwf	logRun@i& (0+255),w,b
  4590  002990  B0D8               	btfsc	status,0,c
  4591  002992  D023               	goto	l923
  4592  002994                     l7598:
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4596  002994  90D8               	bcf	status,0,c
  4597  002996  0100               	movlb	0	; () banked
  4598  002998  35B7               	rlcf	logRun@i& (0+255),w,b
  4599  00299A  6ED9               	movwf	fsr2l,c
  4600  00299C  0100               	movlb	0	; () banked
  4601  00299E  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4602  0029A0  6EDA               	movwf	fsr2h,c
  4603  0029A2  0E0E               	movlw	low _startTime
  4604  0029A4  26D9               	addwf	fsr2l,f,c
  4605  0029A6  0E01               	movlw	high _startTime
  4606  0029A8  22DA               	addwfc	fsr2h,f,c
  4607  0029AA  50DF               	movf	indf2,w,c
  4608  0029AC  0100               	movlb	0	; () banked
  4609  0029AE  6FB5               	movwf	logRun@byte_i& (0+255),b
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4613  0029B0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4614  0029B4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4615  0029B8  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4616  0029BC  EC87  F017         	call	_EEPROM_write	;wreg free
  4617                           
  4618                           ;EEPROM.c: 126: addr++;
  4619  0029C0  0100               	movlb	0	; () banked
  4620  0029C2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4621  0029C4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624  0029C6  0100               	movlb	0	; () banked
  4625  0029C8  4BB7               	infsnz	logRun@i& (0+255),f,b
  4626  0029CA  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4627                           
  4628                           ; BSR set to: 0
  4629  0029CC  0100               	movlb	0	; () banked
  4630  0029CE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4631  0029D0  D7E1               	goto	l7598
  4632  0029D2  0100               	movlb	0	; () banked
  4633  0029D4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4634  0029D6  E101               	bnz	u6540
  4635  0029D8  D7D8               	goto	L4
  4636  0029DA                     u6540:
  4637  0029DA                     l923:
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;EEPROM.c: 127: }
  4641                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4642  0029DA  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4646  0029DE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4647  0029E2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4648  0029E6  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4649  0029EA  EC87  F017         	call	_EEPROM_write	;wreg free
  4650  0029EE  0012               	return		;funcret
  4651  0029F0                     __end_of_logRun:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           intcon2	equ	0xFF1
  4661                           intcon3	equ	0xFF0
  4662                           postinc0	equ	0xFEE
  4663                           wreg	equ	0xFE8
  4664                           postdec1	equ	0xFE5
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _EEPROM_write *****************
  4674 ;; Defined at:
  4675 ;;		line 32 in file "EEPROM.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  address         2   43[BANK0 ] unsigned short 
  4678 ;;  data            1   45[BANK0 ] unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  i               1   48[BANK0 ] unsigned char 
  4681 ;;  i               1   47[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;Total ram usage:        6 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:   10
  4698 ;; This function calls:
  4699 ;;		_EEPROM_read
  4700 ;;		_lcdInst
  4701 ;;		_printf
  4702 ;; This function is called by:
  4703 ;;		_Loading
  4704 ;;		_logRun
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text12
  4709  002F0E                     __ptext12:
  4710                           	opt stack 0
  4711  002F0E                     _EEPROM_write:
  4712                           	opt stack 18
  4713                           
  4714                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4715                           
  4716                           ;incstack = 0
  4717  002F0E  84A6               	bsf	4006,2,c	;volatile
  4718                           
  4719                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4720  002F10  0100               	movlb	0	; () banked
  4721  002F12  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4722  002F14  6EAA               	movwf	4010,c	;volatile
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4726  002F16  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;EEPROM.c: 39: EEDATA = data;
  4730  002F1A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4734  002F1E  9EA6               	bcf	4006,7,c	;volatile
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4738  002F20  9CA6               	bcf	4006,6,c	;volatile
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4742  002F22  9EF2               	bcf	intcon,7,c	;volatile
  4743                           
  4744                           ;EEPROM.c: 45: EECON2 = 0x55;
  4745  002F24  0E55               	movlw	85
  4746  002F26  6EA7               	movwf	4007,c	;volatile
  4747                           
  4748                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4749  002F28  0EAA               	movlw	170
  4750  002F2A  6EA7               	movwf	4007,c	;volatile
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4754  002F2C  82A6               	bsf	4006,1,c	;volatile
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4758  002F2E  8EF2               	bsf	intcon,7,c	;volatile
  4759  002F30                     l901:
  4760  002F30  A8A1               	btfss	4001,4,c	;volatile
  4761  002F32  D7FE               	goto	l901
  4762                           
  4763                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4764  002F34  98A1               	bcf	4001,4,c	;volatile
  4765                           
  4766                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4767  002F36  94A6               	bcf	4006,2,c	;volatile
  4768                           
  4769                           ;EEPROM.c: 57: if(debug){
  4770  002F38  0100               	movlb	0	; () banked
  4771  002F3A  51E0               	movf	_debug& (0+255),w,b
  4772  002F3C  0100               	movlb	0	; () banked
  4773  002F3E  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4774  002F40  B4D8               	btfsc	status,2,c
  4775  002F42  0012               	return	
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4779  002F44  0E01               	movlw	1
  4780  002F46  ECE2  F020         	call	_lcdInst
  4781  002F4A  0E68               	movlw	104
  4782  002F4C  0100               	movlb	0	; () banked
  4783  002F4E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4784  002F50  0EE4               	movlw	228
  4785  002F52                     u6807:
  4786  002F52  2EE8               	decfsz	wreg,f,c
  4787  002F54  D7FE               	bra	u6807
  4788  002F56  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4789  002F58  D7FC               	bra	u6807
  4790  002F5A  F000               	nop	
  4791                           
  4792                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4793  002F5C  0E80               	movlw	128
  4794  002F5E  ECE2  F020         	call	_lcdInst
  4795                           
  4796                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4797  002F62  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4798  002F66  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4799  002F6A  ECA5  F020         	call	_EEPROM_read	;wreg free
  4800  002F6E  0100               	movlb	0	; () banked
  4801  002F70  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4802  002F72  A4D8               	btfss	status,2,c
  4803  002F74  D024               	goto	l5824
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4807  002F76  0E6C               	movlw	low STR_66
  4808  002F78  0100               	movlb	0	; () banked
  4809  002F7A  6F8E               	movwf	printf@f& (0+255),b
  4810  002F7C  0EFB               	movlw	high STR_66
  4811  002F7E  0100               	movlb	0	; () banked
  4812  002F80  6F8F               	movwf	(printf@f+1)& (0+255),b
  4813  002F82  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4814  002F86  0100               	movlb	0	; () banked
  4815  002F88  6B91               	clrf	(?_printf+3)& (0+255),b
  4816  002F8A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4817  002F8E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4818  002F92  EC9C  F008         	call	_printf	;wreg free
  4819                           
  4820                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4821  002F96  0E00               	movlw	0
  4822  002F98  0100               	movlb	0	; () banked
  4823  002F9A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4824  002F9C                     l5816:
  4825                           
  4826                           ; BSR set to: 0
  4827  002F9C  0E63               	movlw	99
  4828  002F9E  0100               	movlb	0	; () banked
  4829  002FA0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4830  002FA2  D001               	goto	l5820
  4831  002FA4  0012               	return	
  4832  002FA6                     l5820:
  4833                           
  4834                           ; BSR set to: 0
  4835  002FA6  0E68               	movlw	104
  4836  002FA8  0100               	movlb	0	; () banked
  4837  002FAA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4838  002FAC  0EE4               	movlw	228
  4839  002FAE                     u6817:
  4840  002FAE  2EE8               	decfsz	wreg,f,c
  4841  002FB0  D7FE               	bra	u6817
  4842  002FB2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4843  002FB4  D7FC               	bra	u6817
  4844  002FB6  F000               	nop	
  4845  002FB8  0100               	movlb	0	; () banked
  4846  002FBA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4847  002FBC  D7EF               	goto	l5816
  4848  002FBE                     l5824:
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4852  002FBE  0EBD               	movlw	low STR_67
  4853  002FC0  0100               	movlb	0	; () banked
  4854  002FC2  6F8E               	movwf	printf@f& (0+255),b
  4855  002FC4  0EFF               	movlw	high STR_67
  4856  002FC6  0100               	movlb	0	; () banked
  4857  002FC8  6F8F               	movwf	(printf@f+1)& (0+255),b
  4858  002FCA  EC9C  F008         	call	_printf	;wreg free
  4859  002FCE  0E00               	movlw	0
  4860  002FD0  0100               	movlb	0	; () banked
  4861  002FD2  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4862  002FD4                     l5828:
  4863                           
  4864                           ; BSR set to: 0
  4865  002FD4  0E63               	movlw	99
  4866  002FD6  0100               	movlb	0	; () banked
  4867  002FD8  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4868  002FDA  D001               	goto	l5832
  4869  002FDC  0012               	return	
  4870  002FDE                     l5832:
  4871                           
  4872                           ; BSR set to: 0
  4873  002FDE  0E68               	movlw	104
  4874  002FE0  0100               	movlb	0	; () banked
  4875  002FE2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4876  002FE4  0EE4               	movlw	228
  4877  002FE6                     u6827:
  4878  002FE6  2EE8               	decfsz	wreg,f,c
  4879  002FE8  D7FE               	bra	u6827
  4880  002FEA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4881  002FEC  D7FC               	bra	u6827
  4882  002FEE  F000               	nop	
  4883  002FF0  0100               	movlb	0	; () banked
  4884  002FF2  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4885  002FF4  D7EF               	goto	l5828
  4886  002FF6                     __end_of_EEPROM_write:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           intcon	equ	0xFF2
  4895                           intcon2	equ	0xFF1
  4896                           intcon3	equ	0xFF0
  4897                           postinc0	equ	0xFEE
  4898                           wreg	equ	0xFE8
  4899                           postdec1	equ	0xFE5
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _EEPROM_read *****************
  4909 ;; Defined at:
  4910 ;;		line 68 in file "EEPROM.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  address         2    0[BANK0 ] unsigned short 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      unsigned char 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;Total ram usage:        2 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    7
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_Loading
  4935 ;;		_EEPROM_write
  4936 ;;		_logRun
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text13
  4941  00414A                     __ptext13:
  4942                           	opt stack 0
  4943  00414A                     _EEPROM_read:
  4944                           	opt stack 20
  4945                           
  4946                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;incstack = 0
  4950  00414A  0100               	movlb	0	; () banked
  4951  00414C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4952  00414E  6EAA               	movwf	4010,c	;volatile
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4956  004150  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4960  004154  9EA6               	bcf	4006,7,c	;volatile
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4964  004156  9CA6               	bcf	4006,6,c	;volatile
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4968  004158  80A6               	bsf	4006,0,c	;volatile
  4969  00415A                     l914:
  4970  00415A  B0A6               	btfsc	4006,0,c	;volatile
  4971  00415C  D7FE               	goto	l914
  4972                           
  4973                           ;EEPROM.c: 81: return EEDATA;
  4974  00415E  50A8               	movf	4008,w,c	;volatile
  4975  004160  0012               	return	
  4976  004162                     __end_of_EEPROM_read:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           intcon3	equ	0xFF0
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _initUI *****************
  4999 ;; Defined at:
  5000 ;;		line 62 in file "UI.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;		None
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        0 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:   12
  5021 ;; This function calls:
  5022 ;;		_change_state_to_menu_start
  5023 ;;		_loadRTC
  5024 ;; This function is called by:
  5025 ;;		_main
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text14
  5030  0040A0                     __ptext14:
  5031                           	opt stack 0
  5032  0040A0                     _initUI:
  5033                           	opt stack 18
  5034                           
  5035                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5036                           
  5037                           ;incstack = 0
  5038  0040A0  8EF2               	bsf	intcon,7,c	;volatile
  5039                           
  5040                           ;UI.c: 64: machine_state = UI_state;
  5041  0040A2  0E00               	movlw	0
  5042  0040A4  0100               	movlb	0	; () banked
  5043  0040A6  6FFC               	movwf	_machine_state& (0+255),b
  5044                           
  5045                           ;UI.c: 65: logstate = 0;
  5046  0040A8  0E00               	movlw	0
  5047  0040AA  0100               	movlb	0	; () banked
  5048  0040AC  6FF7               	movwf	(_logstate+1)& (0+255),b
  5049  0040AE  0E00               	movlw	0
  5050  0040B0  6FF6               	movwf	_logstate& (0+255),b
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;UI.c: 67: loadRTC();
  5054  0040B2  EC14  F01A         	call	_loadRTC	;wreg free
  5055                           
  5056                           ;UI.c: 69: change_state_to_menu_start();
  5057  0040B6  ECD5  F01F         	call	_change_state_to_menu_start	;wreg free
  5058                           
  5059                           ;UI.c: 70: firstboot = 1;
  5060  0040BA  0E00               	movlw	0
  5061  0040BC  6E76               	movwf	_firstboot+1,c
  5062  0040BE  0E01               	movlw	1
  5063  0040C0  6E75               	movwf	_firstboot,c
  5064  0040C2  0012               	return		;funcret
  5065  0040C4                     __end_of_initUI:
  5066                           	opt stack 0
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           prodh	equ	0xFF4
  5072                           prodl	equ	0xFF3
  5073                           intcon	equ	0xFF2
  5074                           intcon2	equ	0xFF1
  5075                           intcon3	equ	0xFF0
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           postdec1	equ	0xFE5
  5079                           fsr1l	equ	0xFE1
  5080                           indf2	equ	0xFDF
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           fsr2h	equ	0xFDA
  5084                           fsr2l	equ	0xFD9
  5085                           status	equ	0xFD8
  5086                           
  5087 ;; *************** function _loadRTC *****************
  5088 ;; Defined at:
  5089 ;;		line 28 in file "RTC.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;		None
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  i               2   22[BANK0 ] int 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      void 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;Total ram usage:        3 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    9
  5110 ;; This function calls:
  5111 ;;		_I2C_Master_Init
  5112 ;;		_I2C_Master_Start
  5113 ;;		_I2C_Master_Stop
  5114 ;;		_I2C_Master_Write
  5115 ;; This function is called by:
  5116 ;;		_initUI
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text15
  5121  003428                     __ptext15:
  5122                           	opt stack 0
  5123  003428                     _loadRTC:
  5124                           	opt stack 20
  5125                           
  5126                           ;RTC.c: 30: I2C_Master_Init(10000);
  5127                           
  5128                           ;incstack = 0
  5129  003428  0E10               	movlw	16
  5130  00342A  0100               	movlb	0	; () banked
  5131  00342C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5132  00342E  0E27               	movlw	39
  5133  003430  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5134  003432  0E00               	movlw	0
  5135  003434  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5136  003436  0E00               	movlw	0
  5137  003438  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5138  00343A  EC6C  F01C         	call	_I2C_Master_Init	;wreg free
  5139                           
  5140                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5141  00343E  9EF2               	bcf	intcon,7,c	;volatile
  5142                           
  5143                           ;RTC.c: 34: I2C_Master_Start();
  5144  003440  EC08  F021         	call	_I2C_Master_Start	;wreg free
  5145                           
  5146                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5147  003444  0E00               	movlw	0
  5148  003446  0100               	movlb	0	; () banked
  5149  003448  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5150  00344A  0ED0               	movlw	208
  5151  00344C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5152  00344E  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  5153                           
  5154                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5155  003452  0E00               	movlw	0
  5156  003454  0100               	movlb	0	; () banked
  5157  003456  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5158  003458  0E00               	movlw	0
  5159  00345A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5160  00345C  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  5161                           
  5162                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5163  003460  0E00               	movlw	0
  5164  003462  0100               	movlb	0	; () banked
  5165  003464  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5166  003466  0E00               	movlw	0
  5167  003468  6F96               	movwf	loadRTC@i& (0+255),b
  5168  00346A                     l5940:
  5169                           
  5170                           ; BSR set to: 0
  5171  00346A  0100               	movlb	0	; () banked
  5172  00346C  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5173  00346E  D008               	goto	l5944
  5174  003470  0100               	movlb	0	; () banked
  5175  003472  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5176  003474  E11B               	bnz	l5950
  5177  003476  0E07               	movlw	7
  5178  003478  0100               	movlb	0	; () banked
  5179  00347A  5D96               	subwf	loadRTC@i& (0+255),w,b
  5180  00347C  B0D8               	btfsc	status,0,c
  5181  00347E  D016               	goto	l5950
  5182  003480                     l5944:
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5186  003480  0E24               	movlw	low _time
  5187  003482  0100               	movlb	0	; () banked
  5188  003484  2596               	addwf	loadRTC@i& (0+255),w,b
  5189  003486  6ED9               	movwf	fsr2l,c
  5190  003488  0E01               	movlw	high _time
  5191  00348A  0100               	movlb	0	; () banked
  5192  00348C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5193  00348E  6EDA               	movwf	fsr2h,c
  5194  003490  50DF               	movf	indf2,w,c
  5195  003492  0100               	movlb	0	; () banked
  5196  003494  6F95               	movwf	??_loadRTC& (0+255),b
  5197  003496  0100               	movlb	0	; () banked
  5198  003498  5195               	movf	??_loadRTC& (0+255),w,b
  5199  00349A  0100               	movlb	0	; () banked
  5200  00349C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5201  00349E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5202  0034A0  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  5203  0034A4  0100               	movlb	0	; () banked
  5204  0034A6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5205  0034A8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5206  0034AA  D7DF               	goto	l5940
  5207  0034AC                     l5950:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;RTC.c: 39: }
  5211                           ;RTC.c: 40: I2C_Master_Stop();
  5212  0034AC  EC04  F021         	call	_I2C_Master_Stop	;wreg free
  5213                           
  5214                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5215  0034B0  8EF2               	bsf	intcon,7,c	;volatile
  5216  0034B2  0012               	return		;funcret
  5217  0034B4                     __end_of_loadRTC:
  5218                           	opt stack 0
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon2	equ	0xFF1
  5227                           intcon3	equ	0xFF0
  5228                           postinc0	equ	0xFEE
  5229                           wreg	equ	0xFE8
  5230                           postdec1	equ	0xFE5
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _I2C_Master_Init *****************
  5240 ;; Defined at:
  5241 ;;		line 15 in file "I2C.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  c               4   13[BANK0 ] const unsigned long 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        8 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    8
  5262 ;; This function calls:
  5263 ;;		___lldiv
  5264 ;; This function is called by:
  5265 ;;		_loadRTC
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           	psect	text16
  5270  0038D8                     __ptext16:
  5271                           	opt stack 0
  5272  0038D8                     _I2C_Master_Init:
  5273                           	opt stack 20
  5274                           
  5275                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5276                           
  5277                           ;incstack = 0
  5278  0038D8  0E00               	movlw	0
  5279  0038DA  6EC7               	movwf	4039,c	;volatile
  5280                           
  5281                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5282  0038DC  0E28               	movlw	40
  5283  0038DE  6EC6               	movwf	4038,c	;volatile
  5284                           
  5285                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5286  0038E0  0E00               	movlw	0
  5287  0038E2  6EC5               	movwf	4037,c	;volatile
  5288                           
  5289                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5290  0038E4  0E00               	movlw	0
  5291  0038E6  0100               	movlb	0	; () banked
  5292  0038E8  6F80               	movwf	___lldiv@dividend& (0+255),b
  5293  0038EA  0E48               	movlw	72
  5294  0038EC  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5295  0038EE  0EE8               	movlw	232
  5296  0038F0  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5297  0038F2  0E01               	movlw	1
  5298  0038F4  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5299  0038F6  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5300  0038FA  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5301  0038FE  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5302  003902  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5303  003906  0E02               	movlw	2
  5304  003908                     u4285:
  5305  003908  90D8               	bcf	status,0,c
  5306  00390A  0100               	movlb	0	; () banked
  5307  00390C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5308  00390E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5309  003910  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5310  003912  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5311  003914  2EE8               	decfsz	wreg,f,c
  5312  003916  D7F8               	goto	u4285
  5313  003918  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5314  00391C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5315  003920  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5316  003924  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5317  003928  ECC5  F018         	call	___lldiv	;wreg free
  5318  00392C  0100               	movlb	0	; () banked
  5319  00392E  0580               	decf	?___lldiv& (0+255),w,b
  5320  003930  6EC8               	movwf	4040,c	;volatile
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;I2C.c: 22: TRISC3 = 1;
  5324  003932  8694               	bsf	3988,3,c	;volatile
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;I2C.c: 23: TRISC4 = 1;
  5328  003934  8894               	bsf	3988,4,c	;volatile
  5329                           
  5330                           ; BSR set to: 0
  5331  003936  0012               	return		;funcret
  5332  003938                     __end_of_I2C_Master_Init:
  5333                           	opt stack 0
  5334                           tblptru	equ	0xFF8
  5335                           tblptrh	equ	0xFF7
  5336                           tblptrl	equ	0xFF6
  5337                           tablat	equ	0xFF5
  5338                           prodh	equ	0xFF4
  5339                           prodl	equ	0xFF3
  5340                           intcon	equ	0xFF2
  5341                           intcon2	equ	0xFF1
  5342                           intcon3	equ	0xFF0
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           postdec1	equ	0xFE5
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function ___lldiv *****************
  5355 ;; Defined at:
  5356 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  dividend        4    0[BANK0 ] unsigned long 
  5359 ;;  divisor         4    4[BANK0 ] unsigned long 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  quotient        4    8[BANK0 ] unsigned long 
  5362 ;;  counter         1   12[BANK0 ] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  4    0[BANK0 ] unsigned long 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:       13 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    7
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_I2C_Master_Init
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text17
  5387  00318A                     __ptext17:
  5388                           	opt stack 0
  5389  00318A                     ___lldiv:
  5390                           	opt stack 20
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;incstack = 0
  5394  00318A  0E00               	movlw	0
  5395  00318C  0100               	movlb	0	; () banked
  5396  00318E  6F88               	movwf	___lldiv@quotient& (0+255),b
  5397  003190  0E00               	movlw	0
  5398  003192  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5399  003194  0E00               	movlw	0
  5400  003196  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5401  003198  0E00               	movlw	0
  5402  00319A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5403                           
  5404                           ; BSR set to: 0
  5405  00319C  0100               	movlb	0	; () banked
  5406  00319E  5184               	movf	___lldiv@divisor& (0+255),w,b
  5407  0031A0  0100               	movlb	0	; () banked
  5408  0031A2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5409  0031A4  0100               	movlb	0	; () banked
  5410  0031A6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5411  0031A8  0100               	movlb	0	; () banked
  5412  0031AA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5413  0031AC  B4D8               	btfsc	status,2,c
  5414  0031AE  D042               	goto	l1606
  5415                           
  5416                           ; BSR set to: 0
  5417  0031B0  0E01               	movlw	1
  5418  0031B2  0100               	movlb	0	; () banked
  5419  0031B4  6F8C               	movwf	___lldiv@counter& (0+255),b
  5420  0031B6  D008               	goto	l5388
  5421  0031B8                     l5386:
  5422                           
  5423                           ; BSR set to: 0
  5424  0031B8  0100               	movlb	0	; () banked
  5425  0031BA  90D8               	bcf	status,0,c
  5426  0031BC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5427  0031BE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5428  0031C0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5429  0031C2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5430  0031C4  0100               	movlb	0	; () banked
  5431  0031C6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5432  0031C8                     l5388:
  5433                           
  5434                           ; BSR set to: 0
  5435  0031C8  0100               	movlb	0	; () banked
  5436  0031CA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5437  0031CC  D7F5               	goto	l5386
  5438  0031CE                     l5390:
  5439                           
  5440                           ; BSR set to: 0
  5441  0031CE  0100               	movlb	0	; () banked
  5442  0031D0  90D8               	bcf	status,0,c
  5443  0031D2  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5444  0031D4  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5445  0031D6  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5446  0031D8  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5447                           
  5448                           ; BSR set to: 0
  5449  0031DA  0100               	movlb	0	; () banked
  5450  0031DC  5184               	movf	___lldiv@divisor& (0+255),w,b
  5451  0031DE  0100               	movlb	0	; () banked
  5452  0031E0  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5453  0031E2  0100               	movlb	0	; () banked
  5454  0031E4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5455  0031E6  0100               	movlb	0	; () banked
  5456  0031E8  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5457  0031EA  0100               	movlb	0	; () banked
  5458  0031EC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5459  0031EE  0100               	movlb	0	; () banked
  5460  0031F0  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5461  0031F2  0100               	movlb	0	; () banked
  5462  0031F4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5463  0031F6  0100               	movlb	0	; () banked
  5464  0031F8  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5465  0031FA  A0D8               	btfss	status,0,c
  5466  0031FC  D012               	goto	l5398
  5467                           
  5468                           ; BSR set to: 0
  5469  0031FE  0100               	movlb	0	; () banked
  5470  003200  5184               	movf	___lldiv@divisor& (0+255),w,b
  5471  003202  0100               	movlb	0	; () banked
  5472  003204  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5473  003206  0100               	movlb	0	; () banked
  5474  003208  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5475  00320A  0100               	movlb	0	; () banked
  5476  00320C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5477  00320E  0100               	movlb	0	; () banked
  5478  003210  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5479  003212  0100               	movlb	0	; () banked
  5480  003214  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5481  003216  0100               	movlb	0	; () banked
  5482  003218  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5483  00321A  0100               	movlb	0	; () banked
  5484  00321C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5485                           
  5486                           ; BSR set to: 0
  5487  00321E  0100               	movlb	0	; () banked
  5488  003220  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5489  003222                     l5398:
  5490                           
  5491                           ; BSR set to: 0
  5492  003222  0100               	movlb	0	; () banked
  5493  003224  90D8               	bcf	status,0,c
  5494  003226  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5495  003228  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5496  00322A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5497  00322C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5498                           
  5499                           ; BSR set to: 0
  5500  00322E  0100               	movlb	0	; () banked
  5501  003230  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5502  003232  D7CD               	goto	l5390
  5503  003234                     l1606:
  5504                           
  5505                           ; BSR set to: 0
  5506  003234  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5507  003238  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5508  00323C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5509  003240  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5510                           
  5511                           ; BSR set to: 0
  5512  003244  0012               	return		;funcret
  5513  003246                     __end_of___lldiv:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           intcon2	equ	0xFF1
  5523                           intcon3	equ	0xFF0
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           postdec1	equ	0xFE5
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _change_state_to_menu_start *****************
  5536 ;; Defined at:
  5537 ;;		line 472 in file "UI.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;Total ram usage:        0 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:   11
  5558 ;; This function calls:
  5559 ;;		_lcdInst
  5560 ;;		_printRTC
  5561 ;;		_printf
  5562 ;; This function is called by:
  5563 ;;		_initUI
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text18
  5568  003FAA                     __ptext18:
  5569                           	opt stack 0
  5570  003FAA                     _change_state_to_menu_start:
  5571                           	opt stack 18
  5572                           
  5573                           ;UI.c: 473: cur_state = 0;
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;incstack = 0
  5577  003FAA  0E00               	movlw	0
  5578  003FAC  0100               	movlb	0	; () banked
  5579  003FAE  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5580  003FB0  0E00               	movlw	0
  5581  003FB2  6FDE               	movwf	_cur_state& (0+255),b
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;UI.c: 475: lcdInst(0b10000000);;
  5585  003FB4  0E80               	movlw	128
  5586  003FB6  ECE2  F020         	call	_lcdInst
  5587                           
  5588                           ;UI.c: 476: printRTC();
  5589  003FBA  EC6F  F00C         	call	_printRTC	;wreg free
  5590                           
  5591                           ;UI.c: 477: lcdInst(0b11000000);;
  5592  003FBE  0EC0               	movlw	192
  5593  003FC0  ECE2  F020         	call	_lcdInst
  5594                           
  5595                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5596  003FC4  0E20               	movlw	low STR_30
  5597  003FC6  0100               	movlb	0	; () banked
  5598  003FC8  6F8E               	movwf	printf@f& (0+255),b
  5599  003FCA  0EFE               	movlw	high STR_30
  5600  003FCC  0100               	movlb	0	; () banked
  5601  003FCE  6F8F               	movwf	(printf@f+1)& (0+255),b
  5602  003FD0  EC9C  F008         	call	_printf	;wreg free
  5603  003FD4  0012               	return		;funcret
  5604  003FD6                     __end_of_change_state_to_menu_start:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           intcon3	equ	0xFF0
  5615                           postinc0	equ	0xFEE
  5616                           wreg	equ	0xFE8
  5617                           postdec1	equ	0xFE5
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           fsr2h	equ	0xFDA
  5623                           fsr2l	equ	0xFD9
  5624                           status	equ	0xFD8
  5625                           
  5626 ;; *************** function _initTime *****************
  5627 ;; Defined at:
  5628 ;;		line 17 in file "RTC.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  s               1    wreg     unsigned char 
  5631 ;;  m               1    0[BANK0 ] unsigned char 
  5632 ;;  h               1    1[BANK0 ] unsigned char 
  5633 ;;  w               1    2[BANK0 ] unsigned char 
  5634 ;;  DD              1    3[BANK0 ] unsigned char 
  5635 ;;  MM              1    4[BANK0 ] unsigned char 
  5636 ;;  YY              1    5[BANK0 ] unsigned char 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  s               1    6[BANK0 ] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5648 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;Total ram usage:        7 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    7
  5655 ;; This function calls:
  5656 ;;		Nothing
  5657 ;; This function is called by:
  5658 ;;		_main
  5659 ;; This function uses a non-reentrant model
  5660 ;;
  5661                           
  5662                           	psect	text19
  5663  00410A                     __ptext19:
  5664                           	opt stack 0
  5665  00410A                     _initTime:
  5666                           	opt stack 23
  5667                           
  5668                           ;incstack = 0
  5669                           ;initTime@s stored from wreg
  5670  00410A  0100               	movlb	0	; () banked
  5671  00410C  6F86               	movwf	initTime@s& (0+255),b
  5672                           
  5673                           ;RTC.c: 19: time[0] = s;
  5674  00410E  C086  F124         	movff	initTime@s,_time
  5675                           
  5676                           ;RTC.c: 20: time[1] = m;
  5677  004112  C080  F125         	movff	initTime@m,_time+1
  5678                           
  5679                           ;RTC.c: 21: time[2] = h;
  5680  004116  C081  F126         	movff	initTime@h,_time+2
  5681                           
  5682                           ;RTC.c: 22: time[3] = w;
  5683  00411A  C082  F127         	movff	initTime@w,_time+3
  5684                           
  5685                           ;RTC.c: 23: time[4] = DD;
  5686  00411E  C083  F128         	movff	initTime@DD,_time+4
  5687                           
  5688                           ;RTC.c: 24: time[5] = MM;
  5689  004122  C084  F129         	movff	initTime@MM,_time+5
  5690                           
  5691                           ;RTC.c: 25: time[6] = YY;
  5692  004126  C085  F12A         	movff	initTime@YY,_time+6
  5693  00412A  0012               	return		;funcret
  5694  00412C                     __end_of_initTime:
  5695                           	opt stack 0
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           intcon	equ	0xFF2
  5703                           intcon2	equ	0xFF1
  5704                           intcon3	equ	0xFF0
  5705                           postinc0	equ	0xFEE
  5706                           wreg	equ	0xFE8
  5707                           postdec1	equ	0xFE5
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _initLCD *****************
  5717 ;; Defined at:
  5718 ;;		line 48 in file "lcd.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    9
  5739 ;; This function calls:
  5740 ;;		_lcdInst
  5741 ;; This function is called by:
  5742 ;;		_main
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text20
  5747  003BD6                     __ptext20:
  5748                           	opt stack 0
  5749  003BD6                     _initLCD:
  5750                           	opt stack 21
  5751                           
  5752                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5753                           
  5754                           ;incstack = 0
  5755  003BD6  0E9C               	movlw	156
  5756  003BD8  0100               	movlb	0	; () banked
  5757  003BDA  6F83               	movwf	??_initLCD& (0+255),b
  5758  003BDC  0ED7               	movlw	215
  5759  003BDE                     u6837:
  5760  003BDE  2EE8               	decfsz	wreg,f,c
  5761  003BE0  D7FE               	bra	u6837
  5762  003BE2  2F83               	decfsz	??_initLCD& (0+255),f,b
  5763  003BE4  D7FC               	bra	u6837
  5764                           
  5765                           ;lcd.c: 50: lcdInst(0b00110011);
  5766  003BE6  0E33               	movlw	51
  5767  003BE8  ECE2  F020         	call	_lcdInst
  5768                           
  5769                           ;lcd.c: 51: lcdInst(0b00110010);
  5770  003BEC  0E32               	movlw	50
  5771  003BEE  ECE2  F020         	call	_lcdInst
  5772                           
  5773                           ;lcd.c: 53: lcdInst(0b00101000);
  5774  003BF2  0E28               	movlw	40
  5775  003BF4  ECE2  F020         	call	_lcdInst
  5776                           
  5777                           ;lcd.c: 54: lcdInst(0b00001100);
  5778  003BF8  0E0C               	movlw	12
  5779  003BFA  ECE2  F020         	call	_lcdInst
  5780                           
  5781                           ;lcd.c: 55: lcdInst(0b00000110);
  5782  003BFE  0E06               	movlw	6
  5783  003C00  ECE2  F020         	call	_lcdInst
  5784                           
  5785                           ;lcd.c: 56: lcdInst(0b00000001);
  5786  003C04  0E01               	movlw	1
  5787  003C06  ECE2  F020         	call	_lcdInst
  5788                           
  5789                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5790  003C0A  0E9C               	movlw	156
  5791  003C0C  0100               	movlb	0	; () banked
  5792  003C0E  6F83               	movwf	??_initLCD& (0+255),b
  5793  003C10  0ED7               	movlw	215
  5794  003C12                     u6847:
  5795  003C12  2EE8               	decfsz	wreg,f,c
  5796  003C14  D7FE               	bra	u6847
  5797  003C16  2F83               	decfsz	??_initLCD& (0+255),f,b
  5798  003C18  D7FC               	bra	u6847
  5799  003C1A  0012               	return		;funcret
  5800  003C1C                     __end_of_initLCD:
  5801                           	opt stack 0
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           intcon	equ	0xFF2
  5809                           intcon2	equ	0xFF1
  5810                           intcon3	equ	0xFF0
  5811                           postinc0	equ	0xFEE
  5812                           wreg	equ	0xFE8
  5813                           postdec1	equ	0xFE5
  5814                           fsr1l	equ	0xFE1
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _UI *****************
  5823 ;; Defined at:
  5824 ;;		line 74 in file "UI.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  i               1   73[BANK0 ] unsigned char 
  5829 ;;  i               1   85[BANK0 ] unsigned char 
  5830 ;;  i               1   84[BANK0 ] unsigned char 
  5831 ;;  i               1   83[BANK0 ] unsigned char 
  5832 ;;  i               1   82[BANK0 ] unsigned char 
  5833 ;;  i               1   81[BANK0 ] unsigned char 
  5834 ;;  i               1   80[BANK0 ] unsigned char 
  5835 ;;  i               1   79[BANK0 ] unsigned char 
  5836 ;;  i               1   78[BANK0 ] unsigned char 
  5837 ;;  i               1   77[BANK0 ] unsigned char 
  5838 ;;  i               1   76[BANK0 ] unsigned char 
  5839 ;;  i               1   75[BANK0 ] unsigned char 
  5840 ;;  i               1   74[BANK0 ] unsigned char 
  5841 ;;  month           4   86[BANK0 ] unsigned char [4]
  5842 ;;  i               1   72[BANK0 ] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;Total ram usage:       22 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:   11
  5859 ;; This function calls:
  5860 ;;		___awdiv
  5861 ;;		___awmod
  5862 ;;		_change_state_to_menu_12
  5863 ;;		_change_state_to_menu_22
  5864 ;;		_lcdInst
  5865 ;;		_printRTC
  5866 ;;		_printf
  5867 ;;		_strcpy
  5868 ;; This function is called by:
  5869 ;;		_main
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           	psect	text21
  5874  000012                     __ptext21:
  5875                           	opt stack 0
  5876  000012                     _UI:
  5877                           	opt stack 19
  5878                           
  5879                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5880                           
  5881                           ;incstack = 0
  5882  000012  0E02               	movlw	2
  5883  000014  0100               	movlb	0	; () banked
  5884  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5885  000018  A4D8               	btfss	status,2,c
  5886  00001A  D075               	goto	l7000
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5890  00001C  0E01               	movlw	1
  5891  00001E  ECE2  F020         	call	_lcdInst
  5892  000022  0E68               	movlw	104
  5893  000024  0100               	movlb	0	; () banked
  5894  000026  6FC4               	movwf	??_UI& (0+255),b
  5895  000028  0EE4               	movlw	228
  5896  00002A                     u6857:
  5897  00002A  2EE8               	decfsz	wreg,f,c
  5898  00002C  D7FE               	bra	u6857
  5899  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5900  000030  D7FC               	bra	u6857
  5901  000032  F000               	nop	
  5902                           
  5903                           ;UI.c: 77: lcdInst(0b10000000);;
  5904  000034  0E80               	movlw	128
  5905  000036  ECE2  F020         	call	_lcdInst
  5906                           
  5907                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5908  00003A  0EDD               	movlw	low STR_1
  5909  00003C  0100               	movlb	0	; () banked
  5910  00003E  6F8E               	movwf	printf@f& (0+255),b
  5911  000040  0EFB               	movlw	high STR_1
  5912  000042  0100               	movlb	0	; () banked
  5913  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5914  000046  0E01               	movlw	1
  5915  000048  0100               	movlb	0	; () banked
  5916  00004A  25FD               	addwf	_sel& (0+255),w,b
  5917  00004C  0100               	movlb	0	; () banked
  5918  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5919  000050  0100               	movlb	0	; () banked
  5920  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5921  000054  0E00               	movlw	0
  5922  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5923  000058  EC9C  F008         	call	_printf	;wreg free
  5924                           
  5925                           ;UI.c: 79: lcdInst(0b11000000);;
  5926  00005C  0EC0               	movlw	192
  5927  00005E  ECE2  F020         	call	_lcdInst
  5928                           
  5929                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5930  000062  0E0E               	movlw	14
  5931  000064  0100               	movlb	0	; () banked
  5932  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5933  000068  0E10               	movlw	16
  5934  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5935  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5936  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5937  000074  EC78  F019         	call	___awmod	;wreg free
  5938  000078  C080  F0C6         	movff	?___awmod,_UI$2225
  5939  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2225+1
  5940                           
  5941                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5942  000080  0E2E               	movlw	low STR_2
  5943  000082  0100               	movlb	0	; () banked
  5944  000084  6F8E               	movwf	printf@f& (0+255),b
  5945  000086  0EFF               	movlw	high STR_2
  5946  000088  0100               	movlb	0	; () banked
  5947  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5948  00008C  0E0E               	movlw	14
  5949  00008E  0100               	movlb	0	; () banked
  5950  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5951  000092  0E10               	movlw	16
  5952  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5953  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5954  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5955  00009E  EC78  F019         	call	___awmod	;wreg free
  5956  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5957  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5958  0000AA  0E00               	movlw	0
  5959  0000AC  0100               	movlb	0	; () banked
  5960  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5961  0000B0  0E3C               	movlw	60
  5962  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5963  0000B4  EC66  F018         	call	___awdiv	;wreg free
  5964  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5965  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5966  0000C0  C0C6  F080         	movff	_UI$2225,___awmod@dividend
  5967  0000C4  C0C7  F081         	movff	_UI$2225+1,___awmod@dividend+1
  5968  0000C8  0E00               	movlw	0
  5969  0000CA  0100               	movlb	0	; () banked
  5970  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5971  0000CE  0E3C               	movlw	60
  5972  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5973  0000D2  EC78  F019         	call	___awmod	;wreg free
  5974  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5975  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5976  0000DE  EC9C  F008         	call	_printf	;wreg free
  5977                           
  5978                           ;UI.c: 81: machine_state = UI_state;
  5979  0000E2  0E00               	movlw	0
  5980  0000E4  0100               	movlb	0	; () banked
  5981  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5982  0000E8                     l177:
  5983  0000E8  A281               	btfss	3969,1,c	;volatile
  5984  0000EA  D7FE               	goto	l177
  5985                           
  5986                           ;UI.c: 84: }
  5987                           ;UI.c: 85: if(cur_state==12){
  5988  0000EC  0E0C               	movlw	12
  5989  0000EE  0100               	movlb	0	; () banked
  5990  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5991  0000F2  0100               	movlb	0	; () banked
  5992  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5993  0000F6  A4D8               	btfss	status,2,c
  5994  0000F8  D003               	goto	l6998
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;UI.c: 86: change_state_to_menu_12();
  5998  0000FA  EC4B  F01E         	call	_change_state_to_menu_12	;wreg free
  5999                           
  6000                           ;UI.c: 87: }
  6001  0000FE  D3D5               	goto	l7320
  6002  000100                     l6998:
  6003                           
  6004                           ;UI.c: 88: else{
  6005                           ;UI.c: 89: change_state_to_menu_22();
  6006  000100  EC2F  F01E         	call	_change_state_to_menu_22	;wreg free
  6007                           
  6008                           ;UI.c: 90: }
  6009                           ;UI.c: 91: }
  6010  000104  D3D2               	goto	l7320
  6011  000106                     l7000:
  6012                           
  6013                           ;UI.c: 92: else if(cur_state == 0){
  6014  000106  0100               	movlb	0	; () banked
  6015  000108  51DE               	movf	_cur_state& (0+255),w,b
  6016  00010A  0100               	movlb	0	; () banked
  6017  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6018  00010E  A4D8               	btfss	status,2,c
  6019  000110  D3CC               	goto	l7320
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6023  000112  0E00               	movlw	0
  6024  000114  0100               	movlb	0	; () banked
  6025  000116  6FC8               	movwf	UI@i& (0+255),b
  6026  000118                     l7004:
  6027                           
  6028                           ; BSR set to: 0
  6029  000118  0E63               	movlw	99
  6030  00011A  0100               	movlb	0	; () banked
  6031  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6032  00011E  D001               	goto	l7008
  6033  000120  D00C               	goto	l7012
  6034  000122                     l7008:
  6035                           
  6036                           ; BSR set to: 0
  6037  000122  0E68               	movlw	104
  6038  000124  0100               	movlb	0	; () banked
  6039  000126  6FC4               	movwf	??_UI& (0+255),b
  6040  000128  0EE4               	movlw	228
  6041  00012A                     u6867:
  6042  00012A  2EE8               	decfsz	wreg,f,c
  6043  00012C  D7FE               	bra	u6867
  6044  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6045  000130  D7FC               	bra	u6867
  6046  000132  F000               	nop	
  6047  000134  0100               	movlb	0	; () banked
  6048  000136  2BC8               	incf	UI@i& (0+255),f,b
  6049  000138  D7EF               	goto	l7004
  6050  00013A                     l7012:
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;UI.c: 94: if(cur_state == 0){
  6054  00013A  0100               	movlb	0	; () banked
  6055  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6056  00013E  0100               	movlb	0	; () banked
  6057  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6058  000142  A4D8               	btfss	status,2,c
  6059  000144  D3B2               	goto	l7320
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;UI.c: 95: printRTC();
  6063  000146  EC6F  F00C         	call	_printRTC	;wreg free
  6064                           
  6065                           ;UI.c: 96: }
  6066                           ;UI.c: 97: }
  6067                           ;UI.c: 98: while(logstate){
  6068  00014A  D3AF               	goto	l7320
  6069  00014C                     l7016:
  6070                           
  6071                           ;UI.c: 100: if(!log_completion){
  6072  00014C  0100               	movlb	0	; () banked
  6073  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6074  000150  0100               	movlb	0	; () banked
  6075  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6076  000154  A4D8               	btfss	status,2,c
  6077  000156  D041               	goto	l7046
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6081  000158  0E01               	movlw	1
  6082  00015A  ECE2  F020         	call	_lcdInst
  6083  00015E  0E68               	movlw	104
  6084  000160  0100               	movlb	0	; () banked
  6085  000162  6FC4               	movwf	??_UI& (0+255),b
  6086  000164  0EE4               	movlw	228
  6087  000166                     u6877:
  6088  000166  2EE8               	decfsz	wreg,f,c
  6089  000168  D7FE               	bra	u6877
  6090  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6091  00016C  D7FC               	bra	u6877
  6092  00016E  F000               	nop	
  6093                           
  6094                           ;UI.c: 102: lcdInst(0b10000000);;
  6095  000170  0E80               	movlw	128
  6096  000172  ECE2  F020         	call	_lcdInst
  6097                           
  6098                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6099  000176  0ECB               	movlw	low STR_3
  6100  000178  0100               	movlb	0	; () banked
  6101  00017A  6F8E               	movwf	printf@f& (0+255),b
  6102  00017C  0EFB               	movlw	high STR_3
  6103  00017E  0100               	movlb	0	; () banked
  6104  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6105  000182  C0E6  F090         	movff	_log,?_printf+2
  6106  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6107  00018A  EC9C  F008         	call	_printf	;wreg free
  6108                           
  6109                           ;UI.c: 104: lcdInst(0b11000000);;
  6110  00018E  0EC0               	movlw	192
  6111  000190  ECE2  F020         	call	_lcdInst
  6112                           
  6113                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6114  000194  0E51               	movlw	low STR_4
  6115  000196  0100               	movlb	0	; () banked
  6116  000198  6F8E               	movwf	printf@f& (0+255),b
  6117  00019A  0EFE               	movlw	high STR_4
  6118  00019C  0100               	movlb	0	; () banked
  6119  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6120  0001A0  EC9C  F008         	call	_printf	;wreg free
  6121  0001A4                     l7030:
  6122  0001A4  0E00               	movlw	0
  6123  0001A6  0100               	movlb	0	; () banked
  6124  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6125  0001AA                     l7032:
  6126                           
  6127                           ; BSR set to: 0
  6128  0001AA  0E63               	movlw	99
  6129  0001AC  0100               	movlb	0	; () banked
  6130  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6131  0001B0  D001               	goto	l7036
  6132  0001B2  D00C               	goto	l7040
  6133  0001B4                     l7036:
  6134                           
  6135                           ; BSR set to: 0
  6136  0001B4  0E68               	movlw	104
  6137  0001B6  0100               	movlb	0	; () banked
  6138  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6139  0001BA  0EE4               	movlw	228
  6140  0001BC                     u6887:
  6141  0001BC  2EE8               	decfsz	wreg,f,c
  6142  0001BE  D7FE               	bra	u6887
  6143  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6144  0001C2  D7FC               	bra	u6887
  6145  0001C4  F000               	nop	
  6146  0001C6  0100               	movlb	0	; () banked
  6147  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6148  0001CA  D7EF               	goto	l7032
  6149  0001CC                     l7040:
  6150                           
  6151                           ; BSR set to: 0
  6152  0001CC  0100               	movlb	0	; () banked
  6153  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6154  0001D0  0100               	movlb	0	; () banked
  6155  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6156  0001D4  B4D8               	btfsc	status,2,c
  6157  0001D6  0012               	return	
  6158  0001D8  D7E5               	goto	l7030
  6159  0001DA                     l7046:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;UI.c: 109: else{
  6163                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6164  0001DA  0E01               	movlw	1
  6165  0001DC  ECE2  F020         	call	_lcdInst
  6166  0001E0  0E68               	movlw	104
  6167  0001E2  0100               	movlb	0	; () banked
  6168  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6169  0001E6  0EE4               	movlw	228
  6170  0001E8                     u6897:
  6171  0001E8  2EE8               	decfsz	wreg,f,c
  6172  0001EA  D7FE               	bra	u6897
  6173  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6174  0001EE  D7FC               	bra	u6897
  6175  0001F0  F000               	nop	
  6176                           
  6177                           ;UI.c: 111: lcdInst(0b10000000);;
  6178  0001F2  0E80               	movlw	128
  6179  0001F4  ECE2  F020         	call	_lcdInst
  6180                           
  6181                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6182  0001F8  0ECB               	movlw	low STR_3
  6183  0001FA  0100               	movlb	0	; () banked
  6184  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6185  0001FE  0EFB               	movlw	high STR_3
  6186  000200  0100               	movlb	0	; () banked
  6187  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6188  000204  C0E6  F090         	movff	_log,?_printf+2
  6189  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6190  00020C  EC9C  F008         	call	_printf	;wreg free
  6191                           
  6192                           ;UI.c: 113: lcdInst(0b11000000);;
  6193  000210  0EC0               	movlw	192
  6194  000212  ECE2  F020         	call	_lcdInst
  6195                           
  6196                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6197  000216  0E0F               	movlw	low STR_6
  6198  000218  0100               	movlb	0	; () banked
  6199  00021A  6F8E               	movwf	printf@f& (0+255),b
  6200  00021C  0EFE               	movlw	high STR_6
  6201  00021E  0100               	movlb	0	; () banked
  6202  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6203  000222  EC9C  F008         	call	_printf	;wreg free
  6204                           
  6205                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6206  000226  0E00               	movlw	0
  6207  000228  0100               	movlb	0	; () banked
  6208  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6209  00022C                     l7060:
  6210                           
  6211                           ; BSR set to: 0
  6212  00022C  0E63               	movlw	99
  6213  00022E  0100               	movlb	0	; () banked
  6214  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6215  000232  D001               	goto	l7064
  6216  000234  D00C               	goto	l7068
  6217  000236                     l7064:
  6218                           
  6219                           ; BSR set to: 0
  6220  000236  0E68               	movlw	104
  6221  000238  0100               	movlb	0	; () banked
  6222  00023A  6FC4               	movwf	??_UI& (0+255),b
  6223  00023C  0EE4               	movlw	228
  6224  00023E                     u6907:
  6225  00023E  2EE8               	decfsz	wreg,f,c
  6226  000240  D7FE               	bra	u6907
  6227  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6228  000244  D7FC               	bra	u6907
  6229  000246  F000               	nop	
  6230  000248  0100               	movlb	0	; () banked
  6231  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6232  00024C  D7EF               	goto	l7060
  6233  00024E                     l7068:
  6234                           
  6235                           ; BSR set to: 0
  6236  00024E  0100               	movlb	0	; () banked
  6237  000250  51F6               	movf	_logstate& (0+255),w,b
  6238  000252  0100               	movlb	0	; () banked
  6239  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6240  000256  B4D8               	btfsc	status,2,c
  6241  000258  0012               	return	
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6245                           
  6246                           ; BSR set to: 0
  6247                           
  6248                           ; BSR set to: 0
  6249  00025A  0E00               	movlw	0
  6250  00025C  0100               	movlb	0	; () banked
  6251  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6252  000260                     l7074:
  6253                           
  6254                           ; BSR set to: 0
  6255  000260  0E63               	movlw	99
  6256  000262  0100               	movlb	0	; () banked
  6257  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6258  000266  D001               	goto	l7078
  6259  000268  D00C               	goto	l7082
  6260  00026A                     l7078:
  6261                           
  6262                           ; BSR set to: 0
  6263  00026A  0E68               	movlw	104
  6264  00026C  0100               	movlb	0	; () banked
  6265  00026E  6FC4               	movwf	??_UI& (0+255),b
  6266  000270  0EE4               	movlw	228
  6267  000272                     u6917:
  6268  000272  2EE8               	decfsz	wreg,f,c
  6269  000274  D7FE               	bra	u6917
  6270  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6271  000278  D7FC               	bra	u6917
  6272  00027A  F000               	nop	
  6273  00027C  0100               	movlb	0	; () banked
  6274  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6275  000280  D7EF               	goto	l7074
  6276  000282                     l7082:
  6277                           
  6278                           ; BSR set to: 0
  6279  000282  0100               	movlb	0	; () banked
  6280  000284  51F6               	movf	_logstate& (0+255),w,b
  6281  000286  0100               	movlb	0	; () banked
  6282  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6283  00028A  B4D8               	btfsc	status,2,c
  6284  00028C  0012               	return	
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6288                           
  6289                           ; BSR set to: 0
  6290                           
  6291                           ; BSR set to: 0
  6292  00028E  0E01               	movlw	1
  6293  000290  ECE2  F020         	call	_lcdInst
  6294  000294  0E68               	movlw	104
  6295  000296  0100               	movlb	0	; () banked
  6296  000298  6FC4               	movwf	??_UI& (0+255),b
  6297  00029A  0EE4               	movlw	228
  6298  00029C                     u6927:
  6299  00029C  2EE8               	decfsz	wreg,f,c
  6300  00029E  D7FE               	bra	u6927
  6301  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6302  0002A2  D7FC               	bra	u6927
  6303  0002A4  F000               	nop	
  6304                           
  6305                           ;UI.c: 120: lcdInst(0b10000000);;
  6306  0002A6  0E80               	movlw	128
  6307  0002A8  ECE2  F020         	call	_lcdInst
  6308                           
  6309                           ;UI.c: 121: printf("START:");
  6310  0002AC  0EC4               	movlw	low STR_7
  6311  0002AE  0100               	movlb	0	; () banked
  6312  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6313  0002B2  0EFF               	movlw	high STR_7
  6314  0002B4  0100               	movlb	0	; () banked
  6315  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6316  0002B8  EC9C  F008         	call	_printf	;wreg free
  6317                           
  6318                           ;UI.c: 122: lcdInst(0b11000000);;
  6319  0002BC  0EC0               	movlw	192
  6320  0002BE  ECE2  F020         	call	_lcdInst
  6321                           
  6322                           ;UI.c: 123: char month[] = "MMM";
  6323  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6324  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6325  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6326  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6327                           
  6328                           ;UI.c: 124: switch(log_startTime[5]){
  6329  0002D2  D0C3               	goto	l7126
  6330  0002D4                     l7098:
  6331                           
  6332                           ;UI.c: 126: strcpy(month, "JAN");
  6333  0002D4  0ED6               	movlw	low UI@month
  6334  0002D6  0100               	movlb	0	; () banked
  6335  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6336  0002DA  0E00               	movlw	high UI@month
  6337  0002DC  0100               	movlb	0	; () banked
  6338  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6339  0002E0  0EDB               	movlw	low STR_8
  6340  0002E2  0100               	movlb	0	; () banked
  6341  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6342  0002E6  0EFF               	movlw	high STR_8
  6343  0002E8  0100               	movlb	0	; () banked
  6344  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6345  0002EC  EC67  F01E         	call	_strcpy	;wreg free
  6346                           
  6347                           ;UI.c: 127: break;
  6348  0002F0  D0E6               	goto	l7128
  6349  0002F2                     l7100:
  6350                           
  6351                           ;UI.c: 129: strcpy(month, "FEB");
  6352  0002F2  0ED6               	movlw	low UI@month
  6353  0002F4  0100               	movlb	0	; () banked
  6354  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6355  0002F8  0E00               	movlw	high UI@month
  6356  0002FA  0100               	movlb	0	; () banked
  6357  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6358  0002FE  0ECB               	movlw	low STR_9
  6359  000300  0100               	movlb	0	; () banked
  6360  000302  6F82               	movwf	strcpy@from& (0+255),b
  6361  000304  0EFF               	movlw	high STR_9
  6362  000306  0100               	movlb	0	; () banked
  6363  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6364  00030A  EC67  F01E         	call	_strcpy	;wreg free
  6365                           
  6366                           ;UI.c: 130: break;
  6367  00030E  D0D7               	goto	l7128
  6368  000310                     l7102:
  6369                           
  6370                           ;UI.c: 132: strcpy(month, "MAR");
  6371  000310  0ED6               	movlw	low UI@month
  6372  000312  0100               	movlb	0	; () banked
  6373  000314  6F80               	movwf	strcpy@to& (0+255),b
  6374  000316  0E00               	movlw	high UI@month
  6375  000318  0100               	movlb	0	; () banked
  6376  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6377  00031C  0EE7               	movlw	low STR_10
  6378  00031E  0100               	movlb	0	; () banked
  6379  000320  6F82               	movwf	strcpy@from& (0+255),b
  6380  000322  0EFF               	movlw	high STR_10
  6381  000324  0100               	movlb	0	; () banked
  6382  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6383  000328  EC67  F01E         	call	_strcpy	;wreg free
  6384                           
  6385                           ;UI.c: 133: break;
  6386  00032C  D0C8               	goto	l7128
  6387  00032E                     l7104:
  6388                           
  6389                           ;UI.c: 135: strcpy(month, "APR");
  6390  00032E  0ED6               	movlw	low UI@month
  6391  000330  0100               	movlb	0	; () banked
  6392  000332  6F80               	movwf	strcpy@to& (0+255),b
  6393  000334  0E00               	movlw	high UI@month
  6394  000336  0100               	movlb	0	; () banked
  6395  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6396  00033A  0EEB               	movlw	low STR_11
  6397  00033C  0100               	movlb	0	; () banked
  6398  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6399  000340  0EFF               	movlw	high STR_11
  6400  000342  0100               	movlb	0	; () banked
  6401  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6402  000346  EC67  F01E         	call	_strcpy	;wreg free
  6403                           
  6404                           ;UI.c: 136: break;
  6405  00034A  D0B9               	goto	l7128
  6406  00034C                     l7106:
  6407                           
  6408                           ;UI.c: 138: strcpy(month, "MAY");
  6409  00034C  0ED6               	movlw	low UI@month
  6410  00034E  0100               	movlb	0	; () banked
  6411  000350  6F80               	movwf	strcpy@to& (0+255),b
  6412  000352  0E00               	movlw	high UI@month
  6413  000354  0100               	movlb	0	; () banked
  6414  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6415  000358  0EFB               	movlw	low STR_12
  6416  00035A  0100               	movlb	0	; () banked
  6417  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6418  00035E  0EFF               	movlw	high STR_12
  6419  000360  0100               	movlb	0	; () banked
  6420  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6421  000364  EC67  F01E         	call	_strcpy	;wreg free
  6422                           
  6423                           ;UI.c: 139: break;
  6424  000368  D0AA               	goto	l7128
  6425  00036A                     l7108:
  6426                           
  6427                           ;UI.c: 141: strcpy(month, "JUN");
  6428  00036A  0ED6               	movlw	low UI@month
  6429  00036C  0100               	movlb	0	; () banked
  6430  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6431  000370  0E00               	movlw	high UI@month
  6432  000372  0100               	movlb	0	; () banked
  6433  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6434  000376  0EDF               	movlw	low STR_13
  6435  000378  0100               	movlb	0	; () banked
  6436  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6437  00037C  0EFF               	movlw	high STR_13
  6438  00037E  0100               	movlb	0	; () banked
  6439  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6440  000382  EC67  F01E         	call	_strcpy	;wreg free
  6441                           
  6442                           ;UI.c: 142: break;
  6443  000386  D09B               	goto	l7128
  6444  000388                     l7110:
  6445                           
  6446                           ;UI.c: 144: strcpy(month, "JUL");
  6447  000388  0ED6               	movlw	low UI@month
  6448  00038A  0100               	movlb	0	; () banked
  6449  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6450  00038E  0E00               	movlw	high UI@month
  6451  000390  0100               	movlb	0	; () banked
  6452  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6453  000394  0ED7               	movlw	low STR_14
  6454  000396  0100               	movlb	0	; () banked
  6455  000398  6F82               	movwf	strcpy@from& (0+255),b
  6456  00039A  0EFF               	movlw	high STR_14
  6457  00039C  0100               	movlb	0	; () banked
  6458  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6459  0003A0  EC67  F01E         	call	_strcpy	;wreg free
  6460                           
  6461                           ;UI.c: 145: break;
  6462  0003A4  D08C               	goto	l7128
  6463  0003A6                     l7112:
  6464                           
  6465                           ;UI.c: 147: strcpy(month, "AUG");
  6466  0003A6  0ED6               	movlw	low UI@month
  6467  0003A8  0100               	movlb	0	; () banked
  6468  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6469  0003AC  0E00               	movlw	high UI@month
  6470  0003AE  0100               	movlb	0	; () banked
  6471  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6472  0003B2  0ED3               	movlw	low STR_15
  6473  0003B4  0100               	movlb	0	; () banked
  6474  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6475  0003B8  0EFF               	movlw	high STR_15
  6476  0003BA  0100               	movlb	0	; () banked
  6477  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6478  0003BE  EC67  F01E         	call	_strcpy	;wreg free
  6479                           
  6480                           ;UI.c: 148: break;
  6481  0003C2  D07D               	goto	l7128
  6482  0003C4                     l7114:
  6483                           
  6484                           ;UI.c: 150: strcpy(month, "SEP");
  6485  0003C4  0ED6               	movlw	low UI@month
  6486  0003C6  0100               	movlb	0	; () banked
  6487  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6488  0003CA  0E00               	movlw	high UI@month
  6489  0003CC  0100               	movlb	0	; () banked
  6490  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6491  0003D0  0EE3               	movlw	low STR_16
  6492  0003D2  0100               	movlb	0	; () banked
  6493  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6494  0003D6  0EFF               	movlw	high STR_16
  6495  0003D8  0100               	movlb	0	; () banked
  6496  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6497  0003DC  EC67  F01E         	call	_strcpy	;wreg free
  6498                           
  6499                           ;UI.c: 151: break;
  6500  0003E0  D06E               	goto	l7128
  6501  0003E2                     l7116:
  6502                           
  6503                           ;UI.c: 153: strcpy(month, "OCT");
  6504  0003E2  0ED6               	movlw	low UI@month
  6505  0003E4  0100               	movlb	0	; () banked
  6506  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6507  0003E8  0E00               	movlw	high UI@month
  6508  0003EA  0100               	movlb	0	; () banked
  6509  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6510  0003EE  0EF3               	movlw	low STR_17
  6511  0003F0  0100               	movlb	0	; () banked
  6512  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6513  0003F4  0EFF               	movlw	high STR_17
  6514  0003F6  0100               	movlb	0	; () banked
  6515  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6516  0003FA  EC67  F01E         	call	_strcpy	;wreg free
  6517                           
  6518                           ;UI.c: 154: break;
  6519  0003FE  D05F               	goto	l7128
  6520  000400                     l7118:
  6521                           
  6522                           ;UI.c: 156: strcpy(month, "NOV");
  6523  000400  0ED6               	movlw	low UI@month
  6524  000402  0100               	movlb	0	; () banked
  6525  000404  6F80               	movwf	strcpy@to& (0+255),b
  6526  000406  0E00               	movlw	high UI@month
  6527  000408  0100               	movlb	0	; () banked
  6528  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6529  00040C  0EF7               	movlw	low STR_18
  6530  00040E  0100               	movlb	0	; () banked
  6531  000410  6F82               	movwf	strcpy@from& (0+255),b
  6532  000412  0EFF               	movlw	high STR_18
  6533  000414  0100               	movlb	0	; () banked
  6534  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6535  000418  EC67  F01E         	call	_strcpy	;wreg free
  6536                           
  6537                           ;UI.c: 157: break;
  6538  00041C  D050               	goto	l7128
  6539  00041E                     l7120:
  6540                           
  6541                           ;UI.c: 159: strcpy(month, "DEC");
  6542  00041E  0ED6               	movlw	low UI@month
  6543  000420  0100               	movlb	0	; () banked
  6544  000422  6F80               	movwf	strcpy@to& (0+255),b
  6545  000424  0E00               	movlw	high UI@month
  6546  000426  0100               	movlb	0	; () banked
  6547  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6548  00042A  0ECF               	movlw	low STR_19
  6549  00042C  0100               	movlb	0	; () banked
  6550  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6551  000430  0EFF               	movlw	high STR_19
  6552  000432  0100               	movlb	0	; () banked
  6553  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6554  000436  EC67  F01E         	call	_strcpy	;wreg free
  6555                           
  6556                           ;UI.c: 160: break;
  6557  00043A  D041               	goto	l7128
  6558  00043C                     l7122:
  6559                           
  6560                           ;UI.c: 162: strcpy(month, "ERR");
  6561  00043C  0ED6               	movlw	low UI@month
  6562  00043E  0100               	movlb	0	; () banked
  6563  000440  6F80               	movwf	strcpy@to& (0+255),b
  6564  000442  0E00               	movlw	high UI@month
  6565  000444  0100               	movlb	0	; () banked
  6566  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6567  000448  0EEF               	movlw	low STR_20
  6568  00044A  0100               	movlb	0	; () banked
  6569  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6570  00044E  0EFF               	movlw	high STR_20
  6571  000450  0100               	movlb	0	; () banked
  6572  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6573  000454  EC67  F01E         	call	_strcpy	;wreg free
  6574                           
  6575                           ;UI.c: 164: }
  6576                           
  6577                           ;UI.c: 163: break;
  6578  000458  D032               	goto	l7128
  6579  00045A                     l7126:
  6580  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6581  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6582  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6583                           
  6584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6585                           ; Switch size 1, requested type "space"
  6586                           ; Number of cases is 1, Range of values is 0 to 0
  6587                           ; switch strategies available:
  6588                           ; Name         Instructions Cycles
  6589                           ; simple_byte            4     3 (average)
  6590                           ;	Chosen strategy is simple_byte
  6591  000466  0100               	movlb	0	; () banked
  6592  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6593  00046A  0A00               	xorlw	0	; case 0
  6594  00046C  A4D8               	btfss	status,2,c
  6595  00046E  D7E6               	goto	l7122
  6596                           
  6597                           ; BSR set to: 0
  6598                           ; Switch size 1, requested type "space"
  6599                           ; Number of cases is 12, Range of values is 1 to 12
  6600                           ; switch strategies available:
  6601                           ; Name         Instructions Cycles
  6602                           ; simple_byte           37    19 (average)
  6603                           ;	Chosen strategy is simple_byte
  6604  000470  0100               	movlb	0	; () banked
  6605  000472  51C4               	movf	??_UI& (0+255),w,b
  6606  000474  0A01               	xorlw	1	; case 1
  6607  000476  B4D8               	btfsc	status,2,c
  6608  000478  D72D               	goto	l7098
  6609  00047A  0A03               	xorlw	3	; case 2
  6610  00047C  B4D8               	btfsc	status,2,c
  6611  00047E  D739               	goto	l7100
  6612  000480  0A01               	xorlw	1	; case 3
  6613  000482  B4D8               	btfsc	status,2,c
  6614  000484  D745               	goto	l7102
  6615  000486  0A07               	xorlw	7	; case 4
  6616  000488  B4D8               	btfsc	status,2,c
  6617  00048A  D751               	goto	l7104
  6618  00048C  0A01               	xorlw	1	; case 5
  6619  00048E  B4D8               	btfsc	status,2,c
  6620  000490  D75D               	goto	l7106
  6621  000492  0A03               	xorlw	3	; case 6
  6622  000494  B4D8               	btfsc	status,2,c
  6623  000496  D769               	goto	l7108
  6624  000498  0A01               	xorlw	1	; case 7
  6625  00049A  B4D8               	btfsc	status,2,c
  6626  00049C  D775               	goto	l7110
  6627  00049E  0A0F               	xorlw	15	; case 8
  6628  0004A0  B4D8               	btfsc	status,2,c
  6629  0004A2  D781               	goto	l7112
  6630  0004A4  0A01               	xorlw	1	; case 9
  6631  0004A6  B4D8               	btfsc	status,2,c
  6632  0004A8  D78D               	goto	l7114
  6633  0004AA  0A03               	xorlw	3	; case 10
  6634  0004AC  B4D8               	btfsc	status,2,c
  6635  0004AE  D799               	goto	l7116
  6636  0004B0  0A01               	xorlw	1	; case 11
  6637  0004B2  B4D8               	btfsc	status,2,c
  6638  0004B4  D7A5               	goto	l7118
  6639  0004B6  0A07               	xorlw	7	; case 12
  6640  0004B8  B4D8               	btfsc	status,2,c
  6641  0004BA  D7B1               	goto	l7120
  6642  0004BC  D7BF               	goto	l7122
  6643  0004BE                     l7128:
  6644                           
  6645                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6646  0004BE  0E54               	movlw	low STR_21
  6647  0004C0  0100               	movlb	0	; () banked
  6648  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6649  0004C4  0EFB               	movlw	high STR_21
  6650  0004C6  0100               	movlb	0	; () banked
  6651  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6652  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6653  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6654  0004D2  0ED6               	movlw	low UI@month
  6655  0004D4  0100               	movlb	0	; () banked
  6656  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6657  0004D8  0E00               	movlw	high UI@month
  6658  0004DA  0100               	movlb	0	; () banked
  6659  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6660  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6661  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6662  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6663  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6664  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6665  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6666  0004F6  EC9C  F008         	call	_printf	;wreg free
  6667                           
  6668                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6669  0004FA  0E00               	movlw	0
  6670  0004FC  0100               	movlb	0	; () banked
  6671  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6672  000500                     l7132:
  6673                           
  6674                           ; BSR set to: 0
  6675  000500  0E63               	movlw	99
  6676  000502  0100               	movlb	0	; () banked
  6677  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6678  000506  D001               	goto	l7136
  6679  000508  D00C               	goto	l7140
  6680  00050A                     l7136:
  6681                           
  6682                           ; BSR set to: 0
  6683  00050A  0E68               	movlw	104
  6684  00050C  0100               	movlb	0	; () banked
  6685  00050E  6FC4               	movwf	??_UI& (0+255),b
  6686  000510  0EE4               	movlw	228
  6687  000512                     u6937:
  6688  000512  2EE8               	decfsz	wreg,f,c
  6689  000514  D7FE               	bra	u6937
  6690  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6691  000518  D7FC               	bra	u6937
  6692  00051A  F000               	nop	
  6693  00051C  0100               	movlb	0	; () banked
  6694  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6695  000520  D7EF               	goto	l7132
  6696  000522                     l7140:
  6697                           
  6698                           ; BSR set to: 0
  6699  000522  0100               	movlb	0	; () banked
  6700  000524  51F6               	movf	_logstate& (0+255),w,b
  6701  000526  0100               	movlb	0	; () banked
  6702  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6703  00052A  B4D8               	btfsc	status,2,c
  6704  00052C  0012               	return	
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6708                           
  6709                           ; BSR set to: 0
  6710                           
  6711                           ; BSR set to: 0
  6712  00052E  0E00               	movlw	0
  6713  000530  0100               	movlb	0	; () banked
  6714  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6715  000534                     l7146:
  6716                           
  6717                           ; BSR set to: 0
  6718  000534  0E63               	movlw	99
  6719  000536  0100               	movlb	0	; () banked
  6720  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6721  00053A  D001               	goto	l7150
  6722  00053C  D00C               	goto	l7154
  6723  00053E                     l7150:
  6724                           
  6725                           ; BSR set to: 0
  6726  00053E  0E68               	movlw	104
  6727  000540  0100               	movlb	0	; () banked
  6728  000542  6FC4               	movwf	??_UI& (0+255),b
  6729  000544  0EE4               	movlw	228
  6730  000546                     u6947:
  6731  000546  2EE8               	decfsz	wreg,f,c
  6732  000548  D7FE               	bra	u6947
  6733  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6734  00054C  D7FC               	bra	u6947
  6735  00054E  F000               	nop	
  6736  000550  0100               	movlb	0	; () banked
  6737  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6738  000554  D7EF               	goto	l7146
  6739  000556                     l7154:
  6740                           
  6741                           ; BSR set to: 0
  6742  000556  0100               	movlb	0	; () banked
  6743  000558  51F6               	movf	_logstate& (0+255),w,b
  6744  00055A  0100               	movlb	0	; () banked
  6745  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6746  00055E  B4D8               	btfsc	status,2,c
  6747  000560  0012               	return	
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6751                           
  6752                           ; BSR set to: 0
  6753                           
  6754                           ; BSR set to: 0
  6755  000562  0E01               	movlw	1
  6756  000564  ECE2  F020         	call	_lcdInst
  6757  000568  0E68               	movlw	104
  6758  00056A  0100               	movlb	0	; () banked
  6759  00056C  6FC4               	movwf	??_UI& (0+255),b
  6760  00056E  0EE4               	movlw	228
  6761  000570                     u6957:
  6762  000570  2EE8               	decfsz	wreg,f,c
  6763  000572  D7FE               	bra	u6957
  6764  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6765  000576  D7FC               	bra	u6957
  6766  000578  F000               	nop	
  6767                           
  6768                           ;UI.c: 171: lcdInst(0b10000000);;
  6769  00057A  0E80               	movlw	128
  6770  00057C  ECE2  F020         	call	_lcdInst
  6771                           
  6772                           ;UI.c: 172: printf("DURATION:");
  6773  000580  0EA4               	movlw	low STR_22
  6774  000582  0100               	movlb	0	; () banked
  6775  000584  6F8E               	movwf	printf@f& (0+255),b
  6776  000586  0EFF               	movlw	high STR_22
  6777  000588  0100               	movlb	0	; () banked
  6778  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6779  00058C  EC9C  F008         	call	_printf	;wreg free
  6780                           
  6781                           ;UI.c: 173: lcdInst(0b11000000);;
  6782  000590  0EC0               	movlw	192
  6783  000592  ECE2  F020         	call	_lcdInst
  6784                           
  6785                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6786  000596  0E0E               	movlw	14
  6787  000598  0100               	movlb	0	; () banked
  6788  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6789  00059C  0E10               	movlw	16
  6790  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6791  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6792  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6793  0005A8  EC78  F019         	call	___awmod	;wreg free
  6794  0005AC  C080  F0C6         	movff	?___awmod,_UI$2225
  6795  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2225+1
  6796                           
  6797                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6798  0005B4  0E20               	movlw	low STR_23
  6799  0005B6  0100               	movlb	0	; () banked
  6800  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6801  0005BA  0EFF               	movlw	high STR_23
  6802  0005BC  0100               	movlb	0	; () banked
  6803  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6804  0005C0  0E0E               	movlw	14
  6805  0005C2  0100               	movlb	0	; () banked
  6806  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6807  0005C6  0E10               	movlw	16
  6808  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6809  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6810  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6811  0005D2  EC78  F019         	call	___awmod	;wreg free
  6812  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6813  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6814  0005DE  0E00               	movlw	0
  6815  0005E0  0100               	movlb	0	; () banked
  6816  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6817  0005E4  0E3C               	movlw	60
  6818  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6819  0005E8  EC66  F018         	call	___awdiv	;wreg free
  6820  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6821  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6822  0005F4  C0C6  F080         	movff	_UI$2225,___awmod@dividend
  6823  0005F8  C0C7  F081         	movff	_UI$2225+1,___awmod@dividend+1
  6824  0005FC  0E00               	movlw	0
  6825  0005FE  0100               	movlb	0	; () banked
  6826  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6827  000602  0E3C               	movlw	60
  6828  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6829  000606  EC78  F019         	call	___awmod	;wreg free
  6830  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6831  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6832  000612  EC9C  F008         	call	_printf	;wreg free
  6833                           
  6834                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6835  000616  0E00               	movlw	0
  6836  000618  0100               	movlb	0	; () banked
  6837  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6838  00061C                     l7174:
  6839                           
  6840                           ; BSR set to: 0
  6841  00061C  0E63               	movlw	99
  6842  00061E  0100               	movlb	0	; () banked
  6843  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6844  000622  D001               	goto	l7178
  6845  000624  D00C               	goto	l7182
  6846  000626                     l7178:
  6847                           
  6848                           ; BSR set to: 0
  6849  000626  0E68               	movlw	104
  6850  000628  0100               	movlb	0	; () banked
  6851  00062A  6FC4               	movwf	??_UI& (0+255),b
  6852  00062C  0EE4               	movlw	228
  6853  00062E                     u6967:
  6854  00062E  2EE8               	decfsz	wreg,f,c
  6855  000630  D7FE               	bra	u6967
  6856  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6857  000634  D7FC               	bra	u6967
  6858  000636  F000               	nop	
  6859  000638  0100               	movlb	0	; () banked
  6860  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6861  00063C  D7EF               	goto	l7174
  6862  00063E                     l7182:
  6863                           
  6864                           ; BSR set to: 0
  6865  00063E  0100               	movlb	0	; () banked
  6866  000640  51F6               	movf	_logstate& (0+255),w,b
  6867  000642  0100               	movlb	0	; () banked
  6868  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6869  000646  B4D8               	btfsc	status,2,c
  6870  000648  0012               	return	
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6874                           
  6875                           ; BSR set to: 0
  6876                           
  6877                           ; BSR set to: 0
  6878  00064A  0E00               	movlw	0
  6879  00064C  0100               	movlb	0	; () banked
  6880  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6881  000650                     l7188:
  6882                           
  6883                           ; BSR set to: 0
  6884  000650  0E63               	movlw	99
  6885  000652  0100               	movlb	0	; () banked
  6886  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6887  000656  D001               	goto	l7192
  6888  000658  D00C               	goto	l7196
  6889  00065A                     l7192:
  6890                           
  6891                           ; BSR set to: 0
  6892  00065A  0E68               	movlw	104
  6893  00065C  0100               	movlb	0	; () banked
  6894  00065E  6FC4               	movwf	??_UI& (0+255),b
  6895  000660  0EE4               	movlw	228
  6896  000662                     u6977:
  6897  000662  2EE8               	decfsz	wreg,f,c
  6898  000664  D7FE               	bra	u6977
  6899  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6900  000668  D7FC               	bra	u6977
  6901  00066A  F000               	nop	
  6902  00066C  0100               	movlb	0	; () banked
  6903  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6904  000670  D7EF               	goto	l7188
  6905  000672                     l7196:
  6906                           
  6907                           ; BSR set to: 0
  6908  000672  0100               	movlb	0	; () banked
  6909  000674  51F6               	movf	_logstate& (0+255),w,b
  6910  000676  0100               	movlb	0	; () banked
  6911  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6912  00067A  B4D8               	btfsc	status,2,c
  6913  00067C  0012               	return	
  6914                           
  6915                           ; BSR set to: 0
  6916                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921  00067E  0E01               	movlw	1
  6922  000680  ECE2  F020         	call	_lcdInst
  6923  000684  0E68               	movlw	104
  6924  000686  0100               	movlb	0	; () banked
  6925  000688  6FC4               	movwf	??_UI& (0+255),b
  6926  00068A  0EE4               	movlw	228
  6927  00068C                     u6987:
  6928  00068C  2EE8               	decfsz	wreg,f,c
  6929  00068E  D7FE               	bra	u6987
  6930  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6931  000692  D7FC               	bra	u6987
  6932  000694  F000               	nop	
  6933                           
  6934                           ;UI.c: 180: lcdInst(0b10000000);;
  6935  000696  0E80               	movlw	128
  6936  000698  ECE2  F020         	call	_lcdInst
  6937                           
  6938                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6939  00069C  0E65               	movlw	low STR_24
  6940  00069E  0100               	movlb	0	; () banked
  6941  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6942  0006A2  0EFD               	movlw	high STR_24
  6943  0006A4  0100               	movlb	0	; () banked
  6944  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6945  0006A8  EC9C  F008         	call	_printf	;wreg free
  6946                           
  6947                           ;UI.c: 182: lcdInst(0b11000000);;
  6948  0006AC  0EC0               	movlw	192
  6949  0006AE  ECE2  F020         	call	_lcdInst
  6950                           
  6951                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6952  0006B2  0E94               	movlw	low STR_25
  6953  0006B4  0100               	movlb	0	; () banked
  6954  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6955  0006B8  0EFB               	movlw	high STR_25
  6956  0006BA  0100               	movlb	0	; () banked
  6957  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6958  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6959  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6960  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6961  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6962  0006CE  EC9C  F008         	call	_printf	;wreg free
  6963                           
  6964                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6965  0006D2  0E00               	movlw	0
  6966  0006D4  0100               	movlb	0	; () banked
  6967  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6968  0006D8                     l7214:
  6969                           
  6970                           ; BSR set to: 0
  6971  0006D8  0E63               	movlw	99
  6972  0006DA  0100               	movlb	0	; () banked
  6973  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6974  0006DE  D001               	goto	l7218
  6975  0006E0  D00C               	goto	l7222
  6976  0006E2                     l7218:
  6977                           
  6978                           ; BSR set to: 0
  6979  0006E2  0E68               	movlw	104
  6980  0006E4  0100               	movlb	0	; () banked
  6981  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6982  0006E8  0EE4               	movlw	228
  6983  0006EA                     u6997:
  6984  0006EA  2EE8               	decfsz	wreg,f,c
  6985  0006EC  D7FE               	bra	u6997
  6986  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6987  0006F0  D7FC               	bra	u6997
  6988  0006F2  F000               	nop	
  6989  0006F4  0100               	movlb	0	; () banked
  6990  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6991  0006F8  D7EF               	goto	l7214
  6992  0006FA                     l7222:
  6993                           
  6994                           ; BSR set to: 0
  6995  0006FA  0100               	movlb	0	; () banked
  6996  0006FC  51F6               	movf	_logstate& (0+255),w,b
  6997  0006FE  0100               	movlb	0	; () banked
  6998  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6999  000702  B4D8               	btfsc	status,2,c
  7000  000704  0012               	return	
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7004                           
  7005                           ; BSR set to: 0
  7006                           
  7007                           ; BSR set to: 0
  7008  000706  0E00               	movlw	0
  7009  000708  0100               	movlb	0	; () banked
  7010  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7011  00070C                     l7228:
  7012                           
  7013                           ; BSR set to: 0
  7014  00070C  0E63               	movlw	99
  7015  00070E  0100               	movlb	0	; () banked
  7016  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7017  000712  D001               	goto	l7232
  7018  000714  D00C               	goto	l7236
  7019  000716                     l7232:
  7020                           
  7021                           ; BSR set to: 0
  7022  000716  0E68               	movlw	104
  7023  000718  0100               	movlb	0	; () banked
  7024  00071A  6FC4               	movwf	??_UI& (0+255),b
  7025  00071C  0EE4               	movlw	228
  7026  00071E                     u7007:
  7027  00071E  2EE8               	decfsz	wreg,f,c
  7028  000720  D7FE               	bra	u7007
  7029  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7030  000724  D7FC               	bra	u7007
  7031  000726  F000               	nop	
  7032  000728  0100               	movlb	0	; () banked
  7033  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7034  00072C  D7EF               	goto	l7228
  7035  00072E                     l7236:
  7036                           
  7037                           ; BSR set to: 0
  7038  00072E  0100               	movlb	0	; () banked
  7039  000730  51F6               	movf	_logstate& (0+255),w,b
  7040  000732  0100               	movlb	0	; () banked
  7041  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7042  000736  B4D8               	btfsc	status,2,c
  7043  000738  0012               	return	
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7047                           
  7048                           ; BSR set to: 0
  7049                           
  7050                           ; BSR set to: 0
  7051  00073A  0E01               	movlw	1
  7052  00073C  ECE2  F020         	call	_lcdInst
  7053  000740  0E68               	movlw	104
  7054  000742  0100               	movlb	0	; () banked
  7055  000744  6FC4               	movwf	??_UI& (0+255),b
  7056  000746  0EE4               	movlw	228
  7057  000748                     u7017:
  7058  000748  2EE8               	decfsz	wreg,f,c
  7059  00074A  D7FE               	bra	u7017
  7060  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7061  00074E  D7FC               	bra	u7017
  7062  000750  F000               	nop	
  7063                           
  7064                           ;UI.c: 189: lcdInst(0b10000000);;
  7065  000752  0E80               	movlw	128
  7066  000754  ECE2  F020         	call	_lcdInst
  7067                           
  7068                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7069  000758  0E76               	movlw	low STR_26
  7070  00075A  0100               	movlb	0	; () banked
  7071  00075C  6F8E               	movwf	printf@f& (0+255),b
  7072  00075E  0EFD               	movlw	high STR_26
  7073  000760  0100               	movlb	0	; () banked
  7074  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7075  000764  EC9C  F008         	call	_printf	;wreg free
  7076                           
  7077                           ;UI.c: 191: lcdInst(0b11000000);;
  7078  000768  0EC0               	movlw	192
  7079  00076A  ECE2  F020         	call	_lcdInst
  7080                           
  7081                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7082  00076E  0E81               	movlw	low STR_27
  7083  000770  0100               	movlb	0	; () banked
  7084  000772  6F8E               	movwf	printf@f& (0+255),b
  7085  000774  0EFB               	movlw	high STR_27
  7086  000776  0100               	movlb	0	; () banked
  7087  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7088  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7089  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7090  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7091  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7092  00078A  EC9C  F008         	call	_printf	;wreg free
  7093                           
  7094                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7095  00078E  0E00               	movlw	0
  7096  000790  0100               	movlb	0	; () banked
  7097  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7098  000794                     l7254:
  7099                           
  7100                           ; BSR set to: 0
  7101  000794  0E63               	movlw	99
  7102  000796  0100               	movlb	0	; () banked
  7103  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7104  00079A  D001               	goto	l7258
  7105  00079C  D00C               	goto	l7262
  7106  00079E                     l7258:
  7107                           
  7108                           ; BSR set to: 0
  7109  00079E  0E68               	movlw	104
  7110  0007A0  0100               	movlb	0	; () banked
  7111  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7112  0007A4  0EE4               	movlw	228
  7113  0007A6                     u7027:
  7114  0007A6  2EE8               	decfsz	wreg,f,c
  7115  0007A8  D7FE               	bra	u7027
  7116  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7117  0007AC  D7FC               	bra	u7027
  7118  0007AE  F000               	nop	
  7119  0007B0  0100               	movlb	0	; () banked
  7120  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7121  0007B4  D7EF               	goto	l7254
  7122  0007B6                     l7262:
  7123                           
  7124                           ; BSR set to: 0
  7125  0007B6  0100               	movlb	0	; () banked
  7126  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7127  0007BA  0100               	movlb	0	; () banked
  7128  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7129  0007BE  B4D8               	btfsc	status,2,c
  7130  0007C0  0012               	return	
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7134                           
  7135                           ; BSR set to: 0
  7136                           
  7137                           ; BSR set to: 0
  7138  0007C2  0E00               	movlw	0
  7139  0007C4  0100               	movlb	0	; () banked
  7140  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7141  0007C8                     l7268:
  7142                           
  7143                           ; BSR set to: 0
  7144  0007C8  0E63               	movlw	99
  7145  0007CA  0100               	movlb	0	; () banked
  7146  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7147  0007CE  D001               	goto	l7272
  7148  0007D0  D00C               	goto	l7276
  7149  0007D2                     l7272:
  7150                           
  7151                           ; BSR set to: 0
  7152  0007D2  0E68               	movlw	104
  7153  0007D4  0100               	movlb	0	; () banked
  7154  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7155  0007D8  0EE4               	movlw	228
  7156  0007DA                     u7037:
  7157  0007DA  2EE8               	decfsz	wreg,f,c
  7158  0007DC  D7FE               	bra	u7037
  7159  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7160  0007E0  D7FC               	bra	u7037
  7161  0007E2  F000               	nop	
  7162  0007E4  0100               	movlb	0	; () banked
  7163  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7164  0007E8  D7EF               	goto	l7268
  7165  0007EA                     l7276:
  7166                           
  7167                           ; BSR set to: 0
  7168  0007EA  0100               	movlb	0	; () banked
  7169  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7170  0007EE  0100               	movlb	0	; () banked
  7171  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7172  0007F2  B4D8               	btfsc	status,2,c
  7173  0007F4  0012               	return	
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7177                           
  7178                           ; BSR set to: 0
  7179                           
  7180                           ; BSR set to: 0
  7181  0007F6  0E01               	movlw	1
  7182  0007F8  ECE2  F020         	call	_lcdInst
  7183  0007FC  0E68               	movlw	104
  7184  0007FE  0100               	movlb	0	; () banked
  7185  000800  6FC4               	movwf	??_UI& (0+255),b
  7186  000802  0EE4               	movlw	228
  7187  000804                     u7047:
  7188  000804  2EE8               	decfsz	wreg,f,c
  7189  000806  D7FE               	bra	u7047
  7190  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7191  00080A  D7FC               	bra	u7047
  7192  00080C  F000               	nop	
  7193                           
  7194                           ;UI.c: 198: lcdInst(0b10000000);;
  7195  00080E  0E80               	movlw	128
  7196  000810  ECE2  F020         	call	_lcdInst
  7197                           
  7198                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7199  000814  0E87               	movlw	low STR_28
  7200  000816  0100               	movlb	0	; () banked
  7201  000818  6F8E               	movwf	printf@f& (0+255),b
  7202  00081A  0EFD               	movlw	high STR_28
  7203  00081C  0100               	movlb	0	; () banked
  7204  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7205  000820  EC9C  F008         	call	_printf	;wreg free
  7206                           
  7207                           ;UI.c: 200: lcdInst(0b11000000);;
  7208  000824  0EC0               	movlw	192
  7209  000826  ECE2  F020         	call	_lcdInst
  7210                           
  7211                           ;UI.c: 201: printf("%d", log_count_total);
  7212  00082A  0E91               	movlw	low (STR_27+16)
  7213  00082C  0100               	movlb	0	; () banked
  7214  00082E  6F8E               	movwf	printf@f& (0+255),b
  7215  000830  0EFB               	movlw	high (STR_27+16)
  7216  000832  0100               	movlb	0	; () banked
  7217  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7218  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7219  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7220  00083E  EC9C  F008         	call	_printf	;wreg free
  7221                           
  7222                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7223  000842  0E00               	movlw	0
  7224  000844  0100               	movlb	0	; () banked
  7225  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7226  000848                     l7294:
  7227                           
  7228                           ; BSR set to: 0
  7229  000848  0E63               	movlw	99
  7230  00084A  0100               	movlb	0	; () banked
  7231  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7232  00084E  D001               	goto	l7298
  7233  000850  D00C               	goto	l7302
  7234  000852                     l7298:
  7235                           
  7236                           ; BSR set to: 0
  7237  000852  0E68               	movlw	104
  7238  000854  0100               	movlb	0	; () banked
  7239  000856  6FC4               	movwf	??_UI& (0+255),b
  7240  000858  0EE4               	movlw	228
  7241  00085A                     u7057:
  7242  00085A  2EE8               	decfsz	wreg,f,c
  7243  00085C  D7FE               	bra	u7057
  7244  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7245  000860  D7FC               	bra	u7057
  7246  000862  F000               	nop	
  7247  000864  0100               	movlb	0	; () banked
  7248  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7249  000868  D7EF               	goto	l7294
  7250  00086A                     l7302:
  7251                           
  7252                           ; BSR set to: 0
  7253  00086A  0100               	movlb	0	; () banked
  7254  00086C  51F6               	movf	_logstate& (0+255),w,b
  7255  00086E  0100               	movlb	0	; () banked
  7256  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7257  000872  B4D8               	btfsc	status,2,c
  7258  000874  0012               	return	
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7262                           
  7263                           ; BSR set to: 0
  7264                           
  7265                           ; BSR set to: 0
  7266  000876  0E00               	movlw	0
  7267  000878  0100               	movlb	0	; () banked
  7268  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7269  00087C                     l7308:
  7270                           
  7271                           ; BSR set to: 0
  7272  00087C  0E63               	movlw	99
  7273  00087E  0100               	movlb	0	; () banked
  7274  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7275  000882  D001               	goto	l7312
  7276  000884  D00C               	goto	l7316
  7277  000886                     l7312:
  7278                           
  7279                           ; BSR set to: 0
  7280  000886  0E68               	movlw	104
  7281  000888  0100               	movlb	0	; () banked
  7282  00088A  6FC4               	movwf	??_UI& (0+255),b
  7283  00088C  0EE4               	movlw	228
  7284  00088E                     u7067:
  7285  00088E  2EE8               	decfsz	wreg,f,c
  7286  000890  D7FE               	bra	u7067
  7287  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7288  000894  D7FC               	bra	u7067
  7289  000896  F000               	nop	
  7290  000898  0100               	movlb	0	; () banked
  7291  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7292  00089C  D7EF               	goto	l7308
  7293  00089E                     l7316:
  7294                           
  7295                           ; BSR set to: 0
  7296  00089E  0100               	movlb	0	; () banked
  7297  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7298  0008A2  0100               	movlb	0	; () banked
  7299  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7300  0008A6  B4D8               	btfsc	status,2,c
  7301  0008A8  0012               	return	
  7302  0008AA                     l7320:
  7303  0008AA  0100               	movlb	0	; () banked
  7304  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7305  0008AE  0100               	movlb	0	; () banked
  7306  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7307  0008B2  B4D8               	btfsc	status,2,c
  7308  0008B4  0012               	return	
  7309  0008B6  D44A               	goto	l7016
  7310  0008B8                     __end_of_UI:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon2	equ	0xFF1
  7320                           intcon3	equ	0xFF0
  7321                           postinc0	equ	0xFEE
  7322                           wreg	equ	0xFE8
  7323                           postdec1	equ	0xFE5
  7324                           fsr1l	equ	0xFE1
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _printRTC *****************
  7333 ;; Defined at:
  7334 ;;		line 63 in file "RTC.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  i               2   66[BANK0 ] int 
  7339 ;;  INT_time       14   46[BANK0 ] int [7]
  7340 ;;  month           4   62[BANK0 ] unsigned char [4]
  7341 ;;  RTC_month       2   60[BANK0 ] int 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;Total ram usage:       25 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:   10
  7358 ;; This function calls:
  7359 ;;		_getRTC
  7360 ;;		_lcdInst
  7361 ;;		_printf
  7362 ;;		_strcpy
  7363 ;; This function is called by:
  7364 ;;		_UI
  7365 ;;		_change_state_to_menu_start
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text22
  7370  0018DE                     __ptext22:
  7371                           	opt stack 0
  7372  0018DE                     _printRTC:
  7373                           	opt stack 18
  7374                           
  7375                           ;RTC.c: 64: getRTC();
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;incstack = 0
  7379  0018DE  EC9E  F01A         	call	_getRTC	;wreg free
  7380                           
  7381                           ;RTC.c: 65: char month[] = "MMM";
  7382  0018E2  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7383  0018E6  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7384  0018EA  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7385  0018EE  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7386                           
  7387                           ;RTC.c: 66: int INT_time[7];
  7388                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7389  0018F2  0E00               	movlw	0
  7390  0018F4  0100               	movlb	0	; () banked
  7391  0018F6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7392  0018F8  0E00               	movlw	0
  7393  0018FA  6FC2               	movwf	printRTC@i& (0+255),b
  7394                           
  7395                           ; BSR set to: 0
  7396  0018FC  0100               	movlb	0	; () banked
  7397  0018FE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7398  001900  D008               	goto	l5600
  7399  001902  0100               	movlb	0	; () banked
  7400  001904  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7401  001906  E146               	bnz	l591
  7402  001908  0E07               	movlw	7
  7403  00190A  0100               	movlb	0	; () banked
  7404  00190C  5DC2               	subwf	printRTC@i& (0+255),w,b
  7405  00190E  B0D8               	btfsc	status,0,c
  7406  001910  D041               	goto	l591
  7407  001912                     l5600:
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7411  001912  0E24               	movlw	low _time
  7412  001914  0100               	movlb	0	; () banked
  7413  001916  25C2               	addwf	printRTC@i& (0+255),w,b
  7414  001918  6ED9               	movwf	fsr2l,c
  7415  00191A  0E01               	movlw	high _time
  7416  00191C  0100               	movlb	0	; () banked
  7417  00191E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7418  001920  6EDA               	movwf	fsr2h,c
  7419  001922  50DF               	movf	indf2,w,c
  7420  001924  0100               	movlb	0	; () banked
  7421  001926  6FAB               	movwf	??_printRTC& (0+255),b
  7422  001928  0100               	movlb	0	; () banked
  7423  00192A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7424  00192C  0E0F               	movlw	15
  7425  00192E  17AB               	andwf	??_printRTC& (0+255),f,b
  7426  001930  0E0F               	movlw	15
  7427  001932  0100               	movlb	0	; () banked
  7428  001934  17AB               	andwf	??_printRTC& (0+255),f,b
  7429  001936  0100               	movlb	0	; () banked
  7430  001938  51AB               	movf	??_printRTC& (0+255),w,b
  7431  00193A  0D0A               	mullw	10
  7432  00193C  0E24               	movlw	low _time
  7433  00193E  0100               	movlb	0	; () banked
  7434  001940  25C2               	addwf	printRTC@i& (0+255),w,b
  7435  001942  6ED9               	movwf	fsr2l,c
  7436  001944  0E01               	movlw	high _time
  7437  001946  0100               	movlb	0	; () banked
  7438  001948  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7439  00194A  6EDA               	movwf	fsr2h,c
  7440  00194C  50DF               	movf	indf2,w,c
  7441  00194E  0B0F               	andlw	15
  7442  001950  0100               	movlb	0	; () banked
  7443  001952  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7444  001954  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7445  001956  50F3               	movf	prodl,w,c
  7446  001958  0100               	movlb	0	; () banked
  7447  00195A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7448  00195C  50F4               	movf	prodh,w,c
  7449  00195E  0100               	movlb	0	; () banked
  7450  001960  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7451  001962  90D8               	bcf	status,0,c
  7452  001964  0100               	movlb	0	; () banked
  7453  001966  35C2               	rlcf	printRTC@i& (0+255),w,b
  7454  001968  6ED9               	movwf	fsr2l,c
  7455  00196A  0100               	movlb	0	; () banked
  7456  00196C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7457  00196E  6EDA               	movwf	fsr2h,c
  7458  001970  0EAE               	movlw	low printRTC@INT_time
  7459  001972  26D9               	addwf	fsr2l,f,c
  7460  001974  0E00               	movlw	high printRTC@INT_time
  7461  001976  22DA               	addwfc	fsr2h,f,c
  7462  001978  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7463  00197C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7464                           
  7465                           ; BSR set to: 0
  7466  001980  0100               	movlb	0	; () banked
  7467  001982  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7468  001984  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7469                           
  7470                           ; BSR set to: 0
  7471  001986  0100               	movlb	0	; () banked
  7472  001988  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7473  00198A  D7C3               	goto	l5600
  7474  00198C  0100               	movlb	0	; () banked
  7475  00198E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7476  001990  E101               	bnz	u4300
  7477  001992  D7BA               	goto	L5
  7478  001994                     u4300:
  7479  001994                     l591:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;RTC.c: 69: }
  7483                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7484  001994  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7485  001998  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7486                           
  7487                           ;RTC.c: 71: switch(RTC_month){
  7488  00199C  D0B4               	goto	l5632
  7489  00199E                     l5606:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;RTC.c: 73: strcpy(month, "JAN");
  7493  00199E  0EBE               	movlw	low printRTC@month
  7494  0019A0  0100               	movlb	0	; () banked
  7495  0019A2  6F80               	movwf	strcpy@to& (0+255),b
  7496  0019A4  0E00               	movlw	high printRTC@month
  7497  0019A6  0100               	movlb	0	; () banked
  7498  0019A8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7499  0019AA  0EDB               	movlw	low STR_8
  7500  0019AC  0100               	movlb	0	; () banked
  7501  0019AE  6F82               	movwf	strcpy@from& (0+255),b
  7502  0019B0  0EFF               	movlw	high STR_8
  7503  0019B2  0100               	movlb	0	; () banked
  7504  0019B4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7505  0019B6  EC67  F01E         	call	_strcpy	;wreg free
  7506                           
  7507                           ;RTC.c: 74: break;
  7508  0019BA  D0D4               	goto	l5634
  7509  0019BC                     l5608:
  7510                           
  7511                           ;RTC.c: 76: strcpy(month, "FEB");
  7512  0019BC  0EBE               	movlw	low printRTC@month
  7513  0019BE  0100               	movlb	0	; () banked
  7514  0019C0  6F80               	movwf	strcpy@to& (0+255),b
  7515  0019C2  0E00               	movlw	high printRTC@month
  7516  0019C4  0100               	movlb	0	; () banked
  7517  0019C6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7518  0019C8  0ECB               	movlw	low STR_9
  7519  0019CA  0100               	movlb	0	; () banked
  7520  0019CC  6F82               	movwf	strcpy@from& (0+255),b
  7521  0019CE  0EFF               	movlw	high STR_9
  7522  0019D0  0100               	movlb	0	; () banked
  7523  0019D2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7524  0019D4  EC67  F01E         	call	_strcpy	;wreg free
  7525                           
  7526                           ;RTC.c: 77: break;
  7527  0019D8  D0C5               	goto	l5634
  7528  0019DA                     l5610:
  7529                           
  7530                           ;RTC.c: 79: strcpy(month, "MAR");
  7531  0019DA  0EBE               	movlw	low printRTC@month
  7532  0019DC  0100               	movlb	0	; () banked
  7533  0019DE  6F80               	movwf	strcpy@to& (0+255),b
  7534  0019E0  0E00               	movlw	high printRTC@month
  7535  0019E2  0100               	movlb	0	; () banked
  7536  0019E4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7537  0019E6  0EE7               	movlw	low STR_10
  7538  0019E8  0100               	movlb	0	; () banked
  7539  0019EA  6F82               	movwf	strcpy@from& (0+255),b
  7540  0019EC  0EFF               	movlw	high STR_10
  7541  0019EE  0100               	movlb	0	; () banked
  7542  0019F0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7543  0019F2  EC67  F01E         	call	_strcpy	;wreg free
  7544                           
  7545                           ;RTC.c: 80: break;
  7546  0019F6  D0B6               	goto	l5634
  7547  0019F8                     l5612:
  7548                           
  7549                           ;RTC.c: 82: strcpy(month, "APR");
  7550  0019F8  0EBE               	movlw	low printRTC@month
  7551  0019FA  0100               	movlb	0	; () banked
  7552  0019FC  6F80               	movwf	strcpy@to& (0+255),b
  7553  0019FE  0E00               	movlw	high printRTC@month
  7554  001A00  0100               	movlb	0	; () banked
  7555  001A02  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7556  001A04  0EEB               	movlw	low STR_11
  7557  001A06  0100               	movlb	0	; () banked
  7558  001A08  6F82               	movwf	strcpy@from& (0+255),b
  7559  001A0A  0EFF               	movlw	high STR_11
  7560  001A0C  0100               	movlb	0	; () banked
  7561  001A0E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7562  001A10  EC67  F01E         	call	_strcpy	;wreg free
  7563                           
  7564                           ;RTC.c: 83: break;
  7565  001A14  D0A7               	goto	l5634
  7566  001A16                     l5614:
  7567                           
  7568                           ;RTC.c: 85: strcpy(month, "MAY");
  7569  001A16  0EBE               	movlw	low printRTC@month
  7570  001A18  0100               	movlb	0	; () banked
  7571  001A1A  6F80               	movwf	strcpy@to& (0+255),b
  7572  001A1C  0E00               	movlw	high printRTC@month
  7573  001A1E  0100               	movlb	0	; () banked
  7574  001A20  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7575  001A22  0EFB               	movlw	low STR_12
  7576  001A24  0100               	movlb	0	; () banked
  7577  001A26  6F82               	movwf	strcpy@from& (0+255),b
  7578  001A28  0EFF               	movlw	high STR_12
  7579  001A2A  0100               	movlb	0	; () banked
  7580  001A2C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7581  001A2E  EC67  F01E         	call	_strcpy	;wreg free
  7582                           
  7583                           ;RTC.c: 86: break;
  7584  001A32  D098               	goto	l5634
  7585  001A34                     l5616:
  7586                           
  7587                           ;RTC.c: 88: strcpy(month, "JUN");
  7588  001A34  0EBE               	movlw	low printRTC@month
  7589  001A36  0100               	movlb	0	; () banked
  7590  001A38  6F80               	movwf	strcpy@to& (0+255),b
  7591  001A3A  0E00               	movlw	high printRTC@month
  7592  001A3C  0100               	movlb	0	; () banked
  7593  001A3E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7594  001A40  0EDF               	movlw	low STR_13
  7595  001A42  0100               	movlb	0	; () banked
  7596  001A44  6F82               	movwf	strcpy@from& (0+255),b
  7597  001A46  0EFF               	movlw	high STR_13
  7598  001A48  0100               	movlb	0	; () banked
  7599  001A4A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7600  001A4C  EC67  F01E         	call	_strcpy	;wreg free
  7601                           
  7602                           ;RTC.c: 89: break;
  7603  001A50  D089               	goto	l5634
  7604  001A52                     l5618:
  7605                           
  7606                           ;RTC.c: 91: strcpy(month, "JUL");
  7607  001A52  0EBE               	movlw	low printRTC@month
  7608  001A54  0100               	movlb	0	; () banked
  7609  001A56  6F80               	movwf	strcpy@to& (0+255),b
  7610  001A58  0E00               	movlw	high printRTC@month
  7611  001A5A  0100               	movlb	0	; () banked
  7612  001A5C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7613  001A5E  0ED7               	movlw	low STR_14
  7614  001A60  0100               	movlb	0	; () banked
  7615  001A62  6F82               	movwf	strcpy@from& (0+255),b
  7616  001A64  0EFF               	movlw	high STR_14
  7617  001A66  0100               	movlb	0	; () banked
  7618  001A68  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7619  001A6A  EC67  F01E         	call	_strcpy	;wreg free
  7620                           
  7621                           ;RTC.c: 92: break;
  7622  001A6E  D07A               	goto	l5634
  7623  001A70                     l5620:
  7624                           
  7625                           ;RTC.c: 94: strcpy(month, "AUG");
  7626  001A70  0EBE               	movlw	low printRTC@month
  7627  001A72  0100               	movlb	0	; () banked
  7628  001A74  6F80               	movwf	strcpy@to& (0+255),b
  7629  001A76  0E00               	movlw	high printRTC@month
  7630  001A78  0100               	movlb	0	; () banked
  7631  001A7A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7632  001A7C  0ED3               	movlw	low STR_15
  7633  001A7E  0100               	movlb	0	; () banked
  7634  001A80  6F82               	movwf	strcpy@from& (0+255),b
  7635  001A82  0EFF               	movlw	high STR_15
  7636  001A84  0100               	movlb	0	; () banked
  7637  001A86  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7638  001A88  EC67  F01E         	call	_strcpy	;wreg free
  7639                           
  7640                           ;RTC.c: 95: break;
  7641  001A8C  D06B               	goto	l5634
  7642  001A8E                     l5622:
  7643                           
  7644                           ;RTC.c: 97: strcpy(month, "SEP");
  7645  001A8E  0EBE               	movlw	low printRTC@month
  7646  001A90  0100               	movlb	0	; () banked
  7647  001A92  6F80               	movwf	strcpy@to& (0+255),b
  7648  001A94  0E00               	movlw	high printRTC@month
  7649  001A96  0100               	movlb	0	; () banked
  7650  001A98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7651  001A9A  0EE3               	movlw	low STR_16
  7652  001A9C  0100               	movlb	0	; () banked
  7653  001A9E  6F82               	movwf	strcpy@from& (0+255),b
  7654  001AA0  0EFF               	movlw	high STR_16
  7655  001AA2  0100               	movlb	0	; () banked
  7656  001AA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7657  001AA6  EC67  F01E         	call	_strcpy	;wreg free
  7658                           
  7659                           ;RTC.c: 98: break;
  7660  001AAA  D05C               	goto	l5634
  7661  001AAC                     l5624:
  7662                           
  7663                           ;RTC.c: 100: strcpy(month, "OCT");
  7664  001AAC  0EBE               	movlw	low printRTC@month
  7665  001AAE  0100               	movlb	0	; () banked
  7666  001AB0  6F80               	movwf	strcpy@to& (0+255),b
  7667  001AB2  0E00               	movlw	high printRTC@month
  7668  001AB4  0100               	movlb	0	; () banked
  7669  001AB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7670  001AB8  0EF3               	movlw	low STR_17
  7671  001ABA  0100               	movlb	0	; () banked
  7672  001ABC  6F82               	movwf	strcpy@from& (0+255),b
  7673  001ABE  0EFF               	movlw	high STR_17
  7674  001AC0  0100               	movlb	0	; () banked
  7675  001AC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7676  001AC4  EC67  F01E         	call	_strcpy	;wreg free
  7677                           
  7678                           ;RTC.c: 101: break;
  7679  001AC8  D04D               	goto	l5634
  7680  001ACA                     l5626:
  7681                           
  7682                           ;RTC.c: 103: strcpy(month, "NOV");
  7683  001ACA  0EBE               	movlw	low printRTC@month
  7684  001ACC  0100               	movlb	0	; () banked
  7685  001ACE  6F80               	movwf	strcpy@to& (0+255),b
  7686  001AD0  0E00               	movlw	high printRTC@month
  7687  001AD2  0100               	movlb	0	; () banked
  7688  001AD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7689  001AD6  0EF7               	movlw	low STR_18
  7690  001AD8  0100               	movlb	0	; () banked
  7691  001ADA  6F82               	movwf	strcpy@from& (0+255),b
  7692  001ADC  0EFF               	movlw	high STR_18
  7693  001ADE  0100               	movlb	0	; () banked
  7694  001AE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7695  001AE2  EC67  F01E         	call	_strcpy	;wreg free
  7696                           
  7697                           ;RTC.c: 104: break;
  7698  001AE6  D03E               	goto	l5634
  7699  001AE8                     l5628:
  7700                           
  7701                           ;RTC.c: 106: strcpy(month, "DEC");
  7702  001AE8  0EBE               	movlw	low printRTC@month
  7703  001AEA  0100               	movlb	0	; () banked
  7704  001AEC  6F80               	movwf	strcpy@to& (0+255),b
  7705  001AEE  0E00               	movlw	high printRTC@month
  7706  001AF0  0100               	movlb	0	; () banked
  7707  001AF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7708  001AF4  0ECF               	movlw	low STR_19
  7709  001AF6  0100               	movlb	0	; () banked
  7710  001AF8  6F82               	movwf	strcpy@from& (0+255),b
  7711  001AFA  0EFF               	movlw	high STR_19
  7712  001AFC  0100               	movlb	0	; () banked
  7713  001AFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7714  001B00  EC67  F01E         	call	_strcpy	;wreg free
  7715                           
  7716                           ;RTC.c: 108: }
  7717                           
  7718                           ;RTC.c: 107: break;
  7719  001B04  D02F               	goto	l5634
  7720  001B06                     l5632:
  7721  001B06  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7722  001B0A  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7723                           
  7724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7725                           ; Switch size 1, requested type "space"
  7726                           ; Number of cases is 1, Range of values is 0 to 0
  7727                           ; switch strategies available:
  7728                           ; Name         Instructions Cycles
  7729                           ; simple_byte            4     3 (average)
  7730                           ;	Chosen strategy is simple_byte
  7731  001B0E  0100               	movlb	0	; () banked
  7732  001B10  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7733  001B12  0A00               	xorlw	0	; case 0
  7734  001B14  A4D8               	btfss	status,2,c
  7735  001B16  D026               	goto	l5634
  7736                           
  7737                           ; BSR set to: 0
  7738                           ; Switch size 1, requested type "space"
  7739                           ; Number of cases is 12, Range of values is 1 to 12
  7740                           ; switch strategies available:
  7741                           ; Name         Instructions Cycles
  7742                           ; simple_byte           37    19 (average)
  7743                           ;	Chosen strategy is simple_byte
  7744  001B18  0100               	movlb	0	; () banked
  7745  001B1A  51AB               	movf	??_printRTC& (0+255),w,b
  7746  001B1C  0A01               	xorlw	1	; case 1
  7747  001B1E  B4D8               	btfsc	status,2,c
  7748  001B20  D73E               	goto	l5606
  7749  001B22  0A03               	xorlw	3	; case 2
  7750  001B24  B4D8               	btfsc	status,2,c
  7751  001B26  D74A               	goto	l5608
  7752  001B28  0A01               	xorlw	1	; case 3
  7753  001B2A  B4D8               	btfsc	status,2,c
  7754  001B2C  D756               	goto	l5610
  7755  001B2E  0A07               	xorlw	7	; case 4
  7756  001B30  B4D8               	btfsc	status,2,c
  7757  001B32  D762               	goto	l5612
  7758  001B34  0A01               	xorlw	1	; case 5
  7759  001B36  B4D8               	btfsc	status,2,c
  7760  001B38  D76E               	goto	l5614
  7761  001B3A  0A03               	xorlw	3	; case 6
  7762  001B3C  B4D8               	btfsc	status,2,c
  7763  001B3E  D77A               	goto	l5616
  7764  001B40  0A01               	xorlw	1	; case 7
  7765  001B42  B4D8               	btfsc	status,2,c
  7766  001B44  D786               	goto	l5618
  7767  001B46  0A0F               	xorlw	15	; case 8
  7768  001B48  B4D8               	btfsc	status,2,c
  7769  001B4A  D792               	goto	l5620
  7770  001B4C  0A01               	xorlw	1	; case 9
  7771  001B4E  B4D8               	btfsc	status,2,c
  7772  001B50  D79E               	goto	l5622
  7773  001B52  0A03               	xorlw	3	; case 10
  7774  001B54  B4D8               	btfsc	status,2,c
  7775  001B56  D7AA               	goto	l5624
  7776  001B58  0A01               	xorlw	1	; case 11
  7777  001B5A  B4D8               	btfsc	status,2,c
  7778  001B5C  D7B6               	goto	l5626
  7779  001B5E  0A07               	xorlw	7	; case 12
  7780  001B60  B4D8               	btfsc	status,2,c
  7781  001B62  D7C2               	goto	l5628
  7782  001B64                     l5634:
  7783                           
  7784                           ;RTC.c: 109: lcdInst(0b10000000);;
  7785  001B64  0E80               	movlw	128
  7786  001B66  ECE2  F020         	call	_lcdInst
  7787                           
  7788                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7789  001B6A  0E54               	movlw	low STR_21
  7790  001B6C  0100               	movlb	0	; () banked
  7791  001B6E  6F8E               	movwf	printf@f& (0+255),b
  7792  001B70  0EFB               	movlw	high STR_21
  7793  001B72  0100               	movlb	0	; () banked
  7794  001B74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7795  001B76  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7796  001B7A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7797  001B7E  0EBE               	movlw	low printRTC@month
  7798  001B80  0100               	movlb	0	; () banked
  7799  001B82  6F92               	movwf	(?_printf+4)& (0+255),b
  7800  001B84  0E00               	movlw	high printRTC@month
  7801  001B86  0100               	movlb	0	; () banked
  7802  001B88  6F93               	movwf	(?_printf+5)& (0+255),b
  7803  001B8A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7804  001B8E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7805  001B92  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7806  001B96  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7807  001B9A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7808  001B9E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7809  001BA2  EC9C  F008         	call	_printf	;wreg free
  7810  001BA6  0012               	return		;funcret
  7811  001BA8                     __end_of_printRTC:
  7812                           	opt stack 0
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           intcon	equ	0xFF2
  7820                           intcon2	equ	0xFF1
  7821                           intcon3	equ	0xFF0
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           postdec1	equ	0xFE5
  7825                           fsr1l	equ	0xFE1
  7826                           indf2	equ	0xFDF
  7827                           postinc2	equ	0xFDE
  7828                           postdec2	equ	0xFDD
  7829                           fsr2h	equ	0xFDA
  7830                           fsr2l	equ	0xFD9
  7831                           status	equ	0xFD8
  7832                           
  7833 ;; *************** function _strcpy *****************
  7834 ;; Defined at:
  7835 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7838 ;;		 -> printRTC@month(4), UI@month(4), 
  7839 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7840 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7841 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7842 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7843 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7844 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7845 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7846 ;;		 -> STR_8(4), 
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7849 ;;		 -> printRTC@month(4), UI@month(4), 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  2    0[BANK0 ] PTR unsigned char 
  7852 ;; Registers used:
  7853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;Total ram usage:        6 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    7
  7866 ;; This function calls:
  7867 ;;		Nothing
  7868 ;; This function is called by:
  7869 ;;		_UI
  7870 ;;		_printRTC
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text23
  7875  003CCE                     __ptext23:
  7876                           	opt stack 0
  7877  003CCE                     _strcpy:
  7878                           	opt stack 20
  7879                           
  7880                           ;incstack = 0
  7881  003CCE  C080  F084         	movff	strcpy@to,strcpy@cp
  7882  003CD2  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7883  003CD6  D006               	goto	l5338
  7884  003CD8                     l5336:
  7885  003CD8  0100               	movlb	0	; () banked
  7886  003CDA  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7887  003CDC  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7888  003CDE  0100               	movlb	0	; () banked
  7889  003CE0  4B82               	infsnz	strcpy@from& (0+255),f,b
  7890  003CE2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7891  003CE4                     l5338:
  7892  003CE4  C082  FFF6         	movff	strcpy@from,tblptrl
  7893  003CE8  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7894  003CEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7895  003CEC  6AF8               	clrf	tblptru,c
  7896  003CEE                     	endif
  7897  003CEE                     	if	0	;tblptru may be non-zero
  7898  003CEE                     	endif
  7899  003CEE  C084  FFD9         	movff	strcpy@cp,fsr2l
  7900  003CF2  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7901  003CF6  0008               	tblrd		*
  7902  003CF8  CFF5 FFDF          	movff	tablat,indf2
  7903  003CFC  50DF               	movf	indf2,w,c
  7904  003CFE  B4D8               	btfsc	status,2,c
  7905  003D00  0012               	return	
  7906  003D02  D7EA               	goto	l5336
  7907  003D04                     __end_of_strcpy:
  7908                           	opt stack 0
  7909                           tblptru	equ	0xFF8
  7910                           tblptrh	equ	0xFF7
  7911                           tblptrl	equ	0xFF6
  7912                           tablat	equ	0xFF5
  7913                           prodh	equ	0xFF4
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           intcon2	equ	0xFF1
  7917                           intcon3	equ	0xFF0
  7918                           postinc0	equ	0xFEE
  7919                           wreg	equ	0xFE8
  7920                           postdec1	equ	0xFE5
  7921                           fsr1l	equ	0xFE1
  7922                           indf2	equ	0xFDF
  7923                           postinc2	equ	0xFDE
  7924                           postdec2	equ	0xFDD
  7925                           fsr2h	equ	0xFDA
  7926                           fsr2l	equ	0xFD9
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function _getRTC *****************
  7930 ;; Defined at:
  7931 ;;		line 44 in file "RTC.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  i               2    3[BANK0 ] int 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      void 
  7938 ;; Registers used:
  7939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;Total ram usage:        2 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    9
  7952 ;; This function calls:
  7953 ;;		_I2C_Master_Read
  7954 ;;		_I2C_Master_Start
  7955 ;;		_I2C_Master_Stop
  7956 ;;		_I2C_Master_Write
  7957 ;; This function is called by:
  7958 ;;		_printRTC
  7959 ;;		_initSortTimer
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text24
  7964  00353C                     __ptext24:
  7965                           	opt stack 0
  7966  00353C                     _getRTC:
  7967                           	opt stack 18
  7968                           
  7969                           ;RTC.c: 48: I2C_Master_Start();
  7970                           
  7971                           ;incstack = 0
  7972  00353C  EC08  F021         	call	_I2C_Master_Start	;wreg free
  7973                           
  7974                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7975  003540  0E00               	movlw	0
  7976  003542  0100               	movlb	0	; () banked
  7977  003544  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7978  003546  0ED0               	movlw	208
  7979  003548  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7980  00354A  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  7981                           
  7982                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7983  00354E  0E00               	movlw	0
  7984  003550  0100               	movlb	0	; () banked
  7985  003552  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7986  003554  0E00               	movlw	0
  7987  003556  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7988  003558  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  7989                           
  7990                           ;RTC.c: 51: I2C_Master_Stop();
  7991  00355C  EC04  F021         	call	_I2C_Master_Stop	;wreg free
  7992                           
  7993                           ;RTC.c: 54: I2C_Master_Start();
  7994  003560  EC08  F021         	call	_I2C_Master_Start	;wreg free
  7995                           
  7996                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7997  003564  0E00               	movlw	0
  7998  003566  0100               	movlb	0	; () banked
  7999  003568  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8000  00356A  0ED1               	movlw	209
  8001  00356C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8002  00356E  ECF6  F020         	call	_I2C_Master_Write	;wreg free
  8003                           
  8004                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8005  003572  0E00               	movlw	0
  8006  003574  0100               	movlb	0	; () banked
  8007  003576  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8008  003578  0E00               	movlw	0
  8009  00357A  6F83               	movwf	getRTC@i& (0+255),b
  8010  00357C                     l5344:
  8011                           
  8012                           ; BSR set to: 0
  8013  00357C  0100               	movlb	0	; () banked
  8014  00357E  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8015  003580  D008               	goto	l5348
  8016  003582  0100               	movlb	0	; () banked
  8017  003584  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8018  003586  E115               	bnz	l5354
  8019  003588  0E06               	movlw	6
  8020  00358A  0100               	movlb	0	; () banked
  8021  00358C  5D83               	subwf	getRTC@i& (0+255),w,b
  8022  00358E  B0D8               	btfsc	status,0,c
  8023  003590  D010               	goto	l5354
  8024  003592                     l5348:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8028  003592  0E24               	movlw	low _time
  8029  003594  0100               	movlb	0	; () banked
  8030  003596  2583               	addwf	getRTC@i& (0+255),w,b
  8031  003598  6ED9               	movwf	fsr2l,c
  8032  00359A  0E01               	movlw	high _time
  8033  00359C  0100               	movlb	0	; () banked
  8034  00359E  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8035  0035A0  6EDA               	movwf	fsr2h,c
  8036  0035A2  0E01               	movlw	1
  8037  0035A4  ECA7  F01F         	call	_I2C_Master_Read
  8038  0035A8  6EDF               	movwf	indf2,c
  8039  0035AA  0100               	movlb	0	; () banked
  8040  0035AC  4B83               	infsnz	getRTC@i& (0+255),f,b
  8041  0035AE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8042  0035B0  D7E5               	goto	l5344
  8043  0035B2                     l5354:
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;RTC.c: 58: }
  8047                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8048  0035B2  0E00               	movlw	0
  8049  0035B4  ECA7  F01F         	call	_I2C_Master_Read
  8050  0035B8  0101               	movlb	1	; () banked
  8051  0035BA  6F2A               	movwf	(_time+6)& (0+255),b
  8052                           
  8053                           ;RTC.c: 60: I2C_Master_Stop();
  8054  0035BC  EC04  F021         	call	_I2C_Master_Stop	;wreg free
  8055  0035C0  0012               	return		;funcret
  8056  0035C2                     __end_of_getRTC:
  8057                           	opt stack 0
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           intcon2	equ	0xFF1
  8066                           intcon3	equ	0xFF0
  8067                           postinc0	equ	0xFEE
  8068                           wreg	equ	0xFE8
  8069                           postdec1	equ	0xFE5
  8070                           fsr1l	equ	0xFE1
  8071                           indf2	equ	0xFDF
  8072                           postinc2	equ	0xFDE
  8073                           postdec2	equ	0xFDD
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078 ;; *************** function _I2C_Master_Write *****************
  8079 ;; Defined at:
  8080 ;;		line 49 in file "I2C.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  d               2    1[BANK0 ] unsigned int 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;		None
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  1    wreg      void 
  8087 ;; Registers used:
  8088 ;;		wreg, status,2, status,0, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;Total ram usage:        2 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    8
  8101 ;; This function calls:
  8102 ;;		_I2C_Master_Wait
  8103 ;; This function is called by:
  8104 ;;		_loadRTC
  8105 ;;		_getRTC
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text25
  8110  0041EC                     __ptext25:
  8111                           	opt stack 0
  8112  0041EC                     _I2C_Master_Write:
  8113                           	opt stack 18
  8114                           
  8115                           ;I2C.c: 51: I2C_Master_Wait();
  8116                           
  8117                           ;incstack = 0
  8118  0041EC  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8119                           
  8120                           ;I2C.c: 52: SSPBUF = d;
  8121  0041F0  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8122  0041F4  0012               	return		;funcret
  8123  0041F6                     __end_of_I2C_Master_Write:
  8124                           	opt stack 0
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           intcon2	equ	0xFF1
  8133                           intcon3	equ	0xFF0
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           postdec1	equ	0xFE5
  8137                           fsr1l	equ	0xFE1
  8138                           indf2	equ	0xFDF
  8139                           postinc2	equ	0xFDE
  8140                           postdec2	equ	0xFDD
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _I2C_Master_Stop *****************
  8146 ;; Defined at:
  8147 ;;		line 43 in file "I2C.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      void 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;Total ram usage:        0 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    8
  8168 ;; This function calls:
  8169 ;;		_I2C_Master_Wait
  8170 ;; This function is called by:
  8171 ;;		_loadRTC
  8172 ;;		_getRTC
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text26
  8177  004208                     __ptext26:
  8178                           	opt stack 0
  8179  004208                     _I2C_Master_Stop:
  8180                           	opt stack 18
  8181                           
  8182                           ;I2C.c: 45: I2C_Master_Wait();
  8183                           
  8184                           ;incstack = 0
  8185  004208  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8186                           
  8187                           ;I2C.c: 46: PEN = 1;
  8188  00420C  84C5               	bsf	4037,2,c	;volatile
  8189  00420E  0012               	return		;funcret
  8190  004210                     __end_of_I2C_Master_Stop:
  8191                           	opt stack 0
  8192                           tblptru	equ	0xFF8
  8193                           tblptrh	equ	0xFF7
  8194                           tblptrl	equ	0xFF6
  8195                           tablat	equ	0xFF5
  8196                           prodh	equ	0xFF4
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon2	equ	0xFF1
  8200                           intcon3	equ	0xFF0
  8201                           postinc0	equ	0xFEE
  8202                           wreg	equ	0xFE8
  8203                           postdec1	equ	0xFE5
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _I2C_Master_Start *****************
  8213 ;; Defined at:
  8214 ;;		line 31 in file "I2C.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2, status,0, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;Total ram usage:        0 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    8
  8235 ;; This function calls:
  8236 ;;		_I2C_Master_Wait
  8237 ;; This function is called by:
  8238 ;;		_loadRTC
  8239 ;;		_getRTC
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text27
  8244  004210                     __ptext27:
  8245                           	opt stack 0
  8246  004210                     _I2C_Master_Start:
  8247                           	opt stack 18
  8248                           
  8249                           ;I2C.c: 33: I2C_Master_Wait();
  8250                           
  8251                           ;incstack = 0
  8252  004210  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8253                           
  8254                           ;I2C.c: 34: SEN = 1;
  8255  004214  80C5               	bsf	4037,0,c	;volatile
  8256  004216  0012               	return		;funcret
  8257  004218                     __end_of_I2C_Master_Start:
  8258                           	opt stack 0
  8259                           tblptru	equ	0xFF8
  8260                           tblptrh	equ	0xFF7
  8261                           tblptrl	equ	0xFF6
  8262                           tablat	equ	0xFF5
  8263                           prodh	equ	0xFF4
  8264                           prodl	equ	0xFF3
  8265                           intcon	equ	0xFF2
  8266                           intcon2	equ	0xFF1
  8267                           intcon3	equ	0xFF0
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           postdec1	equ	0xFE5
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _I2C_Master_Read *****************
  8280 ;; Defined at:
  8281 ;;		line 55 in file "I2C.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  a               1    wreg     unsigned char 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  a               1    1[BANK0 ] unsigned char 
  8286 ;;  temp            1    2[BANK0 ] unsigned char 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      unsigned char 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;Total ram usage:        2 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    8
  8303 ;; This function calls:
  8304 ;;		_I2C_Master_Wait
  8305 ;; This function is called by:
  8306 ;;		_getRTC
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text28
  8311  003F4E                     __ptext28:
  8312                           	opt stack 0
  8313  003F4E                     _I2C_Master_Read:
  8314                           	opt stack 18
  8315                           
  8316                           ;incstack = 0
  8317                           ;I2C_Master_Read@a stored from wreg
  8318  003F4E  0100               	movlb	0	; () banked
  8319  003F50  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8320                           
  8321                           ;I2C.c: 57: unsigned char temp;
  8322                           ;I2C.c: 58: I2C_Master_Wait();
  8323  003F52  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8324                           
  8325                           ;I2C.c: 59: RCEN = 1;
  8326  003F56  86C5               	bsf	4037,3,c	;volatile
  8327                           
  8328                           ;I2C.c: 60: I2C_Master_Wait();
  8329  003F58  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8330                           
  8331                           ;I2C.c: 61: temp = SSPBUF;
  8332  003F5C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8333                           
  8334                           ;I2C.c: 62: I2C_Master_Wait();
  8335  003F60  ECC7  F020         	call	_I2C_Master_Wait	;wreg free
  8336                           
  8337                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8338  003F64  0100               	movlb	0	; () banked
  8339  003F66  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8340  003F68  0100               	movlb	0	; () banked
  8341  003F6A  A4D8               	btfss	status,2,c
  8342  003F6C  D002               	goto	u3410
  8343  003F6E  8AC5               	bsf	4037,5,c	;volatile
  8344  003F70  D001               	goto	l5038
  8345  003F72                     u3410:
  8346  003F72  9AC5               	bcf	4037,5,c	;volatile
  8347  003F74                     l5038:
  8348                           
  8349                           ;I2C.c: 64: ACKEN = 1;
  8350  003F74  88C5               	bsf	4037,4,c	;volatile
  8351                           
  8352                           ;I2C.c: 65: return temp;
  8353  003F76  0100               	movlb	0	; () banked
  8354  003F78  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8355  003F7A  0012               	return	
  8356  003F7C                     __end_of_I2C_Master_Read:
  8357                           	opt stack 0
  8358                           tblptru	equ	0xFF8
  8359                           tblptrh	equ	0xFF7
  8360                           tblptrl	equ	0xFF6
  8361                           tablat	equ	0xFF5
  8362                           prodh	equ	0xFF4
  8363                           prodl	equ	0xFF3
  8364                           intcon	equ	0xFF2
  8365                           intcon2	equ	0xFF1
  8366                           intcon3	equ	0xFF0
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           postdec1	equ	0xFE5
  8370                           fsr1l	equ	0xFE1
  8371                           indf2	equ	0xFDF
  8372                           postinc2	equ	0xFDE
  8373                           postdec2	equ	0xFDD
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function _I2C_Master_Wait *****************
  8379 ;; Defined at:
  8380 ;;		line 26 in file "I2C.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;		None
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;		None
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  1    wreg      void 
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;Total ram usage:        1 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    7
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_I2C_Master_Start
  8405 ;;		_I2C_Master_Stop
  8406 ;;		_I2C_Master_Write
  8407 ;;		_I2C_Master_Read
  8408 ;;		_I2C_Master_RepeatedStart
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           	psect	text29
  8413  00418E                     __ptext29:
  8414                           	opt stack 0
  8415  00418E                     _I2C_Master_Wait:
  8416                           	opt stack 18
  8417  00418E                     l66:
  8418  00418E  B4C7               	btfsc	4039,2,c	;volatile
  8419  004190  D7FE               	goto	l66
  8420  004192  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8421  004196  0E1F               	movlw	31
  8422  004198  0100               	movlb	0	; () banked
  8423  00419A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8424  00419C  B4D8               	btfsc	status,2,c
  8425  00419E  0012               	return	
  8426  0041A0  D7F6               	goto	l66
  8427  0041A2                     __end_of_I2C_Master_Wait:
  8428                           	opt stack 0
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon	equ	0xFF2
  8436                           intcon2	equ	0xFF1
  8437                           intcon3	equ	0xFF0
  8438                           postinc0	equ	0xFEE
  8439                           wreg	equ	0xFE8
  8440                           postdec1	equ	0xFE5
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _change_state_to_menu_22 *****************
  8450 ;; Defined at:
  8451 ;;		line 496 in file "UI.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;		None
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  1    wreg      void 
  8458 ;; Registers used:
  8459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;Total ram usage:        0 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:   10
  8472 ;; This function calls:
  8473 ;;		_lcdInst
  8474 ;;		_printf
  8475 ;; This function is called by:
  8476 ;;		_UI
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text30
  8481  003C5E                     __ptext30:
  8482                           	opt stack 0
  8483  003C5E                     _change_state_to_menu_22:
  8484                           	opt stack 19
  8485                           
  8486                           ;UI.c: 497: cur_state = 22;
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;incstack = 0
  8490  003C5E  0E00               	movlw	0
  8491  003C60  0100               	movlb	0	; () banked
  8492  003C62  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8493  003C64  0E16               	movlw	22
  8494  003C66  6FDE               	movwf	_cur_state& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;UI.c: 499: lcdInst(0b10000000);;
  8498  003C68  0E80               	movlw	128
  8499  003C6A  ECE2  F020         	call	_lcdInst
  8500                           
  8501                           ;UI.c: 500: printf("2. SORT        <");
  8502  003C6E  0EED               	movlw	low STR_34
  8503  003C70  0100               	movlb	0	; () banked
  8504  003C72  6F8E               	movwf	printf@f& (0+255),b
  8505  003C74  0EFD               	movlw	high STR_34
  8506  003C76  0100               	movlb	0	; () banked
  8507  003C78  6F8F               	movwf	(printf@f+1)& (0+255),b
  8508  003C7A  EC9C  F008         	call	_printf	;wreg free
  8509                           
  8510                           ;UI.c: 501: lcdInst(0b11000000);;
  8511  003C7E  0EC0               	movlw	192
  8512  003C80  ECE2  F020         	call	_lcdInst
  8513                           
  8514                           ;UI.c: 502: printf("3. LOGS         ");
  8515  003C84  0E32               	movlw	low STR_36
  8516  003C86  0100               	movlb	0	; () banked
  8517  003C88  6F8E               	movwf	printf@f& (0+255),b
  8518  003C8A  0EFD               	movlw	high STR_36
  8519  003C8C  0100               	movlb	0	; () banked
  8520  003C8E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8521  003C90  EC9C  F008         	call	_printf	;wreg free
  8522  003C94  0012               	return		;funcret
  8523  003C96                     __end_of_change_state_to_menu_22:
  8524                           	opt stack 0
  8525                           tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           intcon	equ	0xFF2
  8532                           intcon2	equ	0xFF1
  8533                           intcon3	equ	0xFF0
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           postdec1	equ	0xFE5
  8537                           fsr1l	equ	0xFE1
  8538                           indf2	equ	0xFDF
  8539                           postinc2	equ	0xFDE
  8540                           postdec2	equ	0xFDD
  8541                           fsr2h	equ	0xFDA
  8542                           fsr2l	equ	0xFD9
  8543                           status	equ	0xFD8
  8544                           
  8545 ;; *************** function _change_state_to_menu_12 *****************
  8546 ;; Defined at:
  8547 ;;		line 488 in file "UI.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;		None
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;		None
  8552 ;; Return value:  Size  Location     Type
  8553 ;;                  1    wreg      void 
  8554 ;; Registers used:
  8555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8556 ;; Tracked objects:
  8557 ;;		On entry : 0/0
  8558 ;;		On exit  : 0/0
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;Total ram usage:        0 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:   10
  8568 ;; This function calls:
  8569 ;;		_lcdInst
  8570 ;;		_printf
  8571 ;; This function is called by:
  8572 ;;		_UI
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text31
  8577  003C96                     __ptext31:
  8578                           	opt stack 0
  8579  003C96                     _change_state_to_menu_12:
  8580                           	opt stack 19
  8581                           
  8582                           ;UI.c: 489: cur_state = 12;
  8583                           
  8584                           ;incstack = 0
  8585  003C96  0E00               	movlw	0
  8586  003C98  0100               	movlb	0	; () banked
  8587  003C9A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8588  003C9C  0E0C               	movlw	12
  8589  003C9E  6FDE               	movwf	_cur_state& (0+255),b
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;UI.c: 491: lcdInst(0b10000000);;
  8593  003CA0  0E80               	movlw	128
  8594  003CA2  ECE2  F020         	call	_lcdInst
  8595                           
  8596                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8597  003CA6  0E54               	movlw	low STR_33
  8598  003CA8  0100               	movlb	0	; () banked
  8599  003CAA  6F8E               	movwf	printf@f& (0+255),b
  8600  003CAC  0EFD               	movlw	high STR_33
  8601  003CAE  0100               	movlb	0	; () banked
  8602  003CB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8603  003CB2  EC9C  F008         	call	_printf	;wreg free
  8604                           
  8605                           ;UI.c: 493: lcdInst(0b11000000);;
  8606  003CB6  0EC0               	movlw	192
  8607  003CB8  ECE2  F020         	call	_lcdInst
  8608                           
  8609                           ;UI.c: 494: printf("2. SORT        <");
  8610  003CBC  0EED               	movlw	low STR_34
  8611  003CBE  0100               	movlb	0	; () banked
  8612  003CC0  6F8E               	movwf	printf@f& (0+255),b
  8613  003CC2  0EFD               	movlw	high STR_34
  8614  003CC4  0100               	movlb	0	; () banked
  8615  003CC6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8616  003CC8  EC9C  F008         	call	_printf	;wreg free
  8617  003CCC  0012               	return		;funcret
  8618  003CCE                     __end_of_change_state_to_menu_12:
  8619                           	opt stack 0
  8620                           tblptru	equ	0xFF8
  8621                           tblptrh	equ	0xFF7
  8622                           tblptrl	equ	0xFF6
  8623                           tablat	equ	0xFF5
  8624                           prodh	equ	0xFF4
  8625                           prodl	equ	0xFF3
  8626                           intcon	equ	0xFF2
  8627                           intcon2	equ	0xFF1
  8628                           intcon3	equ	0xFF0
  8629                           postinc0	equ	0xFEE
  8630                           wreg	equ	0xFE8
  8631                           postdec1	equ	0xFE5
  8632                           fsr1l	equ	0xFE1
  8633                           indf2	equ	0xFDF
  8634                           postinc2	equ	0xFDE
  8635                           postdec2	equ	0xFDD
  8636                           fsr2h	equ	0xFDA
  8637                           fsr2l	equ	0xFD9
  8638                           status	equ	0xFD8
  8639                           
  8640 ;; *************** function ___awmod *****************
  8641 ;; Defined at:
  8642 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;  dividend        2    0[BANK0 ] int 
  8645 ;;  divisor         2    2[BANK0 ] int 
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;  sign            1    5[BANK0 ] unsigned char 
  8648 ;;  counter         1    4[BANK0 ] unsigned char 
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  2    0[BANK0 ] int 
  8651 ;; Registers used:
  8652 ;;		wreg, status,2, status,0
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;Total ram usage:        6 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; Hardware stack levels required when called:    7
  8665 ;; This function calls:
  8666 ;;		Nothing
  8667 ;; This function is called by:
  8668 ;;		_UI
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           	psect	text32
  8673  0032F0                     __ptext32:
  8674                           	opt stack 0
  8675  0032F0                     ___awmod:
  8676                           	opt stack 22
  8677                           
  8678                           ;incstack = 0
  8679  0032F0  0E00               	movlw	0
  8680  0032F2  0100               	movlb	0	; () banked
  8681  0032F4  6F85               	movwf	___awmod@sign& (0+255),b
  8682                           
  8683                           ; BSR set to: 0
  8684  0032F6  0100               	movlb	0	; () banked
  8685  0032F8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8686  0032FA  D008               	goto	l6928
  8687                           
  8688                           ; BSR set to: 0
  8689  0032FC  0100               	movlb	0	; () banked
  8690  0032FE  6D80               	negf	___awmod@dividend& (0+255),b
  8691  003300  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8692  003302  B0D8               	btfsc	status,0,c
  8693  003304  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8694                           
  8695                           ; BSR set to: 0
  8696  003306  0E01               	movlw	1
  8697  003308  0100               	movlb	0	; () banked
  8698  00330A  6F85               	movwf	___awmod@sign& (0+255),b
  8699  00330C                     l6928:
  8700                           
  8701                           ; BSR set to: 0
  8702  00330C  0100               	movlb	0	; () banked
  8703  00330E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8704  003310  D005               	goto	l6932
  8705                           
  8706                           ; BSR set to: 0
  8707  003312  0100               	movlb	0	; () banked
  8708  003314  6D82               	negf	___awmod@divisor& (0+255),b
  8709  003316  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8710  003318  B0D8               	btfsc	status,0,c
  8711  00331A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8712  00331C                     l6932:
  8713                           
  8714                           ; BSR set to: 0
  8715  00331C  0100               	movlb	0	; () banked
  8716  00331E  5182               	movf	___awmod@divisor& (0+255),w,b
  8717  003320  0100               	movlb	0	; () banked
  8718  003322  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8719  003324  B4D8               	btfsc	status,2,c
  8720  003326  D026               	goto	l6948
  8721                           
  8722                           ; BSR set to: 0
  8723  003328  0E01               	movlw	1
  8724  00332A  0100               	movlb	0	; () banked
  8725  00332C  6F84               	movwf	___awmod@counter& (0+255),b
  8726  00332E  D006               	goto	l6938
  8727  003330                     l6936:
  8728                           
  8729                           ; BSR set to: 0
  8730  003330  0100               	movlb	0	; () banked
  8731  003332  90D8               	bcf	status,0,c
  8732  003334  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8733  003336  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8734  003338  0100               	movlb	0	; () banked
  8735  00333A  2B84               	incf	___awmod@counter& (0+255),f,b
  8736  00333C                     l6938:
  8737                           
  8738                           ; BSR set to: 0
  8739  00333C  0100               	movlb	0	; () banked
  8740  00333E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8741  003340  D7F7               	goto	l6936
  8742  003342                     l6940:
  8743                           
  8744                           ; BSR set to: 0
  8745  003342  0100               	movlb	0	; () banked
  8746  003344  5182               	movf	___awmod@divisor& (0+255),w,b
  8747  003346  0100               	movlb	0	; () banked
  8748  003348  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8749  00334A  0100               	movlb	0	; () banked
  8750  00334C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8751  00334E  0100               	movlb	0	; () banked
  8752  003350  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8753  003352  A0D8               	btfss	status,0,c
  8754  003354  D008               	goto	l6944
  8755                           
  8756                           ; BSR set to: 0
  8757  003356  0100               	movlb	0	; () banked
  8758  003358  5182               	movf	___awmod@divisor& (0+255),w,b
  8759  00335A  0100               	movlb	0	; () banked
  8760  00335C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8761  00335E  0100               	movlb	0	; () banked
  8762  003360  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8763  003362  0100               	movlb	0	; () banked
  8764  003364  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8765  003366                     l6944:
  8766                           
  8767                           ; BSR set to: 0
  8768  003366  0100               	movlb	0	; () banked
  8769  003368  90D8               	bcf	status,0,c
  8770  00336A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8771  00336C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8772                           
  8773                           ; BSR set to: 0
  8774  00336E  0100               	movlb	0	; () banked
  8775  003370  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8776  003372  D7E7               	goto	l6940
  8777  003374                     l6948:
  8778                           
  8779                           ; BSR set to: 0
  8780  003374  0100               	movlb	0	; () banked
  8781  003376  5185               	movf	___awmod@sign& (0+255),w,b
  8782  003378  0100               	movlb	0	; () banked
  8783  00337A  B4D8               	btfsc	status,2,c
  8784  00337C  D005               	goto	l6952
  8785                           
  8786                           ; BSR set to: 0
  8787  00337E  0100               	movlb	0	; () banked
  8788  003380  6D80               	negf	___awmod@dividend& (0+255),b
  8789  003382  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8790  003384  B0D8               	btfsc	status,0,c
  8791  003386  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8792  003388                     l6952:
  8793                           
  8794                           ; BSR set to: 0
  8795  003388  C080  F080         	movff	___awmod@dividend,?___awmod
  8796  00338C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8797  003390  0012               	return	
  8798  003392                     __end_of___awmod:
  8799                           	opt stack 0
  8800                           tblptru	equ	0xFF8
  8801                           tblptrh	equ	0xFF7
  8802                           tblptrl	equ	0xFF6
  8803                           tablat	equ	0xFF5
  8804                           prodh	equ	0xFF4
  8805                           prodl	equ	0xFF3
  8806                           intcon	equ	0xFF2
  8807                           intcon2	equ	0xFF1
  8808                           intcon3	equ	0xFF0
  8809                           postinc0	equ	0xFEE
  8810                           wreg	equ	0xFE8
  8811                           postdec1	equ	0xFE5
  8812                           fsr1l	equ	0xFE1
  8813                           indf2	equ	0xFDF
  8814                           postinc2	equ	0xFDE
  8815                           postdec2	equ	0xFDD
  8816                           fsr2h	equ	0xFDA
  8817                           fsr2l	equ	0xFD9
  8818                           status	equ	0xFD8
  8819                           
  8820 ;; *************** function ___awdiv *****************
  8821 ;; Defined at:
  8822 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  dividend        2    6[BANK0 ] int 
  8825 ;;  divisor         2    8[BANK0 ] int 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  quotient        2   12[BANK0 ] int 
  8828 ;;  sign            1   11[BANK0 ] unsigned char 
  8829 ;;  counter         1   10[BANK0 ] unsigned char 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  2    6[BANK0 ] int 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;Total ram usage:        8 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    7
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_UI
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text33
  8854  0030CC                     __ptext33:
  8855                           	opt stack 0
  8856  0030CC                     ___awdiv:
  8857                           	opt stack 22
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;incstack = 0
  8861  0030CC  0E00               	movlw	0
  8862  0030CE  0100               	movlb	0	; () banked
  8863  0030D0  6F8B               	movwf	___awdiv@sign& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866  0030D2  0100               	movlb	0	; () banked
  8867  0030D4  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8868  0030D6  D008               	goto	l6884
  8869                           
  8870                           ; BSR set to: 0
  8871  0030D8  0100               	movlb	0	; () banked
  8872  0030DA  6D88               	negf	___awdiv@divisor& (0+255),b
  8873  0030DC  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8874  0030DE  B0D8               	btfsc	status,0,c
  8875  0030E0  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8876                           
  8877                           ; BSR set to: 0
  8878  0030E2  0E01               	movlw	1
  8879  0030E4  0100               	movlb	0	; () banked
  8880  0030E6  6F8B               	movwf	___awdiv@sign& (0+255),b
  8881  0030E8                     l6884:
  8882                           
  8883                           ; BSR set to: 0
  8884  0030E8  0100               	movlb	0	; () banked
  8885  0030EA  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8886  0030EC  D008               	goto	l6890
  8887                           
  8888                           ; BSR set to: 0
  8889  0030EE  0100               	movlb	0	; () banked
  8890  0030F0  6D86               	negf	___awdiv@dividend& (0+255),b
  8891  0030F2  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8892  0030F4  B0D8               	btfsc	status,0,c
  8893  0030F6  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8894                           
  8895                           ; BSR set to: 0
  8896  0030F8  0E01               	movlw	1
  8897  0030FA  0100               	movlb	0	; () banked
  8898  0030FC  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8899  0030FE                     l6890:
  8900                           
  8901                           ; BSR set to: 0
  8902  0030FE  0E00               	movlw	0
  8903  003100  0100               	movlb	0	; () banked
  8904  003102  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8905  003104  0E00               	movlw	0
  8906  003106  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8907                           
  8908                           ; BSR set to: 0
  8909  003108  0100               	movlb	0	; () banked
  8910  00310A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8911  00310C  0100               	movlb	0	; () banked
  8912  00310E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8913  003110  B4D8               	btfsc	status,2,c
  8914  003112  D02C               	goto	l6912
  8915                           
  8916                           ; BSR set to: 0
  8917  003114  0E01               	movlw	1
  8918  003116  0100               	movlb	0	; () banked
  8919  003118  6F8A               	movwf	___awdiv@counter& (0+255),b
  8920  00311A  D006               	goto	l6898
  8921  00311C                     l6896:
  8922                           
  8923                           ; BSR set to: 0
  8924  00311C  0100               	movlb	0	; () banked
  8925  00311E  90D8               	bcf	status,0,c
  8926  003120  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8927  003122  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8928  003124  0100               	movlb	0	; () banked
  8929  003126  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8930  003128                     l6898:
  8931                           
  8932                           ; BSR set to: 0
  8933  003128  0100               	movlb	0	; () banked
  8934  00312A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8935  00312C  D7F7               	goto	l6896
  8936  00312E                     l6900:
  8937                           
  8938                           ; BSR set to: 0
  8939  00312E  0100               	movlb	0	; () banked
  8940  003130  90D8               	bcf	status,0,c
  8941  003132  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8942  003134  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8943                           
  8944                           ; BSR set to: 0
  8945  003136  0100               	movlb	0	; () banked
  8946  003138  5188               	movf	___awdiv@divisor& (0+255),w,b
  8947  00313A  0100               	movlb	0	; () banked
  8948  00313C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8949  00313E  0100               	movlb	0	; () banked
  8950  003140  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8951  003142  0100               	movlb	0	; () banked
  8952  003144  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8953  003146  A0D8               	btfss	status,0,c
  8954  003148  D00A               	goto	l6908
  8955                           
  8956                           ; BSR set to: 0
  8957  00314A  0100               	movlb	0	; () banked
  8958  00314C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8959  00314E  0100               	movlb	0	; () banked
  8960  003150  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8961  003152  0100               	movlb	0	; () banked
  8962  003154  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8963  003156  0100               	movlb	0	; () banked
  8964  003158  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8965                           
  8966                           ; BSR set to: 0
  8967  00315A  0100               	movlb	0	; () banked
  8968  00315C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8969  00315E                     l6908:
  8970                           
  8971                           ; BSR set to: 0
  8972  00315E  0100               	movlb	0	; () banked
  8973  003160  90D8               	bcf	status,0,c
  8974  003162  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8975  003164  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8976                           
  8977                           ; BSR set to: 0
  8978  003166  0100               	movlb	0	; () banked
  8979  003168  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8980  00316A  D7E1               	goto	l6900
  8981  00316C                     l6912:
  8982                           
  8983                           ; BSR set to: 0
  8984  00316C  0100               	movlb	0	; () banked
  8985  00316E  518B               	movf	___awdiv@sign& (0+255),w,b
  8986  003170  0100               	movlb	0	; () banked
  8987  003172  B4D8               	btfsc	status,2,c
  8988  003174  D005               	goto	l6916
  8989                           
  8990                           ; BSR set to: 0
  8991  003176  0100               	movlb	0	; () banked
  8992  003178  6D8C               	negf	___awdiv@quotient& (0+255),b
  8993  00317A  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8994  00317C  B0D8               	btfsc	status,0,c
  8995  00317E  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8996  003180                     l6916:
  8997                           
  8998                           ; BSR set to: 0
  8999  003180  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9000  003184  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9001  003188  0012               	return	
  9002  00318A                     __end_of___awdiv:
  9003                           	opt stack 0
  9004                           tblptru	equ	0xFF8
  9005                           tblptrh	equ	0xFF7
  9006                           tblptrl	equ	0xFF6
  9007                           tablat	equ	0xFF5
  9008                           prodh	equ	0xFF4
  9009                           prodl	equ	0xFF3
  9010                           intcon	equ	0xFF2
  9011                           intcon2	equ	0xFF1
  9012                           intcon3	equ	0xFF0
  9013                           postinc0	equ	0xFEE
  9014                           wreg	equ	0xFE8
  9015                           postdec1	equ	0xFE5
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function _Test *****************
  9025 ;; Defined at:
  9026 ;;		line 27 in file "Test.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;		None
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;		None
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      void 
  9033 ;; Registers used:
  9034 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;Total ram usage:        2 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:   11
  9047 ;; This function calls:
  9048 ;;		_EEPROMTest
  9049 ;;		_PortTestA5
  9050 ;;		_PortTests
  9051 ;;		_SolenoidTestA5
  9052 ;;		_ToggleTestA5
  9053 ;;		_actuatorTest
  9054 ;;		_algorithmTest
  9055 ;;		_lcdInst
  9056 ;;		_printf
  9057 ;;		_sensorTest
  9058 ;; This function is called by:
  9059 ;;		_main
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text34
  9064  002D2A                     __ptext34:
  9065                           	opt stack 0
  9066  002D2A                     _Test:
  9067                           	opt stack 19
  9068  002D2A                     
  9069                           ;Test.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9070  002D2A  0E01               	movlw	1
  9071  002D2C  ECE2  F020         	call	_lcdInst
  9072  002D30  0E68               	movlw	104
  9073  002D32  0100               	movlb	0	; () banked
  9074  002D34  6FC6               	movwf	??_Test& (0+255),b
  9075  002D36  0EE4               	movlw	228
  9076  002D38                     u7077:
  9077  002D38  2EE8               	decfsz	wreg,f,c
  9078  002D3A  D7FE               	bra	u7077
  9079  002D3C  2FC6               	decfsz	??_Test& (0+255),f,b
  9080  002D3E  D7FC               	bra	u7077
  9081  002D40  F000               	nop	
  9082  002D42  0E80               	movlw	128
  9083  002D44  ECE2  F020         	call	_lcdInst
  9084                           
  9085                           ;Test.c: 31: printf("1.ALG|2.SNR|3.AC");
  9086  002D48  0EAA               	movlw	low STR_68
  9087  002D4A  0100               	movlb	0	; () banked
  9088  002D4C  6F8E               	movwf	printf@f& (0+255),b
  9089  002D4E  0EFC               	movlw	high STR_68
  9090  002D50  0100               	movlb	0	; () banked
  9091  002D52  6F8F               	movwf	(printf@f+1)& (0+255),b
  9092  002D54  EC9C  F008         	call	_printf	;wreg free
  9093                           
  9094                           ;Test.c: 32: lcdInst(0b11000000);;
  9095  002D58  0EC0               	movlw	192
  9096  002D5A  ECE2  F020         	call	_lcdInst
  9097                           
  9098                           ;Test.c: 33: printf("4.HI|5.TOG|6.EEP");
  9099  002D5E  0EDD               	movlw	low STR_69
  9100  002D60  0100               	movlb	0	; () banked
  9101  002D62  6F8E               	movwf	printf@f& (0+255),b
  9102  002D64  0EFC               	movlw	high STR_69
  9103  002D66  0100               	movlb	0	; () banked
  9104  002D68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9105  002D6A  EC9C  F008         	call	_printf	;wreg free
  9106                           
  9107                           ;Test.c: 34: _delay((unsigned long)((100)*(32000000/4000.0)));
  9108  002D6E  0E05               	movlw	5
  9109  002D70  0100               	movlb	0	; () banked
  9110  002D72  6FC7               	movwf	(??_Test+1)& (0+255),b
  9111  002D74  0E0F               	movlw	15
  9112  002D76  0100               	movlb	0	; () banked
  9113  002D78  6FC6               	movwf	??_Test& (0+255),b
  9114  002D7A  0EF1               	movlw	241
  9115  002D7C                     u7087:
  9116  002D7C  2EE8               	decfsz	wreg,f,c
  9117  002D7E  D7FE               	bra	u7087
  9118  002D80  2FC6               	decfsz	??_Test& (0+255),f,b
  9119  002D82  D7FC               	bra	u7087
  9120  002D84  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9121  002D86  D7FA               	bra	u7087
  9122  002D88                     l1001:
  9123  002D88  A281               	btfss	3969,1,c	;volatile
  9124  002D8A  D7FE               	goto	l1001
  9125                           
  9126                           ;Test.c: 36: var = PORTB >> 4;
  9127  002D8C  CF81 F0C6          	movff	3969,??_Test	;volatile
  9128  002D90  0100               	movlb	0	; () banked
  9129  002D92  3BC6               	swapf	??_Test& (0+255),f,b
  9130  002D94  0E0F               	movlw	15
  9131  002D96  17C6               	andwf	??_Test& (0+255),f,b
  9132  002D98  0100               	movlb	0	; () banked
  9133  002D9A  51C6               	movf	??_Test& (0+255),w,b
  9134  002D9C  0100               	movlb	0	; () banked
  9135  002D9E  6FFA               	movwf	_var& (0+255),b
  9136  002DA0  6BFB               	clrf	(_var+1)& (0+255),b
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;Test.c: 37: var++;
  9140  002DA2  0100               	movlb	0	; () banked
  9141  002DA4  4BFA               	infsnz	_var& (0+255),f,b
  9142  002DA6  2BFB               	incf	(_var+1)& (0+255),f,b
  9143  002DA8                     l1004:
  9144  002DA8  A281               	btfss	3969,1,c	;volatile
  9145  002DAA  D019               	goto	l7646
  9146  002DAC  D7FD               	goto	l1004
  9147  002DAE                     l7628:
  9148                           
  9149                           ;Test.c: 41: algorithmTest();
  9150  002DAE  ECFB  F017         	call	_algorithmTest	;wreg free
  9151                           
  9152                           ;Test.c: 42: break;
  9153  002DB2  D7BB               	goto	l7610
  9154  002DB4                     l7630:
  9155                           
  9156                           ;Test.c: 44: sensorTest();
  9157  002DB4  EC3B  F012         	call	_sensorTest	;wreg free
  9158                           
  9159                           ;Test.c: 45: break;
  9160  002DB8  D7B8               	goto	l7610
  9161  002DBA                     l7632:
  9162                           
  9163                           ;Test.c: 47: actuatorTest();
  9164  002DBA  EC5C  F004         	call	_actuatorTest	;wreg free
  9165                           
  9166                           ;Test.c: 48: break;
  9167  002DBE  D7B5               	goto	l7610
  9168  002DC0                     l7634:
  9169                           
  9170                           ;Test.c: 50: PortTestA5();
  9171  002DC0  EC9C  F01C         	call	_PortTestA5	;wreg free
  9172                           
  9173                           ;Test.c: 51: break;
  9174  002DC4  D7B2               	goto	l7610
  9175  002DC6                     l7636:
  9176                           
  9177                           ;Test.c: 53: ToggleTestA5();
  9178  002DC6  EC5A  F01A         	call	_ToggleTestA5	;wreg free
  9179                           
  9180                           ;Test.c: 54: break;
  9181  002DCA  D7AF               	goto	l7610
  9182  002DCC                     l7638:
  9183                           
  9184                           ;Test.c: 56: EEPROMTest();
  9185  002DCC  EC14  F021         	call	_EEPROMTest	;wreg free
  9186                           
  9187                           ;Test.c: 57: break;
  9188  002DD0  D7AC               	goto	l7610
  9189  002DD2                     l7640:
  9190                           
  9191                           ;Test.c: 59: SolenoidTestA5();
  9192  002DD2  EC16  F016         	call	_SolenoidTestA5	;wreg free
  9193                           
  9194                           ;Test.c: 60: break;
  9195  002DD6  D7A9               	goto	l7610
  9196  002DD8                     l7642:
  9197                           
  9198                           ;Test.c: 62: PortTests();
  9199  002DD8  ECE1  F01A         	call	_PortTests	;wreg free
  9200                           
  9201                           ;Test.c: 66: }
  9202                           
  9203                           ;Test.c: 65: break;
  9204                           
  9205                           ;Test.c: 64: default:
  9206                           
  9207                           ;Test.c: 63: break;
  9208  002DDC  D7A6               	goto	l7610
  9209  002DDE                     l7646:
  9210  002DDE  C0FA  F0C6         	movff	_var,??_Test
  9211  002DE2  C0FB  F0C7         	movff	_var+1,??_Test+1
  9212                           
  9213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9214                           ; Switch size 1, requested type "space"
  9215                           ; Number of cases is 1, Range of values is 0 to 0
  9216                           ; switch strategies available:
  9217                           ; Name         Instructions Cycles
  9218                           ; simple_byte            4     3 (average)
  9219                           ;	Chosen strategy is simple_byte
  9220  002DE6  0100               	movlb	0	; () banked
  9221  002DE8  51C7               	movf	(??_Test+1)& (0+255),w,b
  9222  002DEA  0A00               	xorlw	0	; case 0
  9223  002DEC  A4D8               	btfss	status,2,c
  9224  002DEE  D79D               	goto	l7610
  9225                           
  9226                           ; BSR set to: 0
  9227                           ; Switch size 1, requested type "space"
  9228                           ; Number of cases is 8, Range of values is 1 to 9
  9229                           ; switch strategies available:
  9230                           ; Name         Instructions Cycles
  9231                           ; simple_byte           25    13 (average)
  9232                           ;	Chosen strategy is simple_byte
  9233  002DF0  0100               	movlb	0	; () banked
  9234  002DF2  51C6               	movf	??_Test& (0+255),w,b
  9235  002DF4  0A01               	xorlw	1	; case 1
  9236  002DF6  B4D8               	btfsc	status,2,c
  9237  002DF8  D7DA               	goto	l7628
  9238  002DFA  0A03               	xorlw	3	; case 2
  9239  002DFC  B4D8               	btfsc	status,2,c
  9240  002DFE  D7DA               	goto	l7630
  9241  002E00  0A01               	xorlw	1	; case 3
  9242  002E02  B4D8               	btfsc	status,2,c
  9243  002E04  D7DA               	goto	l7632
  9244  002E06  0A06               	xorlw	6	; case 5
  9245  002E08  B4D8               	btfsc	status,2,c
  9246  002E0A  D7DA               	goto	l7634
  9247  002E0C  0A03               	xorlw	3	; case 6
  9248  002E0E  B4D8               	btfsc	status,2,c
  9249  002E10  D7DA               	goto	l7636
  9250  002E12  0A01               	xorlw	1	; case 7
  9251  002E14  B4D8               	btfsc	status,2,c
  9252  002E16  D7DA               	goto	l7638
  9253  002E18  0A0F               	xorlw	15	; case 8
  9254  002E1A  B4D8               	btfsc	status,2,c
  9255  002E1C  D7DA               	goto	l7640
  9256  002E1E  0A01               	xorlw	1	; case 9
  9257  002E20  B4D8               	btfsc	status,2,c
  9258  002E22  D7DA               	goto	l7642
  9259                           
  9260                           ; BSR set to: 0
  9261                           
  9262                           ; BSR set to: 0
  9263  002E24  D782               	goto	l7610
  9264  002E26                     __end_of_Test:
  9265                           	opt stack 0
  9266                           tblptru	equ	0xFF8
  9267                           tblptrh	equ	0xFF7
  9268                           tblptrl	equ	0xFF6
  9269                           tablat	equ	0xFF5
  9270                           prodh	equ	0xFF4
  9271                           prodl	equ	0xFF3
  9272                           intcon	equ	0xFF2
  9273                           intcon2	equ	0xFF1
  9274                           intcon3	equ	0xFF0
  9275                           postinc0	equ	0xFEE
  9276                           wreg	equ	0xFE8
  9277                           postdec1	equ	0xFE5
  9278                           fsr1l	equ	0xFE1
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           postdec2	equ	0xFDD
  9282                           fsr2h	equ	0xFDA
  9283                           fsr2l	equ	0xFD9
  9284                           status	equ	0xFD8
  9285                           
  9286 ;; *************** function _sensorTest *****************
  9287 ;; Defined at:
  9288 ;;		line 114 in file "Test.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  on              2   45[BANK0 ] int 
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      void 
  9295 ;; Registers used:
  9296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;Total ram usage:        4 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:   10
  9309 ;; This function calls:
  9310 ;;		_lcdInst
  9311 ;;		_printf
  9312 ;;		_readIR
  9313 ;;		_readMAG
  9314 ;; This function is called by:
  9315 ;;		_Test
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           	psect	text35
  9320  002476                     __ptext35:
  9321                           	opt stack 0
  9322  002476                     _sensorTest:
  9323                           	opt stack 19
  9324                           
  9325                           ;Test.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;incstack = 0
  9329  002476  0E01               	movlw	1
  9330  002478  ECE2  F020         	call	_lcdInst
  9331  00247C  0E68               	movlw	104
  9332  00247E  0100               	movlb	0	; () banked
  9333  002480  6FAB               	movwf	??_sensorTest& (0+255),b
  9334  002482  0EE4               	movlw	228
  9335  002484                     u7097:
  9336  002484  2EE8               	decfsz	wreg,f,c
  9337  002486  D7FE               	bra	u7097
  9338  002488  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9339  00248A  D7FC               	bra	u7097
  9340  00248C  F000               	nop	
  9341  00248E  0E80               	movlw	128
  9342  002490  ECE2  F020         	call	_lcdInst
  9343                           
  9344                           ;Test.c: 117: printf("SENSORS");
  9345  002494  0EAE               	movlw	low STR_77
  9346  002496  0100               	movlb	0	; () banked
  9347  002498  6F8E               	movwf	printf@f& (0+255),b
  9348  00249A  0EFF               	movlw	high STR_77
  9349  00249C  0100               	movlb	0	; () banked
  9350  00249E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9351  0024A0  EC9C  F008         	call	_printf	;wreg free
  9352                           
  9353                           ;Test.c: 118: lcdInst(0b11000000);;
  9354  0024A4  0EC0               	movlw	192
  9355  0024A6  ECE2  F020         	call	_lcdInst
  9356                           
  9357                           ;Test.c: 119: printf("PUSH TO START");
  9358  0024AA  0E12               	movlw	low STR_71
  9359  0024AC  0100               	movlb	0	; () banked
  9360  0024AE  6F8E               	movwf	printf@f& (0+255),b
  9361  0024B0  0EFF               	movlw	high STR_71
  9362  0024B2  0100               	movlb	0	; () banked
  9363  0024B4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9364  0024B6  EC9C  F008         	call	_printf	;wreg free
  9365                           
  9366                           ;Test.c: 120: _delay((unsigned long)((100)*(32000000/4000.0)));
  9367  0024BA  0E05               	movlw	5
  9368  0024BC  0100               	movlb	0	; () banked
  9369  0024BE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9370  0024C0  0E0F               	movlw	15
  9371  0024C2  0100               	movlb	0	; () banked
  9372  0024C4  6FAB               	movwf	??_sensorTest& (0+255),b
  9373  0024C6  0EF1               	movlw	241
  9374  0024C8                     u7107:
  9375  0024C8  2EE8               	decfsz	wreg,f,c
  9376  0024CA  D7FE               	bra	u7107
  9377  0024CC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9378  0024CE  D7FC               	bra	u7107
  9379  0024D0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9380  0024D2  D7FA               	bra	u7107
  9381  0024D4                     l1032:
  9382  0024D4  A281               	btfss	3969,1,c	;volatile
  9383  0024D6  D7FE               	goto	l1032
  9384  0024D8                     l1035:
  9385  0024D8  B281               	btfsc	3969,1,c	;volatile
  9386  0024DA  D7FE               	goto	l1035
  9387                           
  9388                           ;Test.c: 123: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9389  0024DC  0E01               	movlw	1
  9390  0024DE  ECE2  F020         	call	_lcdInst
  9391  0024E2  0E68               	movlw	104
  9392  0024E4  0100               	movlb	0	; () banked
  9393  0024E6  6FAB               	movwf	??_sensorTest& (0+255),b
  9394  0024E8  0EE4               	movlw	228
  9395  0024EA                     u7117:
  9396  0024EA  2EE8               	decfsz	wreg,f,c
  9397  0024EC  D7FE               	bra	u7117
  9398  0024EE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9399  0024F0  D7FC               	bra	u7117
  9400  0024F2  F000               	nop	
  9401  0024F4  0E80               	movlw	128
  9402  0024F6  ECE2  F020         	call	_lcdInst
  9403                           
  9404                           ;Test.c: 128: printf("TST: IR SNSR");
  9405  0024FA  0E3C               	movlw	low STR_79
  9406  0024FC  0100               	movlb	0	; () banked
  9407  0024FE  6F8E               	movwf	printf@f& (0+255),b
  9408  002500  0EFF               	movlw	high STR_79
  9409  002502  0100               	movlb	0	; () banked
  9410  002504  6F8F               	movwf	(printf@f+1)& (0+255),b
  9411  002506  EC9C  F008         	call	_printf	;wreg free
  9412                           
  9413                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  9414  00250A  0E05               	movlw	5
  9415  00250C  0100               	movlb	0	; () banked
  9416  00250E  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9417  002510  0E0F               	movlw	15
  9418  002512  0100               	movlb	0	; () banked
  9419  002514  6FAB               	movwf	??_sensorTest& (0+255),b
  9420  002516  0EF1               	movlw	241
  9421  002518                     u7127:
  9422  002518  2EE8               	decfsz	wreg,f,c
  9423  00251A  D7FE               	bra	u7127
  9424  00251C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9425  00251E  D7FC               	bra	u7127
  9426  002520  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9427  002522  D7FA               	bra	u7127
  9428                           
  9429                           ;Test.c: 130: int on = 0;
  9430  002524  0E00               	movlw	0
  9431  002526  0100               	movlb	0	; () banked
  9432  002528  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9433  00252A  0E00               	movlw	0
  9434  00252C  6FAD               	movwf	sensorTest@on& (0+255),b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;Test.c: 132: while(PORTBbits.RB1 == 0){
  9438                           
  9439                           ;Test.c: 131: while(1){
  9440  00252E  D021               	goto	l6326
  9441  002530                     l6320:
  9442                           
  9443                           ;Test.c: 133: readIR();
  9444  002530  EC9D  F01E         	call	_readIR	;wreg free
  9445                           
  9446                           ;Test.c: 134: lcdInst(0b10000000);;
  9447  002534  0E80               	movlw	128
  9448  002536  ECE2  F020         	call	_lcdInst
  9449                           
  9450                           ;Test.c: 135: lcdInst(0b11000000);;
  9451  00253A  0EC0               	movlw	192
  9452  00253C  ECE2  F020         	call	_lcdInst
  9453                           
  9454                           ;Test.c: 136: printf("IR_signal: %d ", IR_signal);
  9455  002540  0E61               	movlw	low STR_80
  9456  002542  0100               	movlb	0	; () banked
  9457  002544  6F8E               	movwf	printf@f& (0+255),b
  9458  002546  0EFE               	movlw	high STR_80
  9459  002548  0100               	movlb	0	; () banked
  9460  00254A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9461  00254C  C0DA  F090         	movff	_IR_signal,?_printf+2
  9462  002550  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9463  002554  EC9C  F008         	call	_printf	;wreg free
  9464                           
  9465                           ;Test.c: 137: _delay((unsigned long)((100)*(32000000/4000.0)));
  9466  002558  0E05               	movlw	5
  9467  00255A  0100               	movlb	0	; () banked
  9468  00255C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9469  00255E  0E0F               	movlw	15
  9470  002560  0100               	movlb	0	; () banked
  9471  002562  6FAB               	movwf	??_sensorTest& (0+255),b
  9472  002564  0EF1               	movlw	241
  9473  002566                     u7137:
  9474  002566  2EE8               	decfsz	wreg,f,c
  9475  002568  D7FE               	bra	u7137
  9476  00256A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9477  00256C  D7FC               	bra	u7137
  9478  00256E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9479  002570  D7FA               	bra	u7137
  9480  002572                     l6326:
  9481  002572  A281               	btfss	3969,1,c	;volatile
  9482  002574  D7DD               	goto	l6320
  9483                           
  9484                           ;Test.c: 138: }
  9485                           ;Test.c: 139: if(on == 0){
  9486  002576  0100               	movlb	0	; () banked
  9487  002578  51AD               	movf	sensorTest@on& (0+255),w,b
  9488  00257A  0100               	movlb	0	; () banked
  9489  00257C  11AE               	iorwf	(sensorTest@on+1)& (0+255),w,b
  9490  00257E  A4D8               	btfss	status,2,c
  9491  002580  D007               	goto	l6334
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;Test.c: 140: on = 1;
  9495  002582  0E00               	movlw	0
  9496  002584  0100               	movlb	0	; () banked
  9497  002586  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9498  002588  0E01               	movlw	1
  9499  00258A  6FAD               	movwf	sensorTest@on& (0+255),b
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;Test.c: 141: LATAbits.LATA5 = 1;
  9503  00258C  8A89               	bsf	3977,5,c	;volatile
  9504                           
  9505                           ;Test.c: 142: }
  9506  00258E  D006               	goto	l1044
  9507  002590                     l6334:
  9508                           
  9509                           ; BSR set to: 0
  9510                           ;Test.c: 143: else{
  9511                           ;Test.c: 144: on = 0;
  9512  002590  0E00               	movlw	0
  9513  002592  0100               	movlb	0	; () banked
  9514  002594  6FAE               	movwf	(sensorTest@on+1)& (0+255),b
  9515  002596  0E00               	movlw	0
  9516  002598  6FAD               	movwf	sensorTest@on& (0+255),b
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;Test.c: 145: LATAbits.LATA5 = 0;
  9520  00259A  9A89               	bcf	3977,5,c	;volatile
  9521  00259C                     l1044:
  9522  00259C  A281               	btfss	3969,1,c	;volatile
  9523  00259E  D7E9               	goto	l6326
  9524  0025A0  D7FD               	goto	l1044
  9525                           
  9526                           ;Test.c: 155: _delay((unsigned long)((100)*(32000000/4000.0)));
  9527                           
  9528                           ;Test.c: 148: }
  9529                           ;Test.c: 154: printf("TST: MAGNETISM");
  9530  0025A2  0E05               	movlw	5
  9531  0025A4  0100               	movlb	0	; () banked
  9532  0025A6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9533  0025A8  0E0F               	movlw	15
  9534  0025AA  0100               	movlb	0	; () banked
  9535  0025AC  6FAB               	movwf	??_sensorTest& (0+255),b
  9536  0025AE  0EF1               	movlw	241
  9537  0025B0                     u7147:
  9538  0025B0  2EE8               	decfsz	wreg,f,c
  9539  0025B2  D7FE               	bra	u7147
  9540  0025B4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9541  0025B6  D7FC               	bra	u7147
  9542  0025B8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9543  0025BA  D7FA               	bra	u7147
  9544                           
  9545                           ;Test.c: 156: while(PORTBbits.RB1 == 0){
  9546  0025BC  D021               	goto	l6348
  9547  0025BE                     l6342:
  9548                           
  9549                           ;Test.c: 157: readMAG();
  9550  0025BE  ECC5  F01D         	call	_readMAG	;wreg free
  9551                           
  9552                           ;Test.c: 158: lcdInst(0b10000000);;
  9553  0025C2  0E80               	movlw	128
  9554  0025C4  ECE2  F020         	call	_lcdInst
  9555                           
  9556                           ;Test.c: 159: lcdInst(0b11000000);;
  9557  0025C8  0EC0               	movlw	192
  9558  0025CA  ECE2  F020         	call	_lcdInst
  9559                           
  9560                           ;Test.c: 160: printf("MAG_signal: %d ", MAG_signal);
  9561  0025CE  0E31               	movlw	low STR_82
  9562  0025D0  0100               	movlb	0	; () banked
  9563  0025D2  6F8E               	movwf	printf@f& (0+255),b
  9564  0025D4  0EFE               	movlw	high STR_82
  9565  0025D6  0100               	movlb	0	; () banked
  9566  0025D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9567  0025DA  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9568  0025DE  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9569  0025E2  EC9C  F008         	call	_printf	;wreg free
  9570                           
  9571                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
  9572  0025E6  0E05               	movlw	5
  9573  0025E8  0100               	movlb	0	; () banked
  9574  0025EA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9575  0025EC  0E0F               	movlw	15
  9576  0025EE  0100               	movlb	0	; () banked
  9577  0025F0  6FAB               	movwf	??_sensorTest& (0+255),b
  9578  0025F2  0EF1               	movlw	241
  9579  0025F4                     u7157:
  9580  0025F4  2EE8               	decfsz	wreg,f,c
  9581  0025F6  D7FE               	bra	u7157
  9582  0025F8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9583  0025FA  D7FC               	bra	u7157
  9584  0025FC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9585  0025FE  D7FA               	bra	u7157
  9586  002600                     l6348:
  9587  002600  B281               	btfsc	3969,1,c	;volatile
  9588  002602  0012               	return	
  9589  002604  D7DC               	goto	l6342
  9590  002606                     __end_of_sensorTest:
  9591                           	opt stack 0
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           intcon	equ	0xFF2
  9599                           intcon2	equ	0xFF1
  9600                           intcon3	equ	0xFF0
  9601                           postinc0	equ	0xFEE
  9602                           wreg	equ	0xFE8
  9603                           postdec1	equ	0xFE5
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function _readMAG *****************
  9613 ;; Defined at:
  9614 ;;		line 30 in file "ADCFunctionality.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  res             2    4[BANK0 ] int 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      void 
  9621 ;; Registers used:
  9622 ;;		wreg, status,2, status,0, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;Total ram usage:        4 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    8
  9635 ;; This function calls:
  9636 ;;		_readADC
  9637 ;; This function is called by:
  9638 ;;		_ID
  9639 ;;		_sensorTest
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text36
  9644  003B8A                     __ptext36:
  9645                           	opt stack 0
  9646  003B8A                     _readMAG:
  9647                           	opt stack 20
  9648                           
  9649                           ;ADCFunctionality.c: 31: readADC(1);
  9650                           
  9651                           ;incstack = 0
  9652  003B8A  0E01               	movlw	1
  9653  003B8C  ECEB  F01F         	call	_readADC
  9654                           
  9655                           ;ADCFunctionality.c: 32: int res = ADRESH<<8 | ADRESL;
  9656  003B90  50C3               	movf	4035,w,c	;volatile
  9657  003B92  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9658  003B96  0100               	movlb	0	; () banked
  9659  003B98  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9660  003B9A  C082  F083         	movff	??_readMAG,??_readMAG+1
  9661  003B9E  0100               	movlb	0	; () banked
  9662  003BA0  6B82               	clrf	??_readMAG& (0+255),b
  9663  003BA2  0100               	movlb	0	; () banked
  9664  003BA4  1182               	iorwf	??_readMAG& (0+255),w,b
  9665  003BA6  0100               	movlb	0	; () banked
  9666  003BA8  6F84               	movwf	readMAG@res& (0+255),b
  9667  003BAA  0100               	movlb	0	; () banked
  9668  003BAC  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9669  003BAE  0100               	movlb	0	; () banked
  9670  003BB0  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;ADCFunctionality.c: 33: MAG_signal = (res < 150) ? 1 : 0;
  9674  003BB2  0100               	movlb	0	; () banked
  9675  003BB4  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9676  003BB6  D008               	goto	u4261
  9677  003BB8  0100               	movlb	0	; () banked
  9678  003BBA  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9679  003BBC  E107               	bnz	u4260
  9680  003BBE  0E96               	movlw	150
  9681  003BC0  0100               	movlb	0	; () banked
  9682  003BC2  5D84               	subwf	readMAG@res& (0+255),w,b
  9683  003BC4  B0D8               	btfsc	status,0,c
  9684  003BC6  D002               	goto	u4260
  9685  003BC8                     u4261:
  9686  003BC8  0E01               	movlw	1
  9687  003BCA  D001               	goto	u4270
  9688  003BCC                     u4260:
  9689  003BCC  0E00               	movlw	0
  9690  003BCE                     u4270:
  9691  003BCE  0100               	movlb	0	; () banked
  9692  003BD0  6FDC               	movwf	_MAG_signal& (0+255),b
  9693  003BD2  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9694                           
  9695                           ; BSR set to: 0
  9696  003BD4  0012               	return		;funcret
  9697  003BD6                     __end_of_readMAG:
  9698                           	opt stack 0
  9699                           tblptru	equ	0xFF8
  9700                           tblptrh	equ	0xFF7
  9701                           tblptrl	equ	0xFF6
  9702                           tablat	equ	0xFF5
  9703                           prodh	equ	0xFF4
  9704                           prodl	equ	0xFF3
  9705                           intcon	equ	0xFF2
  9706                           intcon2	equ	0xFF1
  9707                           intcon3	equ	0xFF0
  9708                           postinc0	equ	0xFEE
  9709                           wreg	equ	0xFE8
  9710                           postdec1	equ	0xFE5
  9711                           fsr1l	equ	0xFE1
  9712                           indf2	equ	0xFDF
  9713                           postinc2	equ	0xFDE
  9714                           postdec2	equ	0xFDD
  9715                           fsr2h	equ	0xFDA
  9716                           fsr2l	equ	0xFD9
  9717                           status	equ	0xFD8
  9718                           
  9719 ;; *************** function _readIR *****************
  9720 ;; Defined at:
  9721 ;;		line 23 in file "ADCFunctionality.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  res             2    4[BANK0 ] int 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, status,2, status,0, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;Total ram usage:        4 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    8
  9742 ;; This function calls:
  9743 ;;		_readADC
  9744 ;; This function is called by:
  9745 ;;		_getIR
  9746 ;;		_sensorTest
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           	psect	text37
  9751  003D3A                     __ptext37:
  9752                           	opt stack 0
  9753  003D3A                     _readIR:
  9754                           	opt stack 19
  9755                           
  9756                           ;ADCFunctionality.c: 24: readADC(0);
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;incstack = 0
  9760  003D3A  0E00               	movlw	0
  9761  003D3C  ECEB  F01F         	call	_readADC
  9762                           
  9763                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9764  003D40  50C3               	movf	4035,w,c	;volatile
  9765  003D42  CFC4 F082          	movff	4036,??_readIR	;volatile
  9766  003D46  0100               	movlb	0	; () banked
  9767  003D48  6B83               	clrf	(??_readIR+1)& (0+255),b
  9768  003D4A  C082  F083         	movff	??_readIR,??_readIR+1
  9769  003D4E  0100               	movlb	0	; () banked
  9770  003D50  6B82               	clrf	??_readIR& (0+255),b
  9771  003D52  0100               	movlb	0	; () banked
  9772  003D54  1182               	iorwf	??_readIR& (0+255),w,b
  9773  003D56  0100               	movlb	0	; () banked
  9774  003D58  6F84               	movwf	readIR@res& (0+255),b
  9775  003D5A  0100               	movlb	0	; () banked
  9776  003D5C  5183               	movf	(??_readIR+1)& (0+255),w,b
  9777  003D5E  0100               	movlb	0	; () banked
  9778  003D60  6F85               	movwf	(readIR@res+1)& (0+255),b
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;ADCFunctionality.c: 26: IR_signal = res;
  9782  003D62  C084  F0DA         	movff	readIR@res,_IR_signal
  9783  003D66  C085  F0DB         	movff	readIR@res+1,_IR_signal+1
  9784                           
  9785                           ; BSR set to: 0
  9786  003D6A  0012               	return		;funcret
  9787  003D6C                     __end_of_readIR:
  9788                           	opt stack 0
  9789                           tblptru	equ	0xFF8
  9790                           tblptrh	equ	0xFF7
  9791                           tblptrl	equ	0xFF6
  9792                           tablat	equ	0xFF5
  9793                           prodh	equ	0xFF4
  9794                           prodl	equ	0xFF3
  9795                           intcon	equ	0xFF2
  9796                           intcon2	equ	0xFF1
  9797                           intcon3	equ	0xFF0
  9798                           postinc0	equ	0xFEE
  9799                           wreg	equ	0xFE8
  9800                           postdec1	equ	0xFE5
  9801                           fsr1l	equ	0xFE1
  9802                           indf2	equ	0xFDF
  9803                           postinc2	equ	0xFDE
  9804                           postdec2	equ	0xFDD
  9805                           fsr2h	equ	0xFDA
  9806                           fsr2l	equ	0xFD9
  9807                           status	equ	0xFD8
  9808                           
  9809 ;; *************** function _readADC *****************
  9810 ;; Defined at:
  9811 ;;		line 15 in file "ADCFunctionality.c"
  9812 ;; Parameters:    Size  Location     Type
  9813 ;;  channel         1    wreg     unsigned char 
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;  channel         1    1[BANK0 ] unsigned char 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  1    wreg      void 
  9818 ;; Registers used:
  9819 ;;		wreg, status,2, status,0, cstack
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;Total ram usage:        2 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    7
  9832 ;; This function calls:
  9833 ;;		Nothing
  9834 ;; This function is called by:
  9835 ;;		_readIR
  9836 ;;		_readMAG
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text38
  9841  003FD6                     __ptext38:
  9842                           	opt stack 0
  9843  003FD6                     _readADC:
  9844                           	opt stack 19
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;incstack = 0
  9848                           ;readADC@channel stored from wreg
  9849  003FD6  0100               	movlb	0	; () banked
  9850  003FD8  6F81               	movwf	readADC@channel& (0+255),b
  9851                           
  9852                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9853  003FDA  0100               	movlb	0	; () banked
  9854  003FDC  4581               	rlncf	readADC@channel& (0+255),w,b
  9855  003FDE  46E8               	rlncf	wreg,f,c
  9856  003FE0  0BFC               	andlw	252
  9857  003FE2  6EC2               	movwf	4034,c	;volatile
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9861  003FE4  80C2               	bsf	4034,0,c	;volatile
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9865  003FE6  82C2               	bsf	4034,1,c	;volatile
  9866                           
  9867                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9868  003FE8  D009               	goto	l5016
  9869  003FEA                     l5014:
  9870  003FEA  0E34               	movlw	52
  9871  003FEC  0100               	movlb	0	; () banked
  9872  003FEE  6F80               	movwf	??_readADC& (0+255),b
  9873  003FF0  0EF1               	movlw	241
  9874  003FF2                     u7167:
  9875  003FF2  2EE8               	decfsz	wreg,f,c
  9876  003FF4  D7FE               	bra	u7167
  9877  003FF6  2F80               	decfsz	??_readADC& (0+255),f,b
  9878  003FF8  D7FC               	bra	u7167
  9879  003FFA  D000               	nop2	
  9880  003FFC                     l5016:
  9881  003FFC  A2C2               	btfss	4034,1,c	;volatile
  9882  003FFE  0012               	return	
  9883  004000  D7F4               	goto	l5014
  9884  004002                     __end_of_readADC:
  9885                           	opt stack 0
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon	equ	0xFF2
  9893                           intcon2	equ	0xFF1
  9894                           intcon3	equ	0xFF0
  9895                           postinc0	equ	0xFEE
  9896                           wreg	equ	0xFE8
  9897                           postdec1	equ	0xFE5
  9898                           fsr1l	equ	0xFE1
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _algorithmTest *****************
  9907 ;; Defined at:
  9908 ;;		line 70 in file "Test.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;Total ram usage:        2 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:   10
  9929 ;; This function calls:
  9930 ;;		_lcdInst
  9931 ;;		_printf
  9932 ;; This function is called by:
  9933 ;;		_Test
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           	psect	text39
  9938  002FF6                     __ptext39:
  9939                           	opt stack 0
  9940  002FF6                     _algorithmTest:
  9941                           	opt stack 19
  9942                           
  9943                           ;Test.c: 72: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9944                           
  9945                           ;incstack = 0
  9946  002FF6  0E01               	movlw	1
  9947  002FF8  ECE2  F020         	call	_lcdInst
  9948  002FFC  0E68               	movlw	104
  9949  002FFE  0100               	movlb	0	; () banked
  9950  003000  6FAB               	movwf	??_algorithmTest& (0+255),b
  9951  003002  0EE4               	movlw	228
  9952  003004                     u7177:
  9953  003004  2EE8               	decfsz	wreg,f,c
  9954  003006  D7FE               	bra	u7177
  9955  003008  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9956  00300A  D7FC               	bra	u7177
  9957  00300C  F000               	nop	
  9958  00300E  0E80               	movlw	128
  9959  003010  ECE2  F020         	call	_lcdInst
  9960                           
  9961                           ;Test.c: 73: printf("ALGORITHM TEST");
  9962  003014  0ED9               	movlw	low STR_70
  9963  003016  0100               	movlb	0	; () banked
  9964  003018  6F8E               	movwf	printf@f& (0+255),b
  9965  00301A  0EFE               	movlw	high STR_70
  9966  00301C  0100               	movlb	0	; () banked
  9967  00301E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9968  003020  EC9C  F008         	call	_printf	;wreg free
  9969                           
  9970                           ;Test.c: 74: lcdInst(0b11000000);;
  9971  003024  0EC0               	movlw	192
  9972  003026  ECE2  F020         	call	_lcdInst
  9973                           
  9974                           ;Test.c: 75: printf("PUSH TO START");
  9975  00302A  0E12               	movlw	low STR_71
  9976  00302C  0100               	movlb	0	; () banked
  9977  00302E  6F8E               	movwf	printf@f& (0+255),b
  9978  003030  0EFF               	movlw	high STR_71
  9979  003032  0100               	movlb	0	; () banked
  9980  003034  6F8F               	movwf	(printf@f+1)& (0+255),b
  9981  003036  EC9C  F008         	call	_printf	;wreg free
  9982                           
  9983                           ;Test.c: 76: _delay((unsigned long)((100)*(32000000/4000.0)));
  9984  00303A  0E05               	movlw	5
  9985  00303C  0100               	movlb	0	; () banked
  9986  00303E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9987  003040  0E0F               	movlw	15
  9988  003042  0100               	movlb	0	; () banked
  9989  003044  6FAB               	movwf	??_algorithmTest& (0+255),b
  9990  003046  0EF1               	movlw	241
  9991  003048                     u7187:
  9992  003048  2EE8               	decfsz	wreg,f,c
  9993  00304A  D7FE               	bra	u7187
  9994  00304C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9995  00304E  D7FC               	bra	u7187
  9996  003050  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9997  003052  D7FA               	bra	u7187
  9998  003054                     l1023:
  9999  003054  A281               	btfss	3969,1,c	;volatile
 10000  003056  D7FE               	goto	l1023
 10001  003058                     l1026:
 10002  003058  B281               	btfsc	3969,1,c	;volatile
 10003  00305A  D7FE               	goto	l1026
 10004                           
 10005                           ;Test.c: 79: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10006  00305C  0E01               	movlw	1
 10007  00305E  ECE2  F020         	call	_lcdInst
 10008  003062  0E68               	movlw	104
 10009  003064  0100               	movlb	0	; () banked
 10010  003066  6FAB               	movwf	??_algorithmTest& (0+255),b
 10011  003068  0EE4               	movlw	228
 10012  00306A                     u7197:
 10013  00306A  2EE8               	decfsz	wreg,f,c
 10014  00306C  D7FE               	bra	u7197
 10015  00306E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10016  003070  D7FC               	bra	u7197
 10017  003072  F000               	nop	
 10018  003074  0E80               	movlw	128
 10019  003076  ECE2  F020         	call	_lcdInst
 10020                           
 10021                           ;Test.c: 84: printf("ALG1: 9 POPNOTAB");
 10022  00307A  0E99               	movlw	low STR_72
 10023  00307C  0100               	movlb	0	; () banked
 10024  00307E  6F8E               	movwf	printf@f& (0+255),b
 10025  003080  0EFC               	movlw	high STR_72
 10026  003082  0100               	movlb	0	; () banked
 10027  003084  6F8F               	movwf	(printf@f+1)& (0+255),b
 10028  003086  EC9C  F008         	call	_printf	;wreg free
 10029                           
 10030                           ;Test.c: 91: printf("ALG2: 12 CANS");
 10031  00308A  0EF6               	movlw	low STR_73
 10032  00308C  0100               	movlb	0	; () banked
 10033  00308E  6F8E               	movwf	printf@f& (0+255),b
 10034  003090  0EFE               	movlw	high STR_73
 10035  003092  0100               	movlb	0	; () banked
 10036  003094  6F8F               	movwf	(printf@f+1)& (0+255),b
 10037  003096  EC9C  F008         	call	_printf	;wreg free
 10038                           
 10039                           ;Test.c: 100: printf("ALG3: 1 CAN");
 10040  00309A  0E63               	movlw	low STR_74
 10041  00309C  0100               	movlb	0	; () banked
 10042  00309E  6F8E               	movwf	printf@f& (0+255),b
 10043  0030A0  0EFF               	movlw	high STR_74
 10044  0030A2  0100               	movlb	0	; () banked
 10045  0030A4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10046  0030A6  EC9C  F008         	call	_printf	;wreg free
 10047                           
 10048                           ;Test.c: 106: printf("ALG4: ALL CANS");
 10049  0030AA  0EBB               	movlw	low STR_75
 10050  0030AC  0100               	movlb	0	; () banked
 10051  0030AE  6F8E               	movwf	printf@f& (0+255),b
 10052  0030B0  0EFE               	movlw	high STR_75
 10053  0030B2  0100               	movlb	0	; () banked
 10054  0030B4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10055  0030B6  EC9C  F008         	call	_printf	;wreg free
 10056                           
 10057                           ;Test.c: 111: printf("ALG5: NO CANS");
 10058  0030BA  0E04               	movlw	low STR_76
 10059  0030BC  0100               	movlb	0	; () banked
 10060  0030BE  6F8E               	movwf	printf@f& (0+255),b
 10061  0030C0  0EFF               	movlw	high STR_76
 10062  0030C2  0100               	movlb	0	; () banked
 10063  0030C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10064  0030C6  EC9C  F008         	call	_printf	;wreg free
 10065  0030CA  0012               	return		;funcret
 10066  0030CC                     __end_of_algorithmTest:
 10067                           	opt stack 0
 10068                           tblptru	equ	0xFF8
 10069                           tblptrh	equ	0xFF7
 10070                           tblptrl	equ	0xFF6
 10071                           tablat	equ	0xFF5
 10072                           prodh	equ	0xFF4
 10073                           prodl	equ	0xFF3
 10074                           intcon	equ	0xFF2
 10075                           intcon2	equ	0xFF1
 10076                           intcon3	equ	0xFF0
 10077                           postinc0	equ	0xFEE
 10078                           wreg	equ	0xFE8
 10079                           postdec1	equ	0xFE5
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function _actuatorTest *****************
 10089 ;; Defined at:
 10090 ;;		line 165 in file "Test.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;		None
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;  i               1   45[BANK0 ] unsigned char 
 10095 ;;  i               1   67[BANK0 ] unsigned char 
 10096 ;;  i               1   66[BANK0 ] unsigned char 
 10097 ;;  i               1   65[BANK0 ] unsigned char 
 10098 ;;  i               1   64[BANK0 ] unsigned char 
 10099 ;;  i               1   63[BANK0 ] unsigned char 
 10100 ;;  i               1   62[BANK0 ] unsigned char 
 10101 ;;  i               1   61[BANK0 ] unsigned char 
 10102 ;;  i               1   60[BANK0 ] unsigned char 
 10103 ;;  i               1   59[BANK0 ] unsigned char 
 10104 ;;  i               1   58[BANK0 ] unsigned char 
 10105 ;;  i               1   57[BANK0 ] unsigned char 
 10106 ;;  i               1   56[BANK0 ] unsigned char 
 10107 ;;  i               1   55[BANK0 ] unsigned char 
 10108 ;;  i               1   54[BANK0 ] unsigned char 
 10109 ;;  i               1   53[BANK0 ] unsigned char 
 10110 ;;  i               1   52[BANK0 ] unsigned char 
 10111 ;;  i               1   51[BANK0 ] unsigned char 
 10112 ;;  i               1   50[BANK0 ] unsigned char 
 10113 ;;  i               1   49[BANK0 ] unsigned char 
 10114 ;;  i               1   48[BANK0 ] unsigned char 
 10115 ;;  i               1   47[BANK0 ] unsigned char 
 10116 ;;  i               1   46[BANK0 ] unsigned char 
 10117 ;;  i               2   68[BANK0 ] int 
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  1    wreg      void 
 10120 ;; Registers used:
 10121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;Total ram usage:       27 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:   10
 10134 ;; This function calls:
 10135 ;;		_lcdInst
 10136 ;;		_printf
 10137 ;;		_updateServoPosition
 10138 ;; This function is called by:
 10139 ;;		_Test
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text40
 10144  0008B8                     __ptext40:
 10145                           	opt stack 0
 10146  0008B8                     _actuatorTest:
 10147                           	opt stack 19
 10148                           
 10149                           ;Test.c: 167: int i = 0;
 10150                           
 10151                           ;incstack = 0
 10152  0008B8  0E00               	movlw	0
 10153  0008BA  0100               	movlb	0	; () banked
 10154  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10155  0008BE  0E00               	movlw	0
 10156  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;Test.c: 169: (INTCONbits.GIE = 1);
 10160  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;Test.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10164  0008C4  0E01               	movlw	1
 10165  0008C6  ECE2  F020         	call	_lcdInst
 10166  0008CA  0E68               	movlw	104
 10167  0008CC  0100               	movlb	0	; () banked
 10168  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10169  0008D0  0EE4               	movlw	228
 10170  0008D2                     u7207:
 10171  0008D2  2EE8               	decfsz	wreg,f,c
 10172  0008D4  D7FE               	bra	u7207
 10173  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10174  0008D8  D7FC               	bra	u7207
 10175  0008DA  F000               	nop	
 10176  0008DC  0E80               	movlw	128
 10177  0008DE  ECE2  F020         	call	_lcdInst
 10178                           
 10179                           ;Test.c: 171: printf("ACTUATORS");
 10180  0008E2  0E9A               	movlw	low STR_83
 10181  0008E4  0100               	movlb	0	; () banked
 10182  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10183  0008E8  0EFF               	movlw	high STR_83
 10184  0008EA  0100               	movlb	0	; () banked
 10185  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10186  0008EE  EC9C  F008         	call	_printf	;wreg free
 10187                           
 10188                           ;Test.c: 172: lcdInst(0b11000000);;
 10189  0008F2  0EC0               	movlw	192
 10190  0008F4  ECE2  F020         	call	_lcdInst
 10191                           
 10192                           ;Test.c: 173: printf("PUSH TO START");
 10193  0008F8  0E12               	movlw	low STR_71
 10194  0008FA  0100               	movlb	0	; () banked
 10195  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10196  0008FE  0EFF               	movlw	high STR_71
 10197  000900  0100               	movlb	0	; () banked
 10198  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10199  000904  EC9C  F008         	call	_printf	;wreg free
 10200                           
 10201                           ;Test.c: 174: _delay((unsigned long)((100)*(32000000/4000.0)));
 10202  000908  0E05               	movlw	5
 10203  00090A  0100               	movlb	0	; () banked
 10204  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10205  00090E  0E0F               	movlw	15
 10206  000910  0100               	movlb	0	; () banked
 10207  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10208  000914  0EF1               	movlw	241
 10209  000916                     u7217:
 10210  000916  2EE8               	decfsz	wreg,f,c
 10211  000918  D7FE               	bra	u7217
 10212  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10213  00091C  D7FC               	bra	u7217
 10214  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10215  000920  D7FA               	bra	u7217
 10216  000922                     l1055:
 10217  000922  A281               	btfss	3969,1,c	;volatile
 10218  000924  D7FE               	goto	l1055
 10219  000926                     l1058:
 10220  000926  B281               	btfsc	3969,1,c	;volatile
 10221  000928  D7FE               	goto	l1058
 10222                           
 10223                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10224  00092A  0E01               	movlw	1
 10225  00092C  ECE2  F020         	call	_lcdInst
 10226  000930  0E68               	movlw	104
 10227  000932  0100               	movlb	0	; () banked
 10228  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10229  000936  0EE4               	movlw	228
 10230  000938                     u7227:
 10231  000938  2EE8               	decfsz	wreg,f,c
 10232  00093A  D7FE               	bra	u7227
 10233  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10234  00093E  D7FC               	bra	u7227
 10235  000940  F000               	nop	
 10236  000942  0E80               	movlw	128
 10237  000944  ECE2  F020         	call	_lcdInst
 10238                           
 10239                           ;Test.c: 182: printf("TST: DC MOTORS");
 10240  000948  0ECA               	movlw	low STR_85
 10241  00094A  0100               	movlb	0	; () banked
 10242  00094C  6F8E               	movwf	printf@f& (0+255),b
 10243  00094E  0EFE               	movlw	high STR_85
 10244  000950  0100               	movlb	0	; () banked
 10245  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10246  000954  EC9C  F008         	call	_printf	;wreg free
 10247                           
 10248                           ;Test.c: 183: lcdInst(0b11000000);;
 10249  000958  0EC0               	movlw	192
 10250  00095A  ECE2  F020         	call	_lcdInst
 10251                           
 10252                           ;Test.c: 184: printf("PIN RA5 HIGH.");
 10253  00095E  0EE8               	movlw	low STR_86
 10254  000960  0100               	movlb	0	; () banked
 10255  000962  6F8E               	movwf	printf@f& (0+255),b
 10256  000964  0EFE               	movlw	high STR_86
 10257  000966  0100               	movlb	0	; () banked
 10258  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10259  00096A  EC9C  F008         	call	_printf	;wreg free
 10260                           
 10261                           ;Test.c: 185: LATAbits.LATA5 = 1;
 10262  00096E  8A89               	bsf	3977,5,c	;volatile
 10263                           
 10264                           ;Test.c: 186: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10265  000970  0E00               	movlw	0
 10266  000972  0100               	movlb	0	; () banked
 10267  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10268  000976  0E00               	movlw	0
 10269  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10270                           
 10271                           ; BSR set to: 0
 10272  00097A  0100               	movlb	0	; () banked
 10273  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10274  00097E  D008               	goto	l6388
 10275  000980  0100               	movlb	0	; () banked
 10276  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10277  000984  E123               	bnz	l1062
 10278  000986  0E05               	movlw	5
 10279  000988  0100               	movlb	0	; () banked
 10280  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10281  00098C  B0D8               	btfsc	status,0,c
 10282  00098E  D01E               	goto	l1062
 10283  000990                     l6388:
 10284                           
 10285                           ; BSR set to: 0
 10286  000990  0E00               	movlw	0
 10287  000992  0100               	movlb	0	; () banked
 10288  000994  6FAD               	movwf	actuatorTest@i_1565& (0+255),b
 10289  000996                     l6390:
 10290                           
 10291                           ; BSR set to: 0
 10292  000996  0E63               	movlw	99
 10293  000998  0100               	movlb	0	; () banked
 10294  00099A  65AD               	cpfsgt	actuatorTest@i_1565& (0+255),b
 10295  00099C  D001               	goto	l6394
 10296  00099E  D00C               	goto	l6398
 10297  0009A0                     l6394:
 10298                           
 10299                           ; BSR set to: 0
 10300  0009A0  0E68               	movlw	104
 10301  0009A2  0100               	movlb	0	; () banked
 10302  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10303  0009A6  0EE4               	movlw	228
 10304  0009A8                     u7237:
 10305  0009A8  2EE8               	decfsz	wreg,f,c
 10306  0009AA  D7FE               	bra	u7237
 10307  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10308  0009AE  D7FC               	bra	u7237
 10309  0009B0  F000               	nop	
 10310  0009B2  0100               	movlb	0	; () banked
 10311  0009B4  2BAD               	incf	actuatorTest@i_1565& (0+255),f,b
 10312  0009B6  D7EF               	goto	l6390
 10313  0009B8                     l6398:
 10314                           
 10315                           ; BSR set to: 0
 10316  0009B8  0100               	movlb	0	; () banked
 10317  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10318  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10319                           
 10320                           ; BSR set to: 0
 10321  0009BE  0100               	movlb	0	; () banked
 10322  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10323  0009C2  D7E6               	goto	l6388
 10324  0009C4  0100               	movlb	0	; () banked
 10325  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10326  0009C8  E101               	bnz	u4870
 10327  0009CA  D7DD               	goto	L6
 10328  0009CC                     u4870:
 10329  0009CC                     l1062:
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;Test.c: 187: LATAbits.LATA5 = 0;
 10333  0009CC  9A89               	bcf	3977,5,c	;volatile
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;Test.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10337  0009CE  0E01               	movlw	1
 10338  0009D0  ECE2  F020         	call	_lcdInst
 10339  0009D4  0E68               	movlw	104
 10340  0009D6  0100               	movlb	0	; () banked
 10341  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10342  0009DA  0EE4               	movlw	228
 10343  0009DC                     u7247:
 10344  0009DC  2EE8               	decfsz	wreg,f,c
 10345  0009DE  D7FE               	bra	u7247
 10346  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10347  0009E2  D7FC               	bra	u7247
 10348  0009E4  F000               	nop	
 10349  0009E6  0E80               	movlw	128
 10350  0009E8  ECE2  F020         	call	_lcdInst
 10351                           
 10352                           ;Test.c: 194: printf("TST: COND SOLN'D");
 10353  0009EC  0EBB               	movlw	low STR_87
 10354  0009EE  0100               	movlb	0	; () banked
 10355  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10356  0009F2  0EFC               	movlw	high STR_87
 10357  0009F4  0100               	movlb	0	; () banked
 10358  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10359  0009F8  EC9C  F008         	call	_printf	;wreg free
 10360                           
 10361                           ;Test.c: 195: lcdInst(0b11000000);;
 10362  0009FC  0EC0               	movlw	192
 10363  0009FE  ECE2  F020         	call	_lcdInst
 10364                           
 10365                           ;Test.c: 196: printf("PIN RA3...");
 10366  000A02  0E6F               	movlw	low STR_88
 10367  000A04  0100               	movlb	0	; () banked
 10368  000A06  6F8E               	movwf	printf@f& (0+255),b
 10369  000A08  0EFF               	movlw	high STR_88
 10370  000A0A  0100               	movlb	0	; () banked
 10371  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10372  000A0E  EC9C  F008         	call	_printf	;wreg free
 10373                           
 10374                           ;Test.c: 197: for(i=0;i<5;i++){
 10375  000A12  0E00               	movlw	0
 10376  000A14  0100               	movlb	0	; () banked
 10377  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10378  000A18  0E00               	movlw	0
 10379  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10380                           
 10381                           ; BSR set to: 0
 10382  000A1C  0100               	movlb	0	; () banked
 10383  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10384  000A20  D008               	goto	l1065
 10385  000A22  0100               	movlb	0	; () banked
 10386  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10387  000A26  E12C               	bnz	l1066
 10388  000A28  0E05               	movlw	5
 10389  000A2A  0100               	movlb	0	; () banked
 10390  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10391  000A2E  B0D8               	btfsc	status,0,c
 10392  000A30  D027               	goto	l1066
 10393  000A32                     l1065:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;Test.c: 198: LATAbits.LATA3 = 1;
 10397  000A32  8689               	bsf	3977,3,c	;volatile
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;Test.c: 199: _delay((unsigned long)((300)*(32000000/4000.0)));
 10401  000A34  0E0D               	movlw	13
 10402  000A36  0100               	movlb	0	; () banked
 10403  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10404  000A3A  0E2D               	movlw	45
 10405  000A3C  0100               	movlb	0	; () banked
 10406  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10407  000A40  0ED7               	movlw	215
 10408  000A42                     u7257:
 10409  000A42  2EE8               	decfsz	wreg,f,c
 10410  000A44  D7FE               	bra	u7257
 10411  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10412  000A48  D7FC               	bra	u7257
 10413  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10414  000A4C  D7FA               	bra	u7257
 10415  000A4E  D000               	nop2	
 10416                           
 10417                           ;Test.c: 200: LATAbits.LATA3 = ~1;
 10418  000A50  9689               	bcf	3977,3,c	;volatile
 10419                           
 10420                           ;Test.c: 201: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10421  000A52  0E1D               	movlw	29
 10422  000A54  0100               	movlb	0	; () banked
 10423  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10424  000A58  0E69               	movlw	105
 10425  000A5A  0100               	movlb	0	; () banked
 10426  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10427  000A5E  0EA5               	movlw	165
 10428  000A60                     u7267:
 10429  000A60  2EE8               	decfsz	wreg,f,c
 10430  000A62  D7FE               	bra	u7267
 10431  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10432  000A66  D7FC               	bra	u7267
 10433  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10434  000A6A  D7FA               	bra	u7267
 10435  000A6C  0100               	movlb	0	; () banked
 10436  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10437  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10438  000A72  0100               	movlb	0	; () banked
 10439  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10440  000A76  D7DD               	goto	l1065
 10441  000A78  0100               	movlb	0	; () banked
 10442  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10443  000A7C  E101               	bnz	u4890
 10444  000A7E  D7D4               	goto	L7
 10445  000A80                     u4890:
 10446  000A80                     l1066:
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;Test.c: 202: }
 10450                           ;Test.c: 203: LATAbits.LATA3 = ~1;
 10451  000A80  9689               	bcf	3977,3,c	;volatile
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;Test.c: 204: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10455  000A82  0E01               	movlw	1
 10456  000A84  ECE2  F020         	call	_lcdInst
 10457  000A88  0E68               	movlw	104
 10458  000A8A  0100               	movlb	0	; () banked
 10459  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10460  000A8E  0EE4               	movlw	228
 10461  000A90                     u7277:
 10462  000A90  2EE8               	decfsz	wreg,f,c
 10463  000A92  D7FE               	bra	u7277
 10464  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10465  000A96  D7FC               	bra	u7277
 10466  000A98  F000               	nop	
 10467  000A9A  0E80               	movlw	128
 10468  000A9C  ECE2  F020         	call	_lcdInst
 10469                           
 10470                           ;Test.c: 210: printf("TST: PUSH SOLN'D");
 10471  000AA0  0ECC               	movlw	low STR_89
 10472  000AA2  0100               	movlb	0	; () banked
 10473  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10474  000AA6  0EFC               	movlw	high STR_89
 10475  000AA8  0100               	movlb	0	; () banked
 10476  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10477  000AAC  EC9C  F008         	call	_printf	;wreg free
 10478                           
 10479                           ;Test.c: 211: lcdInst(0b11000000);;
 10480  000AB0  0EC0               	movlw	192
 10481  000AB2  ECE2  F020         	call	_lcdInst
 10482                           
 10483                           ;Test.c: 212: printf("PIN RA4...");
 10484  000AB6  0E7A               	movlw	low STR_90
 10485  000AB8  0100               	movlb	0	; () banked
 10486  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10487  000ABC  0EFF               	movlw	high STR_90
 10488  000ABE  0100               	movlb	0	; () banked
 10489  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10490  000AC2  EC9C  F008         	call	_printf	;wreg free
 10491                           
 10492                           ;Test.c: 213: for(i=0;i<5;i++){
 10493  000AC6  0E00               	movlw	0
 10494  000AC8  0100               	movlb	0	; () banked
 10495  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10496  000ACC  0E00               	movlw	0
 10497  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10498                           
 10499                           ; BSR set to: 0
 10500  000AD0  0100               	movlb	0	; () banked
 10501  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10502  000AD4  D008               	goto	l1067
 10503  000AD6  0100               	movlb	0	; () banked
 10504  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10505  000ADA  E12C               	bnz	l1068
 10506  000ADC  0E05               	movlw	5
 10507  000ADE  0100               	movlb	0	; () banked
 10508  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10509  000AE2  B0D8               	btfsc	status,0,c
 10510  000AE4  D027               	goto	l1068
 10511  000AE6                     l1067:
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;Test.c: 214: LATAbits.LATA4 = 1;
 10515  000AE6  8889               	bsf	3977,4,c	;volatile
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;Test.c: 215: _delay((unsigned long)((300)*(32000000/4000.0)));
 10519  000AE8  0E0D               	movlw	13
 10520  000AEA  0100               	movlb	0	; () banked
 10521  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10522  000AEE  0E2D               	movlw	45
 10523  000AF0  0100               	movlb	0	; () banked
 10524  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10525  000AF4  0ED7               	movlw	215
 10526  000AF6                     u7287:
 10527  000AF6  2EE8               	decfsz	wreg,f,c
 10528  000AF8  D7FE               	bra	u7287
 10529  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10530  000AFC  D7FC               	bra	u7287
 10531  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10532  000B00  D7FA               	bra	u7287
 10533  000B02  D000               	nop2	
 10534                           
 10535                           ;Test.c: 216: LATAbits.LATA4 = ~1;
 10536  000B04  9889               	bcf	3977,4,c	;volatile
 10537                           
 10538                           ;Test.c: 217: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10539  000B06  0E1D               	movlw	29
 10540  000B08  0100               	movlb	0	; () banked
 10541  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10542  000B0C  0E69               	movlw	105
 10543  000B0E  0100               	movlb	0	; () banked
 10544  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10545  000B12  0EA5               	movlw	165
 10546  000B14                     u7297:
 10547  000B14  2EE8               	decfsz	wreg,f,c
 10548  000B16  D7FE               	bra	u7297
 10549  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10550  000B1A  D7FC               	bra	u7297
 10551  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10552  000B1E  D7FA               	bra	u7297
 10553  000B20  0100               	movlb	0	; () banked
 10554  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10555  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10556  000B26  0100               	movlb	0	; () banked
 10557  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10558  000B2A  D7DD               	goto	l1067
 10559  000B2C  0100               	movlb	0	; () banked
 10560  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10561  000B30  E101               	bnz	u4910
 10562  000B32  D7D4               	goto	L8
 10563  000B34                     u4910:
 10564  000B34                     l1068:
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;Test.c: 218: }
 10568                           ;Test.c: 219: LATAbits.LATA4 = ~1;
 10569  000B34  9889               	bcf	3977,4,c	;volatile
 10570                           
 10571                           ; BSR set to: 0
 10572                           ;Test.c: 220: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10573  000B36  0E01               	movlw	1
 10574  000B38  ECE2  F020         	call	_lcdInst
 10575  000B3C  0E68               	movlw	104
 10576  000B3E  0100               	movlb	0	; () banked
 10577  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10578  000B42  0EE4               	movlw	228
 10579  000B44                     u7307:
 10580  000B44  2EE8               	decfsz	wreg,f,c
 10581  000B46  D7FE               	bra	u7307
 10582  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10583  000B4A  D7FC               	bra	u7307
 10584  000B4C  F000               	nop	
 10585  000B4E  0E80               	movlw	128
 10586  000B50  ECE2  F020         	call	_lcdInst
 10587                           
 10588                           ;Test.c: 223: machine_state = Sorting_state;
 10589  000B54  0E01               	movlw	1
 10590  000B56  0100               	movlb	0	; () banked
 10591  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;Test.c: 224: was_low_1 = 0;
 10595  000B5A  0E00               	movlw	0
 10596  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10597  000B5E  0E00               	movlw	0
 10598  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;Test.c: 225: was_low_1 = 0;
 10602  000B62  0E00               	movlw	0
 10603  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10604  000B66  0E00               	movlw	0
 10605  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;Test.c: 232: printf("TST: PAN SERVO");
 10609  000B6A  0EAC               	movlw	low STR_91
 10610  000B6C  0100               	movlb	0	; () banked
 10611  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10612  000B70  0EFE               	movlw	high STR_91
 10613  000B72  0100               	movlb	0	; () banked
 10614  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10615  000B76  EC9C  F008         	call	_printf	;wreg free
 10616                           
 10617                           ;Test.c: 233: lcdInst(0b11000000);;
 10618  000B7A  0EC0               	movlw	192
 10619  000B7C  ECE2  F020         	call	_lcdInst
 10620                           
 10621                           ;Test.c: 234: printf("MIDDLE -- 2s    ");
 10622  000B80  0E44               	movlw	low STR_92
 10623  000B82  0100               	movlb	0	; () banked
 10624  000B84  6F8E               	movwf	printf@f& (0+255),b
 10625  000B86  0EFC               	movlw	high STR_92
 10626  000B88  0100               	movlb	0	; () banked
 10627  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10628  000B8C  EC9C  F008         	call	_printf	;wreg free
 10629                           
 10630                           ;Test.c: 235: updateServoPosition(1500, 1);
 10631  000B90  0E05               	movlw	5
 10632  000B92  0100               	movlb	0	; () banked
 10633  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10634  000B96  0EDC               	movlw	220
 10635  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10636  000B9A  0E00               	movlw	0
 10637  000B9C  0100               	movlb	0	; () banked
 10638  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10639  000BA0  0E01               	movlw	1
 10640  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10641  000BA4  EC5F  F01B         	call	_updateServoPosition	;wreg free
 10642                           
 10643                           ;Test.c: 236: TMR1ON = 1;
 10644  000BA8  80CD               	bsf	4045,0,c	;volatile
 10645                           
 10646                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10647  000BAA  0E00               	movlw	0
 10648  000BAC  0100               	movlb	0	; () banked
 10649  000BAE  6FAE               	movwf	actuatorTest@i_1572& (0+255),b
 10650  000BB0                     l6474:
 10651                           
 10652                           ; BSR set to: 0
 10653  000BB0  0E63               	movlw	99
 10654  000BB2  0100               	movlb	0	; () banked
 10655  000BB4  65AE               	cpfsgt	actuatorTest@i_1572& (0+255),b
 10656  000BB6  D001               	goto	l6478
 10657  000BB8  D00C               	goto	l6482
 10658  000BBA                     l6478:
 10659                           
 10660                           ; BSR set to: 0
 10661  000BBA  0E68               	movlw	104
 10662  000BBC  0100               	movlb	0	; () banked
 10663  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10664  000BC0  0EE4               	movlw	228
 10665  000BC2                     u7317:
 10666  000BC2  2EE8               	decfsz	wreg,f,c
 10667  000BC4  D7FE               	bra	u7317
 10668  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10669  000BC8  D7FC               	bra	u7317
 10670  000BCA  F000               	nop	
 10671  000BCC  0100               	movlb	0	; () banked
 10672  000BCE  2BAE               	incf	actuatorTest@i_1572& (0+255),f,b
 10673  000BD0  D7EF               	goto	l6474
 10674  000BD2                     l6482:
 10675                           
 10676                           ; BSR set to: 0
 10677  000BD2  0E00               	movlw	0
 10678  000BD4  0100               	movlb	0	; () banked
 10679  000BD6  6FAF               	movwf	actuatorTest@i_1573& (0+255),b
 10680  000BD8                     l6484:
 10681                           
 10682                           ; BSR set to: 0
 10683  000BD8  0E63               	movlw	99
 10684  000BDA  0100               	movlb	0	; () banked
 10685  000BDC  65AF               	cpfsgt	actuatorTest@i_1573& (0+255),b
 10686  000BDE  D001               	goto	l6488
 10687  000BE0  D00C               	goto	l6492
 10688  000BE2                     l6488:
 10689                           
 10690                           ; BSR set to: 0
 10691  000BE2  0E68               	movlw	104
 10692  000BE4  0100               	movlb	0	; () banked
 10693  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10694  000BE8  0EE4               	movlw	228
 10695  000BEA                     u7327:
 10696  000BEA  2EE8               	decfsz	wreg,f,c
 10697  000BEC  D7FE               	bra	u7327
 10698  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10699  000BF0  D7FC               	bra	u7327
 10700  000BF2  F000               	nop	
 10701  000BF4  0100               	movlb	0	; () banked
 10702  000BF6  2BAF               	incf	actuatorTest@i_1573& (0+255),f,b
 10703  000BF8  D7EF               	goto	l6484
 10704  000BFA                     l6492:
 10705                           
 10706                           ; BSR set to: 0
 10707                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10708  000BFA  0E80               	movlw	128
 10709  000BFC  ECE2  F020         	call	_lcdInst
 10710  000C00  0EC0               	movlw	192
 10711  000C02  ECE2  F020         	call	_lcdInst
 10712                           
 10713                           ;Test.c: 240: printf("RIGHT -- 2s     ");
 10714  000C06  0E33               	movlw	low STR_93
 10715  000C08  0100               	movlb	0	; () banked
 10716  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10717  000C0C  0EFC               	movlw	high STR_93
 10718  000C0E  0100               	movlb	0	; () banked
 10719  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10720  000C12  EC9C  F008         	call	_printf	;wreg free
 10721                           
 10722                           ;Test.c: 241: updateServoPosition(1000, 1);
 10723  000C16  0E03               	movlw	3
 10724  000C18  0100               	movlb	0	; () banked
 10725  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10726  000C1C  0EE8               	movlw	232
 10727  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10728  000C20  0E00               	movlw	0
 10729  000C22  0100               	movlb	0	; () banked
 10730  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10731  000C26  0E01               	movlw	1
 10732  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10733  000C2A  EC5F  F01B         	call	_updateServoPosition	;wreg free
 10734                           
 10735                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10736  000C2E  0E00               	movlw	0
 10737  000C30  0100               	movlb	0	; () banked
 10738  000C32  6FB0               	movwf	actuatorTest@i_1575& (0+255),b
 10739  000C34                     l6500:
 10740                           
 10741                           ; BSR set to: 0
 10742  000C34  0E63               	movlw	99
 10743  000C36  0100               	movlb	0	; () banked
 10744  000C38  65B0               	cpfsgt	actuatorTest@i_1575& (0+255),b
 10745  000C3A  D001               	goto	l6504
 10746  000C3C  D00C               	goto	l6508
 10747  000C3E                     l6504:
 10748                           
 10749                           ; BSR set to: 0
 10750  000C3E  0E68               	movlw	104
 10751  000C40  0100               	movlb	0	; () banked
 10752  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10753  000C44  0EE4               	movlw	228
 10754  000C46                     u7337:
 10755  000C46  2EE8               	decfsz	wreg,f,c
 10756  000C48  D7FE               	bra	u7337
 10757  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10758  000C4C  D7FC               	bra	u7337
 10759  000C4E  F000               	nop	
 10760  000C50  0100               	movlb	0	; () banked
 10761  000C52  2BB0               	incf	actuatorTest@i_1575& (0+255),f,b
 10762  000C54  D7EF               	goto	l6500
 10763  000C56                     l6508:
 10764                           
 10765                           ; BSR set to: 0
 10766  000C56  0E00               	movlw	0
 10767  000C58  0100               	movlb	0	; () banked
 10768  000C5A  6FB1               	movwf	actuatorTest@i_1576& (0+255),b
 10769  000C5C                     l6510:
 10770                           
 10771                           ; BSR set to: 0
 10772  000C5C  0E63               	movlw	99
 10773  000C5E  0100               	movlb	0	; () banked
 10774  000C60  65B1               	cpfsgt	actuatorTest@i_1576& (0+255),b
 10775  000C62  D001               	goto	l6514
 10776  000C64  D00C               	goto	l6518
 10777  000C66                     l6514:
 10778                           
 10779                           ; BSR set to: 0
 10780  000C66  0E68               	movlw	104
 10781  000C68  0100               	movlb	0	; () banked
 10782  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10783  000C6C  0EE4               	movlw	228
 10784  000C6E                     u7347:
 10785  000C6E  2EE8               	decfsz	wreg,f,c
 10786  000C70  D7FE               	bra	u7347
 10787  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10788  000C74  D7FC               	bra	u7347
 10789  000C76  F000               	nop	
 10790  000C78  0100               	movlb	0	; () banked
 10791  000C7A  2BB1               	incf	actuatorTest@i_1576& (0+255),f,b
 10792  000C7C  D7EF               	goto	l6510
 10793  000C7E                     l6518:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10797  000C7E  0E80               	movlw	128
 10798  000C80  ECE2  F020         	call	_lcdInst
 10799  000C84  0EC0               	movlw	192
 10800  000C86  ECE2  F020         	call	_lcdInst
 10801                           
 10802                           ;Test.c: 245: printf("LEFT -- 2s      ");
 10803  000C8A  0E11               	movlw	low STR_94
 10804  000C8C  0100               	movlb	0	; () banked
 10805  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10806  000C90  0EFC               	movlw	high STR_94
 10807  000C92  0100               	movlb	0	; () banked
 10808  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10809  000C96  EC9C  F008         	call	_printf	;wreg free
 10810                           
 10811                           ;Test.c: 246: updateServoPosition(2000, 1);
 10812  000C9A  0E07               	movlw	7
 10813  000C9C  0100               	movlb	0	; () banked
 10814  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10815  000CA0  0ED0               	movlw	208
 10816  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10817  000CA4  0E00               	movlw	0
 10818  000CA6  0100               	movlb	0	; () banked
 10819  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10820  000CAA  0E01               	movlw	1
 10821  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10822  000CAE  EC5F  F01B         	call	_updateServoPosition	;wreg free
 10823                           
 10824                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10825  000CB2  0E00               	movlw	0
 10826  000CB4  0100               	movlb	0	; () banked
 10827  000CB6  6FB2               	movwf	actuatorTest@i_1578& (0+255),b
 10828  000CB8                     l6526:
 10829                           
 10830                           ; BSR set to: 0
 10831  000CB8  0E63               	movlw	99
 10832  000CBA  0100               	movlb	0	; () banked
 10833  000CBC  65B2               	cpfsgt	actuatorTest@i_1578& (0+255),b
 10834  000CBE  D001               	goto	l6530
 10835  000CC0  D00C               	goto	l6534
 10836  000CC2                     l6530:
 10837                           
 10838                           ; BSR set to: 0
 10839  000CC2  0E68               	movlw	104
 10840  000CC4  0100               	movlb	0	; () banked
 10841  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10842  000CC8  0EE4               	movlw	228
 10843  000CCA                     u7357:
 10844  000CCA  2EE8               	decfsz	wreg,f,c
 10845  000CCC  D7FE               	bra	u7357
 10846  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10847  000CD0  D7FC               	bra	u7357
 10848  000CD2  F000               	nop	
 10849  000CD4  0100               	movlb	0	; () banked
 10850  000CD6  2BB2               	incf	actuatorTest@i_1578& (0+255),f,b
 10851  000CD8  D7EF               	goto	l6526
 10852  000CDA                     l6534:
 10853                           
 10854                           ; BSR set to: 0
 10855  000CDA  0E00               	movlw	0
 10856  000CDC  0100               	movlb	0	; () banked
 10857  000CDE  6FB3               	movwf	actuatorTest@i_1579& (0+255),b
 10858  000CE0                     l6536:
 10859                           
 10860                           ; BSR set to: 0
 10861  000CE0  0E63               	movlw	99
 10862  000CE2  0100               	movlb	0	; () banked
 10863  000CE4  65B3               	cpfsgt	actuatorTest@i_1579& (0+255),b
 10864  000CE6  D001               	goto	l6540
 10865  000CE8  D00C               	goto	l6544
 10866  000CEA                     l6540:
 10867                           
 10868                           ; BSR set to: 0
 10869  000CEA  0E68               	movlw	104
 10870  000CEC  0100               	movlb	0	; () banked
 10871  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10872  000CF0  0EE4               	movlw	228
 10873  000CF2                     u7367:
 10874  000CF2  2EE8               	decfsz	wreg,f,c
 10875  000CF4  D7FE               	bra	u7367
 10876  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10877  000CF8  D7FC               	bra	u7367
 10878  000CFA  F000               	nop	
 10879  000CFC  0100               	movlb	0	; () banked
 10880  000CFE  2BB3               	incf	actuatorTest@i_1579& (0+255),f,b
 10881  000D00  D7EF               	goto	l6536
 10882  000D02                     l6544:
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10886  000D02  0E80               	movlw	128
 10887  000D04  ECE2  F020         	call	_lcdInst
 10888  000D08  0EC0               	movlw	192
 10889  000D0A  ECE2  F020         	call	_lcdInst
 10890                           
 10891                           ;Test.c: 250: printf("MID-LEFT -- 2s  ");
 10892  000D0E  0E66               	movlw	low STR_95
 10893  000D10  0100               	movlb	0	; () banked
 10894  000D12  6F8E               	movwf	printf@f& (0+255),b
 10895  000D14  0EFC               	movlw	high STR_95
 10896  000D16  0100               	movlb	0	; () banked
 10897  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 10898  000D1A  EC9C  F008         	call	_printf	;wreg free
 10899                           
 10900                           ;Test.c: 251: updateServoPosition(1666, 1);
 10901  000D1E  0E06               	movlw	6
 10902  000D20  0100               	movlb	0	; () banked
 10903  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10904  000D24  0E82               	movlw	130
 10905  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10906  000D28  0E00               	movlw	0
 10907  000D2A  0100               	movlb	0	; () banked
 10908  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10909  000D2E  0E01               	movlw	1
 10910  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10911  000D32  EC5F  F01B         	call	_updateServoPosition	;wreg free
 10912                           
 10913                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10914  000D36  0E00               	movlw	0
 10915  000D38  0100               	movlb	0	; () banked
 10916  000D3A  6FB4               	movwf	actuatorTest@i_1581& (0+255),b
 10917  000D3C                     l6552:
 10918                           
 10919                           ; BSR set to: 0
 10920  000D3C  0E63               	movlw	99
 10921  000D3E  0100               	movlb	0	; () banked
 10922  000D40  65B4               	cpfsgt	actuatorTest@i_1581& (0+255),b
 10923  000D42  D001               	goto	l6556
 10924  000D44  D00C               	goto	l6560
 10925  000D46                     l6556:
 10926                           
 10927                           ; BSR set to: 0
 10928  000D46  0E68               	movlw	104
 10929  000D48  0100               	movlb	0	; () banked
 10930  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10931  000D4C  0EE4               	movlw	228
 10932  000D4E                     u7377:
 10933  000D4E  2EE8               	decfsz	wreg,f,c
 10934  000D50  D7FE               	bra	u7377
 10935  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10936  000D54  D7FC               	bra	u7377
 10937  000D56  F000               	nop	
 10938  000D58  0100               	movlb	0	; () banked
 10939  000D5A  2BB4               	incf	actuatorTest@i_1581& (0+255),f,b
 10940  000D5C  D7EF               	goto	l6552
 10941  000D5E                     l6560:
 10942                           
 10943                           ; BSR set to: 0
 10944  000D5E  0E00               	movlw	0
 10945  000D60  0100               	movlb	0	; () banked
 10946  000D62  6FB5               	movwf	actuatorTest@i_1582& (0+255),b
 10947  000D64                     l6562:
 10948                           
 10949                           ; BSR set to: 0
 10950  000D64  0E63               	movlw	99
 10951  000D66  0100               	movlb	0	; () banked
 10952  000D68  65B5               	cpfsgt	actuatorTest@i_1582& (0+255),b
 10953  000D6A  D001               	goto	l6566
 10954  000D6C  D00C               	goto	l6570
 10955  000D6E                     l6566:
 10956                           
 10957                           ; BSR set to: 0
 10958  000D6E  0E68               	movlw	104
 10959  000D70  0100               	movlb	0	; () banked
 10960  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 10961  000D74  0EE4               	movlw	228
 10962  000D76                     u7387:
 10963  000D76  2EE8               	decfsz	wreg,f,c
 10964  000D78  D7FE               	bra	u7387
 10965  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10966  000D7C  D7FC               	bra	u7387
 10967  000D7E  F000               	nop	
 10968  000D80  0100               	movlb	0	; () banked
 10969  000D82  2BB5               	incf	actuatorTest@i_1582& (0+255),f,b
 10970  000D84  D7EF               	goto	l6562
 10971  000D86                     l6570:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10975  000D86  0E80               	movlw	128
 10976  000D88  ECE2  F020         	call	_lcdInst
 10977  000D8C  0EC0               	movlw	192
 10978  000D8E  ECE2  F020         	call	_lcdInst
 10979                           
 10980                           ;Test.c: 255: printf("MID-RIGHT -- 2s ");
 10981  000D92  0E77               	movlw	low STR_96
 10982  000D94  0100               	movlb	0	; () banked
 10983  000D96  6F8E               	movwf	printf@f& (0+255),b
 10984  000D98  0EFC               	movlw	high STR_96
 10985  000D9A  0100               	movlb	0	; () banked
 10986  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10987  000D9E  EC9C  F008         	call	_printf	;wreg free
 10988                           
 10989                           ;Test.c: 256: updateServoPosition(1333, 1);
 10990  000DA2  0E05               	movlw	5
 10991  000DA4  0100               	movlb	0	; () banked
 10992  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10993  000DA8  0E35               	movlw	53
 10994  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10995  000DAC  0E00               	movlw	0
 10996  000DAE  0100               	movlb	0	; () banked
 10997  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10998  000DB2  0E01               	movlw	1
 10999  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11000  000DB6  EC5F  F01B         	call	_updateServoPosition	;wreg free
 11001                           
 11002                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11003  000DBA  0E00               	movlw	0
 11004  000DBC  0100               	movlb	0	; () banked
 11005  000DBE  6FB6               	movwf	actuatorTest@i_1584& (0+255),b
 11006  000DC0                     l6578:
 11007                           
 11008                           ; BSR set to: 0
 11009  000DC0  0E63               	movlw	99
 11010  000DC2  0100               	movlb	0	; () banked
 11011  000DC4  65B6               	cpfsgt	actuatorTest@i_1584& (0+255),b
 11012  000DC6  D001               	goto	l6582
 11013  000DC8  D00C               	goto	l6586
 11014  000DCA                     l6582:
 11015                           
 11016                           ; BSR set to: 0
 11017  000DCA  0E68               	movlw	104
 11018  000DCC  0100               	movlb	0	; () banked
 11019  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11020  000DD0  0EE4               	movlw	228
 11021  000DD2                     u7397:
 11022  000DD2  2EE8               	decfsz	wreg,f,c
 11023  000DD4  D7FE               	bra	u7397
 11024  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11025  000DD8  D7FC               	bra	u7397
 11026  000DDA  F000               	nop	
 11027  000DDC  0100               	movlb	0	; () banked
 11028  000DDE  2BB6               	incf	actuatorTest@i_1584& (0+255),f,b
 11029  000DE0  D7EF               	goto	l6578
 11030  000DE2                     l6586:
 11031                           
 11032                           ; BSR set to: 0
 11033  000DE2  0E00               	movlw	0
 11034  000DE4  0100               	movlb	0	; () banked
 11035  000DE6  6FB7               	movwf	actuatorTest@i_1585& (0+255),b
 11036  000DE8                     l6588:
 11037                           
 11038                           ; BSR set to: 0
 11039  000DE8  0E63               	movlw	99
 11040  000DEA  0100               	movlb	0	; () banked
 11041  000DEC  65B7               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11042  000DEE  D001               	goto	l6592
 11043  000DF0  D00C               	goto	l6596
 11044  000DF2                     l6592:
 11045                           
 11046                           ; BSR set to: 0
 11047  000DF2  0E68               	movlw	104
 11048  000DF4  0100               	movlb	0	; () banked
 11049  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11050  000DF8  0EE4               	movlw	228
 11051  000DFA                     u7407:
 11052  000DFA  2EE8               	decfsz	wreg,f,c
 11053  000DFC  D7FE               	bra	u7407
 11054  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11055  000E00  D7FC               	bra	u7407
 11056  000E02  F000               	nop	
 11057  000E04  0100               	movlb	0	; () banked
 11058  000E06  2BB7               	incf	actuatorTest@i_1585& (0+255),f,b
 11059  000E08  D7EF               	goto	l6588
 11060  000E0A                     l6596:
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;Test.c: 259: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11064  000E0A  0E80               	movlw	128
 11065  000E0C  ECE2  F020         	call	_lcdInst
 11066  000E10  0EC0               	movlw	192
 11067  000E12  ECE2  F020         	call	_lcdInst
 11068                           
 11069                           ;Test.c: 260: printf("MID -- 2s       ");
 11070  000E16  0EEF               	movlw	low STR_97
 11071  000E18  0100               	movlb	0	; () banked
 11072  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11073  000E1C  0EFB               	movlw	high STR_97
 11074  000E1E  0100               	movlb	0	; () banked
 11075  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11076  000E22  EC9C  F008         	call	_printf	;wreg free
 11077                           
 11078                           ;Test.c: 261: updateServoPosition(1500, 1);
 11079  000E26  0E05               	movlw	5
 11080  000E28  0100               	movlb	0	; () banked
 11081  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11082  000E2C  0EDC               	movlw	220
 11083  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11084  000E30  0E00               	movlw	0
 11085  000E32  0100               	movlb	0	; () banked
 11086  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11087  000E36  0E01               	movlw	1
 11088  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11089  000E3A  EC5F  F01B         	call	_updateServoPosition	;wreg free
 11090                           
 11091                           ;Test.c: 262: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11092  000E3E  0E00               	movlw	0
 11093  000E40  0100               	movlb	0	; () banked
 11094  000E42  6FB8               	movwf	actuatorTest@i_1587& (0+255),b
 11095  000E44                     l6604:
 11096                           
 11097                           ; BSR set to: 0
 11098  000E44  0E63               	movlw	99
 11099  000E46  0100               	movlb	0	; () banked
 11100  000E48  65B8               	cpfsgt	actuatorTest@i_1587& (0+255),b
 11101  000E4A  D001               	goto	l6608
 11102  000E4C  D00C               	goto	l6612
 11103  000E4E                     l6608:
 11104                           
 11105                           ; BSR set to: 0
 11106  000E4E  0E68               	movlw	104
 11107  000E50  0100               	movlb	0	; () banked
 11108  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11109  000E54  0EE4               	movlw	228
 11110  000E56                     u7417:
 11111  000E56  2EE8               	decfsz	wreg,f,c
 11112  000E58  D7FE               	bra	u7417
 11113  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11114  000E5C  D7FC               	bra	u7417
 11115  000E5E  F000               	nop	
 11116  000E60  0100               	movlb	0	; () banked
 11117  000E62  2BB8               	incf	actuatorTest@i_1587& (0+255),f,b
 11118  000E64  D7EF               	goto	l6604
 11119  000E66                     l6612:
 11120                           
 11121                           ; BSR set to: 0
 11122  000E66  0E00               	movlw	0
 11123  000E68  0100               	movlb	0	; () banked
 11124  000E6A  6FB9               	movwf	actuatorTest@i_1588& (0+255),b
 11125  000E6C                     l6614:
 11126                           
 11127                           ; BSR set to: 0
 11128  000E6C  0E63               	movlw	99
 11129  000E6E  0100               	movlb	0	; () banked
 11130  000E70  65B9               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11131  000E72  D001               	goto	l6618
 11132  000E74  D00C               	goto	l1092
 11133  000E76                     l6618:
 11134                           
 11135                           ; BSR set to: 0
 11136  000E76  0E68               	movlw	104
 11137  000E78  0100               	movlb	0	; () banked
 11138  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11139  000E7C  0EE4               	movlw	228
 11140  000E7E                     u7427:
 11141  000E7E  2EE8               	decfsz	wreg,f,c
 11142  000E80  D7FE               	bra	u7427
 11143  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11144  000E84  D7FC               	bra	u7427
 11145  000E86  F000               	nop	
 11146  000E88  0100               	movlb	0	; () banked
 11147  000E8A  2BB9               	incf	actuatorTest@i_1588& (0+255),f,b
 11148  000E8C  D7EF               	goto	l6614
 11149  000E8E                     l1092:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;Test.c: 263: TMR1ON = 0;
 11153  000E8E  90CD               	bcf	4045,0,c	;volatile
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;Test.c: 270: printf("TST: TILT SERVO");
 11157  000E90  0E41               	movlw	low STR_98
 11158  000E92  0100               	movlb	0	; () banked
 11159  000E94  6F8E               	movwf	printf@f& (0+255),b
 11160  000E96  0EFE               	movlw	high STR_98
 11161  000E98  0100               	movlb	0	; () banked
 11162  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11163  000E9C  EC9C  F008         	call	_printf	;wreg free
 11164                           
 11165                           ;Test.c: 271: lcdInst(0b11000000);;
 11166  000EA0  0EC0               	movlw	192
 11167  000EA2  ECE2  F020         	call	_lcdInst
 11168                           
 11169                           ;Test.c: 272: printf("LEVEL -- 2s     ");
 11170  000EA6  0E22               	movlw	low STR_99
 11171  000EA8  0100               	movlb	0	; () banked
 11172  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11173  000EAC  0EFC               	movlw	high STR_99
 11174  000EAE  0100               	movlb	0	; () banked
 11175  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11176  000EB2  EC9C  F008         	call	_printf	;wreg free
 11177                           
 11178                           ;Test.c: 273: updateServoPosition(1000, 3);
 11179  000EB6  0E03               	movlw	3
 11180  000EB8  0100               	movlb	0	; () banked
 11181  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11182  000EBC  0EE8               	movlw	232
 11183  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11184  000EC0  0E00               	movlw	0
 11185  000EC2  0100               	movlb	0	; () banked
 11186  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11187  000EC6  0E03               	movlw	3
 11188  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11189  000ECA  EC5F  F01B         	call	_updateServoPosition	;wreg free
 11190                           
 11191                           ;Test.c: 274: TMR3ON = 1;
 11192  000ECE  80B1               	bsf	4017,0,c	;volatile
 11193                           
 11194                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11195  000ED0  0E00               	movlw	0
 11196  000ED2  0100               	movlb	0	; () banked
 11197  000ED4  6FBA               	movwf	actuatorTest@i_1591& (0+255),b
 11198  000ED6                     l6632:
 11199                           
 11200                           ; BSR set to: 0
 11201  000ED6  0E63               	movlw	99
 11202  000ED8  0100               	movlb	0	; () banked
 11203  000EDA  65BA               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11204  000EDC  D001               	goto	l6636
 11205  000EDE  D00C               	goto	l6640
 11206  000EE0                     l6636:
 11207                           
 11208                           ; BSR set to: 0
 11209  000EE0  0E68               	movlw	104
 11210  000EE2  0100               	movlb	0	; () banked
 11211  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11212  000EE6  0EE4               	movlw	228
 11213  000EE8                     u7437:
 11214  000EE8  2EE8               	decfsz	wreg,f,c
 11215  000EEA  D7FE               	bra	u7437
 11216  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11217  000EEE  D7FC               	bra	u7437
 11218  000EF0  F000               	nop	
 11219  000EF2  0100               	movlb	0	; () banked
 11220  000EF4  2BBA               	incf	actuatorTest@i_1591& (0+255),f,b
 11221  000EF6  D7EF               	goto	l6632
 11222  000EF8                     l6640:
 11223                           
 11224                           ; BSR set to: 0
 11225  000EF8  0E00               	movlw	0
 11226  000EFA  0100               	movlb	0	; () banked
 11227  000EFC  6FBB               	movwf	actuatorTest@i_1592& (0+255),b
 11228  000EFE                     l6642:
 11229                           
 11230                           ; BSR set to: 0
 11231  000EFE  0E63               	movlw	99
 11232  000F00  0100               	movlb	0	; () banked
 11233  000F02  65BB               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11234  000F04  D001               	goto	l6646
 11235  000F06  D00C               	goto	l6650
 11236  000F08                     l6646:
 11237                           
 11238                           ; BSR set to: 0
 11239  000F08  0E68               	movlw	104
 11240  000F0A  0100               	movlb	0	; () banked
 11241  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11242  000F0E  0EE4               	movlw	228
 11243  000F10                     u7447:
 11244  000F10  2EE8               	decfsz	wreg,f,c
 11245  000F12  D7FE               	bra	u7447
 11246  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11247  000F16  D7FC               	bra	u7447
 11248  000F18  F000               	nop	
 11249  000F1A  0100               	movlb	0	; () banked
 11250  000F1C  2BBB               	incf	actuatorTest@i_1592& (0+255),f,b
 11251  000F1E  D7EF               	goto	l6642
 11252  000F20                     l6650:
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11256  000F20  0E80               	movlw	128
 11257  000F22  ECE2  F020         	call	_lcdInst
 11258  000F26  0EC0               	movlw	192
 11259  000F28  ECE2  F020         	call	_lcdInst
 11260                           
 11261                           ;Test.c: 278: printf("DROP -- 2s      ");
 11262  000F2C  0E00               	movlw	low STR_100
 11263  000F2E  0100               	movlb	0	; () banked
 11264  000F30  6F8E               	movwf	printf@f& (0+255),b
 11265  000F32  0EFC               	movlw	high STR_100
 11266  000F34  0100               	movlb	0	; () banked
 11267  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11268  000F38  EC9C  F008         	call	_printf	;wreg free
 11269                           
 11270                           ;Test.c: 279: updateServoPosition(1500, 3);
 11271  000F3C  0E05               	movlw	5
 11272  000F3E  0100               	movlb	0	; () banked
 11273  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11274  000F42  0EDC               	movlw	220
 11275  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11276  000F46  0E00               	movlw	0
 11277  000F48  0100               	movlb	0	; () banked
 11278  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11279  000F4C  0E03               	movlw	3
 11280  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11281  000F50  EC5F  F01B         	call	_updateServoPosition	;wreg free
 11282                           
 11283                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11284  000F54  0E00               	movlw	0
 11285  000F56  0100               	movlb	0	; () banked
 11286  000F58  6FBC               	movwf	actuatorTest@i_1594& (0+255),b
 11287  000F5A                     l6658:
 11288                           
 11289                           ; BSR set to: 0
 11290  000F5A  0E63               	movlw	99
 11291  000F5C  0100               	movlb	0	; () banked
 11292  000F5E  65BC               	cpfsgt	actuatorTest@i_1594& (0+255),b
 11293  000F60  D001               	goto	l6662
 11294  000F62  D00C               	goto	l6666
 11295  000F64                     l6662:
 11296                           
 11297                           ; BSR set to: 0
 11298  000F64  0E68               	movlw	104
 11299  000F66  0100               	movlb	0	; () banked
 11300  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11301  000F6A  0EE4               	movlw	228
 11302  000F6C                     u7457:
 11303  000F6C  2EE8               	decfsz	wreg,f,c
 11304  000F6E  D7FE               	bra	u7457
 11305  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11306  000F72  D7FC               	bra	u7457
 11307  000F74  F000               	nop	
 11308  000F76  0100               	movlb	0	; () banked
 11309  000F78  2BBC               	incf	actuatorTest@i_1594& (0+255),f,b
 11310  000F7A  D7EF               	goto	l6658
 11311  000F7C                     l6666:
 11312                           
 11313                           ; BSR set to: 0
 11314  000F7C  0E00               	movlw	0
 11315  000F7E  0100               	movlb	0	; () banked
 11316  000F80  6FBD               	movwf	actuatorTest@i_1595& (0+255),b
 11317  000F82                     l6668:
 11318                           
 11319                           ; BSR set to: 0
 11320  000F82  0E63               	movlw	99
 11321  000F84  0100               	movlb	0	; () banked
 11322  000F86  65BD               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11323  000F88  D001               	goto	l6672
 11324  000F8A  D00C               	goto	l6676
 11325  000F8C                     l6672:
 11326                           
 11327                           ; BSR set to: 0
 11328  000F8C  0E68               	movlw	104
 11329  000F8E  0100               	movlb	0	; () banked
 11330  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11331  000F92  0EE4               	movlw	228
 11332  000F94                     u7467:
 11333  000F94  2EE8               	decfsz	wreg,f,c
 11334  000F96  D7FE               	bra	u7467
 11335  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11336  000F9A  D7FC               	bra	u7467
 11337  000F9C  F000               	nop	
 11338  000F9E  0100               	movlb	0	; () banked
 11339  000FA0  2BBD               	incf	actuatorTest@i_1595& (0+255),f,b
 11340  000FA2  D7EF               	goto	l6668
 11341  000FA4                     l6676:
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11345  000FA4  0E80               	movlw	128
 11346  000FA6  ECE2  F020         	call	_lcdInst
 11347  000FAA  0EC0               	movlw	192
 11348  000FAC  ECE2  F020         	call	_lcdInst
 11349                           
 11350                           ;Test.c: 283: printf("LEVEL -- 2s     ");
 11351  000FB0  0E22               	movlw	low STR_99
 11352  000FB2  0100               	movlb	0	; () banked
 11353  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11354  000FB6  0EFC               	movlw	high STR_99
 11355  000FB8  0100               	movlb	0	; () banked
 11356  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11357  000FBC  EC9C  F008         	call	_printf	;wreg free
 11358                           
 11359                           ;Test.c: 284: updateServoPosition(1000, 3);
 11360  000FC0  0E03               	movlw	3
 11361  000FC2  0100               	movlb	0	; () banked
 11362  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11363  000FC6  0EE8               	movlw	232
 11364  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11365  000FCA  0E00               	movlw	0
 11366  000FCC  0100               	movlb	0	; () banked
 11367  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11368  000FD0  0E03               	movlw	3
 11369  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11370  000FD4  EC5F  F01B         	call	_updateServoPosition	;wreg free
 11371                           
 11372                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11373  000FD8  0E00               	movlw	0
 11374  000FDA  0100               	movlb	0	; () banked
 11375  000FDC  6FBE               	movwf	actuatorTest@i_1597& (0+255),b
 11376  000FDE                     l6684:
 11377                           
 11378                           ; BSR set to: 0
 11379  000FDE  0E63               	movlw	99
 11380  000FE0  0100               	movlb	0	; () banked
 11381  000FE2  65BE               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11382  000FE4  D001               	goto	l6688
 11383  000FE6  D00C               	goto	l6692
 11384  000FE8                     l6688:
 11385                           
 11386                           ; BSR set to: 0
 11387  000FE8  0E68               	movlw	104
 11388  000FEA  0100               	movlb	0	; () banked
 11389  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11390  000FEE  0EE4               	movlw	228
 11391  000FF0                     u7477:
 11392  000FF0  2EE8               	decfsz	wreg,f,c
 11393  000FF2  D7FE               	bra	u7477
 11394  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11395  000FF6  D7FC               	bra	u7477
 11396  000FF8  F000               	nop	
 11397  000FFA  0100               	movlb	0	; () banked
 11398  000FFC  2BBE               	incf	actuatorTest@i_1597& (0+255),f,b
 11399  000FFE  D7EF               	goto	l6684
 11400  001000                     l6692:
 11401                           
 11402                           ; BSR set to: 0
 11403  001000  0E00               	movlw	0
 11404  001002  0100               	movlb	0	; () banked
 11405  001004  6FBF               	movwf	actuatorTest@i_1598& (0+255),b
 11406  001006                     l6694:
 11407                           
 11408                           ; BSR set to: 0
 11409  001006  0E63               	movlw	99
 11410  001008  0100               	movlb	0	; () banked
 11411  00100A  65BF               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11412  00100C  D001               	goto	l6698
 11413  00100E  D00C               	goto	l1104
 11414  001010                     l6698:
 11415                           
 11416                           ; BSR set to: 0
 11417  001010  0E68               	movlw	104
 11418  001012  0100               	movlb	0	; () banked
 11419  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11420  001016  0EE4               	movlw	228
 11421  001018                     u7487:
 11422  001018  2EE8               	decfsz	wreg,f,c
 11423  00101A  D7FE               	bra	u7487
 11424  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11425  00101E  D7FC               	bra	u7487
 11426  001020  F000               	nop	
 11427  001022  0100               	movlb	0	; () banked
 11428  001024  2BBF               	incf	actuatorTest@i_1598& (0+255),f,b
 11429  001026  D7EF               	goto	l6694
 11430  001028                     l1104:
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;Test.c: 287: TMR3ON = 0;
 11434  001028  90B1               	bcf	4017,0,c	;volatile
 11435                           
 11436                           ;Test.c: 288: (INTCONbits.GIE = 0);
 11437  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;Test.c: 293: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11441  00102C  0E01               	movlw	1
 11442  00102E  ECE2  F020         	call	_lcdInst
 11443  001032  0E68               	movlw	104
 11444  001034  0100               	movlb	0	; () banked
 11445  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11446  001038  0EE4               	movlw	228
 11447  00103A                     u7497:
 11448  00103A  2EE8               	decfsz	wreg,f,c
 11449  00103C  D7FE               	bra	u7497
 11450  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11451  001040  D7FC               	bra	u7497
 11452  001042  F000               	nop	
 11453  001044  0E80               	movlw	128
 11454  001046  ECE2  F020         	call	_lcdInst
 11455                           
 11456                           ;Test.c: 294: printf("TST: CAM SERVO");
 11457  00104A  0E9D               	movlw	low STR_102
 11458  00104C  0100               	movlb	0	; () banked
 11459  00104E  6F8E               	movwf	printf@f& (0+255),b
 11460  001050  0EFE               	movlw	high STR_102
 11461  001052  0100               	movlb	0	; () banked
 11462  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11463  001056  EC9C  F008         	call	_printf	;wreg free
 11464                           
 11465                           ;Test.c: 295: lcdInst(0b11000000);;
 11466  00105A  0EC0               	movlw	192
 11467  00105C  ECE2  F020         	call	_lcdInst
 11468                           
 11469                           ;Test.c: 296: printf("CAM UP  |RC0=1");
 11470  001060  0E7F               	movlw	low STR_103
 11471  001062  0100               	movlb	0	; () banked
 11472  001064  6F8E               	movwf	printf@f& (0+255),b
 11473  001066  0EFE               	movlw	high STR_103
 11474  001068  0100               	movlb	0	; () banked
 11475  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11476  00106C  EC9C  F008         	call	_printf	;wreg free
 11477                           
 11478                           ;Test.c: 297: LATCbits.LATC0 = 0;
 11479  001070  908B               	bcf	3979,0,c	;volatile
 11480                           
 11481                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11482  001072  0E00               	movlw	0
 11483  001074  0100               	movlb	0	; () banked
 11484  001076  6FC0               	movwf	actuatorTest@i_1601& (0+255),b
 11485  001078                     l6718:
 11486                           
 11487                           ; BSR set to: 0
 11488  001078  0E63               	movlw	99
 11489  00107A  0100               	movlb	0	; () banked
 11490  00107C  65C0               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11491  00107E  D001               	goto	l6722
 11492  001080  D00C               	goto	l6726
 11493  001082                     l6722:
 11494                           
 11495                           ; BSR set to: 0
 11496  001082  0E68               	movlw	104
 11497  001084  0100               	movlb	0	; () banked
 11498  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11499  001088  0EE4               	movlw	228
 11500  00108A                     u7507:
 11501  00108A  2EE8               	decfsz	wreg,f,c
 11502  00108C  D7FE               	bra	u7507
 11503  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11504  001090  D7FC               	bra	u7507
 11505  001092  F000               	nop	
 11506  001094  0100               	movlb	0	; () banked
 11507  001096  2BC0               	incf	actuatorTest@i_1601& (0+255),f,b
 11508  001098  D7EF               	goto	l6718
 11509  00109A                     l6726:
 11510                           
 11511                           ; BSR set to: 0
 11512  00109A  0E00               	movlw	0
 11513  00109C  0100               	movlb	0	; () banked
 11514  00109E  6FC1               	movwf	actuatorTest@i_1602& (0+255),b
 11515  0010A0                     l6728:
 11516                           
 11517                           ; BSR set to: 0
 11518  0010A0  0E63               	movlw	99
 11519  0010A2  0100               	movlb	0	; () banked
 11520  0010A4  65C1               	cpfsgt	actuatorTest@i_1602& (0+255),b
 11521  0010A6  D001               	goto	l6732
 11522  0010A8  D00C               	goto	l6736
 11523  0010AA                     l6732:
 11524                           
 11525                           ; BSR set to: 0
 11526  0010AA  0E68               	movlw	104
 11527  0010AC  0100               	movlb	0	; () banked
 11528  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11529  0010B0  0EE4               	movlw	228
 11530  0010B2                     u7517:
 11531  0010B2  2EE8               	decfsz	wreg,f,c
 11532  0010B4  D7FE               	bra	u7517
 11533  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11534  0010B8  D7FC               	bra	u7517
 11535  0010BA  F000               	nop	
 11536  0010BC  0100               	movlb	0	; () banked
 11537  0010BE  2BC1               	incf	actuatorTest@i_1602& (0+255),f,b
 11538  0010C0  D7EF               	goto	l6728
 11539  0010C2                     l6736:
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;Test.c: 299: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11543  0010C2  0E80               	movlw	128
 11544  0010C4  ECE2  F020         	call	_lcdInst
 11545  0010C8  0EC0               	movlw	192
 11546  0010CA  ECE2  F020         	call	_lcdInst
 11547                           
 11548                           ;Test.c: 300: LATCbits.LATC0 = 1;
 11549  0010CE  808B               	bsf	3979,0,c	;volatile
 11550                           
 11551                           ;Test.c: 301: printf("CAM DWN |RC0=0");
 11552  0010D0  0E70               	movlw	low STR_104
 11553  0010D2  0100               	movlb	0	; () banked
 11554  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11555  0010D6  0EFE               	movlw	high STR_104
 11556  0010D8  0100               	movlb	0	; () banked
 11557  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11558  0010DC  EC9C  F008         	call	_printf	;wreg free
 11559                           
 11560                           ;Test.c: 302: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11561  0010E0  0E00               	movlw	0
 11562  0010E2  0100               	movlb	0	; () banked
 11563  0010E4  6FC2               	movwf	actuatorTest@i_1604& (0+255),b
 11564  0010E6                     l6744:
 11565                           
 11566                           ; BSR set to: 0
 11567  0010E6  0E63               	movlw	99
 11568  0010E8  0100               	movlb	0	; () banked
 11569  0010EA  65C2               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11570  0010EC  D001               	goto	l6748
 11571  0010EE  D00C               	goto	l6752
 11572  0010F0                     l6748:
 11573                           
 11574                           ; BSR set to: 0
 11575  0010F0  0E68               	movlw	104
 11576  0010F2  0100               	movlb	0	; () banked
 11577  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11578  0010F6  0EE4               	movlw	228
 11579  0010F8                     u7527:
 11580  0010F8  2EE8               	decfsz	wreg,f,c
 11581  0010FA  D7FE               	bra	u7527
 11582  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11583  0010FE  D7FC               	bra	u7527
 11584  001100  F000               	nop	
 11585  001102  0100               	movlb	0	; () banked
 11586  001104  2BC2               	incf	actuatorTest@i_1604& (0+255),f,b
 11587  001106  D7EF               	goto	l6744
 11588  001108                     l6752:
 11589                           
 11590                           ; BSR set to: 0
 11591  001108  0E00               	movlw	0
 11592  00110A  0100               	movlb	0	; () banked
 11593  00110C  6FC3               	movwf	actuatorTest@i_1605& (0+255),b
 11594  00110E                     l6754:
 11595                           
 11596                           ; BSR set to: 0
 11597  00110E  0E63               	movlw	99
 11598  001110  0100               	movlb	0	; () banked
 11599  001112  65C3               	cpfsgt	actuatorTest@i_1605& (0+255),b
 11600  001114  D001               	goto	l6758
 11601  001116  D00C               	goto	l6762
 11602  001118                     l6758:
 11603                           
 11604                           ; BSR set to: 0
 11605  001118  0E68               	movlw	104
 11606  00111A  0100               	movlb	0	; () banked
 11607  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11608  00111E  0EE4               	movlw	228
 11609  001120                     u7537:
 11610  001120  2EE8               	decfsz	wreg,f,c
 11611  001122  D7FE               	bra	u7537
 11612  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11613  001126  D7FC               	bra	u7537
 11614  001128  F000               	nop	
 11615  00112A  0100               	movlb	0	; () banked
 11616  00112C  2BC3               	incf	actuatorTest@i_1605& (0+255),f,b
 11617  00112E  D7EF               	goto	l6754
 11618  001130                     l6762:
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;Test.c: 303: machine_state = Testing_state;
 11622  001130  0E03               	movlw	3
 11623  001132  0100               	movlb	0	; () banked
 11624  001134  6FFC               	movwf	_machine_state& (0+255),b
 11625                           
 11626                           ; BSR set to: 0
 11627  001136  0012               	return		;funcret
 11628  001138                     __end_of_actuatorTest:
 11629                           	opt stack 0
 11630                           tblptru	equ	0xFF8
 11631                           tblptrh	equ	0xFF7
 11632                           tblptrl	equ	0xFF6
 11633                           tablat	equ	0xFF5
 11634                           prodh	equ	0xFF4
 11635                           prodl	equ	0xFF3
 11636                           intcon	equ	0xFF2
 11637                           intcon2	equ	0xFF1
 11638                           intcon3	equ	0xFF0
 11639                           postinc0	equ	0xFEE
 11640                           wreg	equ	0xFE8
 11641                           postdec1	equ	0xFE5
 11642                           fsr1l	equ	0xFE1
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           postdec2	equ	0xFDD
 11646                           fsr2h	equ	0xFDA
 11647                           fsr2l	equ	0xFD9
 11648                           status	equ	0xFD8
 11649                           
 11650 ;; *************** function _updateServoPosition *****************
 11651 ;; Defined at:
 11652 ;;		line 298 in file "sort.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  time_us         2    0[BANK0 ] int 
 11655 ;;  timer           2    2[BANK0 ] int 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  my_time         2    6[BANK0 ] unsigned int 
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		wreg, status,2, status,0
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11667 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11671 ;;Total ram usage:        8 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    7
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_Distribution
 11678 ;;		_initServos
 11679 ;;		_actuatorTest
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           	psect	text41
 11684  0036BE                     __ptext41:
 11685                           	opt stack 0
 11686  0036BE                     _updateServoPosition:
 11687                           	opt stack 20
 11688                           
 11689                           ;sort.c: 299: unsigned int my_time = 65535 - time_us;
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;incstack = 0
 11693  0036BE  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11694  0036C2  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11695  0036C6  0100               	movlb	0	; () banked
 11696  0036C8  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11697  0036CA  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11698  0036CC  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11699  0036CE  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11700  0036D0  0EFF               	movlw	255
 11701  0036D2  0100               	movlb	0	; () banked
 11702  0036D4  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11703  0036D6  0100               	movlb	0	; () banked
 11704  0036D8  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11705  0036DA  0EFF               	movlw	255
 11706  0036DC  0100               	movlb	0	; () banked
 11707  0036DE  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11708  0036E0  0100               	movlb	0	; () banked
 11709  0036E2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11710                           
 11711                           ;sort.c: 300: switch(timer){
 11712  0036E4  D015               	goto	l5374
 11713  0036E6                     l5372:
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;sort.c: 302: servoTimes[0] = my_time >> 8;
 11717  0036E6  0100               	movlb	0	; () banked
 11718  0036E8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11719  0036EA  0101               	movlb	1	; () banked
 11720  0036EC  6F1C               	movwf	_servoTimes& (0+255),b
 11721  0036EE  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11722                           
 11723                           ;sort.c: 303: servoTimes[1] = my_time & 0xFF;
 11724  0036F0  0100               	movlb	0	; () banked
 11725  0036F2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11726  0036F4  0101               	movlb	1	; () banked
 11727  0036F6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11728  0036F8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11729  0036FA                     l773:
 11730                           
 11731                           ;sort.c: 305: servoTimes[2] = my_time >> 8;
 11732  0036FA  0100               	movlb	0	; () banked
 11733  0036FC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11734  0036FE  0101               	movlb	1	; () banked
 11735  003700  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11736  003702  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11737                           
 11738                           ;sort.c: 306: servoTimes[3] = my_time & 0xFF;
 11739  003704  0100               	movlb	0	; () banked
 11740  003706  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11741  003708  0101               	movlb	1	; () banked
 11742  00370A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11743  00370C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11744                           
 11745                           ;sort.c: 307: }
 11746  00370E  0012               	return	
 11747  003710                     l5374:
 11748  003710  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11749  003714  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11750                           
 11751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11752                           ; Switch size 1, requested type "space"
 11753                           ; Number of cases is 1, Range of values is 0 to 0
 11754                           ; switch strategies available:
 11755                           ; Name         Instructions Cycles
 11756                           ; simple_byte            4     3 (average)
 11757                           ;	Chosen strategy is simple_byte
 11758  003718  0100               	movlb	0	; () banked
 11759  00371A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11760  00371C  0A00               	xorlw	0	; case 0
 11761  00371E  A4D8               	btfss	status,2,c
 11762  003720  0012               	return	
 11763                           
 11764                           ; BSR set to: 0
 11765                           ; Switch size 1, requested type "space"
 11766                           ; Number of cases is 2, Range of values is 1 to 3
 11767                           ; switch strategies available:
 11768                           ; Name         Instructions Cycles
 11769                           ; simple_byte            7     4 (average)
 11770                           ;	Chosen strategy is simple_byte
 11771  003722  0100               	movlb	0	; () banked
 11772  003724  5184               	movf	??_updateServoPosition& (0+255),w,b
 11773  003726  0A01               	xorlw	1	; case 1
 11774  003728  B4D8               	btfsc	status,2,c
 11775  00372A  D7DD               	goto	l5372
 11776  00372C  0A02               	xorlw	2	; case 3
 11777  00372E  A4D8               	btfss	status,2,c
 11778  003730  0012               	return	
 11779  003732  D7E3               	goto	l773
 11780  003734                     __end_of_updateServoPosition:
 11781                           	opt stack 0
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           intcon2	equ	0xFF1
 11790                           intcon3	equ	0xFF0
 11791                           postinc0	equ	0xFEE
 11792                           wreg	equ	0xFE8
 11793                           postdec1	equ	0xFE5
 11794                           fsr1l	equ	0xFE1
 11795                           indf2	equ	0xFDF
 11796                           postinc2	equ	0xFDE
 11797                           postdec2	equ	0xFDD
 11798                           fsr2h	equ	0xFDA
 11799                           fsr2l	equ	0xFD9
 11800                           status	equ	0xFD8
 11801                           
 11802 ;; *************** function _ToggleTestA5 *****************
 11803 ;; Defined at:
 11804 ;;		line 399 in file "Test.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  on              2   44[BANK0 ] int 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      void 
 11811 ;; Registers used:
 11812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;Total ram usage:        3 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:   10
 11825 ;; This function calls:
 11826 ;;		_lcdInst
 11827 ;;		_printf
 11828 ;; This function is called by:
 11829 ;;		_Test
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           	psect	text42
 11834  0034B4                     __ptext42:
 11835                           	opt stack 0
 11836  0034B4                     _ToggleTestA5:
 11837                           	opt stack 19
 11838                           
 11839                           ;Test.c: 400: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11840                           
 11841                           ;incstack = 0
 11842  0034B4  0E01               	movlw	1
 11843  0034B6  ECE2  F020         	call	_lcdInst
 11844  0034BA  0E68               	movlw	104
 11845  0034BC  0100               	movlb	0	; () banked
 11846  0034BE  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11847  0034C0  0EE4               	movlw	228
 11848  0034C2                     u7547:
 11849  0034C2  2EE8               	decfsz	wreg,f,c
 11850  0034C4  D7FE               	bra	u7547
 11851  0034C6  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11852  0034C8  D7FC               	bra	u7547
 11853  0034CA  F000               	nop	
 11854  0034CC  0E80               	movlw	128
 11855  0034CE  ECE2  F020         	call	_lcdInst
 11856                           
 11857                           ;Test.c: 401: printf("D WILL RETURN   ");
 11858  0034D2  0E55               	movlw	low STR_109
 11859  0034D4  0100               	movlb	0	; () banked
 11860  0034D6  6F8E               	movwf	printf@f& (0+255),b
 11861  0034D8  0EFC               	movlw	high STR_109
 11862  0034DA  0100               	movlb	0	; () banked
 11863  0034DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11864  0034DE  EC9C  F008         	call	_printf	;wreg free
 11865                           
 11866                           ;Test.c: 402: lcdInst(0b11000000);;
 11867  0034E2  0EC0               	movlw	192
 11868  0034E4  ECE2  F020         	call	_lcdInst
 11869                           
 11870                           ;Test.c: 403: printf("ELSE TOGGLES RA5");
 11871  0034E8  0E88               	movlw	low STR_110
 11872  0034EA  0100               	movlb	0	; () banked
 11873  0034EC  6F8E               	movwf	printf@f& (0+255),b
 11874  0034EE  0EFC               	movlw	high STR_110
 11875  0034F0  0100               	movlb	0	; () banked
 11876  0034F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11877  0034F4  EC9C  F008         	call	_printf	;wreg free
 11878                           
 11879                           ;Test.c: 404: int on = 0;
 11880  0034F8  0E00               	movlw	0
 11881  0034FA  0100               	movlb	0	; () banked
 11882  0034FC  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11883  0034FE  0E00               	movlw	0
 11884  003500  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11885  003502                     l1167:
 11886  003502  A281               	btfss	3969,1,c	;volatile
 11887  003504  D7FE               	goto	l1167
 11888                           
 11889                           ;Test.c: 409: }
 11890                           ;Test.c: 410: if(PORTB >> 4 == 0b1111){
 11891  003506  3881               	swapf	3969,w,c	;volatile
 11892  003508  0B0F               	andlw	15
 11893  00350A  0A0F               	xorlw	15
 11894  00350C  B4D8               	btfsc	status,2,c
 11895  00350E  0012               	return	
 11896                           
 11897                           ;Test.c: 413: else{
 11898                           ;Test.c: 414: if(on == 0){
 11899                           
 11900                           ;Test.c: 412: }
 11901                           
 11902                           ;Test.c: 411: break;
 11903  003510  0100               	movlb	0	; () banked
 11904  003512  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11905  003514  0100               	movlb	0	; () banked
 11906  003516  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11907  003518  A4D8               	btfss	status,2,c
 11908  00351A  D007               	goto	l6808
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;Test.c: 415: on = 1;
 11912  00351C  0E00               	movlw	0
 11913  00351E  0100               	movlb	0	; () banked
 11914  003520  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11915  003522  0E01               	movlw	1
 11916  003524  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;Test.c: 416: LATAbits.LATA5 = 1;
 11920  003526  8A89               	bsf	3977,5,c	;volatile
 11921                           
 11922                           ;Test.c: 417: }
 11923  003528  D006               	goto	l1175
 11924  00352A                     l6808:
 11925                           
 11926                           ; BSR set to: 0
 11927                           ;Test.c: 418: else{
 11928                           ;Test.c: 419: on = 0;
 11929  00352A  0E00               	movlw	0
 11930  00352C  0100               	movlb	0	; () banked
 11931  00352E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11932  003530  0E00               	movlw	0
 11933  003532  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;Test.c: 420: LATAbits.LATA5 = 0;
 11937  003534  9A89               	bcf	3977,5,c	;volatile
 11938  003536                     l1175:
 11939  003536  A281               	btfss	3969,1,c	;volatile
 11940  003538  D7E4               	goto	l1167
 11941  00353A  D7FD               	goto	l1175
 11942  00353C                     __end_of_ToggleTestA5:
 11943                           	opt stack 0
 11944                           tblptru	equ	0xFF8
 11945                           tblptrh	equ	0xFF7
 11946                           tblptrl	equ	0xFF6
 11947                           tablat	equ	0xFF5
 11948                           prodh	equ	0xFF4
 11949                           prodl	equ	0xFF3
 11950                           intcon	equ	0xFF2
 11951                           intcon2	equ	0xFF1
 11952                           intcon3	equ	0xFF0
 11953                           postinc0	equ	0xFEE
 11954                           wreg	equ	0xFE8
 11955                           postdec1	equ	0xFE5
 11956                           fsr1l	equ	0xFE1
 11957                           indf2	equ	0xFDF
 11958                           postinc2	equ	0xFDE
 11959                           postdec2	equ	0xFDD
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function _SolenoidTestA5 *****************
 11965 ;; Defined at:
 11966 ;;		line 375 in file "Test.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;		None
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  i               1   47[BANK0 ] unsigned char 
 11971 ;;  i               1   48[BANK0 ] unsigned char 
 11972 ;;  i               2   45[BANK0 ] int 
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  1    wreg      void 
 11975 ;; Registers used:
 11976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;Total ram usage:        6 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:   10
 11989 ;; This function calls:
 11990 ;;		_lcdInst
 11991 ;;		_printf
 11992 ;; This function is called by:
 11993 ;;		_Test
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text43
 11998  002C2C                     __ptext43:
 11999                           	opt stack 0
 12000  002C2C                     _SolenoidTestA5:
 12001                           	opt stack 19
 12002  002C2C                     
 12003                           ;Test.c: 377: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12004  002C2C  0E01               	movlw	1
 12005  002C2E  ECE2  F020         	call	_lcdInst
 12006  002C32  0E68               	movlw	104
 12007  002C34  0100               	movlb	0	; () banked
 12008  002C36  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12009  002C38  0EE4               	movlw	228
 12010  002C3A                     u7557:
 12011  002C3A  2EE8               	decfsz	wreg,f,c
 12012  002C3C  D7FE               	bra	u7557
 12013  002C3E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12014  002C40  D7FC               	bra	u7557
 12015  002C42  F000               	nop	
 12016  002C44  0E80               	movlw	128
 12017  002C46  ECE2  F020         	call	_lcdInst
 12018                           
 12019                           ;Test.c: 378: printf("SOLENOID TST");
 12020  002C4A  0E49               	movlw	low STR_107
 12021  002C4C  0100               	movlb	0	; () banked
 12022  002C4E  6F8E               	movwf	printf@f& (0+255),b
 12023  002C50  0EFF               	movlw	high STR_107
 12024  002C52  0100               	movlb	0	; () banked
 12025  002C54  6F8F               	movwf	(printf@f+1)& (0+255),b
 12026  002C56  EC9C  F008         	call	_printf	;wreg free
 12027                           
 12028                           ;Test.c: 379: lcdInst(0b11000000);;
 12029  002C5A  0EC0               	movlw	192
 12030  002C5C  ECE2  F020         	call	_lcdInst
 12031  002C60                     l1152:
 12032  002C60  A281               	btfss	3969,1,c	;volatile
 12033  002C62  D7FE               	goto	l1152
 12034                           
 12035                           ;Test.c: 384: }
 12036                           ;Test.c: 386: for(int i = 0; i < 3; i++){
 12037  002C64  0E00               	movlw	0
 12038  002C66  0100               	movlb	0	; () banked
 12039  002C68  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12040  002C6A  0E00               	movlw	0
 12041  002C6C  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12042  002C6E                     l6824:
 12043                           
 12044                           ; BSR set to: 0
 12045  002C6E  0100               	movlb	0	; () banked
 12046  002C70  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12047  002C72  D008               	goto	l6828
 12048  002C74  0100               	movlb	0	; () banked
 12049  002C76  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12050  002C78  E12D               	bnz	l6844
 12051  002C7A  0E03               	movlw	3
 12052  002C7C  0100               	movlb	0	; () banked
 12053  002C7E  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12054  002C80  B0D8               	btfsc	status,0,c
 12055  002C82  D028               	goto	l6844
 12056  002C84                     l6828:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;Test.c: 387: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12060  002C84  0E00               	movlw	0
 12061  002C86  0100               	movlb	0	; () banked
 12062  002C88  6FAF               	movwf	SolenoidTestA5@i_1616& (0+255),b
 12063  002C8A                     l6830:
 12064                           
 12065                           ; BSR set to: 0
 12066  002C8A  0E63               	movlw	99
 12067  002C8C  0100               	movlb	0	; () banked
 12068  002C8E  65AF               	cpfsgt	SolenoidTestA5@i_1616& (0+255),b
 12069  002C90  D001               	goto	l6834
 12070  002C92  D00C               	goto	l1158
 12071  002C94                     l6834:
 12072                           
 12073                           ; BSR set to: 0
 12074  002C94  0E68               	movlw	104
 12075  002C96  0100               	movlb	0	; () banked
 12076  002C98  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12077  002C9A  0EE4               	movlw	228
 12078  002C9C                     u7567:
 12079  002C9C  2EE8               	decfsz	wreg,f,c
 12080  002C9E  D7FE               	bra	u7567
 12081  002CA0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12082  002CA2  D7FC               	bra	u7567
 12083  002CA4  F000               	nop	
 12084  002CA6  0100               	movlb	0	; () banked
 12085  002CA8  2BAF               	incf	SolenoidTestA5@i_1616& (0+255),f,b
 12086  002CAA  D7EF               	goto	l6830
 12087  002CAC                     l1158:
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;Test.c: 388: LATAbits.LATA5 = 1;
 12091  002CAC  8A89               	bsf	3977,5,c	;volatile
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;Test.c: 389: _delay((unsigned long)((150)*(32000000/4000.0)));
 12095  002CAE  0E07               	movlw	7
 12096  002CB0  0100               	movlb	0	; () banked
 12097  002CB2  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12098  002CB4  0E17               	movlw	23
 12099  002CB6  0100               	movlb	0	; () banked
 12100  002CB8  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12101  002CBA  0E6A               	movlw	106
 12102  002CBC                     u7577:
 12103  002CBC  2EE8               	decfsz	wreg,f,c
 12104  002CBE  D7FE               	bra	u7577
 12105  002CC0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12106  002CC2  D7FC               	bra	u7577
 12107  002CC4  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12108  002CC6  D7FA               	bra	u7577
 12109  002CC8  F000               	nop	
 12110                           
 12111                           ;Test.c: 390: LATAbits.LATA5 = 0;
 12112  002CCA  9A89               	bcf	3977,5,c	;volatile
 12113  002CCC  0100               	movlb	0	; () banked
 12114  002CCE  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12115  002CD0  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12116  002CD2  D7CD               	goto	l6824
 12117  002CD4                     l6844:
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;Test.c: 391: }
 12121                           ;Test.c: 393: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12122  002CD4  0E01               	movlw	1
 12123  002CD6  ECE2  F020         	call	_lcdInst
 12124  002CDA  0E68               	movlw	104
 12125  002CDC  0100               	movlb	0	; () banked
 12126  002CDE  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12127  002CE0  0EE4               	movlw	228
 12128  002CE2                     u7587:
 12129  002CE2  2EE8               	decfsz	wreg,f,c
 12130  002CE4  D7FE               	bra	u7587
 12131  002CE6  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12132  002CE8  D7FC               	bra	u7587
 12133  002CEA  F000               	nop	
 12134  002CEC  0E80               	movlw	128
 12135  002CEE  ECE2  F020         	call	_lcdInst
 12136                           
 12137                           ;Test.c: 394: printf("PUSH DONE");
 12138  002CF2  0E90               	movlw	low STR_108
 12139  002CF4  0100               	movlb	0	; () banked
 12140  002CF6  6F8E               	movwf	printf@f& (0+255),b
 12141  002CF8  0EFF               	movlw	high STR_108
 12142  002CFA  0100               	movlb	0	; () banked
 12143  002CFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12144  002CFE  EC9C  F008         	call	_printf	;wreg free
 12145                           
 12146                           ;Test.c: 395: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12147  002D02  0E00               	movlw	0
 12148  002D04  0100               	movlb	0	; () banked
 12149  002D06  6FB0               	movwf	SolenoidTestA5@i_1618& (0+255),b
 12150  002D08                     l6854:
 12151                           
 12152                           ; BSR set to: 0
 12153  002D08  0E63               	movlw	99
 12154  002D0A  0100               	movlb	0	; () banked
 12155  002D0C  65B0               	cpfsgt	SolenoidTestA5@i_1618& (0+255),b
 12156  002D0E  D001               	goto	l6858
 12157  002D10  D78D               	goto	l6812
 12158  002D12                     l6858:
 12159                           
 12160                           ; BSR set to: 0
 12161  002D12  0E68               	movlw	104
 12162  002D14  0100               	movlb	0	; () banked
 12163  002D16  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12164  002D18  0EE4               	movlw	228
 12165  002D1A                     u7597:
 12166  002D1A  2EE8               	decfsz	wreg,f,c
 12167  002D1C  D7FE               	bra	u7597
 12168  002D1E  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12169  002D20  D7FC               	bra	u7597
 12170  002D22  F000               	nop	
 12171  002D24  0100               	movlb	0	; () banked
 12172  002D26  2BB0               	incf	SolenoidTestA5@i_1618& (0+255),f,b
 12173  002D28  D7EF               	goto	l6854
 12174  002D2A                     __end_of_SolenoidTestA5:
 12175                           	opt stack 0
 12176                           tblptru	equ	0xFF8
 12177                           tblptrh	equ	0xFF7
 12178                           tblptrl	equ	0xFF6
 12179                           tablat	equ	0xFF5
 12180                           prodh	equ	0xFF4
 12181                           prodl	equ	0xFF3
 12182                           intcon	equ	0xFF2
 12183                           intcon2	equ	0xFF1
 12184                           intcon3	equ	0xFF0
 12185                           postinc0	equ	0xFEE
 12186                           wreg	equ	0xFE8
 12187                           postdec1	equ	0xFE5
 12188                           fsr1l	equ	0xFE1
 12189                           indf2	equ	0xFDF
 12190                           postinc2	equ	0xFDE
 12191                           postdec2	equ	0xFDD
 12192                           fsr2h	equ	0xFDA
 12193                           fsr2l	equ	0xFD9
 12194                           status	equ	0xFD8
 12195                           
 12196 ;; *************** function _PortTests *****************
 12197 ;; Defined at:
 12198 ;;		line 306 in file "Test.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;		None
 12201 ;; Auto vars:     Size  Location     Type
 12202 ;;		None
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  1    wreg      void 
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;Total ram usage:        2 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    7
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		_Test
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           	psect	text44
 12227  0035C2                     __ptext44:
 12228                           	opt stack 0
 12229  0035C2                     _PortTests:
 12230                           	opt stack 22
 12231  0035C2                     l1117:
 12232  0035C2  A281               	btfss	3969,1,c	;volatile
 12233  0035C4  D7FE               	goto	l1117
 12234                           
 12235                           ;Test.c: 310: var = PORTB >> 4;
 12236  0035C6  CF81 F080          	movff	3969,??_PortTests	;volatile
 12237  0035CA  0100               	movlb	0	; () banked
 12238  0035CC  3B80               	swapf	??_PortTests& (0+255),f,b
 12239  0035CE  0E0F               	movlw	15
 12240  0035D0  1780               	andwf	??_PortTests& (0+255),f,b
 12241  0035D2  0100               	movlb	0	; () banked
 12242  0035D4  5180               	movf	??_PortTests& (0+255),w,b
 12243  0035D6  0100               	movlb	0	; () banked
 12244  0035D8  6FFA               	movwf	_var& (0+255),b
 12245  0035DA  6BFB               	clrf	(_var+1)& (0+255),b
 12246                           
 12247                           ;Test.c: 311: switch(var){
 12248  0035DC  D00C               	goto	l6866
 12249  0035DE                     l1121:
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;Test.c: 313: LATEbits.LATE0 = 1;
 12253  0035DE  808D               	bsf	3981,0,c	;volatile
 12254                           
 12255                           ;Test.c: 314: break;
 12256  0035E0  D027               	goto	l1129
 12257  0035E2                     l1123:
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;Test.c: 316: LATEbits.LATE1 = 1;
 12261  0035E2  828D               	bsf	3981,1,c	;volatile
 12262                           
 12263                           ;Test.c: 317: break;
 12264  0035E4  D025               	goto	l1129
 12265  0035E6                     l1124:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Test.c: 319: LATDbits.LATD0 = 1;
 12269  0035E6  808C               	bsf	3980,0,c	;volatile
 12270                           
 12271                           ;Test.c: 320: break;
 12272  0035E8  D023               	goto	l1129
 12273  0035EA                     l1125:
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;Test.c: 322: LATAbits.LATA3 = 1;
 12277  0035EA  8689               	bsf	3977,3,c	;volatile
 12278                           
 12279                           ;Test.c: 323: break;
 12280  0035EC  D021               	goto	l1129
 12281  0035EE                     l1126:
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;Test.c: 325: LATAbits.LATA4 = 1;
 12285  0035EE  8889               	bsf	3977,4,c	;volatile
 12286                           
 12287                           ;Test.c: 326: break;
 12288  0035F0  D01F               	goto	l1129
 12289  0035F2                     l1127:
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Test.c: 328: LATAbits.LATA5 = 1;
 12293  0035F2  8A89               	bsf	3977,5,c	;volatile
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Test.c: 332: }
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;Test.c: 331: break;
 12300                           
 12301                           ;Test.c: 330: default:
 12302                           
 12303                           ;Test.c: 329: break;
 12304  0035F4  D01D               	goto	l1129
 12305  0035F6                     l6866:
 12306                           
 12307                           ; BSR set to: 0
 12308  0035F6  C0FA  F080         	movff	_var,??_PortTests
 12309  0035FA  C0FB  F081         	movff	_var+1,??_PortTests+1
 12310                           
 12311                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12312                           ; Switch size 1, requested type "space"
 12313                           ; Number of cases is 1, Range of values is 0 to 0
 12314                           ; switch strategies available:
 12315                           ; Name         Instructions Cycles
 12316                           ; simple_byte            4     3 (average)
 12317                           ;	Chosen strategy is simple_byte
 12318  0035FE  0100               	movlb	0	; () banked
 12319  003600  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12320  003602  0A00               	xorlw	0	; case 0
 12321  003604  A4D8               	btfss	status,2,c
 12322  003606  D014               	goto	l1129
 12323                           
 12324                           ; BSR set to: 0
 12325                           ; Switch size 1, requested type "space"
 12326                           ; Number of cases is 6, Range of values is 0 to 5
 12327                           ; switch strategies available:
 12328                           ; Name         Instructions Cycles
 12329                           ; simple_byte           19    10 (average)
 12330                           ;	Chosen strategy is simple_byte
 12331  003608  0100               	movlb	0	; () banked
 12332  00360A  5180               	movf	??_PortTests& (0+255),w,b
 12333  00360C  0A00               	xorlw	0	; case 0
 12334  00360E  B4D8               	btfsc	status,2,c
 12335  003610  D7E6               	goto	l1121
 12336  003612  0A01               	xorlw	1	; case 1
 12337  003614  B4D8               	btfsc	status,2,c
 12338  003616  D7E5               	goto	l1123
 12339  003618  0A03               	xorlw	3	; case 2
 12340  00361A  B4D8               	btfsc	status,2,c
 12341  00361C  D7E4               	goto	l1124
 12342  00361E  0A01               	xorlw	1	; case 3
 12343  003620  B4D8               	btfsc	status,2,c
 12344  003622  D7E3               	goto	l1125
 12345  003624  0A07               	xorlw	7	; case 4
 12346  003626  B4D8               	btfsc	status,2,c
 12347  003628  D7E2               	goto	l1126
 12348  00362A  0A01               	xorlw	1	; case 5
 12349  00362C  B4D8               	btfsc	status,2,c
 12350  00362E  D7E1               	goto	l1127
 12351  003630                     l1129:
 12352  003630  B281               	btfsc	3969,1,c	;volatile
 12353  003632  D7FE               	goto	l1129
 12354                           
 12355                           ;Test.c: 334: __nop();
 12356  003634  F000               	nop	
 12357                           
 12358                           ;Test.c: 335: __nop();
 12359  003636  F000               	nop	
 12360                           
 12361                           ;Test.c: 336: LATA = 0x00;
 12362  003638  0E00               	movlw	0
 12363  00363A  6E89               	movwf	3977,c	;volatile
 12364                           
 12365                           ;Test.c: 337: LATE = 0x00;
 12366  00363C  0E00               	movlw	0
 12367  00363E  6E8D               	movwf	3981,c	;volatile
 12368                           
 12369                           ;Test.c: 338: LATD = 0x00; }
 12370  003640  0E00               	movlw	0
 12371  003642  6E8C               	movwf	3980,c	;volatile
 12372  003644  D7BE               	goto	l1117
 12373  003646                     __end_of_PortTests:
 12374                           	opt stack 0
 12375                           tblptru	equ	0xFF8
 12376                           tblptrh	equ	0xFF7
 12377                           tblptrl	equ	0xFF6
 12378                           tablat	equ	0xFF5
 12379                           prodh	equ	0xFF4
 12380                           prodl	equ	0xFF3
 12381                           intcon	equ	0xFF2
 12382                           intcon2	equ	0xFF1
 12383                           intcon3	equ	0xFF0
 12384                           postinc0	equ	0xFEE
 12385                           wreg	equ	0xFE8
 12386                           postdec1	equ	0xFE5
 12387                           fsr1l	equ	0xFE1
 12388                           indf2	equ	0xFDF
 12389                           postinc2	equ	0xFDE
 12390                           postdec2	equ	0xFDD
 12391                           fsr2h	equ	0xFDA
 12392                           fsr2l	equ	0xFD9
 12393                           status	equ	0xFD8
 12394                           
 12395 ;; *************** function _PortTestA5 *****************
 12396 ;; Defined at:
 12397 ;;		line 341 in file "Test.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  1    wreg      void 
 12404 ;; Registers used:
 12405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;Total ram usage:        1 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:   10
 12418 ;; This function calls:
 12419 ;;		_lcdInst
 12420 ;;		_printf
 12421 ;; This function is called by:
 12422 ;;		_Test
 12423 ;; This function uses a non-reentrant model
 12424 ;;
 12425                           
 12426                           	psect	text45
 12427  003938                     __ptext45:
 12428                           	opt stack 0
 12429  003938                     _PortTestA5:
 12430                           	opt stack 19
 12431                           
 12432                           ;Test.c: 342: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12433                           
 12434                           ;incstack = 0
 12435  003938  0E01               	movlw	1
 12436  00393A  ECE2  F020         	call	_lcdInst
 12437  00393E  0E68               	movlw	104
 12438  003940  0100               	movlb	0	; () banked
 12439  003942  6FAB               	movwf	??_PortTestA5& (0+255),b
 12440  003944  0EE4               	movlw	228
 12441  003946                     u7607:
 12442  003946  2EE8               	decfsz	wreg,f,c
 12443  003948  D7FE               	bra	u7607
 12444  00394A  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12445  00394C  D7FC               	bra	u7607
 12446  00394E  F000               	nop	
 12447  003950  0E80               	movlw	128
 12448  003952  ECE2  F020         	call	_lcdInst
 12449                           
 12450                           ;Test.c: 343: printf("D WILL RETURN    ");
 12451  003956  0EA7               	movlw	low STR_105
 12452  003958  0100               	movlb	0	; () banked
 12453  00395A  6F8E               	movwf	printf@f& (0+255),b
 12454  00395C  0EFB               	movlw	high STR_105
 12455  00395E  0100               	movlb	0	; () banked
 12456  003960  6F8F               	movwf	(printf@f+1)& (0+255),b
 12457  003962  EC9C  F008         	call	_printf	;wreg free
 12458                           
 12459                           ;Test.c: 344: lcdInst(0b11000000);;
 12460  003966  0EC0               	movlw	192
 12461  003968  ECE2  F020         	call	_lcdInst
 12462                           
 12463                           ;Test.c: 345: printf("OTHER SETS RA5   ");
 12464  00396C  0EB9               	movlw	low STR_106
 12465  00396E  0100               	movlb	0	; () banked
 12466  003970  6F8E               	movwf	printf@f& (0+255),b
 12467  003972  0EFB               	movlw	high STR_106
 12468  003974  0100               	movlb	0	; () banked
 12469  003976  6F8F               	movwf	(printf@f+1)& (0+255),b
 12470  003978  EC9C  F008         	call	_printf	;wreg free
 12471  00397C                     l1138:
 12472  00397C  A281               	btfss	3969,1,c	;volatile
 12473  00397E  D7FE               	goto	l1138
 12474                           
 12475                           ;Test.c: 350: }
 12476                           ;Test.c: 351: if(PORTB >> 4 == 0b1111){
 12477  003980  3881               	swapf	3969,w,c	;volatile
 12478  003982  0B0F               	andlw	15
 12479  003984  0A0F               	xorlw	15
 12480  003986  B4D8               	btfsc	status,2,c
 12481  003988  0012               	return	
 12482                           
 12483                           ;Test.c: 354: else{
 12484                           ;Test.c: 355: LATAbits.LATA5 = 1;
 12485                           
 12486                           ;Test.c: 353: }
 12487                           
 12488                           ;Test.c: 352: break;
 12489  00398A  8A89               	bsf	3977,5,c	;volatile
 12490  00398C                     l1144:
 12491  00398C  B281               	btfsc	3969,1,c	;volatile
 12492  00398E  D7FE               	goto	l1144
 12493                           
 12494                           ;Test.c: 358: }
 12495                           ;Test.c: 370: LATAbits.LATA5 = 0;
 12496  003990  9A89               	bcf	3977,5,c	;volatile
 12497  003992  D7F4               	goto	l1138
 12498  003994                     __end_of_PortTestA5:
 12499                           	opt stack 0
 12500                           tblptru	equ	0xFF8
 12501                           tblptrh	equ	0xFF7
 12502                           tblptrl	equ	0xFF6
 12503                           tablat	equ	0xFF5
 12504                           prodh	equ	0xFF4
 12505                           prodl	equ	0xFF3
 12506                           intcon	equ	0xFF2
 12507                           intcon2	equ	0xFF1
 12508                           intcon3	equ	0xFF0
 12509                           postinc0	equ	0xFEE
 12510                           wreg	equ	0xFE8
 12511                           postdec1	equ	0xFE5
 12512                           fsr1l	equ	0xFE1
 12513                           indf2	equ	0xFDF
 12514                           postinc2	equ	0xFDE
 12515                           postdec2	equ	0xFDD
 12516                           fsr2h	equ	0xFDA
 12517                           fsr2l	equ	0xFD9
 12518                           status	equ	0xFD8
 12519                           
 12520 ;; *************** function _printf *****************
 12521 ;; Defined at:
 12522 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12525 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 12526 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 12527 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 12528 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 12529 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 12530 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 12531 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 12532 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 12533 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 12534 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 12535 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 12536 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 12537 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 12538 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 12539 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 12540 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 12541 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12542 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 12543 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 12544 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 12545 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 12546 ;;		 -> STR_1(18), 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  tmpval          4    0        struct .
 12549 ;;  width           2   41[BANK0 ] int 
 12550 ;;  val             2   37[BANK0 ] unsigned int 
 12551 ;;  len             2   35[BANK0 ] unsigned int 
 12552 ;;  ap              2   33[BANK0 ] PTR void [1]
 12553 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12554 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12555 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 12556 ;;  c               1   40[BANK0 ] char 
 12557 ;;  flag            1   39[BANK0 ] unsigned char 
 12558 ;;  prec            1   30[BANK0 ] char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  2   14[BANK0 ] int 
 12561 ;; Registers used:
 12562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12568 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12569 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12570 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12571 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;Total ram usage:       29 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    9
 12575 ;; This function calls:
 12576 ;;		___lwdiv
 12577 ;;		___lwmod
 12578 ;;		___wmul
 12579 ;;		_isdigit
 12580 ;;		_putch
 12581 ;; This function is called by:
 12582 ;;		_UI
 12583 ;;		_change_state_to_menu_start
 12584 ;;		_change_state_to_menu_12
 12585 ;;		_change_state_to_menu_22
 12586 ;;		_printRTC
 12587 ;;		_EEPROM_write
 12588 ;;		_Test
 12589 ;;		_algorithmTest
 12590 ;;		_sensorTest
 12591 ;;		_actuatorTest
 12592 ;;		_PortTestA5
 12593 ;;		_SolenoidTestA5
 12594 ;;		_ToggleTestA5
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           	psect	text46
 12599  001138                     __ptext46:
 12600                           	opt stack 0
 12601  001138                     _printf:
 12602                           	opt stack 18
 12603                           
 12604                           ;doprnt.c: 466: va_list ap;
 12605                           ;doprnt.c: 499: signed char c;
 12606                           ;doprnt.c: 501: int width;
 12607                           ;doprnt.c: 506: signed char prec;
 12608                           ;doprnt.c: 508: unsigned char flag;
 12609                           ;doprnt.c: 523: union {
 12610                           ;doprnt.c: 524: unsigned long vd;
 12611                           ;doprnt.c: 525: double integ;
 12612                           ;doprnt.c: 526: } tmpval;
 12613                           ;doprnt.c: 528: unsigned int val;
 12614                           ;doprnt.c: 529: unsigned len;
 12615                           ;doprnt.c: 530: const char * cp;
 12616                           ;doprnt.c: 533: *ap = __va_start();
 12617                           
 12618                           ;incstack = 0
 12619  001138  0E90               	movlw	low (?_printf+2)
 12620  00113A  0100               	movlb	0	; () banked
 12621  00113C  6FA1               	movwf	printf@ap& (0+255),b
 12622  00113E  0E00               	movlw	high (?_printf+2)
 12623  001140  0100               	movlb	0	; () banked
 12624  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12625                           
 12626                           ;doprnt.c: 536: while(c = *f++) {
 12627  001144  D205               	goto	l5332
 12628  001146                     l5202:
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;doprnt.c: 538: if(c != '%')
 12632  001146  0E25               	movlw	37
 12633  001148  0100               	movlb	0	; () banked
 12634  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 12635  00114C  B4D8               	btfsc	status,2,c
 12636  00114E  D005               	goto	l5206
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;doprnt.c: 540: {
 12640                           ;doprnt.c: 541: (putch(c) );
 12641  001150  0100               	movlb	0	; () banked
 12642  001152  51A8               	movf	printf@c& (0+255),w,b
 12643  001154  ECDA  F020         	call	_putch
 12644                           
 12645                           ;doprnt.c: 542: continue;
 12646  001158  D1FB               	goto	l5332
 12647  00115A                     l5206:
 12648                           
 12649                           ;doprnt.c: 543: }
 12650                           ;doprnt.c: 546: width = 0;
 12651  00115A  0E00               	movlw	0
 12652  00115C  0100               	movlb	0	; () banked
 12653  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 12654  001160  0E00               	movlw	0
 12655  001162  6FA9               	movwf	printf@width& (0+255),b
 12656                           
 12657                           ;doprnt.c: 548: flag = 0;
 12658  001164  0E00               	movlw	0
 12659  001166  0100               	movlb	0	; () banked
 12660  001168  6FA7               	movwf	printf@flag& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;doprnt.c: 551: switch(*f) {
 12664                           
 12665                           ;doprnt.c: 550: for(;;) {
 12666  00116A  D005               	goto	l5212
 12667  00116C                     l5208:
 12668                           
 12669                           ;doprnt.c: 580: flag |= 0x04;
 12670  00116C  0100               	movlb	0	; () banked
 12671  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 12672                           
 12673                           ;doprnt.c: 581: f++;
 12674  001170  0100               	movlb	0	; () banked
 12675  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 12676  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12677  001176                     l5212:
 12678  001176  C08E  FFF6         	movff	printf@f,tblptrl
 12679  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 12680  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12681  00117E  6AF8               	clrf	tblptru,c
 12682  001180                     	endif
 12683  001180                     	if	0	;tblptru may be non-zero
 12684  001180                     	endif
 12685  001180  0008               	tblrd		*
 12686  001182  50F5               	movf	tablat,w,c
 12687                           
 12688                           ; Switch size 1, requested type "space"
 12689                           ; Number of cases is 1, Range of values is 48 to 48
 12690                           ; switch strategies available:
 12691                           ; Name         Instructions Cycles
 12692                           ; simple_byte            4     3 (average)
 12693                           ;	Chosen strategy is simple_byte
 12694  001184  0A30               	xorlw	48	; case 48
 12695  001186  B4D8               	btfsc	status,2,c
 12696  001188  D7F1               	goto	l5208
 12697                           
 12698                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12699                           
 12700                           ;doprnt.c: 586: }
 12701                           
 12702                           ;doprnt.c: 585: break;
 12703  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 12704  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12705  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12706  001192  6AF8               	clrf	tblptru,c
 12707  001194                     	endif
 12708  001194                     	if	0	;tblptru may be non-zero
 12709  001194                     	endif
 12710  001194  0008               	tblrd		*
 12711  001196  50F5               	movf	tablat,w,c
 12712  001198  EC01  F020         	call	_isdigit
 12713  00119C  A0D8               	btfss	status,0,c
 12714  00119E  D0D2               	goto	l5260
 12715                           
 12716                           ;doprnt.c: 598: width = 0;
 12717  0011A0  0E00               	movlw	0
 12718  0011A2  0100               	movlb	0	; () banked
 12719  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12720  0011A6  0E00               	movlw	0
 12721  0011A8  6FA9               	movwf	printf@width& (0+255),b
 12722  0011AA                     l5218:
 12723                           
 12724                           ;doprnt.c: 600: width *= 10;
 12725  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12726  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12727  0011B2  0E00               	movlw	0
 12728  0011B4  0100               	movlb	0	; () banked
 12729  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12730  0011B8  0E0A               	movlw	10
 12731  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12732  0011BC  EC82  F01E         	call	___wmul	;wreg free
 12733  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 12734  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12735                           
 12736                           ;doprnt.c: 601: width += *f++ - '0';
 12737  0011C8  0ED0               	movlw	208
 12738  0011CA  0100               	movlb	0	; () banked
 12739  0011CC  6F9A               	movwf	??_printf& (0+255),b
 12740  0011CE  0EFF               	movlw	255
 12741  0011D0  0100               	movlb	0	; () banked
 12742  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 12743  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 12744  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 12745  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12746  0011DC  6AF8               	clrf	tblptru,c
 12747  0011DE                     	endif
 12748  0011DE                     	if	0	;tblptru may be non-zero
 12749  0011DE                     	endif
 12750  0011DE  0008               	tblrd		*
 12751  0011E0  50F5               	movf	tablat,w,c
 12752  0011E2  0100               	movlb	0	; () banked
 12753  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 12754  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 12755  0011E8  0100               	movlb	0	; () banked
 12756  0011EA  519A               	movf	??_printf& (0+255),w,b
 12757  0011EC  0100               	movlb	0	; () banked
 12758  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 12759  0011F0  0100               	movlb	0	; () banked
 12760  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 12761  0011F4  0100               	movlb	0	; () banked
 12762  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12763  0011F8  0100               	movlb	0	; () banked
 12764  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 12765  0011FC  0100               	movlb	0	; () banked
 12766  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 12767  001200  0100               	movlb	0	; () banked
 12768  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 12769  001204  0100               	movlb	0	; () banked
 12770  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12771                           
 12772                           ; BSR set to: 0
 12773  001208  0100               	movlb	0	; () banked
 12774  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 12775  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12776                           
 12777                           ; BSR set to: 0
 12778                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12779  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 12780  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 12781  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12782  001216  6AF8               	clrf	tblptru,c
 12783  001218                     	endif
 12784  001218                     	if	0	;tblptru may be non-zero
 12785  001218                     	endif
 12786  001218  0008               	tblrd		*
 12787  00121A  50F5               	movf	tablat,w,c
 12788  00121C  EC01  F020         	call	_isdigit
 12789  001220  A0D8               	btfss	status,0,c
 12790  001222  D090               	goto	l5260
 12791  001224  D7C2               	goto	l5218
 12792  001226                     l5226:
 12793                           
 12794                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12795  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 12796  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12797  00122E  CFDE F09F          	movff	postinc2,printf@cp
 12798  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 12799  001236  0E02               	movlw	2
 12800  001238  0100               	movlb	0	; () banked
 12801  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 12802  00123C  0E00               	movlw	0
 12803  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12804                           
 12805                           ; BSR set to: 0
 12806                           ;doprnt.c: 740: if(!cp)
 12807  001240  0100               	movlb	0	; () banked
 12808  001242  519F               	movf	printf@cp& (0+255),w,b
 12809  001244  0100               	movlb	0	; () banked
 12810  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12811  001248  A4D8               	btfss	status,2,c
 12812  00124A  D006               	goto	l5234
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;doprnt.c: 741: cp = "(null)";
 12816  00124C  0EB6               	movlw	low STR_111
 12817  00124E  0100               	movlb	0	; () banked
 12818  001250  6F9F               	movwf	printf@cp& (0+255),b
 12819  001252  0EFF               	movlw	high STR_111
 12820  001254  0100               	movlb	0	; () banked
 12821  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12822  001258                     l5234:
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;doprnt.c: 745: len = 0;
 12826  001258  0E00               	movlw	0
 12827  00125A  0100               	movlb	0	; () banked
 12828  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 12829  00125E  0E00               	movlw	0
 12830  001260  6FA3               	movwf	printf@len& (0+255),b
 12831                           
 12832                           ;doprnt.c: 746: while(cp[len])
 12833  001262  D003               	goto	l5238
 12834  001264                     l5236:
 12835                           
 12836                           ;doprnt.c: 747: len++;
 12837  001264  0100               	movlb	0	; () banked
 12838  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 12839  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12840  00126A                     l5238:
 12841                           
 12842                           ; BSR set to: 0
 12843  00126A  0100               	movlb	0	; () banked
 12844  00126C  51A3               	movf	printf@len& (0+255),w,b
 12845  00126E  0100               	movlb	0	; () banked
 12846  001270  259F               	addwf	printf@cp& (0+255),w,b
 12847  001272  0100               	movlb	0	; () banked
 12848  001274  6F9A               	movwf	??_printf& (0+255),b
 12849  001276  0100               	movlb	0	; () banked
 12850  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 12851  00127A  0100               	movlb	0	; () banked
 12852  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12853  00127E  0100               	movlb	0	; () banked
 12854  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 12855  001282  C09A  FFF6         	movff	??_printf,tblptrl
 12856  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 12857  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 12858  00128C  6EF8               	movwf	tblptru,c
 12859  00128E  0E0F               	movlw	(high __ramtop+-1)
 12860  001290  64F7               	cpfsgt	tblptrh,c
 12861  001292  D003               	bra	u3657
 12862  001294  0008               	tblrd		*
 12863  001296  50F5               	movf	tablat,w,c
 12864  001298  D005               	bra	u3650
 12865  00129A                     u3657:
 12866  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12867  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12868  0012A2  50EF               	movf	indf0,w,c
 12869  0012A4                     u3650:
 12870  0012A4  0900               	iorlw	0
 12871  0012A6  A4D8               	btfss	status,2,c
 12872  0012A8  D7DD               	goto	l5236
 12873                           
 12874                           ;doprnt.c: 757: if(width > len)
 12875  0012AA  0100               	movlb	0	; () banked
 12876  0012AC  51A9               	movf	printf@width& (0+255),w,b
 12877  0012AE  0100               	movlb	0	; () banked
 12878  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 12879  0012B2  0100               	movlb	0	; () banked
 12880  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 12881  0012B6  0100               	movlb	0	; () banked
 12882  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12883  0012BA  B0D8               	btfsc	status,0,c
 12884  0012BC  D009               	goto	l5244
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;doprnt.c: 758: width -= len;
 12888  0012BE  0100               	movlb	0	; () banked
 12889  0012C0  51A3               	movf	printf@len& (0+255),w,b
 12890  0012C2  0100               	movlb	0	; () banked
 12891  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 12892  0012C6  0100               	movlb	0	; () banked
 12893  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 12894  0012CA  0100               	movlb	0	; () banked
 12895  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12896  0012CE  D009               	goto	l5248
 12897  0012D0                     l5244:
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;doprnt.c: 759: else
 12901                           ;doprnt.c: 760: width = 0;
 12902  0012D0  0E00               	movlw	0
 12903  0012D2  0100               	movlb	0	; () banked
 12904  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 12905  0012D6  0E00               	movlw	0
 12906  0012D8  6FA9               	movwf	printf@width& (0+255),b
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;doprnt.c: 764: while(width--)
 12910  0012DA  D003               	goto	l5248
 12911  0012DC                     l5246:
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;doprnt.c: 765: (putch(' ') );
 12915  0012DC  0E20               	movlw	32
 12916  0012DE  ECDA  F020         	call	_putch
 12917  0012E2                     l5248:
 12918  0012E2  0100               	movlb	0	; () banked
 12919  0012E4  07A9               	decf	printf@width& (0+255),f,b
 12920  0012E6  A0D8               	btfss	status,0,c
 12921  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 12922  0012EA  0100               	movlb	0	; () banked
 12923  0012EC  29A9               	incf	printf@width& (0+255),w,b
 12924  0012EE  E1F6               	bnz	l5246
 12925  0012F0  0100               	movlb	0	; () banked
 12926  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 12927  0012F4  B4D8               	btfsc	status,2,c
 12928  0012F6  D017               	goto	l5254
 12929  0012F8  D7F1               	goto	l5246
 12930  0012FA                     l5250:
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;doprnt.c: 768: (putch(*cp++) );
 12934  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 12935  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12936  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 12937  001304  6EF8               	movwf	tblptru,c
 12938  001306  0E0F               	movlw	(high __ramtop+-1)
 12939  001308  64F7               	cpfsgt	tblptrh,c
 12940  00130A  D003               	bra	u3697
 12941  00130C  0008               	tblrd		*
 12942  00130E  50F5               	movf	tablat,w,c
 12943  001310  D005               	bra	u3690
 12944  001312                     u3697:
 12945  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 12946  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 12947  00131A  50EF               	movf	indf0,w,c
 12948  00131C                     u3690:
 12949  00131C  ECDA  F020         	call	_putch
 12950  001320  0100               	movlb	0	; () banked
 12951  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 12952  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12953  001326                     l5254:
 12954                           
 12955                           ; BSR set to: 0
 12956  001326  0100               	movlb	0	; () banked
 12957  001328  07A3               	decf	printf@len& (0+255),f,b
 12958  00132A  A0D8               	btfss	status,0,c
 12959  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 12960  00132E  0100               	movlb	0	; () banked
 12961  001330  29A3               	incf	printf@len& (0+255),w,b
 12962  001332  E1E3               	bnz	l5250
 12963  001334  0100               	movlb	0	; () banked
 12964  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 12965  001338  B4D8               	btfsc	status,2,c
 12966  00133A  D10A               	goto	l5332
 12967  00133C  D7DE               	goto	l5250
 12968  00133E                     l5256:
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;doprnt.c: 818: flag |= 0x40;
 12972  00133E  0100               	movlb	0	; () banked
 12973  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;doprnt.c: 822: }
 12977                           
 12978                           ;doprnt.c: 819: break;
 12979  001342  D01D               	goto	l1212
 12980  001344                     l5260:
 12981  001344  C08E  FFF6         	movff	printf@f,tblptrl
 12982  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 12983  00134C  0100               	movlb	0	; () banked
 12984  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 12985  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12986  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12987  001352  6AF8               	clrf	tblptru,c
 12988  001354                     	endif
 12989  001354                     	if	0	;tblptru may be non-zero
 12990  001354                     	endif
 12991  001354  0008               	tblrd		*
 12992  001356  CFF5 F0A8          	movff	tablat,printf@c
 12993  00135A  0100               	movlb	0	; () banked
 12994  00135C  51A8               	movf	printf@c& (0+255),w,b
 12995                           
 12996                           ; Switch size 1, requested type "space"
 12997                           ; Number of cases is 5, Range of values is 0 to 117
 12998                           ; switch strategies available:
 12999                           ; Name         Instructions Cycles
 13000                           ; simple_byte           16     9 (average)
 13001                           ;	Chosen strategy is simple_byte
 13002  00135E  0A00               	xorlw	0	; case 0
 13003  001360  B4D8               	btfsc	status,2,c
 13004  001362  0012               	return	
 13005  001364  0A64               	xorlw	100	; case 100
 13006  001366  B4D8               	btfsc	status,2,c
 13007  001368  D00A               	goto	l1212
 13008  00136A  0A0D               	xorlw	13	; case 105
 13009  00136C  B4D8               	btfsc	status,2,c
 13010  00136E  D007               	goto	l1212
 13011  001370  0A1A               	xorlw	26	; case 115
 13012  001372  B4D8               	btfsc	status,2,c
 13013  001374  D758               	goto	l5226
 13014  001376  0A06               	xorlw	6	; case 117
 13015  001378  B4D8               	btfsc	status,2,c
 13016  00137A  D7E1               	goto	l5256
 13017  00137C  D0E9               	goto	l5332
 13018  00137E                     l1212:
 13019                           
 13020                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13021  00137E  0100               	movlb	0	; () banked
 13022  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13023  001382  D019               	goto	l5272
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;doprnt.c: 1253: {
 13027                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13028  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13029  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13030  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13031  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13032                           
 13033                           ; BSR set to: 0
 13034  001394  0E02               	movlw	2
 13035  001396  0100               	movlb	0	; () banked
 13036  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13037  00139A  0E00               	movlw	0
 13038  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;doprnt.c: 1261: if((int)val < 0) {
 13042  00139E  0100               	movlb	0	; () banked
 13043  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13044  0013A2  D016               	goto	l5276
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;doprnt.c: 1262: flag |= 0x03;
 13048  0013A4  0E03               	movlw	3
 13049  0013A6  0100               	movlb	0	; () banked
 13050  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13051                           
 13052                           ; BSR set to: 0
 13053                           ;doprnt.c: 1263: val = -val;
 13054  0013AA  0100               	movlb	0	; () banked
 13055  0013AC  6DA5               	negf	printf@val& (0+255),b
 13056  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13057  0013B0  B0D8               	btfsc	status,0,c
 13058  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;doprnt.c: 1264: }
 13062                           ;doprnt.c: 1266: }
 13063  0013B4  D00D               	goto	l5276
 13064  0013B6                     l5272:
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;doprnt.c: 1268: else
 13068                           ;doprnt.c: 1273: {
 13069                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13070  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13071  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13072  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13073  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13074                           
 13075                           ; BSR set to: 0
 13076  0013C6  0E02               	movlw	2
 13077  0013C8  0100               	movlb	0	; () banked
 13078  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13079  0013CC  0E00               	movlw	0
 13080  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13081  0013D0                     l5276:
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;doprnt.c: 1287: }
 13085                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13086  0013D0  0E01               	movlw	1
 13087  0013D2  0100               	movlb	0	; () banked
 13088  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13089  0013D6                     l5278:
 13090                           
 13091                           ; BSR set to: 0
 13092  0013D6  0E05               	movlw	5
 13093  0013D8  0100               	movlb	0	; () banked
 13094  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13095  0013DC  B4D8               	btfsc	status,2,c
 13096  0013DE  D019               	goto	l5290
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;doprnt.c: 1306: if(val < dpowers[c])
 13100                           
 13101                           ; BSR set to: 0
 13102                           
 13103                           ; BSR set to: 0
 13104  0013E0  0100               	movlb	0	; () banked
 13105  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13106  0013E4  0D02               	mullw	2
 13107  0013E6  0E4A               	movlw	low _dpowers
 13108  0013E8  24F3               	addwf	prodl,w,c
 13109  0013EA  6EF6               	movwf	tblptrl,c
 13110  0013EC  0EFB               	movlw	high _dpowers
 13111  0013EE  20F4               	addwfc	prodh,w,c
 13112  0013F0  6EF7               	movwf	tblptrh,c
 13113  0013F2                     	if	1	;There are 3 active tblptr bytes
 13114  0013F2  6AF8               	clrf	tblptru,c
 13115  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13116  0013F6  22F8               	addwfc	tblptru,f,c
 13117  0013F8                     	endif
 13118  0013F8  0009               	tblrd		*+
 13119  0013FA  50F5               	movf	tablat,w,c
 13120  0013FC  0100               	movlb	0	; () banked
 13121  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13122  001400  0009               	tblrd		*+
 13123  001402  50F5               	movf	tablat,w,c
 13124  001404  0100               	movlb	0	; () banked
 13125  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13126  001408  A0D8               	btfss	status,0,c
 13127  00140A  D003               	goto	l5290
 13128                           
 13129                           ; BSR set to: 0
 13130                           
 13131                           ; BSR set to: 0
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;doprnt.c: 1307: break;
 13135  00140C  0100               	movlb	0	; () banked
 13136  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13137  001410  D7E2               	goto	l5278
 13138  001412                     l5290:
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13142  001412  0100               	movlb	0	; () banked
 13143  001414  51A9               	movf	printf@width& (0+255),w,b
 13144  001416  0100               	movlb	0	; () banked
 13145  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13146  00141A  B4D8               	btfsc	status,2,c
 13147  00141C  D00B               	goto	l5296
 13148                           
 13149                           ; BSR set to: 0
 13150  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13151  001422  0E03               	movlw	3
 13152  001424  0100               	movlb	0	; () banked
 13153  001426  179A               	andwf	??_printf& (0+255),f,b
 13154  001428  B4D8               	btfsc	status,2,c
 13155  00142A  D004               	goto	l5296
 13156                           
 13157                           ; BSR set to: 0
 13158                           ;doprnt.c: 1346: width--;
 13159  00142C  0100               	movlb	0	; () banked
 13160  00142E  07A9               	decf	printf@width& (0+255),f,b
 13161  001430  A0D8               	btfss	status,0,c
 13162  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13163  001434                     l5296:
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;doprnt.c: 1381: if(width > c)
 13167  001434  0E80               	movlw	128
 13168  001436  0100               	movlb	0	; () banked
 13169  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13170  00143A  0E7F               	movlw	127
 13171  00143C  0100               	movlb	0	; () banked
 13172  00143E  6F9A               	movwf	??_printf& (0+255),b
 13173  001440  0100               	movlb	0	; () banked
 13174  001442  51A9               	movf	printf@width& (0+255),w,b
 13175  001444  0100               	movlb	0	; () banked
 13176  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13177  001448  0100               	movlb	0	; () banked
 13178  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13179  00144C  0A80               	xorlw	128
 13180  00144E  0100               	movlb	0	; () banked
 13181  001450  599A               	subwfb	??_printf& (0+255),w,b
 13182  001452  B0D8               	btfsc	status,0,c
 13183  001454  D00B               	goto	l5300
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;doprnt.c: 1382: width -= c;
 13187  001456  0100               	movlb	0	; () banked
 13188  001458  51A8               	movf	printf@c& (0+255),w,b
 13189  00145A  0100               	movlb	0	; () banked
 13190  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13191  00145E  0E00               	movlw	0
 13192  001460  0100               	movlb	0	; () banked
 13193  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13194  001464  0EFF               	movlw	255
 13195  001466  0100               	movlb	0	; () banked
 13196  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13197  00146A  D005               	goto	l5302
 13198  00146C                     l5300:
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;doprnt.c: 1383: else
 13202                           ;doprnt.c: 1384: width = 0;
 13203  00146C  0E00               	movlw	0
 13204  00146E  0100               	movlb	0	; () banked
 13205  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13206  001472  0E00               	movlw	0
 13207  001474  6FA9               	movwf	printf@width& (0+255),b
 13208  001476                     l5302:
 13209                           
 13210                           ; BSR set to: 0
 13211                           ;doprnt.c: 1387: if(flag & 0x04) {
 13212  001476  0100               	movlb	0	; () banked
 13213  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13214  00147A  D018               	goto	l5314
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;doprnt.c: 1392: if(flag & 0x03)
 13218  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13219  001480  0E03               	movlw	3
 13220  001482  0100               	movlb	0	; () banked
 13221  001484  179A               	andwf	??_printf& (0+255),f,b
 13222  001486  B4D8               	btfsc	status,2,c
 13223  001488  D003               	goto	l5308
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;doprnt.c: 1393: (putch('-') );
 13227  00148A  0E2D               	movlw	45
 13228  00148C  ECDA  F020         	call	_putch
 13229  001490                     l5308:
 13230                           
 13231                           ;doprnt.c: 1415: if(width)
 13232  001490  0100               	movlb	0	; () banked
 13233  001492  51A9               	movf	printf@width& (0+255),w,b
 13234  001494  0100               	movlb	0	; () banked
 13235  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13236  001498  B4D8               	btfsc	status,2,c
 13237  00149A  D025               	goto	l5324
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;doprnt.c: 1417: (putch('0') );
 13241                           
 13242                           ; BSR set to: 0
 13243                           
 13244                           ;doprnt.c: 1416: do
 13245  00149C  0E30               	movlw	48
 13246  00149E  ECDA  F020         	call	_putch
 13247                           
 13248                           ;doprnt.c: 1418: while(--width);
 13249  0014A2  0100               	movlb	0	; () banked
 13250  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13251  0014A6  A0D8               	btfss	status,0,c
 13252  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13253  0014AA  D7F2               	goto	l5308
 13254  0014AC                     l5314:
 13255                           
 13256                           ; BSR set to: 0
 13257                           ;doprnt.c: 1422: {
 13258                           ;doprnt.c: 1424: if(width
 13259                           ;doprnt.c: 1428: )
 13260  0014AC  0100               	movlb	0	; () banked
 13261  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13262  0014B0  0100               	movlb	0	; () banked
 13263  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13264  0014B4  B4D8               	btfsc	status,2,c
 13265  0014B6  D00D               	goto	l5320
 13266  0014B8                     l5316:
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;doprnt.c: 1430: (putch(' ') );
 13270  0014B8  0E20               	movlw	32
 13271  0014BA  ECDA  F020         	call	_putch
 13272                           
 13273                           ;doprnt.c: 1431: while(--width);
 13274  0014BE  0100               	movlb	0	; () banked
 13275  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13276  0014C2  A0D8               	btfss	status,0,c
 13277  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13278  0014C6  0100               	movlb	0	; () banked
 13279  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13280  0014CA  0100               	movlb	0	; () banked
 13281  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13282  0014CE  A4D8               	btfss	status,2,c
 13283  0014D0  D7F3               	goto	l5316
 13284  0014D2                     l5320:
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;doprnt.c: 1438: if(flag & 0x03)
 13288  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13289  0014D6  0E03               	movlw	3
 13290  0014D8  0100               	movlb	0	; () banked
 13291  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13292  0014DC  B4D8               	btfsc	status,2,c
 13293  0014DE  D003               	goto	l5324
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;doprnt.c: 1439: (putch('-') );
 13297  0014E0  0E2D               	movlw	45
 13298  0014E2  ECDA  F020         	call	_putch
 13299  0014E6                     l5324:
 13300                           
 13301                           ;doprnt.c: 1469: }
 13302                           ;doprnt.c: 1472: prec = c;
 13303  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13304                           
 13305                           ;doprnt.c: 1474: while(prec--) {
 13306  0014EA  D02C               	goto	l5330
 13307  0014EC                     l5326:
 13308                           
 13309                           ;doprnt.c: 1478: {
 13310                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13311  0014EC  0100               	movlb	0	; () banked
 13312  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13313  0014F0  0D02               	mullw	2
 13314  0014F2  0E4A               	movlw	low _dpowers
 13315  0014F4  24F3               	addwf	prodl,w,c
 13316  0014F6  6EF6               	movwf	tblptrl,c
 13317  0014F8  0EFB               	movlw	high _dpowers
 13318  0014FA  20F4               	addwfc	prodh,w,c
 13319  0014FC  6EF7               	movwf	tblptrh,c
 13320  0014FE                     	if	1	;There are 3 active tblptr bytes
 13321  0014FE  6AF8               	clrf	tblptru,c
 13322  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13323  001502  22F8               	addwfc	tblptru,f,c
 13324  001504                     	endif
 13325  001504  0009               	tblrd		*+
 13326  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13327  00150A  000A               	tblrd		*-
 13328  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13329  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13330  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13331  001518  EC23  F01B         	call	___lwdiv	;wreg free
 13332  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13333  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13334  001524  0E00               	movlw	0
 13335  001526  0100               	movlb	0	; () banked
 13336  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13337  00152A  0E0A               	movlw	10
 13338  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13339  00152E  EC3B  F01C         	call	___lwmod	;wreg free
 13340  001532  0100               	movlb	0	; () banked
 13341  001534  5187               	movf	?___lwmod& (0+255),w,b
 13342  001536  0F30               	addlw	48
 13343  001538  0100               	movlb	0	; () banked
 13344  00153A  6FA8               	movwf	printf@c& (0+255),b
 13345                           
 13346                           ; BSR set to: 0
 13347                           ;doprnt.c: 1523: }
 13348                           ;doprnt.c: 1524: (putch(c) );
 13349  00153C  0100               	movlb	0	; () banked
 13350  00153E  51A8               	movf	printf@c& (0+255),w,b
 13351  001540  ECDA  F020         	call	_putch
 13352  001544                     l5330:
 13353  001544  0100               	movlb	0	; () banked
 13354  001546  079E               	decf	printf@prec& (0+255),f,b
 13355  001548  0100               	movlb	0	; () banked
 13356  00154A  299E               	incf	printf@prec& (0+255),w,b
 13357  00154C  A4D8               	btfss	status,2,c
 13358  00154E  D7CE               	goto	l5326
 13359  001550                     l5332:
 13360  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13361  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13362  001558  0100               	movlb	0	; () banked
 13363  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13364  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13365  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13366  00155E  6AF8               	clrf	tblptru,c
 13367  001560                     	endif
 13368  001560                     	if	0	;tblptru may be non-zero
 13369  001560                     	endif
 13370  001560  0008               	tblrd		*
 13371  001562  CFF5 F0A8          	movff	tablat,printf@c
 13372  001566  0100               	movlb	0	; () banked
 13373  001568  51A8               	movf	printf@c& (0+255),w,b
 13374  00156A  B4D8               	btfsc	status,2,c
 13375  00156C  0012               	return	
 13376  00156E  D5EB               	goto	l5202
 13377  001570                     __end_of_printf:
 13378                           	opt stack 0
 13379                           tblptru	equ	0xFF8
 13380                           tblptrh	equ	0xFF7
 13381                           tblptrl	equ	0xFF6
 13382                           tablat	equ	0xFF5
 13383                           prodh	equ	0xFF4
 13384                           prodl	equ	0xFF3
 13385                           intcon	equ	0xFF2
 13386                           intcon2	equ	0xFF1
 13387                           intcon3	equ	0xFF0
 13388                           indf0	equ	0xFEF
 13389                           postinc0	equ	0xFEE
 13390                           fsr0h	equ	0xFEA
 13391                           fsr0l	equ	0xFE9
 13392                           wreg	equ	0xFE8
 13393                           postdec1	equ	0xFE5
 13394                           fsr1l	equ	0xFE1
 13395                           indf2	equ	0xFDF
 13396                           postinc2	equ	0xFDE
 13397                           postdec2	equ	0xFDD
 13398                           fsr2h	equ	0xFDA
 13399                           fsr2l	equ	0xFD9
 13400                           status	equ	0xFD8
 13401                           
 13402 ;; *************** function _putch *****************
 13403 ;; Defined at:
 13404 ;;		line 20 in file "lcd.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  data            1    wreg     unsigned char 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  data            1    2[BANK0 ] unsigned char 
 13409 ;; Return value:  Size  Location     Type
 13410 ;;                  1    wreg      void 
 13411 ;; Registers used:
 13412 ;;		wreg, status,2, status,0, cstack
 13413 ;; Tracked objects:
 13414 ;;		On entry : 0/0
 13415 ;;		On exit  : 0/0
 13416 ;;		Unchanged: 0/0
 13417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13422 ;;Total ram usage:        1 bytes
 13423 ;; Hardware stack levels used:    1
 13424 ;; Hardware stack levels required when called:    8
 13425 ;; This function calls:
 13426 ;;		_lcdNibble
 13427 ;; This function is called by:
 13428 ;;		_printf
 13429 ;; This function uses a non-reentrant model
 13430 ;;
 13431                           
 13432                           	psect	text47
 13433  0041B4                     __ptext47:
 13434                           	opt stack 0
 13435  0041B4                     _putch:
 13436                           	opt stack 18
 13437                           
 13438                           ;incstack = 0
 13439                           ;putch@data stored from wreg
 13440  0041B4  0100               	movlb	0	; () banked
 13441  0041B6  6F82               	movwf	putch@data& (0+255),b
 13442                           
 13443                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13444  0041B8  848C               	bsf	3980,2,c	;volatile
 13445                           
 13446                           ;lcd.c: 22: lcdNibble(data);
 13447  0041BA  0100               	movlb	0	; () banked
 13448  0041BC  5182               	movf	putch@data& (0+255),w,b
 13449  0041BE  EC07  F01C         	call	_lcdNibble
 13450  0041C2  0012               	return		;funcret
 13451  0041C4                     __end_of_putch:
 13452                           	opt stack 0
 13453                           tblptru	equ	0xFF8
 13454                           tblptrh	equ	0xFF7
 13455                           tblptrl	equ	0xFF6
 13456                           tablat	equ	0xFF5
 13457                           prodh	equ	0xFF4
 13458                           prodl	equ	0xFF3
 13459                           intcon	equ	0xFF2
 13460                           intcon2	equ	0xFF1
 13461                           intcon3	equ	0xFF0
 13462                           indf0	equ	0xFEF
 13463                           postinc0	equ	0xFEE
 13464                           fsr0h	equ	0xFEA
 13465                           fsr0l	equ	0xFE9
 13466                           wreg	equ	0xFE8
 13467                           postdec1	equ	0xFE5
 13468                           fsr1l	equ	0xFE1
 13469                           indf2	equ	0xFDF
 13470                           postinc2	equ	0xFDE
 13471                           postdec2	equ	0xFDD
 13472                           fsr2h	equ	0xFDA
 13473                           fsr2l	equ	0xFD9
 13474                           status	equ	0xFD8
 13475                           
 13476 ;; *************** function _isdigit *****************
 13477 ;; Defined at:
 13478 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13479 ;; Parameters:    Size  Location     Type
 13480 ;;  c               1    wreg     unsigned char 
 13481 ;; Auto vars:     Size  Location     Type
 13482 ;;  c               1    2[BANK0 ] unsigned char 
 13483 ;; Return value:  Size  Location     Type
 13484 ;;		None               void
 13485 ;; Registers used:
 13486 ;;		wreg, status,2, status,0
 13487 ;; Tracked objects:
 13488 ;;		On entry : 0/0
 13489 ;;		On exit  : 0/0
 13490 ;;		Unchanged: 0/0
 13491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13495 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13496 ;;Total ram usage:        3 bytes
 13497 ;; Hardware stack levels used:    1
 13498 ;; Hardware stack levels required when called:    7
 13499 ;; This function calls:
 13500 ;;		Nothing
 13501 ;; This function is called by:
 13502 ;;		_printf
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text48
 13507  004002                     __ptext48:
 13508                           	opt stack 0
 13509  004002                     _isdigit:
 13510                           	opt stack 19
 13511                           
 13512                           ;incstack = 0
 13513                           ;isdigit@c stored from wreg
 13514  004002  0100               	movlb	0	; () banked
 13515  004004  6F82               	movwf	isdigit@c& (0+255),b
 13516  004006  0E00               	movlw	0
 13517  004008  0100               	movlb	0	; () banked
 13518  00400A  6F81               	movwf	_isdigit$1872& (0+255),b
 13519                           
 13520                           ; BSR set to: 0
 13521  00400C  0E3A               	movlw	58
 13522  00400E  0100               	movlb	0	; () banked
 13523  004010  6182               	cpfslt	isdigit@c& (0+255),b
 13524  004012  D007               	goto	l5056
 13525                           
 13526                           ; BSR set to: 0
 13527  004014  0E2F               	movlw	47
 13528  004016  0100               	movlb	0	; () banked
 13529  004018  6582               	cpfsgt	isdigit@c& (0+255),b
 13530  00401A  D003               	goto	l5056
 13531                           
 13532                           ; BSR set to: 0
 13533  00401C  0E01               	movlw	1
 13534  00401E  0100               	movlb	0	; () banked
 13535  004020  6F81               	movwf	_isdigit$1872& (0+255),b
 13536  004022                     l5056:
 13537                           
 13538                           ; BSR set to: 0
 13539  004022  C081  F080         	movff	_isdigit$1872,??_isdigit
 13540  004026  0100               	movlb	0	; () banked
 13541  004028  3180               	rrcf	??_isdigit& (0+255),w,b
 13542  00402A  0012               	return	
 13543  00402C                     __end_of_isdigit:
 13544                           	opt stack 0
 13545                           tblptru	equ	0xFF8
 13546                           tblptrh	equ	0xFF7
 13547                           tblptrl	equ	0xFF6
 13548                           tablat	equ	0xFF5
 13549                           prodh	equ	0xFF4
 13550                           prodl	equ	0xFF3
 13551                           intcon	equ	0xFF2
 13552                           intcon2	equ	0xFF1
 13553                           intcon3	equ	0xFF0
 13554                           indf0	equ	0xFEF
 13555                           postinc0	equ	0xFEE
 13556                           fsr0h	equ	0xFEA
 13557                           fsr0l	equ	0xFE9
 13558                           wreg	equ	0xFE8
 13559                           postdec1	equ	0xFE5
 13560                           fsr1l	equ	0xFE1
 13561                           indf2	equ	0xFDF
 13562                           postinc2	equ	0xFDE
 13563                           postdec2	equ	0xFDD
 13564                           fsr2h	equ	0xFDA
 13565                           fsr2l	equ	0xFD9
 13566                           status	equ	0xFD8
 13567                           
 13568 ;; *************** function ___wmul *****************
 13569 ;; Defined at:
 13570 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13573 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13574 ;; Auto vars:     Size  Location     Type
 13575 ;;  product         2    4[BANK0 ] unsigned int 
 13576 ;; Return value:  Size  Location     Type
 13577 ;;                  2    0[BANK0 ] unsigned int 
 13578 ;; Registers used:
 13579 ;;		wreg, status,2, status,0, prodl, prodh
 13580 ;; Tracked objects:
 13581 ;;		On entry : 0/0
 13582 ;;		On exit  : 0/0
 13583 ;;		Unchanged: 0/0
 13584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;Total ram usage:        6 bytes
 13590 ;; Hardware stack levels used:    1
 13591 ;; Hardware stack levels required when called:    7
 13592 ;; This function calls:
 13593 ;;		Nothing
 13594 ;; This function is called by:
 13595 ;;		_printf
 13596 ;; This function uses a non-reentrant model
 13597 ;;
 13598                           
 13599                           	psect	text49
 13600  003D04                     __ptext49:
 13601                           	opt stack 0
 13602  003D04                     ___wmul:
 13603                           	opt stack 19
 13604                           
 13605                           ; BSR set to: 0
 13606                           ;incstack = 0
 13607  003D04  0100               	movlb	0	; () banked
 13608  003D06  5180               	movf	___wmul@multiplier& (0+255),w,b
 13609  003D08  0100               	movlb	0	; () banked
 13610  003D0A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13611  003D0C  CFF3 F084          	movff	prodl,___wmul@product
 13612  003D10  CFF4 F085          	movff	prodh,___wmul@product+1
 13613  003D14  0100               	movlb	0	; () banked
 13614  003D16  5180               	movf	___wmul@multiplier& (0+255),w,b
 13615  003D18  0100               	movlb	0	; () banked
 13616  003D1A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13617  003D1C  50F3               	movf	prodl,w,c
 13618  003D1E  0100               	movlb	0	; () banked
 13619  003D20  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13620  003D22  0100               	movlb	0	; () banked
 13621  003D24  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13622  003D26  0100               	movlb	0	; () banked
 13623  003D28  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13624  003D2A  50F3               	movf	prodl,w,c
 13625  003D2C  0100               	movlb	0	; () banked
 13626  003D2E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13627                           
 13628                           ; BSR set to: 0
 13629  003D30  C084  F080         	movff	___wmul@product,?___wmul
 13630  003D34  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13631  003D38  0012               	return	
 13632  003D3A                     __end_of___wmul:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           intcon3	equ	0xFF0
 13643                           indf0	equ	0xFEF
 13644                           postinc0	equ	0xFEE
 13645                           fsr0h	equ	0xFEA
 13646                           fsr0l	equ	0xFE9
 13647                           wreg	equ	0xFE8
 13648                           postdec1	equ	0xFE5
 13649                           fsr1l	equ	0xFE1
 13650                           indf2	equ	0xFDF
 13651                           postinc2	equ	0xFDE
 13652                           postdec2	equ	0xFDD
 13653                           fsr2h	equ	0xFDA
 13654                           fsr2l	equ	0xFD9
 13655                           status	equ	0xFD8
 13656                           
 13657 ;; *************** function ___lwmod *****************
 13658 ;; Defined at:
 13659 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;  dividend        2    7[BANK0 ] unsigned int 
 13662 ;;  divisor         2    9[BANK0 ] unsigned int 
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;  counter         1   11[BANK0 ] unsigned char 
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  2    7[BANK0 ] unsigned int 
 13667 ;; Registers used:
 13668 ;;		wreg, status,2, status,0
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:        5 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    7
 13681 ;; This function calls:
 13682 ;;		Nothing
 13683 ;; This function is called by:
 13684 ;;		_printf
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           	psect	text50
 13689  003876                     __ptext50:
 13690                           	opt stack 0
 13691  003876                     ___lwmod:
 13692                           	opt stack 19
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;incstack = 0
 13696  003876  0100               	movlb	0	; () banked
 13697  003878  5189               	movf	___lwmod@divisor& (0+255),w,b
 13698  00387A  0100               	movlb	0	; () banked
 13699  00387C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13700  00387E  B4D8               	btfsc	status,2,c
 13701  003880  D026               	goto	l1669
 13702                           
 13703                           ; BSR set to: 0
 13704  003882  0E01               	movlw	1
 13705  003884  0100               	movlb	0	; () banked
 13706  003886  6F8B               	movwf	___lwmod@counter& (0+255),b
 13707  003888  D006               	goto	l5094
 13708  00388A                     l5092:
 13709                           
 13710                           ; BSR set to: 0
 13711  00388A  0100               	movlb	0	; () banked
 13712  00388C  90D8               	bcf	status,0,c
 13713  00388E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13714  003890  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13715  003892  0100               	movlb	0	; () banked
 13716  003894  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13717  003896                     l5094:
 13718                           
 13719                           ; BSR set to: 0
 13720  003896  0100               	movlb	0	; () banked
 13721  003898  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13722  00389A  D7F7               	goto	l5092
 13723  00389C                     l5096:
 13724                           
 13725                           ; BSR set to: 0
 13726  00389C  0100               	movlb	0	; () banked
 13727  00389E  5189               	movf	___lwmod@divisor& (0+255),w,b
 13728  0038A0  0100               	movlb	0	; () banked
 13729  0038A2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13730  0038A4  0100               	movlb	0	; () banked
 13731  0038A6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13732  0038A8  0100               	movlb	0	; () banked
 13733  0038AA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13734  0038AC  A0D8               	btfss	status,0,c
 13735  0038AE  D008               	goto	l5100
 13736                           
 13737                           ; BSR set to: 0
 13738  0038B0  0100               	movlb	0	; () banked
 13739  0038B2  5189               	movf	___lwmod@divisor& (0+255),w,b
 13740  0038B4  0100               	movlb	0	; () banked
 13741  0038B6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13742  0038B8  0100               	movlb	0	; () banked
 13743  0038BA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13744  0038BC  0100               	movlb	0	; () banked
 13745  0038BE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13746  0038C0                     l5100:
 13747                           
 13748                           ; BSR set to: 0
 13749  0038C0  0100               	movlb	0	; () banked
 13750  0038C2  90D8               	bcf	status,0,c
 13751  0038C4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13752  0038C6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13753                           
 13754                           ; BSR set to: 0
 13755  0038C8  0100               	movlb	0	; () banked
 13756  0038CA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13757  0038CC  D7E7               	goto	l5096
 13758  0038CE                     l1669:
 13759                           
 13760                           ; BSR set to: 0
 13761  0038CE  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13762  0038D2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13763                           
 13764                           ; BSR set to: 0
 13765  0038D6  0012               	return		;funcret
 13766  0038D8                     __end_of___lwmod:
 13767                           	opt stack 0
 13768                           tblptru	equ	0xFF8
 13769                           tblptrh	equ	0xFF7
 13770                           tblptrl	equ	0xFF6
 13771                           tablat	equ	0xFF5
 13772                           prodh	equ	0xFF4
 13773                           prodl	equ	0xFF3
 13774                           intcon	equ	0xFF2
 13775                           intcon2	equ	0xFF1
 13776                           intcon3	equ	0xFF0
 13777                           indf0	equ	0xFEF
 13778                           postinc0	equ	0xFEE
 13779                           fsr0h	equ	0xFEA
 13780                           fsr0l	equ	0xFE9
 13781                           wreg	equ	0xFE8
 13782                           postdec1	equ	0xFE5
 13783                           fsr1l	equ	0xFE1
 13784                           indf2	equ	0xFDF
 13785                           postinc2	equ	0xFDE
 13786                           postdec2	equ	0xFDD
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function ___lwdiv *****************
 13792 ;; Defined at:
 13793 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  dividend        2    0[BANK0 ] unsigned int 
 13796 ;;  divisor         2    2[BANK0 ] unsigned int 
 13797 ;; Auto vars:     Size  Location     Type
 13798 ;;  quotient        2    4[BANK0 ] unsigned int 
 13799 ;;  counter         1    6[BANK0 ] unsigned char 
 13800 ;; Return value:  Size  Location     Type
 13801 ;;                  2    0[BANK0 ] unsigned int 
 13802 ;; Registers used:
 13803 ;;		wreg, status,2, status,0
 13804 ;; Tracked objects:
 13805 ;;		On entry : 0/0
 13806 ;;		On exit  : 0/0
 13807 ;;		Unchanged: 0/0
 13808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;Total ram usage:        7 bytes
 13814 ;; Hardware stack levels used:    1
 13815 ;; Hardware stack levels required when called:    7
 13816 ;; This function calls:
 13817 ;;		Nothing
 13818 ;; This function is called by:
 13819 ;;		_printf
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           	psect	text51
 13824  003646                     __ptext51:
 13825                           	opt stack 0
 13826  003646                     ___lwdiv:
 13827                           	opt stack 19
 13828                           
 13829                           ; BSR set to: 0
 13830                           ;incstack = 0
 13831  003646  0E00               	movlw	0
 13832  003648  0100               	movlb	0	; () banked
 13833  00364A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13834  00364C  0E00               	movlw	0
 13835  00364E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13836                           
 13837                           ; BSR set to: 0
 13838  003650  0100               	movlb	0	; () banked
 13839  003652  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13840  003654  0100               	movlb	0	; () banked
 13841  003656  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13842  003658  B4D8               	btfsc	status,2,c
 13843  00365A  D02C               	goto	l1659
 13844                           
 13845                           ; BSR set to: 0
 13846  00365C  0E01               	movlw	1
 13847  00365E  0100               	movlb	0	; () banked
 13848  003660  6F86               	movwf	___lwdiv@counter& (0+255),b
 13849  003662  D006               	goto	l5074
 13850  003664                     l5072:
 13851                           
 13852                           ; BSR set to: 0
 13853  003664  0100               	movlb	0	; () banked
 13854  003666  90D8               	bcf	status,0,c
 13855  003668  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13856  00366A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13857  00366C  0100               	movlb	0	; () banked
 13858  00366E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13859  003670                     l5074:
 13860                           
 13861                           ; BSR set to: 0
 13862  003670  0100               	movlb	0	; () banked
 13863  003672  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13864  003674  D7F7               	goto	l5072
 13865  003676                     l5076:
 13866                           
 13867                           ; BSR set to: 0
 13868  003676  0100               	movlb	0	; () banked
 13869  003678  90D8               	bcf	status,0,c
 13870  00367A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13871  00367C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13872                           
 13873                           ; BSR set to: 0
 13874  00367E  0100               	movlb	0	; () banked
 13875  003680  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13876  003682  0100               	movlb	0	; () banked
 13877  003684  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13878  003686  0100               	movlb	0	; () banked
 13879  003688  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13880  00368A  0100               	movlb	0	; () banked
 13881  00368C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13882  00368E  A0D8               	btfss	status,0,c
 13883  003690  D00A               	goto	l5084
 13884                           
 13885                           ; BSR set to: 0
 13886  003692  0100               	movlb	0	; () banked
 13887  003694  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13888  003696  0100               	movlb	0	; () banked
 13889  003698  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13890  00369A  0100               	movlb	0	; () banked
 13891  00369C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13892  00369E  0100               	movlb	0	; () banked
 13893  0036A0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13894                           
 13895                           ; BSR set to: 0
 13896  0036A2  0100               	movlb	0	; () banked
 13897  0036A4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13898  0036A6                     l5084:
 13899                           
 13900                           ; BSR set to: 0
 13901  0036A6  0100               	movlb	0	; () banked
 13902  0036A8  90D8               	bcf	status,0,c
 13903  0036AA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13904  0036AC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13905                           
 13906                           ; BSR set to: 0
 13907  0036AE  0100               	movlb	0	; () banked
 13908  0036B0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13909  0036B2  D7E1               	goto	l5076
 13910  0036B4                     l1659:
 13911                           
 13912                           ; BSR set to: 0
 13913  0036B4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13914  0036B8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13915                           
 13916                           ; BSR set to: 0
 13917  0036BC  0012               	return		;funcret
 13918  0036BE                     __end_of___lwdiv:
 13919                           	opt stack 0
 13920                           tblptru	equ	0xFF8
 13921                           tblptrh	equ	0xFF7
 13922                           tblptrl	equ	0xFF6
 13923                           tablat	equ	0xFF5
 13924                           prodh	equ	0xFF4
 13925                           prodl	equ	0xFF3
 13926                           intcon	equ	0xFF2
 13927                           intcon2	equ	0xFF1
 13928                           intcon3	equ	0xFF0
 13929                           indf0	equ	0xFEF
 13930                           postinc0	equ	0xFEE
 13931                           fsr0h	equ	0xFEA
 13932                           fsr0l	equ	0xFE9
 13933                           wreg	equ	0xFE8
 13934                           postdec1	equ	0xFE5
 13935                           fsr1l	equ	0xFE1
 13936                           indf2	equ	0xFDF
 13937                           postinc2	equ	0xFDE
 13938                           postdec2	equ	0xFDD
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function _lcdInst *****************
 13944 ;; Defined at:
 13945 ;;		line 15 in file "lcd.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  data            1    wreg     unsigned char 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  data            1    2[BANK0 ] unsigned char 
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  1    wreg      void 
 13952 ;; Registers used:
 13953 ;;		wreg, status,2, status,0, cstack
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13963 ;;Total ram usage:        1 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; Hardware stack levels required when called:    8
 13966 ;; This function calls:
 13967 ;;		_lcdNibble
 13968 ;; This function is called by:
 13969 ;;		_UI
 13970 ;;		_change_state_to_menu_start
 13971 ;;		_change_state_to_menu_12
 13972 ;;		_change_state_to_menu_22
 13973 ;;		_initLCD
 13974 ;;		_printRTC
 13975 ;;		_Loading
 13976 ;;		_EEPROM_write
 13977 ;;		_Test
 13978 ;;		_algorithmTest
 13979 ;;		_sensorTest
 13980 ;;		_actuatorTest
 13981 ;;		_PortTestA5
 13982 ;;		_SolenoidTestA5
 13983 ;;		_ToggleTestA5
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           	psect	text52
 13988  0041C4                     __ptext52:
 13989                           	opt stack 0
 13990  0041C4                     _lcdInst:
 13991                           	opt stack 20
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;incstack = 0
 13995                           ;lcdInst@data stored from wreg
 13996  0041C4  0100               	movlb	0	; () banked
 13997  0041C6  6F82               	movwf	lcdInst@data& (0+255),b
 13998                           
 13999                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14000  0041C8  948C               	bcf	3980,2,c	;volatile
 14001                           
 14002                           ;lcd.c: 17: lcdNibble(data);
 14003  0041CA  0100               	movlb	0	; () banked
 14004  0041CC  5182               	movf	lcdInst@data& (0+255),w,b
 14005  0041CE  EC07  F01C         	call	_lcdNibble
 14006  0041D2  0012               	return		;funcret
 14007  0041D4                     __end_of_lcdInst:
 14008                           	opt stack 0
 14009                           tblptru	equ	0xFF8
 14010                           tblptrh	equ	0xFF7
 14011                           tblptrl	equ	0xFF6
 14012                           tablat	equ	0xFF5
 14013                           prodh	equ	0xFF4
 14014                           prodl	equ	0xFF3
 14015                           intcon	equ	0xFF2
 14016                           intcon2	equ	0xFF1
 14017                           intcon3	equ	0xFF0
 14018                           indf0	equ	0xFEF
 14019                           postinc0	equ	0xFEE
 14020                           fsr0h	equ	0xFEA
 14021                           fsr0l	equ	0xFE9
 14022                           wreg	equ	0xFE8
 14023                           postdec1	equ	0xFE5
 14024                           fsr1l	equ	0xFE1
 14025                           indf2	equ	0xFDF
 14026                           postinc2	equ	0xFDE
 14027                           postdec2	equ	0xFDD
 14028                           fsr2h	equ	0xFDA
 14029                           fsr2l	equ	0xFD9
 14030                           status	equ	0xFD8
 14031                           
 14032 ;; *************** function _lcdNibble *****************
 14033 ;; Defined at:
 14034 ;;		line 25 in file "lcd.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  data            1    wreg     unsigned char 
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;  data            1    1[BANK0 ] unsigned char 
 14039 ;;  temp            1    0[BANK0 ] unsigned char 
 14040 ;; Return value:  Size  Location     Type
 14041 ;;                  1    wreg      void 
 14042 ;; Registers used:
 14043 ;;		wreg, status,2, status,0
 14044 ;; Tracked objects:
 14045 ;;		On entry : 0/0
 14046 ;;		On exit  : 0/0
 14047 ;;		Unchanged: 0/0
 14048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14052 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14053 ;;Total ram usage:        2 bytes
 14054 ;; Hardware stack levels used:    1
 14055 ;; Hardware stack levels required when called:    7
 14056 ;; This function calls:
 14057 ;;		Nothing
 14058 ;; This function is called by:
 14059 ;;		_lcdInst
 14060 ;;		_putch
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           	psect	text53
 14065  00380E                     __ptext53:
 14066                           	opt stack 0
 14067  00380E                     _lcdNibble:
 14068                           	opt stack 20
 14069                           
 14070                           ;incstack = 0
 14071                           ;lcdNibble@data stored from wreg
 14072  00380E  0100               	movlb	0	; () banked
 14073  003810  6F81               	movwf	lcdNibble@data& (0+255),b
 14074                           
 14075                           ;lcd.c: 27: char temp = data & 0xF0;
 14076  003812  0100               	movlb	0	; () banked
 14077  003814  5181               	movf	lcdNibble@data& (0+255),w,b
 14078  003816  0BF0               	andlw	240
 14079  003818  0100               	movlb	0	; () banked
 14080  00381A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14081                           
 14082                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14083  00381C  508C               	movf	3980,w,c	;volatile
 14084  00381E  0B0F               	andlw	15
 14085  003820  6E8C               	movwf	3980,c	;volatile
 14086                           
 14087                           ;lcd.c: 29: LATD = temp | LATD;
 14088  003822  0100               	movlb	0	; () banked
 14089  003824  5180               	movf	lcdNibble@temp& (0+255),w,b
 14090  003826  108C               	iorwf	3980,w,c	;volatile
 14091  003828  6E8C               	movwf	3980,c	;volatile
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14095  00382A  868C               	bsf	3980,3,c	;volatile
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14099  00382C  0E42               	movlw	66
 14100  00382E                     u7617:
 14101  00382E  2EE8               	decfsz	wreg,f,c
 14102  003830  D7FE               	bra	u7617
 14103  003832  D000               	nop2	
 14104                           
 14105                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14106  003834  968C               	bcf	3980,3,c	;volatile
 14107                           
 14108                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14109  003836  0E42               	movlw	66
 14110  003838                     u7627:
 14111  003838  2EE8               	decfsz	wreg,f,c
 14112  00383A  D7FE               	bra	u7627
 14113  00383C  D000               	nop2	
 14114                           
 14115                           ;lcd.c: 36: data = data << 4;
 14116  00383E  0100               	movlb	0	; () banked
 14117  003840  3981               	swapf	lcdNibble@data& (0+255),w,b
 14118  003842  0BF0               	andlw	240
 14119  003844  0100               	movlb	0	; () banked
 14120  003846  6F81               	movwf	lcdNibble@data& (0+255),b
 14121                           
 14122                           ;lcd.c: 38: temp = data & 0xF0;
 14123  003848  0100               	movlb	0	; () banked
 14124  00384A  5181               	movf	lcdNibble@data& (0+255),w,b
 14125  00384C  0BF0               	andlw	240
 14126  00384E  0100               	movlb	0	; () banked
 14127  003850  6F80               	movwf	lcdNibble@temp& (0+255),b
 14128                           
 14129                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14130  003852  508C               	movf	3980,w,c	;volatile
 14131  003854  0B0F               	andlw	15
 14132  003856  6E8C               	movwf	3980,c	;volatile
 14133                           
 14134                           ;lcd.c: 40: LATD = temp | LATD;
 14135  003858  0100               	movlb	0	; () banked
 14136  00385A  5180               	movf	lcdNibble@temp& (0+255),w,b
 14137  00385C  108C               	iorwf	3980,w,c	;volatile
 14138  00385E  6E8C               	movwf	3980,c	;volatile
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14142  003860  868C               	bsf	3980,3,c	;volatile
 14143                           
 14144                           ; BSR set to: 0
 14145                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14146  003862  0E42               	movlw	66
 14147  003864                     u7637:
 14148  003864  2EE8               	decfsz	wreg,f,c
 14149  003866  D7FE               	bra	u7637
 14150  003868  D000               	nop2	
 14151                           
 14152                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14153  00386A  968C               	bcf	3980,3,c	;volatile
 14154                           
 14155                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14156  00386C  0E42               	movlw	66
 14157  00386E                     u7647:
 14158  00386E  2EE8               	decfsz	wreg,f,c
 14159  003870  D7FE               	bra	u7647
 14160  003872  D000               	nop2	
 14161  003874  0012               	return		;funcret
 14162  003876                     __end_of_lcdNibble:
 14163                           	opt stack 0
 14164                           tblptru	equ	0xFF8
 14165                           tblptrh	equ	0xFF7
 14166                           tblptrl	equ	0xFF6
 14167                           tablat	equ	0xFF5
 14168                           prodh	equ	0xFF4
 14169                           prodl	equ	0xFF3
 14170                           intcon	equ	0xFF2
 14171                           intcon2	equ	0xFF1
 14172                           intcon3	equ	0xFF0
 14173                           indf0	equ	0xFEF
 14174                           postinc0	equ	0xFEE
 14175                           fsr0h	equ	0xFEA
 14176                           fsr0l	equ	0xFE9
 14177                           wreg	equ	0xFE8
 14178                           postdec1	equ	0xFE5
 14179                           fsr1l	equ	0xFE1
 14180                           indf2	equ	0xFDF
 14181                           postinc2	equ	0xFDE
 14182                           postdec2	equ	0xFDD
 14183                           fsr2h	equ	0xFDA
 14184                           fsr2l	equ	0xFD9
 14185                           status	equ	0xFD8
 14186                           
 14187 ;; *************** function _EEPROMTest *****************
 14188 ;; Defined at:
 14189 ;;		line 427 in file "Test.c"
 14190 ;; Parameters:    Size  Location     Type
 14191 ;;		None
 14192 ;; Auto vars:     Size  Location     Type
 14193 ;;		None
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  1    wreg      void 
 14196 ;; Registers used:
 14197 ;;		None
 14198 ;; Tracked objects:
 14199 ;;		On entry : 0/0
 14200 ;;		On exit  : 0/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;Total ram usage:        0 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    7
 14210 ;; This function calls:
 14211 ;;		Nothing
 14212 ;; This function is called by:
 14213 ;;		_Test
 14214 ;; This function uses a non-reentrant model
 14215 ;;
 14216                           
 14217                           	psect	text54
 14218  004228                     __ptext54:
 14219                           	opt stack 0
 14220  004228                     _EEPROMTest:
 14221                           	opt stack 22
 14222                           
 14223                           ;incstack = 0
 14224  004228  0012               	return		;funcret
 14225  00422A                     __end_of_EEPROMTest:
 14226                           	opt stack 0
 14227                           tblptru	equ	0xFF8
 14228                           tblptrh	equ	0xFF7
 14229                           tblptrl	equ	0xFF6
 14230                           tablat	equ	0xFF5
 14231                           prodh	equ	0xFF4
 14232                           prodl	equ	0xFF3
 14233                           intcon	equ	0xFF2
 14234                           intcon2	equ	0xFF1
 14235                           intcon3	equ	0xFF0
 14236                           indf0	equ	0xFEF
 14237                           postinc0	equ	0xFEE
 14238                           fsr0h	equ	0xFEA
 14239                           fsr0l	equ	0xFE9
 14240                           wreg	equ	0xFE8
 14241                           postdec1	equ	0xFE5
 14242                           fsr1l	equ	0xFE1
 14243                           indf2	equ	0xFDF
 14244                           postinc2	equ	0xFDE
 14245                           postdec2	equ	0xFDD
 14246                           fsr2h	equ	0xFDA
 14247                           fsr2l	equ	0xFD9
 14248                           status	equ	0xFD8
 14249                           
 14250 ;; *************** function _handler *****************
 14251 ;; Defined at:
 14252 ;;		line 16 in file "interruptHandler.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;		None
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;		None
 14257 ;; Return value:  Size  Location     Type
 14258 ;;                  1    wreg      void 
 14259 ;; Registers used:
 14260 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 0/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14269 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14270 ;;Total ram usage:       16 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; Hardware stack levels required when called:    6
 14273 ;; This function calls:
 14274 ;;		_printSortTimer
 14275 ;;		_updateMenu
 14276 ;; This function is called by:
 14277 ;;		Interrupt level 2
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           	psect	intcode
 14282  000008                     __pintcode:
 14283                           	opt stack 0
 14284  000008                     _handler:
 14285                           	opt stack 18
 14286                           
 14287                           ;incstack = 0
 14288  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14289  00000A  ED03  F013         	call	int_func,f	;refresh shadow registers
 14290                           tblptru	equ	0xFF8
 14291                           tblptrh	equ	0xFF7
 14292                           tblptrl	equ	0xFF6
 14293                           tablat	equ	0xFF5
 14294                           prodh	equ	0xFF4
 14295                           prodl	equ	0xFF3
 14296                           intcon	equ	0xFF2
 14297                           intcon2	equ	0xFF1
 14298                           intcon3	equ	0xFF0
 14299                           indf0	equ	0xFEF
 14300                           postinc0	equ	0xFEE
 14301                           fsr0h	equ	0xFEA
 14302                           fsr0l	equ	0xFE9
 14303                           wreg	equ	0xFE8
 14304                           postdec1	equ	0xFE5
 14305                           fsr1l	equ	0xFE1
 14306                           indf2	equ	0xFDF
 14307                           postinc2	equ	0xFDE
 14308                           postdec2	equ	0xFDD
 14309                           fsr2h	equ	0xFDA
 14310                           fsr2l	equ	0xFD9
 14311                           status	equ	0xFD8
 14312                           
 14313                           	psect	intcode_body
 14314  002606                     __pintcode_body:
 14315                           	opt stack 18
 14316  002606                     int_func:
 14317                           	opt stack 18
 14318  002606  0006               	pop		; remove dummy address from shadow register refresh
 14319  002608  CFFA F04D          	movff	pclath,??_handler+2
 14320  00260C  CFFB F04E          	movff	pclatu,??_handler+3
 14321  002610  CFE9 F04F          	movff	fsr0l,??_handler+4
 14322  002614  CFEA F050          	movff	fsr0h,??_handler+5
 14323  002618  CFE1 F051          	movff	fsr1l,??_handler+6
 14324  00261C  CFE2 F052          	movff	fsr1h,??_handler+7
 14325  002620  CFD9 F053          	movff	fsr2l,??_handler+8
 14326  002624  CFDA F054          	movff	fsr2h,??_handler+9
 14327  002628  CFF3 F055          	movff	prodl,??_handler+10
 14328  00262C  CFF4 F056          	movff	prodh,??_handler+11
 14329  002630  CFF6 F057          	movff	tblptrl,??_handler+12
 14330  002634  CFF7 F058          	movff	tblptrh,??_handler+13
 14331  002638  CFF8 F059          	movff	tblptru,??_handler+14
 14332  00263C  CFF5 F05A          	movff	tablat,??_handler+15
 14333                           
 14334                           ;interruptHandler.c: 18: if(INT1IF){
 14335  002640  A0F0               	btfss	intcon3,0,c	;volatile
 14336  002642  D020               	goto	i2l7740
 14337                           
 14338                           ;interruptHandler.c: 19: INT1IF = 0;
 14339  002644  90F0               	bcf	intcon3,0,c	;volatile
 14340                           
 14341                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14342  002646  0100               	movlb	0	; () banked
 14343  002648  51FC               	movf	_machine_state& (0+255),w,b
 14344  00264A  A4D8               	btfss	status,2,c
 14345  00264C  D01B               	goto	i2l7740
 14346                           
 14347                           ; BSR set to: 0
 14348                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14349  00264E  3881               	swapf	3969,w,c	;volatile
 14350  002650  0B0F               	andlw	15
 14351  002652  0B0F               	andlw	15
 14352  002654  6E4B               	movwf	??_handler& (0+255),c
 14353  002656  6A4C               	clrf	(??_handler+1)& (0+255),c
 14354  002658  0E39               	movlw	low _keys
 14355  00265A  244B               	addwf	??_handler,w,c
 14356  00265C  6EF6               	movwf	tblptrl,c
 14357  00265E  0EFB               	movlw	high _keys
 14358  002660  204C               	addwfc	??_handler+1,w,c
 14359  002662  6EF7               	movwf	tblptrh,c
 14360  002664                     	if	1	;There are 3 active tblptr bytes
 14361  002664  6AF8               	clrf	tblptru,c
 14362  002666  0E00               	movlw	low (__mediumconst shr (0+16))
 14363  002668  22F8               	addwfc	tblptru,f,c
 14364  00266A                     	endif
 14365  00266A  0008               	tblrd		*
 14366  00266C  CFF5 F07D          	movff	tablat,_input	;volatile
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;interruptHandler.c: 23: if(input == '*'){
 14370  002670  0E2A               	movlw	42
 14371  002672  187D               	xorwf	_input,w,c	;volatile
 14372  002674  A4D8               	btfss	status,2,c
 14373  002676  D004               	goto	i2l7738
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14377  002678  0E03               	movlw	3
 14378  00267A  0100               	movlb	0	; () banked
 14379  00267C  6FFC               	movwf	_machine_state& (0+255),b
 14380                           
 14381                           ;interruptHandler.c: 25: }
 14382  00267E  D002               	goto	i2l7740
 14383  002680                     i2l7738:
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;interruptHandler.c: 26: else{
 14387                           ;interruptHandler.c: 27: updateMenu();
 14388  002680  ECD4  F00D         	call	_updateMenu	;wreg free
 14389  002684                     i2l7740:
 14390                           
 14391                           ;interruptHandler.c: 28: }
 14392                           ;interruptHandler.c: 29: }
 14393                           ;interruptHandler.c: 30: }
 14394                           ;interruptHandler.c: 33: if(TMR0IF){
 14395  002684  A4F2               	btfss	intcon,2,c	;volatile
 14396  002686  D00C               	goto	i2l7754
 14397                           
 14398                           ;interruptHandler.c: 34: TMR0IF = 0;
 14399  002688  94F2               	bcf	intcon,2,c	;volatile
 14400                           
 14401                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14402  00268A  0100               	movlb	0	; () banked
 14403  00268C  05FC               	decf	_machine_state& (0+255),w,b
 14404  00268E  A4D8               	btfss	status,2,c
 14405  002690  D007               	goto	i2l7754
 14406                           
 14407                           ; BSR set to: 0
 14408                           ;interruptHandler.c: 36: printSortTimer();
 14409  002692  EC4F  F010         	call	_printSortTimer	;wreg free
 14410                           
 14411                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14412  002696  0E85               	movlw	133
 14413  002698  6ED7               	movwf	4055,c	;volatile
 14414                           
 14415                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14416  00269A  0EEE               	movlw	238
 14417  00269C  6ED6               	movwf	4054,c	;volatile
 14418                           
 14419                           ;interruptHandler.c: 40: TMR0ON = 1;
 14420  00269E  8ED5               	bsf	4053,7,c	;volatile
 14421  0026A0                     i2l7754:
 14422                           
 14423                           ;interruptHandler.c: 41: }
 14424                           ;interruptHandler.c: 42: }
 14425                           ;interruptHandler.c: 45: if(TMR1IF){
 14426  0026A0  A09E               	btfss	3998,0,c	;volatile
 14427  0026A2  D024               	goto	i2l7778
 14428                           
 14429                           ;interruptHandler.c: 46: TMR1IF = 0;
 14430  0026A4  909E               	bcf	3998,0,c	;volatile
 14431                           
 14432                           ;interruptHandler.c: 47: TMR1ON = 0;
 14433  0026A6  90CD               	bcf	4045,0,c	;volatile
 14434                           
 14435                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 14436  0026A8  0100               	movlb	0	; () banked
 14437  0026AA  05FC               	decf	_machine_state& (0+255),w,b
 14438  0026AC  A4D8               	btfss	status,2,c
 14439  0026AE  D01E               	goto	i2l7778
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;interruptHandler.c: 49: if(was_low_1){
 14443  0026B0  5079               	movf	_was_low_1,w,c	;volatile
 14444  0026B2  107A               	iorwf	_was_low_1+1,w,c	;volatile
 14445  0026B4  B4D8               	btfsc	status,2,c
 14446  0026B6  D00A               	goto	i2l832
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 14450  0026B8  828B               	bsf	3979,1,c	;volatile
 14451                           
 14452                           ; BSR set to: 0
 14453                           ;interruptHandler.c: 51: was_low_1 = 0;
 14454  0026BA  0E00               	movlw	0
 14455  0026BC  6E7A               	movwf	_was_low_1+1,c	;volatile
 14456  0026BE  0E00               	movlw	0
 14457  0026C0  6E79               	movwf	_was_low_1,c	;volatile
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 14461  0026C2  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 14465  0026C6  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 14466                           
 14467                           ;interruptHandler.c: 54: }
 14468  0026CA  D00F               	goto	i2l7776
 14469  0026CC                     i2l832:
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;interruptHandler.c: 55: else{
 14473                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 14474  0026CC  928B               	bcf	3979,1,c	;volatile
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;interruptHandler.c: 57: was_low_1 = 1;
 14478  0026CE  0E00               	movlw	0
 14479  0026D0  6E7A               	movwf	_was_low_1+1,c	;volatile
 14480  0026D2  0E01               	movlw	1
 14481  0026D4  6E79               	movwf	_was_low_1,c	;volatile
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 14485  0026D6  0101               	movlb	1	; () banked
 14486  0026D8  511C               	movf	_servoTimes& (0+255),w,b
 14487  0026DA  0800               	sublw	0
 14488  0026DC  0F20               	addlw	32
 14489  0026DE  6ECF               	movwf	4047,c	;volatile
 14490                           
 14491                           ; BSR set to: 1
 14492                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 14493  0026E0  0101               	movlb	1	; () banked
 14494  0026E2  511E               	movf	(_servoTimes+2)& (0+255),w,b
 14495  0026E4  0800               	sublw	0
 14496  0026E6  0F20               	addlw	32
 14497  0026E8  6ECE               	movwf	4046,c	;volatile
 14498  0026EA                     i2l7776:
 14499                           
 14500                           ;interruptHandler.c: 60: }
 14501                           ;interruptHandler.c: 61: TMR1ON = 1;
 14502  0026EA  80CD               	bsf	4045,0,c	;volatile
 14503  0026EC                     i2l7778:
 14504                           
 14505                           ;interruptHandler.c: 62: }
 14506                           ;interruptHandler.c: 63: }
 14507                           ;interruptHandler.c: 65: if(TMR3IF){
 14508  0026EC  A2A1               	btfss	4001,1,c	;volatile
 14509  0026EE  D024               	goto	i2l838
 14510                           
 14511                           ;interruptHandler.c: 66: TMR3IF = 0;
 14512  0026F0  92A1               	bcf	4001,1,c	;volatile
 14513                           
 14514                           ;interruptHandler.c: 67: TMR3ON = 0;
 14515  0026F2  90B1               	bcf	4017,0,c	;volatile
 14516                           
 14517                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 14518  0026F4  0100               	movlb	0	; () banked
 14519  0026F6  05FC               	decf	_machine_state& (0+255),w,b
 14520  0026F8  A4D8               	btfss	status,2,c
 14521  0026FA  D01E               	goto	i2l838
 14522                           
 14523                           ; BSR set to: 0
 14524                           ;interruptHandler.c: 69: if(was_low_3){
 14525  0026FC  507B               	movf	_was_low_3,w,c	;volatile
 14526  0026FE  107C               	iorwf	_was_low_3+1,w,c	;volatile
 14527  002700  B4D8               	btfsc	status,2,c
 14528  002702  D00A               	goto	i2l836
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14532  002704  848B               	bsf	3979,2,c	;volatile
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;interruptHandler.c: 71: was_low_3 = 0;
 14536  002706  0E00               	movlw	0
 14537  002708  6E7C               	movwf	_was_low_3+1,c	;volatile
 14538  00270A  0E00               	movlw	0
 14539  00270C  6E7B               	movwf	_was_low_3,c	;volatile
 14540                           
 14541                           ; BSR set to: 0
 14542                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14543  00270E  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14547  002712  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14548                           
 14549                           ;interruptHandler.c: 74: }
 14550  002716  D00F               	goto	i2l7800
 14551  002718                     i2l836:
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;interruptHandler.c: 75: else{
 14555                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14556  002718  948B               	bcf	3979,2,c	;volatile
 14557                           
 14558                           ; BSR set to: 0
 14559                           ;interruptHandler.c: 77: was_low_3 = 1;
 14560  00271A  0E00               	movlw	0
 14561  00271C  6E7C               	movwf	_was_low_3+1,c	;volatile
 14562  00271E  0E01               	movlw	1
 14563  002720  6E7B               	movwf	_was_low_3,c	;volatile
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14567  002722  0101               	movlb	1	; () banked
 14568  002724  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14569  002726  0800               	sublw	0
 14570  002728  0F20               	addlw	32
 14571  00272A  6EB3               	movwf	4019,c	;volatile
 14572                           
 14573                           ; BSR set to: 1
 14574                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14575  00272C  0101               	movlb	1	; () banked
 14576  00272E  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14577  002730  0800               	sublw	0
 14578  002732  0F20               	addlw	32
 14579  002734  6EB2               	movwf	4018,c	;volatile
 14580  002736                     i2l7800:
 14581                           
 14582                           ;interruptHandler.c: 80: }
 14583                           ;interruptHandler.c: 81: TMR3ON = 1;
 14584  002736  80B1               	bsf	4017,0,c	;volatile
 14585  002738                     i2l838:
 14586  002738  C05A  FFF5         	movff	??_handler+15,tablat
 14587  00273C  C059  FFF8         	movff	??_handler+14,tblptru
 14588  002740  C058  FFF7         	movff	??_handler+13,tblptrh
 14589  002744  C057  FFF6         	movff	??_handler+12,tblptrl
 14590  002748  C056  FFF4         	movff	??_handler+11,prodh
 14591  00274C  C055  FFF3         	movff	??_handler+10,prodl
 14592  002750  C054  FFDA         	movff	??_handler+9,fsr2h
 14593  002754  C053  FFD9         	movff	??_handler+8,fsr2l
 14594  002758  C052  FFE2         	movff	??_handler+7,fsr1h
 14595  00275C  C051  FFE1         	movff	??_handler+6,fsr1l
 14596  002760  C050  FFEA         	movff	??_handler+5,fsr0h
 14597  002764  C04F  FFE9         	movff	??_handler+4,fsr0l
 14598  002768  C04E  FFFB         	movff	??_handler+3,pclatu
 14599  00276C  C04D  FFFA         	movff	??_handler+2,pclath
 14600  002770  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14601  002772  0011               	retfie		f
 14602  002774                     __end_of_handler:
 14603                           	opt stack 0
 14604                           pclatu	equ	0xFFB
 14605                           pclath	equ	0xFFA
 14606                           tblptru	equ	0xFF8
 14607                           tblptrh	equ	0xFF7
 14608                           tblptrl	equ	0xFF6
 14609                           tablat	equ	0xFF5
 14610                           prodh	equ	0xFF4
 14611                           prodl	equ	0xFF3
 14612                           intcon	equ	0xFF2
 14613                           intcon2	equ	0xFF1
 14614                           intcon3	equ	0xFF0
 14615                           indf0	equ	0xFEF
 14616                           postinc0	equ	0xFEE
 14617                           fsr0h	equ	0xFEA
 14618                           fsr0l	equ	0xFE9
 14619                           wreg	equ	0xFE8
 14620                           postdec1	equ	0xFE5
 14621                           fsr1h	equ	0xFE2
 14622                           fsr1l	equ	0xFE1
 14623                           indf2	equ	0xFDF
 14624                           postinc2	equ	0xFDE
 14625                           postdec2	equ	0xFDD
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630 ;; *************** function _updateMenu *****************
 14631 ;; Defined at:
 14632 ;;		line 211 in file "UI.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;		None
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;		None
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  1    wreg      void 
 14639 ;; Registers used:
 14640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;Total ram usage:        2 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    5
 14653 ;; This function calls:
 14654 ;;		_change_state_to_logs_11
 14655 ;;		_change_state_to_logs_12
 14656 ;;		_change_state_to_logs_22
 14657 ;;		_change_state_to_logs_23
 14658 ;;		_change_state_to_logs_33
 14659 ;;		_change_state_to_logs_34
 14660 ;;		_change_state_to_menu_11
 14661 ;;		_change_state_to_menu_23
 14662 ;;		_dispLogs
 14663 ;;		_inputHandler
 14664 ;;		i2_change_state_to_menu_12
 14665 ;;		i2_change_state_to_menu_22
 14666 ;;		i2_change_state_to_menu_start
 14667 ;; This function is called by:
 14668 ;;		_handler
 14669 ;; This function uses a non-reentrant model
 14670 ;;
 14671                           
 14672                           	psect	text56
 14673  001BA8                     __ptext56:
 14674                           	opt stack 0
 14675  001BA8                     _updateMenu:
 14676                           	opt stack 18
 14677                           
 14678                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14679                           
 14680                           ;incstack = 0
 14681  001BA8  0E00               	movlw	0
 14682  001BAA  6E78               	movwf	_up+1,c
 14683  001BAC  0E00               	movlw	0
 14684  001BAE  6E77               	movwf	_up,c
 14685  001BB0  0E00               	movlw	0
 14686  001BB2  6E68               	movwf	_down+1,c
 14687  001BB4  0E00               	movlw	0
 14688  001BB6  6E67               	movwf	_down,c
 14689  001BB8  0E00               	movlw	0
 14690  001BBA  6E6A               	movwf	_enter+1,c
 14691  001BBC  0E00               	movlw	0
 14692  001BBE  6E69               	movwf	_enter,c
 14693  001BC0  0E00               	movlw	0
 14694  001BC2  6E5C               	movwf	_back+1,c
 14695  001BC4  0E00               	movlw	0
 14696  001BC6  6E5B               	movwf	_back,c
 14697                           
 14698                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14699  001BC8  9EF2               	bcf	intcon,7,c	;volatile
 14700                           
 14701                           ;UI.c: 215: if (inputHandler()
 14702                           ;UI.c: 218: ){
 14703  001BCA  EC48  F011         	call	_inputHandler	;wreg free
 14704  001BCE  502A               	movf	?_inputHandler,w,c
 14705  001BD0  102B               	iorwf	?_inputHandler+1,w,c
 14706  001BD2  A4D8               	btfss	status,2,c
 14707  001BD4  D112               	goto	i2l7482
 14708  001BD6  D146               	goto	i2l254
 14709  001BD8                     i2l7334:
 14710                           
 14711                           ;UI.c: 222: change_state_to_menu_11();
 14712  001BD8  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 14713                           
 14714                           ;UI.c: 223: break;
 14715  001BDC  D143               	goto	i2l254
 14716  001BDE                     i2l7336:
 14717                           
 14718                           ;UI.c: 226: if(up){
 14719  001BDE  5077               	movf	_up,w,c
 14720  001BE0  1078               	iorwf	_up+1,w,c
 14721  001BE2  B4D8               	btfsc	status,2,c
 14722  001BE4  D003               	goto	i2l7340
 14723                           
 14724                           ;UI.c: 227: change_state_to_menu_23();
 14725  001BE6  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 14726                           
 14727                           ;UI.c: 228: }
 14728  001BEA  D13C               	goto	i2l254
 14729  001BEC                     i2l7340:
 14730                           
 14731                           ;UI.c: 229: else if(down){
 14732  001BEC  5067               	movf	_down,w,c
 14733  001BEE  1068               	iorwf	_down+1,w,c
 14734  001BF0  B4D8               	btfsc	status,2,c
 14735  001BF2  D003               	goto	i2l7344
 14736                           
 14737                           ;UI.c: 230: change_state_to_menu_12();
 14738  001BF4  ECE7  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14739                           
 14740                           ;UI.c: 231: }
 14741  001BF8  D135               	goto	i2l254
 14742  001BFA                     i2l7344:
 14743                           
 14744                           ;UI.c: 232: else if(enter){
 14745  001BFA  5069               	movf	_enter,w,c
 14746  001BFC  106A               	iorwf	_enter+1,w,c
 14747  001BFE  B4D8               	btfsc	status,2,c
 14748  001C00  D131               	goto	i2l254
 14749                           
 14750                           ;UI.c: 233: change_state_to_menu_start();
 14751  001C02  EC16  F020         	call	i2_change_state_to_menu_start	;wreg free
 14752                           
 14753                           ;UI.c: 234: }
 14754                           ;UI.c: 235: break;
 14755  001C06  D12E               	goto	i2l254
 14756  001C08                     i2l7348:
 14757                           
 14758                           ;UI.c: 238: if(up){
 14759  001C08  5077               	movf	_up,w,c
 14760  001C0A  1078               	iorwf	_up+1,w,c
 14761  001C0C  B4D8               	btfsc	status,2,c
 14762  001C0E  D003               	goto	i2l7352
 14763                           
 14764                           ;UI.c: 239: change_state_to_menu_11();
 14765  001C10  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 14766                           
 14767                           ;UI.c: 240: }
 14768  001C14  D127               	goto	i2l254
 14769  001C16                     i2l7352:
 14770                           
 14771                           ;UI.c: 241: else if(down){
 14772  001C16  5067               	movf	_down,w,c
 14773  001C18  1068               	iorwf	_down+1,w,c
 14774  001C1A  B4D8               	btfsc	status,2,c
 14775  001C1C  D011               	goto	i2l7368
 14776                           
 14777                           ;UI.c: 242: change_state_to_menu_23();
 14778  001C1E  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 14779                           
 14780                           ;UI.c: 243: }
 14781  001C22  D120               	goto	i2l254
 14782  001C24                     i2l7360:
 14783                           
 14784                           ;UI.c: 250: if(up){
 14785  001C24  5077               	movf	_up,w,c
 14786  001C26  1078               	iorwf	_up+1,w,c
 14787  001C28  B4D8               	btfsc	status,2,c
 14788  001C2A  D003               	goto	i2l7364
 14789                           
 14790                           ;UI.c: 251: change_state_to_menu_11();
 14791  001C2C  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 14792                           
 14793                           ;UI.c: 252: }
 14794  001C30  D119               	goto	i2l254
 14795  001C32                     i2l7364:
 14796                           
 14797                           ;UI.c: 253: else if(down){
 14798  001C32  5067               	movf	_down,w,c
 14799  001C34  1068               	iorwf	_down+1,w,c
 14800  001C36  B4D8               	btfsc	status,2,c
 14801  001C38  D003               	goto	i2l7368
 14802                           
 14803                           ;UI.c: 254: change_state_to_menu_23();
 14804  001C3A  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 14805                           
 14806                           ;UI.c: 255: }
 14807  001C3E  D112               	goto	i2l254
 14808  001C40                     i2l7368:
 14809                           
 14810                           ;UI.c: 256: else if(enter){
 14811  001C40  5069               	movf	_enter,w,c
 14812  001C42  106A               	iorwf	_enter+1,w,c
 14813  001C44  B4D8               	btfsc	status,2,c
 14814  001C46  D10E               	goto	i2l254
 14815                           
 14816                           ;UI.c: 257: machine_state = Sorting_state;
 14817  001C48  0E01               	movlw	1
 14818  001C4A  0100               	movlb	0	; () banked
 14819  001C4C  6FFC               	movwf	_machine_state& (0+255),b
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;UI.c: 258: }
 14823                           ;UI.c: 259: break;
 14824                           
 14825                           ; BSR set to: 0
 14826                           
 14827                           ; BSR set to: 0
 14828  001C4E  D10A               	goto	i2l254
 14829  001C50                     i2l7372:
 14830                           
 14831                           ;UI.c: 262: if(up){
 14832  001C50  5077               	movf	_up,w,c
 14833  001C52  1078               	iorwf	_up+1,w,c
 14834  001C54  B4D8               	btfsc	status,2,c
 14835  001C56  D003               	goto	i2l7376
 14836                           
 14837                           ;UI.c: 263: change_state_to_menu_22();
 14838  001C58  ECCF  F01E         	call	i2_change_state_to_menu_22	;wreg free
 14839                           
 14840                           ;UI.c: 264: }
 14841  001C5C  D103               	goto	i2l254
 14842  001C5E                     i2l7376:
 14843                           
 14844                           ;UI.c: 265: else if(down){
 14845  001C5E  5067               	movf	_down,w,c
 14846  001C60  1068               	iorwf	_down+1,w,c
 14847  001C62  B4D8               	btfsc	status,2,c
 14848  001C64  D003               	goto	i2l7380
 14849                           
 14850                           ;UI.c: 266: change_state_to_menu_11();
 14851  001C66  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 14852                           
 14853                           ;UI.c: 267: }
 14854  001C6A  D0FC               	goto	i2l254
 14855  001C6C                     i2l7380:
 14856                           
 14857                           ;UI.c: 268: else if(enter){
 14858  001C6C  5069               	movf	_enter,w,c
 14859  001C6E  106A               	iorwf	_enter+1,w,c
 14860  001C70  B4D8               	btfsc	status,2,c
 14861  001C72  D0F8               	goto	i2l254
 14862                           
 14863                           ;UI.c: 269: change_state_to_logs_11();
 14864  001C74  EC8F  F01F         	call	_change_state_to_logs_11	;wreg free
 14865                           
 14866                           ;UI.c: 270: }
 14867                           ;UI.c: 271: break;
 14868  001C78  D0F5               	goto	i2l254
 14869  001C7A                     i2l7384:
 14870                           
 14871                           ;UI.c: 274: if(up){
 14872  001C7A  5077               	movf	_up,w,c
 14873  001C7C  1078               	iorwf	_up+1,w,c
 14874  001C7E  B4D8               	btfsc	status,2,c
 14875  001C80  D003               	goto	i2l7388
 14876                           
 14877                           ;UI.c: 275: change_state_to_logs_34();
 14878  001C82  EC2F  F01F         	call	_change_state_to_logs_34	;wreg free
 14879                           
 14880                           ;UI.c: 276: }
 14881  001C86  D0EE               	goto	i2l254
 14882  001C88                     i2l7388:
 14883                           
 14884                           ;UI.c: 277: else if(down){
 14885  001C88  5067               	movf	_down,w,c
 14886  001C8A  1068               	iorwf	_down+1,w,c
 14887  001C8C  B4D8               	btfsc	status,2,c
 14888  001C8E  D003               	goto	i2l7392
 14889                           
 14890                           ;UI.c: 278: change_state_to_logs_12();
 14891  001C90  EC77  F01F         	call	_change_state_to_logs_12	;wreg free
 14892                           
 14893                           ;UI.c: 279: }
 14894  001C94  D0E7               	goto	i2l254
 14895  001C96                     i2l7392:
 14896                           
 14897                           ;UI.c: 280: else if(enter){
 14898  001C96  5069               	movf	_enter,w,c
 14899  001C98  106A               	iorwf	_enter+1,w,c
 14900  001C9A  B4D8               	btfsc	status,2,c
 14901  001C9C  D007               	goto	i2l7396
 14902                           
 14903                           ;UI.c: 281: dispLogs(1);
 14904  001C9E  0E00               	movlw	0
 14905  001CA0  6E13               	movwf	dispLogs@myLog+1,c
 14906  001CA2  0E01               	movlw	1
 14907  001CA4  6E12               	movwf	dispLogs@myLog,c
 14908  001CA6  EC62  F020         	call	_dispLogs	;wreg free
 14909                           
 14910                           ;UI.c: 282: }
 14911  001CAA  D0DC               	goto	i2l254
 14912  001CAC                     i2l7396:
 14913                           
 14914                           ;UI.c: 283: else if(back){
 14915  001CAC  505B               	movf	_back,w,c
 14916  001CAE  105C               	iorwf	_back+1,w,c
 14917  001CB0  B4D8               	btfsc	status,2,c
 14918  001CB2  D0D8               	goto	i2l254
 14919                           
 14920                           ;UI.c: 284: change_state_to_menu_23();
 14921  001CB4  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 14922                           
 14923                           ;UI.c: 285: }
 14924                           ;UI.c: 286: break;
 14925  001CB8  D0D5               	goto	i2l254
 14926  001CBA                     i2l7400:
 14927                           
 14928                           ;UI.c: 289: if(up){
 14929  001CBA  5077               	movf	_up,w,c
 14930  001CBC  1078               	iorwf	_up+1,w,c
 14931  001CBE  B4D8               	btfsc	status,2,c
 14932  001CC0  D003               	goto	i2l7404
 14933                           
 14934                           ;UI.c: 290: change_state_to_logs_11();
 14935  001CC2  EC8F  F01F         	call	_change_state_to_logs_11	;wreg free
 14936                           
 14937                           ;UI.c: 291: }
 14938  001CC6  D0CE               	goto	i2l254
 14939  001CC8                     i2l7404:
 14940                           
 14941                           ;UI.c: 292: else if(down){
 14942  001CC8  5067               	movf	_down,w,c
 14943  001CCA  1068               	iorwf	_down+1,w,c
 14944  001CCC  B4D8               	btfsc	status,2,c
 14945  001CCE  D003               	goto	i2l7408
 14946                           
 14947                           ;UI.c: 293: change_state_to_logs_23();
 14948  001CD0  ECBE  F01F         	call	_change_state_to_logs_23	;wreg free
 14949                           
 14950                           ;UI.c: 294: }
 14951  001CD4  D0C7               	goto	i2l254
 14952  001CD6                     i2l7408:
 14953                           
 14954                           ;UI.c: 295: else if(enter){
 14955  001CD6  5069               	movf	_enter,w,c
 14956  001CD8  106A               	iorwf	_enter+1,w,c
 14957  001CDA  B4D8               	btfsc	status,2,c
 14958  001CDC  D007               	goto	i2l7412
 14959                           
 14960                           ;UI.c: 296: dispLogs(2);
 14961  001CDE  0E00               	movlw	0
 14962  001CE0  6E13               	movwf	dispLogs@myLog+1,c
 14963  001CE2  0E02               	movlw	2
 14964  001CE4  6E12               	movwf	dispLogs@myLog,c
 14965  001CE6  EC62  F020         	call	_dispLogs	;wreg free
 14966                           
 14967                           ;UI.c: 297: }
 14968  001CEA  D0BC               	goto	i2l254
 14969  001CEC                     i2l7412:
 14970                           
 14971                           ;UI.c: 298: else if(back){
 14972  001CEC  505B               	movf	_back,w,c
 14973  001CEE  105C               	iorwf	_back+1,w,c
 14974  001CF0  B4D8               	btfsc	status,2,c
 14975  001CF2  D0B8               	goto	i2l254
 14976                           
 14977                           ;UI.c: 299: change_state_to_menu_23();
 14978  001CF4  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 14979                           
 14980                           ;UI.c: 300: }
 14981                           ;UI.c: 301: break;
 14982  001CF8  D0B5               	goto	i2l254
 14983  001CFA                     i2l7416:
 14984                           
 14985                           ;UI.c: 304: if(up){
 14986  001CFA  5077               	movf	_up,w,c
 14987  001CFC  1078               	iorwf	_up+1,w,c
 14988  001CFE  B4D8               	btfsc	status,2,c
 14989  001D00  D003               	goto	i2l7420
 14990                           
 14991                           ;UI.c: 305: change_state_to_logs_11();
 14992  001D02  EC8F  F01F         	call	_change_state_to_logs_11	;wreg free
 14993                           
 14994                           ;UI.c: 306: }
 14995  001D06  D0AE               	goto	i2l254
 14996  001D08                     i2l7420:
 14997                           
 14998                           ;UI.c: 307: else if(down){
 14999  001D08  5067               	movf	_down,w,c
 15000  001D0A  1068               	iorwf	_down+1,w,c
 15001  001D0C  B4D8               	btfsc	status,2,c
 15002  001D0E  D003               	goto	i2l7424
 15003                           
 15004                           ;UI.c: 308: change_state_to_logs_23();
 15005  001D10  ECBE  F01F         	call	_change_state_to_logs_23	;wreg free
 15006                           
 15007                           ;UI.c: 309: }
 15008  001D14  D0A7               	goto	i2l254
 15009  001D16                     i2l7424:
 15010                           
 15011                           ;UI.c: 310: else if(enter){
 15012  001D16  5069               	movf	_enter,w,c
 15013  001D18  106A               	iorwf	_enter+1,w,c
 15014  001D1A  B4D8               	btfsc	status,2,c
 15015  001D1C  D007               	goto	i2l7428
 15016                           
 15017                           ;UI.c: 311: dispLogs(2);
 15018  001D1E  0E00               	movlw	0
 15019  001D20  6E13               	movwf	dispLogs@myLog+1,c
 15020  001D22  0E02               	movlw	2
 15021  001D24  6E12               	movwf	dispLogs@myLog,c
 15022  001D26  EC62  F020         	call	_dispLogs	;wreg free
 15023                           
 15024                           ;UI.c: 312: }
 15025  001D2A  D09C               	goto	i2l254
 15026  001D2C                     i2l7428:
 15027                           
 15028                           ;UI.c: 313: else if(back){
 15029  001D2C  505B               	movf	_back,w,c
 15030  001D2E  105C               	iorwf	_back+1,w,c
 15031  001D30  B4D8               	btfsc	status,2,c
 15032  001D32  D098               	goto	i2l254
 15033                           
 15034                           ;UI.c: 314: change_state_to_menu_23();
 15035  001D34  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 15036                           
 15037                           ;UI.c: 315: }
 15038                           ;UI.c: 316: break;
 15039  001D38  D095               	goto	i2l254
 15040  001D3A                     i2l7432:
 15041                           
 15042                           ;UI.c: 319: if(up){
 15043  001D3A  5077               	movf	_up,w,c
 15044  001D3C  1078               	iorwf	_up+1,w,c
 15045  001D3E  B4D8               	btfsc	status,2,c
 15046  001D40  D003               	goto	i2l7436
 15047                           
 15048                           ;UI.c: 320: change_state_to_logs_22();
 15049  001D42  EC5F  F01F         	call	_change_state_to_logs_22	;wreg free
 15050                           
 15051                           ;UI.c: 321: }
 15052  001D46  D08E               	goto	i2l254
 15053  001D48                     i2l7436:
 15054                           
 15055                           ;UI.c: 322: else if(down){
 15056  001D48  5067               	movf	_down,w,c
 15057  001D4A  1068               	iorwf	_down+1,w,c
 15058  001D4C  B4D8               	btfsc	status,2,c
 15059  001D4E  D003               	goto	i2l7440
 15060                           
 15061                           ;UI.c: 323: change_state_to_logs_34();
 15062  001D50  EC2F  F01F         	call	_change_state_to_logs_34	;wreg free
 15063                           
 15064                           ;UI.c: 324: }
 15065  001D54  D087               	goto	i2l254
 15066  001D56                     i2l7440:
 15067                           
 15068                           ;UI.c: 325: else if(enter){
 15069  001D56  5069               	movf	_enter,w,c
 15070  001D58  106A               	iorwf	_enter+1,w,c
 15071  001D5A  B4D8               	btfsc	status,2,c
 15072  001D5C  D007               	goto	i2l7444
 15073                           
 15074                           ;UI.c: 326: dispLogs(3);
 15075  001D5E  0E00               	movlw	0
 15076  001D60  6E13               	movwf	dispLogs@myLog+1,c
 15077  001D62  0E03               	movlw	3
 15078  001D64  6E12               	movwf	dispLogs@myLog,c
 15079  001D66  EC62  F020         	call	_dispLogs	;wreg free
 15080                           
 15081                           ;UI.c: 327: }
 15082  001D6A  D07C               	goto	i2l254
 15083  001D6C                     i2l7444:
 15084                           
 15085                           ;UI.c: 328: else if(back){
 15086  001D6C  505B               	movf	_back,w,c
 15087  001D6E  105C               	iorwf	_back+1,w,c
 15088  001D70  B4D8               	btfsc	status,2,c
 15089  001D72  D078               	goto	i2l254
 15090                           
 15091                           ;UI.c: 329: change_state_to_menu_23();
 15092  001D74  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 15093                           
 15094                           ;UI.c: 330: }
 15095                           ;UI.c: 331: break;
 15096  001D78  D075               	goto	i2l254
 15097  001D7A                     i2l7448:
 15098                           
 15099                           ;UI.c: 334: if(up){
 15100  001D7A  5077               	movf	_up,w,c
 15101  001D7C  1078               	iorwf	_up+1,w,c
 15102  001D7E  B4D8               	btfsc	status,2,c
 15103  001D80  D003               	goto	i2l7452
 15104                           
 15105                           ;UI.c: 335: change_state_to_logs_22();
 15106  001D82  EC5F  F01F         	call	_change_state_to_logs_22	;wreg free
 15107                           
 15108                           ;UI.c: 336: }
 15109  001D86  D06E               	goto	i2l254
 15110  001D88                     i2l7452:
 15111                           
 15112                           ;UI.c: 337: else if(down){
 15113  001D88  5067               	movf	_down,w,c
 15114  001D8A  1068               	iorwf	_down+1,w,c
 15115  001D8C  B4D8               	btfsc	status,2,c
 15116  001D8E  D003               	goto	i2l7456
 15117                           
 15118                           ;UI.c: 338: change_state_to_logs_34();
 15119  001D90  EC2F  F01F         	call	_change_state_to_logs_34	;wreg free
 15120                           
 15121                           ;UI.c: 339: }
 15122  001D94  D067               	goto	i2l254
 15123  001D96                     i2l7456:
 15124                           
 15125                           ;UI.c: 340: else if(enter){
 15126  001D96  5069               	movf	_enter,w,c
 15127  001D98  106A               	iorwf	_enter+1,w,c
 15128  001D9A  B4D8               	btfsc	status,2,c
 15129  001D9C  D007               	goto	i2l7460
 15130                           
 15131                           ;UI.c: 341: dispLogs(3);
 15132  001D9E  0E00               	movlw	0
 15133  001DA0  6E13               	movwf	dispLogs@myLog+1,c
 15134  001DA2  0E03               	movlw	3
 15135  001DA4  6E12               	movwf	dispLogs@myLog,c
 15136  001DA6  EC62  F020         	call	_dispLogs	;wreg free
 15137                           
 15138                           ;UI.c: 342: }
 15139  001DAA  D05C               	goto	i2l254
 15140  001DAC                     i2l7460:
 15141                           
 15142                           ;UI.c: 343: else if(back){
 15143  001DAC  505B               	movf	_back,w,c
 15144  001DAE  105C               	iorwf	_back+1,w,c
 15145  001DB0  B4D8               	btfsc	status,2,c
 15146  001DB2  D058               	goto	i2l254
 15147                           
 15148                           ;UI.c: 344: change_state_to_menu_23();
 15149  001DB4  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 15150                           
 15151                           ;UI.c: 345: }
 15152                           ;UI.c: 346: break;
 15153  001DB8  D055               	goto	i2l254
 15154  001DBA                     i2l7464:
 15155                           
 15156                           ;UI.c: 349: if(up){
 15157  001DBA  5077               	movf	_up,w,c
 15158  001DBC  1078               	iorwf	_up+1,w,c
 15159  001DBE  B4D8               	btfsc	status,2,c
 15160  001DC0  D003               	goto	i2l7468
 15161                           
 15162                           ;UI.c: 350: change_state_to_logs_33();
 15163  001DC2  EC47  F01F         	call	_change_state_to_logs_33	;wreg free
 15164                           
 15165                           ;UI.c: 351: }
 15166  001DC6  D04E               	goto	i2l254
 15167  001DC8                     i2l7468:
 15168                           
 15169                           ;UI.c: 352: else if(down){
 15170  001DC8  5067               	movf	_down,w,c
 15171  001DCA  1068               	iorwf	_down+1,w,c
 15172  001DCC  B4D8               	btfsc	status,2,c
 15173  001DCE  D003               	goto	i2l7472
 15174                           
 15175                           ;UI.c: 353: change_state_to_logs_11();
 15176  001DD0  EC8F  F01F         	call	_change_state_to_logs_11	;wreg free
 15177                           
 15178                           ;UI.c: 354: }
 15179  001DD4  D047               	goto	i2l254
 15180  001DD6                     i2l7472:
 15181                           
 15182                           ;UI.c: 355: else if(enter){
 15183  001DD6  5069               	movf	_enter,w,c
 15184  001DD8  106A               	iorwf	_enter+1,w,c
 15185  001DDA  B4D8               	btfsc	status,2,c
 15186  001DDC  D007               	goto	i2l7476
 15187                           
 15188                           ;UI.c: 356: dispLogs(4);
 15189  001DDE  0E00               	movlw	0
 15190  001DE0  6E13               	movwf	dispLogs@myLog+1,c
 15191  001DE2  0E04               	movlw	4
 15192  001DE4  6E12               	movwf	dispLogs@myLog,c
 15193  001DE6  EC62  F020         	call	_dispLogs	;wreg free
 15194                           
 15195                           ;UI.c: 357: }
 15196  001DEA  D03C               	goto	i2l254
 15197  001DEC                     i2l7476:
 15198                           
 15199                           ;UI.c: 358: else if(back){
 15200  001DEC  505B               	movf	_back,w,c
 15201  001DEE  105C               	iorwf	_back+1,w,c
 15202  001DF0  B4D8               	btfsc	status,2,c
 15203  001DF2  D038               	goto	i2l254
 15204                           
 15205                           ;UI.c: 359: change_state_to_menu_23();
 15206  001DF4  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 15207                           
 15208                           ;UI.c: 365: }
 15209                           
 15210                           ;UI.c: 364: break;
 15211                           
 15212                           ;UI.c: 363: default:
 15213                           
 15214                           ;UI.c: 360: }
 15215                           ;UI.c: 361: break;
 15216  001DF8  D035               	goto	i2l254
 15217  001DFA                     i2l7482:
 15218  001DFA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15219  001DFE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15220                           
 15221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15222                           ; Switch size 1, requested type "space"
 15223                           ; Number of cases is 3, Range of values is 0 to 4
 15224                           ; switch strategies available:
 15225                           ; Name         Instructions Cycles
 15226                           ; simple_byte           10     6 (average)
 15227                           ;	Chosen strategy is simple_byte
 15228  001E02  5044               	movf	??_updateMenu+1,w,c
 15229  001E04  0A00               	xorlw	0	; case 0
 15230  001E06  B4D8               	btfsc	status,2,c
 15231  001E08  D007               	goto	i2l8064
 15232  001E0A  0A03               	xorlw	3	; case 3
 15233  001E0C  B4D8               	btfsc	status,2,c
 15234  001E0E  D015               	goto	i2l8066
 15235  001E10  0A07               	xorlw	7	; case 4
 15236  001E12  B4D8               	btfsc	status,2,c
 15237  001E14  D020               	goto	i2l8068
 15238  001E16  D026               	goto	i2l254
 15239  001E18                     i2l8064:
 15240                           
 15241                           ; Switch size 1, requested type "space"
 15242                           ; Number of cases is 5, Range of values is 0 to 23
 15243                           ; switch strategies available:
 15244                           ; Name         Instructions Cycles
 15245                           ; simple_byte           16     9 (average)
 15246                           ;	Chosen strategy is simple_byte
 15247  001E18  5043               	movf	??_updateMenu,w,c
 15248  001E1A  0A00               	xorlw	0	; case 0
 15249  001E1C  B4D8               	btfsc	status,2,c
 15250  001E1E  D6DC               	goto	i2l7334
 15251  001E20  0A0B               	xorlw	11	; case 11
 15252  001E22  B4D8               	btfsc	status,2,c
 15253  001E24  D6DC               	goto	i2l7336
 15254  001E26  0A07               	xorlw	7	; case 12
 15255  001E28  B4D8               	btfsc	status,2,c
 15256  001E2A  D6EE               	goto	i2l7348
 15257  001E2C  0A1A               	xorlw	26	; case 22
 15258  001E2E  B4D8               	btfsc	status,2,c
 15259  001E30  D6F9               	goto	i2l7360
 15260  001E32  0A01               	xorlw	1	; case 23
 15261  001E34  B4D8               	btfsc	status,2,c
 15262  001E36  D70C               	goto	i2l7372
 15263  001E38  D015               	goto	i2l254
 15264  001E3A                     i2l8066:
 15265                           
 15266                           ; Switch size 1, requested type "space"
 15267                           ; Number of cases is 4, Range of values is 243 to 255
 15268                           ; switch strategies available:
 15269                           ; Name         Instructions Cycles
 15270                           ; simple_byte           13     7 (average)
 15271                           ;	Chosen strategy is simple_byte
 15272  001E3A  5043               	movf	??_updateMenu,w,c
 15273  001E3C  0AF3               	xorlw	243	; case 243
 15274  001E3E  B4D8               	btfsc	status,2,c
 15275  001E40  D71C               	goto	i2l7384
 15276  001E42  0A07               	xorlw	7	; case 244
 15277  001E44  B4D8               	btfsc	status,2,c
 15278  001E46  D739               	goto	i2l7400
 15279  001E48  0A0A               	xorlw	10	; case 254
 15280  001E4A  B4D8               	btfsc	status,2,c
 15281  001E4C  D756               	goto	i2l7416
 15282  001E4E  0A01               	xorlw	1	; case 255
 15283  001E50  B4D8               	btfsc	status,2,c
 15284  001E52  D773               	goto	i2l7432
 15285  001E54  D007               	goto	i2l254
 15286  001E56                     i2l8068:
 15287                           
 15288                           ; Switch size 1, requested type "space"
 15289                           ; Number of cases is 2, Range of values is 9 to 10
 15290                           ; switch strategies available:
 15291                           ; Name         Instructions Cycles
 15292                           ; simple_byte            7     4 (average)
 15293                           ;	Chosen strategy is simple_byte
 15294  001E56  5043               	movf	??_updateMenu,w,c
 15295  001E58  0A09               	xorlw	9	; case 9
 15296  001E5A  B4D8               	btfsc	status,2,c
 15297  001E5C  D78E               	goto	i2l7448
 15298  001E5E  0A03               	xorlw	3	; case 10
 15299  001E60  B4D8               	btfsc	status,2,c
 15300  001E62  D7AB               	goto	i2l7464
 15301  001E64                     i2l254:
 15302                           
 15303                           ;UI.c: 366: }
 15304                           ;UI.c: 367: (INTCONbits.GIE = 1);
 15305  001E64  8EF2               	bsf	intcon,7,c	;volatile
 15306  001E66  0012               	return		;funcret
 15307  001E68                     __end_of_updateMenu:
 15308                           	opt stack 0
 15309                           pclatu	equ	0xFFB
 15310                           pclath	equ	0xFFA
 15311                           tblptru	equ	0xFF8
 15312                           tblptrh	equ	0xFF7
 15313                           tblptrl	equ	0xFF6
 15314                           tablat	equ	0xFF5
 15315                           prodh	equ	0xFF4
 15316                           prodl	equ	0xFF3
 15317                           intcon	equ	0xFF2
 15318                           intcon2	equ	0xFF1
 15319                           intcon3	equ	0xFF0
 15320                           indf0	equ	0xFEF
 15321                           postinc0	equ	0xFEE
 15322                           fsr0h	equ	0xFEA
 15323                           fsr0l	equ	0xFE9
 15324                           wreg	equ	0xFE8
 15325                           postdec1	equ	0xFE5
 15326                           fsr1h	equ	0xFE2
 15327                           fsr1l	equ	0xFE1
 15328                           indf2	equ	0xFDF
 15329                           postinc2	equ	0xFDE
 15330                           postdec2	equ	0xFDD
 15331                           fsr2h	equ	0xFDA
 15332                           fsr2l	equ	0xFD9
 15333                           status	equ	0xFD8
 15334                           
 15335 ;; *************** function i2_change_state_to_menu_start *****************
 15336 ;; Defined at:
 15337 ;;		line 472 in file "UI.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;		None
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;		None
 15342 ;; Return value:  Size  Location     Type
 15343 ;;                  1    wreg      void 
 15344 ;; Registers used:
 15345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15346 ;; Tracked objects:
 15347 ;;		On entry : 0/0
 15348 ;;		On exit  : 0/0
 15349 ;;		Unchanged: 0/0
 15350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15355 ;;Total ram usage:        0 bytes
 15356 ;; Hardware stack levels used:    1
 15357 ;; Hardware stack levels required when called:    4
 15358 ;; This function calls:
 15359 ;;		i2_lcdInst
 15360 ;;		i2_printRTC
 15361 ;;		i2_printf
 15362 ;; This function is called by:
 15363 ;;		_updateMenu
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367                           	psect	text57
 15368  00402C                     __ptext57:
 15369                           	opt stack 0
 15370  00402C                     i2_change_state_to_menu_start:
 15371                           	opt stack 18
 15372                           
 15373                           ;UI.c: 473: cur_state = 0;
 15374                           
 15375                           ;incstack = 0
 15376  00402C  0E00               	movlw	0
 15377  00402E  0100               	movlb	0	; () banked
 15378  004030  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15379  004032  0E00               	movlw	0
 15380  004034  6FDE               	movwf	_cur_state& (0+255),b
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;UI.c: 475: lcdInst(0b10000000);;
 15384  004036  0E80               	movlw	128
 15385  004038  ECF0  F020         	call	i2_lcdInst
 15386                           
 15387                           ;UI.c: 476: printRTC();
 15388  00403C  EC34  F00F         	call	i2_printRTC	;wreg free
 15389                           
 15390                           ;UI.c: 477: lcdInst(0b11000000);;
 15391  004040  0EC0               	movlw	192
 15392  004042  ECF0  F020         	call	i2_lcdInst
 15393                           
 15394                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15395  004046  0E20               	movlw	low STR_30
 15396  004048  6E0D               	movwf	i2printf@f,c
 15397  00404A  0EFE               	movlw	high STR_30
 15398  00404C  6E0E               	movwf	i2printf@f+1,c
 15399  00404E  ECB8  F00A         	call	i2_printf	;wreg free
 15400  004052  0012               	return		;funcret
 15401  004054                     __end_ofi2_change_state_to_menu_start:
 15402                           	opt stack 0
 15403                           pclatu	equ	0xFFB
 15404                           pclath	equ	0xFFA
 15405                           tblptru	equ	0xFF8
 15406                           tblptrh	equ	0xFF7
 15407                           tblptrl	equ	0xFF6
 15408                           tablat	equ	0xFF5
 15409                           prodh	equ	0xFF4
 15410                           prodl	equ	0xFF3
 15411                           intcon	equ	0xFF2
 15412                           intcon2	equ	0xFF1
 15413                           intcon3	equ	0xFF0
 15414                           indf0	equ	0xFEF
 15415                           postinc0	equ	0xFEE
 15416                           fsr0h	equ	0xFEA
 15417                           fsr0l	equ	0xFE9
 15418                           wreg	equ	0xFE8
 15419                           postdec1	equ	0xFE5
 15420                           fsr1h	equ	0xFE2
 15421                           fsr1l	equ	0xFE1
 15422                           indf2	equ	0xFDF
 15423                           postinc2	equ	0xFDE
 15424                           postdec2	equ	0xFDD
 15425                           fsr2h	equ	0xFDA
 15426                           fsr2l	equ	0xFD9
 15427                           status	equ	0xFD8
 15428                           
 15429 ;; *************** function i2_printRTC *****************
 15430 ;; Defined at:
 15431 ;;		line 63 in file "RTC.c"
 15432 ;; Parameters:    Size  Location     Type
 15433 ;;		None
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  printRTC       14   44[COMRAM] int [7]
 15436 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 15437 ;;  printRTC        2   64[COMRAM] int 
 15438 ;;  printRTC        2   58[COMRAM] int 
 15439 ;; Return value:  Size  Location     Type
 15440 ;;                  1    wreg      void 
 15441 ;; Registers used:
 15442 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15443 ;; Tracked objects:
 15444 ;;		On entry : 0/0
 15445 ;;		On exit  : 0/0
 15446 ;;		Unchanged: 0/0
 15447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;Total ram usage:       25 bytes
 15453 ;; Hardware stack levels used:    1
 15454 ;; Hardware stack levels required when called:    3
 15455 ;; This function calls:
 15456 ;;		i2_getRTC
 15457 ;;		i2_lcdInst
 15458 ;;		i2_printf
 15459 ;;		i2_strcpy
 15460 ;; This function is called by:
 15461 ;;		i2_change_state_to_menu_start
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text58
 15466  001E68                     __ptext58:
 15467                           	opt stack 0
 15468  001E68                     i2_printRTC:
 15469                           	opt stack 18
 15470                           
 15471                           ;RTC.c: 64: getRTC();
 15472                           
 15473                           ;incstack = 0
 15474  001E68  EC9A  F01B         	call	i2_getRTC	;wreg free
 15475                           
 15476                           ;RTC.c: 65: char month[] = "MMM";
 15477  001E6C  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 15478  001E70  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 15479  001E74  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 15480  001E78  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 15481                           
 15482                           ;RTC.c: 66: int INT_time[7];
 15483                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 15484  001E7C  0E00               	movlw	0
 15485  001E7E  6E42               	movwf	i2printRTC@i+1,c
 15486  001E80  0E00               	movlw	0
 15487  001E82  6E41               	movwf	i2printRTC@i,c
 15488  001E84  BE42               	btfsc	i2printRTC@i+1,7,c
 15489  001E86  D006               	goto	i2l5892
 15490  001E88  5042               	movf	i2printRTC@i+1,w,c
 15491  001E8A  E135               	bnz	i2l591
 15492  001E8C  0E07               	movlw	7
 15493  001E8E  5C41               	subwf	i2printRTC@i,w,c
 15494  001E90  B0D8               	btfsc	status,0,c
 15495  001E92  D031               	goto	i2l591
 15496  001E94                     i2l5892:
 15497                           
 15498                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 15499  001E94  0E24               	movlw	low _time
 15500  001E96  2441               	addwf	i2printRTC@i,w,c
 15501  001E98  6ED9               	movwf	fsr2l,c
 15502  001E9A  0E01               	movlw	high _time
 15503  001E9C  2042               	addwfc	i2printRTC@i+1,w,c
 15504  001E9E  6EDA               	movwf	fsr2h,c
 15505  001EA0  50DF               	movf	indf2,w,c
 15506  001EA2  6E2A               	movwf	??i2_printRTC& (0+255),c
 15507  001EA4  3A2A               	swapf	??i2_printRTC,f,c
 15508  001EA6  0E0F               	movlw	15
 15509  001EA8  162A               	andwf	??i2_printRTC,f,c
 15510  001EAA  0E0F               	movlw	15
 15511  001EAC  162A               	andwf	??i2_printRTC,f,c
 15512  001EAE  502A               	movf	??i2_printRTC,w,c
 15513  001EB0  0D0A               	mullw	10
 15514  001EB2  0E24               	movlw	low _time
 15515  001EB4  2441               	addwf	i2printRTC@i,w,c
 15516  001EB6  6ED9               	movwf	fsr2l,c
 15517  001EB8  0E01               	movlw	high _time
 15518  001EBA  2042               	addwfc	i2printRTC@i+1,w,c
 15519  001EBC  6EDA               	movwf	fsr2h,c
 15520  001EBE  50DF               	movf	indf2,w,c
 15521  001EC0  0B0F               	andlw	15
 15522  001EC2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 15523  001EC4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 15524  001EC6  50F3               	movf	prodl,w,c
 15525  001EC8  262B               	addwf	??i2_printRTC+1,f,c
 15526  001ECA  50F4               	movf	prodh,w,c
 15527  001ECC  222C               	addwfc	??i2_printRTC+2,f,c
 15528  001ECE  90D8               	bcf	status,0,c
 15529  001ED0  3441               	rlcf	i2printRTC@i,w,c
 15530  001ED2  6ED9               	movwf	fsr2l,c
 15531  001ED4  3442               	rlcf	i2printRTC@i+1,w,c
 15532  001ED6  6EDA               	movwf	fsr2h,c
 15533  001ED8  0E2D               	movlw	low i2printRTC@INT_time
 15534  001EDA  26D9               	addwf	fsr2l,f,c
 15535  001EDC  0E00               	movlw	high i2printRTC@INT_time
 15536  001EDE  22DA               	addwfc	fsr2h,f,c
 15537  001EE0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15538  001EE4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15539  001EE8  4A41               	infsnz	i2printRTC@i,f,c
 15540  001EEA  2A42               	incf	i2printRTC@i+1,f,c
 15541  001EEC  BE42               	btfsc	i2printRTC@i+1,7,c
 15542  001EEE  D7D2               	goto	i2l5892
 15543  001EF0  5042               	movf	i2printRTC@i+1,w,c
 15544  001EF2  E101               	bnz	i2u445_40
 15545  001EF4  D7CB               	goto	L9
 15546  001EF6                     i2u445_40:
 15547  001EF6                     i2l591:
 15548                           
 15549                           ;RTC.c: 69: }
 15550                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15551  001EF6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15552  001EFA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15553                           
 15554                           ;RTC.c: 71: switch(RTC_month){
 15555  001EFE  D084               	goto	i2l5924
 15556  001F00                     i2l5898:
 15557                           
 15558                           ;RTC.c: 73: strcpy(month, "JAN");
 15559  001F00  0E3D               	movlw	low i2printRTC@month
 15560  001F02  6E01               	movwf	i2strcpy@to,c
 15561  001F04  0E00               	movlw	high i2printRTC@month
 15562  001F06  6E02               	movwf	i2strcpy@to+1,c
 15563  001F08  0EDB               	movlw	low STR_8
 15564  001F0A  6E03               	movwf	i2strcpy@from,c
 15565  001F0C  0EFF               	movlw	high STR_8
 15566  001F0E  6E04               	movwf	i2strcpy@from+1,c
 15567  001F10  ECB6  F01E         	call	i2_strcpy	;wreg free
 15568                           
 15569                           ;RTC.c: 74: break;
 15570  001F14  D0A6               	goto	i2l5926
 15571  001F16                     i2l5900:
 15572                           
 15573                           ;RTC.c: 76: strcpy(month, "FEB");
 15574  001F16  0E3D               	movlw	low i2printRTC@month
 15575  001F18  6E01               	movwf	i2strcpy@to,c
 15576  001F1A  0E00               	movlw	high i2printRTC@month
 15577  001F1C  6E02               	movwf	i2strcpy@to+1,c
 15578  001F1E  0ECB               	movlw	low STR_9
 15579  001F20  6E03               	movwf	i2strcpy@from,c
 15580  001F22  0EFF               	movlw	high STR_9
 15581  001F24  6E04               	movwf	i2strcpy@from+1,c
 15582  001F26  ECB6  F01E         	call	i2_strcpy	;wreg free
 15583                           
 15584                           ;RTC.c: 77: break;
 15585  001F2A  D09B               	goto	i2l5926
 15586  001F2C                     i2l5902:
 15587                           
 15588                           ;RTC.c: 79: strcpy(month, "MAR");
 15589  001F2C  0E3D               	movlw	low i2printRTC@month
 15590  001F2E  6E01               	movwf	i2strcpy@to,c
 15591  001F30  0E00               	movlw	high i2printRTC@month
 15592  001F32  6E02               	movwf	i2strcpy@to+1,c
 15593  001F34  0EE7               	movlw	low STR_10
 15594  001F36  6E03               	movwf	i2strcpy@from,c
 15595  001F38  0EFF               	movlw	high STR_10
 15596  001F3A  6E04               	movwf	i2strcpy@from+1,c
 15597  001F3C  ECB6  F01E         	call	i2_strcpy	;wreg free
 15598                           
 15599                           ;RTC.c: 80: break;
 15600  001F40  D090               	goto	i2l5926
 15601  001F42                     i2l5904:
 15602                           
 15603                           ;RTC.c: 82: strcpy(month, "APR");
 15604  001F42  0E3D               	movlw	low i2printRTC@month
 15605  001F44  6E01               	movwf	i2strcpy@to,c
 15606  001F46  0E00               	movlw	high i2printRTC@month
 15607  001F48  6E02               	movwf	i2strcpy@to+1,c
 15608  001F4A  0EEB               	movlw	low STR_11
 15609  001F4C  6E03               	movwf	i2strcpy@from,c
 15610  001F4E  0EFF               	movlw	high STR_11
 15611  001F50  6E04               	movwf	i2strcpy@from+1,c
 15612  001F52  ECB6  F01E         	call	i2_strcpy	;wreg free
 15613                           
 15614                           ;RTC.c: 83: break;
 15615  001F56  D085               	goto	i2l5926
 15616  001F58                     i2l5906:
 15617                           
 15618                           ;RTC.c: 85: strcpy(month, "MAY");
 15619  001F58  0E3D               	movlw	low i2printRTC@month
 15620  001F5A  6E01               	movwf	i2strcpy@to,c
 15621  001F5C  0E00               	movlw	high i2printRTC@month
 15622  001F5E  6E02               	movwf	i2strcpy@to+1,c
 15623  001F60  0EFB               	movlw	low STR_12
 15624  001F62  6E03               	movwf	i2strcpy@from,c
 15625  001F64  0EFF               	movlw	high STR_12
 15626  001F66  6E04               	movwf	i2strcpy@from+1,c
 15627  001F68  ECB6  F01E         	call	i2_strcpy	;wreg free
 15628                           
 15629                           ;RTC.c: 86: break;
 15630  001F6C  D07A               	goto	i2l5926
 15631  001F6E                     i2l5908:
 15632                           
 15633                           ;RTC.c: 88: strcpy(month, "JUN");
 15634  001F6E  0E3D               	movlw	low i2printRTC@month
 15635  001F70  6E01               	movwf	i2strcpy@to,c
 15636  001F72  0E00               	movlw	high i2printRTC@month
 15637  001F74  6E02               	movwf	i2strcpy@to+1,c
 15638  001F76  0EDF               	movlw	low STR_13
 15639  001F78  6E03               	movwf	i2strcpy@from,c
 15640  001F7A  0EFF               	movlw	high STR_13
 15641  001F7C  6E04               	movwf	i2strcpy@from+1,c
 15642  001F7E  ECB6  F01E         	call	i2_strcpy	;wreg free
 15643                           
 15644                           ;RTC.c: 89: break;
 15645  001F82  D06F               	goto	i2l5926
 15646  001F84                     i2l5910:
 15647                           
 15648                           ;RTC.c: 91: strcpy(month, "JUL");
 15649  001F84  0E3D               	movlw	low i2printRTC@month
 15650  001F86  6E01               	movwf	i2strcpy@to,c
 15651  001F88  0E00               	movlw	high i2printRTC@month
 15652  001F8A  6E02               	movwf	i2strcpy@to+1,c
 15653  001F8C  0ED7               	movlw	low STR_14
 15654  001F8E  6E03               	movwf	i2strcpy@from,c
 15655  001F90  0EFF               	movlw	high STR_14
 15656  001F92  6E04               	movwf	i2strcpy@from+1,c
 15657  001F94  ECB6  F01E         	call	i2_strcpy	;wreg free
 15658                           
 15659                           ;RTC.c: 92: break;
 15660  001F98  D064               	goto	i2l5926
 15661  001F9A                     i2l5912:
 15662                           
 15663                           ;RTC.c: 94: strcpy(month, "AUG");
 15664  001F9A  0E3D               	movlw	low i2printRTC@month
 15665  001F9C  6E01               	movwf	i2strcpy@to,c
 15666  001F9E  0E00               	movlw	high i2printRTC@month
 15667  001FA0  6E02               	movwf	i2strcpy@to+1,c
 15668  001FA2  0ED3               	movlw	low STR_15
 15669  001FA4  6E03               	movwf	i2strcpy@from,c
 15670  001FA6  0EFF               	movlw	high STR_15
 15671  001FA8  6E04               	movwf	i2strcpy@from+1,c
 15672  001FAA  ECB6  F01E         	call	i2_strcpy	;wreg free
 15673                           
 15674                           ;RTC.c: 95: break;
 15675  001FAE  D059               	goto	i2l5926
 15676  001FB0                     i2l5914:
 15677                           
 15678                           ;RTC.c: 97: strcpy(month, "SEP");
 15679  001FB0  0E3D               	movlw	low i2printRTC@month
 15680  001FB2  6E01               	movwf	i2strcpy@to,c
 15681  001FB4  0E00               	movlw	high i2printRTC@month
 15682  001FB6  6E02               	movwf	i2strcpy@to+1,c
 15683  001FB8  0EE3               	movlw	low STR_16
 15684  001FBA  6E03               	movwf	i2strcpy@from,c
 15685  001FBC  0EFF               	movlw	high STR_16
 15686  001FBE  6E04               	movwf	i2strcpy@from+1,c
 15687  001FC0  ECB6  F01E         	call	i2_strcpy	;wreg free
 15688                           
 15689                           ;RTC.c: 98: break;
 15690  001FC4  D04E               	goto	i2l5926
 15691  001FC6                     i2l5916:
 15692                           
 15693                           ;RTC.c: 100: strcpy(month, "OCT");
 15694  001FC6  0E3D               	movlw	low i2printRTC@month
 15695  001FC8  6E01               	movwf	i2strcpy@to,c
 15696  001FCA  0E00               	movlw	high i2printRTC@month
 15697  001FCC  6E02               	movwf	i2strcpy@to+1,c
 15698  001FCE  0EF3               	movlw	low STR_17
 15699  001FD0  6E03               	movwf	i2strcpy@from,c
 15700  001FD2  0EFF               	movlw	high STR_17
 15701  001FD4  6E04               	movwf	i2strcpy@from+1,c
 15702  001FD6  ECB6  F01E         	call	i2_strcpy	;wreg free
 15703                           
 15704                           ;RTC.c: 101: break;
 15705  001FDA  D043               	goto	i2l5926
 15706  001FDC                     i2l5918:
 15707                           
 15708                           ;RTC.c: 103: strcpy(month, "NOV");
 15709  001FDC  0E3D               	movlw	low i2printRTC@month
 15710  001FDE  6E01               	movwf	i2strcpy@to,c
 15711  001FE0  0E00               	movlw	high i2printRTC@month
 15712  001FE2  6E02               	movwf	i2strcpy@to+1,c
 15713  001FE4  0EF7               	movlw	low STR_18
 15714  001FE6  6E03               	movwf	i2strcpy@from,c
 15715  001FE8  0EFF               	movlw	high STR_18
 15716  001FEA  6E04               	movwf	i2strcpy@from+1,c
 15717  001FEC  ECB6  F01E         	call	i2_strcpy	;wreg free
 15718                           
 15719                           ;RTC.c: 104: break;
 15720  001FF0  D038               	goto	i2l5926
 15721  001FF2                     i2l5920:
 15722                           
 15723                           ;RTC.c: 106: strcpy(month, "DEC");
 15724  001FF2  0E3D               	movlw	low i2printRTC@month
 15725  001FF4  6E01               	movwf	i2strcpy@to,c
 15726  001FF6  0E00               	movlw	high i2printRTC@month
 15727  001FF8  6E02               	movwf	i2strcpy@to+1,c
 15728  001FFA  0ECF               	movlw	low STR_19
 15729  001FFC  6E03               	movwf	i2strcpy@from,c
 15730  001FFE  0EFF               	movlw	high STR_19
 15731  002000  6E04               	movwf	i2strcpy@from+1,c
 15732  002002  ECB6  F01E         	call	i2_strcpy	;wreg free
 15733                           
 15734                           ;RTC.c: 108: }
 15735                           
 15736                           ;RTC.c: 107: break;
 15737  002006  D02D               	goto	i2l5926
 15738  002008                     i2l5924:
 15739  002008  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15740  00200C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15741                           
 15742                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15743                           ; Switch size 1, requested type "space"
 15744                           ; Number of cases is 1, Range of values is 0 to 0
 15745                           ; switch strategies available:
 15746                           ; Name         Instructions Cycles
 15747                           ; simple_byte            4     3 (average)
 15748                           ;	Chosen strategy is simple_byte
 15749  002010  502B               	movf	??i2_printRTC+1,w,c
 15750  002012  0A00               	xorlw	0	; case 0
 15751  002014  A4D8               	btfss	status,2,c
 15752  002016  D025               	goto	i2l5926
 15753                           
 15754                           ; Switch size 1, requested type "space"
 15755                           ; Number of cases is 12, Range of values is 1 to 12
 15756                           ; switch strategies available:
 15757                           ; Name         Instructions Cycles
 15758                           ; simple_byte           37    19 (average)
 15759                           ;	Chosen strategy is simple_byte
 15760  002018  502A               	movf	??i2_printRTC,w,c
 15761  00201A  0A01               	xorlw	1	; case 1
 15762  00201C  B4D8               	btfsc	status,2,c
 15763  00201E  D770               	goto	i2l5898
 15764  002020  0A03               	xorlw	3	; case 2
 15765  002022  B4D8               	btfsc	status,2,c
 15766  002024  D778               	goto	i2l5900
 15767  002026  0A01               	xorlw	1	; case 3
 15768  002028  B4D8               	btfsc	status,2,c
 15769  00202A  D780               	goto	i2l5902
 15770  00202C  0A07               	xorlw	7	; case 4
 15771  00202E  B4D8               	btfsc	status,2,c
 15772  002030  D788               	goto	i2l5904
 15773  002032  0A01               	xorlw	1	; case 5
 15774  002034  B4D8               	btfsc	status,2,c
 15775  002036  D790               	goto	i2l5906
 15776  002038  0A03               	xorlw	3	; case 6
 15777  00203A  B4D8               	btfsc	status,2,c
 15778  00203C  D798               	goto	i2l5908
 15779  00203E  0A01               	xorlw	1	; case 7
 15780  002040  B4D8               	btfsc	status,2,c
 15781  002042  D7A0               	goto	i2l5910
 15782  002044  0A0F               	xorlw	15	; case 8
 15783  002046  B4D8               	btfsc	status,2,c
 15784  002048  D7A8               	goto	i2l5912
 15785  00204A  0A01               	xorlw	1	; case 9
 15786  00204C  B4D8               	btfsc	status,2,c
 15787  00204E  D7B0               	goto	i2l5914
 15788  002050  0A03               	xorlw	3	; case 10
 15789  002052  B4D8               	btfsc	status,2,c
 15790  002054  D7B8               	goto	i2l5916
 15791  002056  0A01               	xorlw	1	; case 11
 15792  002058  B4D8               	btfsc	status,2,c
 15793  00205A  D7C0               	goto	i2l5918
 15794  00205C  0A07               	xorlw	7	; case 12
 15795  00205E  B4D8               	btfsc	status,2,c
 15796  002060  D7C8               	goto	i2l5920
 15797  002062                     i2l5926:
 15798                           
 15799                           ;RTC.c: 109: lcdInst(0b10000000);;
 15800  002062  0E80               	movlw	128
 15801  002064  ECF0  F020         	call	i2_lcdInst
 15802                           
 15803                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15804  002068  0E54               	movlw	low STR_21
 15805  00206A  6E0D               	movwf	i2printf@f,c
 15806  00206C  0EFB               	movlw	high STR_21
 15807  00206E  6E0E               	movwf	i2printf@f+1,c
 15808  002070  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15809  002074  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15810  002078  0E3D               	movlw	low i2printRTC@month
 15811  00207A  6E11               	movwf	?i2_printf+4,c
 15812  00207C  0E00               	movlw	high i2printRTC@month
 15813  00207E  6E12               	movwf	?i2_printf+5,c
 15814  002080  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15815  002084  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15816  002088  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15817  00208C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15818  002090  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15819  002094  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15820  002098  ECB8  F00A         	call	i2_printf	;wreg free
 15821  00209C  0012               	return		;funcret
 15822  00209E                     __end_ofi2_printRTC:
 15823                           	opt stack 0
 15824                           pclatu	equ	0xFFB
 15825                           pclath	equ	0xFFA
 15826                           tblptru	equ	0xFF8
 15827                           tblptrh	equ	0xFF7
 15828                           tblptrl	equ	0xFF6
 15829                           tablat	equ	0xFF5
 15830                           prodh	equ	0xFF4
 15831                           prodl	equ	0xFF3
 15832                           intcon	equ	0xFF2
 15833                           intcon2	equ	0xFF1
 15834                           intcon3	equ	0xFF0
 15835                           indf0	equ	0xFEF
 15836                           postinc0	equ	0xFEE
 15837                           fsr0h	equ	0xFEA
 15838                           fsr0l	equ	0xFE9
 15839                           wreg	equ	0xFE8
 15840                           postdec1	equ	0xFE5
 15841                           fsr1h	equ	0xFE2
 15842                           fsr1l	equ	0xFE1
 15843                           indf2	equ	0xFDF
 15844                           postinc2	equ	0xFDE
 15845                           postdec2	equ	0xFDD
 15846                           fsr2h	equ	0xFDA
 15847                           fsr2l	equ	0xFD9
 15848                           status	equ	0xFD8
 15849                           
 15850 ;; *************** function i2_strcpy *****************
 15851 ;; Defined at:
 15852 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;  to              2    0[COMRAM] PTR unsigned char 
 15855 ;;		 -> printRTC@month(4), UI@month(4), 
 15856 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15857 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15858 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15859 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15860 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15861 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15862 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15863 ;;		 -> STR_8(4), 
 15864 ;; Auto vars:     Size  Location     Type
 15865 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15866 ;;		 -> printRTC@month(4), UI@month(4), 
 15867 ;; Return value:  Size  Location     Type
 15868 ;;                  2    0[COMRAM] PTR unsigned char 
 15869 ;; Registers used:
 15870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15871 ;; Tracked objects:
 15872 ;;		On entry : 0/0
 15873 ;;		On exit  : 0/0
 15874 ;;		Unchanged: 0/0
 15875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15876 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15879 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15880 ;;Total ram usage:        6 bytes
 15881 ;; Hardware stack levels used:    1
 15882 ;; This function calls:
 15883 ;;		Nothing
 15884 ;; This function is called by:
 15885 ;;		i2_printRTC
 15886 ;; This function uses a non-reentrant model
 15887 ;;
 15888                           
 15889                           	psect	text59
 15890  003D6C                     __ptext59:
 15891                           	opt stack 0
 15892  003D6C                     i2_strcpy:
 15893                           	opt stack 20
 15894                           
 15895                           ;incstack = 0
 15896  003D6C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15897  003D70  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15898  003D74  D004               	goto	i2l5574
 15899  003D76                     i2l5572:
 15900  003D76  4A05               	infsnz	i2strcpy@cp,f,c
 15901  003D78  2A06               	incf	i2strcpy@cp+1,f,c
 15902  003D7A  4A03               	infsnz	i2strcpy@from,f,c
 15903  003D7C  2A04               	incf	i2strcpy@from+1,f,c
 15904  003D7E                     i2l5574:
 15905  003D7E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15906  003D82  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15907  003D86                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15908  003D86  6AF8               	clrf	tblptru,c
 15909  003D88                     	endif
 15910  003D88                     	if	0	;tblptru may be non-zero
 15911  003D88                     	endif
 15912  003D88  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15913  003D8C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15914  003D90  0008               	tblrd		*
 15915  003D92  CFF5 FFDF          	movff	tablat,indf2
 15916  003D96  50DF               	movf	indf2,w,c
 15917  003D98  B4D8               	btfsc	status,2,c
 15918  003D9A  0012               	return	
 15919  003D9C  D7EC               	goto	i2l5572
 15920  003D9E                     __end_ofi2_strcpy:
 15921                           	opt stack 0
 15922                           pclatu	equ	0xFFB
 15923                           pclath	equ	0xFFA
 15924                           tblptru	equ	0xFF8
 15925                           tblptrh	equ	0xFF7
 15926                           tblptrl	equ	0xFF6
 15927                           tablat	equ	0xFF5
 15928                           prodh	equ	0xFF4
 15929                           prodl	equ	0xFF3
 15930                           intcon	equ	0xFF2
 15931                           intcon2	equ	0xFF1
 15932                           intcon3	equ	0xFF0
 15933                           indf0	equ	0xFEF
 15934                           postinc0	equ	0xFEE
 15935                           fsr0h	equ	0xFEA
 15936                           fsr0l	equ	0xFE9
 15937                           wreg	equ	0xFE8
 15938                           postdec1	equ	0xFE5
 15939                           fsr1h	equ	0xFE2
 15940                           fsr1l	equ	0xFE1
 15941                           indf2	equ	0xFDF
 15942                           postinc2	equ	0xFDE
 15943                           postdec2	equ	0xFDD
 15944                           fsr2h	equ	0xFDA
 15945                           fsr2l	equ	0xFD9
 15946                           status	equ	0xFD8
 15947                           
 15948 ;; *************** function _inputHandler *****************
 15949 ;; Defined at:
 15950 ;;		line 370 in file "UI.c"
 15951 ;; Parameters:    Size  Location     Type
 15952 ;;		None
 15953 ;; Auto vars:     Size  Location     Type
 15954 ;;		None
 15955 ;; Return value:  Size  Location     Type
 15956 ;;                  2   41[COMRAM] int 
 15957 ;; Registers used:
 15958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15959 ;; Tracked objects:
 15960 ;;		On entry : 0/0
 15961 ;;		On exit  : 0/0
 15962 ;;		Unchanged: 0/0
 15963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15964 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15967 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15968 ;;Total ram usage:        4 bytes
 15969 ;; Hardware stack levels used:    1
 15970 ;; Hardware stack levels required when called:    4
 15971 ;; This function calls:
 15972 ;;		_change_state_to_logs_11
 15973 ;;		_change_state_to_logs_12
 15974 ;;		_change_state_to_logs_22
 15975 ;;		_change_state_to_logs_23
 15976 ;;		_change_state_to_logs_33
 15977 ;;		_change_state_to_logs_34
 15978 ;;		_change_state_to_menu_11
 15979 ;;		_change_state_to_menu_23
 15980 ;;		i2_change_state_to_menu_12
 15981 ;;		i2_change_state_to_menu_22
 15982 ;; This function is called by:
 15983 ;;		_updateMenu
 15984 ;; This function uses a non-reentrant model
 15985 ;;
 15986                           
 15987                           	psect	text60
 15988  002290                     __ptext60:
 15989                           	opt stack 0
 15990  002290                     _inputHandler:
 15991                           	opt stack 18
 15992                           
 15993                           ;UI.c: 375: if(firstboot){
 15994                           
 15995                           ;incstack = 0
 15996  002290  5075               	movf	_firstboot,w,c
 15997  002292  1076               	iorwf	_firstboot+1,w,c
 15998  002294  B4D8               	btfsc	status,2,c
 15999  002296  D00B               	goto	i2l5994
 16000                           
 16001                           ;UI.c: 376: change_state_to_menu_11();
 16002  002298  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 16003                           
 16004                           ;UI.c: 377: firstboot = 0;
 16005  00229C  0E00               	movlw	0
 16006  00229E  6E76               	movwf	_firstboot+1,c
 16007  0022A0  0E00               	movlw	0
 16008  0022A2  6E75               	movwf	_firstboot,c
 16009                           
 16010                           ;UI.c: 378: return 0;
 16011  0022A4  0E00               	movlw	0
 16012  0022A6  6E2B               	movwf	?_inputHandler+1,c
 16013  0022A8  0E00               	movlw	0
 16014  0022AA  6E2A               	movwf	?_inputHandler,c
 16015  0022AC  0012               	return	
 16016  0022AE                     i2l5994:
 16017                           
 16018                           ;UI.c: 379: }
 16019                           ;UI.c: 380: if (logstate){
 16020  0022AE  0100               	movlb	0	; () banked
 16021  0022B0  51F6               	movf	_logstate& (0+255),w,b
 16022  0022B2  0100               	movlb	0	; () banked
 16023  0022B4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16024  0022B6  B4D8               	btfsc	status,2,c
 16025  0022B8  D0C7               	goto	i2l6112
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16029  0022BA  0E43               	movlw	67
 16030  0022BC  187D               	xorwf	_input,w,c	;volatile
 16031  0022BE  A4D8               	btfss	status,2,c
 16032  0022C0  D012               	goto	i2l6012
 16033                           
 16034                           ; BSR set to: 0
 16035  0022C2  B281               	btfsc	3969,1,c	;volatile
 16036  0022C4  D009               	goto	i2l6004
 16037  0022C6  D00F               	goto	i2l6012
 16038  0022C8                     i2l6002:
 16039                           
 16040                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16041  0022C8  0E68               	movlw	104
 16042  0022CA  6E2C               	movwf	??_inputHandler& (0+255),c
 16043  0022CC  0EE4               	movlw	228
 16044  0022CE                     i2u765_47:
 16045  0022CE  2EE8               	decfsz	wreg,f,c
 16046  0022D0  D7FE               	bra	i2u765_47
 16047  0022D2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16048  0022D4  D7FC               	bra	i2u765_47
 16049  0022D6  D000               	nop2	
 16050  0022D8                     i2l6004:
 16051  0022D8  B281               	btfsc	3969,1,c	;volatile
 16052  0022DA  D7F6               	goto	i2l6002
 16053  0022DC                     i2l6006:
 16054                           
 16055                           ;UI.c: 385: }
 16056                           ;UI.c: 386: return 0;
 16057  0022DC  0E00               	movlw	0
 16058  0022DE  6E2B               	movwf	?_inputHandler+1,c
 16059  0022E0  0E00               	movlw	0
 16060  0022E2  6E2A               	movwf	?_inputHandler,c
 16061  0022E4  0012               	return	
 16062  0022E6                     i2l6012:
 16063                           
 16064                           ;UI.c: 388: else if (input == 'D'){
 16065  0022E6  0E44               	movlw	68
 16066  0022E8  187D               	xorwf	_input,w,c	;volatile
 16067  0022EA  A4D8               	btfss	status,2,c
 16068  0022EC  D7F7               	goto	i2l6006
 16069                           
 16070                           ;UI.c: 390: logstate = 0;
 16071  0022EE  0E00               	movlw	0
 16072  0022F0  0100               	movlb	0	; () banked
 16073  0022F2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16074  0022F4  0E00               	movlw	0
 16075  0022F6  6FF6               	movwf	_logstate& (0+255),b
 16076                           
 16077                           ;UI.c: 391: switch(cur_state){
 16078  0022F8  D012               	goto	i2l6030
 16079  0022FA                     i2l6016:
 16080                           
 16081                           ;UI.c: 393: change_state_to_logs_11();
 16082  0022FA  EC8F  F01F         	call	_change_state_to_logs_11	;wreg free
 16083                           
 16084                           ;UI.c: 394: break;
 16085  0022FE  D7EE               	goto	i2l6006
 16086  002300                     i2l6018:
 16087                           
 16088                           ;UI.c: 396: change_state_to_logs_12();
 16089  002300  EC77  F01F         	call	_change_state_to_logs_12	;wreg free
 16090                           
 16091                           ;UI.c: 397: break;
 16092  002304  D7EB               	goto	i2l6006
 16093  002306                     i2l6020:
 16094                           
 16095                           ;UI.c: 399: change_state_to_logs_22();
 16096  002306  EC5F  F01F         	call	_change_state_to_logs_22	;wreg free
 16097                           
 16098                           ;UI.c: 400: break;
 16099  00230A  D7E8               	goto	i2l6006
 16100  00230C                     i2l6022:
 16101                           
 16102                           ;UI.c: 402: change_state_to_logs_23();
 16103  00230C  ECBE  F01F         	call	_change_state_to_logs_23	;wreg free
 16104                           
 16105                           ;UI.c: 403: break;
 16106  002310  D7E5               	goto	i2l6006
 16107  002312                     i2l6024:
 16108                           
 16109                           ;UI.c: 405: change_state_to_logs_33();
 16110  002312  EC47  F01F         	call	_change_state_to_logs_33	;wreg free
 16111                           
 16112                           ;UI.c: 406: break;
 16113  002316  D7E2               	goto	i2l6006
 16114  002318                     i2l6026:
 16115                           
 16116                           ;UI.c: 408: change_state_to_logs_34();
 16117  002318  EC2F  F01F         	call	_change_state_to_logs_34	;wreg free
 16118                           
 16119                           ;UI.c: 410: }
 16120                           
 16121                           ;UI.c: 409: break;
 16122  00231C  D7DF               	goto	i2l6006
 16123  00231E                     i2l6030:
 16124  00231E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16125  002322  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16126                           
 16127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16128                           ; Switch size 1, requested type "space"
 16129                           ; Number of cases is 2, Range of values is 3 to 4
 16130                           ; switch strategies available:
 16131                           ; Name         Instructions Cycles
 16132                           ; simple_byte            7     4 (average)
 16133                           ;	Chosen strategy is simple_byte
 16134  002326  502D               	movf	??_inputHandler+1,w,c
 16135  002328  0A03               	xorlw	3	; case 3
 16136  00232A  B4D8               	btfsc	status,2,c
 16137  00232C  D004               	goto	i2l8072
 16138  00232E  0A07               	xorlw	7	; case 4
 16139  002330  B4D8               	btfsc	status,2,c
 16140  002332  D00F               	goto	i2l8074
 16141  002334  D7D3               	goto	i2l6006
 16142  002336                     i2l8072:
 16143                           
 16144                           ; Switch size 1, requested type "space"
 16145                           ; Number of cases is 4, Range of values is 243 to 255
 16146                           ; switch strategies available:
 16147                           ; Name         Instructions Cycles
 16148                           ; simple_byte           13     7 (average)
 16149                           ;	Chosen strategy is simple_byte
 16150  002336  502C               	movf	??_inputHandler,w,c
 16151  002338  0AF3               	xorlw	243	; case 243
 16152  00233A  B4D8               	btfsc	status,2,c
 16153  00233C  D7DE               	goto	i2l6016
 16154  00233E  0A07               	xorlw	7	; case 244
 16155  002340  B4D8               	btfsc	status,2,c
 16156  002342  D7DE               	goto	i2l6018
 16157  002344  0A0A               	xorlw	10	; case 254
 16158  002346  B4D8               	btfsc	status,2,c
 16159  002348  D7DE               	goto	i2l6020
 16160  00234A  0A01               	xorlw	1	; case 255
 16161  00234C  B4D8               	btfsc	status,2,c
 16162  00234E  D7DE               	goto	i2l6022
 16163  002350  D7C5               	goto	i2l6006
 16164  002352                     i2l8074:
 16165                           
 16166                           ; Switch size 1, requested type "space"
 16167                           ; Number of cases is 2, Range of values is 9 to 10
 16168                           ; switch strategies available:
 16169                           ; Name         Instructions Cycles
 16170                           ; simple_byte            7     4 (average)
 16171                           ;	Chosen strategy is simple_byte
 16172  002352  502C               	movf	??_inputHandler,w,c
 16173  002354  0A09               	xorlw	9	; case 9
 16174  002356  B4D8               	btfsc	status,2,c
 16175  002358  D7DC               	goto	i2l6024
 16176  00235A  0A03               	xorlw	3	; case 10
 16177  00235C  B4D8               	btfsc	status,2,c
 16178  00235E  D7DC               	goto	i2l6026
 16179  002360  D7BD               	goto	i2l6006
 16180  002362                     i2l6042:
 16181                           
 16182                           ;UI.c: 420: if(cur_state == 11){
 16183  002362  0E0B               	movlw	11
 16184  002364  0100               	movlb	0	; () banked
 16185  002366  19DE               	xorwf	_cur_state& (0+255),w,b
 16186  002368  0100               	movlb	0	; () banked
 16187  00236A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16188  00236C  A4D8               	btfss	status,2,c
 16189  00236E  D005               	goto	i2l6050
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;UI.c: 421: return 0;
 16193  002370  0E00               	movlw	0
 16194  002372  6E2B               	movwf	?_inputHandler+1,c
 16195  002374  0E00               	movlw	0
 16196  002376  6E2A               	movwf	?_inputHandler,c
 16197                           
 16198                           ; BSR set to: 0
 16199  002378  0012               	return	
 16200  00237A                     i2l6050:
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;UI.c: 423: else{
 16204                           ;UI.c: 424: change_state_to_menu_11();
 16205  00237A  EC17  F01F         	call	_change_state_to_menu_11	;wreg free
 16206                           
 16207                           ;UI.c: 425: }
 16208                           ;UI.c: 426: return 0;
 16209  00237E  0E00               	movlw	0
 16210  002380  6E2B               	movwf	?_inputHandler+1,c
 16211  002382  0E00               	movlw	0
 16212  002384  6E2A               	movwf	?_inputHandler,c
 16213  002386  0012               	return	
 16214  002388                     i2l6056:
 16215                           
 16216                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16217  002388  0E16               	movlw	22
 16218  00238A  0100               	movlb	0	; () banked
 16219  00238C  19DE               	xorwf	_cur_state& (0+255),w,b
 16220  00238E  0100               	movlb	0	; () banked
 16221  002390  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16222  002392  B4D8               	btfsc	status,2,c
 16223  002394  D007               	goto	i2l6060
 16224                           
 16225                           ; BSR set to: 0
 16226  002396  0E0C               	movlw	12
 16227  002398  0100               	movlb	0	; () banked
 16228  00239A  19DE               	xorwf	_cur_state& (0+255),w,b
 16229  00239C  0100               	movlb	0	; () banked
 16230  00239E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16231  0023A0  A4D8               	btfss	status,2,c
 16232  0023A2  D005               	goto	i2l6066
 16233  0023A4                     i2l6060:
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;UI.c: 429: return 0;
 16237  0023A4  0E00               	movlw	0
 16238  0023A6  6E2B               	movwf	?_inputHandler+1,c
 16239  0023A8  0E00               	movlw	0
 16240  0023AA  6E2A               	movwf	?_inputHandler,c
 16241                           
 16242                           ; BSR set to: 0
 16243  0023AC  0012               	return	
 16244  0023AE                     i2l6066:
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;UI.c: 431: else if(cur_state == 23){
 16248  0023AE  0E17               	movlw	23
 16249  0023B0  0100               	movlb	0	; () banked
 16250  0023B2  19DE               	xorwf	_cur_state& (0+255),w,b
 16251  0023B4  0100               	movlb	0	; () banked
 16252  0023B6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16253  0023B8  A4D8               	btfss	status,2,c
 16254  0023BA  D003               	goto	i2l6070
 16255                           
 16256                           ; BSR set to: 0
 16257                           ;UI.c: 432: change_state_to_menu_22();
 16258  0023BC  ECCF  F01E         	call	i2_change_state_to_menu_22	;wreg free
 16259                           
 16260                           ;UI.c: 433: }
 16261  0023C0  D002               	goto	i2l6072
 16262  0023C2                     i2l6070:
 16263                           
 16264                           ;UI.c: 434: else{
 16265                           ;UI.c: 435: change_state_to_menu_12();
 16266  0023C2  ECE7  F01E         	call	i2_change_state_to_menu_12	;wreg free
 16267  0023C6                     i2l6072:
 16268                           
 16269                           ;UI.c: 436: }
 16270                           ;UI.c: 437: return 0;
 16271  0023C6  0E00               	movlw	0
 16272  0023C8  6E2B               	movwf	?_inputHandler+1,c
 16273  0023CA  0E00               	movlw	0
 16274  0023CC  6E2A               	movwf	?_inputHandler,c
 16275  0023CE  0012               	return	
 16276  0023D0                     i2l6076:
 16277                           
 16278                           ;UI.c: 439: if(cur_state == 23){
 16279  0023D0  0E17               	movlw	23
 16280  0023D2  0100               	movlb	0	; () banked
 16281  0023D4  19DE               	xorwf	_cur_state& (0+255),w,b
 16282  0023D6  0100               	movlb	0	; () banked
 16283  0023D8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16284  0023DA  A4D8               	btfss	status,2,c
 16285  0023DC  D005               	goto	i2l6084
 16286                           
 16287                           ; BSR set to: 0
 16288                           ;UI.c: 440: return 0;
 16289  0023DE  0E00               	movlw	0
 16290  0023E0  6E2B               	movwf	?_inputHandler+1,c
 16291  0023E2  0E00               	movlw	0
 16292  0023E4  6E2A               	movwf	?_inputHandler,c
 16293                           
 16294                           ; BSR set to: 0
 16295  0023E6  0012               	return	
 16296  0023E8                     i2l6084:
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;UI.c: 442: else{
 16300                           ;UI.c: 443: change_state_to_menu_23();
 16301  0023E8  ECFF  F01E         	call	_change_state_to_menu_23	;wreg free
 16302                           
 16303                           ;UI.c: 444: }
 16304                           ;UI.c: 445: return 0;
 16305  0023EC  0E00               	movlw	0
 16306  0023EE  6E2B               	movwf	?_inputHandler+1,c
 16307  0023F0  0E00               	movlw	0
 16308  0023F2  6E2A               	movwf	?_inputHandler,c
 16309  0023F4  0012               	return	
 16310  0023F6                     i2l6090:
 16311                           
 16312                           ;UI.c: 448: up = 1;
 16313  0023F6  0E00               	movlw	0
 16314  0023F8  6E78               	movwf	_up+1,c
 16315  0023FA  0E01               	movlw	1
 16316  0023FC  6E77               	movwf	_up,c
 16317                           
 16318                           ;UI.c: 449: return 1;
 16319  0023FE  0E00               	movlw	0
 16320  002400  6E2B               	movwf	?_inputHandler+1,c
 16321  002402  0E01               	movlw	1
 16322  002404  6E2A               	movwf	?_inputHandler,c
 16323  002406  0012               	return	
 16324  002408                     i2l6094:
 16325                           
 16326                           ;UI.c: 451: down = 1;
 16327  002408  0E00               	movlw	0
 16328  00240A  6E68               	movwf	_down+1,c
 16329  00240C  0E01               	movlw	1
 16330  00240E  6E67               	movwf	_down,c
 16331                           
 16332                           ;UI.c: 452: return 1;
 16333  002410  0E00               	movlw	0
 16334  002412  6E2B               	movwf	?_inputHandler+1,c
 16335  002414  0E01               	movlw	1
 16336  002416  6E2A               	movwf	?_inputHandler,c
 16337  002418  0012               	return	
 16338  00241A                     i2l6098:
 16339                           
 16340                           ;UI.c: 454: enter = 1;
 16341  00241A  0E00               	movlw	0
 16342  00241C  6E6A               	movwf	_enter+1,c
 16343  00241E  0E01               	movlw	1
 16344  002420  6E69               	movwf	_enter,c
 16345                           
 16346                           ;UI.c: 455: return 1;
 16347  002422  0E00               	movlw	0
 16348  002424  6E2B               	movwf	?_inputHandler+1,c
 16349  002426  0E01               	movlw	1
 16350  002428  6E2A               	movwf	?_inputHandler,c
 16351  00242A  0012               	return	
 16352  00242C                     i2l6102:
 16353                           
 16354                           ;UI.c: 457: back = 1;
 16355  00242C  0E00               	movlw	0
 16356  00242E  6E5C               	movwf	_back+1,c
 16357  002430  0E01               	movlw	1
 16358  002432  6E5B               	movwf	_back,c
 16359                           
 16360                           ;UI.c: 458: return 1;
 16361  002434  0E00               	movlw	0
 16362  002436  6E2B               	movwf	?_inputHandler+1,c
 16363  002438  0E01               	movlw	1
 16364  00243A  6E2A               	movwf	?_inputHandler,c
 16365  00243C  0012               	return	
 16366  00243E                     i2l6106:
 16367                           
 16368                           ;UI.c: 461: return 1;
 16369  00243E  0E00               	movlw	0
 16370  002440  6E2B               	movwf	?_inputHandler+1,c
 16371  002442  0E01               	movlw	1
 16372  002444  6E2A               	movwf	?_inputHandler,c
 16373                           
 16374                           ;UI.c: 462: }
 16375  002446  0012               	return	
 16376  002448                     i2l6112:
 16377  002448  507D               	movf	_input,w,c	;volatile
 16378                           
 16379                           ; Switch size 1, requested type "space"
 16380                           ; Number of cases is 7, Range of values is 49 to 68
 16381                           ; switch strategies available:
 16382                           ; Name         Instructions Cycles
 16383                           ; simple_byte           22    12 (average)
 16384                           ;	Chosen strategy is simple_byte
 16385  00244A  0A31               	xorlw	49	; case 49
 16386  00244C  B4D8               	btfsc	status,2,c
 16387  00244E  D789               	goto	i2l6042
 16388  002450  0A03               	xorlw	3	; case 50
 16389  002452  B4D8               	btfsc	status,2,c
 16390  002454  D799               	goto	i2l6056
 16391  002456  0A01               	xorlw	1	; case 51
 16392  002458  B4D8               	btfsc	status,2,c
 16393  00245A  D7BA               	goto	i2l6076
 16394  00245C  0A72               	xorlw	114	; case 65
 16395  00245E  B4D8               	btfsc	status,2,c
 16396  002460  D7CA               	goto	i2l6090
 16397  002462  0A03               	xorlw	3	; case 66
 16398  002464  B4D8               	btfsc	status,2,c
 16399  002466  D7D0               	goto	i2l6094
 16400  002468  0A01               	xorlw	1	; case 67
 16401  00246A  B4D8               	btfsc	status,2,c
 16402  00246C  D7D6               	goto	i2l6098
 16403  00246E  0A07               	xorlw	7	; case 68
 16404  002470  B4D8               	btfsc	status,2,c
 16405  002472  D7DC               	goto	i2l6102
 16406  002474  D7E4               	goto	i2l6106
 16407  002476                     __end_of_inputHandler:
 16408                           	opt stack 0
 16409                           pclatu	equ	0xFFB
 16410                           pclath	equ	0xFFA
 16411                           tblptru	equ	0xFF8
 16412                           tblptrh	equ	0xFF7
 16413                           tblptrl	equ	0xFF6
 16414                           tablat	equ	0xFF5
 16415                           prodh	equ	0xFF4
 16416                           prodl	equ	0xFF3
 16417                           intcon	equ	0xFF2
 16418                           intcon2	equ	0xFF1
 16419                           intcon3	equ	0xFF0
 16420                           indf0	equ	0xFEF
 16421                           postinc0	equ	0xFEE
 16422                           fsr0h	equ	0xFEA
 16423                           fsr0l	equ	0xFE9
 16424                           wreg	equ	0xFE8
 16425                           postdec1	equ	0xFE5
 16426                           fsr1h	equ	0xFE2
 16427                           fsr1l	equ	0xFE1
 16428                           indf2	equ	0xFDF
 16429                           postinc2	equ	0xFDE
 16430                           postdec2	equ	0xFDD
 16431                           fsr2h	equ	0xFDA
 16432                           fsr2l	equ	0xFD9
 16433                           status	equ	0xFD8
 16434                           
 16435 ;; *************** function i2_change_state_to_menu_22 *****************
 16436 ;; Defined at:
 16437 ;;		line 496 in file "UI.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;		None
 16440 ;; Auto vars:     Size  Location     Type
 16441 ;;		None
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  1    wreg      void 
 16444 ;; Registers used:
 16445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : 0/0
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16455 ;;Total ram usage:        0 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    3
 16458 ;; This function calls:
 16459 ;;		i2_lcdInst
 16460 ;;		i2_printf
 16461 ;; This function is called by:
 16462 ;;		_updateMenu
 16463 ;;		_inputHandler
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           	psect	text61
 16468  003D9E                     __ptext61:
 16469                           	opt stack 0
 16470  003D9E                     i2_change_state_to_menu_22:
 16471                           	opt stack 19
 16472                           
 16473                           ;UI.c: 497: cur_state = 22;
 16474                           
 16475                           ;incstack = 0
 16476  003D9E  0E00               	movlw	0
 16477  003DA0  0100               	movlb	0	; () banked
 16478  003DA2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16479  003DA4  0E16               	movlw	22
 16480  003DA6  6FDE               	movwf	_cur_state& (0+255),b
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;UI.c: 499: lcdInst(0b10000000);;
 16484  003DA8  0E80               	movlw	128
 16485  003DAA  ECF0  F020         	call	i2_lcdInst
 16486                           
 16487                           ;UI.c: 500: printf("2. SORT        <");
 16488  003DAE  0EED               	movlw	low STR_34
 16489  003DB0  6E0D               	movwf	i2printf@f,c
 16490  003DB2  0EFD               	movlw	high STR_34
 16491  003DB4  6E0E               	movwf	i2printf@f+1,c
 16492  003DB6  ECB8  F00A         	call	i2_printf	;wreg free
 16493                           
 16494                           ;UI.c: 501: lcdInst(0b11000000);;
 16495  003DBA  0EC0               	movlw	192
 16496  003DBC  ECF0  F020         	call	i2_lcdInst
 16497                           
 16498                           ;UI.c: 502: printf("3. LOGS         ");
 16499  003DC0  0E32               	movlw	low STR_36
 16500  003DC2  6E0D               	movwf	i2printf@f,c
 16501  003DC4  0EFD               	movlw	high STR_36
 16502  003DC6  6E0E               	movwf	i2printf@f+1,c
 16503  003DC8  ECB8  F00A         	call	i2_printf	;wreg free
 16504  003DCC  0012               	return		;funcret
 16505  003DCE                     __end_ofi2_change_state_to_menu_22:
 16506                           	opt stack 0
 16507                           pclatu	equ	0xFFB
 16508                           pclath	equ	0xFFA
 16509                           tblptru	equ	0xFF8
 16510                           tblptrh	equ	0xFF7
 16511                           tblptrl	equ	0xFF6
 16512                           tablat	equ	0xFF5
 16513                           prodh	equ	0xFF4
 16514                           prodl	equ	0xFF3
 16515                           intcon	equ	0xFF2
 16516                           intcon2	equ	0xFF1
 16517                           intcon3	equ	0xFF0
 16518                           indf0	equ	0xFEF
 16519                           postinc0	equ	0xFEE
 16520                           fsr0h	equ	0xFEA
 16521                           fsr0l	equ	0xFE9
 16522                           wreg	equ	0xFE8
 16523                           postdec1	equ	0xFE5
 16524                           fsr1h	equ	0xFE2
 16525                           fsr1l	equ	0xFE1
 16526                           indf2	equ	0xFDF
 16527                           postinc2	equ	0xFDE
 16528                           postdec2	equ	0xFDD
 16529                           fsr2h	equ	0xFDA
 16530                           fsr2l	equ	0xFD9
 16531                           status	equ	0xFD8
 16532                           
 16533 ;; *************** function i2_change_state_to_menu_12 *****************
 16534 ;; Defined at:
 16535 ;;		line 488 in file "UI.c"
 16536 ;; Parameters:    Size  Location     Type
 16537 ;;		None
 16538 ;; Auto vars:     Size  Location     Type
 16539 ;;		None
 16540 ;; Return value:  Size  Location     Type
 16541 ;;                  1    wreg      void 
 16542 ;; Registers used:
 16543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16544 ;; Tracked objects:
 16545 ;;		On entry : 0/0
 16546 ;;		On exit  : 0/0
 16547 ;;		Unchanged: 0/0
 16548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16553 ;;Total ram usage:        0 bytes
 16554 ;; Hardware stack levels used:    1
 16555 ;; Hardware stack levels required when called:    3
 16556 ;; This function calls:
 16557 ;;		i2_lcdInst
 16558 ;;		i2_printf
 16559 ;; This function is called by:
 16560 ;;		_updateMenu
 16561 ;;		_inputHandler
 16562 ;; This function uses a non-reentrant model
 16563 ;;
 16564                           
 16565                           	psect	text62
 16566  003DCE                     __ptext62:
 16567                           	opt stack 0
 16568  003DCE                     i2_change_state_to_menu_12:
 16569                           	opt stack 19
 16570                           
 16571                           ;UI.c: 489: cur_state = 12;
 16572                           
 16573                           ;incstack = 0
 16574  003DCE  0E00               	movlw	0
 16575  003DD0  0100               	movlb	0	; () banked
 16576  003DD2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16577  003DD4  0E0C               	movlw	12
 16578  003DD6  6FDE               	movwf	_cur_state& (0+255),b
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;UI.c: 491: lcdInst(0b10000000);;
 16582  003DD8  0E80               	movlw	128
 16583  003DDA  ECF0  F020         	call	i2_lcdInst
 16584                           
 16585                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16586  003DDE  0E54               	movlw	low STR_33
 16587  003DE0  6E0D               	movwf	i2printf@f,c
 16588  003DE2  0EFD               	movlw	high STR_33
 16589  003DE4  6E0E               	movwf	i2printf@f+1,c
 16590  003DE6  ECB8  F00A         	call	i2_printf	;wreg free
 16591                           
 16592                           ;UI.c: 493: lcdInst(0b11000000);;
 16593  003DEA  0EC0               	movlw	192
 16594  003DEC  ECF0  F020         	call	i2_lcdInst
 16595                           
 16596                           ;UI.c: 494: printf("2. SORT        <");
 16597  003DF0  0EED               	movlw	low STR_34
 16598  003DF2  6E0D               	movwf	i2printf@f,c
 16599  003DF4  0EFD               	movlw	high STR_34
 16600  003DF6  6E0E               	movwf	i2printf@f+1,c
 16601  003DF8  ECB8  F00A         	call	i2_printf	;wreg free
 16602  003DFC  0012               	return		;funcret
 16603  003DFE                     __end_ofi2_change_state_to_menu_12:
 16604                           	opt stack 0
 16605                           pclatu	equ	0xFFB
 16606                           pclath	equ	0xFFA
 16607                           tblptru	equ	0xFF8
 16608                           tblptrh	equ	0xFF7
 16609                           tblptrl	equ	0xFF6
 16610                           tablat	equ	0xFF5
 16611                           prodh	equ	0xFF4
 16612                           prodl	equ	0xFF3
 16613                           intcon	equ	0xFF2
 16614                           intcon2	equ	0xFF1
 16615                           intcon3	equ	0xFF0
 16616                           indf0	equ	0xFEF
 16617                           postinc0	equ	0xFEE
 16618                           fsr0h	equ	0xFEA
 16619                           fsr0l	equ	0xFE9
 16620                           wreg	equ	0xFE8
 16621                           postdec1	equ	0xFE5
 16622                           fsr1h	equ	0xFE2
 16623                           fsr1l	equ	0xFE1
 16624                           indf2	equ	0xFDF
 16625                           postinc2	equ	0xFDE
 16626                           postdec2	equ	0xFDD
 16627                           fsr2h	equ	0xFDA
 16628                           fsr2l	equ	0xFD9
 16629                           status	equ	0xFD8
 16630                           
 16631 ;; *************** function _change_state_to_menu_23 *****************
 16632 ;; Defined at:
 16633 ;;		line 504 in file "UI.c"
 16634 ;; Parameters:    Size  Location     Type
 16635 ;;		None
 16636 ;; Auto vars:     Size  Location     Type
 16637 ;;		None
 16638 ;; Return value:  Size  Location     Type
 16639 ;;                  1    wreg      void 
 16640 ;; Registers used:
 16641 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16642 ;; Tracked objects:
 16643 ;;		On entry : 0/0
 16644 ;;		On exit  : 0/0
 16645 ;;		Unchanged: 0/0
 16646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;Total ram usage:        0 bytes
 16652 ;; Hardware stack levels used:    1
 16653 ;; Hardware stack levels required when called:    3
 16654 ;; This function calls:
 16655 ;;		i2_lcdInst
 16656 ;;		i2_printf
 16657 ;; This function is called by:
 16658 ;;		_updateMenu
 16659 ;;		_inputHandler
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text63
 16664  003DFE                     __ptext63:
 16665                           	opt stack 0
 16666  003DFE                     _change_state_to_menu_23:
 16667                           	opt stack 18
 16668                           
 16669                           ;UI.c: 505: cur_state = 23;
 16670                           
 16671                           ;incstack = 0
 16672  003DFE  0E00               	movlw	0
 16673  003E00  0100               	movlb	0	; () banked
 16674  003E02  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16675  003E04  0E17               	movlw	23
 16676  003E06  6FDE               	movwf	_cur_state& (0+255),b
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;UI.c: 507: lcdInst(0b10000000);;
 16680  003E08  0E80               	movlw	128
 16681  003E0A  ECF0  F020         	call	i2_lcdInst
 16682                           
 16683                           ;UI.c: 508: printf("2. SORT         ");
 16684  003E0E  0E43               	movlw	low STR_32
 16685  003E10  6E0D               	movwf	i2printf@f,c
 16686  003E12  0EFD               	movlw	high STR_32
 16687  003E14  6E0E               	movwf	i2printf@f+1,c
 16688  003E16  ECB8  F00A         	call	i2_printf	;wreg free
 16689                           
 16690                           ;UI.c: 509: lcdInst(0b11000000);;
 16691  003E1A  0EC0               	movlw	192
 16692  003E1C  ECF0  F020         	call	i2_lcdInst
 16693                           
 16694                           ;UI.c: 510: printf("3. LOGS        <");
 16695  003E20  0EDC               	movlw	low STR_38
 16696  003E22  6E0D               	movwf	i2printf@f,c
 16697  003E24  0EFD               	movlw	high STR_38
 16698  003E26  6E0E               	movwf	i2printf@f+1,c
 16699  003E28  ECB8  F00A         	call	i2_printf	;wreg free
 16700  003E2C  0012               	return		;funcret
 16701  003E2E                     __end_of_change_state_to_menu_23:
 16702                           	opt stack 0
 16703                           pclatu	equ	0xFFB
 16704                           pclath	equ	0xFFA
 16705                           tblptru	equ	0xFF8
 16706                           tblptrh	equ	0xFF7
 16707                           tblptrl	equ	0xFF6
 16708                           tablat	equ	0xFF5
 16709                           prodh	equ	0xFF4
 16710                           prodl	equ	0xFF3
 16711                           intcon	equ	0xFF2
 16712                           intcon2	equ	0xFF1
 16713                           intcon3	equ	0xFF0
 16714                           indf0	equ	0xFEF
 16715                           postinc0	equ	0xFEE
 16716                           fsr0h	equ	0xFEA
 16717                           fsr0l	equ	0xFE9
 16718                           wreg	equ	0xFE8
 16719                           postdec1	equ	0xFE5
 16720                           fsr1h	equ	0xFE2
 16721                           fsr1l	equ	0xFE1
 16722                           indf2	equ	0xFDF
 16723                           postinc2	equ	0xFDE
 16724                           postdec2	equ	0xFDD
 16725                           fsr2h	equ	0xFDA
 16726                           fsr2l	equ	0xFD9
 16727                           status	equ	0xFD8
 16728                           
 16729 ;; *************** function _change_state_to_menu_11 *****************
 16730 ;; Defined at:
 16731 ;;		line 480 in file "UI.c"
 16732 ;; Parameters:    Size  Location     Type
 16733 ;;		None
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;		None
 16736 ;; Return value:  Size  Location     Type
 16737 ;;                  1    wreg      void 
 16738 ;; Registers used:
 16739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16749 ;;Total ram usage:        0 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:    3
 16752 ;; This function calls:
 16753 ;;		i2_lcdInst
 16754 ;;		i2_printf
 16755 ;; This function is called by:
 16756 ;;		_updateMenu
 16757 ;;		_inputHandler
 16758 ;; This function uses a non-reentrant model
 16759 ;;
 16760                           
 16761                           	psect	text64
 16762  003E2E                     __ptext64:
 16763                           	opt stack 0
 16764  003E2E                     _change_state_to_menu_11:
 16765                           	opt stack 18
 16766                           
 16767                           ;UI.c: 481: cur_state = 11;
 16768                           
 16769                           ;incstack = 0
 16770  003E2E  0E00               	movlw	0
 16771  003E30  0100               	movlb	0	; () banked
 16772  003E32  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16773  003E34  0E0B               	movlw	11
 16774  003E36  6FDE               	movwf	_cur_state& (0+255),b
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;UI.c: 483: lcdInst(0b10000000);;
 16778  003E38  0E80               	movlw	128
 16779  003E3A  ECF0  F020         	call	i2_lcdInst
 16780                           
 16781                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16782  003E3E  0EFE               	movlw	low STR_31
 16783  003E40  6E0D               	movwf	i2printf@f,c
 16784  003E42  0EFD               	movlw	high STR_31
 16785  003E44  6E0E               	movwf	i2printf@f+1,c
 16786  003E46  ECB8  F00A         	call	i2_printf	;wreg free
 16787                           
 16788                           ;UI.c: 485: lcdInst(0b11000000);;
 16789  003E4A  0EC0               	movlw	192
 16790  003E4C  ECF0  F020         	call	i2_lcdInst
 16791                           
 16792                           ;UI.c: 486: printf("2. SORT         ");
 16793  003E50  0E43               	movlw	low STR_32
 16794  003E52  6E0D               	movwf	i2printf@f,c
 16795  003E54  0EFD               	movlw	high STR_32
 16796  003E56  6E0E               	movwf	i2printf@f+1,c
 16797  003E58  ECB8  F00A         	call	i2_printf	;wreg free
 16798  003E5C  0012               	return		;funcret
 16799  003E5E                     __end_of_change_state_to_menu_11:
 16800                           	opt stack 0
 16801                           pclatu	equ	0xFFB
 16802                           pclath	equ	0xFFA
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           intcon	equ	0xFF2
 16810                           intcon2	equ	0xFF1
 16811                           intcon3	equ	0xFF0
 16812                           indf0	equ	0xFEF
 16813                           postinc0	equ	0xFEE
 16814                           fsr0h	equ	0xFEA
 16815                           fsr0l	equ	0xFE9
 16816                           wreg	equ	0xFE8
 16817                           postdec1	equ	0xFE5
 16818                           fsr1h	equ	0xFE2
 16819                           fsr1l	equ	0xFE1
 16820                           indf2	equ	0xFDF
 16821                           postinc2	equ	0xFDE
 16822                           postdec2	equ	0xFDD
 16823                           fsr2h	equ	0xFDA
 16824                           fsr2l	equ	0xFD9
 16825                           status	equ	0xFD8
 16826                           
 16827 ;; *************** function _change_state_to_logs_34 *****************
 16828 ;; Defined at:
 16829 ;;		line 547 in file "UI.c"
 16830 ;; Parameters:    Size  Location     Type
 16831 ;;		None
 16832 ;; Auto vars:     Size  Location     Type
 16833 ;;		None
 16834 ;; Return value:  Size  Location     Type
 16835 ;;                  1    wreg      void 
 16836 ;; Registers used:
 16837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16838 ;; Tracked objects:
 16839 ;;		On entry : 0/0
 16840 ;;		On exit  : 0/0
 16841 ;;		Unchanged: 0/0
 16842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16847 ;;Total ram usage:        0 bytes
 16848 ;; Hardware stack levels used:    1
 16849 ;; Hardware stack levels required when called:    3
 16850 ;; This function calls:
 16851 ;;		i2_lcdInst
 16852 ;;		i2_printf
 16853 ;; This function is called by:
 16854 ;;		_updateMenu
 16855 ;;		_inputHandler
 16856 ;; This function uses a non-reentrant model
 16857 ;;
 16858                           
 16859                           	psect	text65
 16860  003E5E                     __ptext65:
 16861                           	opt stack 0
 16862  003E5E                     _change_state_to_logs_34:
 16863                           	opt stack 18
 16864                           
 16865                           ;UI.c: 548: cur_state = 1034;
 16866                           
 16867                           ;incstack = 0
 16868  003E5E  0E04               	movlw	4
 16869  003E60  0100               	movlb	0	; () banked
 16870  003E62  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16871  003E64  0E0A               	movlw	10
 16872  003E66  6FDE               	movwf	_cur_state& (0+255),b
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;UI.c: 549: lcdInst(0b10000000);;
 16876  003E68  0E80               	movlw	128
 16877  003E6A  ECF0  F020         	call	i2_lcdInst
 16878                           
 16879                           ;UI.c: 550: printf("LOG 3           ");
 16880  003E6E  0E10               	movlw	low STR_44
 16881  003E70  6E0D               	movwf	i2printf@f,c
 16882  003E72  0EFD               	movlw	high STR_44
 16883  003E74  6E0E               	movwf	i2printf@f+1,c
 16884  003E76  ECB8  F00A         	call	i2_printf	;wreg free
 16885                           
 16886                           ;UI.c: 551: lcdInst(0b11000000);;
 16887  003E7A  0EC0               	movlw	192
 16888  003E7C  ECF0  F020         	call	i2_lcdInst
 16889                           
 16890                           ;UI.c: 552: printf("LOG 4          <");
 16891  003E80  0ECB               	movlw	low STR_50
 16892  003E82  6E0D               	movwf	i2printf@f,c
 16893  003E84  0EFD               	movlw	high STR_50
 16894  003E86  6E0E               	movwf	i2printf@f+1,c
 16895  003E88  ECB8  F00A         	call	i2_printf	;wreg free
 16896  003E8C  0012               	return		;funcret
 16897  003E8E                     __end_of_change_state_to_logs_34:
 16898                           	opt stack 0
 16899                           pclatu	equ	0xFFB
 16900                           pclath	equ	0xFFA
 16901                           tblptru	equ	0xFF8
 16902                           tblptrh	equ	0xFF7
 16903                           tblptrl	equ	0xFF6
 16904                           tablat	equ	0xFF5
 16905                           prodh	equ	0xFF4
 16906                           prodl	equ	0xFF3
 16907                           intcon	equ	0xFF2
 16908                           intcon2	equ	0xFF1
 16909                           intcon3	equ	0xFF0
 16910                           indf0	equ	0xFEF
 16911                           postinc0	equ	0xFEE
 16912                           fsr0h	equ	0xFEA
 16913                           fsr0l	equ	0xFE9
 16914                           wreg	equ	0xFE8
 16915                           postdec1	equ	0xFE5
 16916                           fsr1h	equ	0xFE2
 16917                           fsr1l	equ	0xFE1
 16918                           indf2	equ	0xFDF
 16919                           postinc2	equ	0xFDE
 16920                           postdec2	equ	0xFDD
 16921                           fsr2h	equ	0xFDA
 16922                           fsr2l	equ	0xFD9
 16923                           status	equ	0xFD8
 16924                           
 16925 ;; *************** function _change_state_to_logs_33 *****************
 16926 ;; Defined at:
 16927 ;;		line 540 in file "UI.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;		None
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;		None
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  1    wreg      void 
 16934 ;; Registers used:
 16935 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;Total ram usage:        0 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    3
 16948 ;; This function calls:
 16949 ;;		i2_lcdInst
 16950 ;;		i2_printf
 16951 ;; This function is called by:
 16952 ;;		_updateMenu
 16953 ;;		_inputHandler
 16954 ;; This function uses a non-reentrant model
 16955 ;;
 16956                           
 16957                           	psect	text66
 16958  003E8E                     __ptext66:
 16959                           	opt stack 0
 16960  003E8E                     _change_state_to_logs_33:
 16961                           	opt stack 18
 16962                           
 16963                           ;UI.c: 541: cur_state = 1033;
 16964                           
 16965                           ;incstack = 0
 16966  003E8E  0E04               	movlw	4
 16967  003E90  0100               	movlb	0	; () banked
 16968  003E92  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16969  003E94  0E09               	movlw	9
 16970  003E96  6FDE               	movwf	_cur_state& (0+255),b
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;UI.c: 542: lcdInst(0b10000000);;
 16974  003E98  0E80               	movlw	128
 16975  003E9A  ECF0  F020         	call	i2_lcdInst
 16976                           
 16977                           ;UI.c: 543: printf("LOG 3          <");
 16978  003E9E  0EBA               	movlw	low STR_46
 16979  003EA0  6E0D               	movwf	i2printf@f,c
 16980  003EA2  0EFD               	movlw	high STR_46
 16981  003EA4  6E0E               	movwf	i2printf@f+1,c
 16982  003EA6  ECB8  F00A         	call	i2_printf	;wreg free
 16983                           
 16984                           ;UI.c: 544: lcdInst(0b11000000);;
 16985  003EAA  0EC0               	movlw	192
 16986  003EAC  ECF0  F020         	call	i2_lcdInst
 16987                           
 16988                           ;UI.c: 545: printf("LOG 4           ");
 16989  003EB0  0E21               	movlw	low STR_48
 16990  003EB2  6E0D               	movwf	i2printf@f,c
 16991  003EB4  0EFD               	movlw	high STR_48
 16992  003EB6  6E0E               	movwf	i2printf@f+1,c
 16993  003EB8  ECB8  F00A         	call	i2_printf	;wreg free
 16994  003EBC  0012               	return		;funcret
 16995  003EBE                     __end_of_change_state_to_logs_33:
 16996                           	opt stack 0
 16997                           pclatu	equ	0xFFB
 16998                           pclath	equ	0xFFA
 16999                           tblptru	equ	0xFF8
 17000                           tblptrh	equ	0xFF7
 17001                           tblptrl	equ	0xFF6
 17002                           tablat	equ	0xFF5
 17003                           prodh	equ	0xFF4
 17004                           prodl	equ	0xFF3
 17005                           intcon	equ	0xFF2
 17006                           intcon2	equ	0xFF1
 17007                           intcon3	equ	0xFF0
 17008                           indf0	equ	0xFEF
 17009                           postinc0	equ	0xFEE
 17010                           fsr0h	equ	0xFEA
 17011                           fsr0l	equ	0xFE9
 17012                           wreg	equ	0xFE8
 17013                           postdec1	equ	0xFE5
 17014                           fsr1h	equ	0xFE2
 17015                           fsr1l	equ	0xFE1
 17016                           indf2	equ	0xFDF
 17017                           postinc2	equ	0xFDE
 17018                           postdec2	equ	0xFDD
 17019                           fsr2h	equ	0xFDA
 17020                           fsr2l	equ	0xFD9
 17021                           status	equ	0xFD8
 17022                           
 17023 ;; *************** function _change_state_to_logs_23 *****************
 17024 ;; Defined at:
 17025 ;;		line 533 in file "UI.c"
 17026 ;; Parameters:    Size  Location     Type
 17027 ;;		None
 17028 ;; Auto vars:     Size  Location     Type
 17029 ;;		None
 17030 ;; Return value:  Size  Location     Type
 17031 ;;                  1    wreg      void 
 17032 ;; Registers used:
 17033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17034 ;; Tracked objects:
 17035 ;;		On entry : 0/0
 17036 ;;		On exit  : 0/0
 17037 ;;		Unchanged: 0/0
 17038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17043 ;;Total ram usage:        0 bytes
 17044 ;; Hardware stack levels used:    1
 17045 ;; Hardware stack levels required when called:    3
 17046 ;; This function calls:
 17047 ;;		i2_lcdInst
 17048 ;;		i2_printf
 17049 ;; This function is called by:
 17050 ;;		_updateMenu
 17051 ;;		_inputHandler
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           	psect	text67
 17056  003F7C                     __ptext67:
 17057                           	opt stack 0
 17058  003F7C                     _change_state_to_logs_23:
 17059                           	opt stack 18
 17060                           
 17061                           ;UI.c: 534: cur_state = 1023;
 17062                           
 17063                           ;incstack = 0
 17064  003F7C  0E03               	movlw	3
 17065  003F7E  0100               	movlb	0	; () banked
 17066  003F80  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17067  003F82  69DE               	setf	_cur_state& (0+255),b
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;UI.c: 535: lcdInst(0b10000000);;
 17071  003F84  0E80               	movlw	128
 17072  003F86  ECF0  F020         	call	i2_lcdInst
 17073                           
 17074                           ;UI.c: 536: printf("LOG 2           ");
 17075  003F8A  0EFF               	movlw	low STR_40
 17076  003F8C  6E0D               	movwf	i2printf@f,c
 17077  003F8E  0EFC               	movlw	high STR_40
 17078  003F90  6E0E               	movwf	i2printf@f+1,c
 17079  003F92  ECB8  F00A         	call	i2_printf	;wreg free
 17080                           
 17081                           ;UI.c: 537: lcdInst(0b11000000);;
 17082  003F96  0EC0               	movlw	192
 17083  003F98  ECF0  F020         	call	i2_lcdInst
 17084                           
 17085                           ;UI.c: 538: printf("LOG 3          <");
 17086  003F9C  0EBA               	movlw	low STR_46
 17087  003F9E  6E0D               	movwf	i2printf@f,c
 17088  003FA0  0EFD               	movlw	high STR_46
 17089  003FA2  6E0E               	movwf	i2printf@f+1,c
 17090  003FA4  ECB8  F00A         	call	i2_printf	;wreg free
 17091  003FA8  0012               	return		;funcret
 17092  003FAA                     __end_of_change_state_to_logs_23:
 17093                           	opt stack 0
 17094                           pclatu	equ	0xFFB
 17095                           pclath	equ	0xFFA
 17096                           tblptru	equ	0xFF8
 17097                           tblptrh	equ	0xFF7
 17098                           tblptrl	equ	0xFF6
 17099                           tablat	equ	0xFF5
 17100                           prodh	equ	0xFF4
 17101                           prodl	equ	0xFF3
 17102                           intcon	equ	0xFF2
 17103                           intcon2	equ	0xFF1
 17104                           intcon3	equ	0xFF0
 17105                           indf0	equ	0xFEF
 17106                           postinc0	equ	0xFEE
 17107                           fsr0h	equ	0xFEA
 17108                           fsr0l	equ	0xFE9
 17109                           wreg	equ	0xFE8
 17110                           postdec1	equ	0xFE5
 17111                           fsr1h	equ	0xFE2
 17112                           fsr1l	equ	0xFE1
 17113                           indf2	equ	0xFDF
 17114                           postinc2	equ	0xFDE
 17115                           postdec2	equ	0xFDD
 17116                           fsr2h	equ	0xFDA
 17117                           fsr2l	equ	0xFD9
 17118                           status	equ	0xFD8
 17119                           
 17120 ;; *************** function _change_state_to_logs_22 *****************
 17121 ;; Defined at:
 17122 ;;		line 526 in file "UI.c"
 17123 ;; Parameters:    Size  Location     Type
 17124 ;;		None
 17125 ;; Auto vars:     Size  Location     Type
 17126 ;;		None
 17127 ;; Return value:  Size  Location     Type
 17128 ;;                  1    wreg      void 
 17129 ;; Registers used:
 17130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17131 ;; Tracked objects:
 17132 ;;		On entry : 0/0
 17133 ;;		On exit  : 0/0
 17134 ;;		Unchanged: 0/0
 17135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17140 ;;Total ram usage:        0 bytes
 17141 ;; Hardware stack levels used:    1
 17142 ;; Hardware stack levels required when called:    3
 17143 ;; This function calls:
 17144 ;;		i2_lcdInst
 17145 ;;		i2_printf
 17146 ;; This function is called by:
 17147 ;;		_updateMenu
 17148 ;;		_inputHandler
 17149 ;; This function uses a non-reentrant model
 17150 ;;
 17151                           
 17152                           	psect	text68
 17153  003EBE                     __ptext68:
 17154                           	opt stack 0
 17155  003EBE                     _change_state_to_logs_22:
 17156                           	opt stack 18
 17157                           
 17158                           ;UI.c: 527: cur_state = 1022;
 17159                           
 17160                           ;incstack = 0
 17161  003EBE  0E03               	movlw	3
 17162  003EC0  0100               	movlb	0	; () banked
 17163  003EC2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17164  003EC4  0EFE               	movlw	254
 17165  003EC6  6FDE               	movwf	_cur_state& (0+255),b
 17166                           
 17167                           ; BSR set to: 0
 17168                           ;UI.c: 528: lcdInst(0b10000000);;
 17169  003EC8  0E80               	movlw	128
 17170  003ECA  ECF0  F020         	call	i2_lcdInst
 17171                           
 17172                           ;UI.c: 529: printf("LOG 2          <");
 17173  003ECE  0EA9               	movlw	low STR_42
 17174  003ED0  6E0D               	movwf	i2printf@f,c
 17175  003ED2  0EFD               	movlw	high STR_42
 17176  003ED4  6E0E               	movwf	i2printf@f+1,c
 17177  003ED6  ECB8  F00A         	call	i2_printf	;wreg free
 17178                           
 17179                           ;UI.c: 530: lcdInst(0b11000000);;
 17180  003EDA  0EC0               	movlw	192
 17181  003EDC  ECF0  F020         	call	i2_lcdInst
 17182                           
 17183                           ;UI.c: 531: printf("LOG 3           ");
 17184  003EE0  0E10               	movlw	low STR_44
 17185  003EE2  6E0D               	movwf	i2printf@f,c
 17186  003EE4  0EFD               	movlw	high STR_44
 17187  003EE6  6E0E               	movwf	i2printf@f+1,c
 17188  003EE8  ECB8  F00A         	call	i2_printf	;wreg free
 17189  003EEC  0012               	return		;funcret
 17190  003EEE                     __end_of_change_state_to_logs_22:
 17191                           	opt stack 0
 17192                           pclatu	equ	0xFFB
 17193                           pclath	equ	0xFFA
 17194                           tblptru	equ	0xFF8
 17195                           tblptrh	equ	0xFF7
 17196                           tblptrl	equ	0xFF6
 17197                           tablat	equ	0xFF5
 17198                           prodh	equ	0xFF4
 17199                           prodl	equ	0xFF3
 17200                           intcon	equ	0xFF2
 17201                           intcon2	equ	0xFF1
 17202                           intcon3	equ	0xFF0
 17203                           indf0	equ	0xFEF
 17204                           postinc0	equ	0xFEE
 17205                           fsr0h	equ	0xFEA
 17206                           fsr0l	equ	0xFE9
 17207                           wreg	equ	0xFE8
 17208                           postdec1	equ	0xFE5
 17209                           fsr1h	equ	0xFE2
 17210                           fsr1l	equ	0xFE1
 17211                           indf2	equ	0xFDF
 17212                           postinc2	equ	0xFDE
 17213                           postdec2	equ	0xFDD
 17214                           fsr2h	equ	0xFDA
 17215                           fsr2l	equ	0xFD9
 17216                           status	equ	0xFD8
 17217                           
 17218 ;; *************** function _change_state_to_logs_12 *****************
 17219 ;; Defined at:
 17220 ;;		line 519 in file "UI.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;		None
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;		None
 17225 ;; Return value:  Size  Location     Type
 17226 ;;                  1    wreg      void 
 17227 ;; Registers used:
 17228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17229 ;; Tracked objects:
 17230 ;;		On entry : 0/0
 17231 ;;		On exit  : 0/0
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;Total ram usage:        0 bytes
 17239 ;; Hardware stack levels used:    1
 17240 ;; Hardware stack levels required when called:    3
 17241 ;; This function calls:
 17242 ;;		i2_lcdInst
 17243 ;;		i2_printf
 17244 ;; This function is called by:
 17245 ;;		_updateMenu
 17246 ;;		_inputHandler
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text69
 17251  003EEE                     __ptext69:
 17252                           	opt stack 0
 17253  003EEE                     _change_state_to_logs_12:
 17254                           	opt stack 18
 17255                           
 17256                           ;UI.c: 520: cur_state = 1012;
 17257                           
 17258                           ;incstack = 0
 17259  003EEE  0E03               	movlw	3
 17260  003EF0  0100               	movlb	0	; () banked
 17261  003EF2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17262  003EF4  0EF4               	movlw	244
 17263  003EF6  6FDE               	movwf	_cur_state& (0+255),b
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;UI.c: 521: lcdInst(0b10000000);;
 17267  003EF8  0E80               	movlw	128
 17268  003EFA  ECF0  F020         	call	i2_lcdInst
 17269                           
 17270                           ;UI.c: 522: printf("LOG 1           ");
 17271  003EFE  0EEE               	movlw	low STR_41
 17272  003F00  6E0D               	movwf	i2printf@f,c
 17273  003F02  0EFC               	movlw	high STR_41
 17274  003F04  6E0E               	movwf	i2printf@f+1,c
 17275  003F06  ECB8  F00A         	call	i2_printf	;wreg free
 17276                           
 17277                           ;UI.c: 523: lcdInst(0b11000000);;
 17278  003F0A  0EC0               	movlw	192
 17279  003F0C  ECF0  F020         	call	i2_lcdInst
 17280                           
 17281                           ;UI.c: 524: printf("LOG 2          <");
 17282  003F10  0EA9               	movlw	low STR_42
 17283  003F12  6E0D               	movwf	i2printf@f,c
 17284  003F14  0EFD               	movlw	high STR_42
 17285  003F16  6E0E               	movwf	i2printf@f+1,c
 17286  003F18  ECB8  F00A         	call	i2_printf	;wreg free
 17287  003F1C  0012               	return		;funcret
 17288  003F1E                     __end_of_change_state_to_logs_12:
 17289                           	opt stack 0
 17290                           pclatu	equ	0xFFB
 17291                           pclath	equ	0xFFA
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           intcon2	equ	0xFF1
 17300                           intcon3	equ	0xFF0
 17301                           indf0	equ	0xFEF
 17302                           postinc0	equ	0xFEE
 17303                           fsr0h	equ	0xFEA
 17304                           fsr0l	equ	0xFE9
 17305                           wreg	equ	0xFE8
 17306                           postdec1	equ	0xFE5
 17307                           fsr1h	equ	0xFE2
 17308                           fsr1l	equ	0xFE1
 17309                           indf2	equ	0xFDF
 17310                           postinc2	equ	0xFDE
 17311                           postdec2	equ	0xFDD
 17312                           fsr2h	equ	0xFDA
 17313                           fsr2l	equ	0xFD9
 17314                           status	equ	0xFD8
 17315                           
 17316 ;; *************** function _change_state_to_logs_11 *****************
 17317 ;; Defined at:
 17318 ;;		line 512 in file "UI.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  1    wreg      void 
 17325 ;; Registers used:
 17326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;Total ram usage:        0 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; Hardware stack levels required when called:    3
 17339 ;; This function calls:
 17340 ;;		i2_lcdInst
 17341 ;;		i2_printf
 17342 ;; This function is called by:
 17343 ;;		_updateMenu
 17344 ;;		_inputHandler
 17345 ;; This function uses a non-reentrant model
 17346 ;;
 17347                           
 17348                           	psect	text70
 17349  003F1E                     __ptext70:
 17350                           	opt stack 0
 17351  003F1E                     _change_state_to_logs_11:
 17352                           	opt stack 18
 17353                           
 17354                           ;UI.c: 513: cur_state = 1011;
 17355                           
 17356                           ;incstack = 0
 17357  003F1E  0E03               	movlw	3
 17358  003F20  0100               	movlb	0	; () banked
 17359  003F22  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17360  003F24  0EF3               	movlw	243
 17361  003F26  6FDE               	movwf	_cur_state& (0+255),b
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;UI.c: 514: lcdInst(0b10000000);;
 17365  003F28  0E80               	movlw	128
 17366  003F2A  ECF0  F020         	call	i2_lcdInst
 17367                           
 17368                           ;UI.c: 515: printf("LOG 1          <");
 17369  003F2E  0E98               	movlw	low STR_39
 17370  003F30  6E0D               	movwf	i2printf@f,c
 17371  003F32  0EFD               	movlw	high STR_39
 17372  003F34  6E0E               	movwf	i2printf@f+1,c
 17373  003F36  ECB8  F00A         	call	i2_printf	;wreg free
 17374                           
 17375                           ;UI.c: 516: lcdInst(0b11000000);;
 17376  003F3A  0EC0               	movlw	192
 17377  003F3C  ECF0  F020         	call	i2_lcdInst
 17378                           
 17379                           ;UI.c: 517: printf("LOG 2           ");
 17380  003F40  0EFF               	movlw	low STR_40
 17381  003F42  6E0D               	movwf	i2printf@f,c
 17382  003F44  0EFC               	movlw	high STR_40
 17383  003F46  6E0E               	movwf	i2printf@f+1,c
 17384  003F48  ECB8  F00A         	call	i2_printf	;wreg free
 17385  003F4C  0012               	return		;funcret
 17386  003F4E                     __end_of_change_state_to_logs_11:
 17387                           	opt stack 0
 17388                           pclatu	equ	0xFFB
 17389                           pclath	equ	0xFFA
 17390                           tblptru	equ	0xFF8
 17391                           tblptrh	equ	0xFF7
 17392                           tblptrl	equ	0xFF6
 17393                           tablat	equ	0xFF5
 17394                           prodh	equ	0xFF4
 17395                           prodl	equ	0xFF3
 17396                           intcon	equ	0xFF2
 17397                           intcon2	equ	0xFF1
 17398                           intcon3	equ	0xFF0
 17399                           indf0	equ	0xFEF
 17400                           postinc0	equ	0xFEE
 17401                           fsr0h	equ	0xFEA
 17402                           fsr0l	equ	0xFE9
 17403                           wreg	equ	0xFE8
 17404                           postdec1	equ	0xFE5
 17405                           fsr1h	equ	0xFE2
 17406                           fsr1l	equ	0xFE1
 17407                           indf2	equ	0xFDF
 17408                           postinc2	equ	0xFDE
 17409                           postdec2	equ	0xFDD
 17410                           fsr2h	equ	0xFDA
 17411                           fsr2l	equ	0xFD9
 17412                           status	equ	0xFD8
 17413                           
 17414 ;; *************** function _dispLogs *****************
 17415 ;; Defined at:
 17416 ;;		line 465 in file "UI.c"
 17417 ;; Parameters:    Size  Location     Type
 17418 ;;  myLog           2   17[COMRAM] int 
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;		None
 17421 ;; Return value:  Size  Location     Type
 17422 ;;                  1    wreg      void 
 17423 ;; Registers used:
 17424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17425 ;; Tracked objects:
 17426 ;;		On entry : 0/0
 17427 ;;		On exit  : 0/0
 17428 ;;		Unchanged: 0/0
 17429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17434 ;;Total ram usage:        2 bytes
 17435 ;; Hardware stack levels used:    1
 17436 ;; Hardware stack levels required when called:    2
 17437 ;; This function calls:
 17438 ;;		_retrieveLog
 17439 ;; This function is called by:
 17440 ;;		_updateMenu
 17441 ;; This function uses a non-reentrant model
 17442 ;;
 17443                           
 17444                           	psect	text71
 17445  0040C4                     __ptext71:
 17446                           	opt stack 0
 17447  0040C4                     _dispLogs:
 17448                           	opt stack 20
 17449                           
 17450                           ;UI.c: 466: logstate = 1;
 17451                           
 17452                           ;incstack = 0
 17453  0040C4  0E00               	movlw	0
 17454  0040C6  0100               	movlb	0	; () banked
 17455  0040C8  6FF7               	movwf	(_logstate+1)& (0+255),b
 17456  0040CA  0E01               	movlw	1
 17457  0040CC  6FF6               	movwf	_logstate& (0+255),b
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;UI.c: 467: log = myLog;
 17461  0040CE  C012  F0E6         	movff	dispLogs@myLog,_log
 17462  0040D2  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;UI.c: 468: retrieveLog(myLog - 1);
 17466  0040D6  0EFF               	movlw	255
 17467  0040D8  2412               	addwf	dispLogs@myLog,w,c
 17468  0040DA  6E07               	movwf	retrieveLog@logNum,c
 17469  0040DC  0EFF               	movlw	255
 17470  0040DE  2013               	addwfc	dispLogs@myLog+1,w,c
 17471  0040E0  6E08               	movwf	retrieveLog@logNum+1,c
 17472  0040E2  EC89  F015         	call	_retrieveLog	;wreg free
 17473  0040E6  0012               	return		;funcret
 17474  0040E8                     __end_of_dispLogs:
 17475                           	opt stack 0
 17476                           pclatu	equ	0xFFB
 17477                           pclath	equ	0xFFA
 17478                           tblptru	equ	0xFF8
 17479                           tblptrh	equ	0xFF7
 17480                           tblptrl	equ	0xFF6
 17481                           tablat	equ	0xFF5
 17482                           prodh	equ	0xFF4
 17483                           prodl	equ	0xFF3
 17484                           intcon	equ	0xFF2
 17485                           intcon2	equ	0xFF1
 17486                           intcon3	equ	0xFF0
 17487                           indf0	equ	0xFEF
 17488                           postinc0	equ	0xFEE
 17489                           fsr0h	equ	0xFEA
 17490                           fsr0l	equ	0xFE9
 17491                           wreg	equ	0xFE8
 17492                           postdec1	equ	0xFE5
 17493                           fsr1h	equ	0xFE2
 17494                           fsr1l	equ	0xFE1
 17495                           indf2	equ	0xFDF
 17496                           postinc2	equ	0xFDE
 17497                           postdec2	equ	0xFDD
 17498                           fsr2h	equ	0xFDA
 17499                           fsr2l	equ	0xFD9
 17500                           status	equ	0xFD8
 17501                           
 17502 ;; *************** function _retrieveLog *****************
 17503 ;; Defined at:
 17504 ;;		line 134 in file "EEPROM.c"
 17505 ;; Parameters:    Size  Location     Type
 17506 ;;  logNum          2    6[COMRAM] int 
 17507 ;; Auto vars:     Size  Location     Type
 17508 ;;  i               2   13[COMRAM] int 
 17509 ;;  addr            2   15[COMRAM] unsigned short 
 17510 ;;  byte3           1   12[COMRAM] unsigned char 
 17511 ;;  byte2           1   11[COMRAM] unsigned char 
 17512 ;;  byte1           1   10[COMRAM] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  1    wreg      void 
 17515 ;; Registers used:
 17516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:       11 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    1
 17529 ;; This function calls:
 17530 ;;		i2_EEPROM_read
 17531 ;;		i2___wmul
 17532 ;; This function is called by:
 17533 ;;		_dispLogs
 17534 ;; This function uses a non-reentrant model
 17535 ;;
 17536                           
 17537                           	psect	text72
 17538  002B12                     __ptext72:
 17539                           	opt stack 0
 17540  002B12                     _retrieveLog:
 17541                           	opt stack 20
 17542                           
 17543                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17544                           
 17545                           ;incstack = 0
 17546  002B12  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17547  002B16  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17548  002B1A  0E00               	movlw	0
 17549  002B1C  6E04               	movwf	i2___wmul@multiplicand+1,c
 17550  002B1E  0E0B               	movlw	11
 17551  002B20  6E03               	movwf	i2___wmul@multiplicand,c
 17552  002B22  EC2A  F020         	call	i2___wmul	;wreg free
 17553  002B26  0E01               	movlw	1
 17554  002B28  2401               	addwf	?i2___wmul,w,c
 17555  002B2A  6E10               	movwf	retrieveLog@addr,c
 17556  002B2C  0E00               	movlw	0
 17557  002B2E  2002               	addwfc	?i2___wmul+1,w,c
 17558  002B30  6E11               	movwf	retrieveLog@addr+1,c
 17559                           
 17560                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17561  002B32  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17562  002B36  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17563  002B3A  ECBC  F020         	call	i2_EEPROM_read	;wreg free
 17564  002B3E  6E0B               	movwf	retrieveLog@byte1,c
 17565                           
 17566                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17567  002B40  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17568  002B44  0E80               	movlw	128
 17569  002B46  1609               	andwf	??_retrieveLog,f,c
 17570  002B48  5009               	movf	??_retrieveLog,w,c
 17571  002B4A  0100               	movlb	0	; () banked
 17572  002B4C  6FE8               	movwf	_log_completion& (0+255),b
 17573  002B4E  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17574                           
 17575                           ; BSR set to: 0
 17576                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17577  002B50  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17578  002B54  0E0F               	movlw	15
 17579  002B56  1609               	andwf	??_retrieveLog,f,c
 17580  002B58  5009               	movf	??_retrieveLog,w,c
 17581  002B5A  0100               	movlb	0	; () banked
 17582  002B5C  6FF2               	movwf	_log_count_total& (0+255),b
 17583  002B5E  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;EEPROM.c: 146: addr++;
 17587  002B60  4A10               	infsnz	retrieveLog@addr,f,c
 17588  002B62  2A11               	incf	retrieveLog@addr+1,f,c
 17589                           
 17590                           ; BSR set to: 0
 17591                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17592  002B64  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17593  002B68  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17594  002B6C  ECBC  F020         	call	i2_EEPROM_read	;wreg free
 17595  002B70  6E0C               	movwf	retrieveLog@byte2,c
 17596                           
 17597                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17598  002B72  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17599  002B76  0EF0               	movlw	240
 17600  002B78  1609               	andwf	??_retrieveLog,f,c
 17601  002B7A  5009               	movf	??_retrieveLog,w,c
 17602  002B7C  0100               	movlb	0	; () banked
 17603  002B7E  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17604  002B80  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17608  002B82  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17609  002B86  0E0F               	movlw	15
 17610  002B88  1609               	andwf	??_retrieveLog,f,c
 17611  002B8A  5009               	movf	??_retrieveLog,w,c
 17612  002B8C  0100               	movlb	0	; () banked
 17613  002B8E  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17614  002B90  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;EEPROM.c: 152: addr++;
 17618  002B92  4A10               	infsnz	retrieveLog@addr,f,c
 17619  002B94  2A11               	incf	retrieveLog@addr+1,f,c
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17623  002B96  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17624  002B9A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17625  002B9E  ECBC  F020         	call	i2_EEPROM_read	;wreg free
 17626  002BA2  6E0D               	movwf	retrieveLog@byte3,c
 17627                           
 17628                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17629  002BA4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17630  002BA8  0EF0               	movlw	240
 17631  002BAA  1609               	andwf	??_retrieveLog,f,c
 17632  002BAC  5009               	movf	??_retrieveLog,w,c
 17633  002BAE  0100               	movlb	0	; () banked
 17634  002BB0  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17635  002BB2  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17636                           
 17637                           ; BSR set to: 0
 17638                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17639  002BB4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17640  002BB8  0E0F               	movlw	15
 17641  002BBA  1609               	andwf	??_retrieveLog,f,c
 17642  002BBC  5009               	movf	??_retrieveLog,w,c
 17643  002BBE  0100               	movlb	0	; () banked
 17644  002BC0  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17645  002BC2  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;EEPROM.c: 156: addr++;
 17649  002BC4  4A10               	infsnz	retrieveLog@addr,f,c
 17650  002BC6  2A11               	incf	retrieveLog@addr+1,f,c
 17651                           
 17652                           ; BSR set to: 0
 17653                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17654  002BC8  0E00               	movlw	0
 17655  002BCA  6E0F               	movwf	retrieveLog@i+1,c
 17656  002BCC  0E00               	movlw	0
 17657  002BCE  6E0E               	movwf	retrieveLog@i,c
 17658  002BD0                     i2l5750:
 17659                           
 17660                           ; BSR set to: 0
 17661  002BD0  BE0F               	btfsc	retrieveLog@i+1,7,c
 17662  002BD2  D006               	goto	i2l5754
 17663  002BD4  500F               	movf	retrieveLog@i+1,w,c
 17664  002BD6  E11E               	bnz	i2l5762
 17665  002BD8  0E07               	movlw	7
 17666  002BDA  5C0E               	subwf	retrieveLog@i,w,c
 17667  002BDC  B0D8               	btfsc	status,0,c
 17668  002BDE  D01A               	goto	i2l5762
 17669  002BE0                     i2l5754:
 17670                           
 17671                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17672  002BE0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17673  002BE4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17674  002BE8  ECBC  F020         	call	i2_EEPROM_read	;wreg free
 17675  002BEC  6E09               	movwf	??_retrieveLog& (0+255),c
 17676  002BEE  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17677  002BF0  90D8               	bcf	status,0,c
 17678  002BF2  340E               	rlcf	retrieveLog@i,w,c
 17679  002BF4  6ED9               	movwf	fsr2l,c
 17680  002BF6  340F               	rlcf	retrieveLog@i+1,w,c
 17681  002BF8  6EDA               	movwf	fsr2h,c
 17682  002BFA  0E00               	movlw	low _log_startTime
 17683  002BFC  26D9               	addwf	fsr2l,f,c
 17684  002BFE  0E01               	movlw	high _log_startTime
 17685  002C00  22DA               	addwfc	fsr2h,f,c
 17686  002C02  C009  FFDE         	movff	??_retrieveLog,postinc2
 17687  002C06  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17688                           
 17689                           ;EEPROM.c: 161: addr++;
 17690  002C0A  4A10               	infsnz	retrieveLog@addr,f,c
 17691  002C0C  2A11               	incf	retrieveLog@addr+1,f,c
 17692  002C0E  4A0E               	infsnz	retrieveLog@i,f,c
 17693  002C10  2A0F               	incf	retrieveLog@i+1,f,c
 17694  002C12  D7DE               	goto	i2l5750
 17695  002C14                     i2l5762:
 17696                           
 17697                           ;EEPROM.c: 162: }
 17698                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17699  002C14  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17700  002C18  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17701  002C1C  ECBC  F020         	call	i2_EEPROM_read	;wreg free
 17702  002C20  6E09               	movwf	??_retrieveLog& (0+255),c
 17703  002C22  5009               	movf	??_retrieveLog,w,c
 17704  002C24  0100               	movlb	0	; () banked
 17705  002C26  6FF4               	movwf	_log_total_time& (0+255),b
 17706  002C28  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17707                           
 17708                           ; BSR set to: 0
 17709  002C2A  0012               	return		;funcret
 17710  002C2C                     __end_of_retrieveLog:
 17711                           	opt stack 0
 17712                           pclatu	equ	0xFFB
 17713                           pclath	equ	0xFFA
 17714                           tblptru	equ	0xFF8
 17715                           tblptrh	equ	0xFF7
 17716                           tblptrl	equ	0xFF6
 17717                           tablat	equ	0xFF5
 17718                           prodh	equ	0xFF4
 17719                           prodl	equ	0xFF3
 17720                           intcon	equ	0xFF2
 17721                           intcon2	equ	0xFF1
 17722                           intcon3	equ	0xFF0
 17723                           indf0	equ	0xFEF
 17724                           postinc0	equ	0xFEE
 17725                           fsr0h	equ	0xFEA
 17726                           fsr0l	equ	0xFE9
 17727                           wreg	equ	0xFE8
 17728                           postdec1	equ	0xFE5
 17729                           fsr1h	equ	0xFE2
 17730                           fsr1l	equ	0xFE1
 17731                           indf2	equ	0xFDF
 17732                           postinc2	equ	0xFDE
 17733                           postdec2	equ	0xFDD
 17734                           fsr2h	equ	0xFDA
 17735                           fsr2l	equ	0xFD9
 17736                           status	equ	0xFD8
 17737                           
 17738 ;; *************** function i2_EEPROM_read *****************
 17739 ;; Defined at:
 17740 ;;		line 68 in file "EEPROM.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;  address         2    0[COMRAM] unsigned short 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;		None
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      unsigned char 
 17747 ;; Registers used:
 17748 ;;		wreg, status,2
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17758 ;;Total ram usage:        2 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; This function calls:
 17761 ;;		Nothing
 17762 ;; This function is called by:
 17763 ;;		_retrieveLog
 17764 ;; This function uses a non-reentrant model
 17765 ;;
 17766                           
 17767                           	psect	text73
 17768  004178                     __ptext73:
 17769                           	opt stack 0
 17770  004178                     i2_EEPROM_read:
 17771                           	opt stack 20
 17772                           
 17773                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17774                           
 17775                           ; BSR set to: 0
 17776                           ;incstack = 0
 17777  004178  5002               	movf	i2EEPROM_read@address+1,w,c
 17778  00417A  6EAA               	movwf	4010,c	;volatile
 17779                           
 17780                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17781  00417C  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17782                           
 17783                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17784  004180  9EA6               	bcf	4006,7,c	;volatile
 17785                           
 17786                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17787  004182  9CA6               	bcf	4006,6,c	;volatile
 17788                           
 17789                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17790  004184  80A6               	bsf	4006,0,c	;volatile
 17791  004186                     i2l914:
 17792  004186  B0A6               	btfsc	4006,0,c	;volatile
 17793  004188  D7FE               	goto	i2l914
 17794                           
 17795                           ;EEPROM.c: 81: return EEDATA;
 17796  00418A  50A8               	movf	4008,w,c	;volatile
 17797  00418C  0012               	return	
 17798  00418E                     __end_ofi2_EEPROM_read:
 17799                           	opt stack 0
 17800                           pclatu	equ	0xFFB
 17801                           pclath	equ	0xFFA
 17802                           tblptru	equ	0xFF8
 17803                           tblptrh	equ	0xFF7
 17804                           tblptrl	equ	0xFF6
 17805                           tablat	equ	0xFF5
 17806                           prodh	equ	0xFF4
 17807                           prodl	equ	0xFF3
 17808                           intcon	equ	0xFF2
 17809                           intcon2	equ	0xFF1
 17810                           intcon3	equ	0xFF0
 17811                           indf0	equ	0xFEF
 17812                           postinc0	equ	0xFEE
 17813                           fsr0h	equ	0xFEA
 17814                           fsr0l	equ	0xFE9
 17815                           wreg	equ	0xFE8
 17816                           postdec1	equ	0xFE5
 17817                           fsr1h	equ	0xFE2
 17818                           fsr1l	equ	0xFE1
 17819                           indf2	equ	0xFDF
 17820                           postinc2	equ	0xFDE
 17821                           postdec2	equ	0xFDD
 17822                           fsr2h	equ	0xFDA
 17823                           fsr2l	equ	0xFD9
 17824                           status	equ	0xFD8
 17825                           
 17826 ;; *************** function _printSortTimer *****************
 17827 ;; Defined at:
 17828 ;;		line 258 in file "sort.c"
 17829 ;; Parameters:    Size  Location     Type
 17830 ;;		None
 17831 ;; Auto vars:     Size  Location     Type
 17832 ;;  i               2   72[COMRAM] int 
 17833 ;;  curTime        14   46[COMRAM] int [7]
 17834 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17835 ;;  sec             2   66[COMRAM] int 
 17836 ;;  min             2   64[COMRAM] int 
 17837 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17838 ;;  start_sec       2   60[COMRAM] unsigned int 
 17839 ;;  hour            2   44[COMRAM] int 
 17840 ;; Return value:  Size  Location     Type
 17841 ;;                  1    wreg      void 
 17842 ;; Registers used:
 17843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17844 ;; Tracked objects:
 17845 ;;		On entry : 0/0
 17846 ;;		On exit  : 0/0
 17847 ;;		Unchanged: 0/0
 17848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17850 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17851 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17852 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17853 ;;Total ram usage:       33 bytes
 17854 ;; Hardware stack levels used:    1
 17855 ;; Hardware stack levels required when called:    3
 17856 ;; This function calls:
 17857 ;;		i2___lwdiv
 17858 ;;		i2___lwmod
 17859 ;;		i2___wmul
 17860 ;;		i2_getRTC
 17861 ;;		i2_lcdInst
 17862 ;;		i2_printf
 17863 ;; This function is called by:
 17864 ;;		_handler
 17865 ;; This function uses a non-reentrant model
 17866 ;;
 17867                           
 17868                           	psect	text74
 17869  00209E                     __ptext74:
 17870                           	opt stack 0
 17871  00209E                     _printSortTimer:
 17872                           	opt stack 20
 17873                           
 17874                           ;sort.c: 259: getRTC();
 17875                           
 17876                           ;incstack = 0
 17877  00209E  EC9A  F01B         	call	i2_getRTC	;wreg free
 17878                           
 17879                           ;sort.c: 260: int curTime[7];
 17880                           ;sort.c: 261: for(int i = 0; i < 7; i++){
 17881  0020A2  0E00               	movlw	0
 17882  0020A4  6E4A               	movwf	printSortTimer@i+1,c
 17883  0020A6  0E00               	movlw	0
 17884  0020A8  6E49               	movwf	printSortTimer@i,c
 17885  0020AA                     i2l7656:
 17886  0020AA  BE4A               	btfsc	printSortTimer@i+1,7,c
 17887  0020AC  D006               	goto	i2l7660
 17888  0020AE  504A               	movf	printSortTimer@i+1,w,c
 17889  0020B0  E131               	bnz	i2l7666
 17890  0020B2  0E07               	movlw	7
 17891  0020B4  5C49               	subwf	printSortTimer@i,w,c
 17892  0020B6  B0D8               	btfsc	status,0,c
 17893  0020B8  D02D               	goto	i2l7666
 17894  0020BA                     i2l7660:
 17895                           
 17896                           ;sort.c: 262: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17897  0020BA  0E24               	movlw	low _time
 17898  0020BC  2449               	addwf	printSortTimer@i,w,c
 17899  0020BE  6ED9               	movwf	fsr2l,c
 17900  0020C0  0E01               	movlw	high _time
 17901  0020C2  204A               	addwfc	printSortTimer@i+1,w,c
 17902  0020C4  6EDA               	movwf	fsr2h,c
 17903  0020C6  50DF               	movf	indf2,w,c
 17904  0020C8  6E2A               	movwf	??_printSortTimer& (0+255),c
 17905  0020CA  3A2A               	swapf	??_printSortTimer,f,c
 17906  0020CC  0E0F               	movlw	15
 17907  0020CE  162A               	andwf	??_printSortTimer,f,c
 17908  0020D0  0E0F               	movlw	15
 17909  0020D2  162A               	andwf	??_printSortTimer,f,c
 17910  0020D4  502A               	movf	??_printSortTimer,w,c
 17911  0020D6  0D0A               	mullw	10
 17912  0020D8  0E24               	movlw	low _time
 17913  0020DA  2449               	addwf	printSortTimer@i,w,c
 17914  0020DC  6ED9               	movwf	fsr2l,c
 17915  0020DE  0E01               	movlw	high _time
 17916  0020E0  204A               	addwfc	printSortTimer@i+1,w,c
 17917  0020E2  6EDA               	movwf	fsr2h,c
 17918  0020E4  50DF               	movf	indf2,w,c
 17919  0020E6  0B0F               	andlw	15
 17920  0020E8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17921  0020EA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17922  0020EC  50F3               	movf	prodl,w,c
 17923  0020EE  262B               	addwf	??_printSortTimer+1,f,c
 17924  0020F0  50F4               	movf	prodh,w,c
 17925  0020F2  222C               	addwfc	??_printSortTimer+2,f,c
 17926  0020F4  90D8               	bcf	status,0,c
 17927  0020F6  3449               	rlcf	printSortTimer@i,w,c
 17928  0020F8  6ED9               	movwf	fsr2l,c
 17929  0020FA  344A               	rlcf	printSortTimer@i+1,w,c
 17930  0020FC  6EDA               	movwf	fsr2h,c
 17931  0020FE  0E2F               	movlw	low printSortTimer@curTime
 17932  002100  26D9               	addwf	fsr2l,f,c
 17933  002102  0E00               	movlw	high printSortTimer@curTime
 17934  002104  22DA               	addwfc	fsr2h,f,c
 17935  002106  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17936  00210A  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17937  00210E  4A49               	infsnz	printSortTimer@i,f,c
 17938  002110  2A4A               	incf	printSortTimer@i+1,f,c
 17939  002112  D7CB               	goto	i2l7656
 17940  002114                     i2l7666:
 17941                           
 17942                           ;sort.c: 263: }
 17943                           ;sort.c: 264: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 17944  002114  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 17945  002118  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 17946  00211C  0E00               	movlw	0
 17947  00211E  6E04               	movwf	i2___wmul@multiplicand+1,c
 17948  002120  0E3C               	movlw	60
 17949  002122  6E03               	movwf	i2___wmul@multiplicand,c
 17950  002124  EC2A  F020         	call	i2___wmul	;wreg free
 17951  002128  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17952  00212C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17953  002130  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17954  002134  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17955  002138  0E0E               	movlw	14
 17956  00213A  6E04               	movwf	i2___wmul@multiplicand+1,c
 17957  00213C  0E10               	movlw	16
 17958  00213E  6E03               	movwf	i2___wmul@multiplicand,c
 17959  002140  EC2A  F020         	call	i2___wmul	;wreg free
 17960  002144  5001               	movf	?i2___wmul,w,c
 17961  002146  262A               	addwf	??_printSortTimer,f,c
 17962  002148  5002               	movf	?i2___wmul+1,w,c
 17963  00214A  222B               	addwfc	??_printSortTimer+1,f,c
 17964  00214C  0101               	movlb	1	; () banked
 17965  00214E  510E               	movf	_startTime& (0+255),w,b
 17966  002150  242A               	addwf	??_printSortTimer,w,c
 17967  002152  6E3D               	movwf	printSortTimer@start_sec,c
 17968  002154  0101               	movlb	1	; () banked
 17969  002156  510F               	movf	(_startTime+1)& (0+255),w,b
 17970  002158  202B               	addwfc	??_printSortTimer+1,w,c
 17971  00215A  6E3E               	movwf	printSortTimer@start_sec+1,c
 17972                           
 17973                           ;sort.c: 265: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17974  00215C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17975  002160  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17976  002164  0E00               	movlw	0
 17977  002166  6E04               	movwf	i2___wmul@multiplicand+1,c
 17978  002168  0E3C               	movlw	60
 17979  00216A  6E03               	movwf	i2___wmul@multiplicand,c
 17980  00216C  EC2A  F020         	call	i2___wmul	;wreg free
 17981  002170  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17982  002174  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17983  002178  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17984  00217C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17985  002180  0E0E               	movlw	14
 17986  002182  6E04               	movwf	i2___wmul@multiplicand+1,c
 17987  002184  0E10               	movlw	16
 17988  002186  6E03               	movwf	i2___wmul@multiplicand,c
 17989  002188  EC2A  F020         	call	i2___wmul	;wreg free
 17990  00218C  5001               	movf	?i2___wmul,w,c
 17991  00218E  262A               	addwf	??_printSortTimer,f,c
 17992  002190  5002               	movf	?i2___wmul+1,w,c
 17993  002192  222B               	addwfc	??_printSortTimer+1,f,c
 17994  002194  502F               	movf	printSortTimer@curTime,w,c
 17995  002196  242A               	addwf	??_printSortTimer,w,c
 17996  002198  6E3F               	movwf	printSortTimer@cur_sec,c
 17997  00219A  5030               	movf	printSortTimer@curTime+1,w,c
 17998  00219C  202B               	addwfc	??_printSortTimer+1,w,c
 17999  00219E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18000                           
 18001                           ;sort.c: 266: unsigned int timeDiff = cur_sec - start_sec;
 18002  0021A0  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18003  0021A4  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18004  0021A8  1E2A               	comf	??_printSortTimer,f,c
 18005  0021AA  1E2B               	comf	??_printSortTimer+1,f,c
 18006  0021AC  4A2A               	infsnz	??_printSortTimer,f,c
 18007  0021AE  2A2B               	incf	??_printSortTimer+1,f,c
 18008  0021B0  503F               	movf	printSortTimer@cur_sec,w,c
 18009  0021B2  242A               	addwf	??_printSortTimer,w,c
 18010  0021B4  6E47               	movwf	printSortTimer@timeDiff,c
 18011  0021B6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18012  0021B8  202B               	addwfc	??_printSortTimer+1,w,c
 18013  0021BA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18014                           
 18015                           ;sort.c: 268: total_time = timeDiff;
 18016  0021BC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18017  0021C0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18018                           
 18019                           ;sort.c: 270: if(timeDiff >= 180){
 18020  0021C4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18021  0021C6  E104               	bnz	i2u659_40
 18022  0021C8  0EB4               	movlw	180
 18023  0021CA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18024  0021CC  A0D8               	btfss	status,0,c
 18025  0021CE  D003               	goto	i2l7676
 18026  0021D0                     i2u659_40:
 18027                           
 18028                           ;sort.c: 271: machine_state = DoneSorting_state;
 18029  0021D0  0E02               	movlw	2
 18030  0021D2  0100               	movlb	0	; () banked
 18031  0021D4  6FFC               	movwf	_machine_state& (0+255),b
 18032  0021D6                     i2l7676:
 18033                           
 18034                           ;sort.c: 273: }
 18035                           ;sort.c: 275: int hour = timeDiff / 3600;
 18036  0021D6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18037  0021DA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18038  0021DE  0E0E               	movlw	14
 18039  0021E0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18040  0021E2  0E10               	movlw	16
 18041  0021E4  6E08               	movwf	i2___lwdiv@divisor,c
 18042  0021E6  EC4E  F01D         	call	i2___lwdiv	;wreg free
 18043  0021EA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18044  0021EE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18045                           
 18046                           ;sort.c: 276: int min = (timeDiff % 3600) / 60;
 18047  0021F2  0E0E               	movlw	14
 18048  0021F4  6E04               	movwf	i2___lwmod@divisor+1,c
 18049  0021F6  0E10               	movlw	16
 18050  0021F8  6E03               	movwf	i2___lwmod@divisor,c
 18051  0021FA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18052  0021FE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18053  002202  EC0E  F01E         	call	i2___lwmod	;wreg free
 18054  002206  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18055  00220A  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18056  00220E  0E00               	movlw	0
 18057  002210  6E09               	movwf	i2___lwdiv@divisor+1,c
 18058  002212  0E3C               	movlw	60
 18059  002214  6E08               	movwf	i2___lwdiv@divisor,c
 18060  002216  EC4E  F01D         	call	i2___lwdiv	;wreg free
 18061  00221A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18062  00221E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18063                           
 18064                           ;sort.c: 277: int sec = (timeDiff % 3600) % 60;
 18065  002222  0E0E               	movlw	14
 18066  002224  6E04               	movwf	i2___lwmod@divisor+1,c
 18067  002226  0E10               	movlw	16
 18068  002228  6E03               	movwf	i2___lwmod@divisor,c
 18069  00222A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18070  00222E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18071  002232  EC0E  F01E         	call	i2___lwmod	;wreg free
 18072  002236  C001  F045         	movff	?i2___lwmod,_printSortTimer$2345
 18073  00223A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2345+1
 18074                           
 18075                           ;sort.c: 277: int sec = (timeDiff % 3600) % 60;
 18076  00223E  C045  F001         	movff	_printSortTimer$2345,i2___lwmod@dividend
 18077  002242  C046  F002         	movff	_printSortTimer$2345+1,i2___lwmod@dividend+1
 18078  002246  0E00               	movlw	0
 18079  002248  6E04               	movwf	i2___lwmod@divisor+1,c
 18080  00224A  0E3C               	movlw	60
 18081  00224C  6E03               	movwf	i2___lwmod@divisor,c
 18082  00224E  EC0E  F01E         	call	i2___lwmod	;wreg free
 18083  002252  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18084  002256  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18085                           
 18086                           ;sort.c: 279: lcdInst(0b10000000);;
 18087  00225A  0E80               	movlw	128
 18088  00225C  ECF0  F020         	call	i2_lcdInst
 18089                           
 18090                           ;sort.c: 280: printf("SORTING...");
 18091  002260  0E85               	movlw	low STR_64
 18092  002262  6E0D               	movwf	i2printf@f,c
 18093  002264  0EFF               	movlw	high STR_64
 18094  002266  6E0E               	movwf	i2printf@f+1,c
 18095  002268  ECB8  F00A         	call	i2_printf	;wreg free
 18096                           
 18097                           ;sort.c: 281: lcdInst(0b11000000);;
 18098  00226C  0EC0               	movlw	192
 18099  00226E  ECF0  F020         	call	i2_lcdInst
 18100                           
 18101                           ;sort.c: 282: printf("TIME %d:%02d", min, sec);
 18102  002272  0E56               	movlw	low STR_65
 18103  002274  6E0D               	movwf	i2printf@f,c
 18104  002276  0EFF               	movlw	high STR_65
 18105  002278  6E0E               	movwf	i2printf@f+1,c
 18106  00227A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18107  00227E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18108  002282  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18109  002286  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18110  00228A  ECB8  F00A         	call	i2_printf	;wreg free
 18111  00228E  0012               	return		;funcret
 18112  002290                     __end_of_printSortTimer:
 18113                           	opt stack 0
 18114                           pclatu	equ	0xFFB
 18115                           pclath	equ	0xFFA
 18116                           tblptru	equ	0xFF8
 18117                           tblptrh	equ	0xFF7
 18118                           tblptrl	equ	0xFF6
 18119                           tablat	equ	0xFF5
 18120                           prodh	equ	0xFF4
 18121                           prodl	equ	0xFF3
 18122                           intcon	equ	0xFF2
 18123                           intcon2	equ	0xFF1
 18124                           intcon3	equ	0xFF0
 18125                           indf0	equ	0xFEF
 18126                           postinc0	equ	0xFEE
 18127                           fsr0h	equ	0xFEA
 18128                           fsr0l	equ	0xFE9
 18129                           wreg	equ	0xFE8
 18130                           postdec1	equ	0xFE5
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           fsr2h	equ	0xFDA
 18137                           fsr2l	equ	0xFD9
 18138                           status	equ	0xFD8
 18139                           
 18140 ;; *************** function i2_printf *****************
 18141 ;; Defined at:
 18142 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18145 ;;		 -> STR_110(17), STR_109(17), STR_108(10), STR_107(13), 
 18146 ;;		 -> STR_106(18), STR_105(18), STR_104(15), STR_103(15), 
 18147 ;;		 -> STR_102(15), STR_101(17), STR_100(17), STR_99(17), 
 18148 ;;		 -> STR_98(16), STR_97(17), STR_96(17), STR_95(17), 
 18149 ;;		 -> STR_94(17), STR_93(17), STR_92(17), STR_91(15), 
 18150 ;;		 -> STR_90(11), STR_89(17), STR_88(11), STR_87(17), 
 18151 ;;		 -> STR_86(14), STR_85(15), STR_84(14), STR_83(10), 
 18152 ;;		 -> STR_82(16), STR_81(15), STR_80(15), STR_79(13), 
 18153 ;;		 -> STR_78(14), STR_77(8), STR_76(14), STR_75(15), 
 18154 ;;		 -> STR_74(12), STR_73(14), STR_72(17), STR_71(14), 
 18155 ;;		 -> STR_70(15), STR_69(17), STR_68(17), STR_67(7), 
 18156 ;;		 -> STR_66(21), STR_65(13), STR_64(11), STR_63(24), 
 18157 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 18158 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 18159 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 18160 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 18161 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 18162 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(19), 
 18163 ;;		 -> STR_26(17), STR_25(19), STR_24(17), STR_23(14), 
 18164 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 18165 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 18166 ;;		 -> STR_1(18), 
 18167 ;; Auto vars:     Size  Location     Type
 18168 ;;  printf          4    0        struct .
 18169 ;;  printf          2   39[COMRAM] int 
 18170 ;;  printf          2   35[COMRAM] unsigned int 
 18171 ;;  printf          2   33[COMRAM] unsigned int 
 18172 ;;  printf          2   31[COMRAM] PTR void [1]
 18173 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18174 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18175 ;;		 -> STR_111(7), count_total(2), printRTC@month(4), UI@month(4), 
 18176 ;;  printf          1   38[COMRAM] char 
 18177 ;;  printf          1   37[COMRAM] unsigned char 
 18178 ;;  printf          1   28[COMRAM] char 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  2   12[COMRAM] int 
 18181 ;; Registers used:
 18182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18188 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18191 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18192 ;;Total ram usage:       29 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    2
 18195 ;; This function calls:
 18196 ;;		i2___lwdiv
 18197 ;;		i2___lwmod
 18198 ;;		i2___wmul
 18199 ;;		i2_isdigit
 18200 ;;		i2_putch
 18201 ;; This function is called by:
 18202 ;;		_change_state_to_menu_11
 18203 ;;		_change_state_to_menu_23
 18204 ;;		_change_state_to_logs_11
 18205 ;;		_change_state_to_logs_12
 18206 ;;		_change_state_to_logs_22
 18207 ;;		_change_state_to_logs_23
 18208 ;;		_change_state_to_logs_33
 18209 ;;		_change_state_to_logs_34
 18210 ;;		_printSortTimer
 18211 ;;		i2_change_state_to_menu_start
 18212 ;;		i2_change_state_to_menu_12
 18213 ;;		i2_change_state_to_menu_22
 18214 ;;		i2_printRTC
 18215 ;; This function uses a non-reentrant model
 18216 ;;
 18217                           
 18218                           	psect	text75
 18219  001570                     __ptext75:
 18220                           	opt stack 0
 18221  001570                     i2_printf:
 18222                           	opt stack 19
 18223                           
 18224                           ;doprnt.c: 466: va_list ap;
 18225                           ;doprnt.c: 499: signed char c;
 18226                           ;doprnt.c: 501: int width;
 18227                           ;doprnt.c: 506: signed char prec;
 18228                           ;doprnt.c: 508: unsigned char flag;
 18229                           ;doprnt.c: 523: union {
 18230                           ;doprnt.c: 524: unsigned long vd;
 18231                           ;doprnt.c: 525: double integ;
 18232                           ;doprnt.c: 526: } tmpval;
 18233                           ;doprnt.c: 528: unsigned int val;
 18234                           ;doprnt.c: 529: unsigned len;
 18235                           ;doprnt.c: 530: const char * cp;
 18236                           ;doprnt.c: 533: *ap = __va_start();
 18237                           
 18238                           ;incstack = 0
 18239  001570  0E0F               	movlw	low (?i2_printf+2)
 18240  001572  6E20               	movwf	i2printf@ap,c
 18241  001574  0E00               	movlw	high (?i2_printf+2)
 18242  001576  6E21               	movwf	i2printf@ap+1,c
 18243                           
 18244                           ;doprnt.c: 536: while(c = *f++) {
 18245  001578  D1A4               	goto	i2l5568
 18246  00157A                     i2l5438:
 18247                           
 18248                           ;doprnt.c: 538: if(c != '%')
 18249  00157A  0E25               	movlw	37
 18250  00157C  1827               	xorwf	i2printf@c,w,c
 18251  00157E  B4D8               	btfsc	status,2,c
 18252  001580  D004               	goto	i2l5442
 18253                           
 18254                           ;doprnt.c: 540: {
 18255                           ;doprnt.c: 541: (putch(c) );
 18256  001582  5027               	movf	i2printf@c,w,c
 18257  001584  ECEA  F020         	call	i2_putch
 18258                           
 18259                           ;doprnt.c: 542: continue;
 18260  001588  D19C               	goto	i2l5568
 18261  00158A                     i2l5442:
 18262                           
 18263                           ;doprnt.c: 543: }
 18264                           ;doprnt.c: 546: width = 0;
 18265  00158A  0E00               	movlw	0
 18266  00158C  6E29               	movwf	i2printf@width+1,c
 18267  00158E  0E00               	movlw	0
 18268  001590  6E28               	movwf	i2printf@width,c
 18269                           
 18270                           ;doprnt.c: 548: flag = 0;
 18271  001592  0E00               	movlw	0
 18272  001594  6E26               	movwf	i2printf@flag,c
 18273                           
 18274                           ;doprnt.c: 551: switch(*f) {
 18275                           
 18276                           ;doprnt.c: 550: for(;;) {
 18277  001596  D003               	goto	i2l5448
 18278  001598                     i2l5444:
 18279                           
 18280                           ;doprnt.c: 580: flag |= 0x04;
 18281  001598  8426               	bsf	i2printf@flag,2,c
 18282                           
 18283                           ;doprnt.c: 581: f++;
 18284  00159A  4A0D               	infsnz	i2printf@f,f,c
 18285  00159C  2A0E               	incf	i2printf@f+1,f,c
 18286  00159E                     i2l5448:
 18287  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 18288  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18289  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18290  0015A6  6AF8               	clrf	tblptru,c
 18291  0015A8                     	endif
 18292  0015A8                     	if	0	;tblptru may be non-zero
 18293  0015A8                     	endif
 18294  0015A8  0008               	tblrd		*
 18295  0015AA  50F5               	movf	tablat,w,c
 18296                           
 18297                           ; Switch size 1, requested type "space"
 18298                           ; Number of cases is 1, Range of values is 48 to 48
 18299                           ; switch strategies available:
 18300                           ; Name         Instructions Cycles
 18301                           ; simple_byte            4     3 (average)
 18302                           ;	Chosen strategy is simple_byte
 18303  0015AC  0A30               	xorlw	48	; case 48
 18304  0015AE  B4D8               	btfsc	status,2,c
 18305  0015B0  D7F3               	goto	i2l5444
 18306                           
 18307                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 18308                           
 18309                           ;doprnt.c: 586: }
 18310                           
 18311                           ;doprnt.c: 585: break;
 18312  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18313  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18314  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18315  0015BA  6AF8               	clrf	tblptru,c
 18316  0015BC                     	endif
 18317  0015BC                     	if	0	;tblptru may be non-zero
 18318  0015BC                     	endif
 18319  0015BC  0008               	tblrd		*
 18320  0015BE  50F5               	movf	tablat,w,c
 18321  0015C0  EC96  F020         	call	i2_isdigit
 18322  0015C4  A0D8               	btfss	status,0,c
 18323  0015C6  D0A6               	goto	i2l5496
 18324                           
 18325                           ;doprnt.c: 598: width = 0;
 18326  0015C8  0E00               	movlw	0
 18327  0015CA  6E29               	movwf	i2printf@width+1,c
 18328  0015CC  0E00               	movlw	0
 18329  0015CE  6E28               	movwf	i2printf@width,c
 18330  0015D0                     i2l5454:
 18331                           
 18332                           ;doprnt.c: 600: width *= 10;
 18333  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18334  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18335  0015D8  0E00               	movlw	0
 18336  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 18337  0015DC  0E0A               	movlw	10
 18338  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 18339  0015E0  EC2A  F020         	call	i2___wmul	;wreg free
 18340  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 18341  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18342                           
 18343                           ;doprnt.c: 601: width += *f++ - '0';
 18344  0015EC  0ED0               	movlw	208
 18345  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 18346  0015F0  0EFF               	movlw	255
 18347  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18348  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 18349  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18350  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18351  0015FC  6AF8               	clrf	tblptru,c
 18352  0015FE                     	endif
 18353  0015FE                     	if	0	;tblptru may be non-zero
 18354  0015FE                     	endif
 18355  0015FE  0008               	tblrd		*
 18356  001600  50F5               	movf	tablat,w,c
 18357  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18358  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18359  001606  5019               	movf	??i2_printf,w,c
 18360  001608  261B               	addwf	??i2_printf+2,f,c
 18361  00160A  501A               	movf	??i2_printf+1,w,c
 18362  00160C  221C               	addwfc	??i2_printf+3,f,c
 18363  00160E  501B               	movf	??i2_printf+2,w,c
 18364  001610  2628               	addwf	i2printf@width,f,c
 18365  001612  501C               	movf	??i2_printf+3,w,c
 18366  001614  2229               	addwfc	i2printf@width+1,f,c
 18367  001616  4A0D               	infsnz	i2printf@f,f,c
 18368  001618  2A0E               	incf	i2printf@f+1,f,c
 18369                           
 18370                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18371  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18372  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18373  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18374  001622  6AF8               	clrf	tblptru,c
 18375  001624                     	endif
 18376  001624                     	if	0	;tblptru may be non-zero
 18377  001624                     	endif
 18378  001624  0008               	tblrd		*
 18379  001626  50F5               	movf	tablat,w,c
 18380  001628  EC96  F020         	call	i2_isdigit
 18381  00162C  A0D8               	btfss	status,0,c
 18382  00162E  D072               	goto	i2l5496
 18383  001630  D7CF               	goto	i2l5454
 18384  001632                     i2l5462:
 18385                           
 18386                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18387  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 18388  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18389  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 18390  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18391  001642  0E02               	movlw	2
 18392  001644  2620               	addwf	i2printf@ap,f,c
 18393  001646  0E00               	movlw	0
 18394  001648  2221               	addwfc	i2printf@ap+1,f,c
 18395                           
 18396                           ;doprnt.c: 740: if(!cp)
 18397  00164A  501E               	movf	i2printf@cp,w,c
 18398  00164C  101F               	iorwf	i2printf@cp+1,w,c
 18399  00164E  A4D8               	btfss	status,2,c
 18400  001650  D004               	goto	i2l5470
 18401                           
 18402                           ;doprnt.c: 741: cp = "(null)";
 18403  001652  0EB6               	movlw	low STR_111
 18404  001654  6E1E               	movwf	i2printf@cp,c
 18405  001656  0EFF               	movlw	high STR_111
 18406  001658  6E1F               	movwf	i2printf@cp+1,c
 18407  00165A                     i2l5470:
 18408                           
 18409                           ;doprnt.c: 745: len = 0;
 18410  00165A  0E00               	movlw	0
 18411  00165C  6E23               	movwf	i2printf@len+1,c
 18412  00165E  0E00               	movlw	0
 18413  001660  6E22               	movwf	i2printf@len,c
 18414                           
 18415                           ;doprnt.c: 746: while(cp[len])
 18416  001662  D002               	goto	i2l5474
 18417  001664                     i2l5472:
 18418                           
 18419                           ;doprnt.c: 747: len++;
 18420  001664  4A22               	infsnz	i2printf@len,f,c
 18421  001666  2A23               	incf	i2printf@len+1,f,c
 18422  001668                     i2l5474:
 18423  001668  5022               	movf	i2printf@len,w,c
 18424  00166A  241E               	addwf	i2printf@cp,w,c
 18425  00166C  6E19               	movwf	??i2_printf& (0+255),c
 18426  00166E  5023               	movf	i2printf@len+1,w,c
 18427  001670  201F               	addwfc	i2printf@cp+1,w,c
 18428  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18429  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 18430  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 18431  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 18432  00167E  6EF8               	movwf	tblptru,c
 18433  001680  0E0F               	movlw	(high __ramtop+-1)
 18434  001682  64F7               	cpfsgt	tblptrh,c
 18435  001684  D003               	bra	i2u402_47
 18436  001686  0008               	tblrd		*
 18437  001688  50F5               	movf	tablat,w,c
 18438  00168A  D005               	bra	i2u402_40
 18439  00168C                     i2u402_47:
 18440  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18441  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 18442  001694  50EF               	movf	indf0,w,c
 18443  001696                     i2u402_40:
 18444  001696  0900               	iorlw	0
 18445  001698  A4D8               	btfss	status,2,c
 18446  00169A  D7E4               	goto	i2l5472
 18447                           
 18448                           ;doprnt.c: 757: if(width > len)
 18449  00169C  5028               	movf	i2printf@width,w,c
 18450  00169E  5C22               	subwf	i2printf@len,w,c
 18451  0016A0  5029               	movf	i2printf@width+1,w,c
 18452  0016A2  5823               	subwfb	i2printf@len+1,w,c
 18453  0016A4  B0D8               	btfsc	status,0,c
 18454  0016A6  D005               	goto	i2l5480
 18455                           
 18456                           ;doprnt.c: 758: width -= len;
 18457  0016A8  5022               	movf	i2printf@len,w,c
 18458  0016AA  5E28               	subwf	i2printf@width,f,c
 18459  0016AC  5023               	movf	i2printf@len+1,w,c
 18460  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 18461  0016B0  D008               	goto	i2l5484
 18462  0016B2                     i2l5480:
 18463                           
 18464                           ;doprnt.c: 759: else
 18465                           ;doprnt.c: 760: width = 0;
 18466  0016B2  0E00               	movlw	0
 18467  0016B4  6E29               	movwf	i2printf@width+1,c
 18468  0016B6  0E00               	movlw	0
 18469  0016B8  6E28               	movwf	i2printf@width,c
 18470                           
 18471                           ;doprnt.c: 764: while(width--)
 18472  0016BA  D003               	goto	i2l5484
 18473  0016BC                     i2l5482:
 18474                           
 18475                           ;doprnt.c: 765: (putch(' ') );
 18476  0016BC  0E20               	movlw	32
 18477  0016BE  ECEA  F020         	call	i2_putch
 18478  0016C2                     i2l5484:
 18479  0016C2  0628               	decf	i2printf@width,f,c
 18480  0016C4  A0D8               	btfss	status,0,c
 18481  0016C6  0629               	decf	i2printf@width+1,f,c
 18482  0016C8  2828               	incf	i2printf@width,w,c
 18483  0016CA  E1F8               	bnz	i2l5482
 18484  0016CC  2829               	incf	i2printf@width+1,w,c
 18485  0016CE  B4D8               	btfsc	status,2,c
 18486  0016D0  D016               	goto	i2l5490
 18487  0016D2  D7F4               	goto	i2l5482
 18488  0016D4                     i2l5486:
 18489                           
 18490                           ;doprnt.c: 768: (putch(*cp++) );
 18491  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 18492  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 18493  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 18494  0016DE  6EF8               	movwf	tblptru,c
 18495  0016E0  0E0F               	movlw	(high __ramtop+-1)
 18496  0016E2  64F7               	cpfsgt	tblptrh,c
 18497  0016E4  D003               	bra	i2u406_47
 18498  0016E6  0008               	tblrd		*
 18499  0016E8  50F5               	movf	tablat,w,c
 18500  0016EA  D005               	bra	i2u406_40
 18501  0016EC                     i2u406_47:
 18502  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18503  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18504  0016F4  50EF               	movf	indf0,w,c
 18505  0016F6                     i2u406_40:
 18506  0016F6  ECEA  F020         	call	i2_putch
 18507  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 18508  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 18509  0016FE                     i2l5490:
 18510  0016FE  0622               	decf	i2printf@len,f,c
 18511  001700  A0D8               	btfss	status,0,c
 18512  001702  0623               	decf	i2printf@len+1,f,c
 18513  001704  2822               	incf	i2printf@len,w,c
 18514  001706  E1E6               	bnz	i2l5486
 18515  001708  2823               	incf	i2printf@len+1,w,c
 18516  00170A  B4D8               	btfsc	status,2,c
 18517  00170C  D0DA               	goto	i2l5568
 18518  00170E  D7E2               	goto	i2l5486
 18519  001710                     i2l5492:
 18520                           
 18521                           ;doprnt.c: 818: flag |= 0x40;
 18522  001710  8C26               	bsf	i2printf@flag,6,c
 18523                           
 18524                           ;doprnt.c: 822: }
 18525                           
 18526                           ;doprnt.c: 819: break;
 18527  001712  D01B               	goto	i2l1212
 18528  001714                     i2l5496:
 18529  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 18530  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18531  00171C  4A0D               	infsnz	i2printf@f,f,c
 18532  00171E  2A0E               	incf	i2printf@f+1,f,c
 18533  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18534  001720  6AF8               	clrf	tblptru,c
 18535  001722                     	endif
 18536  001722                     	if	0	;tblptru may be non-zero
 18537  001722                     	endif
 18538  001722  0008               	tblrd		*
 18539  001724  CFF5 F027          	movff	tablat,i2printf@c
 18540  001728  5027               	movf	i2printf@c,w,c
 18541                           
 18542                           ; Switch size 1, requested type "space"
 18543                           ; Number of cases is 5, Range of values is 0 to 117
 18544                           ; switch strategies available:
 18545                           ; Name         Instructions Cycles
 18546                           ; simple_byte           16     9 (average)
 18547                           ;	Chosen strategy is simple_byte
 18548  00172A  0A00               	xorlw	0	; case 0
 18549  00172C  B4D8               	btfsc	status,2,c
 18550  00172E  0012               	return	
 18551  001730  0A64               	xorlw	100	; case 100
 18552  001732  B4D8               	btfsc	status,2,c
 18553  001734  D00A               	goto	i2l1212
 18554  001736  0A0D               	xorlw	13	; case 105
 18555  001738  B4D8               	btfsc	status,2,c
 18556  00173A  D007               	goto	i2l1212
 18557  00173C  0A1A               	xorlw	26	; case 115
 18558  00173E  B4D8               	btfsc	status,2,c
 18559  001740  D778               	goto	i2l5462
 18560  001742  0A06               	xorlw	6	; case 117
 18561  001744  B4D8               	btfsc	status,2,c
 18562  001746  D7E4               	goto	i2l5492
 18563  001748  D0BC               	goto	i2l5568
 18564  00174A                     i2l1212:
 18565                           
 18566                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18567  00174A  BC26               	btfsc	i2printf@flag,6,c
 18568  00174C  D015               	goto	i2l5508
 18569                           
 18570                           ;doprnt.c: 1253: {
 18571                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18572  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18573  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18574  001756  CFDE F024          	movff	postinc2,i2printf@val
 18575  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 18576  00175E  0E02               	movlw	2
 18577  001760  2620               	addwf	i2printf@ap,f,c
 18578  001762  0E00               	movlw	0
 18579  001764  2221               	addwfc	i2printf@ap+1,f,c
 18580                           
 18581                           ;doprnt.c: 1261: if((int)val < 0) {
 18582  001766  AE25               	btfss	i2printf@val+1,7,c
 18583  001768  D013               	goto	i2l5512
 18584                           
 18585                           ;doprnt.c: 1262: flag |= 0x03;
 18586  00176A  0E03               	movlw	3
 18587  00176C  1226               	iorwf	i2printf@flag,f,c
 18588                           
 18589                           ;doprnt.c: 1263: val = -val;
 18590  00176E  6C24               	negf	i2printf@val,c
 18591  001770  1E25               	comf	i2printf@val+1,f,c
 18592  001772  B0D8               	btfsc	status,0,c
 18593  001774  2A25               	incf	i2printf@val+1,f,c
 18594                           
 18595                           ;doprnt.c: 1264: }
 18596                           ;doprnt.c: 1266: }
 18597  001776  D00C               	goto	i2l5512
 18598  001778                     i2l5508:
 18599                           
 18600                           ;doprnt.c: 1268: else
 18601                           ;doprnt.c: 1273: {
 18602                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18603  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 18604  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18605  001780  CFDE F024          	movff	postinc2,i2printf@val
 18606  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 18607  001788  0E02               	movlw	2
 18608  00178A  2620               	addwf	i2printf@ap,f,c
 18609  00178C  0E00               	movlw	0
 18610  00178E  2221               	addwfc	i2printf@ap+1,f,c
 18611  001790                     i2l5512:
 18612                           
 18613                           ;doprnt.c: 1287: }
 18614                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18615  001790  0E01               	movlw	1
 18616  001792  6E27               	movwf	i2printf@c,c
 18617  001794                     i2l5514:
 18618  001794  0E05               	movlw	5
 18619  001796  1827               	xorwf	i2printf@c,w,c
 18620  001798  B4D8               	btfsc	status,2,c
 18621  00179A  D015               	goto	i2l5526
 18622                           
 18623                           ;doprnt.c: 1306: if(val < dpowers[c])
 18624  00179C  5027               	movf	i2printf@c,w,c
 18625  00179E  0D02               	mullw	2
 18626  0017A0  0E4A               	movlw	low _dpowers
 18627  0017A2  24F3               	addwf	prodl,w,c
 18628  0017A4  6EF6               	movwf	tblptrl,c
 18629  0017A6  0EFB               	movlw	high _dpowers
 18630  0017A8  20F4               	addwfc	prodh,w,c
 18631  0017AA  6EF7               	movwf	tblptrh,c
 18632  0017AC                     	if	1	;There are 3 active tblptr bytes
 18633  0017AC  6AF8               	clrf	tblptru,c
 18634  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 18635  0017B0  22F8               	addwfc	tblptru,f,c
 18636  0017B2                     	endif
 18637  0017B2  0009               	tblrd		*+
 18638  0017B4  50F5               	movf	tablat,w,c
 18639  0017B6  5C24               	subwf	i2printf@val,w,c
 18640  0017B8  0009               	tblrd		*+
 18641  0017BA  50F5               	movf	tablat,w,c
 18642  0017BC  5825               	subwfb	i2printf@val+1,w,c
 18643  0017BE  A0D8               	btfss	status,0,c
 18644  0017C0  D002               	goto	i2l5526
 18645                           
 18646                           ;doprnt.c: 1307: break;
 18647  0017C2  2A27               	incf	i2printf@c,f,c
 18648  0017C4  D7E7               	goto	i2l5514
 18649  0017C6                     i2l5526:
 18650                           
 18651                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18652  0017C6  5028               	movf	i2printf@width,w,c
 18653  0017C8  1029               	iorwf	i2printf@width+1,w,c
 18654  0017CA  B4D8               	btfsc	status,2,c
 18655  0017CC  D009               	goto	i2l5532
 18656  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 18657  0017D2  0E03               	movlw	3
 18658  0017D4  1619               	andwf	??i2_printf,f,c
 18659  0017D6  B4D8               	btfsc	status,2,c
 18660  0017D8  D003               	goto	i2l5532
 18661                           
 18662                           ;doprnt.c: 1346: width--;
 18663  0017DA  0628               	decf	i2printf@width,f,c
 18664  0017DC  A0D8               	btfss	status,0,c
 18665  0017DE  0629               	decf	i2printf@width+1,f,c
 18666  0017E0                     i2l5532:
 18667                           
 18668                           ;doprnt.c: 1381: if(width > c)
 18669  0017E0  0E80               	movlw	128
 18670  0017E2  BE27               	btfsc	i2printf@c,7,c
 18671  0017E4  0E7F               	movlw	127
 18672  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 18673  0017E8  5028               	movf	i2printf@width,w,c
 18674  0017EA  5C27               	subwf	i2printf@c,w,c
 18675  0017EC  5029               	movf	i2printf@width+1,w,c
 18676  0017EE  0A80               	xorlw	128
 18677  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 18678  0017F2  B0D8               	btfsc	status,0,c
 18679  0017F4  D007               	goto	i2l5536
 18680                           
 18681                           ;doprnt.c: 1382: width -= c;
 18682  0017F6  5027               	movf	i2printf@c,w,c
 18683  0017F8  5E28               	subwf	i2printf@width,f,c
 18684  0017FA  0E00               	movlw	0
 18685  0017FC  BE27               	btfsc	i2printf@c,7,c
 18686  0017FE  0EFF               	movlw	255
 18687  001800  5A29               	subwfb	i2printf@width+1,f,c
 18688  001802  D004               	goto	i2l5538
 18689  001804                     i2l5536:
 18690                           
 18691                           ;doprnt.c: 1383: else
 18692                           ;doprnt.c: 1384: width = 0;
 18693  001804  0E00               	movlw	0
 18694  001806  6E29               	movwf	i2printf@width+1,c
 18695  001808  0E00               	movlw	0
 18696  00180A  6E28               	movwf	i2printf@width,c
 18697  00180C                     i2l5538:
 18698                           
 18699                           ;doprnt.c: 1387: if(flag & 0x04) {
 18700  00180C  A426               	btfss	i2printf@flag,2,c
 18701  00180E  D014               	goto	i2l5550
 18702                           
 18703                           ;doprnt.c: 1392: if(flag & 0x03)
 18704  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 18705  001814  0E03               	movlw	3
 18706  001816  1619               	andwf	??i2_printf,f,c
 18707  001818  B4D8               	btfsc	status,2,c
 18708  00181A  D003               	goto	i2l5544
 18709                           
 18710                           ;doprnt.c: 1393: (putch('-') );
 18711  00181C  0E2D               	movlw	45
 18712  00181E  ECEA  F020         	call	i2_putch
 18713  001822                     i2l5544:
 18714                           
 18715                           ;doprnt.c: 1415: if(width)
 18716  001822  5028               	movf	i2printf@width,w,c
 18717  001824  1029               	iorwf	i2printf@width+1,w,c
 18718  001826  B4D8               	btfsc	status,2,c
 18719  001828  D01E               	goto	i2l5560
 18720                           
 18721                           ;doprnt.c: 1417: (putch('0') );
 18722                           
 18723                           ;doprnt.c: 1416: do
 18724  00182A  0E30               	movlw	48
 18725  00182C  ECEA  F020         	call	i2_putch
 18726                           
 18727                           ;doprnt.c: 1418: while(--width);
 18728  001830  0628               	decf	i2printf@width,f,c
 18729  001832  A0D8               	btfss	status,0,c
 18730  001834  0629               	decf	i2printf@width+1,f,c
 18731  001836  D7F5               	goto	i2l5544
 18732  001838                     i2l5550:
 18733                           
 18734                           ;doprnt.c: 1422: {
 18735                           ;doprnt.c: 1424: if(width
 18736                           ;doprnt.c: 1428: )
 18737  001838  5028               	movf	i2printf@width,w,c
 18738  00183A  1029               	iorwf	i2printf@width+1,w,c
 18739  00183C  B4D8               	btfsc	status,2,c
 18740  00183E  D00A               	goto	i2l5556
 18741  001840                     i2l5552:
 18742                           
 18743                           ;doprnt.c: 1430: (putch(' ') );
 18744  001840  0E20               	movlw	32
 18745  001842  ECEA  F020         	call	i2_putch
 18746                           
 18747                           ;doprnt.c: 1431: while(--width);
 18748  001846  0628               	decf	i2printf@width,f,c
 18749  001848  A0D8               	btfss	status,0,c
 18750  00184A  0629               	decf	i2printf@width+1,f,c
 18751  00184C  5028               	movf	i2printf@width,w,c
 18752  00184E  1029               	iorwf	i2printf@width+1,w,c
 18753  001850  A4D8               	btfss	status,2,c
 18754  001852  D7F6               	goto	i2l5552
 18755  001854                     i2l5556:
 18756                           
 18757                           ;doprnt.c: 1438: if(flag & 0x03)
 18758  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 18759  001858  0E03               	movlw	3
 18760  00185A  1619               	andwf	??i2_printf,f,c
 18761  00185C  B4D8               	btfsc	status,2,c
 18762  00185E  D003               	goto	i2l5560
 18763                           
 18764                           ;doprnt.c: 1439: (putch('-') );
 18765  001860  0E2D               	movlw	45
 18766  001862  ECEA  F020         	call	i2_putch
 18767  001866                     i2l5560:
 18768                           
 18769                           ;doprnt.c: 1469: }
 18770                           ;doprnt.c: 1472: prec = c;
 18771  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 18772                           
 18773                           ;doprnt.c: 1474: while(prec--) {
 18774  00186A  D027               	goto	i2l5566
 18775  00186C                     i2l5562:
 18776                           
 18777                           ;doprnt.c: 1478: {
 18778                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18779  00186C  501D               	movf	i2printf@prec,w,c
 18780  00186E  0D02               	mullw	2
 18781  001870  0E4A               	movlw	low _dpowers
 18782  001872  24F3               	addwf	prodl,w,c
 18783  001874  6EF6               	movwf	tblptrl,c
 18784  001876  0EFB               	movlw	high _dpowers
 18785  001878  20F4               	addwfc	prodh,w,c
 18786  00187A  6EF7               	movwf	tblptrh,c
 18787  00187C                     	if	1	;There are 3 active tblptr bytes
 18788  00187C  6AF8               	clrf	tblptru,c
 18789  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 18790  001880  22F8               	addwfc	tblptru,f,c
 18791  001882                     	endif
 18792  001882  0009               	tblrd		*+
 18793  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18794  001888  000A               	tblrd		*-
 18795  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18796  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18797  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18798  001896  EC4E  F01D         	call	i2___lwdiv	;wreg free
 18799  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18800  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18801  0018A2  0E00               	movlw	0
 18802  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 18803  0018A6  0E0A               	movlw	10
 18804  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 18805  0018AA  EC0E  F01E         	call	i2___lwmod	;wreg free
 18806  0018AE  5001               	movf	?i2___lwmod,w,c
 18807  0018B0  0F30               	addlw	48
 18808  0018B2  6E27               	movwf	i2printf@c,c
 18809                           
 18810                           ;doprnt.c: 1523: }
 18811                           ;doprnt.c: 1524: (putch(c) );
 18812  0018B4  5027               	movf	i2printf@c,w,c
 18813  0018B6  ECEA  F020         	call	i2_putch
 18814  0018BA                     i2l5566:
 18815  0018BA  061D               	decf	i2printf@prec,f,c
 18816  0018BC  281D               	incf	i2printf@prec,w,c
 18817  0018BE  A4D8               	btfss	status,2,c
 18818  0018C0  D7D5               	goto	i2l5562
 18819  0018C2                     i2l5568:
 18820  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 18821  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18822  0018CA  4A0D               	infsnz	i2printf@f,f,c
 18823  0018CC  2A0E               	incf	i2printf@f+1,f,c
 18824  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18825  0018CE  6AF8               	clrf	tblptru,c
 18826  0018D0                     	endif
 18827  0018D0                     	if	0	;tblptru may be non-zero
 18828  0018D0                     	endif
 18829  0018D0  0008               	tblrd		*
 18830  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 18831  0018D6  5027               	movf	i2printf@c,w,c
 18832  0018D8  B4D8               	btfsc	status,2,c
 18833  0018DA  0012               	return	
 18834  0018DC  D64E               	goto	i2l5438
 18835  0018DE                     __end_ofi2_printf:
 18836                           	opt stack 0
 18837                           pclatu	equ	0xFFB
 18838                           pclath	equ	0xFFA
 18839                           tblptru	equ	0xFF8
 18840                           tblptrh	equ	0xFF7
 18841                           tblptrl	equ	0xFF6
 18842                           tablat	equ	0xFF5
 18843                           prodh	equ	0xFF4
 18844                           prodl	equ	0xFF3
 18845                           intcon	equ	0xFF2
 18846                           intcon2	equ	0xFF1
 18847                           intcon3	equ	0xFF0
 18848                           indf0	equ	0xFEF
 18849                           postinc0	equ	0xFEE
 18850                           fsr0h	equ	0xFEA
 18851                           fsr0l	equ	0xFE9
 18852                           wreg	equ	0xFE8
 18853                           postdec1	equ	0xFE5
 18854                           fsr1h	equ	0xFE2
 18855                           fsr1l	equ	0xFE1
 18856                           indf2	equ	0xFDF
 18857                           postinc2	equ	0xFDE
 18858                           postdec2	equ	0xFDD
 18859                           fsr2h	equ	0xFDA
 18860                           fsr2l	equ	0xFD9
 18861                           status	equ	0xFD8
 18862                           
 18863 ;; *************** function i2_putch *****************
 18864 ;; Defined at:
 18865 ;;		line 20 in file "lcd.c"
 18866 ;; Parameters:    Size  Location     Type
 18867 ;;  data            1    wreg     unsigned char 
 18868 ;; Auto vars:     Size  Location     Type
 18869 ;;  data            1    2[COMRAM] unsigned char 
 18870 ;; Return value:  Size  Location     Type
 18871 ;;                  1    wreg      void 
 18872 ;; Registers used:
 18873 ;;		wreg, status,2, status,0, cstack
 18874 ;; Tracked objects:
 18875 ;;		On entry : 0/0
 18876 ;;		On exit  : 0/0
 18877 ;;		Unchanged: 0/0
 18878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18883 ;;Total ram usage:        1 bytes
 18884 ;; Hardware stack levels used:    1
 18885 ;; Hardware stack levels required when called:    1
 18886 ;; This function calls:
 18887 ;;		i2_lcdNibble
 18888 ;; This function is called by:
 18889 ;;		i2_printf
 18890 ;; This function uses a non-reentrant model
 18891 ;;
 18892                           
 18893                           	psect	text76
 18894  0041D4                     __ptext76:
 18895                           	opt stack 0
 18896  0041D4                     i2_putch:
 18897                           	opt stack 19
 18898                           
 18899                           ;incstack = 0
 18900                           ;i2putch@data stored from wreg
 18901  0041D4  6E03               	movwf	i2putch@data,c
 18902                           
 18903                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18904  0041D6  848C               	bsf	3980,2,c	;volatile
 18905                           
 18906                           ;lcd.c: 22: lcdNibble(data);
 18907  0041D8  5003               	movf	i2putch@data,w,c
 18908  0041DA  EC23  F01D         	call	i2_lcdNibble
 18909  0041DE  0012               	return		;funcret
 18910  0041E0                     __end_ofi2_putch:
 18911                           	opt stack 0
 18912                           pclatu	equ	0xFFB
 18913                           pclath	equ	0xFFA
 18914                           tblptru	equ	0xFF8
 18915                           tblptrh	equ	0xFF7
 18916                           tblptrl	equ	0xFF6
 18917                           tablat	equ	0xFF5
 18918                           prodh	equ	0xFF4
 18919                           prodl	equ	0xFF3
 18920                           intcon	equ	0xFF2
 18921                           intcon2	equ	0xFF1
 18922                           intcon3	equ	0xFF0
 18923                           indf0	equ	0xFEF
 18924                           postinc0	equ	0xFEE
 18925                           fsr0h	equ	0xFEA
 18926                           fsr0l	equ	0xFE9
 18927                           wreg	equ	0xFE8
 18928                           postdec1	equ	0xFE5
 18929                           fsr1h	equ	0xFE2
 18930                           fsr1l	equ	0xFE1
 18931                           indf2	equ	0xFDF
 18932                           postinc2	equ	0xFDE
 18933                           postdec2	equ	0xFDD
 18934                           fsr2h	equ	0xFDA
 18935                           fsr2l	equ	0xFD9
 18936                           status	equ	0xFD8
 18937                           
 18938 ;; *************** function i2_isdigit *****************
 18939 ;; Defined at:
 18940 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;  c               1    wreg     unsigned char 
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;  c               1    2[COMRAM] unsigned char 
 18945 ;; Return value:  Size  Location     Type
 18946 ;;		None               void
 18947 ;; Registers used:
 18948 ;;		wreg, status,2, status,0
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18955 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;Total ram usage:        3 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; This function calls:
 18961 ;;		Nothing
 18962 ;; This function is called by:
 18963 ;;		i2_printf
 18964 ;; This function uses a non-reentrant model
 18965 ;;
 18966                           
 18967                           	psect	text77
 18968  00412C                     __ptext77:
 18969                           	opt stack 0
 18970  00412C                     i2_isdigit:
 18971                           	opt stack 20
 18972                           
 18973                           ;incstack = 0
 18974                           ;i2isdigit@c stored from wreg
 18975  00412C  6E03               	movwf	i2isdigit@c,c
 18976  00412E  0E00               	movlw	0
 18977  004130  6E02               	movwf	i2_isdigit$1872,c
 18978  004132  0E3A               	movlw	58
 18979  004134  6003               	cpfslt	i2isdigit@c,c
 18980  004136  D005               	goto	i2l5148
 18981  004138  0E2F               	movlw	47
 18982  00413A  6403               	cpfsgt	i2isdigit@c,c
 18983  00413C  D002               	goto	i2l5148
 18984  00413E  0E01               	movlw	1
 18985  004140  6E02               	movwf	i2_isdigit$1872,c
 18986  004142                     i2l5148:
 18987  004142  C002  F001         	movff	i2_isdigit$1872,??i2_isdigit
 18988  004146  3001               	rrcf	??i2_isdigit,w,c
 18989  004148  0012               	return	
 18990  00414A                     __end_ofi2_isdigit:
 18991                           	opt stack 0
 18992                           pclatu	equ	0xFFB
 18993                           pclath	equ	0xFFA
 18994                           tblptru	equ	0xFF8
 18995                           tblptrh	equ	0xFF7
 18996                           tblptrl	equ	0xFF6
 18997                           tablat	equ	0xFF5
 18998                           prodh	equ	0xFF4
 18999                           prodl	equ	0xFF3
 19000                           intcon	equ	0xFF2
 19001                           intcon2	equ	0xFF1
 19002                           intcon3	equ	0xFF0
 19003                           indf0	equ	0xFEF
 19004                           postinc0	equ	0xFEE
 19005                           fsr0h	equ	0xFEA
 19006                           fsr0l	equ	0xFE9
 19007                           wreg	equ	0xFE8
 19008                           postdec1	equ	0xFE5
 19009                           fsr1h	equ	0xFE2
 19010                           fsr1l	equ	0xFE1
 19011                           indf2	equ	0xFDF
 19012                           postinc2	equ	0xFDE
 19013                           postdec2	equ	0xFDD
 19014                           fsr2h	equ	0xFDA
 19015                           fsr2l	equ	0xFD9
 19016                           status	equ	0xFD8
 19017                           
 19018 ;; *************** function i2___wmul *****************
 19019 ;; Defined at:
 19020 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19021 ;; Parameters:    Size  Location     Type
 19022 ;;  multiplier      2    0[COMRAM] unsigned int 
 19023 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19024 ;; Auto vars:     Size  Location     Type
 19025 ;;  __wmul          2    4[COMRAM] unsigned int 
 19026 ;; Return value:  Size  Location     Type
 19027 ;;                  2    0[COMRAM] unsigned int 
 19028 ;; Registers used:
 19029 ;;		wreg, status,2, status,0, prodl, prodh
 19030 ;; Tracked objects:
 19031 ;;		On entry : 0/0
 19032 ;;		On exit  : 0/0
 19033 ;;		Unchanged: 0/0
 19034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19038 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19039 ;;Total ram usage:        6 bytes
 19040 ;; Hardware stack levels used:    1
 19041 ;; This function calls:
 19042 ;;		Nothing
 19043 ;; This function is called by:
 19044 ;;		_printSortTimer
 19045 ;;		_retrieveLog
 19046 ;;		i2_printf
 19047 ;; This function uses a non-reentrant model
 19048 ;;
 19049                           
 19050                           	psect	text78
 19051  004054                     __ptext78:
 19052                           	opt stack 0
 19053  004054                     i2___wmul:
 19054                           	opt stack 20
 19055                           
 19056                           ;incstack = 0
 19057  004054  5001               	movf	i2___wmul@multiplier,w,c
 19058  004056  0203               	mulwf	i2___wmul@multiplicand,c
 19059  004058  CFF3 F005          	movff	prodl,i2___wmul@product
 19060  00405C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19061  004060  5001               	movf	i2___wmul@multiplier,w,c
 19062  004062  0204               	mulwf	i2___wmul@multiplicand+1,c
 19063  004064  50F3               	movf	prodl,w,c
 19064  004066  2606               	addwf	i2___wmul@product+1,f,c
 19065  004068  5002               	movf	i2___wmul@multiplier+1,w,c
 19066  00406A  0203               	mulwf	i2___wmul@multiplicand,c
 19067  00406C  50F3               	movf	prodl,w,c
 19068  00406E  2606               	addwf	i2___wmul@product+1,f,c
 19069  004070  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19070  004074  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19071  004078  0012               	return	
 19072  00407A                     __end_ofi2___wmul:
 19073                           	opt stack 0
 19074                           pclatu	equ	0xFFB
 19075                           pclath	equ	0xFFA
 19076                           tblptru	equ	0xFF8
 19077                           tblptrh	equ	0xFF7
 19078                           tblptrl	equ	0xFF6
 19079                           tablat	equ	0xFF5
 19080                           prodh	equ	0xFF4
 19081                           prodl	equ	0xFF3
 19082                           intcon	equ	0xFF2
 19083                           intcon2	equ	0xFF1
 19084                           intcon3	equ	0xFF0
 19085                           indf0	equ	0xFEF
 19086                           postinc0	equ	0xFEE
 19087                           fsr0h	equ	0xFEA
 19088                           fsr0l	equ	0xFE9
 19089                           wreg	equ	0xFE8
 19090                           postdec1	equ	0xFE5
 19091                           fsr1h	equ	0xFE2
 19092                           fsr1l	equ	0xFE1
 19093                           indf2	equ	0xFDF
 19094                           postinc2	equ	0xFDE
 19095                           postdec2	equ	0xFDD
 19096                           fsr2h	equ	0xFDA
 19097                           fsr2l	equ	0xFD9
 19098                           status	equ	0xFD8
 19099                           
 19100 ;; *************** function i2___lwmod *****************
 19101 ;; Defined at:
 19102 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19103 ;; Parameters:    Size  Location     Type
 19104 ;;  dividend        2    0[COMRAM] unsigned int 
 19105 ;;  divisor         2    2[COMRAM] unsigned int 
 19106 ;; Auto vars:     Size  Location     Type
 19107 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19108 ;; Return value:  Size  Location     Type
 19109 ;;                  2    0[COMRAM] unsigned int 
 19110 ;; Registers used:
 19111 ;;		wreg, status,2, status,0
 19112 ;; Tracked objects:
 19113 ;;		On entry : 0/0
 19114 ;;		On exit  : 0/0
 19115 ;;		Unchanged: 0/0
 19116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19120 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19121 ;;Total ram usage:        5 bytes
 19122 ;; Hardware stack levels used:    1
 19123 ;; This function calls:
 19124 ;;		Nothing
 19125 ;; This function is called by:
 19126 ;;		_printSortTimer
 19127 ;;		i2_printf
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           	psect	text79
 19132  003C1C                     __ptext79:
 19133                           	opt stack 0
 19134  003C1C                     i2___lwmod:
 19135                           	opt stack 20
 19136                           
 19137                           ;incstack = 0
 19138  003C1C  5003               	movf	i2___lwmod@divisor,w,c
 19139  003C1E  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19140  003C20  B4D8               	btfsc	status,2,c
 19141  003C22  D018               	goto	i2l1669
 19142  003C24  0E01               	movlw	1
 19143  003C26  6E05               	movwf	i2___lwmod@counter,c
 19144  003C28  D004               	goto	i2l5180
 19145  003C2A                     i2l5178:
 19146  003C2A  90D8               	bcf	status,0,c
 19147  003C2C  3603               	rlcf	i2___lwmod@divisor,f,c
 19148  003C2E  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19149  003C30  2A05               	incf	i2___lwmod@counter,f,c
 19150  003C32                     i2l5180:
 19151  003C32  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19152  003C34  D7FA               	goto	i2l5178
 19153  003C36                     i2l5182:
 19154  003C36  5003               	movf	i2___lwmod@divisor,w,c
 19155  003C38  5C01               	subwf	i2___lwmod@dividend,w,c
 19156  003C3A  5004               	movf	i2___lwmod@divisor+1,w,c
 19157  003C3C  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19158  003C3E  A0D8               	btfss	status,0,c
 19159  003C40  D004               	goto	i2l5186
 19160  003C42  5003               	movf	i2___lwmod@divisor,w,c
 19161  003C44  5E01               	subwf	i2___lwmod@dividend,f,c
 19162  003C46  5004               	movf	i2___lwmod@divisor+1,w,c
 19163  003C48  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19164  003C4A                     i2l5186:
 19165  003C4A  90D8               	bcf	status,0,c
 19166  003C4C  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19167  003C4E  3203               	rrcf	i2___lwmod@divisor,f,c
 19168  003C50  2E05               	decfsz	i2___lwmod@counter,f,c
 19169  003C52  D7F1               	goto	i2l5182
 19170  003C54                     i2l1669:
 19171  003C54  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19172  003C58  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19173  003C5C  0012               	return		;funcret
 19174  003C5E                     __end_ofi2___lwmod:
 19175                           	opt stack 0
 19176                           pclatu	equ	0xFFB
 19177                           pclath	equ	0xFFA
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           intcon2	equ	0xFF1
 19186                           intcon3	equ	0xFF0
 19187                           indf0	equ	0xFEF
 19188                           postinc0	equ	0xFEE
 19189                           fsr0h	equ	0xFEA
 19190                           fsr0l	equ	0xFE9
 19191                           wreg	equ	0xFE8
 19192                           postdec1	equ	0xFE5
 19193                           fsr1h	equ	0xFE2
 19194                           fsr1l	equ	0xFE1
 19195                           indf2	equ	0xFDF
 19196                           postinc2	equ	0xFDE
 19197                           postdec2	equ	0xFDD
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function i2___lwdiv *****************
 19203 ;; Defined at:
 19204 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  dividend        2    5[COMRAM] unsigned int 
 19207 ;;  divisor         2    7[COMRAM] unsigned int 
 19208 ;; Auto vars:     Size  Location     Type
 19209 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19210 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19211 ;; Return value:  Size  Location     Type
 19212 ;;                  2    5[COMRAM] unsigned int 
 19213 ;; Registers used:
 19214 ;;		wreg, status,2, status,0
 19215 ;; Tracked objects:
 19216 ;;		On entry : 0/0
 19217 ;;		On exit  : 0/0
 19218 ;;		Unchanged: 0/0
 19219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19224 ;;Total ram usage:        7 bytes
 19225 ;; Hardware stack levels used:    1
 19226 ;; This function calls:
 19227 ;;		Nothing
 19228 ;; This function is called by:
 19229 ;;		_printSortTimer
 19230 ;;		i2_printf
 19231 ;; This function uses a non-reentrant model
 19232 ;;
 19233                           
 19234                           	psect	text80
 19235  003A9C                     __ptext80:
 19236                           	opt stack 0
 19237  003A9C                     i2___lwdiv:
 19238                           	opt stack 20
 19239                           
 19240                           ;incstack = 0
 19241  003A9C  0E00               	movlw	0
 19242  003A9E  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19243  003AA0  0E00               	movlw	0
 19244  003AA2  6E0A               	movwf	i2___lwdiv@quotient,c
 19245  003AA4  5008               	movf	i2___lwdiv@divisor,w,c
 19246  003AA6  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19247  003AA8  B4D8               	btfsc	status,2,c
 19248  003AAA  D01C               	goto	i2l1659
 19249  003AAC  0E01               	movlw	1
 19250  003AAE  6E0C               	movwf	i2___lwdiv@counter,c
 19251  003AB0  D004               	goto	i2l5160
 19252  003AB2                     i2l5158:
 19253  003AB2  90D8               	bcf	status,0,c
 19254  003AB4  3608               	rlcf	i2___lwdiv@divisor,f,c
 19255  003AB6  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19256  003AB8  2A0C               	incf	i2___lwdiv@counter,f,c
 19257  003ABA                     i2l5160:
 19258  003ABA  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19259  003ABC  D7FA               	goto	i2l5158
 19260  003ABE                     i2l5162:
 19261  003ABE  90D8               	bcf	status,0,c
 19262  003AC0  360A               	rlcf	i2___lwdiv@quotient,f,c
 19263  003AC2  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 19264  003AC4  5008               	movf	i2___lwdiv@divisor,w,c
 19265  003AC6  5C06               	subwf	i2___lwdiv@dividend,w,c
 19266  003AC8  5009               	movf	i2___lwdiv@divisor+1,w,c
 19267  003ACA  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 19268  003ACC  A0D8               	btfss	status,0,c
 19269  003ACE  D005               	goto	i2l5170
 19270  003AD0  5008               	movf	i2___lwdiv@divisor,w,c
 19271  003AD2  5E06               	subwf	i2___lwdiv@dividend,f,c
 19272  003AD4  5009               	movf	i2___lwdiv@divisor+1,w,c
 19273  003AD6  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 19274  003AD8  800A               	bsf	i2___lwdiv@quotient,0,c
 19275  003ADA                     i2l5170:
 19276  003ADA  90D8               	bcf	status,0,c
 19277  003ADC  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 19278  003ADE  3208               	rrcf	i2___lwdiv@divisor,f,c
 19279  003AE0  2E0C               	decfsz	i2___lwdiv@counter,f,c
 19280  003AE2  D7ED               	goto	i2l5162
 19281  003AE4                     i2l1659:
 19282  003AE4  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 19283  003AE8  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 19284  003AEC  0012               	return		;funcret
 19285  003AEE                     __end_ofi2___lwdiv:
 19286                           	opt stack 0
 19287                           pclatu	equ	0xFFB
 19288                           pclath	equ	0xFFA
 19289                           tblptru	equ	0xFF8
 19290                           tblptrh	equ	0xFF7
 19291                           tblptrl	equ	0xFF6
 19292                           tablat	equ	0xFF5
 19293                           prodh	equ	0xFF4
 19294                           prodl	equ	0xFF3
 19295                           intcon	equ	0xFF2
 19296                           intcon2	equ	0xFF1
 19297                           intcon3	equ	0xFF0
 19298                           indf0	equ	0xFEF
 19299                           postinc0	equ	0xFEE
 19300                           fsr0h	equ	0xFEA
 19301                           fsr0l	equ	0xFE9
 19302                           wreg	equ	0xFE8
 19303                           postdec1	equ	0xFE5
 19304                           fsr1h	equ	0xFE2
 19305                           fsr1l	equ	0xFE1
 19306                           indf2	equ	0xFDF
 19307                           postinc2	equ	0xFDE
 19308                           postdec2	equ	0xFDD
 19309                           fsr2h	equ	0xFDA
 19310                           fsr2l	equ	0xFD9
 19311                           status	equ	0xFD8
 19312                           
 19313 ;; *************** function i2_lcdInst *****************
 19314 ;; Defined at:
 19315 ;;		line 15 in file "lcd.c"
 19316 ;; Parameters:    Size  Location     Type
 19317 ;;  data            1    wreg     unsigned char 
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;  data            1    2[COMRAM] unsigned char 
 19320 ;; Return value:  Size  Location     Type
 19321 ;;                  1    wreg      void 
 19322 ;; Registers used:
 19323 ;;		wreg, status,2, status,0, cstack
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/0
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19333 ;;Total ram usage:        1 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    1
 19336 ;; This function calls:
 19337 ;;		i2_lcdNibble
 19338 ;; This function is called by:
 19339 ;;		_change_state_to_menu_11
 19340 ;;		_change_state_to_menu_23
 19341 ;;		_change_state_to_logs_11
 19342 ;;		_change_state_to_logs_12
 19343 ;;		_change_state_to_logs_22
 19344 ;;		_change_state_to_logs_23
 19345 ;;		_change_state_to_logs_33
 19346 ;;		_change_state_to_logs_34
 19347 ;;		_printSortTimer
 19348 ;;		i2_change_state_to_menu_start
 19349 ;;		i2_change_state_to_menu_12
 19350 ;;		i2_change_state_to_menu_22
 19351 ;;		i2_printRTC
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           	psect	text81
 19356  0041E0                     __ptext81:
 19357                           	opt stack 0
 19358  0041E0                     i2_lcdInst:
 19359                           	opt stack 19
 19360                           
 19361                           ;incstack = 0
 19362                           ;i2lcdInst@data stored from wreg
 19363  0041E0  6E03               	movwf	i2lcdInst@data,c
 19364                           
 19365                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19366  0041E2  948C               	bcf	3980,2,c	;volatile
 19367                           
 19368                           ;lcd.c: 17: lcdNibble(data);
 19369  0041E4  5003               	movf	i2lcdInst@data,w,c
 19370  0041E6  EC23  F01D         	call	i2_lcdNibble
 19371  0041EA  0012               	return		;funcret
 19372  0041EC                     __end_ofi2_lcdInst:
 19373                           	opt stack 0
 19374                           pclatu	equ	0xFFB
 19375                           pclath	equ	0xFFA
 19376                           tblptru	equ	0xFF8
 19377                           tblptrh	equ	0xFF7
 19378                           tblptrl	equ	0xFF6
 19379                           tablat	equ	0xFF5
 19380                           prodh	equ	0xFF4
 19381                           prodl	equ	0xFF3
 19382                           intcon	equ	0xFF2
 19383                           intcon2	equ	0xFF1
 19384                           intcon3	equ	0xFF0
 19385                           indf0	equ	0xFEF
 19386                           postinc0	equ	0xFEE
 19387                           fsr0h	equ	0xFEA
 19388                           fsr0l	equ	0xFE9
 19389                           wreg	equ	0xFE8
 19390                           postdec1	equ	0xFE5
 19391                           fsr1h	equ	0xFE2
 19392                           fsr1l	equ	0xFE1
 19393                           indf2	equ	0xFDF
 19394                           postinc2	equ	0xFDE
 19395                           postdec2	equ	0xFDD
 19396                           fsr2h	equ	0xFDA
 19397                           fsr2l	equ	0xFD9
 19398                           status	equ	0xFD8
 19399                           
 19400 ;; *************** function i2_lcdNibble *****************
 19401 ;; Defined at:
 19402 ;;		line 25 in file "lcd.c"
 19403 ;; Parameters:    Size  Location     Type
 19404 ;;  data            1    wreg     unsigned char 
 19405 ;; Auto vars:     Size  Location     Type
 19406 ;;  data            1    1[COMRAM] unsigned char 
 19407 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19408 ;; Return value:  Size  Location     Type
 19409 ;;                  1    wreg      void 
 19410 ;; Registers used:
 19411 ;;		wreg, status,2, status,0
 19412 ;; Tracked objects:
 19413 ;;		On entry : 0/0
 19414 ;;		On exit  : 0/0
 19415 ;;		Unchanged: 0/0
 19416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;Total ram usage:        2 bytes
 19422 ;; Hardware stack levels used:    1
 19423 ;; This function calls:
 19424 ;;		Nothing
 19425 ;; This function is called by:
 19426 ;;		i2_lcdInst
 19427 ;;		i2_putch
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text82
 19432  003A46                     __ptext82:
 19433                           	opt stack 0
 19434  003A46                     i2_lcdNibble:
 19435                           	opt stack 19
 19436                           
 19437                           ;incstack = 0
 19438                           ;i2lcdNibble@data stored from wreg
 19439  003A46  6E02               	movwf	i2lcdNibble@data,c
 19440                           
 19441                           ;lcd.c: 27: char temp = data & 0xF0;
 19442  003A48  5002               	movf	i2lcdNibble@data,w,c
 19443  003A4A  0BF0               	andlw	240
 19444  003A4C  6E01               	movwf	i2lcdNibble@temp,c
 19445                           
 19446                           ;lcd.c: 28: LATD = LATD & 0x0F;
 19447  003A4E  508C               	movf	3980,w,c	;volatile
 19448  003A50  0B0F               	andlw	15
 19449  003A52  6E8C               	movwf	3980,c	;volatile
 19450                           
 19451                           ;lcd.c: 29: LATD = temp | LATD;
 19452  003A54  5001               	movf	i2lcdNibble@temp,w,c
 19453  003A56  108C               	iorwf	3980,w,c	;volatile
 19454  003A58  6E8C               	movwf	3980,c	;volatile
 19455                           
 19456                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 19457  003A5A  868C               	bsf	3980,3,c	;volatile
 19458                           
 19459                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19460  003A5C  0E42               	movlw	66
 19461  003A5E                     i2u766_47:
 19462  003A5E  2EE8               	decfsz	wreg,f,c
 19463  003A60  D7FE               	bra	i2u766_47
 19464  003A62  D000               	nop2	
 19465                           
 19466                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 19467  003A64  968C               	bcf	3980,3,c	;volatile
 19468                           
 19469                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19470  003A66  0E42               	movlw	66
 19471  003A68                     i2u767_47:
 19472  003A68  2EE8               	decfsz	wreg,f,c
 19473  003A6A  D7FE               	bra	i2u767_47
 19474  003A6C  D000               	nop2	
 19475                           
 19476                           ;lcd.c: 36: data = data << 4;
 19477  003A6E  3802               	swapf	i2lcdNibble@data,w,c
 19478  003A70  0BF0               	andlw	240
 19479  003A72  6E02               	movwf	i2lcdNibble@data,c
 19480                           
 19481                           ;lcd.c: 38: temp = data & 0xF0;
 19482  003A74  5002               	movf	i2lcdNibble@data,w,c
 19483  003A76  0BF0               	andlw	240
 19484  003A78  6E01               	movwf	i2lcdNibble@temp,c
 19485                           
 19486                           ;lcd.c: 39: LATD = LATD & 0x0F;
 19487  003A7A  508C               	movf	3980,w,c	;volatile
 19488  003A7C  0B0F               	andlw	15
 19489  003A7E  6E8C               	movwf	3980,c	;volatile
 19490                           
 19491                           ;lcd.c: 40: LATD = temp | LATD;
 19492  003A80  5001               	movf	i2lcdNibble@temp,w,c
 19493  003A82  108C               	iorwf	3980,w,c	;volatile
 19494  003A84  6E8C               	movwf	3980,c	;volatile
 19495                           
 19496                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 19497  003A86  868C               	bsf	3980,3,c	;volatile
 19498                           
 19499                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19500  003A88  0E42               	movlw	66
 19501  003A8A                     i2u768_47:
 19502  003A8A  2EE8               	decfsz	wreg,f,c
 19503  003A8C  D7FE               	bra	i2u768_47
 19504  003A8E  D000               	nop2	
 19505                           
 19506                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 19507  003A90  968C               	bcf	3980,3,c	;volatile
 19508                           
 19509                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19510  003A92  0E42               	movlw	66
 19511  003A94                     i2u769_47:
 19512  003A94  2EE8               	decfsz	wreg,f,c
 19513  003A96  D7FE               	bra	i2u769_47
 19514  003A98  D000               	nop2	
 19515  003A9A  0012               	return		;funcret
 19516  003A9C                     __end_ofi2_lcdNibble:
 19517                           	opt stack 0
 19518                           pclatu	equ	0xFFB
 19519                           pclath	equ	0xFFA
 19520                           tblptru	equ	0xFF8
 19521                           tblptrh	equ	0xFF7
 19522                           tblptrl	equ	0xFF6
 19523                           tablat	equ	0xFF5
 19524                           prodh	equ	0xFF4
 19525                           prodl	equ	0xFF3
 19526                           intcon	equ	0xFF2
 19527                           intcon2	equ	0xFF1
 19528                           intcon3	equ	0xFF0
 19529                           indf0	equ	0xFEF
 19530                           postinc0	equ	0xFEE
 19531                           fsr0h	equ	0xFEA
 19532                           fsr0l	equ	0xFE9
 19533                           wreg	equ	0xFE8
 19534                           postdec1	equ	0xFE5
 19535                           fsr1h	equ	0xFE2
 19536                           fsr1l	equ	0xFE1
 19537                           indf2	equ	0xFDF
 19538                           postinc2	equ	0xFDE
 19539                           postdec2	equ	0xFDD
 19540                           fsr2h	equ	0xFDA
 19541                           fsr2l	equ	0xFD9
 19542                           status	equ	0xFD8
 19543                           
 19544 ;; *************** function i2_getRTC *****************
 19545 ;; Defined at:
 19546 ;;		line 44 in file "RTC.c"
 19547 ;; Parameters:    Size  Location     Type
 19548 ;;		None
 19549 ;; Auto vars:     Size  Location     Type
 19550 ;;  getRTC          2    3[COMRAM] int 
 19551 ;; Return value:  Size  Location     Type
 19552 ;;                  1    wreg      void 
 19553 ;; Registers used:
 19554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19555 ;; Tracked objects:
 19556 ;;		On entry : 0/0
 19557 ;;		On exit  : 0/0
 19558 ;;		Unchanged: 0/0
 19559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19564 ;;Total ram usage:        2 bytes
 19565 ;; Hardware stack levels used:    1
 19566 ;; Hardware stack levels required when called:    2
 19567 ;; This function calls:
 19568 ;;		i2_I2C_Master_Read
 19569 ;;		i2_I2C_Master_Start
 19570 ;;		i2_I2C_Master_Stop
 19571 ;;		i2_I2C_Master_Write
 19572 ;; This function is called by:
 19573 ;;		_printSortTimer
 19574 ;;		i2_printRTC
 19575 ;; This function uses a non-reentrant model
 19576 ;;
 19577                           
 19578                           	psect	text83
 19579  003734                     __ptext83:
 19580                           	opt stack 0
 19581  003734                     i2_getRTC:
 19582                           	opt stack 18
 19583                           
 19584                           ;RTC.c: 48: I2C_Master_Start();
 19585                           
 19586                           ;incstack = 0
 19587  003734  EC10  F021         	call	i2_I2C_Master_Start	;wreg free
 19588                           
 19589                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19590  003738  0E00               	movlw	0
 19591  00373A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19592  00373C  0ED0               	movlw	208
 19593  00373E  6E02               	movwf	i2I2C_Master_Write@d,c
 19594  003740  ECFB  F020         	call	i2_I2C_Master_Write	;wreg free
 19595                           
 19596                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19597  003744  0E00               	movlw	0
 19598  003746  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19599  003748  0E00               	movlw	0
 19600  00374A  6E02               	movwf	i2I2C_Master_Write@d,c
 19601  00374C  ECFB  F020         	call	i2_I2C_Master_Write	;wreg free
 19602                           
 19603                           ;RTC.c: 51: I2C_Master_Stop();
 19604  003750  EC0C  F021         	call	i2_I2C_Master_Stop	;wreg free
 19605                           
 19606                           ;RTC.c: 54: I2C_Master_Start();
 19607  003754  EC10  F021         	call	i2_I2C_Master_Start	;wreg free
 19608                           
 19609                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19610  003758  0E00               	movlw	0
 19611  00375A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19612  00375C  0ED1               	movlw	209
 19613  00375E  6E02               	movwf	i2I2C_Master_Write@d,c
 19614  003760  ECFB  F020         	call	i2_I2C_Master_Write	;wreg free
 19615                           
 19616                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19617  003764  0E00               	movlw	0
 19618  003766  6E05               	movwf	i2getRTC@i+1,c
 19619  003768  0E00               	movlw	0
 19620  00376A  6E04               	movwf	i2getRTC@i,c
 19621  00376C                     i2l5410:
 19622  00376C  BE05               	btfsc	i2getRTC@i+1,7,c
 19623  00376E  D006               	goto	i2l5414
 19624  003770  5005               	movf	i2getRTC@i+1,w,c
 19625  003772  E111               	bnz	i2l5420
 19626  003774  0E06               	movlw	6
 19627  003776  5C04               	subwf	i2getRTC@i,w,c
 19628  003778  B0D8               	btfsc	status,0,c
 19629  00377A  D00D               	goto	i2l5420
 19630  00377C                     i2l5414:
 19631                           
 19632                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19633  00377C  0E24               	movlw	low _time
 19634  00377E  2404               	addwf	i2getRTC@i,w,c
 19635  003780  6ED9               	movwf	fsr2l,c
 19636  003782  0E01               	movlw	high _time
 19637  003784  2005               	addwfc	i2getRTC@i+1,w,c
 19638  003786  6EDA               	movwf	fsr2h,c
 19639  003788  0E01               	movlw	1
 19640  00378A  EC3D  F020         	call	i2_I2C_Master_Read
 19641  00378E  6EDF               	movwf	indf2,c
 19642  003790  4A04               	infsnz	i2getRTC@i,f,c
 19643  003792  2A05               	incf	i2getRTC@i+1,f,c
 19644  003794  D7EB               	goto	i2l5410
 19645  003796                     i2l5420:
 19646                           
 19647                           ;RTC.c: 58: }
 19648                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19649  003796  0E00               	movlw	0
 19650  003798  EC3D  F020         	call	i2_I2C_Master_Read
 19651  00379C  0101               	movlb	1	; () banked
 19652  00379E  6F2A               	movwf	(_time+6)& (0+255),b
 19653                           
 19654                           ;RTC.c: 60: I2C_Master_Stop();
 19655  0037A0  EC0C  F021         	call	i2_I2C_Master_Stop	;wreg free
 19656  0037A4  0012               	return		;funcret
 19657  0037A6                     __end_ofi2_getRTC:
 19658                           	opt stack 0
 19659                           pclatu	equ	0xFFB
 19660                           pclath	equ	0xFFA
 19661                           tblptru	equ	0xFF8
 19662                           tblptrh	equ	0xFF7
 19663                           tblptrl	equ	0xFF6
 19664                           tablat	equ	0xFF5
 19665                           prodh	equ	0xFF4
 19666                           prodl	equ	0xFF3
 19667                           intcon	equ	0xFF2
 19668                           intcon2	equ	0xFF1
 19669                           intcon3	equ	0xFF0
 19670                           indf0	equ	0xFEF
 19671                           postinc0	equ	0xFEE
 19672                           fsr0h	equ	0xFEA
 19673                           fsr0l	equ	0xFE9
 19674                           wreg	equ	0xFE8
 19675                           postdec1	equ	0xFE5
 19676                           fsr1h	equ	0xFE2
 19677                           fsr1l	equ	0xFE1
 19678                           indf2	equ	0xFDF
 19679                           postinc2	equ	0xFDE
 19680                           postdec2	equ	0xFDD
 19681                           fsr2h	equ	0xFDA
 19682                           fsr2l	equ	0xFD9
 19683                           status	equ	0xFD8
 19684                           
 19685 ;; *************** function i2_I2C_Master_Write *****************
 19686 ;; Defined at:
 19687 ;;		line 49 in file "I2C.c"
 19688 ;; Parameters:    Size  Location     Type
 19689 ;;  d               2    1[COMRAM] unsigned int 
 19690 ;; Auto vars:     Size  Location     Type
 19691 ;;		None
 19692 ;; Return value:  Size  Location     Type
 19693 ;;                  1    wreg      void 
 19694 ;; Registers used:
 19695 ;;		wreg, status,2, status,0, cstack
 19696 ;; Tracked objects:
 19697 ;;		On entry : 0/0
 19698 ;;		On exit  : 0/0
 19699 ;;		Unchanged: 0/0
 19700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19705 ;;Total ram usage:        2 bytes
 19706 ;; Hardware stack levels used:    1
 19707 ;; Hardware stack levels required when called:    1
 19708 ;; This function calls:
 19709 ;;		i2_I2C_Master_Wait
 19710 ;; This function is called by:
 19711 ;;		i2_getRTC
 19712 ;; This function uses a non-reentrant model
 19713 ;;
 19714                           
 19715                           	psect	text84
 19716  0041F6                     __ptext84:
 19717                           	opt stack 0
 19718  0041F6                     i2_I2C_Master_Write:
 19719                           	opt stack 18
 19720                           
 19721                           ;I2C.c: 51: I2C_Master_Wait();
 19722                           
 19723                           ;incstack = 0
 19724  0041F6  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19725                           
 19726                           ;I2C.c: 52: SSPBUF = d;
 19727  0041FA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19728  0041FE  0012               	return		;funcret
 19729  004200                     __end_ofi2_I2C_Master_Write:
 19730                           	opt stack 0
 19731                           pclatu	equ	0xFFB
 19732                           pclath	equ	0xFFA
 19733                           tblptru	equ	0xFF8
 19734                           tblptrh	equ	0xFF7
 19735                           tblptrl	equ	0xFF6
 19736                           tablat	equ	0xFF5
 19737                           prodh	equ	0xFF4
 19738                           prodl	equ	0xFF3
 19739                           intcon	equ	0xFF2
 19740                           intcon2	equ	0xFF1
 19741                           intcon3	equ	0xFF0
 19742                           indf0	equ	0xFEF
 19743                           postinc0	equ	0xFEE
 19744                           fsr0h	equ	0xFEA
 19745                           fsr0l	equ	0xFE9
 19746                           wreg	equ	0xFE8
 19747                           postdec1	equ	0xFE5
 19748                           fsr1h	equ	0xFE2
 19749                           fsr1l	equ	0xFE1
 19750                           indf2	equ	0xFDF
 19751                           postinc2	equ	0xFDE
 19752                           postdec2	equ	0xFDD
 19753                           fsr2h	equ	0xFDA
 19754                           fsr2l	equ	0xFD9
 19755                           status	equ	0xFD8
 19756                           
 19757 ;; *************** function i2_I2C_Master_Stop *****************
 19758 ;; Defined at:
 19759 ;;		line 43 in file "I2C.c"
 19760 ;; Parameters:    Size  Location     Type
 19761 ;;		None
 19762 ;; Auto vars:     Size  Location     Type
 19763 ;;		None
 19764 ;; Return value:  Size  Location     Type
 19765 ;;                  1    wreg      void 
 19766 ;; Registers used:
 19767 ;;		wreg, status,2, status,0, cstack
 19768 ;; Tracked objects:
 19769 ;;		On entry : 0/0
 19770 ;;		On exit  : 0/0
 19771 ;;		Unchanged: 0/0
 19772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;Total ram usage:        0 bytes
 19778 ;; Hardware stack levels used:    1
 19779 ;; Hardware stack levels required when called:    1
 19780 ;; This function calls:
 19781 ;;		i2_I2C_Master_Wait
 19782 ;; This function is called by:
 19783 ;;		i2_getRTC
 19784 ;; This function uses a non-reentrant model
 19785 ;;
 19786                           
 19787                           	psect	text85
 19788  004218                     __ptext85:
 19789                           	opt stack 0
 19790  004218                     i2_I2C_Master_Stop:
 19791                           	opt stack 18
 19792                           
 19793                           ;I2C.c: 45: I2C_Master_Wait();
 19794                           
 19795                           ;incstack = 0
 19796  004218  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19797                           
 19798                           ;I2C.c: 46: PEN = 1;
 19799  00421C  84C5               	bsf	4037,2,c	;volatile
 19800  00421E  0012               	return		;funcret
 19801  004220                     __end_ofi2_I2C_Master_Stop:
 19802                           	opt stack 0
 19803                           pclatu	equ	0xFFB
 19804                           pclath	equ	0xFFA
 19805                           tblptru	equ	0xFF8
 19806                           tblptrh	equ	0xFF7
 19807                           tblptrl	equ	0xFF6
 19808                           tablat	equ	0xFF5
 19809                           prodh	equ	0xFF4
 19810                           prodl	equ	0xFF3
 19811                           intcon	equ	0xFF2
 19812                           intcon2	equ	0xFF1
 19813                           intcon3	equ	0xFF0
 19814                           indf0	equ	0xFEF
 19815                           postinc0	equ	0xFEE
 19816                           fsr0h	equ	0xFEA
 19817                           fsr0l	equ	0xFE9
 19818                           wreg	equ	0xFE8
 19819                           postdec1	equ	0xFE5
 19820                           fsr1h	equ	0xFE2
 19821                           fsr1l	equ	0xFE1
 19822                           indf2	equ	0xFDF
 19823                           postinc2	equ	0xFDE
 19824                           postdec2	equ	0xFDD
 19825                           fsr2h	equ	0xFDA
 19826                           fsr2l	equ	0xFD9
 19827                           status	equ	0xFD8
 19828                           
 19829 ;; *************** function i2_I2C_Master_Start *****************
 19830 ;; Defined at:
 19831 ;;		line 31 in file "I2C.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;		None
 19834 ;; Auto vars:     Size  Location     Type
 19835 ;;		None
 19836 ;; Return value:  Size  Location     Type
 19837 ;;                  1    wreg      void 
 19838 ;; Registers used:
 19839 ;;		wreg, status,2, status,0, cstack
 19840 ;; Tracked objects:
 19841 ;;		On entry : 0/0
 19842 ;;		On exit  : 0/0
 19843 ;;		Unchanged: 0/0
 19844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;Total ram usage:        0 bytes
 19850 ;; Hardware stack levels used:    1
 19851 ;; Hardware stack levels required when called:    1
 19852 ;; This function calls:
 19853 ;;		i2_I2C_Master_Wait
 19854 ;; This function is called by:
 19855 ;;		i2_getRTC
 19856 ;; This function uses a non-reentrant model
 19857 ;;
 19858                           
 19859                           	psect	text86
 19860  004220                     __ptext86:
 19861                           	opt stack 0
 19862  004220                     i2_I2C_Master_Start:
 19863                           	opt stack 18
 19864                           
 19865                           ;I2C.c: 33: I2C_Master_Wait();
 19866                           
 19867                           ;incstack = 0
 19868  004220  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19869                           
 19870                           ;I2C.c: 34: SEN = 1;
 19871  004224  80C5               	bsf	4037,0,c	;volatile
 19872  004226  0012               	return		;funcret
 19873  004228                     __end_ofi2_I2C_Master_Start:
 19874                           	opt stack 0
 19875                           pclatu	equ	0xFFB
 19876                           pclath	equ	0xFFA
 19877                           tblptru	equ	0xFF8
 19878                           tblptrh	equ	0xFF7
 19879                           tblptrl	equ	0xFF6
 19880                           tablat	equ	0xFF5
 19881                           prodh	equ	0xFF4
 19882                           prodl	equ	0xFF3
 19883                           intcon	equ	0xFF2
 19884                           intcon2	equ	0xFF1
 19885                           intcon3	equ	0xFF0
 19886                           indf0	equ	0xFEF
 19887                           postinc0	equ	0xFEE
 19888                           fsr0h	equ	0xFEA
 19889                           fsr0l	equ	0xFE9
 19890                           wreg	equ	0xFE8
 19891                           postdec1	equ	0xFE5
 19892                           fsr1h	equ	0xFE2
 19893                           fsr1l	equ	0xFE1
 19894                           indf2	equ	0xFDF
 19895                           postinc2	equ	0xFDE
 19896                           postdec2	equ	0xFDD
 19897                           fsr2h	equ	0xFDA
 19898                           fsr2l	equ	0xFD9
 19899                           status	equ	0xFD8
 19900                           
 19901 ;; *************** function i2_I2C_Master_Read *****************
 19902 ;; Defined at:
 19903 ;;		line 55 in file "I2C.c"
 19904 ;; Parameters:    Size  Location     Type
 19905 ;;  a               1    wreg     unsigned char 
 19906 ;; Auto vars:     Size  Location     Type
 19907 ;;  a               1    1[COMRAM] unsigned char 
 19908 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19909 ;; Return value:  Size  Location     Type
 19910 ;;                  1    wreg      unsigned char 
 19911 ;; Registers used:
 19912 ;;		wreg, status,2, status,0, cstack
 19913 ;; Tracked objects:
 19914 ;;		On entry : 0/0
 19915 ;;		On exit  : 0/0
 19916 ;;		Unchanged: 0/0
 19917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19921 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19922 ;;Total ram usage:        2 bytes
 19923 ;; Hardware stack levels used:    1
 19924 ;; Hardware stack levels required when called:    1
 19925 ;; This function calls:
 19926 ;;		i2_I2C_Master_Wait
 19927 ;; This function is called by:
 19928 ;;		i2_getRTC
 19929 ;; This function uses a non-reentrant model
 19930 ;;
 19931                           
 19932                           	psect	text87
 19933  00407A                     __ptext87:
 19934                           	opt stack 0
 19935  00407A                     i2_I2C_Master_Read:
 19936                           	opt stack 18
 19937                           
 19938                           ;incstack = 0
 19939                           ;i2I2C_Master_Read@a stored from wreg
 19940  00407A  6E02               	movwf	i2I2C_Master_Read@a,c
 19941                           
 19942                           ;I2C.c: 57: unsigned char temp;
 19943                           ;I2C.c: 58: I2C_Master_Wait();
 19944  00407C  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19945                           
 19946                           ;I2C.c: 59: RCEN = 1;
 19947  004080  86C5               	bsf	4037,3,c	;volatile
 19948                           
 19949                           ;I2C.c: 60: I2C_Master_Wait();
 19950  004082  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19951                           
 19952                           ;I2C.c: 61: temp = SSPBUF;
 19953  004086  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19954                           
 19955                           ;I2C.c: 62: I2C_Master_Wait();
 19956  00408A  ECD1  F020         	call	i2_I2C_Master_Wait	;wreg free
 19957                           
 19958                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19959  00408E  5002               	movf	i2I2C_Master_Read@a,w,c
 19960  004090  A4D8               	btfss	status,2,c
 19961  004092  D002               	goto	i2u351_40
 19962  004094  8AC5               	bsf	4037,5,c	;volatile
 19963  004096  D001               	goto	i2l5124
 19964  004098                     i2u351_40:
 19965  004098  9AC5               	bcf	4037,5,c	;volatile
 19966  00409A                     i2l5124:
 19967                           
 19968                           ;I2C.c: 64: ACKEN = 1;
 19969  00409A  88C5               	bsf	4037,4,c	;volatile
 19970                           
 19971                           ;I2C.c: 65: return temp;
 19972  00409C  5003               	movf	i2I2C_Master_Read@temp,w,c
 19973  00409E  0012               	return	
 19974  0040A0                     __end_ofi2_I2C_Master_Read:
 19975                           	opt stack 0
 19976                           pclatu	equ	0xFFB
 19977                           pclath	equ	0xFFA
 19978                           tblptru	equ	0xFF8
 19979                           tblptrh	equ	0xFF7
 19980                           tblptrl	equ	0xFF6
 19981                           tablat	equ	0xFF5
 19982                           prodh	equ	0xFF4
 19983                           prodl	equ	0xFF3
 19984                           intcon	equ	0xFF2
 19985                           intcon2	equ	0xFF1
 19986                           intcon3	equ	0xFF0
 19987                           indf0	equ	0xFEF
 19988                           postinc0	equ	0xFEE
 19989                           fsr0h	equ	0xFEA
 19990                           fsr0l	equ	0xFE9
 19991                           wreg	equ	0xFE8
 19992                           postdec1	equ	0xFE5
 19993                           fsr1h	equ	0xFE2
 19994                           fsr1l	equ	0xFE1
 19995                           indf2	equ	0xFDF
 19996                           postinc2	equ	0xFDE
 19997                           postdec2	equ	0xFDD
 19998                           fsr2h	equ	0xFDA
 19999                           fsr2l	equ	0xFD9
 20000                           status	equ	0xFD8
 20001                           
 20002 ;; *************** function i2_I2C_Master_Wait *****************
 20003 ;; Defined at:
 20004 ;;		line 26 in file "I2C.c"
 20005 ;; Parameters:    Size  Location     Type
 20006 ;;		None
 20007 ;; Auto vars:     Size  Location     Type
 20008 ;;		None
 20009 ;; Return value:  Size  Location     Type
 20010 ;;                  1    wreg      void 
 20011 ;; Registers used:
 20012 ;;		wreg, status,2, status,0
 20013 ;; Tracked objects:
 20014 ;;		On entry : 0/0
 20015 ;;		On exit  : 0/0
 20016 ;;		Unchanged: 0/0
 20017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20022 ;;Total ram usage:        1 bytes
 20023 ;; Hardware stack levels used:    1
 20024 ;; This function calls:
 20025 ;;		Nothing
 20026 ;; This function is called by:
 20027 ;;		i2_I2C_Master_Start
 20028 ;;		i2_I2C_Master_Stop
 20029 ;;		i2_I2C_Master_Write
 20030 ;;		i2_I2C_Master_Read
 20031 ;; This function uses a non-reentrant model
 20032 ;;
 20033                           
 20034                           	psect	text88
 20035  0041A2                     __ptext88:
 20036                           	opt stack 0
 20037  0041A2                     i2_I2C_Master_Wait:
 20038                           	opt stack 18
 20039  0041A2                     i2l66:
 20040  0041A2  B4C7               	btfsc	4039,2,c	;volatile
 20041  0041A4  D7FE               	goto	i2l66
 20042  0041A6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20043  0041AA  0E1F               	movlw	31
 20044  0041AC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20045  0041AE  B4D8               	btfsc	status,2,c
 20046  0041B0  0012               	return	
 20047  0041B2  D7F7               	goto	i2l66
 20048  0041B4                     __end_ofi2_I2C_Master_Wait:
 20049                           	opt stack 0
 20050                           pclatu	equ	0xFFB
 20051                           pclath	equ	0xFFA
 20052                           tblptru	equ	0xFF8
 20053                           tblptrh	equ	0xFF7
 20054                           tblptrl	equ	0xFF6
 20055                           tablat	equ	0xFF5
 20056                           prodh	equ	0xFF4
 20057                           prodl	equ	0xFF3
 20058                           intcon	equ	0xFF2
 20059                           intcon2	equ	0xFF1
 20060                           intcon3	equ	0xFF0
 20061                           indf0	equ	0xFEF
 20062                           postinc0	equ	0xFEE
 20063                           fsr0h	equ	0xFEA
 20064                           fsr0l	equ	0xFE9
 20065                           wreg	equ	0xFE8
 20066                           postdec1	equ	0xFE5
 20067                           fsr1h	equ	0xFE2
 20068                           fsr1l	equ	0xFE1
 20069                           indf2	equ	0xFDF
 20070                           postinc2	equ	0xFDE
 20071                           postdec2	equ	0xFDD
 20072                           fsr2h	equ	0xFDA
 20073                           fsr2l	equ	0xFD9
 20074                           status	equ	0xFD8
 20075                           pclatu	equ	0xFFB
 20076                           pclath	equ	0xFFA
 20077                           tblptru	equ	0xFF8
 20078                           tblptrh	equ	0xFF7
 20079                           tblptrl	equ	0xFF6
 20080                           tablat	equ	0xFF5
 20081                           prodh	equ	0xFF4
 20082                           prodl	equ	0xFF3
 20083                           intcon	equ	0xFF2
 20084                           intcon2	equ	0xFF1
 20085                           intcon3	equ	0xFF0
 20086                           indf0	equ	0xFEF
 20087                           postinc0	equ	0xFEE
 20088                           fsr0h	equ	0xFEA
 20089                           fsr0l	equ	0xFE9
 20090                           wreg	equ	0xFE8
 20091                           postdec1	equ	0xFE5
 20092                           fsr1h	equ	0xFE2
 20093                           fsr1l	equ	0xFE1
 20094                           indf2	equ	0xFDF
 20095                           postinc2	equ	0xFDE
 20096                           postdec2	equ	0xFDD
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101                           	psect	rparam
 20102  0000                     pclatu	equ	0xFFB
 20103                           pclath	equ	0xFFA
 20104                           tblptru	equ	0xFF8
 20105                           tblptrh	equ	0xFF7
 20106                           tblptrl	equ	0xFF6
 20107                           tablat	equ	0xFF5
 20108                           prodh	equ	0xFF4
 20109                           prodl	equ	0xFF3
 20110                           intcon	equ	0xFF2
 20111                           intcon2	equ	0xFF1
 20112                           intcon3	equ	0xFF0
 20113                           indf0	equ	0xFEF
 20114                           postinc0	equ	0xFEE
 20115                           fsr0h	equ	0xFEA
 20116                           fsr0l	equ	0xFE9
 20117                           wreg	equ	0xFE8
 20118                           postdec1	equ	0xFE5
 20119                           fsr1h	equ	0xFE2
 20120                           fsr1l	equ	0xFE1
 20121                           indf2	equ	0xFDF
 20122                           postinc2	equ	0xFDE
 20123                           postdec2	equ	0xFDD
 20124                           fsr2h	equ	0xFDA
 20125                           fsr2l	equ	0xFD9
 20126                           status	equ	0xFD8
 20127                           
 20128                           	psect	temp
 20129  00007E                     btemp:
 20130                           	opt stack 0
 20131  00007E                     	ds	1
 20132  0000                     int$flags	set	btemp
 20133                           pclatu	equ	0xFFB
 20134                           pclath	equ	0xFFA
 20135                           tblptru	equ	0xFF8
 20136                           tblptrh	equ	0xFF7
 20137                           tblptrl	equ	0xFF6
 20138                           tablat	equ	0xFF5
 20139                           prodh	equ	0xFF4
 20140                           prodl	equ	0xFF3
 20141                           intcon	equ	0xFF2
 20142                           intcon2	equ	0xFF1
 20143                           intcon3	equ	0xFF0
 20144                           indf0	equ	0xFEF
 20145                           postinc0	equ	0xFEE
 20146                           fsr0h	equ	0xFEA
 20147                           fsr0l	equ	0xFE9
 20148                           wreg	equ	0xFE8
 20149                           postdec1	equ	0xFE5
 20150                           fsr1h	equ	0xFE2
 20151                           fsr1l	equ	0xFE1
 20152                           indf2	equ	0xFDF
 20153                           postinc2	equ	0xFDE
 20154                           postdec2	equ	0xFDD
 20155                           fsr2h	equ	0xFDA
 20156                           fsr2l	equ	0xFD9
 20157                           status	equ	0xFD8


Data Sizes:
    Strings     1195
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_111(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_108(CODE[10]), STR_107(CODE[13]), 
		 -> STR_106(CODE[18]), STR_105(CODE[18]), STR_104(CODE[15]), STR_103(CODE[15]), 
		 -> STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), STR_95(CODE[17]), 
		 -> STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), STR_87(CODE[17]), 
		 -> STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), STR_83(CODE[10]), 
		 -> STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[13]), 
		 -> STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), 
		 -> STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), 
		 -> STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), 
		 -> STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[19]), 
		 -> STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  150007
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   16019
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   13375
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10402
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9655
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21136
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20286
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42152
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12327
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7959
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   59625
                                             70 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8074
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7959
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   11593
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7984
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8097
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7959
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7824
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 04 17:24:55 2017

                                    _i 012B                     i2_I2C_Master_Start 4220  
                   i2_I2C_Master_Write 41F6                                     l66 418E  
                                   _ID 29F0                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l901 2F30                                    l478 3402  
                                  l591 1994                                    l914 415A  
                                  l923 29DA                                    l773 36FA  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00E6  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 3E5E        __end_of_change_state_to_menu_12 3CCE  
      __end_of_change_state_to_menu_22 3C96        __end_of_change_state_to_menu_23 3E2E  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 3F4E        __end_of_change_state_to_logs_12 3F1E  
      __end_of_change_state_to_logs_22 3EEE        __end_of_change_state_to_logs_23 3FAA  
      __end_of_change_state_to_logs_33 3EBE        __end_of_change_state_to_logs_34 3E8E  
                                 ??_ID 0086                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1001 2D88                                   l1004 2DA8  
                                 l1023 3054                                   l1104 1028  
                                 l1032 24D4                                   l1121 35DE  
                                 l1026 3058                                   l1123 35E2  
                                 l1035 24D8                                   l1212 137E  
                                 l1124 35E6                                   l1044 259C  
                                 l1125 35EA                                   l1117 35C2  
                                 l1126 35EE                                   l1062 09CC  
                                 l1127 35F2                                   l1055 0922  
                                 l1144 398C                                   l1152 2C60  
                                 l1129 3630                                   l1065 0A32  
                                 l1138 397C                                   l1066 0A80  
                                 l1058 0926                                   l1067 0AE6  
                                 l1092 0E8E                                   l1068 0B34  
                                 l1158 2CAC                                   l1175 3536  
                                 l1167 3502                                   l1606 3234  
                                 l5100 38C0                                   l5014 3FEA  
                                 l5016 3FFC                                   l5202 1146  
                                 l1659 36B4                                   l5300 146C  
                                 l5212 1176                                   l1669 38CE  
                                 l5302 1476                                   l5206 115A  
                                 l5038 3F74                                   l5072 3664  
                                 l5056 4022                                   l5320 14D2  
                                 l5208 116C                                   l7000 0106  
                                 l5074 3670                                   l5330 1544  
                                 l5314 14AC                                   l5250 12FA  
                                 l5234 1258                                   l5226 1226  
                                 l5218 11AA                                   l5084 36A6  
                                 l5076 3676                                   l5092 388A  
                                 l5316 14B8                                   l5324 14E6  
                                 l5308 1490                                   l5244 12D0  
                                 l5236 1264                                   l5260 1344  
                                 l5332 1550                                   l7100 02F2  
                                 l7012 013A                                   l7004 0118  
                                 l6212 2AC8                                   l5094 3896  
                                 l5326 14EC                                   l5254 1326  
                                 l5246 12DC                                   l5238 126A  
                                 l7110 0388                                   l7102 0310  
                                 l7030 01A4                                   l6150 2E98  
                                 l5096 389C                                   l5272 13B6  
                                 l5256 133E                                   l5248 12E2  
                                 l6320 2530                                   l5344 357C  
                                 l5336 3CD8                                   l5600 1912  
                                 l7120 041E                                   l7112 03A6  
                                 l7104 032E                                   l7040 01CC  
                                 l7032 01AA                                   l7016 014C  
                                 l7008 0122                                   l6240 27CC  
                                 l6208 2ABC                                   l6216 2AD4  
                                 l5290 1412                                   l5354 35B2  
                                 l5338 3CE4                                   l5610 19DA  
                                 l7122 043C                                   l7114 03C4  
                                 l7106 034C                                   l6234 277E  
                                 l5276 13D0                                   l5372 36E6  
                                 l6500 0C34                                   l5348 3592  
                                 l5620 1A70                                   l5612 19F8  
                                 l7140 0522                                   l7132 0500  
                                 l7116 03E2                                   l7108 036A  
                                 l7060 022C                                   l7036 01B4  
                                 l6236 2798                                   l6244 27E6  
                                 l5278 13D6                                   l5374 3710  
                                 l6510 0C5C                                   l6342 25BE  
                                 l6334 2590                                   l6326 2572  
                                 l5622 1A8E                                   l5614 1A16  
                                 l5606 199E                                   l7302 086A  
                                 l7222 06FA                                   l7214 06D8  
                                 l7150 053E                                   l7118 0400  
                                 l7126 045A                                   l7046 01DA  
                                 l5390 31CE                                   l6238 27B2  
                                 l6246 2814                                   l6166 2ED2  
                                 l5296 1434                                   l6504 0C3E  
                                 l5624 1AAC                                   l5616 1A34  
                                 l5608 19BC                                   l5632 1B06  
                                 l7312 0886                                   l7232 0716  
                                 l7136 050A                                   l7128 04BE  
                                 l7064 0236                                   l7320 08AA  
                                 l6530 0CC2                                   l6514 0C66  
                                 l5626 1ACA                                   l5618 1A52  
                                 l5634 1B64                                   l7218 06E2  
                                 l7154 0556                                   l7146 0534  
                                 l7082 0282                                   l7074 0260  
                                 l5386 31B8                                   l6612 0E66  
                                 l6604 0E44                                   l6540 0CEA  
                                 l6508 0C56                                   l6348 2600  
                                 l5628 1AE8                                   l7316 089E  
                                 l7308 087C                                   l7236 072E  
                                 l7228 070C                                   l7068 024E  
                                 l5388 31C8                                   l5820 2FA6  
                                 l6614 0E6C                                   l6534 0CDA  
                                 l6526 0CB8                                   l6518 0C7E  
                                 l6390 0996                                   l7262 07B6  
                                 l7254 0794                                   l7182 063E  
                                 l7174 061C                                   l7078 026A  
                                 l5398 3222                                   l6198 2A8C  
                                 _ADIE 007CEE                                   l6640 0EF8  
                                 l6632 0ED6                                   l6608 0E4E  
                                 l6560 0D5E                                   l6552 0D3C  
                                 l6544 0D02                                   l6536 0CE0  
                                 l7272 07D2                                   l7192 065A  
                                 l5832 2FDE                                   l5816 2F9C  
                                 l5824 2FBE                                   l6722 1082  
                                 l6650 0F20                                   l6642 0EFE  
                                 l6618 0E76                                   l6570 0D86  
                                 l6562 0D64                                   l6482 0BD2  
                                 l6474 0BB0                                   l6394 09A0  
                                 l7610 2D2A                                   l7258 079E  
                                 l7178 0626                                   l7098 02D4  
                                 l5770 3254                                   l6812 2C2C  
                                 l6732 10AA                                   l6636 0EE0  
                                 l6556 0D46                                   l6492 0BFA  
                                 l6484 0BD8                                   l6388 0990  
                                 l6900 312E                                   l7276 07EA  
                                 l7268 07C8                                   l7196 0672  
                                 l7188 0650                                   l5940 346A  
                                 l5828 2FD4                                   l5860 3B7E  
                                 l5780 32E0                                   l6830 2C8A  
                                 l6726 109A                                   l6718 1078  
                                 l6662 0F64                                   l6646 0F08  
                                 l6582 0DCA                                   l6566 0D6E  
                                 l6478 0BBA                                   l6398 09B8  
                                 l7630 2DB4                                   l7294 0848  
                                 l5950 34AC                                   l5774 326A  
                                 l7710 33E0                                   l6824 2C6E  
                                 l6808 352A                                   l6752 1108  
                                 l6744 10E6                                   l6736 10C2  
                                 l6728 10A0                                   l6672 0F8C  
                                 l6592 0DF2                                   l6488 0BE2  
                                 l7640 2DD2                                   l7632 2DBA  
                                 l6912 316C                                   l5944 3480  
                                 l7720 33FE                                   l6834 2C94  
                                 l6762 1130                                   l6754 110E  
                                 l6666 0F7C                                   l6658 0F5A  
                                 l6586 0DE2                                   l6578 0DC0  
                                 l7642 2DD8                                   l7634 2DC0  
                                 l7298 0852                                   l7706 33D4  
                                 l6844 2CD4                                   l6828 2C84  
                                 l6748 10F0                                   l6692 1000  
                                 l6684 0FDE                                   l6676 0FA4  
                                 l6668 0F82                                   l6596 0E0A  
                                 l6588 0DE8                                   l7636 2DC6  
                                 l7628 2DAE                                   l6916 3180  
                                 l6908 315E                                   l6940 3342  
                                 l6932 331C                                   l7572 2900  
                                 l7708 33DA                                   l7724 3404  
                                 l6854 2D08                                   l6758 1118  
                                 l6694 1006                                   l7638 2DCC  
                                 l7646 2DDE                                   l7574 2914  
                                 l7718 33F8                                   l6688 0FE8  
                                 l6952 3388                                   l6944 3366  
                                 l6936 3330                                   l6928 330C  
                                 l6866 35F6                                   l6858 2D12  
                                 l6698 1010                                   l6890 30FE  
                                 l6938 333C                                   l6884 30E8  
                                 l6948 3374                                   l7598 2994  
                                 l6896 311C                                   l6898 3128  
                                 l6998 0100                                   STR_1 FBDD  
                                 STR_2 FF2E                                   STR_3 FBCB  
                                 STR_4 FE51                                   STR_5 FBCB  
                                 STR_6 FE0F                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3410 3F72  
                                 u4300 1994                                   u4260 3BCC  
                                 u4261 3BC8                                   u4270 3BCE  
                                 u3650 12A4                                   _PEIE 007F96  
                                 u4285 3908                                   u7007 071E  
                                 u3657 129A                                   u7017 0748  
                                 u3690 131C                                   u4650 2A20  
                                 u7107 24C8                                   u7027 07A6  
                                 _RCEN 007E2B                                   u7117 24EA  
                                 u7037 07DA                                   u4910 0B34  
                                 u7207 08D2                                   u7127 2518  
                                 u7047 0804                                   u4680 2A7C  
                                 u3697 1312                                   u7217 0916  
                                 u7137 2566                                   u7057 085A  
                                 u4658 2A24                                   u7307 0B44  
                                 u7227 0938                                   u7147 25B0  
                                 u7067 088E                                   u6540 29DA  
                                 u7317 0BC2                                   u7237 09A8  
                                 u7157 25F4                                   u7077 2D38  
                                 u4870 09CC                                   u7407 0DFA  
                                 u7327 0BEA                                   u7247 09DC  
                                 u7167 3FF2                                   u7087 2D7C  
                                 u4688 2A80                                   u7417 0E56  
                                 u7337 0C46                                   u7257 0A42  
                                 u7177 3004                                   u7097 2484  
                                 i2l66 41A2                                   u4890 0A80  
                                 u7507 108A                                   u7427 0E7E  
                                 u7347 0C6E                                   u7267 0A60  
                                 u7187 3048                                   u7517 10B2  
                                 u7437 0EE8                                   u7357 0CCA  
                                 u7277 0A90                                   u7197 306A  
                                 u6717 2E44                                   u7607 3946  
                                 u7527 10F8                                   u7447 0F10  
                                 u7367 0CF2                                   u7287 0AF6  
                                 u6807 2F52                                   u6727 2EFC  
                                 u7617 382E                                   u7537 1120  
                                 u7457 0F6C                                   u7377 0D4E  
                                 u7297 0B14                                   u6817 2FAE  
                                 u6737 39D6                                   u7627 3838  
                                 u7547 34C2                                   u7467 0F94  
                                 u7387 0D76                                   u6907 023E  
                                 u6827 2FE6                                   u6747 3B5A  
                                 u7637 3864                                   u7557 2C3A  
                                 u7477 0FF0                                   u7397 0DD2  
                                 u6917 0272                                   u6837 3BDE  
                                 u6757 2A06                                   u7647 386E  
                                 u7567 2C9C                                   u7487 1018  
                                 u6927 029C                                   u6847 3C12  
                                 u6767 2A62                                   u7577 2CBC  
                                 u7497 103A                                   u6937 0512  
                                 u6857 002A                                   u6777 2AF8  
                                 u7587 2CE2                                   u6947 0546  
                                 u6867 012A                                   u6787 2822  
                                 u7597 2D1A                                   u6957 0570  
                                 u6877 0166                                   u6797 2856  
                                 u6967 062E                                   u6887 01BC  
                                 u6977 0662                                   u6897 01E8  
                                 u6987 068C                                   u6997 06EA  
                                 _RSEN 007E29                            _stopSignals 4162  
                                 _Test 2D2A                                   _back 005B  
                                 _main 3392                                   _down 0067  
                                 _keys FB39                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 40E8  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                     ??_SolenoidTestA5 00AB                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 41E0  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E68  
                          i2_lcdNibble 3A46                        __end_of_Loading 2F0E  
                 __end_of_actuatorTest 1138                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2FF6                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 318A                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB54  
                                STR_14 FFD7                                  STR_22 FFA4  
                                STR_30 FE20                                  STR_15 FFD3  
                                STR_23 FF20                                  STR_31 FDFE  
                                STR_16 FFE3                                  STR_24 FD65  
                                STR_32 FD43                                  STR_40 FCFF  
                                STR_17 FFF3                                  STR_33 FD54  
                                STR_41 FCEE                                  STR_25 FB94  
                                STR_18 FFF7                                  STR_34 FDED  
                                STR_50 FDCB                                  STR_42 FDA9  
                                STR_26 FD76                                  STR_43 FDA9  
                                STR_35 FDED                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FB81  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD87                                  STR_36 FD32  
                                STR_44 FD10                        __end_of___awmod 3392  
                                STR_45 FCFF                                  STR_37 FD43  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FB91                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED9  
                                STR_38 FDDC                                  STR_46 FDBA  
                                STR_47 FDBA                                  STR_55 FFFB  
                                STR_63 FB54                                  STR_71 FF12  
                                STR_39 FD98                                  STR_56 FFDF  
                                STR_64 FF85                                  STR_80 FE61  
                                STR_48 FD21                                  STR_72 FC99  
                                STR_49 FD10                                  STR_57 FFD7  
                                STR_65 FF56                                  STR_73 FEF6  
                                STR_81 FE8E                                  STR_58 FFD3  
                                STR_90 FF7A                                  STR_74 FF63  
                                STR_82 FE31                                  STR_66 FB6C  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_83 FF9A                                  STR_75 FEBB  
                                STR_91 FEAC                                  STR_84 FF12  
                                STR_76 FF04                                  STR_68 FCAA  
                                STR_92 FC44                                  STR_77 FFAE  
                                STR_85 FECA                                  STR_69 FCDD  
                                STR_93 FC33                                  STR_78 FF12  
                                STR_86 FEE8                                  STR_94 FC11  
                                STR_79 FF3C                                  STR_87 FCBB  
                                STR_95 FC66                                  STR_88 FF6F  
                                STR_96 FC77                                  STR_89 FCCC  
                                STR_97 FBEF                                  STR_98 FE41  
                                STR_99 FC22                                  ?_sort 0001  
                      __end_of___lldiv 3246                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 36BE                        __end_of___lwmod 38D8  
                                i2l254 1E64                                  i2l591 1EF6  
                                i2l832 26CC                                  i2l914 4186  
                                i2l836 2718                                  i2l838 2738  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 41D4                        __end_of_handler 2774  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4002  
                      __end_of_initLCD 3C1C                         __CFG_EBTRB$OFF 000000  
                                _debug 00E0                             i2isdigit@c 0003  
                                _getIR 3B3C                        __end_of_loadRTC 34B4  
                      __end_of_readMAG 3BD6                        __end_of_dpowers FB54  
                                _first 00E4                                  _enter 0069  
                      __end_of_isdigit 402C                                  _input 007D  
                                _putch 41B4                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 407A  
                     __end_ofi2_getRTC 37A6                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18DE  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3D9E                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3AEE                           __end_of_Test 2E26  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3428  
                         __end_of_keys FB4A                           __end_of_sort 410A  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC00  
                               STR_101 FC22                                 STR_102 FE9D  
                               STR_110 FC88                                 STR_111 FFB6  
                               STR_103 FE7F                                 STR_104 FE70  
                               STR_105 FBA7                                 STR_106 FBB9  
                               _ADRESH 000FC4                                 STR_107 FF49  
                               STR_108 FF90                                 _EEADRH 000FAA  
                               STR_109 FC55                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3DCE  
            i2_change_state_to_menu_22 3D9E                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1212 174A                                 i2l6002 22C8  
                               i2l1659 3AE4                                 i2l5124 409A  
                               i2l6020 2306                                 i2l6004 22D8  
                               i2l6012 22E6                                 i2l1669 3C54  
                               i2l6102 242C                                 i2l6022 230C  
                               i2l6030 231E                                 i2l6006 22DC  
                               i2l5160 3ABA                                 i2l6024 2312  
                               i2l6016 22FA                                 i2l6112 2448  
                               i2l5410 376C                                 i2l5170 3ADA  
                               i2l5162 3ABE                                 i2l6106 243E  
                               i2l6050 237A                                 i2l6042 2362  
                               i2l6026 2318                                 i2l6018 2300  
                               i2l5420 3796                                 i2l5180 3C32  
                               i2l5148 4142                                 i2l6060 23A4  
                               i2l5414 377C                                 i2l5158 3AB2  
                               i2l5182 3C36                                 i2l6070 23C2  
                               i2l5512 1790                                 i2l6072 23C6  
                               i2l6056 2388                                 i2l5186 3C4A  
                               i2l5178 3C2A                                 i2l5514 1794  
                               i2l5442 158A                                 i2l6090 23F6  
                               i2l6066 23AE                                 i2l5532 17E0  
                               i2l5508 1778                                 i2l5444 1598  
                               i2l6084 23E8                                 i2l6076 23D0  
                               i2l5550 1838                                 i2l5526 17C6  
                               i2l5470 165A                                 i2l5462 1632  
                               i2l5454 15D0                                 i2l5438 157A  
                               i2l6094 2408                                 i2l5552 1840  
                               i2l5560 1866                                 i2l5544 1822  
                               i2l5536 1804                                 i2l5480 16B2  
                               i2l5472 1664                                 i2l5448 159E  
                               i2l7400 1CBA                                 i2l5562 186C  
                               i2l5538 180C                                 i2l5490 16FE  
                               i2l5482 16BC                                 i2l5474 1668  
                               i2l6098 241A                                 i2l5556 1854  
                               i2l5492 1710                                 i2l5484 16C2  
                               i2l5572 3D76                                 i2l5900 1F16  
                               i2l7420 1D08                                 i2l7412 1CEC  
                               i2l7404 1CC8                                 i2l7340 1BEC  
                               i2l5566 18BA                                 i2l5486 16D4  
                               i2l5750 2BD0                                 i2l5574 3D7E  
                               i2l5910 1F84                                 i2l5902 1F2C  
                               i2l7334 1BD8                                 i2l5496 1714  
                               i2l5568 18C2                                 i2l8072 2336  
                               i2l5920 1FF2                                 i2l5912 1F9A  
                               i2l5904 1F42                                 i2l8064 1E18  
                               i2l7440 1D56                                 i2l7432 1D3A  
                               i2l7424 1D16                                 i2l7416 1CFA  
                               i2l7408 1CD6                                 i2l7360 1C24  
                               i2l7352 1C16                                 i2l7344 1BFA  
                               i2l7336 1BDE                                 i2l5762 2C14  
                               i2l5754 2BE0                                 i2l8074 2352  
                               i2l5914 1FB0                                 i2l5906 1F58  
                               i2l8066 1E3A                                 i2l5916 1FC6  
                               i2l5908 1F6E                                 i2l5924 2008  
                               i2l8068 1E56                                 i2l7460 1DAC  
                               i2l7452 1D88                                 i2l7444 1D6C  
                               i2l7436 1D48                                 i2l7428 1D2C  
                               i2l7380 1C6C                                 i2l7372 1C50  
                               i2l7364 1C32                                 i2l7348 1C08  
                               i2l5918 1FDC                                 i2l5926 2062  
                               i2l7472 1DD6                                 i2l7464 1DBA  
                               i2l7456 1D96                                 i2l7448 1D7A  
                               i2l7392 1C96                                 i2l7384 1C7A  
                               i2l7376 1C5E                                 i2l7368 1C40  
                               i2l7800 2736                                 i2l7482 1DFA  
                               i2l7660 20BA                                 i2l5892 1E94  
                               i2l7476 1DEC                                 i2l7468 1DC8  
                               i2l7396 1CAC                                 i2l7388 1C88  
                               i2l7740 2684                                 i2l7656 20AA  
                               i2l7666 2114                                 i2l5994 22AE  
                               i2l5898 1F00                                 i2l7754 26A0  
                               i2l7738 2680                                 i2l7676 21D6  
                               i2l7776 26EA                                 i2l7778 26EC  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 40E8  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 28B4                                 ___wmul 3D04  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 353C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 412C  
                               _initUI 40A0                                 _readIR 3D3A  
                               _logRun 28B4                                 clear_0 3B14  
                               clear_1 3B20                                 clear_2 3B2C  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3938                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 3CCE  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4054  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 402C                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 3AEE                       __end_of_printRTC 1BA8  
                         __mediumconst FB38                      __end_ofi2___lwmod 3C5E  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 30CC                      __end_ofi2_lcdInst 41EC  
                    __end_ofi2_isdigit 414A                             __accesstop 0080  
              __end_of__initialization 3B32                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0880                          i2_EEPROM_read 4178  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 422A                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E8                           __pidataBANK1 4200  
                        __end_of_getIR 3B8A                            i2printRTC@i 0041  
                        _initSortTimer 3246            __end_of_updateServoPosition 3734  
                        __end_of_putch 41C4                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2B12  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 3FD6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 3FAA  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 2F0E                                UI@F3220 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 3646  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2225 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 41D4  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 0140  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3876  
                              _Loading 2E26            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 30CC                                ___awmod 32F0  
                           _initServos 3994                                ___lldiv 318A  
                      __size_of___wmul 0036                                ___lwdiv 3646  
                              ___lwmod 3876                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 0032  
                              __pcinit 3AEE                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 37A6  
                              _lcdInst 41C4                                _handler 0008  
                              __ptext0 3392                                __ptext1 4162  
                              __ptext2 40E8                                __ptext3 2E26  
                              __ptext4 3246                                __ptext5 3994  
                              __ptext6 37A6                                __ptext7 3B3C  
                              __ptext8 29F0                                __ptext9 2774  
                      __size_of_printf 0438                                _readADC 3FD6  
                      __size_of_strcpy 0036                                _initLCD 3BD6  
                              _cur_can 0065                                _loadRTC 3428  
                              _readMAG 3B8A                                _dpowers FB4A  
                   actuatorTest@i_1601 00C0                     actuatorTest@i_1602 00C1  
                   actuatorTest@i_1604 00C2                     actuatorTest@i_1605 00C3  
                   actuatorTest@i_1572 00AE                     actuatorTest@i_1581 00B4  
                   actuatorTest@i_1573 00AF                     actuatorTest@i_1565 00AD  
                   actuatorTest@i_1582 00B5                     actuatorTest@i_1591 00BA  
                   actuatorTest@i_1575 00B0                     actuatorTest@i_1592 00BB  
                   actuatorTest@i_1584 00B6                     actuatorTest@i_1576 00B1  
                   actuatorTest@i_1585 00B7                     actuatorTest@i_1594 00BC  
                   actuatorTest@i_1578 00B2                     actuatorTest@i_1595 00BD  
                   actuatorTest@i_1587 00B8                     actuatorTest@i_1579 00B3  
                   actuatorTest@i_1588 00B9                     actuatorTest@i_1597 00BE  
                   actuatorTest@i_1598 00BF                                _isdigit 4002  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2774                         __pintcode_body 2606  
                 end_of_initialization 3B32                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1616 00AF                   SolenoidTestA5@i_1618 00B0  
                              int_func 2606                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 380E  
                           _sensorTest 2476                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2476  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3A46  
                           _updateMenu 1BA8                      i2_I2C_Master_Read 407A  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 41A2  
                    i2_I2C_Master_Stop 4218                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3A9C  
                            i2___lwmod 3C1C                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 209E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 41E0                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 412C  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 4162  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3D3A                         __end_of_getRTC 35C2  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 40C4  
                       __end_of_readIR 3D6C                         __end_of_logRun 29F0  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 3D04  
            __end_ofi2_I2C_Master_Read 40A0              __end_ofi2_I2C_Master_Wait 41B4  
                         i2printf@prec 001D                    start_initialization 3AEE  
            __end_ofi2_I2C_Master_Stop 4220                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1310 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 35C2  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2345 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1872 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 414A                     __end_of_PortTestA5 3994  
                     _I2C_Master_Start 4210                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 41EC                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 353C                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB38                              _lcdNibble 380E  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                         _SolenoidTestA5 2C2C  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 2FF6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0122  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 0190             __end_ofi2_I2C_Master_Start 4228  
           __end_ofi2_I2C_Master_Write 4200                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2290  
                          ??i2_isdigit 0001                               i2u402_40 1696  
                             i2u402_47 168C                               i2u406_40 16F6  
                             i2u406_47 16EC                               i2u351_40 4098  
                             _PIR2bits 000FA1                               i2u445_40 1EF6  
                             i2u659_40 21D0                               i2u765_47 22CE  
                             i2u766_47 3A5E                               i2u767_47 3A68  
                             i2u768_47 3A8A                               i2u769_47 3A94  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 2D2A  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4054  
                        lcdNibble@data 0081                               i2_getRTC 3734  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 1570  
                             i2_strcpy 3D6C                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3B02  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 418E  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 00E8                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 32F0  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 3E2E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3C96             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3C5E                _change_state_to_menu_23 3DFE  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 3F1E  
              _change_state_to_logs_12 3EEE                _change_state_to_logs_22 3EBE  
              _change_state_to_logs_23 3F7C                _change_state_to_logs_33 3E8E  
              _change_state_to_logs_34 3E5E                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 276C  
                           _EEPROMTest 4228                        _I2C_Master_Init 38D8  
                     __size_of_readADC 002C                        _I2C_Master_Read 3F4E  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 418E                        _I2C_Master_Stop 4208  
                     __size_of_isdigit 002A                         _printSortTimer 209E  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 2C2C                               __ptext10 39EE  
                             __ptext11 28B4                               __ptext20 3BD6  
                             __ptext12 2F0E                               __ptext21 0012  
                             __ptext13 414A                               __ptext30 3C5E  
                             __ptext22 18DE                               __ptext14 40A0  
                             __ptext31 3C96                               __ptext23 3CCE  
                             __ptext15 3428                               __ptext40 08B8  
                             __ptext32 32F0                               __ptext24 353C  
                             __ptext16 38D8                               __ptext41 36BE  
                             __ptext33 30CC                               __ptext25 41EC  
                             __ptext17 318A                               __ptext50 3876  
                             __ptext42 34B4                               __ptext34 2D2A  
                             __ptext26 4208                               __ptext18 3FAA  
                             __ptext51 3646                               __ptext43 2C2C  
                             __ptext35 2476                               __ptext27 4210  
                             __ptext19 410A                               __ptext60 2290  
                             __ptext52 41C4                               __ptext44 35C2  
                             __ptext36 3B8A                               __ptext28 3F4E  
                             __ptext61 3D9E                               __ptext53 380E  
                             __ptext45 3938                               __ptext37 3D3A  
                             __ptext29 418E                               __ptext70 3F1E  
                             __ptext62 3DCE                               __ptext54 4228  
                             __ptext46 1138                               __ptext38 3FD6  
                             __ptext71 40C4                               __ptext63 3DFE  
                             __ptext47 41B4                               __ptext39 2FF6  
                             __ptext80 3A9C                               __ptext72 2B12  
                             __ptext64 3E2E                               __ptext56 1BA8  
                             __ptext48 4002                               __ptext81 41E0  
                             __ptext73 4178                               __ptext65 3E5E  
                             __ptext57 402C                               __ptext49 3D04  
                             __ptext82 3A46                               __ptext74 209E  
                             __ptext66 3E8E                               __ptext58 1E68  
                             __ptext83 3734                               __ptext75 1570  
                             __ptext67 3F7C                               __ptext59 3D6C  
                             __ptext84 41F6                               __ptext76 41D4  
                             __ptext68 3EBE                               __ptext85 4218  
                             __ptext77 412C                               __ptext69 3EEE  
                             __ptext86 4220                               __ptext78 4054  
                             __ptext87 407A                               __ptext79 3C1C  
                             __ptext88 41A2                               _dispLogs 40C4  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1872 0002                     __end_of_initServos 39EE  
                        __size_of_Test 00FC                          ?_EEPROM_write 00AB  
                             _initTime 410A                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 36BE  
               __size_of_machineConfig 0058                          ??i2_lcdNibble 0001  
                             _printRTC 18DE                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 3DFE  
    __end_ofi2_change_state_to_menu_22 3DCE                               loadRTC@i 0096  
               __end_of_printSortTimer 2290                              putch@data 0082  
             __end_of_I2C_Master_Start 4218                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 41F6                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 34B4  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 2606  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4178  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 1E68                __end_of_I2C_Master_Init 3938  
              __end_of_I2C_Master_Read 3F7C                __end_of_I2C_Master_Wait 41A2  
              __end_of_I2C_Master_Stop 4210                          printRTC@F3211 0131  
                          lcdInst@data 0082                           retrieveLog@i 000E  
                         sensorTest@on 00AD                            _retrieveLog 2B12  
                  __end_ofi2_lcdNibble 3A9C                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 39EE                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
