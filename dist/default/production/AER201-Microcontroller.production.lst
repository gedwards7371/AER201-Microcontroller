

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 11:07:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004F50                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3228
   152  004F50  4D                 	db	77
   153  004F51  4D                 	db	77
   154  004F52  4D                 	db	77
   155  004F53  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3219
   158  004F54  4D                 	db	77
   159  004F55  4D                 	db	77
   160  004F56  4D                 	db	77
   161  004F57  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FAEE                     __pmediumconst:
   165                           	opt stack 0
   166  00FAEE  00                 	db	0
   167  00FAEF                     _keys:
   168                           	opt stack 0
   169  00FAEF  31                 	db	49
   170  00FAF0  32                 	db	50
   171  00FAF1  33                 	db	51
   172  00FAF2  41                 	db	65
   173  00FAF3  34                 	db	52
   174  00FAF4  35                 	db	53
   175  00FAF5  36                 	db	54
   176  00FAF6  42                 	db	66
   177  00FAF7  37                 	db	55
   178  00FAF8  38                 	db	56
   179  00FAF9  39                 	db	57
   180  00FAFA  43                 	db	67
   181  00FAFB  2A                 	db	42
   182  00FAFC  30                 	db	48
   183  00FAFD  23                 	db	35
   184  00FAFE  44                 	db	68
   185  00FAFF  00                 	db	0
   186  00FB00                     __end_of_keys:
   187                           	opt stack 0
   188  00FB00                     _dpowers:
   189                           	opt stack 0
   190  00FB00  0001               	dw	1
   191  00FB02  000A               	dw	10
   192  00FB04  0064               	dw	100
   193  00FB06  03E8               	dw	1000
   194  00FB08  2710               	dw	10000
   195  00FB0A                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB0A                     STR_21:
   269  00FB0A  25                 	db	37
   270  00FB0B  30                 	db	48	;'0'
   271  00FB0C  32                 	db	50	;'2'
   272  00FB0D  64                 	db	100	;'d'
   273  00FB0E  25                 	db	37
   274  00FB0F  73                 	db	115	;'s'
   275  00FB10  20                 	db	32
   276  00FB11  7C                 	db	124
   277  00FB12  20                 	db	32
   278  00FB13  25                 	db	37
   279  00FB14  30                 	db	48	;'0'
   280  00FB15  32                 	db	50	;'2'
   281  00FB16  64                 	db	100	;'d'
   282  00FB17  3A                 	db	58	;':'
   283  00FB18  25                 	db	37
   284  00FB19  30                 	db	48	;'0'
   285  00FB1A  32                 	db	50	;'2'
   286  00FB1B  64                 	db	100	;'d'
   287  00FB1C  3A                 	db	58	;':'
   288  00FB1D  25                 	db	37
   289  00FB1E  30                 	db	48	;'0'
   290  00FB1F  32                 	db	50	;'2'
   291  00FB20  64                 	db	100	;'d'
   292  00FB21  00                 	db	0
   293  00FB22                     STR_66:
   294  00FB22  28                 	db	40
   295  00FB23  64                 	db	100	;'d'
   296  00FB24  61                 	db	97	;'a'
   297  00FB25  74                 	db	116	;'t'
   298  00FB26  61                 	db	97	;'a'
   299  00FB27  3A                 	db	58	;':'
   300  00FB28  20                 	db	32
   301  00FB29  25                 	db	37
   302  00FB2A  75                 	db	117	;'u'
   303  00FB2B  2C                 	db	44
   304  00FB2C  20                 	db	32
   305  00FB2D  61                 	db	97	;'a'
   306  00FB2E  64                 	db	100	;'d'
   307  00FB2F  64                 	db	100	;'d'
   308  00FB30  72                 	db	114	;'r'
   309  00FB31  3A                 	db	58	;':'
   310  00FB32  20                 	db	32
   311  00FB33  25                 	db	37
   312  00FB34  75                 	db	117	;'u'
   313  00FB35  29                 	db	41
   314  00FB36  00                 	db	0
   315  00FB37                     STR_111:
   316  00FB37  44                 	db	68	;'D'
   317  00FB38  20                 	db	32
   318  00FB39  57                 	db	87	;'W'
   319  00FB3A  49                 	db	73	;'I'
   320  00FB3B  4C                 	db	76	;'L'
   321  00FB3C  4C                 	db	76	;'L'
   322  00FB3D  20                 	db	32
   323  00FB3E  52                 	db	82	;'R'
   324  00FB3F  45                 	db	69	;'E'
   325  00FB40  54                 	db	84	;'T'
   326  00FB41  55                 	db	85	;'U'
   327  00FB42  52                 	db	82	;'R'
   328  00FB43  4E                 	db	78	;'N'
   329  00FB44  20                 	db	32
   330  00FB45  20                 	db	32
   331  00FB46  20                 	db	32
   332  00FB47  20                 	db	32
   333  00FB48  00                 	db	0
   334  00FB49                     STR_112:
   335  00FB49  4F                 	db	79	;'O'
   336  00FB4A  54                 	db	84	;'T'
   337  00FB4B  48                 	db	72	;'H'
   338  00FB4C  45                 	db	69	;'E'
   339  00FB4D  52                 	db	82	;'R'
   340  00FB4E  20                 	db	32
   341  00FB4F  53                 	db	83	;'S'
   342  00FB50  45                 	db	69	;'E'
   343  00FB51  54                 	db	84	;'T'
   344  00FB52  53                 	db	83	;'S'
   345  00FB53  20                 	db	32
   346  00FB54  52                 	db	82	;'R'
   347  00FB55  41                 	db	65	;'A'
   348  00FB56  35                 	db	53	;'5'
   349  00FB57  20                 	db	32
   350  00FB58  20                 	db	32
   351  00FB59  20                 	db	32
   352  00FB5A  00                 	db	0
   353  00FB5B                     STR_120:
   354  00FB5B  53                 	db	83	;'S'
   355  00FB5C  3A                 	db	58	;':'
   356  00FB5D  20                 	db	32
   357  00FB5E  44                 	db	68	;'D'
   358  00FB5F  20                 	db	32
   359  00FB60  57                 	db	87	;'W'
   360  00FB61  49                 	db	73	;'I'
   361  00FB62  4C                 	db	76	;'L'
   362  00FB63  4C                 	db	76	;'L'
   363  00FB64  20                 	db	32
   364  00FB65  52                 	db	82	;'R'
   365  00FB66  45                 	db	69	;'E'
   366  00FB67  54                 	db	84	;'T'
   367  00FB68  55                 	db	85	;'U'
   368  00FB69  52                 	db	82	;'R'
   369  00FB6A  4E                 	db	78	;'N'
   370  00FB6B  20                 	db	32
   371  00FB6C  00                 	db	0
   372  00FB6D                     STR_123:
   373  00FB6D  4F                 	db	79	;'O'
   374  00FB6E  54                 	db	84	;'T'
   375  00FB6F  48                 	db	72	;'H'
   376  00FB70  45                 	db	69	;'E'
   377  00FB71  52                 	db	82	;'R'
   378  00FB72  3A                 	db	58	;':'
   379  00FB73  20                 	db	32
   380  00FB74  43                 	db	67	;'C'
   381  00FB75  41                 	db	65	;'A'
   382  00FB76  4D                 	db	77	;'M'
   383  00FB77  20                 	db	32
   384  00FB78  54                 	db	84	;'T'
   385  00FB79  4F                 	db	79	;'O'
   386  00FB7A  47                 	db	71	;'G'
   387  00FB7B  47                 	db	71	;'G'
   388  00FB7C  4C                 	db	76	;'L'
   389  00FB7D  45                 	db	69	;'E'
   390  00FB7E  00                 	db	0
   391  00FB7F                     STR_122:
   392  00FB7F  44                 	db	68	;'D'
   393  00FB80  3A                 	db	58	;':'
   394  00FB81  20                 	db	32
   395  00FB82  52                 	db	82	;'R'
   396  00FB83  45                 	db	69	;'E'
   397  00FB84  54                 	db	84	;'T'
   398  00FB85  7C                 	db	124
   399  00FB86  32                 	db	50	;'2'
   400  00FB87  3A                 	db	58	;':'
   401  00FB88  20                 	db	32
   402  00FB89  43                 	db	67	;'C'
   403  00FB8A  4F                 	db	79	;'O'
   404  00FB8B  4E                 	db	78	;'N'
   405  00FB8C  44                 	db	68	;'D'
   406  00FB8D  20                 	db	32
   407  00FB8E  25                 	db	37
   408  00FB8F  64                 	db	100	;'d'
   409  00FB90  00                 	db	0
   410  00FB91                     STR_3:
   411  00FB91  2D                 	db	45
   412  00FB92  2D                 	db	45
   413  00FB93  20                 	db	32
   414  00FB94  4C                 	db	76	;'L'
   415  00FB95  4F                 	db	79	;'O'
   416  00FB96  47                 	db	71	;'G'
   417  00FB97  20                 	db	32
   418  00FB98  25                 	db	37
   419  00FB99  32                 	db	50	;'2'
   420  00FB9A  64                 	db	100	;'d'
   421  00FB9B  20                 	db	32
   422  00FB9C  48                 	db	72	;'H'
   423  00FB9D  45                 	db	69	;'E'
   424  00FB9E  52                 	db	82	;'R'
   425  00FB9F  45                 	db	69	;'E'
   426  00FBA0  2D                 	db	45
   427  00FBA1  2D                 	db	45
   428  00FBA2  00                 	db	0
   429  00FBA3                     STR_1:
   430  00FBA3  52                 	db	82	;'R'
   431  00FBA4  45                 	db	69	;'E'
   432  00FBA5  53                 	db	83	;'S'
   433  00FBA6  55                 	db	85	;'U'
   434  00FBA7  4C                 	db	76	;'L'
   435  00FBA8  54                 	db	84	;'T'
   436  00FBA9  53                 	db	83	;'S'
   437  00FBAA  20                 	db	32
   438  00FBAB  49                 	db	73	;'I'
   439  00FBAC  4E                 	db	78	;'N'
   440  00FBAD  20                 	db	32
   441  00FBAE  4C                 	db	76	;'L'
   442  00FBAF  4F                 	db	79	;'O'
   443  00FBB0  47                 	db	71	;'G'
   444  00FBB1  20                 	db	32
   445  00FBB2  25                 	db	37
   446  00FBB3  64                 	db	100	;'d'
   447  00FBB4  00                 	db	0
   448  00FBB5                     STR_102:
   449  00FBB5  4D                 	db	77	;'M'
   450  00FBB6  49                 	db	73	;'I'
   451  00FBB7  44                 	db	68	;'D'
   452  00FBB8  20                 	db	32
   453  00FBB9  2D                 	db	45
   454  00FBBA  2D                 	db	45
   455  00FBBB  20                 	db	32
   456  00FBBC  32                 	db	50	;'2'
   457  00FBBD  73                 	db	115	;'s'
   458  00FBBE  20                 	db	32
   459  00FBBF  20                 	db	32
   460  00FBC0  20                 	db	32
   461  00FBC1  20                 	db	32
   462  00FBC2  20                 	db	32
   463  00FBC3  20                 	db	32
   464  00FBC4  20                 	db	32
   465  00FBC5  00                 	db	0
   466  00FBC6                     STR_105:
   467  00FBC6  44                 	db	68	;'D'
   468  00FBC7  52                 	db	82	;'R'
   469  00FBC8  4F                 	db	79	;'O'
   470  00FBC9  50                 	db	80	;'P'
   471  00FBCA  20                 	db	32
   472  00FBCB  2D                 	db	45
   473  00FBCC  2D                 	db	45
   474  00FBCD  20                 	db	32
   475  00FBCE  32                 	db	50	;'2'
   476  00FBCF  73                 	db	115	;'s'
   477  00FBD0  20                 	db	32
   478  00FBD1  20                 	db	32
   479  00FBD2  20                 	db	32
   480  00FBD3  20                 	db	32
   481  00FBD4  20                 	db	32
   482  00FBD5  20                 	db	32
   483  00FBD6  00                 	db	0
   484  00FBD7                     STR_99:
   485  00FBD7  4C                 	db	76	;'L'
   486  00FBD8  45                 	db	69	;'E'
   487  00FBD9  46                 	db	70	;'F'
   488  00FBDA  54                 	db	84	;'T'
   489  00FBDB  20                 	db	32
   490  00FBDC  2D                 	db	45
   491  00FBDD  2D                 	db	45
   492  00FBDE  20                 	db	32
   493  00FBDF  32                 	db	50	;'2'
   494  00FBE0  73                 	db	115	;'s'
   495  00FBE1  20                 	db	32
   496  00FBE2  20                 	db	32
   497  00FBE3  20                 	db	32
   498  00FBE4  20                 	db	32
   499  00FBE5  20                 	db	32
   500  00FBE6  20                 	db	32
   501  00FBE7  00                 	db	0
   502  00FBE8                     STR_104:
   503  00FBE8  4C                 	db	76	;'L'
   504  00FBE9  45                 	db	69	;'E'
   505  00FBEA  56                 	db	86	;'V'
   506  00FBEB  45                 	db	69	;'E'
   507  00FBEC  4C                 	db	76	;'L'
   508  00FBED  20                 	db	32
   509  00FBEE  2D                 	db	45
   510  00FBEF  2D                 	db	45
   511  00FBF0  20                 	db	32
   512  00FBF1  32                 	db	50	;'2'
   513  00FBF2  73                 	db	115	;'s'
   514  00FBF3  20                 	db	32
   515  00FBF4  20                 	db	32
   516  00FBF5  20                 	db	32
   517  00FBF6  20                 	db	32
   518  00FBF7  20                 	db	32
   519  00FBF8  00                 	db	0
   520  00FBF9                     STR_98:
   521  00FBF9  52                 	db	82	;'R'
   522  00FBFA  49                 	db	73	;'I'
   523  00FBFB  47                 	db	71	;'G'
   524  00FBFC  48                 	db	72	;'H'
   525  00FBFD  54                 	db	84	;'T'
   526  00FBFE  20                 	db	32
   527  00FBFF  2D                 	db	45
   528  00FC00  2D                 	db	45
   529  00FC01  20                 	db	32
   530  00FC02  32                 	db	50	;'2'
   531  00FC03  73                 	db	115	;'s'
   532  00FC04  20                 	db	32
   533  00FC05  20                 	db	32
   534  00FC06  20                 	db	32
   535  00FC07  20                 	db	32
   536  00FC08  20                 	db	32
   537  00FC09  00                 	db	0
   538  00FC0A                     STR_97:
   539  00FC0A  4D                 	db	77	;'M'
   540  00FC0B  49                 	db	73	;'I'
   541  00FC0C  44                 	db	68	;'D'
   542  00FC0D  44                 	db	68	;'D'
   543  00FC0E  4C                 	db	76	;'L'
   544  00FC0F  45                 	db	69	;'E'
   545  00FC10  20                 	db	32
   546  00FC11  2D                 	db	45
   547  00FC12  2D                 	db	45
   548  00FC13  20                 	db	32
   549  00FC14  32                 	db	50	;'2'
   550  00FC15  73                 	db	115	;'s'
   551  00FC16  20                 	db	32
   552  00FC17  20                 	db	32
   553  00FC18  20                 	db	32
   554  00FC19  20                 	db	32
   555  00FC1A  00                 	db	0
   556  00FC1B  44                 	db	68	;'D'
   557  00FC1C  20                 	db	32
   558  00FC1D  57                 	db	87	;'W'
   559  00FC1E  49                 	db	73	;'I'
   560  00FC1F  4C                 	db	76	;'L'
   561  00FC20  4C                 	db	76	;'L'
   562  00FC21  20                 	db	32
   563  00FC22  52                 	db	82	;'R'
   564  00FC23  45                 	db	69	;'E'
   565  00FC24  54                 	db	84	;'T'
   566  00FC25  55                 	db	85	;'U'
   567  00FC26  52                 	db	82	;'R'
   568  00FC27  4E                 	db	78	;'N'
   569  00FC28  20                 	db	32
   570  00FC29  20                 	db	32
   571  00FC2A  20                 	db	32
   572  00FC2B  00                 	db	0
   573  00FC2C                     STR_100:
   574  00FC2C  4D                 	db	77	;'M'
   575  00FC2D  49                 	db	73	;'I'
   576  00FC2E  44                 	db	68	;'D'
   577  00FC2F  2D                 	db	45
   578  00FC30  4C                 	db	76	;'L'
   579  00FC31  45                 	db	69	;'E'
   580  00FC32  46                 	db	70	;'F'
   581  00FC33  54                 	db	84	;'T'
   582  00FC34  20                 	db	32
   583  00FC35  2D                 	db	45
   584  00FC36  2D                 	db	45
   585  00FC37  20                 	db	32
   586  00FC38  32                 	db	50	;'2'
   587  00FC39  73                 	db	115	;'s'
   588  00FC3A  20                 	db	32
   589  00FC3B  20                 	db	32
   590  00FC3C  00                 	db	0
   591  00FC3D                     STR_101:
   592  00FC3D  4D                 	db	77	;'M'
   593  00FC3E  49                 	db	73	;'I'
   594  00FC3F  44                 	db	68	;'D'
   595  00FC40  2D                 	db	45
   596  00FC41  52                 	db	82	;'R'
   597  00FC42  49                 	db	73	;'I'
   598  00FC43  47                 	db	71	;'G'
   599  00FC44  48                 	db	72	;'H'
   600  00FC45  54                 	db	84	;'T'
   601  00FC46  20                 	db	32
   602  00FC47  2D                 	db	45
   603  00FC48  2D                 	db	45
   604  00FC49  20                 	db	32
   605  00FC4A  32                 	db	50	;'2'
   606  00FC4B  73                 	db	115	;'s'
   607  00FC4C  20                 	db	32
   608  00FC4D  00                 	db	0
   609  00FC4E  45                 	db	69	;'E'
   610  00FC4F  4C                 	db	76	;'L'
   611  00FC50  53                 	db	83	;'S'
   612  00FC51  45                 	db	69	;'E'
   613  00FC52  20                 	db	32
   614  00FC53  54                 	db	84	;'T'
   615  00FC54  4F                 	db	79	;'O'
   616  00FC55  47                 	db	71	;'G'
   617  00FC56  47                 	db	71	;'G'
   618  00FC57  4C                 	db	76	;'L'
   619  00FC58  45                 	db	69	;'E'
   620  00FC59  53                 	db	83	;'S'
   621  00FC5A  20                 	db	32
   622  00FC5B  52                 	db	82	;'R'
   623  00FC5C  41                 	db	65	;'A'
   624  00FC5D  35                 	db	53	;'5'
   625  00FC5E  00                 	db	0
   626  00FC5F                     STR_72:
   627  00FC5F  41                 	db	65	;'A'
   628  00FC60  4C                 	db	76	;'L'
   629  00FC61  47                 	db	71	;'G'
   630  00FC62  31                 	db	49	;'1'
   631  00FC63  3A                 	db	58	;':'
   632  00FC64  20                 	db	32
   633  00FC65  39                 	db	57	;'9'
   634  00FC66  20                 	db	32
   635  00FC67  50                 	db	80	;'P'
   636  00FC68  4F                 	db	79	;'O'
   637  00FC69  50                 	db	80	;'P'
   638  00FC6A  4E                 	db	78	;'N'
   639  00FC6B  4F                 	db	79	;'O'
   640  00FC6C  54                 	db	84	;'T'
   641  00FC6D  41                 	db	65	;'A'
   642  00FC6E  42                 	db	66	;'B'
   643  00FC6F  00                 	db	0
   644  00FC70                     STR_92:
   645  00FC70  54                 	db	84	;'T'
   646  00FC71  53                 	db	83	;'S'
   647  00FC72  54                 	db	84	;'T'
   648  00FC73  3A                 	db	58	;':'
   649  00FC74  20                 	db	32
   650  00FC75  43                 	db	67	;'C'
   651  00FC76  4F                 	db	79	;'O'
   652  00FC77  4E                 	db	78	;'N'
   653  00FC78  44                 	db	68	;'D'
   654  00FC79  20                 	db	32
   655  00FC7A  53                 	db	83	;'S'
   656  00FC7B  4F                 	db	79	;'O'
   657  00FC7C  4C                 	db	76	;'L'
   658  00FC7D  4E                 	db	78	;'N'
   659  00FC7E  27                 	db	39
   660  00FC7F  44                 	db	68	;'D'
   661  00FC80  00                 	db	0
   662  00FC81                     STR_94:
   663  00FC81  54                 	db	84	;'T'
   664  00FC82  53                 	db	83	;'S'
   665  00FC83  54                 	db	84	;'T'
   666  00FC84  3A                 	db	58	;':'
   667  00FC85  20                 	db	32
   668  00FC86  50                 	db	80	;'P'
   669  00FC87  55                 	db	85	;'U'
   670  00FC88  53                 	db	83	;'S'
   671  00FC89  48                 	db	72	;'H'
   672  00FC8A  20                 	db	32
   673  00FC8B  53                 	db	83	;'S'
   674  00FC8C  4F                 	db	79	;'O'
   675  00FC8D  4C                 	db	76	;'L'
   676  00FC8E  4E                 	db	78	;'N'
   677  00FC8F  27                 	db	39
   678  00FC90  44                 	db	68	;'D'
   679  00FC91  00                 	db	0
   680  00FC92                     STR_68:
   681  00FC92  32                 	db	50	;'2'
   682  00FC93  2E                 	db	46
   683  00FC94  53                 	db	83	;'S'
   684  00FC95  4E                 	db	78	;'N'
   685  00FC96  52                 	db	82	;'R'
   686  00FC97  7C                 	db	124
   687  00FC98  34                 	db	52	;'4'
   688  00FC99  2E                 	db	46
   689  00FC9A  48                 	db	72	;'H'
   690  00FC9B  49                 	db	73	;'I'
   691  00FC9C  7C                 	db	124
   692  00FC9D  35                 	db	53	;'5'
   693  00FC9E  2E                 	db	46
   694  00FC9F  4D                 	db	77	;'M'
   695  00FCA0  45                 	db	69	;'E'
   696  00FCA1  44                 	db	68	;'D'
   697  00FCA2  00                 	db	0
   698  00FCA3                     STR_69:
   699  00FCA3  42                 	db	66	;'B'
   700  00FCA4  2E                 	db	46
   701  00FCA5  50                 	db	80	;'P'
   702  00FCA6  53                 	db	83	;'S'
   703  00FCA7  48                 	db	72	;'H'
   704  00FCA8  7C                 	db	124
   705  00FCA9  38                 	db	56	;'8'
   706  00FCAA  2E                 	db	46
   707  00FCAB  53                 	db	83	;'S'
   708  00FCAC  56                 	db	86	;'V'
   709  00FCAD  7C                 	db	124
   710  00FCAE  39                 	db	57	;'9'
   711  00FCAF  2E                 	db	46
   712  00FCB0  42                 	db	66	;'B'
   713  00FCB1  4C                 	db	76	;'L'
   714  00FCB2  4B                 	db	75	;'K'
   715  00FCB3  00                 	db	0
   716  00FCB4                     STR_110:
   717  00FCB4  54                 	db	84	;'T'
   718  00FCB5  53                 	db	83	;'S'
   719  00FCB6  54                 	db	84	;'T'
   720  00FCB7  3A                 	db	58	;':'
   721  00FCB8  20                 	db	32
   722  00FCB9  42                 	db	66	;'B'
   723  00FCBA  4F                 	db	79	;'O'
   724  00FCBB  54                 	db	84	;'T'
   725  00FCBC  48                 	db	72	;'H'
   726  00FCBD  20                 	db	32
   727  00FCBE  53                 	db	83	;'S'
   728  00FCBF  45                 	db	69	;'E'
   729  00FCC0  52                 	db	82	;'R'
   730  00FCC1  56                 	db	86	;'V'
   731  00FCC2  4F                 	db	79	;'O'
   732  00FCC3  53                 	db	83	;'S'
   733  00FCC4  00                 	db	0
   734  00FCC5                     STR_41:
   735  00FCC5  4C                 	db	76	;'L'
   736  00FCC6  4F                 	db	79	;'O'
   737  00FCC7  47                 	db	71	;'G'
   738  00FCC8  20                 	db	32
   739  00FCC9  31                 	db	49	;'1'
   740  00FCCA  20                 	db	32
   741  00FCCB  20                 	db	32
   742  00FCCC  20                 	db	32
   743  00FCCD  20                 	db	32
   744  00FCCE  20                 	db	32
   745  00FCCF  20                 	db	32
   746  00FCD0  20                 	db	32
   747  00FCD1  20                 	db	32
   748  00FCD2  20                 	db	32
   749  00FCD3  20                 	db	32
   750  00FCD4  20                 	db	32
   751  00FCD5  00                 	db	0
   752  00FCD6                     STR_40:
   753  00FCD6  4C                 	db	76	;'L'
   754  00FCD7  4F                 	db	79	;'O'
   755  00FCD8  47                 	db	71	;'G'
   756  00FCD9  20                 	db	32
   757  00FCDA  32                 	db	50	;'2'
   758  00FCDB  20                 	db	32
   759  00FCDC  20                 	db	32
   760  00FCDD  20                 	db	32
   761  00FCDE  20                 	db	32
   762  00FCDF  20                 	db	32
   763  00FCE0  20                 	db	32
   764  00FCE1  20                 	db	32
   765  00FCE2  20                 	db	32
   766  00FCE3  20                 	db	32
   767  00FCE4  20                 	db	32
   768  00FCE5  20                 	db	32
   769  00FCE6  00                 	db	0
   770  00FCE7                     STR_44:
   771  00FCE7  4C                 	db	76	;'L'
   772  00FCE8  4F                 	db	79	;'O'
   773  00FCE9  47                 	db	71	;'G'
   774  00FCEA  20                 	db	32
   775  00FCEB  33                 	db	51	;'3'
   776  00FCEC  20                 	db	32
   777  00FCED  20                 	db	32
   778  00FCEE  20                 	db	32
   779  00FCEF  20                 	db	32
   780  00FCF0  20                 	db	32
   781  00FCF1  20                 	db	32
   782  00FCF2  20                 	db	32
   783  00FCF3  20                 	db	32
   784  00FCF4  20                 	db	32
   785  00FCF5  20                 	db	32
   786  00FCF6  20                 	db	32
   787  00FCF7  00                 	db	0
   788  00FCF8                     STR_48:
   789  00FCF8  4C                 	db	76	;'L'
   790  00FCF9  4F                 	db	79	;'O'
   791  00FCFA  47                 	db	71	;'G'
   792  00FCFB  20                 	db	32
   793  00FCFC  34                 	db	52	;'4'
   794  00FCFD  20                 	db	32
   795  00FCFE  20                 	db	32
   796  00FCFF  20                 	db	32
   797  00FD00  20                 	db	32
   798  00FD01  20                 	db	32
   799  00FD02  20                 	db	32
   800  00FD03  20                 	db	32
   801  00FD04  20                 	db	32
   802  00FD05  20                 	db	32
   803  00FD06  20                 	db	32
   804  00FD07  20                 	db	32
   805  00FD08  00                 	db	0
   806  00FD09                     STR_36:
   807  00FD09  33                 	db	51	;'3'
   808  00FD0A  2E                 	db	46
   809  00FD0B  20                 	db	32
   810  00FD0C  4C                 	db	76	;'L'
   811  00FD0D  4F                 	db	79	;'O'
   812  00FD0E  47                 	db	71	;'G'
   813  00FD0F  53                 	db	83	;'S'
   814  00FD10  20                 	db	32
   815  00FD11  20                 	db	32
   816  00FD12  20                 	db	32
   817  00FD13  20                 	db	32
   818  00FD14  20                 	db	32
   819  00FD15  20                 	db	32
   820  00FD16  20                 	db	32
   821  00FD17  20                 	db	32
   822  00FD18  20                 	db	32
   823  00FD19  00                 	db	0
   824  00FD1A                     STR_32:
   825  00FD1A  32                 	db	50	;'2'
   826  00FD1B  2E                 	db	46
   827  00FD1C  20                 	db	32
   828  00FD1D  53                 	db	83	;'S'
   829  00FD1E  4F                 	db	79	;'O'
   830  00FD1F  52                 	db	82	;'R'
   831  00FD20  54                 	db	84	;'T'
   832  00FD21  20                 	db	32
   833  00FD22  20                 	db	32
   834  00FD23  20                 	db	32
   835  00FD24  20                 	db	32
   836  00FD25  20                 	db	32
   837  00FD26  20                 	db	32
   838  00FD27  20                 	db	32
   839  00FD28  20                 	db	32
   840  00FD29  20                 	db	32
   841  00FD2A  00                 	db	0
   842  00FD2B                     STR_33:
   843  00FD2B  31                 	db	49	;'1'
   844  00FD2C  2E                 	db	46
   845  00FD2D  20                 	db	32
   846  00FD2E  44                 	db	68	;'D'
   847  00FD2F  41                 	db	65	;'A'
   848  00FD30  54                 	db	84	;'T'
   849  00FD31  45                 	db	69	;'E'
   850  00FD32  2F                 	db	47
   851  00FD33  54                 	db	84	;'T'
   852  00FD34  49                 	db	73	;'I'
   853  00FD35  4D                 	db	77	;'M'
   854  00FD36  45                 	db	69	;'E'
   855  00FD37  20                 	db	32
   856  00FD38  20                 	db	32
   857  00FD39  20                 	db	32
   858  00FD3A  20                 	db	32
   859  00FD3B  00                 	db	0
   860  00FD3C                     STR_24:
   861  00FD3C  20                 	db	32
   862  00FD3D  2D                 	db	45
   863  00FD3E  2D                 	db	45
   864  00FD3F  20                 	db	32
   865  00FD40  50                 	db	80	;'P'
   866  00FD41  4F                 	db	79	;'O'
   867  00FD42  50                 	db	80	;'P'
   868  00FD43  20                 	db	32
   869  00FD44  20                 	db	32
   870  00FD45  43                 	db	67	;'C'
   871  00FD46  41                 	db	65	;'A'
   872  00FD47  4E                 	db	78	;'N'
   873  00FD48  20                 	db	32
   874  00FD49  2D                 	db	45
   875  00FD4A  2D                 	db	45
   876  00FD4B  20                 	db	32
   877  00FD4C  00                 	db	0
   878  00FD4D                     STR_26:
   879  00FD4D  20                 	db	32
   880  00FD4E  2D                 	db	45
   881  00FD4F  2D                 	db	45
   882  00FD50  20                 	db	32
   883  00FD51  53                 	db	83	;'S'
   884  00FD52  4F                 	db	79	;'O'
   885  00FD53  55                 	db	85	;'U'
   886  00FD54  50                 	db	80	;'P'
   887  00FD55  20                 	db	32
   888  00FD56  43                 	db	67	;'C'
   889  00FD57  41                 	db	65	;'A'
   890  00FD58  4E                 	db	78	;'N'
   891  00FD59  20                 	db	32
   892  00FD5A  2D                 	db	45
   893  00FD5B  2D                 	db	45
   894  00FD5C  20                 	db	32
   895  00FD5D  00                 	db	0
   896  00FD5E                     STR_28:
   897  00FD5E  2D                 	db	45
   898  00FD5F  2D                 	db	45
   899  00FD60  20                 	db	32
   900  00FD61  54                 	db	84	;'T'
   901  00FD62  4F                 	db	79	;'O'
   902  00FD63  54                 	db	84	;'T'
   903  00FD64  41                 	db	65	;'A'
   904  00FD65  4C                 	db	76	;'L'
   905  00FD66  20                 	db	32
   906  00FD67  43                 	db	67	;'C'
   907  00FD68  41                 	db	65	;'A'
   908  00FD69  4E                 	db	78	;'N'
   909  00FD6A  53                 	db	83	;'S'
   910  00FD6B  20                 	db	32
   911  00FD6C  2D                 	db	45
   912  00FD6D  2D                 	db	45
   913  00FD6E  00                 	db	0
   914  00FD6F                     STR_39:
   915  00FD6F  4C                 	db	76	;'L'
   916  00FD70  4F                 	db	79	;'O'
   917  00FD71  47                 	db	71	;'G'
   918  00FD72  20                 	db	32
   919  00FD73  31                 	db	49	;'1'
   920  00FD74  20                 	db	32
   921  00FD75  20                 	db	32
   922  00FD76  20                 	db	32
   923  00FD77  20                 	db	32
   924  00FD78  20                 	db	32
   925  00FD79  20                 	db	32
   926  00FD7A  20                 	db	32
   927  00FD7B  20                 	db	32
   928  00FD7C  20                 	db	32
   929  00FD7D  20                 	db	32
   930  00FD7E  3C                 	db	60	;'<'
   931  00FD7F  00                 	db	0
   932  00FD80                     STR_42:
   933  00FD80  4C                 	db	76	;'L'
   934  00FD81  4F                 	db	79	;'O'
   935  00FD82  47                 	db	71	;'G'
   936  00FD83  20                 	db	32
   937  00FD84  32                 	db	50	;'2'
   938  00FD85  20                 	db	32
   939  00FD86  20                 	db	32
   940  00FD87  20                 	db	32
   941  00FD88  20                 	db	32
   942  00FD89  20                 	db	32
   943  00FD8A  20                 	db	32
   944  00FD8B  20                 	db	32
   945  00FD8C  20                 	db	32
   946  00FD8D  20                 	db	32
   947  00FD8E  20                 	db	32
   948  00FD8F  3C                 	db	60	;'<'
   949  00FD90  00                 	db	0
   950  00FD91                     STR_46:
   951  00FD91  4C                 	db	76	;'L'
   952  00FD92  4F                 	db	79	;'O'
   953  00FD93  47                 	db	71	;'G'
   954  00FD94  20                 	db	32
   955  00FD95  33                 	db	51	;'3'
   956  00FD96  20                 	db	32
   957  00FD97  20                 	db	32
   958  00FD98  20                 	db	32
   959  00FD99  20                 	db	32
   960  00FD9A  20                 	db	32
   961  00FD9B  20                 	db	32
   962  00FD9C  20                 	db	32
   963  00FD9D  20                 	db	32
   964  00FD9E  20                 	db	32
   965  00FD9F  20                 	db	32
   966  00FDA0  3C                 	db	60	;'<'
   967  00FDA1  00                 	db	0
   968  00FDA2                     STR_50:
   969  00FDA2  4C                 	db	76	;'L'
   970  00FDA3  4F                 	db	79	;'O'
   971  00FDA4  47                 	db	71	;'G'
   972  00FDA5  20                 	db	32
   973  00FDA6  34                 	db	52	;'4'
   974  00FDA7  20                 	db	32
   975  00FDA8  20                 	db	32
   976  00FDA9  20                 	db	32
   977  00FDAA  20                 	db	32
   978  00FDAB  20                 	db	32
   979  00FDAC  20                 	db	32
   980  00FDAD  20                 	db	32
   981  00FDAE  20                 	db	32
   982  00FDAF  20                 	db	32
   983  00FDB0  20                 	db	32
   984  00FDB1  3C                 	db	60	;'<'
   985  00FDB2  00                 	db	0
   986  00FDB3                     STR_38:
   987  00FDB3  33                 	db	51	;'3'
   988  00FDB4  2E                 	db	46
   989  00FDB5  20                 	db	32
   990  00FDB6  4C                 	db	76	;'L'
   991  00FDB7  4F                 	db	79	;'O'
   992  00FDB8  47                 	db	71	;'G'
   993  00FDB9  53                 	db	83	;'S'
   994  00FDBA  20                 	db	32
   995  00FDBB  20                 	db	32
   996  00FDBC  20                 	db	32
   997  00FDBD  20                 	db	32
   998  00FDBE  20                 	db	32
   999  00FDBF  20                 	db	32
  1000  00FDC0  20                 	db	32
  1001  00FDC1  20                 	db	32
  1002  00FDC2  3C                 	db	60	;'<'
  1003  00FDC3  00                 	db	0
  1004  00FDC4                     STR_34:
  1005  00FDC4  32                 	db	50	;'2'
  1006  00FDC5  2E                 	db	46
  1007  00FDC6  20                 	db	32
  1008  00FDC7  53                 	db	83	;'S'
  1009  00FDC8  4F                 	db	79	;'O'
  1010  00FDC9  52                 	db	82	;'R'
  1011  00FDCA  54                 	db	84	;'T'
  1012  00FDCB  20                 	db	32
  1013  00FDCC  20                 	db	32
  1014  00FDCD  20                 	db	32
  1015  00FDCE  20                 	db	32
  1016  00FDCF  20                 	db	32
  1017  00FDD0  20                 	db	32
  1018  00FDD1  20                 	db	32
  1019  00FDD2  20                 	db	32
  1020  00FDD3  3C                 	db	60	;'<'
  1021  00FDD4  00                 	db	0
  1022  00FDD5                     STR_31:
  1023  00FDD5  31                 	db	49	;'1'
  1024  00FDD6  2E                 	db	46
  1025  00FDD7  20                 	db	32
  1026  00FDD8  44                 	db	68	;'D'
  1027  00FDD9  41                 	db	65	;'A'
  1028  00FDDA  54                 	db	84	;'T'
  1029  00FDDB  45                 	db	69	;'E'
  1030  00FDDC  2F                 	db	47
  1031  00FDDD  54                 	db	84	;'T'
  1032  00FDDE  49                 	db	73	;'I'
  1033  00FDDF  4D                 	db	77	;'M'
  1034  00FDE0  45                 	db	69	;'E'
  1035  00FDE1  20                 	db	32
  1036  00FDE2  20                 	db	32
  1037  00FDE3  20                 	db	32
  1038  00FDE4  3C                 	db	60	;'<'
  1039  00FDE5  00                 	db	0
  1040  00FDE6                     STR_6:
  1041  00FDE6  50                 	db	80	;'P'
  1042  00FDE7  41                 	db	65	;'A'
  1043  00FDE8  55                 	db	85	;'U'
  1044  00FDE9  53                 	db	83	;'S'
  1045  00FDEA  45                 	db	69	;'E'
  1046  00FDEB  20                 	db	32
  1047  00FDEC  3C                 	db	60	;'<'
  1048  00FDED  20                 	db	32
  1049  00FDEE  7C                 	db	124
  1050  00FDEF  20                 	db	32
  1051  00FDF0  42                 	db	66	;'B'
  1052  00FDF1  41                 	db	65	;'A'
  1053  00FDF2  43                 	db	67	;'C'
  1054  00FDF3  4B                 	db	75	;'K'
  1055  00FDF4  20                 	db	32
  1056  00FDF5  3E                 	db	62	;'>'
  1057  00FDF6  00                 	db	0
  1058  00FDF7                     STR_30:
  1059  00FDF7  50                 	db	80	;'P'
  1060  00FDF8  55                 	db	85	;'U'
  1061  00FDF9  53                 	db	83	;'S'
  1062  00FDFA  48                 	db	72	;'H'
  1063  00FDFB  20                 	db	32
  1064  00FDFC  54                 	db	84	;'T'
  1065  00FDFD  4F                 	db	79	;'O'
  1066  00FDFE  20                 	db	32
  1067  00FDFF  43                 	db	67	;'C'
  1068  00FE00  4F                 	db	79	;'O'
  1069  00FE01  4E                 	db	78	;'N'
  1070  00FE02  54                 	db	84	;'T'
  1071  00FE03  49                 	db	73	;'I'
  1072  00FE04  4E                 	db	78	;'N'
  1073  00FE05  55                 	db	85	;'U'
  1074  00FE06  45                 	db	69	;'E'
  1075  00FE07  00                 	db	0
  1076  00FE08                     STR_27:
  1077  00FE08  4E                 	db	78	;'N'
  1078  00FE09  4C                 	db	76	;'L'
  1079  00FE0A  41                 	db	65	;'A'
  1080  00FE0B  42                 	db	66	;'B'
  1081  00FE0C  3A                 	db	58	;':'
  1082  00FE0D  20                 	db	32
  1083  00FE0E  25                 	db	37
  1084  00FE0F  64                 	db	100	;'d'
  1085  00FE10  7C                 	db	124
  1086  00FE11  4C                 	db	76	;'L'
  1087  00FE12  41                 	db	65	;'A'
  1088  00FE13  42                 	db	66	;'B'
  1089  00FE14  3A                 	db	58	;':'
  1090  00FE15  20                 	db	32
  1091  00FE16  25                 	db	37
  1092  00FE17  64                 	db	100	;'d'
  1093  00FE18  00                 	db	0
  1094  00FE19                     STR_25:
  1095  00FE19  4E                 	db	78	;'N'
  1096  00FE1A  54                 	db	84	;'T'
  1097  00FE1B  41                 	db	65	;'A'
  1098  00FE1C  42                 	db	66	;'B'
  1099  00FE1D  3A                 	db	58	;':'
  1100  00FE1E  20                 	db	32
  1101  00FE1F  25                 	db	37
  1102  00FE20  64                 	db	100	;'d'
  1103  00FE21  7C                 	db	124
  1104  00FE22  54                 	db	84	;'T'
  1105  00FE23  41                 	db	65	;'A'
  1106  00FE24  42                 	db	66	;'B'
  1107  00FE25  3A                 	db	58	;':'
  1108  00FE26  20                 	db	32
  1109  00FE27  25                 	db	37
  1110  00FE28  64                 	db	100	;'d'
  1111  00FE29  00                 	db	0
  1112  00FE2A                     STR_83:
  1113  00FE2A  4D                 	db	77	;'M'
  1114  00FE2B  41                 	db	65	;'A'
  1115  00FE2C  47                 	db	71	;'G'
  1116  00FE2D  5F                 	db	95	;'_'
  1117  00FE2E  73                 	db	115	;'s'
  1118  00FE2F  69                 	db	105	;'i'
  1119  00FE30  67                 	db	103	;'g'
  1120  00FE31  6E                 	db	110	;'n'
  1121  00FE32  61                 	db	97	;'a'
  1122  00FE33  6C                 	db	108	;'l'
  1123  00FE34  3A                 	db	58	;':'
  1124  00FE35  20                 	db	32
  1125  00FE36  25                 	db	37
  1126  00FE37  64                 	db	100	;'d'
  1127  00FE38  20                 	db	32
  1128  00FE39  00                 	db	0
  1129  00FE3A                     STR_103:
  1130  00FE3A  54                 	db	84	;'T'
  1131  00FE3B  53                 	db	83	;'S'
  1132  00FE3C  54                 	db	84	;'T'
  1133  00FE3D  3A                 	db	58	;':'
  1134  00FE3E  20                 	db	32
  1135  00FE3F  54                 	db	84	;'T'
  1136  00FE40  49                 	db	73	;'I'
  1137  00FE41  4C                 	db	76	;'L'
  1138  00FE42  54                 	db	84	;'T'
  1139  00FE43  20                 	db	32
  1140  00FE44  53                 	db	83	;'S'
  1141  00FE45  45                 	db	69	;'E'
  1142  00FE46  52                 	db	82	;'R'
  1143  00FE47  56                 	db	86	;'V'
  1144  00FE48  4F                 	db	79	;'O'
  1145  00FE49  00                 	db	0
  1146  00FE4A                     STR_4:
  1147  00FE4A  44                 	db	68	;'D'
  1148  00FE4B  49                 	db	73	;'I'
  1149  00FE4C  44                 	db	68	;'D'
  1150  00FE4D  4E                 	db	78	;'N'
  1151  00FE4E  27                 	db	39
  1152  00FE4F  54                 	db	84	;'T'
  1153  00FE50  20                 	db	32
  1154  00FE51  43                 	db	67	;'C'
  1155  00FE52  4F                 	db	79	;'O'
  1156  00FE53  4D                 	db	77	;'M'
  1157  00FE54  50                 	db	80	;'P'
  1158  00FE55  4C                 	db	76	;'L'
  1159  00FE56  45                 	db	69	;'E'
  1160  00FE57  54                 	db	84	;'T'
  1161  00FE58  45                 	db	69	;'E'
  1162  00FE59  00                 	db	0
  1163  00FE5A                     STR_80:
  1164  00FE5A  49                 	db	73	;'I'
  1165  00FE5B  52                 	db	82	;'R'
  1166  00FE5C  5F                 	db	95	;'_'
  1167  00FE5D  73                 	db	115	;'s'
  1168  00FE5E  69                 	db	105	;'i'
  1169  00FE5F  67                 	db	103	;'g'
  1170  00FE60  6E                 	db	110	;'n'
  1171  00FE61  61                 	db	97	;'a'
  1172  00FE62  6C                 	db	108	;'l'
  1173  00FE63  3A                 	db	58	;':'
  1174  00FE64  20                 	db	32
  1175  00FE65  25                 	db	37
  1176  00FE66  64                 	db	100	;'d'
  1177  00FE67  20                 	db	32
  1178  00FE68  00                 	db	0
  1179  00FE69                     STR_109:
  1180  00FE69  43                 	db	67	;'C'
  1181  00FE6A  41                 	db	65	;'A'
  1182  00FE6B  4D                 	db	77	;'M'
  1183  00FE6C  20                 	db	32
  1184  00FE6D  44                 	db	68	;'D'
  1185  00FE6E  57                 	db	87	;'W'
  1186  00FE6F  4E                 	db	78	;'N'
  1187  00FE70  20                 	db	32
  1188  00FE71  7C                 	db	124
  1189  00FE72  52                 	db	82	;'R'
  1190  00FE73  43                 	db	67	;'C'
  1191  00FE74  30                 	db	48	;'0'
  1192  00FE75  3D                 	db	61	;'='
  1193  00FE76  30                 	db	48	;'0'
  1194  00FE77  00                 	db	0
  1195  00FE78                     STR_108:
  1196  00FE78  43                 	db	67	;'C'
  1197  00FE79  41                 	db	65	;'A'
  1198  00FE7A  4D                 	db	77	;'M'
  1199  00FE7B  20                 	db	32
  1200  00FE7C  55                 	db	85	;'U'
  1201  00FE7D  50                 	db	80	;'P'
  1202  00FE7E  20                 	db	32
  1203  00FE7F  20                 	db	32
  1204  00FE80  7C                 	db	124
  1205  00FE81  52                 	db	82	;'R'
  1206  00FE82  43                 	db	67	;'C'
  1207  00FE83  30                 	db	48	;'0'
  1208  00FE84  3D                 	db	61	;'='
  1209  00FE85  31                 	db	49	;'1'
  1210  00FE86  00                 	db	0
  1211  00FE87                     STR_82:
  1212  00FE87  54                 	db	84	;'T'
  1213  00FE88  53                 	db	83	;'S'
  1214  00FE89  54                 	db	84	;'T'
  1215  00FE8A  3A                 	db	58	;':'
  1216  00FE8B  20                 	db	32
  1217  00FE8C  4D                 	db	77	;'M'
  1218  00FE8D  41                 	db	65	;'A'
  1219  00FE8E  47                 	db	71	;'G'
  1220  00FE8F  4E                 	db	78	;'N'
  1221  00FE90  45                 	db	69	;'E'
  1222  00FE91  54                 	db	84	;'T'
  1223  00FE92  49                 	db	73	;'I'
  1224  00FE93  53                 	db	83	;'S'
  1225  00FE94  4D                 	db	77	;'M'
  1226  00FE95  00                 	db	0
  1227  00FE96                     STR_107:
  1228  00FE96  54                 	db	84	;'T'
  1229  00FE97  53                 	db	83	;'S'
  1230  00FE98  54                 	db	84	;'T'
  1231  00FE99  3A                 	db	58	;':'
  1232  00FE9A  20                 	db	32
  1233  00FE9B  43                 	db	67	;'C'
  1234  00FE9C  41                 	db	65	;'A'
  1235  00FE9D  4D                 	db	77	;'M'
  1236  00FE9E  20                 	db	32
  1237  00FE9F  53                 	db	83	;'S'
  1238  00FEA0  45                 	db	69	;'E'
  1239  00FEA1  52                 	db	82	;'R'
  1240  00FEA2  56                 	db	86	;'V'
  1241  00FEA3  4F                 	db	79	;'O'
  1242  00FEA4  00                 	db	0
  1243  00FEA5                     STR_96:
  1244  00FEA5  54                 	db	84	;'T'
  1245  00FEA6  53                 	db	83	;'S'
  1246  00FEA7  54                 	db	84	;'T'
  1247  00FEA8  3A                 	db	58	;':'
  1248  00FEA9  20                 	db	32
  1249  00FEAA  50                 	db	80	;'P'
  1250  00FEAB  41                 	db	65	;'A'
  1251  00FEAC  4E                 	db	78	;'N'
  1252  00FEAD  20                 	db	32
  1253  00FEAE  53                 	db	83	;'S'
  1254  00FEAF  45                 	db	69	;'E'
  1255  00FEB0  52                 	db	82	;'R'
  1256  00FEB1  56                 	db	86	;'V'
  1257  00FEB2  4F                 	db	79	;'O'
  1258  00FEB3  00                 	db	0
  1259  00FEB4                     STR_75:
  1260  00FEB4  41                 	db	65	;'A'
  1261  00FEB5  4C                 	db	76	;'L'
  1262  00FEB6  47                 	db	71	;'G'
  1263  00FEB7  34                 	db	52	;'4'
  1264  00FEB8  3A                 	db	58	;':'
  1265  00FEB9  20                 	db	32
  1266  00FEBA  41                 	db	65	;'A'
  1267  00FEBB  4C                 	db	76	;'L'
  1268  00FEBC  4C                 	db	76	;'L'
  1269  00FEBD  20                 	db	32
  1270  00FEBE  43                 	db	67	;'C'
  1271  00FEBF  41                 	db	65	;'A'
  1272  00FEC0  4E                 	db	78	;'N'
  1273  00FEC1  53                 	db	83	;'S'
  1274  00FEC2  00                 	db	0
  1275  00FEC3                     STR_90:
  1276  00FEC3  54                 	db	84	;'T'
  1277  00FEC4  53                 	db	83	;'S'
  1278  00FEC5  54                 	db	84	;'T'
  1279  00FEC6  3A                 	db	58	;':'
  1280  00FEC7  20                 	db	32
  1281  00FEC8  44                 	db	68	;'D'
  1282  00FEC9  43                 	db	67	;'C'
  1283  00FECA  20                 	db	32
  1284  00FECB  4D                 	db	77	;'M'
  1285  00FECC  4F                 	db	79	;'O'
  1286  00FECD  54                 	db	84	;'T'
  1287  00FECE  4F                 	db	79	;'O'
  1288  00FECF  52                 	db	82	;'R'
  1289  00FED0  53                 	db	83	;'S'
  1290  00FED1  00                 	db	0
  1291  00FED2                     STR_70:
  1292  00FED2  41                 	db	65	;'A'
  1293  00FED3  4C                 	db	76	;'L'
  1294  00FED4  47                 	db	71	;'G'
  1295  00FED5  4F                 	db	79	;'O'
  1296  00FED6  52                 	db	82	;'R'
  1297  00FED7  49                 	db	73	;'I'
  1298  00FED8  54                 	db	84	;'T'
  1299  00FED9  48                 	db	72	;'H'
  1300  00FEDA  4D                 	db	77	;'M'
  1301  00FEDB  20                 	db	32
  1302  00FEDC  54                 	db	84	;'T'
  1303  00FEDD  45                 	db	69	;'E'
  1304  00FEDE  53                 	db	83	;'S'
  1305  00FEDF  54                 	db	84	;'T'
  1306  00FEE0  00                 	db	0
  1307  00FEE1                     STR_91:
  1308  00FEE1  50                 	db	80	;'P'
  1309  00FEE2  49                 	db	73	;'I'
  1310  00FEE3  4E                 	db	78	;'N'
  1311  00FEE4  20                 	db	32
  1312  00FEE5  52                 	db	82	;'R'
  1313  00FEE6  41                 	db	65	;'A'
  1314  00FEE7  35                 	db	53	;'5'
  1315  00FEE8  20                 	db	32
  1316  00FEE9  48                 	db	72	;'H'
  1317  00FEEA  49                 	db	73	;'I'
  1318  00FEEB  47                 	db	71	;'G'
  1319  00FEEC  48                 	db	72	;'H'
  1320  00FEED  2E                 	db	46
  1321  00FEEE  00                 	db	0
  1322  00FEEF                     STR_73:
  1323  00FEEF  41                 	db	65	;'A'
  1324  00FEF0  4C                 	db	76	;'L'
  1325  00FEF1  47                 	db	71	;'G'
  1326  00FEF2  32                 	db	50	;'2'
  1327  00FEF3  3A                 	db	58	;':'
  1328  00FEF4  20                 	db	32
  1329  00FEF5  31                 	db	49	;'1'
  1330  00FEF6  32                 	db	50	;'2'
  1331  00FEF7  20                 	db	32
  1332  00FEF8  43                 	db	67	;'C'
  1333  00FEF9  41                 	db	65	;'A'
  1334  00FEFA  4E                 	db	78	;'N'
  1335  00FEFB  53                 	db	83	;'S'
  1336  00FEFC  00                 	db	0
  1337  00FEFD                     STR_76:
  1338  00FEFD  41                 	db	65	;'A'
  1339  00FEFE  4C                 	db	76	;'L'
  1340  00FEFF  47                 	db	71	;'G'
  1341  00FF00  35                 	db	53	;'5'
  1342  00FF01  3A                 	db	58	;':'
  1343  00FF02  20                 	db	32
  1344  00FF03  4E                 	db	78	;'N'
  1345  00FF04  4F                 	db	79	;'O'
  1346  00FF05  20                 	db	32
  1347  00FF06  43                 	db	67	;'C'
  1348  00FF07  41                 	db	65	;'A'
  1349  00FF08  4E                 	db	78	;'N'
  1350  00FF09  53                 	db	83	;'S'
  1351  00FF0A  00                 	db	0
  1352  00FF0B                     STR_71:
  1353  00FF0B  50                 	db	80	;'P'
  1354  00FF0C  55                 	db	85	;'U'
  1355  00FF0D  53                 	db	83	;'S'
  1356  00FF0E  48                 	db	72	;'H'
  1357  00FF0F  20                 	db	32
  1358  00FF10  54                 	db	84	;'T'
  1359  00FF11  4F                 	db	79	;'O'
  1360  00FF12  20                 	db	32
  1361  00FF13  53                 	db	83	;'S'
  1362  00FF14  54                 	db	84	;'T'
  1363  00FF15  41                 	db	65	;'A'
  1364  00FF16  52                 	db	82	;'R'
  1365  00FF17  54                 	db	84	;'T'
  1366  00FF18  00                 	db	0
  1367  00FF19                     STR_23:
  1368  00FF19  25                 	db	37
  1369  00FF1A  64                 	db	100	;'d'
  1370  00FF1B  20                 	db	32
  1371  00FF1C  4D                 	db	77	;'M'
  1372  00FF1D  49                 	db	73	;'I'
  1373  00FF1E  4E                 	db	78	;'N'
  1374  00FF1F  20                 	db	32
  1375  00FF20  25                 	db	37
  1376  00FF21  64                 	db	100	;'d'
  1377  00FF22  20                 	db	32
  1378  00FF23  53                 	db	83	;'S'
  1379  00FF24  45                 	db	69	;'E'
  1380  00FF25  43                 	db	67	;'C'
  1381  00FF26  00                 	db	0
  1382  00FF27                     STR_2:
  1383  00FF27  54                 	db	84	;'T'
  1384  00FF28  49                 	db	73	;'I'
  1385  00FF29  4D                 	db	77	;'M'
  1386  00FF2A  45                 	db	69	;'E'
  1387  00FF2B  3A                 	db	58	;':'
  1388  00FF2C  20                 	db	32
  1389  00FF2D  25                 	db	37
  1390  00FF2E  64                 	db	100	;'d'
  1391  00FF2F  3A                 	db	58	;':'
  1392  00FF30  25                 	db	37
  1393  00FF31  30                 	db	48	;'0'
  1394  00FF32  32                 	db	50	;'2'
  1395  00FF33  64                 	db	100	;'d'
  1396  00FF34  00                 	db	0
  1397  00FF35                     STR_79:
  1398  00FF35  54                 	db	84	;'T'
  1399  00FF36  53                 	db	83	;'S'
  1400  00FF37  54                 	db	84	;'T'
  1401  00FF38  3A                 	db	58	;':'
  1402  00FF39  20                 	db	32
  1403  00FF3A  49                 	db	73	;'I'
  1404  00FF3B  52                 	db	82	;'R'
  1405  00FF3C  20                 	db	32
  1406  00FF3D  53                 	db	83	;'S'
  1407  00FF3E  4E                 	db	78	;'N'
  1408  00FF3F  53                 	db	83	;'S'
  1409  00FF40  52                 	db	82	;'R'
  1410  00FF41  00                 	db	0
  1411  00FF42                     STR_65:
  1412  00FF42  54                 	db	84	;'T'
  1413  00FF43  49                 	db	73	;'I'
  1414  00FF44  4D                 	db	77	;'M'
  1415  00FF45  45                 	db	69	;'E'
  1416  00FF46  20                 	db	32
  1417  00FF47  25                 	db	37
  1418  00FF48  64                 	db	100	;'d'
  1419  00FF49  3A                 	db	58	;':'
  1420  00FF4A  25                 	db	37
  1421  00FF4B  30                 	db	48	;'0'
  1422  00FF4C  32                 	db	50	;'2'
  1423  00FF4D  64                 	db	100	;'d'
  1424  00FF4E  00                 	db	0
  1425  00FF4F                     STR_74:
  1426  00FF4F  41                 	db	65	;'A'
  1427  00FF50  4C                 	db	76	;'L'
  1428  00FF51  47                 	db	71	;'G'
  1429  00FF52  33                 	db	51	;'3'
  1430  00FF53  3A                 	db	58	;':'
  1431  00FF54  20                 	db	32
  1432  00FF55  31                 	db	49	;'1'
  1433  00FF56  20                 	db	32
  1434  00FF57  43                 	db	67	;'C'
  1435  00FF58  41                 	db	65	;'A'
  1436  00FF59  4E                 	db	78	;'N'
  1437  00FF5A  00                 	db	0
  1438  00FF5B                     STR_93:
  1439  00FF5B  50                 	db	80	;'P'
  1440  00FF5C  49                 	db	73	;'I'
  1441  00FF5D  4E                 	db	78	;'N'
  1442  00FF5E  20                 	db	32
  1443  00FF5F  52                 	db	82	;'R'
  1444  00FF60  41                 	db	65	;'A'
  1445  00FF61  33                 	db	51	;'3'
  1446  00FF62  2E                 	db	46
  1447  00FF63  2E                 	db	46
  1448  00FF64  2E                 	db	46
  1449  00FF65  00                 	db	0
  1450  00FF66                     STR_95:
  1451  00FF66  50                 	db	80	;'P'
  1452  00FF67  49                 	db	73	;'I'
  1453  00FF68  4E                 	db	78	;'N'
  1454  00FF69  20                 	db	32
  1455  00FF6A  52                 	db	82	;'R'
  1456  00FF6B  41                 	db	65	;'A'
  1457  00FF6C  34                 	db	52	;'4'
  1458  00FF6D  2E                 	db	46
  1459  00FF6E  2E                 	db	46
  1460  00FF6F  2E                 	db	46
  1461  00FF70  00                 	db	0
  1462  00FF71                     STR_113:
  1463  00FF71  50                 	db	80	;'P'
  1464  00FF72  55                 	db	85	;'U'
  1465  00FF73  53                 	db	83	;'S'
  1466  00FF74  48                 	db	72	;'H'
  1467  00FF75  45                 	db	69	;'E'
  1468  00FF76  52                 	db	82	;'R'
  1469  00FF77  20                 	db	32
  1470  00FF78  54                 	db	84	;'T'
  1471  00FF79  53                 	db	83	;'S'
  1472  00FF7A  54                 	db	84	;'T'
  1473  00FF7B  00                 	db	0
  1474  00FF7C                     STR_64:
  1475  00FF7C  53                 	db	83	;'S'
  1476  00FF7D  4F                 	db	79	;'O'
  1477  00FF7E  52                 	db	82	;'R'
  1478  00FF7F  54                 	db	84	;'T'
  1479  00FF80  49                 	db	73	;'I'
  1480  00FF81  4E                 	db	78	;'N'
  1481  00FF82  47                 	db	71	;'G'
  1482  00FF83  2E                 	db	46
  1483  00FF84  2E                 	db	46
  1484  00FF85  2E                 	db	46
  1485  00FF86  00                 	db	0
  1486  00FF87                     STR_84:
  1487  00FF87  54                 	db	84	;'T'
  1488  00FF88  53                 	db	83	;'S'
  1489  00FF89  54                 	db	84	;'T'
  1490  00FF8A  3A                 	db	58	;':'
  1491  00FF8B  20                 	db	32
  1492  00FF8C  43                 	db	67	;'C'
  1493  00FF8D  4F                 	db	79	;'O'
  1494  00FF8E  4E                 	db	78	;'N'
  1495  00FF8F  44                 	db	68	;'D'
  1496  00FF90  00                 	db	0
  1497  00FF91                     STR_88:
  1498  00FF91  41                 	db	65	;'A'
  1499  00FF92  43                 	db	67	;'C'
  1500  00FF93  54                 	db	84	;'T'
  1501  00FF94  55                 	db	85	;'U'
  1502  00FF95  41                 	db	65	;'A'
  1503  00FF96  54                 	db	84	;'T'
  1504  00FF97  4F                 	db	79	;'O'
  1505  00FF98  52                 	db	82	;'R'
  1506  00FF99  53                 	db	83	;'S'
  1507  00FF9A  00                 	db	0
  1508  00FF9B                     STR_22:
  1509  00FF9B  44                 	db	68	;'D'
  1510  00FF9C  55                 	db	85	;'U'
  1511  00FF9D  52                 	db	82	;'R'
  1512  00FF9E  41                 	db	65	;'A'
  1513  00FF9F  54                 	db	84	;'T'
  1514  00FFA0  49                 	db	73	;'I'
  1515  00FFA1  4F                 	db	79	;'O'
  1516  00FFA2  4E                 	db	78	;'N'
  1517  00FFA3  3A                 	db	58	;':'
  1518  00FFA4  00                 	db	0
  1519  00FFA5                     STR_86:
  1520  00FFA5  43                 	db	67	;'C'
  1521  00FFA6  4F                 	db	79	;'O'
  1522  00FFA7  4E                 	db	78	;'N'
  1523  00FFA8  44                 	db	68	;'D'
  1524  00FFA9  3A                 	db	58	;':'
  1525  00FFAA  20                 	db	32
  1526  00FFAB  25                 	db	37
  1527  00FFAC  64                 	db	100	;'d'
  1528  00FFAD  00                 	db	0
  1529  00FFAE                     STR_77:
  1530  00FFAE  53                 	db	83	;'S'
  1531  00FFAF  45                 	db	69	;'E'
  1532  00FFB0  4E                 	db	78	;'N'
  1533  00FFB1  53                 	db	83	;'S'
  1534  00FFB2  4F                 	db	79	;'O'
  1535  00FFB3  52                 	db	82	;'R'
  1536  00FFB4  53                 	db	83	;'S'
  1537  00FFB5  00                 	db	0
  1538  00FFB6                     STR_126:
  1539  00FFB6  28                 	db	40
  1540  00FFB7  6E                 	db	110	;'n'
  1541  00FFB8  75                 	db	117	;'u'
  1542  00FFB9  6C                 	db	108	;'l'
  1543  00FFBA  6C                 	db	108	;'l'
  1544  00FFBB  29                 	db	41
  1545  00FFBC  00                 	db	0
  1546  00FFBD                     STR_67:
  1547  00FFBD  46                 	db	70	;'F'
  1548  00FFBE  41                 	db	65	;'A'
  1549  00FFBF  49                 	db	73	;'I'
  1550  00FFC0  4C                 	db	76	;'L'
  1551  00FFC1  45                 	db	69	;'E'
  1552  00FFC2  44                 	db	68	;'D'
  1553  00FFC3  00                 	db	0
  1554  00FFC4                     STR_7:
  1555  00FFC4  53                 	db	83	;'S'
  1556  00FFC5  54                 	db	84	;'T'
  1557  00FFC6  41                 	db	65	;'A'
  1558  00FFC7  52                 	db	82	;'R'
  1559  00FFC8  54                 	db	84	;'T'
  1560  00FFC9  3A                 	db	58	;':'
  1561  00FFCA  00                 	db	0
  1562  00FFCB                     STR_9:
  1563  00FFCB  46                 	db	70	;'F'
  1564  00FFCC  45                 	db	69	;'E'
  1565  00FFCD  42                 	db	66	;'B'
  1566  00FFCE  00                 	db	0
  1567  00FFCF                     STR_19:
  1568  00FFCF  44                 	db	68	;'D'
  1569  00FFD0  45                 	db	69	;'E'
  1570  00FFD1  43                 	db	67	;'C'
  1571  00FFD2  00                 	db	0
  1572  00FFD3                     STR_15:
  1573  00FFD3  41                 	db	65	;'A'
  1574  00FFD4  55                 	db	85	;'U'
  1575  00FFD5  47                 	db	71	;'G'
  1576  00FFD6  00                 	db	0
  1577  00FFD7                     STR_14:
  1578  00FFD7  4A                 	db	74	;'J'
  1579  00FFD8  55                 	db	85	;'U'
  1580  00FFD9  4C                 	db	76	;'L'
  1581  00FFDA  00                 	db	0
  1582  00FFDB                     STR_8:
  1583  00FFDB  4A                 	db	74	;'J'
  1584  00FFDC  41                 	db	65	;'A'
  1585  00FFDD  4E                 	db	78	;'N'
  1586  00FFDE  00                 	db	0
  1587  00FFDF                     STR_13:
  1588  00FFDF  4A                 	db	74	;'J'
  1589  00FFE0  55                 	db	85	;'U'
  1590  00FFE1  4E                 	db	78	;'N'
  1591  00FFE2  00                 	db	0
  1592  00FFE3                     STR_16:
  1593  00FFE3  53                 	db	83	;'S'
  1594  00FFE4  45                 	db	69	;'E'
  1595  00FFE5  50                 	db	80	;'P'
  1596  00FFE6  00                 	db	0
  1597  00FFE7                     STR_10:
  1598  00FFE7  4D                 	db	77	;'M'
  1599  00FFE8  41                 	db	65	;'A'
  1600  00FFE9  52                 	db	82	;'R'
  1601  00FFEA  00                 	db	0
  1602  00FFEB                     STR_11:
  1603  00FFEB  41                 	db	65	;'A'
  1604  00FFEC  50                 	db	80	;'P'
  1605  00FFED  52                 	db	82	;'R'
  1606  00FFEE  00                 	db	0
  1607  00FFEF                     STR_20:
  1608  00FFEF  45                 	db	69	;'E'
  1609  00FFF0  52                 	db	82	;'R'
  1610  00FFF1  52                 	db	82	;'R'
  1611  00FFF2  00                 	db	0
  1612  00FFF3                     STR_17:
  1613  00FFF3  4F                 	db	79	;'O'
  1614  00FFF4  43                 	db	67	;'C'
  1615  00FFF5  54                 	db	84	;'T'
  1616  00FFF6  00                 	db	0
  1617  00FFF7                     STR_18:
  1618  00FFF7  4E                 	db	78	;'N'
  1619  00FFF8  4F                 	db	79	;'O'
  1620  00FFF9  56                 	db	86	;'V'
  1621  00FFFA  00                 	db	0
  1622  00FFFB                     STR_12:
  1623  00FFFB  4D                 	db	77	;'M'
  1624  00FFFC  41                 	db	65	;'A'
  1625  00FFFD  59                 	db	89	;'Y'
  1626  00FFFE  00                 	db	0
  1627  0000                     
  1628                           ; #config settings
  1629  00FFFF  00                 	db	0	; dummy byte at the end
  1630  0000                     
  1631                           	psect	cinit
  1632  00480A                     __pcinit:
  1633                           	opt stack 0
  1634  00480A                     start_initialization:
  1635                           	opt stack 0
  1636  00480A                     __initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Initialize objects allocated to BANK1 (8 bytes)
  1640                           ; load TBLPTR registers with __pidataBANK1
  1641  00480A  0E50               	movlw	low __pidataBANK1
  1642  00480C  6EF6               	movwf	tblptrl,c
  1643  00480E  0E4F               	movlw	high __pidataBANK1
  1644  004810  6EF7               	movwf	tblptrh,c
  1645  004812  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1646  004814  6EF8               	movwf	tblptru,c
  1647  004816  EE01  F035         	lfsr	0,__pdataBANK1
  1648  00481A  EE10 F008          	lfsr	1,8
  1649  00481E                     copy_data0:
  1650  00481E  0009               	tblrd		*+
  1651  004820  CFF5 FFEE          	movff	tablat,postinc0
  1652  004824  50E5               	movf	postdec1,w,c
  1653  004826  50E1               	movf	fsr1l,w,c
  1654  004828  E1FA               	bnz	copy_data0
  1655                           
  1656                           ; Clear objects allocated to BANK1 (53 bytes)
  1657  00482A  EE01  F000         	lfsr	0,__pbssBANK1
  1658  00482E  0E35               	movlw	53
  1659  004830                     clear_0:
  1660  004830  6AEE               	clrf	postinc0,c
  1661  004832  06E8               	decf	wreg,f,c
  1662  004834  E1FD               	bnz	clear_0
  1663                           
  1664                           ; Clear objects allocated to BANK0 (38 bytes)
  1665  004836  EE00  F0DA         	lfsr	0,__pbssBANK0
  1666  00483A  0E26               	movlw	38
  1667  00483C                     clear_1:
  1668  00483C  6AEE               	clrf	postinc0,c
  1669  00483E  06E8               	decf	wreg,f,c
  1670  004840  E1FD               	bnz	clear_1
  1671                           
  1672                           ; Clear objects allocated to COMRAM (37 bytes)
  1673  004842  EE00  F059         	lfsr	0,__pbssCOMRAM
  1674  004846  0E25               	movlw	37
  1675  004848                     clear_2:
  1676  004848  6AEE               	clrf	postinc0,c
  1677  00484A  06E8               	decf	wreg,f,c
  1678  00484C  E1FD               	bnz	clear_2
  1679  00484E                     end_of_initialization:
  1680                           	opt stack 0
  1681  00484E                     __end_of__initialization:
  1682                           	opt stack 0
  1683  00484E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1684  004850  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1685  004852  0100               	movlb	0
  1686  004854  EF9A  F01E         	goto	_main	;jump to C main() function
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	bssCOMRAM
  1697  000059                     __pbssCOMRAM:
  1698                           	opt stack 0
  1699  000059                     _back:
  1700                           	opt stack 0
  1701  000059                     	ds	2
  1702  00005B                     _count_pop_no_tab:
  1703                           	opt stack 0
  1704  00005B                     	ds	2
  1705  00005D                     _count_pop_w_tab:
  1706                           	opt stack 0
  1707  00005D                     	ds	2
  1708  00005F                     _debug:
  1709                           	opt stack 0
  1710  00005F                     	ds	2
  1711  000061                     _down:
  1712                           	opt stack 0
  1713  000061                     	ds	2
  1714  000063                     _enter:
  1715                           	opt stack 0
  1716  000063                     	ds	2
  1717  000065                     _f_ID_receive:
  1718                           	opt stack 0
  1719  000065                     	ds	2
  1720  000067                     _f_can_coming_to_ID:
  1721                           	opt stack 0
  1722  000067                     	ds	2
  1723  000069                     _f_can_coming_to_distribution:
  1724                           	opt stack 0
  1725  000069                     	ds	2
  1726  00006B                     _f_most_recent_sort_time:
  1727                           	opt stack 0
  1728  00006B                     	ds	2
  1729  00006D                     _first:
  1730                           	opt stack 0
  1731  00006D                     	ds	2
  1732  00006F                     _firstboot:
  1733                           	opt stack 0
  1734  00006F                     	ds	2
  1735  000071                     _log_count_can_no_lab:
  1736                           	opt stack 0
  1737  000071                     	ds	2
  1738  000073                     _log_count_can_w_lab:
  1739                           	opt stack 0
  1740  000073                     	ds	2
  1741  000075                     _log_count_total:
  1742                           	opt stack 0
  1743  000075                     	ds	2
  1744  000077                     _up:
  1745                           	opt stack 0
  1746  000077                     	ds	2
  1747  000079                     _was_low_1:
  1748                           	opt stack 0
  1749  000079                     	ds	2
  1750  00007B                     _was_low_3:
  1751                           	opt stack 0
  1752  00007B                     	ds	2
  1753  00007D                     _input:
  1754                           	opt stack 0
  1755  00007D                     	ds	1
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           
  1765                           	psect	bssBANK0
  1766  0000DA                     __pbssBANK0:
  1767                           	opt stack 0
  1768  0000DA                     _sensor_outputs:
  1769                           	opt stack 0
  1770  0000DA                     	ds	4
  1771  0000DE                     _IR_signal:
  1772                           	opt stack 0
  1773  0000DE                     	ds	2
  1774  0000E0                     _MAG_signal:
  1775                           	opt stack 0
  1776  0000E0                     	ds	2
  1777  0000E2                     _RTCflag:
  1778                           	opt stack 0
  1779  0000E2                     	ds	2
  1780  0000E4                     _cur_can:
  1781                           	opt stack 0
  1782  0000E4                     	ds	2
  1783  0000E6                     _cur_state:
  1784                           	opt stack 0
  1785  0000E6                     	ds	2
  1786  0000E8                     _f_lastCan:
  1787                           	opt stack 0
  1788  0000E8                     	ds	2
  1789  0000EA                     _f_loadingNewCan:
  1790                           	opt stack 0
  1791  0000EA                     	ds	2
  1792  0000EC                     _log:
  1793                           	opt stack 0
  1794  0000EC                     	ds	2
  1795  0000EE                     _log_completion:
  1796                           	opt stack 0
  1797  0000EE                     	ds	2
  1798  0000F0                     _log_count_pop_no_tab:
  1799                           	opt stack 0
  1800  0000F0                     	ds	2
  1801  0000F2                     _log_count_pop_w_tab:
  1802                           	opt stack 0
  1803  0000F2                     	ds	2
  1804  0000F4                     _log_total_time:
  1805                           	opt stack 0
  1806  0000F4                     	ds	2
  1807  0000F6                     _logstate:
  1808                           	opt stack 0
  1809  0000F6                     	ds	2
  1810  0000F8                     _total_time:
  1811                           	opt stack 0
  1812  0000F8                     	ds	2
  1813  0000FA                     _var:
  1814                           	opt stack 0
  1815  0000FA                     	ds	2
  1816  0000FC                     _machine_state:
  1817                           	opt stack 0
  1818  0000FC                     	ds	1
  1819  0000FD                     _sel:
  1820                           	opt stack 0
  1821  0000FD                     	ds	1
  1822  0000FE                     _count_total:
  1823                           	opt stack 0
  1824  0000FE                     	ds	2
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834                           	psect	bssBANK1
  1835  000100                     __pbssBANK1:
  1836                           	opt stack 0
  1837  000100                     _log_startTime:
  1838                           	opt stack 0
  1839  000100                     	ds	14
  1840  00010E                     _startTime:
  1841                           	opt stack 0
  1842  00010E                     	ds	14
  1843  00011C                     _servoTimes:
  1844                           	opt stack 0
  1845  00011C                     	ds	8
  1846  000124                     _time:
  1847                           	opt stack 0
  1848  000124                     	ds	7
  1849  00012B                     _count_can_no_lab:
  1850                           	opt stack 0
  1851  00012B                     	ds	2
  1852  00012D                     _count_can_w_lab:
  1853                           	opt stack 0
  1854  00012D                     	ds	2
  1855  00012F                     _f_can_distributed:
  1856                           	opt stack 0
  1857  00012F                     	ds	2
  1858  000131                     _i:
  1859                           	opt stack 0
  1860  000131                     	ds	2
  1861  000133                     _most_recent_sort_time:
  1862                           	opt stack 0
  1863  000133                     	ds	2
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           
  1873                           	psect	dataBANK1
  1874  000135                     __pdataBANK1:
  1875                           	opt stack 0
  1876  000135                     UI@F3228:
  1877                           	opt stack 0
  1878  000135                     	ds	4
  1879  000139                     printRTC@F3219:
  1880                           	opt stack 0
  1881  000139                     	ds	4
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	cstackBANK0
  1892  000080                     __pcstackBANK0:
  1893                           	opt stack 0
  1894  000080                     ??_delay_ms:
  1895  000080                     ??_PortTests:
  1896  000080                     ??_isdigit:
  1897  000080                     ??_readADC:
  1898  000080                     ??_I2C_Master_Wait:
  1899  000080                     ?___wmul:
  1900                           	opt stack 0
  1901  000080                     ?___awmod:
  1902                           	opt stack 0
  1903  000080                     ?___lwdiv:
  1904                           	opt stack 0
  1905  000080                     ?___lldiv:
  1906                           	opt stack 0
  1907  000080                     lcdNibble@temp:
  1908                           	opt stack 0
  1909  000080                     initTime@m:
  1910                           	opt stack 0
  1911  000080                     updateServoPosition@time_us:
  1912                           	opt stack 0
  1913  000080                     EEPROM_read@address:
  1914                           	opt stack 0
  1915  000080                     ___wmul@multiplier:
  1916                           	opt stack 0
  1917  000080                     ___awmod@dividend:
  1918                           	opt stack 0
  1919  000080                     ___lwdiv@dividend:
  1920                           	opt stack 0
  1921  000080                     strcpy@to:
  1922                           	opt stack 0
  1923  000080                     ___lldiv@dividend:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x0
  1927  000080                     	ds	1
  1928  000081                     readADC@channel:
  1929                           	opt stack 0
  1930  000081                     I2C_Master_Read@a:
  1931                           	opt stack 0
  1932  000081                     lcdNibble@data:
  1933                           	opt stack 0
  1934  000081                     initTime@h:
  1935                           	opt stack 0
  1936  000081                     delay_ms@milliseconds:
  1937                           	opt stack 0
  1938  000081                     _isdigit$1976:
  1939                           	opt stack 0
  1940  000081                     I2C_Master_Write@d:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1
  1944  000081                     	ds	1
  1945  000082                     ??_ID:
  1946  000082                     ??_readIR:
  1947  000082                     ??_readMAG:
  1948  000082                     I2C_Master_Read@temp:
  1949                           	opt stack 0
  1950  000082                     lcdInst@data:
  1951                           	opt stack 0
  1952  000082                     putch@data:
  1953                           	opt stack 0
  1954  000082                     initTime@w:
  1955                           	opt stack 0
  1956  000082                     isdigit@c:
  1957                           	opt stack 0
  1958  000082                     updateServoPosition@timer:
  1959                           	opt stack 0
  1960  000082                     ___wmul@multiplicand:
  1961                           	opt stack 0
  1962  000082                     ___awmod@divisor:
  1963                           	opt stack 0
  1964  000082                     ___lwdiv@divisor:
  1965                           	opt stack 0
  1966  000082                     strcpy@from:
  1967                           	opt stack 0
  1968                           
  1969                           ; 2 bytes @ 0x2
  1970  000082                     	ds	1
  1971  000083                     ??_initLCD:
  1972  000083                     initTime@DD:
  1973                           	opt stack 0
  1974  000083                     getRTC@i:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x3
  1978  000083                     	ds	1
  1979  000084                     ??_updateServoPosition:
  1980  000084                     initTime@MM:
  1981                           	opt stack 0
  1982  000084                     ___awmod@counter:
  1983                           	opt stack 0
  1984  000084                     readIR@res:
  1985                           	opt stack 0
  1986  000084                     readMAG@res:
  1987                           	opt stack 0
  1988  000084                     ID@i:
  1989                           	opt stack 0
  1990  000084                     ___wmul@product:
  1991                           	opt stack 0
  1992  000084                     ___lwdiv@quotient:
  1993                           	opt stack 0
  1994  000084                     strcpy@cp:
  1995                           	opt stack 0
  1996  000084                     ___lldiv@divisor:
  1997                           	opt stack 0
  1998                           
  1999                           ; 4 bytes @ 0x4
  2000  000084                     	ds	1
  2001  000085                     ??_initSortTimer:
  2002  000085                     initTime@YY:
  2003                           	opt stack 0
  2004  000085                     ___awmod@sign:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x5
  2008  000085                     	ds	1
  2009  000086                     ??_getIR:
  2010  000086                     ??_getMAG:
  2011  000086                     ?___awdiv:
  2012                           	opt stack 0
  2013  000086                     initTime@s:
  2014                           	opt stack 0
  2015  000086                     ___lwdiv@counter:
  2016                           	opt stack 0
  2017  000086                     ID@i_1119:
  2018                           	opt stack 0
  2019  000086                     updateServoPosition@my_time:
  2020                           	opt stack 0
  2021  000086                     ___awdiv@dividend:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  000086                     	ds	1
  2026  000087                     ?___lwmod:
  2027                           	opt stack 0
  2028  000087                     getIR@i:
  2029                           	opt stack 0
  2030  000087                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x7
  2034  000087                     	ds	1
  2035  000088                     ??_Distribution:
  2036  000088                     ??_initServos:
  2037  000088                     initSortTimer@i:
  2038                           	opt stack 0
  2039  000088                     ___awdiv@divisor:
  2040                           	opt stack 0
  2041  000088                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000088                     	ds	1
  2046  000089                     ___lwmod@divisor:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x9
  2050  000089                     	ds	1
  2051  00008A                     ___awdiv@counter:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00008A                     	ds	1
  2056  00008B                     ___awdiv@sign:
  2057                           	opt stack 0
  2058  00008B                     ___lwmod@counter:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0xB
  2062  00008B                     	ds	1
  2063  00008C                     ___lldiv@counter:
  2064                           	opt stack 0
  2065  00008C                     ___awdiv@quotient:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0xC
  2069  00008C                     	ds	1
  2070  00008D                     I2C_Master_Init@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0xD
  2074  00008D                     	ds	1
  2075  00008E                     ?_printf:
  2076                           	opt stack 0
  2077  00008E                     printf@f:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0xE
  2081  00008E                     	ds	3
  2082  000091                     ??_I2C_Master_Init:
  2083                           
  2084                           ; 1 bytes @ 0x11
  2085  000091                     	ds	4
  2086  000095                     ??_loadRTC:
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000095                     	ds	1
  2090  000096                     loadRTC@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x16
  2094  000096                     	ds	4
  2095  00009A                     ??_printf:
  2096                           
  2097                           ; 1 bytes @ 0x1A
  2098  00009A                     	ds	4
  2099  00009E                     printf@prec:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x1E
  2103  00009E                     	ds	1
  2104  00009F                     printf@cp:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1F
  2108  00009F                     	ds	2
  2109  0000A1                     printf@ap:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x21
  2113  0000A1                     	ds	2
  2114  0000A3                     printf@len:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x23
  2118  0000A3                     	ds	2
  2119  0000A5                     printf@val:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x25
  2123  0000A5                     	ds	2
  2124  0000A7                     printf@flag:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x27
  2128  0000A7                     	ds	1
  2129  0000A8                     printf@c:
  2130                           	opt stack 0
  2131                           
  2132                           ; 1 bytes @ 0x28
  2133  0000A8                     	ds	1
  2134  0000A9                     printf@width:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x29
  2138  0000A9                     	ds	2
  2139  0000AB                     ??_printRTC:
  2140  0000AB                     ??_algorithmTest:
  2141  0000AB                     ??_sensorTest:
  2142  0000AB                     ??_actuatorTest:
  2143  0000AB                     ??_PortTestA5:
  2144  0000AB                     ??_SpeedTest:
  2145  0000AB                     ??_PusherTest:
  2146  0000AB                     ??_BothServos:
  2147  0000AB                     ??_BlockerTest:
  2148  0000AB                     EEPROM_write@address:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x2B
  2152  0000AB                     	ds	1
  2153  0000AC                     BlockerTest@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2C
  2157  0000AC                     	ds	1
  2158  0000AD                     EEPROM_write@data:
  2159                           	opt stack 0
  2160  0000AD                     actuatorTest@i_1652:
  2161                           	opt stack 0
  2162  0000AD                     sensorTest@res:
  2163                           	opt stack 0
  2164  0000AD                     PusherTest@res:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x2D
  2168  0000AD                     	ds	1
  2169  0000AE                     ??_EEPROM_write:
  2170  0000AE                     actuatorTest@i_1659:
  2171                           	opt stack 0
  2172  0000AE                     BlockerTest@cam_flag:
  2173                           	opt stack 0
  2174  0000AE                     printRTC@INT_time:
  2175                           	opt stack 0
  2176                           
  2177                           ; 14 bytes @ 0x2E
  2178  0000AE                     	ds	1
  2179  0000AF                     EEPROM_write@i:
  2180                           	opt stack 0
  2181  0000AF                     actuatorTest@i_1660:
  2182                           	opt stack 0
  2183  0000AF                     PusherTest@res_1707:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x2F
  2187  0000AF                     	ds	1
  2188  0000B0                     EEPROM_write@i_1338:
  2189                           	opt stack 0
  2190  0000B0                     actuatorTest@i_1662:
  2191                           	opt stack 0
  2192  0000B0                     BlockerTest@cond_flag:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x30
  2196  0000B0                     	ds	1
  2197  0000B1                     ??_Loading:
  2198  0000B1                     logRun@num:
  2199                           	opt stack 0
  2200  0000B1                     actuatorTest@i_1663:
  2201                           	opt stack 0
  2202  0000B1                     PusherTest@i:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x31
  2206  0000B1                     	ds	1
  2207  0000B2                     logRun@byte1:
  2208                           	opt stack 0
  2209  0000B2                     actuatorTest@i_1665:
  2210                           	opt stack 0
  2211                           
  2212                           ; 1 bytes @ 0x32
  2213  0000B2                     	ds	1
  2214  0000B3                     logRun@byte2:
  2215                           	opt stack 0
  2216  0000B3                     actuatorTest@i_1666:
  2217                           	opt stack 0
  2218  0000B3                     Loading@addr:
  2219                           	opt stack 0
  2220  0000B3                     PusherTest@i_1711:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x33
  2224  0000B3                     	ds	1
  2225  0000B4                     logRun@byte3:
  2226                           	opt stack 0
  2227  0000B4                     actuatorTest@i_1668:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x34
  2231  0000B4                     	ds	1
  2232  0000B5                     logRun@byte_i:
  2233                           	opt stack 0
  2234  0000B5                     actuatorTest@i_1669:
  2235                           	opt stack 0
  2236  0000B5                     Loading@i_1108:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x35
  2240  0000B5                     	ds	1
  2241  0000B6                     logRun@byte11:
  2242                           	opt stack 0
  2243  0000B6                     actuatorTest@i_1671:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x36
  2247  0000B6                     	ds	1
  2248  0000B7                     Loading@byte1:
  2249                           	opt stack 0
  2250  0000B7                     actuatorTest@i_1672:
  2251                           	opt stack 0
  2252  0000B7                     logRun@i:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x37
  2256  0000B7                     	ds	1
  2257  0000B8                     actuatorTest@i_1674:
  2258                           	opt stack 0
  2259  0000B8                     Loading@i_1103:
  2260                           	opt stack 0
  2261                           
  2262                           ; 2 bytes @ 0x38
  2263  0000B8                     	ds	1
  2264  0000B9                     actuatorTest@i_1675:
  2265                           	opt stack 0
  2266  0000B9                     logRun@addr:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x39
  2270  0000B9                     	ds	1
  2271  0000BA                     actuatorTest@i_1678:
  2272                           	opt stack 0
  2273  0000BA                     Loading@i_1104:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x3A
  2277  0000BA                     	ds	1
  2278  0000BB                     actuatorTest@i_1679:
  2279                           	opt stack 0
  2280                           
  2281                           ; 1 bytes @ 0x3B
  2282  0000BB                     	ds	1
  2283  0000BC                     actuatorTest@i_1681:
  2284                           	opt stack 0
  2285  0000BC                     printRTC@RTC_month:
  2286                           	opt stack 0
  2287  0000BC                     Loading@i_1106:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x3C
  2291  0000BC                     	ds	1
  2292  0000BD                     actuatorTest@i_1682:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  0000BD                     	ds	1
  2297  0000BE                     actuatorTest@i_1684:
  2298                           	opt stack 0
  2299  0000BE                     Loading@i_1107:
  2300                           	opt stack 0
  2301  0000BE                     printRTC@month:
  2302                           	opt stack 0
  2303                           
  2304                           ; 4 bytes @ 0x3E
  2305  0000BE                     	ds	1
  2306  0000BF                     actuatorTest@i_1685:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x3F
  2310  0000BF                     	ds	1
  2311  0000C0                     actuatorTest@i_1688:
  2312                           	opt stack 0
  2313  0000C0                     Loading@i:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x40
  2317  0000C0                     	ds	1
  2318  0000C1                     actuatorTest@i_1689:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x41
  2322  0000C1                     	ds	1
  2323  0000C2                     actuatorTest@i_1691:
  2324                           	opt stack 0
  2325  0000C2                     printRTC@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x42
  2329  0000C2                     	ds	1
  2330  0000C3                     actuatorTest@i_1692:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x43
  2334  0000C3                     	ds	1
  2335  0000C4                     ??_UI:
  2336  0000C4                     actuatorTest@i:
  2337                           	opt stack 0
  2338                           
  2339                           ; 2 bytes @ 0x44
  2340  0000C4                     	ds	2
  2341  0000C6                     ??_Test:
  2342  0000C6                     _UI$2332:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x46
  2346  0000C6                     	ds	2
  2347  0000C8                     UI@i:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0x48
  2351  0000C8                     	ds	1
  2352  0000C9                     UI@i_409:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x49
  2356  0000C9                     	ds	1
  2357  0000CA                     UI@i_412:
  2358                           	opt stack 0
  2359                           
  2360                           ; 1 bytes @ 0x4A
  2361  0000CA                     	ds	1
  2362  0000CB                     UI@i_413:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x4B
  2366  0000CB                     	ds	1
  2367  0000CC                     UI@i_431:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x4C
  2371  0000CC                     	ds	1
  2372  0000CD                     UI@i_432:
  2373                           	opt stack 0
  2374                           
  2375                           ; 1 bytes @ 0x4D
  2376  0000CD                     	ds	1
  2377  0000CE                     UI@i_435:
  2378                           	opt stack 0
  2379                           
  2380                           ; 1 bytes @ 0x4E
  2381  0000CE                     	ds	1
  2382  0000CF                     UI@i_436:
  2383                           	opt stack 0
  2384                           
  2385                           ; 1 bytes @ 0x4F
  2386  0000CF                     	ds	1
  2387  0000D0                     UI@i_439:
  2388                           	opt stack 0
  2389                           
  2390                           ; 1 bytes @ 0x50
  2391  0000D0                     	ds	1
  2392  0000D1                     UI@i_440:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x51
  2396  0000D1                     	ds	1
  2397  0000D2                     UI@i_443:
  2398                           	opt stack 0
  2399                           
  2400                           ; 1 bytes @ 0x52
  2401  0000D2                     	ds	1
  2402  0000D3                     UI@i_444:
  2403                           	opt stack 0
  2404                           
  2405                           ; 1 bytes @ 0x53
  2406  0000D3                     	ds	1
  2407  0000D4                     UI@i_447:
  2408                           	opt stack 0
  2409                           
  2410                           ; 1 bytes @ 0x54
  2411  0000D4                     	ds	1
  2412  0000D5                     UI@i_448:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x55
  2416  0000D5                     	ds	1
  2417  0000D6                     UI@month:
  2418                           	opt stack 0
  2419                           
  2420                           ; 4 bytes @ 0x56
  2421  0000D6                     	ds	4
  2422  0000DA                     tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           postinc0	equ	0xFEE
  2427                           wreg	equ	0xFE8
  2428                           postdec1	equ	0xFE5
  2429                           fsr1l	equ	0xFE1
  2430                           
  2431                           ; 1 bytes @ 0x5A
  2432                           
  2433                           	psect	cstackCOMRAM
  2434  000001                     __pcstackCOMRAM:
  2435                           	opt stack 0
  2436  000001                     ??i2_I2C_Master_Wait:
  2437  000001                     ??i2_isdigit:
  2438  000001                     ?i2___wmul:
  2439                           	opt stack 0
  2440  000001                     ?i2___lwmod:
  2441                           	opt stack 0
  2442  000001                     i2lcdNibble@temp:
  2443                           	opt stack 0
  2444  000001                     i2EEPROM_read@address:
  2445                           	opt stack 0
  2446  000001                     i2___wmul@multiplier:
  2447                           	opt stack 0
  2448  000001                     i2___lwmod@dividend:
  2449                           	opt stack 0
  2450  000001                     i2strcpy@to:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x0
  2454  000001                     	ds	1
  2455  000002                     i2I2C_Master_Read@a:
  2456                           	opt stack 0
  2457  000002                     i2lcdNibble@data:
  2458                           	opt stack 0
  2459  000002                     i2_isdigit$1976:
  2460                           	opt stack 0
  2461  000002                     i2I2C_Master_Write@d:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x1
  2465  000002                     	ds	1
  2466  000003                     i2I2C_Master_Read@temp:
  2467                           	opt stack 0
  2468  000003                     i2lcdInst@data:
  2469                           	opt stack 0
  2470  000003                     i2putch@data:
  2471                           	opt stack 0
  2472  000003                     i2isdigit@c:
  2473                           	opt stack 0
  2474  000003                     i2___wmul@multiplicand:
  2475                           	opt stack 0
  2476  000003                     i2___lwmod@divisor:
  2477                           	opt stack 0
  2478  000003                     i2strcpy@from:
  2479                           	opt stack 0
  2480                           
  2481                           ; 2 bytes @ 0x2
  2482  000003                     	ds	1
  2483  000004                     i2getRTC@i:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x3
  2487  000004                     	ds	1
  2488  000005                     i2___lwmod@counter:
  2489                           	opt stack 0
  2490  000005                     i2___wmul@product:
  2491                           	opt stack 0
  2492  000005                     i2strcpy@cp:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x4
  2496  000005                     	ds	1
  2497  000006                     ?i2___lwdiv:
  2498                           	opt stack 0
  2499  000006                     i2___lwdiv@dividend:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x5
  2503  000006                     	ds	1
  2504  000007                     retrieveLog@logNum:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x6
  2508  000007                     	ds	1
  2509  000008                     i2___lwdiv@divisor:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x7
  2513  000008                     	ds	1
  2514  000009                     ??_retrieveLog:
  2515                           
  2516                           ; 1 bytes @ 0x8
  2517  000009                     	ds	1
  2518  00000A                     i2___lwdiv@quotient:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x9
  2522  00000A                     	ds	1
  2523  00000B                     retrieveLog@byte1:
  2524                           	opt stack 0
  2525                           
  2526                           ; 1 bytes @ 0xA
  2527  00000B                     	ds	1
  2528  00000C                     retrieveLog@byte2:
  2529                           	opt stack 0
  2530  00000C                     i2___lwdiv@counter:
  2531                           	opt stack 0
  2532                           
  2533                           ; 1 bytes @ 0xB
  2534  00000C                     	ds	1
  2535  00000D                     ?i2_printf:
  2536                           	opt stack 0
  2537  00000D                     retrieveLog@byte3:
  2538                           	opt stack 0
  2539  00000D                     i2printf@f:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0xC
  2543  00000D                     	ds	1
  2544  00000E                     retrieveLog@i:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0xD
  2548  00000E                     	ds	2
  2549  000010                     retrieveLog@addr:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0xF
  2553  000010                     	ds	2
  2554  000012                     dispLogs@myLog:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x11
  2558  000012                     	ds	2
  2559  000014                     
  2560                           ; 1 bytes @ 0x13
  2561  000014                     	ds	5
  2562  000019                     ??i2_printf:
  2563                           
  2564                           ; 1 bytes @ 0x18
  2565  000019                     	ds	4
  2566  00001D                     i2printf@prec:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x1C
  2570  00001D                     	ds	1
  2571  00001E                     i2printf@cp:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0x1D
  2575  00001E                     	ds	2
  2576  000020                     i2printf@ap:
  2577                           	opt stack 0
  2578                           
  2579                           ; 2 bytes @ 0x1F
  2580  000020                     	ds	2
  2581  000022                     i2printf@len:
  2582                           	opt stack 0
  2583                           
  2584                           ; 2 bytes @ 0x21
  2585  000022                     	ds	2
  2586  000024                     i2printf@val:
  2587                           	opt stack 0
  2588                           
  2589                           ; 2 bytes @ 0x23
  2590  000024                     	ds	2
  2591  000026                     i2printf@flag:
  2592                           	opt stack 0
  2593                           
  2594                           ; 1 bytes @ 0x25
  2595  000026                     	ds	1
  2596  000027                     i2printf@c:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x26
  2600  000027                     	ds	1
  2601  000028                     i2printf@width:
  2602                           	opt stack 0
  2603                           
  2604                           ; 2 bytes @ 0x27
  2605  000028                     	ds	2
  2606  00002A                     ??_printSortTimer:
  2607  00002A                     ??i2_printRTC:
  2608  00002A                     ?_inputHandler:
  2609                           	opt stack 0
  2610                           
  2611                           ; 2 bytes @ 0x29
  2612  00002A                     	ds	2
  2613  00002C                     ??_inputHandler:
  2614                           
  2615                           ; 1 bytes @ 0x2B
  2616  00002C                     	ds	1
  2617  00002D                     printSortTimer@curTime:
  2618                           	opt stack 0
  2619  00002D                     i2printRTC@INT_time:
  2620                           	opt stack 0
  2621                           
  2622                           ; 14 bytes @ 0x2C
  2623  00002D                     	ds	14
  2624  00003B                     printSortTimer@start_sec:
  2625                           	opt stack 0
  2626  00003B                     i2printRTC@RTC_month:
  2627                           	opt stack 0
  2628                           
  2629                           ; 2 bytes @ 0x3A
  2630  00003B                     	ds	2
  2631  00003D                     printSortTimer@cur_sec:
  2632                           	opt stack 0
  2633  00003D                     i2printRTC@month:
  2634                           	opt stack 0
  2635                           
  2636                           ; 4 bytes @ 0x3C
  2637  00003D                     	ds	2
  2638  00003F                     printSortTimer@min:
  2639                           	opt stack 0
  2640                           
  2641                           ; 2 bytes @ 0x3E
  2642  00003F                     	ds	2
  2643  000041                     printSortTimer@sec:
  2644                           	opt stack 0
  2645  000041                     i2printRTC@i:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x40
  2649  000041                     	ds	2
  2650  000043                     ??_updateMenu:
  2651  000043                     _printSortTimer$2452:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x42
  2655  000043                     	ds	2
  2656  000045                     printSortTimer@timeDiff:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x44
  2660  000045                     	ds	2
  2661  000047                     printSortTimer@i:
  2662                           	opt stack 0
  2663                           
  2664                           ; 2 bytes @ 0x46
  2665  000047                     	ds	2
  2666  000049                     ??_handler:
  2667                           
  2668                           ; 1 bytes @ 0x48
  2669  000049                     	ds	16
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           
  2679 ;;
  2680 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2681 ;;
  2682 ;; *************** function _main *****************
  2683 ;; Defined at:
  2684 ;;		line 19 in file "main.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;Total ram usage:        0 bytes
  2703 ;; Hardware stack levels required when called:   13
  2704 ;; This function calls:
  2705 ;;		_I2C_Master_Init
  2706 ;;		_Test
  2707 ;;		_UI
  2708 ;;		_initLCD
  2709 ;;		_initTime
  2710 ;;		_initUI
  2711 ;;		_logRun
  2712 ;;		_machineConfig
  2713 ;;		_sort
  2714 ;;		_stopSignals
  2715 ;; This function is called by:
  2716 ;;		Startup code after reset
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text0
  2721  003D34                     __ptext0:
  2722                           	opt stack 0
  2723  003D34                     _main:
  2724                           	opt stack 18
  2725                           
  2726                           ;main.c: 20: machineConfig();
  2727                           
  2728                           ;incstack = 0
  2729  003D34  EC28  F023         	call	_machineConfig	;wreg free
  2730                           
  2731                           ;main.c: 21: initLCD();
  2732  003D38  EC78  F024         	call	_initLCD	;wreg free
  2733                           
  2734                           ;main.c: 24: RTCflag = 0;
  2735  003D3C  0E00               	movlw	0
  2736  003D3E  0100               	movlb	0	; () banked
  2737  003D40  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2738  003D42  0E00               	movlw	0
  2739  003D44  6FE2               	movwf	_RTCflag& (0+255),b
  2740                           
  2741                           ;main.c: 25: if(RTCflag){
  2742  003D46  0100               	movlb	0	; () banked
  2743  003D48  51E2               	movf	_RTCflag& (0+255),w,b
  2744  003D4A  0100               	movlb	0	; () banked
  2745  003D4C  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2746  003D4E  B4D8               	btfsc	status,2,c
  2747  003D50  D016               	goto	l8771
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2751  003D52  0E20               	movlw	32
  2752  003D54  0100               	movlb	0	; () banked
  2753  003D56  6F80               	movwf	initTime@m& (0+255),b
  2754  003D58  0E15               	movlw	21
  2755  003D5A  0100               	movlb	0	; () banked
  2756  003D5C  6F81               	movwf	initTime@h& (0+255),b
  2757  003D5E  0E04               	movlw	4
  2758  003D60  0100               	movlb	0	; () banked
  2759  003D62  6F82               	movwf	initTime@w& (0+255),b
  2760  003D64  0E15               	movlw	21
  2761  003D66  0100               	movlb	0	; () banked
  2762  003D68  6F83               	movwf	initTime@DD& (0+255),b
  2763  003D6A  0E03               	movlw	3
  2764  003D6C  0100               	movlb	0	; () banked
  2765  003D6E  6F84               	movwf	initTime@MM& (0+255),b
  2766  003D70  0E17               	movlw	23
  2767  003D72  0100               	movlb	0	; () banked
  2768  003D74  6F85               	movwf	initTime@YY& (0+255),b
  2769  003D76  0E42               	movlw	66
  2770  003D78  EC2B  F027         	call	_initTime
  2771                           
  2772                           ;main.c: 27: }
  2773  003D7C  D00B               	goto	l8773
  2774  003D7E                     l8771:
  2775                           
  2776                           ;main.c: 28: else{
  2777                           ;main.c: 29: I2C_Master_Init(10000);
  2778  003D7E  0E10               	movlw	16
  2779  003D80  0100               	movlb	0	; () banked
  2780  003D82  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2781  003D84  0E27               	movlw	39
  2782  003D86  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2783  003D88  0E00               	movlw	0
  2784  003D8A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2785  003D8C  0E00               	movlw	0
  2786  003D8E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2787  003D90  ECF8  F022         	call	_I2C_Master_Init	;wreg free
  2788  003D94                     l8773:
  2789                           
  2790                           ;main.c: 30: }
  2791                           ;main.c: 32: initUI();
  2792  003D94  EC34  F026         	call	_initUI	;wreg free
  2793                           
  2794                           ;main.c: 33: first = 1;
  2795  003D98  0E00               	movlw	0
  2796  003D9A  6E6E               	movwf	_first+1,c
  2797  003D9C  0E01               	movlw	1
  2798  003D9E  6E6D               	movwf	_first,c
  2799                           
  2800                           ;main.c: 44: switch(machine_state){
  2801                           
  2802                           ;main.c: 43: while(1){
  2803  003DA0  D017               	goto	l8795
  2804  003DA2                     l8777:
  2805                           
  2806                           ;main.c: 46: UI();
  2807  003DA2  EC65  F004         	call	_UI	;wreg free
  2808                           
  2809                           ;main.c: 47: break;
  2810  003DA6  D014               	goto	l8795
  2811  003DA8                     l8779:
  2812                           
  2813                           ;main.c: 49: sort();
  2814  003DA8  EC1A  F027         	call	_sort	;wreg free
  2815                           
  2816                           ;main.c: 50: break;
  2817  003DAC  D011               	goto	l8795
  2818  003DAE                     l8781:
  2819                           
  2820                           ;main.c: 52: stopSignals();
  2821  003DAE  EC4B  F027         	call	_stopSignals	;wreg free
  2822                           
  2823                           ;main.c: 53: logRun();
  2824  003DB2  EC03  F01C         	call	_logRun	;wreg free
  2825                           
  2826                           ;main.c: 54: first = 1;
  2827  003DB6  0E00               	movlw	0
  2828  003DB8  6E6E               	movwf	_first+1,c
  2829  003DBA  0E01               	movlw	1
  2830  003DBC  6E6D               	movwf	_first,c
  2831                           
  2832                           ;main.c: 55: UI();
  2833  003DBE  EC65  F004         	call	_UI	;wreg free
  2834                           
  2835                           ;main.c: 56: break;
  2836  003DC2  D006               	goto	l8795
  2837  003DC4                     l8789:
  2838                           
  2839                           ;main.c: 58: Test();
  2840  003DC4  EC33  F01D         	call	_Test	;wreg free
  2841                           
  2842                           ;main.c: 59: break;
  2843  003DC8  D003               	goto	l8795
  2844  003DCA                     l8791:
  2845                           
  2846                           ;main.c: 61: stopSignals();
  2847  003DCA  EC4B  F027         	call	_stopSignals	;wreg free
  2848  003DCE                     l491:
  2849  003DCE  D7FF               	goto	l491
  2850  003DD0                     l8795:
  2851  003DD0  0100               	movlb	0	; () banked
  2852  003DD2  51FC               	movf	_machine_state& (0+255),w,b
  2853                           
  2854                           ; Switch size 1, requested type "space"
  2855                           ; Number of cases is 5, Range of values is 0 to 4
  2856                           ; switch strategies available:
  2857                           ; Name         Instructions Cycles
  2858                           ; simple_byte           16     9 (average)
  2859                           ;	Chosen strategy is simple_byte
  2860  003DD4  0A00               	xorlw	0	; case 0
  2861  003DD6  B4D8               	btfsc	status,2,c
  2862  003DD8  D7E4               	goto	l8777
  2863  003DDA  0A01               	xorlw	1	; case 1
  2864  003DDC  B4D8               	btfsc	status,2,c
  2865  003DDE  D7E4               	goto	l8779
  2866  003DE0  0A03               	xorlw	3	; case 2
  2867  003DE2  B4D8               	btfsc	status,2,c
  2868  003DE4  D7E4               	goto	l8781
  2869  003DE6  0A01               	xorlw	1	; case 3
  2870  003DE8  B4D8               	btfsc	status,2,c
  2871  003DEA  D7EC               	goto	l8789
  2872  003DEC  0A07               	xorlw	7	; case 4
  2873  003DEE  B4D8               	btfsc	status,2,c
  2874  003DF0  D7EC               	goto	l8791
  2875                           
  2876                           ; BSR set to: 0
  2877                           
  2878                           ; BSR set to: 0
  2879  003DF2  D7EE               	goto	l8795
  2880  003DF4                     __end_of_main:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _stopSignals *****************
  2893 ;; Defined at:
  2894 ;;		line 70 in file "main.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    7
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text1
  2923  004E96                     __ptext1:
  2924                           	opt stack 0
  2925  004E96                     _stopSignals:
  2926                           	opt stack 23
  2927                           
  2928                           ;main.c: 71: LATA = 0x00;
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;incstack = 0
  2932  004E96  0E00               	movlw	0
  2933  004E98  6E89               	movwf	3977,c	;volatile
  2934                           
  2935                           ;main.c: 72: LATB = 0x00;
  2936  004E9A  0E00               	movlw	0
  2937  004E9C  6E8A               	movwf	3978,c	;volatile
  2938                           
  2939                           ;main.c: 73: LATC = 0x00;
  2940  004E9E  0E00               	movlw	0
  2941  004EA0  6E8B               	movwf	3979,c	;volatile
  2942                           
  2943                           ;main.c: 74: LATD = 0x00;
  2944  004EA2  0E00               	movlw	0
  2945  004EA4  6E8C               	movwf	3980,c	;volatile
  2946                           
  2947                           ;main.c: 75: LATE = 0x00;
  2948  004EA6  0E00               	movlw	0
  2949  004EA8  6E8D               	movwf	3981,c	;volatile
  2950                           
  2951                           ;main.c: 76: TMR1ON = 0;
  2952  004EAA  90CD               	bcf	4045,0,c	;volatile
  2953                           
  2954                           ;main.c: 77: TMR3ON = 0;
  2955  004EAC  90B1               	bcf	4017,0,c	;volatile
  2956  004EAE  0012               	return		;funcret
  2957  004EB0                     __end_of_stopSignals:
  2958                           	opt stack 0
  2959                           tblptru	equ	0xFF8
  2960                           tblptrh	equ	0xFF7
  2961                           tblptrl	equ	0xFF6
  2962                           tablat	equ	0xFF5
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1l	equ	0xFE1
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _sort *****************
  2970 ;; Defined at:
  2971 ;;		line 58 in file "sort.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:   12
  2992 ;; This function calls:
  2993 ;;		_Distribution
  2994 ;;		_ID
  2995 ;;		_Loading
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text2
  3002  004E34                     __ptext2:
  3003                           	opt stack 0
  3004  004E34                     _sort:
  3005                           	opt stack 18
  3006                           
  3007                           ;sort.c: 59: if(machine_state == Sorting_state){
  3008                           
  3009                           ;incstack = 0
  3010  004E34  0100               	movlb	0	; () banked
  3011  004E36  05FC               	decf	_machine_state& (0+255),w,b
  3012  004E38  B4D8               	btfsc	status,2,c
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;sort.c: 60: Loading();
  3016  004E3A  ECD4  F00A         	call	_Loading	;wreg free
  3017                           
  3018                           ;sort.c: 61: }
  3019                           ;sort.c: 62: if(machine_state == Sorting_state){
  3020  004E3E  0100               	movlb	0	; () banked
  3021  004E40  05FC               	decf	_machine_state& (0+255),w,b
  3022  004E42  B4D8               	btfsc	status,2,c
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;sort.c: 63: ID();
  3026  004E44  EC9C  F019         	call	_ID	;wreg free
  3027                           
  3028                           ;sort.c: 64: }
  3029                           ;sort.c: 65: if(machine_state == Sorting_state){
  3030  004E48  0100               	movlb	0	; () banked
  3031  004E4A  05FC               	decf	_machine_state& (0+255),w,b
  3032  004E4C  A4D8               	btfss	status,2,c
  3033  004E4E  0012               	return	
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;sort.c: 66: Distribution();
  3037  004E50  EC92  F016         	call	_Distribution	;wreg free
  3038  004E54  0012               	return	
  3039  004E56                     __end_of_sort:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _Loading *****************
  3052 ;; Defined at:
  3053 ;;		line 70 in file "sort.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  i               2   62[BANK0 ] int 
  3058 ;;  i               2   60[BANK0 ] int 
  3059 ;;  i               2   58[BANK0 ] int 
  3060 ;;  i               2   56[BANK0 ] int 
  3061 ;;  i               2   53[BANK0 ] int 
  3062 ;;  i               2   64[BANK0 ] int 
  3063 ;;  addr            2   51[BANK0 ] unsigned short 
  3064 ;;  byte1           1   55[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;Total ram usage:       17 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:   11
  3081 ;; This function calls:
  3082 ;;		_EEPROM_read
  3083 ;;		_EEPROM_write
  3084 ;;		___awmod
  3085 ;;		_delay_ms
  3086 ;;		_getIR
  3087 ;;		_getMAG
  3088 ;;		_initGlobalVars
  3089 ;;		_initServos
  3090 ;;		_initSortTimer
  3091 ;;		_lcdInst
  3092 ;;		_readIR
  3093 ;; This function is called by:
  3094 ;;		_sort
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text3
  3099  0015A8                     __ptext3:
  3100                           	opt stack 0
  3101  0015A8                     _Loading:
  3102                           	opt stack 18
  3103                           
  3104                           ;sort.c: 71: if(first){
  3105                           
  3106                           ;incstack = 0
  3107  0015A8  506D               	movf	_first,w,c
  3108  0015AA  106E               	iorwf	_first+1,w,c
  3109  0015AC  B4D8               	btfsc	status,2,c
  3110  0015AE  D066               	goto	l6863
  3111                           
  3112                           ;sort.c: 72: initGlobalVars();
  3113  0015B0  EC6A  F021         	call	_initGlobalVars	;wreg free
  3114                           
  3115                           ;sort.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3116  0015B4  0E01               	movlw	1
  3117  0015B6  EC8A  F027         	call	_lcdInst
  3118  0015BA  0E68               	movlw	104
  3119  0015BC  0100               	movlb	0	; () banked
  3120  0015BE  6FB1               	movwf	??_Loading& (0+255),b
  3121  0015C0  0EE4               	movlw	228
  3122  0015C2                     u8137:
  3123  0015C2  2EE8               	decfsz	wreg,f,c
  3124  0015C4  D7FE               	bra	u8137
  3125  0015C6  2FB1               	decfsz	??_Loading& (0+255),f,b
  3126  0015C8  D7FC               	bra	u8137
  3127  0015CA  F000               	nop	
  3128                           
  3129                           ;sort.c: 74: initSortTimer();
  3130  0015CC  ECB7  F01F         	call	_initSortTimer	;wreg free
  3131                           
  3132                           ;sort.c: 75: LATCbits.LATC5 = 1;
  3133  0015D0  8A8B               	bsf	3979,5,c	;volatile
  3134                           
  3135                           ;sort.c: 80: sel = EEPROM_read(0);
  3136  0015D2  0E00               	movlw	0
  3137  0015D4  0100               	movlb	0	; () banked
  3138  0015D6  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3139  0015D8  0E00               	movlw	0
  3140  0015DA  6F80               	movwf	EEPROM_read@address& (0+255),b
  3141  0015DC  EC58  F027         	call	_EEPROM_read	;wreg free
  3142  0015E0  0100               	movlb	0	; () banked
  3143  0015E2  6FFD               	movwf	_sel& (0+255),b
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;sort.c: 81: unsigned short addr = 1 + 11 * sel;
  3147  0015E4  0100               	movlb	0	; () banked
  3148  0015E6  51FD               	movf	_sel& (0+255),w,b
  3149  0015E8  0D0B               	mullw	11
  3150  0015EA  0E01               	movlw	1
  3151  0015EC  24F3               	addwf	prodl,w,c
  3152  0015EE  0100               	movlb	0	; () banked
  3153  0015F0  6FB3               	movwf	Loading@addr& (0+255),b
  3154  0015F2  0E00               	movlw	0
  3155  0015F4  20F4               	addwfc	prodh,w,c
  3156  0015F6  0100               	movlb	0	; () banked
  3157  0015F8  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;sort.c: 82: unsigned char byte1 = 0b01111111;
  3161  0015FA  0E7F               	movlw	127
  3162  0015FC  0100               	movlb	0	; () banked
  3163  0015FE  6FB7               	movwf	Loading@byte1& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;sort.c: 83: EEPROM_write(addr, byte1);
  3167  001600  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3168  001604  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3169  001608  C0B7  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3170  00160C  ECBD  F01D         	call	_EEPROM_write	;wreg free
  3171                           
  3172                           ;sort.c: 86: LATAbits.LATA5 = 0;
  3173  001610  9A89               	bcf	3977,5,c	;volatile
  3174                           
  3175                           ;sort.c: 88: for(int i=0; i<46; i++){
  3176  001612  0E00               	movlw	0
  3177  001614  0100               	movlb	0	; () banked
  3178  001616  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3179  001618  0E00               	movlw	0
  3180  00161A  6FC0               	movwf	Loading@i& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183  00161C  0100               	movlb	0	; () banked
  3184  00161E  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3185  001620  D008               	goto	l6853
  3186  001622  0100               	movlb	0	; () banked
  3187  001624  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3188  001626  E126               	bnz	l740
  3189  001628  0E2E               	movlw	46
  3190  00162A  0100               	movlb	0	; () banked
  3191  00162C  5DC0               	subwf	Loading@i& (0+255),w,b
  3192  00162E  B0D8               	btfsc	status,0,c
  3193  001630  D021               	goto	l740
  3194  001632                     l6853:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 89: LATAbits.LATA5 = !LATAbits.LATA5;
  3198  001632  BA89               	btfsc	3977,5,c	;volatile
  3199  001634  D004               	goto	u5440
  3200  001636  0100               	movlb	0	; () banked
  3201  001638  6BB1               	clrf	??_Loading& (0+255),b
  3202  00163A  2BB1               	incf	??_Loading& (0+255),f,b
  3203  00163C  D002               	goto	u5458
  3204  00163E                     u5440:
  3205  00163E  0100               	movlb	0	; () banked
  3206  001640  6BB1               	clrf	??_Loading& (0+255),b
  3207  001642                     u5458:
  3208  001642  0100               	movlb	0	; () banked
  3209  001644  3BB1               	swapf	??_Loading& (0+255),f,b
  3210  001646  47B1               	rlncf	??_Loading& (0+255),f,b
  3211  001648  5089               	movf	3977,w,c	;volatile
  3212  00164A  0100               	movlb	0	; () banked
  3213  00164C  19B1               	xorwf	??_Loading& (0+255),w,b
  3214  00164E  0BDF               	andlw	-33
  3215  001650  19B1               	xorwf	??_Loading& (0+255),w,b
  3216  001652  6E89               	movwf	3977,c	;volatile
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;sort.c: 90: delay_ms(45-i);
  3220  001654  0100               	movlb	0	; () banked
  3221  001656  51C0               	movf	Loading@i& (0+255),w,b
  3222  001658  0800               	sublw	0
  3223  00165A  0F2D               	addlw	45
  3224  00165C  ECBA  F026         	call	_delay_ms
  3225  001660  0100               	movlb	0	; () banked
  3226  001662  4BC0               	infsnz	Loading@i& (0+255),f,b
  3227  001664  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3228                           
  3229                           ; BSR set to: 0
  3230  001666  0100               	movlb	0	; () banked
  3231  001668  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3232  00166A  D7E3               	goto	l6853
  3233  00166C  0100               	movlb	0	; () banked
  3234  00166E  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3235  001670  E101               	bnz	u5460
  3236  001672  D7DA               	goto	L1
  3237  001674                     u5460:
  3238  001674                     l740:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 91: }
  3242                           ;sort.c: 92: LATAbits.LATA5 = 1;
  3243  001674  8A89               	bsf	3977,5,c	;volatile
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;sort.c: 95: initServos();
  3247  001676  EC84  F023         	call	_initServos	;wreg free
  3248                           
  3249                           ;sort.c: 96: }
  3250  00167A  0012               	return	
  3251  00167C                     l6863:
  3252                           
  3253                           ;sort.c: 97: else{
  3254                           ;sort.c: 100: if(!f_loadingNewCan){
  3255  00167C  0100               	movlb	0	; () banked
  3256  00167E  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3257  001680  0100               	movlb	0	; () banked
  3258  001682  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3259  001684  A4D8               	btfss	status,2,c
  3260  001686  D018               	goto	l6879
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;sort.c: 102: getIR();
  3264  001688  EC21  F022         	call	_getIR	;wreg free
  3265                           
  3266                           ;sort.c: 104: if(!f_loadingNewCan){
  3267  00168C  0100               	movlb	0	; () banked
  3268  00168E  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3269  001690  0100               	movlb	0	; () banked
  3270  001692  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3271  001694  B4D8               	btfsc	status,2,c
  3272  001696  0012               	return	
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;sort.c: 108: else{
  3276                           ;sort.c: 109: count_total++;
  3277                           
  3278                           ; BSR set to: 0
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;sort.c: 106: }
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;sort.c: 105: return;
  3285  001698  0100               	movlb	0	; () banked
  3286  00169A  4BFE               	infsnz	_count_total& (0+255),f,b
  3287  00169C  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 110: if(count_total == 12){
  3291  00169E  0E0C               	movlw	12
  3292  0016A0  0100               	movlb	0	; () banked
  3293  0016A2  19FE               	xorwf	_count_total& (0+255),w,b
  3294  0016A4  0100               	movlb	0	; () banked
  3295  0016A6  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3296  0016A8  A4D8               	btfss	status,2,c
  3297  0016AA  0012               	return	
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;sort.c: 111: f_lastCan = 1;
  3301  0016AC  0E00               	movlw	0
  3302  0016AE  0100               	movlb	0	; () banked
  3303  0016B0  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3304  0016B2  0E01               	movlw	1
  3305  0016B4  6FE8               	movwf	_f_lastCan& (0+255),b
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;sort.c: 112: }
  3309                           ;sort.c: 113: }
  3310                           ;sort.c: 114: }
  3311                           
  3312                           ; BSR set to: 0
  3313  0016B6  0012               	return	
  3314  0016B8                     l6879:
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;sort.c: 117: else if(f_ID_receive){
  3318  0016B8  5065               	movf	_f_ID_receive,w,c
  3319  0016BA  1066               	iorwf	_f_ID_receive+1,w,c
  3320  0016BC  B4D8               	btfsc	status,2,c
  3321  0016BE  0012               	return	
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;sort.c: 118: f_loadingNewCan = 0;
  3325  0016C0  0E00               	movlw	0
  3326  0016C2  0100               	movlb	0	; () banked
  3327  0016C4  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3328  0016C6  0E00               	movlw	0
  3329  0016C8  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;sort.c: 119: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3333  0016CA  0E3D               	movlw	61
  3334  0016CC  0100               	movlb	0	; () banked
  3335  0016CE  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3336  0016D0  0EE1               	movlw	225
  3337  0016D2  0100               	movlb	0	; () banked
  3338  0016D4  6FB1               	movwf	??_Loading& (0+255),b
  3339  0016D6  0E3F               	movlw	63
  3340  0016D8                     u8147:
  3341  0016D8  2EE8               	decfsz	wreg,f,c
  3342  0016DA  D7FE               	bra	u8147
  3343  0016DC  2FB1               	decfsz	??_Loading& (0+255),f,b
  3344  0016DE  D7FC               	bra	u8147
  3345  0016E0  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3346  0016E2  D7FA               	bra	u8147
  3347  0016E4  D000               	nop2	
  3348                           
  3349                           ;sort.c: 120: LATAbits.LATA5 = 0;
  3350  0016E6  9A89               	bcf	3977,5,c	;volatile
  3351                           
  3352                           ;sort.c: 124: getMAG();
  3353  0016E8  EC2A  F025         	call	_getMAG	;wreg free
  3354                           
  3355                           ;sort.c: 125: sensor_outputs[0] = MAG_signal;
  3356  0016EC  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3357  0016F0  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3358                           
  3359                           ;sort.c: 127: if(sensor_outputs[0]){
  3360  0016F4  0100               	movlb	0	; () banked
  3361  0016F6  51DA               	movf	_sensor_outputs& (0+255),w,b
  3362  0016F8  0100               	movlb	0	; () banked
  3363  0016FA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3364  0016FC  B4D8               	btfsc	status,2,c
  3365  0016FE  D01D               	goto	l6905
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;sort.c: 128: for(int i = 0; i<2500; i++){
  3369  001700  0E00               	movlw	0
  3370  001702  0100               	movlb	0	; () banked
  3371  001704  6FB9               	movwf	(Loading@i_1103+1)& (0+255),b
  3372  001706  0E00               	movlw	0
  3373  001708  6FB8               	movwf	Loading@i_1103& (0+255),b
  3374  00170A                     l6895:
  3375                           
  3376                           ; BSR set to: 0
  3377  00170A  0100               	movlb	0	; () banked
  3378  00170C  BFB9               	btfsc	(Loading@i_1103+1)& (0+255),7,b
  3379  00170E  D008               	goto	l750
  3380  001710  0EC4               	movlw	196
  3381  001712  0100               	movlb	0	; () banked
  3382  001714  5DB8               	subwf	Loading@i_1103& (0+255),w,b
  3383  001716  0E09               	movlw	9
  3384  001718  0100               	movlb	0	; () banked
  3385  00171A  59B9               	subwfb	(Loading@i_1103+1)& (0+255),w,b
  3386  00171C  B0D8               	btfsc	status,0,c
  3387  00171E  D02A               	goto	l6917
  3388  001720                     l750:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;sort.c: 129: LATAbits.LATA4 = 1;
  3392  001720  8889               	bsf	3977,4,c	;volatile
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;sort.c: 130: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3396  001722  0EC8               	movlw	200
  3397  001724                     u8157:
  3398  001724  2EE8               	decfsz	wreg,f,c
  3399  001726  D7FE               	bra	u8157
  3400                           
  3401                           ;sort.c: 131: LATAbits.LATA4 = 0;
  3402  001728  9889               	bcf	3977,4,c	;volatile
  3403                           
  3404                           ;sort.c: 132: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3405  00172A  0E42               	movlw	66
  3406  00172C                     u8167:
  3407  00172C  2EE8               	decfsz	wreg,f,c
  3408  00172E  D7FE               	bra	u8167
  3409  001730  D000               	nop2	
  3410  001732  0100               	movlb	0	; () banked
  3411  001734  4BB8               	infsnz	Loading@i_1103& (0+255),f,b
  3412  001736  2BB9               	incf	(Loading@i_1103+1)& (0+255),f,b
  3413  001738  D7E8               	goto	l6895
  3414  00173A                     l6905:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;sort.c: 135: else{
  3418                           ;sort.c: 136: for(int i = 0; i<2500; i++){
  3419  00173A  0E00               	movlw	0
  3420  00173C  0100               	movlb	0	; () banked
  3421  00173E  6FBB               	movwf	(Loading@i_1104+1)& (0+255),b
  3422  001740  0E00               	movlw	0
  3423  001742  6FBA               	movwf	Loading@i_1104& (0+255),b
  3424  001744                     l6907:
  3425                           
  3426                           ; BSR set to: 0
  3427  001744  0100               	movlb	0	; () banked
  3428  001746  BFBB               	btfsc	(Loading@i_1104+1)& (0+255),7,b
  3429  001748  D008               	goto	l753
  3430  00174A  0EC4               	movlw	196
  3431  00174C  0100               	movlb	0	; () banked
  3432  00174E  5DBA               	subwf	Loading@i_1104& (0+255),w,b
  3433  001750  0E09               	movlw	9
  3434  001752  0100               	movlb	0	; () banked
  3435  001754  59BB               	subwfb	(Loading@i_1104+1)& (0+255),w,b
  3436  001756  B0D8               	btfsc	status,0,c
  3437  001758  D00D               	goto	l6917
  3438  00175A                     l753:
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;sort.c: 137: LATAbits.LATA4 = 1;
  3442  00175A  8889               	bsf	3977,4,c	;volatile
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;sort.c: 138: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3446  00175C  0E9A               	movlw	154
  3447  00175E                     u8177:
  3448  00175E  2EE8               	decfsz	wreg,f,c
  3449  001760  D7FE               	bra	u8177
  3450  001762  D000               	nop2	
  3451                           
  3452                           ;sort.c: 139: LATAbits.LATA4 = 0;
  3453  001764  9889               	bcf	3977,4,c	;volatile
  3454                           
  3455                           ;sort.c: 140: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3456  001766  0E70               	movlw	112
  3457  001768                     u8187:
  3458  001768  2EE8               	decfsz	wreg,f,c
  3459  00176A  D7FE               	bra	u8187
  3460  00176C  0100               	movlb	0	; () banked
  3461  00176E  4BBA               	infsnz	Loading@i_1104& (0+255),f,b
  3462  001770  2BBB               	incf	(Loading@i_1104+1)& (0+255),f,b
  3463  001772  D7E8               	goto	l6907
  3464  001774                     l6917:
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;sort.c: 141: }
  3468                           ;sort.c: 142: }
  3469                           ;sort.c: 144: _delay((unsigned long)((200)*(32000000/4000.0)));
  3470  001774  0E09               	movlw	9
  3471  001776  0100               	movlb	0	; () banked
  3472  001778  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3473  00177A  0E1E               	movlw	30
  3474  00177C  0100               	movlb	0	; () banked
  3475  00177E  6FB1               	movwf	??_Loading& (0+255),b
  3476  001780  0EE4               	movlw	228
  3477  001782                     u8197:
  3478  001782  2EE8               	decfsz	wreg,f,c
  3479  001784  D7FE               	bra	u8197
  3480  001786  2FB1               	decfsz	??_Loading& (0+255),f,b
  3481  001788  D7FC               	bra	u8197
  3482  00178A  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3483  00178C  D7FA               	bra	u8197
  3484  00178E  F000               	nop	
  3485                           
  3486                           ;sort.c: 146: readIR();
  3487  001790  EC2C  F024         	call	_readIR	;wreg free
  3488                           
  3489                           ;sort.c: 147: if(IR_signal==1){
  3490  001794  0100               	movlb	0	; () banked
  3491  001796  05DE               	decf	_IR_signal& (0+255),w,b
  3492  001798  0100               	movlb	0	; () banked
  3493  00179A  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3494  00179C  A4D8               	btfss	status,2,c
  3495  00179E  D0C1               	goto	l6985
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;sort.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  3499  0017A0  0E05               	movlw	5
  3500  0017A2  0100               	movlb	0	; () banked
  3501  0017A4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3502  0017A6  0E0F               	movlw	15
  3503  0017A8  0100               	movlb	0	; () banked
  3504  0017AA  6FB1               	movwf	??_Loading& (0+255),b
  3505  0017AC  0EF1               	movlw	241
  3506  0017AE                     u8207:
  3507  0017AE  2EE8               	decfsz	wreg,f,c
  3508  0017B0  D7FE               	bra	u8207
  3509  0017B2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3510  0017B4  D7FC               	bra	u8207
  3511  0017B6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3512  0017B8  D7FA               	bra	u8207
  3513                           
  3514                           ;sort.c: 149: readIR();
  3515  0017BA  EC2C  F024         	call	_readIR	;wreg free
  3516                           
  3517                           ;sort.c: 150: if(IR_signal==1){
  3518  0017BE  0100               	movlb	0	; () banked
  3519  0017C0  05DE               	decf	_IR_signal& (0+255),w,b
  3520  0017C2  0100               	movlb	0	; () banked
  3521  0017C4  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3522  0017C6  A4D8               	btfss	status,2,c
  3523  0017C8  D040               	goto	l6955
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;sort.c: 151: if(sensor_outputs[0]){
  3527  0017CA  0100               	movlb	0	; () banked
  3528  0017CC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3529  0017CE  0100               	movlb	0	; () banked
  3530  0017D0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3531  0017D2  B4D8               	btfsc	status,2,c
  3532  0017D4  D01D               	goto	l6943
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;sort.c: 152: for(int i = 0; i<2500; i++){
  3536  0017D6  0E00               	movlw	0
  3537  0017D8  0100               	movlb	0	; () banked
  3538  0017DA  6FBD               	movwf	(Loading@i_1106+1)& (0+255),b
  3539  0017DC  0E00               	movlw	0
  3540  0017DE  6FBC               	movwf	Loading@i_1106& (0+255),b
  3541  0017E0                     l6933:
  3542                           
  3543                           ; BSR set to: 0
  3544  0017E0  0100               	movlb	0	; () banked
  3545  0017E2  BFBD               	btfsc	(Loading@i_1106+1)& (0+255),7,b
  3546  0017E4  D008               	goto	l758
  3547  0017E6  0EC4               	movlw	196
  3548  0017E8  0100               	movlb	0	; () banked
  3549  0017EA  5DBC               	subwf	Loading@i_1106& (0+255),w,b
  3550  0017EC  0E09               	movlw	9
  3551  0017EE  0100               	movlb	0	; () banked
  3552  0017F0  59BD               	subwfb	(Loading@i_1106+1)& (0+255),w,b
  3553  0017F2  B0D8               	btfsc	status,0,c
  3554  0017F4  D02A               	goto	l6955
  3555  0017F6                     l758:
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;sort.c: 153: LATAbits.LATA4 = 1;
  3559  0017F6  8889               	bsf	3977,4,c	;volatile
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;sort.c: 154: _delay((unsigned long)((75)*(32000000/4000000.0)));
  3563  0017F8  0EC8               	movlw	200
  3564  0017FA                     u8217:
  3565  0017FA  2EE8               	decfsz	wreg,f,c
  3566  0017FC  D7FE               	bra	u8217
  3567                           
  3568                           ;sort.c: 155: LATAbits.LATA4 = 0;
  3569  0017FE  9889               	bcf	3977,4,c	;volatile
  3570                           
  3571                           ;sort.c: 156: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3572  001800  0E42               	movlw	66
  3573  001802                     u8227:
  3574  001802  2EE8               	decfsz	wreg,f,c
  3575  001804  D7FE               	bra	u8227
  3576  001806  D000               	nop2	
  3577  001808  0100               	movlb	0	; () banked
  3578  00180A  4BBC               	infsnz	Loading@i_1106& (0+255),f,b
  3579  00180C  2BBD               	incf	(Loading@i_1106+1)& (0+255),f,b
  3580  00180E  D7E8               	goto	l6933
  3581  001810                     l6943:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;sort.c: 159: else{
  3585                           ;sort.c: 160: for(int i = 0; i<2500; i++){
  3586  001810  0E00               	movlw	0
  3587  001812  0100               	movlb	0	; () banked
  3588  001814  6FBF               	movwf	(Loading@i_1107+1)& (0+255),b
  3589  001816  0E00               	movlw	0
  3590  001818  6FBE               	movwf	Loading@i_1107& (0+255),b
  3591  00181A                     l6945:
  3592                           
  3593                           ; BSR set to: 0
  3594  00181A  0100               	movlb	0	; () banked
  3595  00181C  BFBF               	btfsc	(Loading@i_1107+1)& (0+255),7,b
  3596  00181E  D008               	goto	l761
  3597  001820  0EC4               	movlw	196
  3598  001822  0100               	movlb	0	; () banked
  3599  001824  5DBE               	subwf	Loading@i_1107& (0+255),w,b
  3600  001826  0E09               	movlw	9
  3601  001828  0100               	movlb	0	; () banked
  3602  00182A  59BF               	subwfb	(Loading@i_1107+1)& (0+255),w,b
  3603  00182C  B0D8               	btfsc	status,0,c
  3604  00182E  D00D               	goto	l6955
  3605  001830                     l761:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;sort.c: 161: LATAbits.LATA4 = 1;
  3609  001830  8889               	bsf	3977,4,c	;volatile
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 162: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3613  001832  0E9A               	movlw	154
  3614  001834                     u8237:
  3615  001834  2EE8               	decfsz	wreg,f,c
  3616  001836  D7FE               	bra	u8237
  3617  001838  D000               	nop2	
  3618                           
  3619                           ;sort.c: 163: LATAbits.LATA4 = 0;
  3620  00183A  9889               	bcf	3977,4,c	;volatile
  3621                           
  3622                           ;sort.c: 164: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3623  00183C  0E70               	movlw	112
  3624  00183E                     u8247:
  3625  00183E  2EE8               	decfsz	wreg,f,c
  3626  001840  D7FE               	bra	u8247
  3627  001842  0100               	movlb	0	; () banked
  3628  001844  4BBE               	infsnz	Loading@i_1107& (0+255),f,b
  3629  001846  2BBF               	incf	(Loading@i_1107+1)& (0+255),f,b
  3630  001848  D7E8               	goto	l6945
  3631  00184A                     l6955:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 165: }
  3635                           ;sort.c: 166: }
  3636                           ;sort.c: 167: }
  3637                           ;sort.c: 169: _delay((unsigned long)((200)*(32000000/4000.0)));
  3638  00184A  0E09               	movlw	9
  3639  00184C  0100               	movlb	0	; () banked
  3640  00184E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3641  001850  0E1E               	movlw	30
  3642  001852  0100               	movlb	0	; () banked
  3643  001854  6FB1               	movwf	??_Loading& (0+255),b
  3644  001856  0EE4               	movlw	228
  3645  001858                     u8257:
  3646  001858  2EE8               	decfsz	wreg,f,c
  3647  00185A  D7FE               	bra	u8257
  3648  00185C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3649  00185E  D7FC               	bra	u8257
  3650  001860  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3651  001862  D7FA               	bra	u8257
  3652  001864  F000               	nop	
  3653                           
  3654                           ;sort.c: 171: int i = 1;
  3655  001866  0E00               	movlw	0
  3656  001868  0100               	movlb	0	; () banked
  3657  00186A  6FB6               	movwf	(Loading@i_1108+1)& (0+255),b
  3658  00186C  0E01               	movlw	1
  3659  00186E  6FB5               	movwf	Loading@i_1108& (0+255),b
  3660                           
  3661                           ;sort.c: 172: while(IR_signal == 1){
  3662  001870  D052               	goto	l763
  3663  001872                     l6959:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;sort.c: 173: readIR();
  3667  001872  EC2C  F024         	call	_readIR	;wreg free
  3668                           
  3669                           ;sort.c: 174: if(IR_signal==1){
  3670  001876  0100               	movlb	0	; () banked
  3671  001878  05DE               	decf	_IR_signal& (0+255),w,b
  3672  00187A  0100               	movlb	0	; () banked
  3673  00187C  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3674  00187E  A4D8               	btfss	status,2,c
  3675  001880  D026               	goto	l6975
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;sort.c: 175: _delay((unsigned long)((200)*(32000000/4000.0)));
  3679  001882  0E09               	movlw	9
  3680  001884  0100               	movlb	0	; () banked
  3681  001886  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3682  001888  0E1E               	movlw	30
  3683  00188A  0100               	movlb	0	; () banked
  3684  00188C  6FB1               	movwf	??_Loading& (0+255),b
  3685  00188E  0EE4               	movlw	228
  3686  001890                     u8267:
  3687  001890  2EE8               	decfsz	wreg,f,c
  3688  001892  D7FE               	bra	u8267
  3689  001894  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  001896  D7FC               	bra	u8267
  3691  001898  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3692  00189A  D7FA               	bra	u8267
  3693  00189C  F000               	nop	
  3694                           
  3695                           ;sort.c: 176: readIR();
  3696  00189E  EC2C  F024         	call	_readIR	;wreg free
  3697                           
  3698                           ;sort.c: 177: if(IR_signal==1){
  3699  0018A2  0100               	movlb	0	; () banked
  3700  0018A4  05DE               	decf	_IR_signal& (0+255),w,b
  3701  0018A6  0100               	movlb	0	; () banked
  3702  0018A8  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3703  0018AA  A4D8               	btfss	status,2,c
  3704  0018AC  D010               	goto	l6975
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;sort.c: 178: LATAbits.LATA4 = 1;
  3708  0018AE  8889               	bsf	3977,4,c	;volatile
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;sort.c: 179: _delay((unsigned long)((250)*(32000000/4000.0)));
  3712  0018B0  0E0B               	movlw	11
  3713  0018B2  0100               	movlb	0	; () banked
  3714  0018B4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3715  0018B6  0E26               	movlw	38
  3716  0018B8  0100               	movlb	0	; () banked
  3717  0018BA  6FB1               	movwf	??_Loading& (0+255),b
  3718  0018BC  0E5D               	movlw	93
  3719  0018BE                     u8277:
  3720  0018BE  2EE8               	decfsz	wreg,f,c
  3721  0018C0  D7FE               	bra	u8277
  3722  0018C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3723  0018C4  D7FC               	bra	u8277
  3724  0018C6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3725  0018C8  D7FA               	bra	u8277
  3726  0018CA  D000               	nop2	
  3727                           
  3728                           ;sort.c: 180: LATAbits.LATA4 = 0;
  3729  0018CC  9889               	bcf	3977,4,c	;volatile
  3730  0018CE                     l6975:
  3731                           
  3732                           ;sort.c: 181: }
  3733                           ;sort.c: 182: }
  3734                           ;sort.c: 183: if(i % 10 == 0){
  3735  0018CE  C0B5  F080         	movff	Loading@i_1108,___awmod@dividend
  3736  0018D2  C0B6  F081         	movff	Loading@i_1108+1,___awmod@dividend+1
  3737  0018D6  0E00               	movlw	0
  3738  0018D8  0100               	movlb	0	; () banked
  3739  0018DA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3740  0018DC  0E0A               	movlw	10
  3741  0018DE  6F82               	movwf	___awmod@divisor& (0+255),b
  3742  0018E0  EC0C  F020         	call	___awmod	;wreg free
  3743  0018E4  0100               	movlb	0	; () banked
  3744  0018E6  5180               	movf	?___awmod& (0+255),w,b
  3745  0018E8  0100               	movlb	0	; () banked
  3746  0018EA  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  3747  0018EC  A4D8               	btfss	status,2,c
  3748  0018EE  D010               	goto	l6983
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;sort.c: 184: LATAbits.LATA5 = 1;
  3752  0018F0  8A89               	bsf	3977,5,c	;volatile
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;sort.c: 185: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3756  0018F2  0ECB               	movlw	203
  3757  0018F4  0100               	movlb	0	; () banked
  3758  0018F6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3759  0018F8  0EEC               	movlw	236
  3760  0018FA  0100               	movlb	0	; () banked
  3761  0018FC  6FB1               	movwf	??_Loading& (0+255),b
  3762  0018FE  0E84               	movlw	132
  3763  001900                     u8287:
  3764  001900  2EE8               	decfsz	wreg,f,c
  3765  001902  D7FE               	bra	u8287
  3766  001904  2FB1               	decfsz	??_Loading& (0+255),f,b
  3767  001906  D7FC               	bra	u8287
  3768  001908  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3769  00190A  D7FA               	bra	u8287
  3770  00190C  F000               	nop	
  3771                           
  3772                           ;sort.c: 186: LATAbits.LATA5 = 0;
  3773  00190E  9A89               	bcf	3977,5,c	;volatile
  3774  001910                     l6983:
  3775                           
  3776                           ;sort.c: 187: }
  3777                           ;sort.c: 188: i++;
  3778  001910  0100               	movlb	0	; () banked
  3779  001912  4BB5               	infsnz	Loading@i_1108& (0+255),f,b
  3780  001914  2BB6               	incf	(Loading@i_1108+1)& (0+255),f,b
  3781  001916                     l763:
  3782                           
  3783                           ; BSR set to: 0
  3784  001916  0100               	movlb	0	; () banked
  3785  001918  05DE               	decf	_IR_signal& (0+255),w,b
  3786  00191A  0100               	movlb	0	; () banked
  3787  00191C  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3788  00191E  B4D8               	btfsc	status,2,c
  3789  001920  D7A8               	goto	l6959
  3790  001922                     l6985:
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;sort.c: 189: }
  3794                           ;sort.c: 190: }
  3795                           ;sort.c: 191: f_can_coming_to_ID = 1;
  3796  001922  0E00               	movlw	0
  3797  001924  6E68               	movwf	_f_can_coming_to_ID+1,c
  3798  001926  0E01               	movlw	1
  3799  001928  6E67               	movwf	_f_can_coming_to_ID,c
  3800                           
  3801                           ; BSR set to: 0
  3802                           
  3803                           ; BSR set to: 0
  3804  00192A  0012               	return	
  3805  00192C                     __end_of_Loading:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           postinc0	equ	0xFEE
  3814                           wreg	equ	0xFE8
  3815                           postdec1	equ	0xFE5
  3816                           fsr1l	equ	0xFE1
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _initSortTimer *****************
  3820 ;; Defined at:
  3821 ;;		line 354 in file "sort.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  i               2    8[BANK0 ] int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        5 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:   10
  3842 ;; This function calls:
  3843 ;;		_getRTC
  3844 ;; This function is called by:
  3845 ;;		_Loading
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text4
  3850  003F6E                     __ptext4:
  3851                           	opt stack 0
  3852  003F6E                     _initSortTimer:
  3853                           	opt stack 18
  3854                           
  3855                           ;sort.c: 356: getRTC();
  3856                           
  3857                           ;incstack = 0
  3858  003F6E  ECA3  F020         	call	_getRTC	;wreg free
  3859                           
  3860                           ;sort.c: 357: for(int i = 0; i < 7; i++){
  3861  003F72  0E00               	movlw	0
  3862  003F74  0100               	movlb	0	; () banked
  3863  003F76  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3864  003F78  0E00               	movlw	0
  3865  003F7A  6F88               	movwf	initSortTimer@i& (0+255),b
  3866  003F7C                     l6401:
  3867                           
  3868                           ; BSR set to: 0
  3869  003F7C  0100               	movlb	0	; () banked
  3870  003F7E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3871  003F80  D008               	goto	l6405
  3872  003F82  0100               	movlb	0	; () banked
  3873  003F84  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3874  003F86  E140               	bnz	l6411
  3875  003F88  0E07               	movlw	7
  3876  003F8A  0100               	movlb	0	; () banked
  3877  003F8C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3878  003F8E  B0D8               	btfsc	status,0,c
  3879  003F90  D03B               	goto	l6411
  3880  003F92                     l6405:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;sort.c: 358: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3884  003F92  0E24               	movlw	low _time
  3885  003F94  0100               	movlb	0	; () banked
  3886  003F96  2588               	addwf	initSortTimer@i& (0+255),w,b
  3887  003F98  6ED9               	movwf	fsr2l,c
  3888  003F9A  0E01               	movlw	high _time
  3889  003F9C  0100               	movlb	0	; () banked
  3890  003F9E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3891  003FA0  6EDA               	movwf	fsr2h,c
  3892  003FA2  50DF               	movf	indf2,w,c
  3893  003FA4  0100               	movlb	0	; () banked
  3894  003FA6  6F85               	movwf	??_initSortTimer& (0+255),b
  3895  003FA8  0100               	movlb	0	; () banked
  3896  003FAA  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3897  003FAC  0E0F               	movlw	15
  3898  003FAE  1785               	andwf	??_initSortTimer& (0+255),f,b
  3899  003FB0  0E0F               	movlw	15
  3900  003FB2  0100               	movlb	0	; () banked
  3901  003FB4  1785               	andwf	??_initSortTimer& (0+255),f,b
  3902  003FB6  0100               	movlb	0	; () banked
  3903  003FB8  5185               	movf	??_initSortTimer& (0+255),w,b
  3904  003FBA  0D0A               	mullw	10
  3905  003FBC  0E24               	movlw	low _time
  3906  003FBE  0100               	movlb	0	; () banked
  3907  003FC0  2588               	addwf	initSortTimer@i& (0+255),w,b
  3908  003FC2  6ED9               	movwf	fsr2l,c
  3909  003FC4  0E01               	movlw	high _time
  3910  003FC6  0100               	movlb	0	; () banked
  3911  003FC8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3912  003FCA  6EDA               	movwf	fsr2h,c
  3913  003FCC  50DF               	movf	indf2,w,c
  3914  003FCE  0B0F               	andlw	15
  3915  003FD0  0100               	movlb	0	; () banked
  3916  003FD2  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3917  003FD4  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3918  003FD6  50F3               	movf	prodl,w,c
  3919  003FD8  0100               	movlb	0	; () banked
  3920  003FDA  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3921  003FDC  50F4               	movf	prodh,w,c
  3922  003FDE  0100               	movlb	0	; () banked
  3923  003FE0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3924  003FE2  90D8               	bcf	status,0,c
  3925  003FE4  0100               	movlb	0	; () banked
  3926  003FE6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3927  003FE8  6ED9               	movwf	fsr2l,c
  3928  003FEA  0100               	movlb	0	; () banked
  3929  003FEC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3930  003FEE  6EDA               	movwf	fsr2h,c
  3931  003FF0  0E0E               	movlw	low _startTime
  3932  003FF2  26D9               	addwf	fsr2l,f,c
  3933  003FF4  0E01               	movlw	high _startTime
  3934  003FF6  22DA               	addwfc	fsr2h,f,c
  3935  003FF8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3936  003FFC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3937                           
  3938                           ; BSR set to: 0
  3939  004000  0100               	movlb	0	; () banked
  3940  004002  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3941  004004  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3942  004006  D7BA               	goto	l6401
  3943  004008                     l6411:
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;sort.c: 359: }
  3947                           ;sort.c: 361: T0CON = 0b00010111;
  3948  004008  0E17               	movlw	23
  3949  00400A  6ED5               	movwf	4053,c	;volatile
  3950                           
  3951                           ;sort.c: 370: TMR0H = 0b10000101;
  3952  00400C  0E85               	movlw	133
  3953  00400E  6ED7               	movwf	4055,c	;volatile
  3954                           
  3955                           ;sort.c: 371: TMR0L = 0b11101110;
  3956  004010  0EEE               	movlw	238
  3957  004012  6ED6               	movwf	4054,c	;volatile
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;sort.c: 372: TMR0ON = 1;
  3961  004014  8ED5               	bsf	4053,7,c	;volatile
  3962                           
  3963                           ; BSR set to: 0
  3964  004016  0012               	return		;funcret
  3965  004018                     __end_of_initSortTimer:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           postdec1	equ	0xFE5
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _initGlobalVars *****************
  3985 ;; Defined at:
  3986 ;;		line 331 in file "sort.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;		None
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;		None
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;Total ram usage:        0 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    7
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_Loading
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text5
  4015  0042D4                     __ptext5:
  4016                           	opt stack 0
  4017  0042D4                     _initGlobalVars:
  4018                           	opt stack 21
  4019                           
  4020                           ;sort.c: 333: first = 0;
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;incstack = 0
  4024  0042D4  0E00               	movlw	0
  4025  0042D6  6E6E               	movwf	_first+1,c
  4026  0042D8  0E00               	movlw	0
  4027  0042DA  6E6D               	movwf	_first,c
  4028                           
  4029                           ;sort.c: 336: f_loadingNewCan = 0;
  4030  0042DC  0E00               	movlw	0
  4031  0042DE  0100               	movlb	0	; () banked
  4032  0042E0  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4033  0042E2  0E00               	movlw	0
  4034  0042E4  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4035                           
  4036                           ;sort.c: 337: f_lastCan = 0;
  4037  0042E6  0E00               	movlw	0
  4038  0042E8  0100               	movlb	0	; () banked
  4039  0042EA  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  4040  0042EC  0E00               	movlw	0
  4041  0042EE  6FE8               	movwf	_f_lastCan& (0+255),b
  4042                           
  4043                           ;sort.c: 338: f_ID_receive = 1;
  4044  0042F0  0E00               	movlw	0
  4045  0042F2  6E66               	movwf	_f_ID_receive+1,c
  4046  0042F4  0E01               	movlw	1
  4047  0042F6  6E65               	movwf	_f_ID_receive,c
  4048                           
  4049                           ;sort.c: 339: f_can_coming_to_ID = 0;
  4050  0042F8  0E00               	movlw	0
  4051  0042FA  6E68               	movwf	_f_can_coming_to_ID+1,c
  4052  0042FC  0E00               	movlw	0
  4053  0042FE  6E67               	movwf	_f_can_coming_to_ID,c
  4054                           
  4055                           ;sort.c: 340: f_can_coming_to_distribution = 0;
  4056  004300  0E00               	movlw	0
  4057  004302  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4058  004304  0E00               	movlw	0
  4059  004306  6E69               	movwf	_f_can_coming_to_distribution,c
  4060                           
  4061                           ;sort.c: 341: f_can_distributed = 0;
  4062  004308  0E00               	movlw	0
  4063  00430A  0101               	movlb	1	; () banked
  4064  00430C  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4065  00430E  0E00               	movlw	0
  4066  004310  6F2F               	movwf	_f_can_distributed& (0+255),b
  4067                           
  4068                           ;sort.c: 342: f_most_recent_sort_time = 0;
  4069  004312  0E00               	movlw	0
  4070  004314  6E6C               	movwf	_f_most_recent_sort_time+1,c
  4071  004316  0E00               	movlw	0
  4072  004318  6E6B               	movwf	_f_most_recent_sort_time,c
  4073                           
  4074                           ;sort.c: 345: count_total = 0;
  4075  00431A  0E00               	movlw	0
  4076  00431C  0100               	movlb	0	; () banked
  4077  00431E  6FFF               	movwf	(_count_total+1)& (0+255),b
  4078  004320  0E00               	movlw	0
  4079  004322  6FFE               	movwf	_count_total& (0+255),b
  4080                           
  4081                           ;sort.c: 346: count_pop_no_tab = 0;
  4082  004324  0E00               	movlw	0
  4083  004326  6E5C               	movwf	_count_pop_no_tab+1,c
  4084  004328  0E00               	movlw	0
  4085  00432A  6E5B               	movwf	_count_pop_no_tab,c
  4086                           
  4087                           ;sort.c: 347: count_pop_w_tab = 0;
  4088  00432C  0E00               	movlw	0
  4089  00432E  6E5E               	movwf	_count_pop_w_tab+1,c
  4090  004330  0E00               	movlw	0
  4091  004332  6E5D               	movwf	_count_pop_w_tab,c
  4092                           
  4093                           ;sort.c: 348: count_can_w_lab = 0;
  4094  004334  0E00               	movlw	0
  4095  004336  0101               	movlb	1	; () banked
  4096  004338  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4097  00433A  0E00               	movlw	0
  4098  00433C  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4099                           
  4100                           ;sort.c: 349: count_can_no_lab = 0;
  4101  00433E  0E00               	movlw	0
  4102  004340  0101               	movlb	1	; () banked
  4103  004342  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4104  004344  0E00               	movlw	0
  4105  004346  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4106                           
  4107                           ;sort.c: 352: most_recent_sort_time = 999;
  4108  004348  0E03               	movlw	3
  4109  00434A  0101               	movlb	1	; () banked
  4110  00434C  6F34               	movwf	(_most_recent_sort_time+1)& (0+255),b
  4111  00434E  0EE7               	movlw	231
  4112  004350  6F33               	movwf	_most_recent_sort_time& (0+255),b
  4113                           
  4114                           ; BSR set to: 1
  4115  004352  0012               	return		;funcret
  4116  004354                     __end_of_initGlobalVars:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _getMAG *****************
  4136 ;; Defined at:
  4137 ;;		line 433 in file "sort.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:        2 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    9
  4158 ;; This function calls:
  4159 ;;		_readMAG
  4160 ;; This function is called by:
  4161 ;;		_Loading
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text6
  4166  004A54                     __ptext6:
  4167                           	opt stack 0
  4168  004A54                     _getMAG:
  4169                           	opt stack 19
  4170                           
  4171                           ;sort.c: 434: readMAG();
  4172                           
  4173                           ; BSR set to: 1
  4174                           ;incstack = 0
  4175  004A54  EC52  F024         	call	_readMAG	;wreg free
  4176                           
  4177                           ;sort.c: 436: if(MAG_signal==1){
  4178  004A58  0100               	movlb	0	; () banked
  4179  004A5A  05E0               	decf	_MAG_signal& (0+255),w,b
  4180  004A5C  0100               	movlb	0	; () banked
  4181  004A5E  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4182  004A60  A4D8               	btfss	status,2,c
  4183  004A62  0012               	return	
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;sort.c: 437: _delay((unsigned long)((500)*(32000000/4000.0)));
  4187  004A64  0E15               	movlw	21
  4188  004A66  0100               	movlb	0	; () banked
  4189  004A68  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4190  004A6A  0E4B               	movlw	75
  4191  004A6C  0100               	movlb	0	; () banked
  4192  004A6E  6F86               	movwf	??_getMAG& (0+255),b
  4193  004A70  0EBE               	movlw	190
  4194  004A72                     u8297:
  4195  004A72  2EE8               	decfsz	wreg,f,c
  4196  004A74  D7FE               	bra	u8297
  4197  004A76  2F86               	decfsz	??_getMAG& (0+255),f,b
  4198  004A78  D7FC               	bra	u8297
  4199  004A7A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4200  004A7C  D7FA               	bra	u8297
  4201  004A7E  F000               	nop	
  4202                           
  4203                           ;sort.c: 438: readMAG();
  4204  004A80  EC52  F024         	call	_readMAG	;wreg free
  4205  004A84  0012               	return	
  4206  004A86                     __end_of_getMAG:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           postinc0	equ	0xFEE
  4215                           wreg	equ	0xFE8
  4216                           postdec1	equ	0xFE5
  4217                           fsr1l	equ	0xFE1
  4218                           indf2	equ	0xFDF
  4219                           postinc2	equ	0xFDE
  4220                           postdec2	equ	0xFDD
  4221                           fsr2h	equ	0xFDA
  4222                           fsr2l	equ	0xFD9
  4223                           status	equ	0xFD8
  4224                           
  4225 ;; *************** function _getIR *****************
  4226 ;; Defined at:
  4227 ;;		line 417 in file "sort.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  i               2    7[BANK0 ] int 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;Total ram usage:        3 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    9
  4248 ;; This function calls:
  4249 ;;		_readIR
  4250 ;; This function is called by:
  4251 ;;		_Loading
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text7
  4256  004442                     __ptext7:
  4257                           	opt stack 0
  4258  004442                     _getIR:
  4259                           	opt stack 19
  4260                           
  4261                           ;sort.c: 418: readIR();
  4262                           
  4263                           ;incstack = 0
  4264  004442  EC2C  F024         	call	_readIR	;wreg free
  4265                           
  4266                           ;sort.c: 419: for(int i = 0; i < 150; i++){
  4267  004446  0E00               	movlw	0
  4268  004448  0100               	movlb	0	; () banked
  4269  00444A  6F88               	movwf	(getIR@i+1)& (0+255),b
  4270  00444C  0E00               	movlw	0
  4271  00444E  6F87               	movwf	getIR@i& (0+255),b
  4272  004450                     l6493:
  4273                           
  4274                           ; BSR set to: 0
  4275  004450  0100               	movlb	0	; () banked
  4276  004452  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4277  004454  D008               	goto	l6497
  4278  004456  0100               	movlb	0	; () banked
  4279  004458  5188               	movf	(getIR@i+1)& (0+255),w,b
  4280  00445A  E11A               	bnz	l6509
  4281  00445C  0E96               	movlw	150
  4282  00445E  0100               	movlb	0	; () banked
  4283  004460  5D87               	subwf	getIR@i& (0+255),w,b
  4284  004462  B0D8               	btfsc	status,0,c
  4285  004464  D015               	goto	l6509
  4286  004466                     l6497:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;sort.c: 420: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4290  004466  0E06               	movlw	6
  4291  004468  0100               	movlb	0	; () banked
  4292  00446A  6F86               	movwf	??_getIR& (0+255),b
  4293  00446C  0E30               	movlw	48
  4294  00446E                     u8307:
  4295  00446E  2EE8               	decfsz	wreg,f,c
  4296  004470  D7FE               	bra	u8307
  4297  004472  2F86               	decfsz	??_getIR& (0+255),f,b
  4298  004474  D7FC               	bra	u8307
  4299  004476  F000               	nop	
  4300                           
  4301                           ;sort.c: 421: readIR();
  4302  004478  EC2C  F024         	call	_readIR	;wreg free
  4303                           
  4304                           ;sort.c: 422: if(!IR_signal){
  4305  00447C  0100               	movlb	0	; () banked
  4306  00447E  51DE               	movf	_IR_signal& (0+255),w,b
  4307  004480  0100               	movlb	0	; () banked
  4308  004482  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4309  004484  B4D8               	btfsc	status,2,c
  4310  004486  D004               	goto	l6509
  4311                           
  4312                           ; BSR set to: 0
  4313                           
  4314                           ; BSR set to: 0
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;sort.c: 423: break;
  4318  004488  0100               	movlb	0	; () banked
  4319  00448A  4B87               	infsnz	getIR@i& (0+255),f,b
  4320  00448C  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4321  00448E  D7E0               	goto	l6493
  4322  004490                     l6509:
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;sort.c: 424: }
  4326                           ;sort.c: 425: }
  4327                           ;sort.c: 426: if(IR_signal==1){
  4328  004490  0100               	movlb	0	; () banked
  4329  004492  05DE               	decf	_IR_signal& (0+255),w,b
  4330  004494  0100               	movlb	0	; () banked
  4331  004496  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4332  004498  A4D8               	btfss	status,2,c
  4333  00449A  D006               	goto	l6513
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;sort.c: 427: f_loadingNewCan = 1;
  4337  00449C  0E00               	movlw	0
  4338  00449E  0100               	movlb	0	; () banked
  4339  0044A0  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4340  0044A2  0E01               	movlw	1
  4341  0044A4  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4342                           
  4343                           ;sort.c: 428: }
  4344  0044A6  0012               	return	
  4345  0044A8                     l6513:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;sort.c: 429: else{
  4349                           ;sort.c: 430: f_loadingNewCan = 0;
  4350  0044A8  0E00               	movlw	0
  4351  0044AA  0100               	movlb	0	; () banked
  4352  0044AC  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4353  0044AE  0E00               	movlw	0
  4354  0044B0  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4355  0044B2  0012               	return	
  4356  0044B4                     __end_of_getIR:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           postinc0	equ	0xFEE
  4365                           wreg	equ	0xFE8
  4366                           postdec1	equ	0xFE5
  4367                           fsr1l	equ	0xFE1
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _readIR *****************
  4376 ;; Defined at:
  4377 ;;		line 23 in file "ADCFunctionality.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  res             2    4[BANK0 ] int 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;Total ram usage:        4 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    8
  4398 ;; This function calls:
  4399 ;;		_readADC
  4400 ;; This function is called by:
  4401 ;;		_Loading
  4402 ;;		_getIR
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text8
  4407  004858                     __ptext8:
  4408                           	opt stack 0
  4409  004858                     _readIR:
  4410                           	opt stack 20
  4411                           
  4412                           ;ADCFunctionality.c: 24: readADC(0);
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;incstack = 0
  4416  004858  0E00               	movlw	0
  4417  00485A  EC8F  F026         	call	_readADC
  4418                           
  4419                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4420  00485E  50C3               	movf	4035,w,c	;volatile
  4421  004860  CFC4 F082          	movff	4036,??_readIR	;volatile
  4422  004864  0100               	movlb	0	; () banked
  4423  004866  6B83               	clrf	(??_readIR+1)& (0+255),b
  4424  004868  C082  F083         	movff	??_readIR,??_readIR+1
  4425  00486C  0100               	movlb	0	; () banked
  4426  00486E  6B82               	clrf	??_readIR& (0+255),b
  4427  004870  0100               	movlb	0	; () banked
  4428  004872  1182               	iorwf	??_readIR& (0+255),w,b
  4429  004874  0100               	movlb	0	; () banked
  4430  004876  6F84               	movwf	readIR@res& (0+255),b
  4431  004878  0100               	movlb	0	; () banked
  4432  00487A  5183               	movf	(??_readIR+1)& (0+255),w,b
  4433  00487C  0100               	movlb	0	; () banked
  4434  00487E  6F85               	movwf	(readIR@res+1)& (0+255),b
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  4438  004880  0100               	movlb	0	; () banked
  4439  004882  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4440  004884  D00A               	goto	u4320
  4441  004886  0E21               	movlw	33
  4442  004888  0100               	movlb	0	; () banked
  4443  00488A  5D84               	subwf	readIR@res& (0+255),w,b
  4444  00488C  0E03               	movlw	3
  4445  00488E  0100               	movlb	0	; () banked
  4446  004890  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4447  004892  A0D8               	btfss	status,0,c
  4448  004894  D002               	goto	u4320
  4449  004896  0E01               	movlw	1
  4450  004898  D001               	goto	u4330
  4451  00489A                     u4320:
  4452  00489A  0E00               	movlw	0
  4453  00489C                     u4330:
  4454  00489C  0100               	movlb	0	; () banked
  4455  00489E  6FDE               	movwf	_IR_signal& (0+255),b
  4456  0048A0  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4457                           
  4458                           ; BSR set to: 0
  4459  0048A2  0012               	return		;funcret
  4460  0048A4                     __end_of_readIR:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1l	equ	0xFE1
  4472                           indf2	equ	0xFDF
  4473                           postinc2	equ	0xFDE
  4474                           postdec2	equ	0xFDD
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _ID *****************
  4480 ;; Defined at:
  4481 ;;		line 195 in file "sort.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  i               2    6[BANK0 ] int 
  4486 ;;  i               2    4[BANK0 ] int 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;Total ram usage:        6 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    8
  4503 ;; This function calls:
  4504 ;;		_delay_ms
  4505 ;; This function is called by:
  4506 ;;		_sort
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text9
  4511  003338                     __ptext9:
  4512                           	opt stack 0
  4513  003338                     _ID:
  4514                           	opt stack 21
  4515                           
  4516                           ;sort.c: 196: if(f_can_coming_to_ID){
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;incstack = 0
  4520  003338  5067               	movf	_f_can_coming_to_ID,w,c
  4521  00333A  1068               	iorwf	_f_can_coming_to_ID+1,w,c
  4522  00333C  B4D8               	btfsc	status,2,c
  4523  00333E  0012               	return	
  4524                           
  4525                           ;sort.c: 198: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4526  003340  0E3D               	movlw	61
  4527  003342  0100               	movlb	0	; () banked
  4528  003344  6F83               	movwf	(??_ID+1)& (0+255),b
  4529  003346  0EE1               	movlw	225
  4530  003348  0100               	movlb	0	; () banked
  4531  00334A  6F82               	movwf	??_ID& (0+255),b
  4532  00334C  0E3F               	movlw	63
  4533  00334E                     u8317:
  4534  00334E  2EE8               	decfsz	wreg,f,c
  4535  003350  D7FE               	bra	u8317
  4536  003352  2F82               	decfsz	??_ID& (0+255),f,b
  4537  003354  D7FC               	bra	u8317
  4538  003356  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4539  003358  D7FA               	bra	u8317
  4540  00335A  D000               	nop2	
  4541                           
  4542                           ;sort.c: 200: LATAbits.LATA3 = 1;
  4543  00335C  8689               	bsf	3977,3,c	;volatile
  4544                           
  4545                           ;sort.c: 201: _delay((unsigned long)((600)*(32000000/4000.0)));
  4546  00335E  0E19               	movlw	25
  4547  003360  0100               	movlb	0	; () banked
  4548  003362  6F83               	movwf	(??_ID+1)& (0+255),b
  4549  003364  0E5A               	movlw	90
  4550  003366  0100               	movlb	0	; () banked
  4551  003368  6F82               	movwf	??_ID& (0+255),b
  4552  00336A  0EB1               	movlw	177
  4553  00336C                     u8327:
  4554  00336C  2EE8               	decfsz	wreg,f,c
  4555  00336E  D7FE               	bra	u8327
  4556  003370  2F82               	decfsz	??_ID& (0+255),f,b
  4557  003372  D7FC               	bra	u8327
  4558  003374  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4559  003376  D7FA               	bra	u8327
  4560  003378  D000               	nop2	
  4561                           
  4562                           ;sort.c: 202: sensor_outputs[1] = PORTAbits.RA2;
  4563  00337A  A480               	btfss	3968,2,c	;volatile
  4564  00337C  D004               	goto	u5680
  4565  00337E  0100               	movlb	0	; () banked
  4566  003380  6B82               	clrf	??_ID& (0+255),b
  4567  003382  2B82               	incf	??_ID& (0+255),f,b
  4568  003384  D002               	goto	u5688
  4569  003386                     u5680:
  4570  003386  0100               	movlb	0	; () banked
  4571  003388  6B82               	clrf	??_ID& (0+255),b
  4572  00338A                     u5688:
  4573  00338A  0100               	movlb	0	; () banked
  4574  00338C  5182               	movf	??_ID& (0+255),w,b
  4575  00338E  0100               	movlb	0	; () banked
  4576  003390  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4577  003392  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;sort.c: 210: if(!sensor_outputs[0]){
  4581  003394  0100               	movlb	0	; () banked
  4582  003396  51DA               	movf	_sensor_outputs& (0+255),w,b
  4583  003398  0100               	movlb	0	; () banked
  4584  00339A  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4585  00339C  A4D8               	btfss	status,2,c
  4586  00339E  D014               	goto	l7007
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;sort.c: 211: if(!sensor_outputs[1]){
  4590  0033A0  0100               	movlb	0	; () banked
  4591  0033A2  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4592  0033A4  0100               	movlb	0	; () banked
  4593  0033A6  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4594  0033A8  A4D8               	btfss	status,2,c
  4595  0033AA  D007               	goto	l7003
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;sort.c: 212: count_pop_no_tab++;
  4599  0033AC  4A5B               	infsnz	_count_pop_no_tab,f,c
  4600  0033AE  2A5C               	incf	_count_pop_no_tab+1,f,c
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;sort.c: 213: cur_can = 0;
  4604  0033B0  0E00               	movlw	0
  4605  0033B2  0100               	movlb	0	; () banked
  4606  0033B4  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4607  0033B6  0E00               	movlw	0
  4608  0033B8  D006               	goto	L2
  4609  0033BA                     l7003:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;sort.c: 215: else{
  4613                           ;sort.c: 216: count_pop_w_tab++;
  4614  0033BA  4A5D               	infsnz	_count_pop_w_tab,f,c
  4615  0033BC  2A5E               	incf	_count_pop_w_tab+1,f,c
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;sort.c: 217: cur_can = 1;
  4619  0033BE  0E00               	movlw	0
  4620  0033C0  0100               	movlb	0	; () banked
  4621  0033C2  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4622  0033C4  0E01               	movlw	1
  4623  0033C6                     L2:
  4624  0033C6  6FE4               	movwf	_cur_can& (0+255),b
  4625  0033C8                     l7007:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;sort.c: 218: }
  4629                           ;sort.c: 219: }
  4630                           ;sort.c: 220: if(sensor_outputs[0]){
  4631  0033C8  0100               	movlb	0	; () banked
  4632  0033CA  51DA               	movf	_sensor_outputs& (0+255),w,b
  4633  0033CC  0100               	movlb	0	; () banked
  4634  0033CE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4635  0033D0  B4D8               	btfsc	status,2,c
  4636  0033D2  D016               	goto	l7019
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;sort.c: 221: if(!sensor_outputs[1]){
  4640  0033D4  0100               	movlb	0	; () banked
  4641  0033D6  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4642  0033D8  0100               	movlb	0	; () banked
  4643  0033DA  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4644  0033DC  A4D8               	btfss	status,2,c
  4645  0033DE  D008               	goto	l7015
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;sort.c: 222: count_can_w_lab++;
  4649  0033E0  0101               	movlb	1	; () banked
  4650  0033E2  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4651  0033E4  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4652                           
  4653                           ; BSR set to: 1
  4654                           ;sort.c: 223: cur_can = 2;
  4655  0033E6  0E00               	movlw	0
  4656  0033E8  0100               	movlb	0	; () banked
  4657  0033EA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4658  0033EC  0E02               	movlw	2
  4659  0033EE  D007               	goto	L3
  4660  0033F0                     l7015:
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;sort.c: 225: else{
  4664                           ;sort.c: 226: count_can_no_lab++;
  4665  0033F0  0101               	movlb	1	; () banked
  4666  0033F2  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4667  0033F4  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4668                           
  4669                           ; BSR set to: 1
  4670                           ;sort.c: 227: cur_can = 3;
  4671  0033F6  0E00               	movlw	0
  4672  0033F8  0100               	movlb	0	; () banked
  4673  0033FA  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4674  0033FC  0E03               	movlw	3
  4675  0033FE                     L3:
  4676  0033FE  6FE4               	movwf	_cur_can& (0+255),b
  4677  003400                     l7019:
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;sort.c: 228: }
  4681                           ;sort.c: 229: }
  4682                           ;sort.c: 230: LATAbits.LATA3 = 0;
  4683  003400  9689               	bcf	3977,3,c	;volatile
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;sort.c: 231: _delay((unsigned long)((200)*(32000000/4000.0)));
  4687  003402  0E09               	movlw	9
  4688  003404  0100               	movlb	0	; () banked
  4689  003406  6F83               	movwf	(??_ID+1)& (0+255),b
  4690  003408  0E1E               	movlw	30
  4691  00340A  0100               	movlb	0	; () banked
  4692  00340C  6F82               	movwf	??_ID& (0+255),b
  4693  00340E  0EE4               	movlw	228
  4694  003410                     u8337:
  4695  003410  2EE8               	decfsz	wreg,f,c
  4696  003412  D7FE               	bra	u8337
  4697  003414  2F82               	decfsz	??_ID& (0+255),f,b
  4698  003416  D7FC               	bra	u8337
  4699  003418  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4700  00341A  D7FA               	bra	u8337
  4701  00341C  F000               	nop	
  4702                           
  4703                           ;sort.c: 232: LATAbits.LATA3 = 1;
  4704  00341E  8689               	bsf	3977,3,c	;volatile
  4705                           
  4706                           ;sort.c: 235: for(int i=0;i<10000;i++)
  4707  003420  0E00               	movlw	0
  4708  003422  0100               	movlb	0	; () banked
  4709  003424  6F85               	movwf	(ID@i+1)& (0+255),b
  4710  003426  0E00               	movlw	0
  4711  003428  6F84               	movwf	ID@i& (0+255),b
  4712  00342A  0100               	movlb	0	; () banked
  4713  00342C  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4714  00342E  D008               	goto	l778
  4715  003430  0E10               	movlw	16
  4716  003432  0100               	movlb	0	; () banked
  4717  003434  5D84               	subwf	ID@i& (0+255),w,b
  4718  003436  0E27               	movlw	39
  4719  003438  0100               	movlb	0	; () banked
  4720  00343A  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4721  00343C  B0D8               	btfsc	status,0,c
  4722  00343E  D00D               	goto	l779
  4723  003440                     l778:
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;sort.c: 236: {
  4727                           ;sort.c: 237: LATCbits.LATC0 = 1;
  4728  003440  808B               	bsf	3979,0,c	;volatile
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;sort.c: 238: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4732  003442  0E1A               	movlw	26
  4733  003444                     u8347:
  4734  003444  2EE8               	decfsz	wreg,f,c
  4735  003446  D7FE               	bra	u8347
  4736  003448  D000               	nop2	
  4737                           
  4738                           ;sort.c: 239: LATCbits.LATC0 = 0;
  4739  00344A  908B               	bcf	3979,0,c	;volatile
  4740                           
  4741                           ;sort.c: 240: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4742  00344C  0EF0               	movlw	240
  4743  00344E                     u8357:
  4744  00344E  2EE8               	decfsz	wreg,f,c
  4745  003450  D7FE               	bra	u8357
  4746  003452  0100               	movlb	0	; () banked
  4747  003454  4B84               	infsnz	ID@i& (0+255),f,b
  4748  003456  2B85               	incf	(ID@i+1)& (0+255),f,b
  4749  003458  D7E8               	goto	L4
  4750  00345A                     l779:
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;sort.c: 241: }
  4754                           ;sort.c: 242: LATCbits.LATC0 = 0;
  4755  00345A  908B               	bcf	3979,0,c	;volatile
  4756                           
  4757                           ;sort.c: 244: LATAbits.LATA3 = 0;
  4758  00345C  9689               	bcf	3977,3,c	;volatile
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;sort.c: 248: f_can_coming_to_distribution = 1;
  4762  00345E  0E00               	movlw	0
  4763  003460  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  4764  003462  0E01               	movlw	1
  4765  003464  6E69               	movwf	_f_can_coming_to_distribution,c
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;sort.c: 249: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4769  003466  0E3D               	movlw	61
  4770  003468  0100               	movlb	0	; () banked
  4771  00346A  6F83               	movwf	(??_ID+1)& (0+255),b
  4772  00346C  0EE1               	movlw	225
  4773  00346E  0100               	movlb	0	; () banked
  4774  003470  6F82               	movwf	??_ID& (0+255),b
  4775  003472  0E3F               	movlw	63
  4776  003474                     u8367:
  4777  003474  2EE8               	decfsz	wreg,f,c
  4778  003476  D7FE               	bra	u8367
  4779  003478  2F82               	decfsz	??_ID& (0+255),f,b
  4780  00347A  D7FC               	bra	u8367
  4781  00347C  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4782  00347E  D7FA               	bra	u8367
  4783  003480  D000               	nop2	
  4784                           
  4785                           ;sort.c: 250: LATCbits.LATC0 = 1;
  4786  003482  808B               	bsf	3979,0,c	;volatile
  4787                           
  4788                           ;sort.c: 253: if(!f_lastCan){
  4789  003484  0100               	movlb	0	; () banked
  4790  003486  51E8               	movf	_f_lastCan& (0+255),w,b
  4791  003488  0100               	movlb	0	; () banked
  4792  00348A  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  4793  00348C  A4D8               	btfss	status,2,c
  4794  00348E  D032               	goto	l7057
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;sort.c: 254: for(int i=0; i<46; i++){
  4798  003490  0E00               	movlw	0
  4799  003492  0100               	movlb	0	; () banked
  4800  003494  6F87               	movwf	(ID@i_1119+1)& (0+255),b
  4801  003496  0E00               	movlw	0
  4802  003498  6F86               	movwf	ID@i_1119& (0+255),b
  4803                           
  4804                           ; BSR set to: 0
  4805  00349A  0100               	movlb	0	; () banked
  4806  00349C  BF87               	btfsc	(ID@i_1119+1)& (0+255),7,b
  4807  00349E  D008               	goto	l7049
  4808  0034A0  0100               	movlb	0	; () banked
  4809  0034A2  5187               	movf	(ID@i_1119+1)& (0+255),w,b
  4810  0034A4  E126               	bnz	l782
  4811  0034A6  0E2E               	movlw	46
  4812  0034A8  0100               	movlb	0	; () banked
  4813  0034AA  5D86               	subwf	ID@i_1119& (0+255),w,b
  4814  0034AC  B0D8               	btfsc	status,0,c
  4815  0034AE  D021               	goto	l782
  4816  0034B0                     l7049:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;sort.c: 255: LATAbits.LATA5 = !LATAbits.LATA5;
  4820  0034B0  BA89               	btfsc	3977,5,c	;volatile
  4821  0034B2  D004               	goto	u5770
  4822  0034B4  0100               	movlb	0	; () banked
  4823  0034B6  6B82               	clrf	??_ID& (0+255),b
  4824  0034B8  2B82               	incf	??_ID& (0+255),f,b
  4825  0034BA  D002               	goto	u5788
  4826  0034BC                     u5770:
  4827  0034BC  0100               	movlb	0	; () banked
  4828  0034BE  6B82               	clrf	??_ID& (0+255),b
  4829  0034C0                     u5788:
  4830  0034C0  0100               	movlb	0	; () banked
  4831  0034C2  3B82               	swapf	??_ID& (0+255),f,b
  4832  0034C4  4782               	rlncf	??_ID& (0+255),f,b
  4833  0034C6  5089               	movf	3977,w,c	;volatile
  4834  0034C8  0100               	movlb	0	; () banked
  4835  0034CA  1982               	xorwf	??_ID& (0+255),w,b
  4836  0034CC  0BDF               	andlw	-33
  4837  0034CE  1982               	xorwf	??_ID& (0+255),w,b
  4838  0034D0  6E89               	movwf	3977,c	;volatile
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;sort.c: 256: delay_ms(45-i);
  4842  0034D2  0100               	movlb	0	; () banked
  4843  0034D4  5186               	movf	ID@i_1119& (0+255),w,b
  4844  0034D6  0800               	sublw	0
  4845  0034D8  0F2D               	addlw	45
  4846  0034DA  ECBA  F026         	call	_delay_ms
  4847  0034DE  0100               	movlb	0	; () banked
  4848  0034E0  4B86               	infsnz	ID@i_1119& (0+255),f,b
  4849  0034E2  2B87               	incf	(ID@i_1119+1)& (0+255),f,b
  4850                           
  4851                           ; BSR set to: 0
  4852  0034E4  0100               	movlb	0	; () banked
  4853  0034E6  BF87               	btfsc	(ID@i_1119+1)& (0+255),7,b
  4854  0034E8  D7E3               	goto	l7049
  4855  0034EA  0100               	movlb	0	; () banked
  4856  0034EC  5187               	movf	(ID@i_1119+1)& (0+255),w,b
  4857  0034EE  E101               	bnz	u5790
  4858  0034F0  D7DA               	goto	L5
  4859  0034F2                     u5790:
  4860  0034F2                     l782:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;sort.c: 257: }
  4864                           ;sort.c: 258: LATAbits.LATA5 = 1;
  4865  0034F2  8A89               	bsf	3977,5,c	;volatile
  4866  0034F4                     l7057:
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;sort.c: 259: }
  4870                           ;sort.c: 261: f_can_coming_to_ID = 0;
  4871  0034F4  0E00               	movlw	0
  4872  0034F6  6E68               	movwf	_f_can_coming_to_ID+1,c
  4873  0034F8  0E00               	movlw	0
  4874  0034FA  6E67               	movwf	_f_can_coming_to_ID,c
  4875  0034FC  0012               	return	
  4876  0034FE                     __end_of_ID:
  4877                           	opt stack 0
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           postdec1	equ	0xFE5
  4887                           fsr1l	equ	0xFE1
  4888                           indf2	equ	0xFDF
  4889                           postinc2	equ	0xFDE
  4890                           postdec2	equ	0xFDD
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _delay_ms *****************
  4896 ;; Defined at:
  4897 ;;		line 454 in file "sort.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  milliseconds    1    wreg     unsigned char 
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      void 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;Total ram usage:        2 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    7
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_Loading
  4922 ;;		_ID
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text10
  4927  004D74                     __ptext10:
  4928                           	opt stack 0
  4929  004D74                     _delay_ms:
  4930                           	opt stack 21
  4931                           
  4932                           ;incstack = 0
  4933                           ;delay_ms@milliseconds stored from wreg
  4934  004D74  0100               	movlb	0	; () banked
  4935  004D76  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4936                           
  4937                           ;sort.c: 455: while(milliseconds > 0)
  4938  004D78  D00B               	goto	l6473
  4939  004D7A                     l6469:
  4940                           
  4941                           ;sort.c: 456: {
  4942                           ;sort.c: 457: milliseconds--;
  4943  004D7A  0100               	movlb	0	; () banked
  4944  004D7C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;sort.c: 458: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4948  004D7E  0E0B               	movlw	11
  4949  004D80  0100               	movlb	0	; () banked
  4950  004D82  6F80               	movwf	??_delay_ms& (0+255),b
  4951  004D84  0E47               	movlw	71
  4952  004D86                     u8377:
  4953  004D86  2EE8               	decfsz	wreg,f,c
  4954  004D88  D7FE               	bra	u8377
  4955  004D8A  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4956  004D8C  D7FC               	bra	u8377
  4957  004D8E  D000               	nop2	
  4958  004D90                     l6473:
  4959  004D90  0100               	movlb	0	; () banked
  4960  004D92  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4961  004D94  0100               	movlb	0	; () banked
  4962  004D96  B4D8               	btfsc	status,2,c
  4963  004D98  0012               	return	
  4964  004D9A  D7EF               	goto	l6469
  4965  004D9C                     __end_of_delay_ms:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function _Distribution *****************
  4985 ;; Defined at:
  4986 ;;		line 264 in file "sort.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;		None
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, status,2, status,0, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:        2 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    8
  5007 ;; This function calls:
  5008 ;;		_updateServoPosition
  5009 ;; This function is called by:
  5010 ;;		_sort
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text11
  5015  002D24                     __ptext11:
  5016                           	opt stack 0
  5017  002D24                     _Distribution:
  5018                           	opt stack 21
  5019                           
  5020                           ;sort.c: 265: if(f_can_coming_to_distribution){
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;incstack = 0
  5024  002D24  5069               	movf	_f_can_coming_to_distribution,w,c
  5025  002D26  106A               	iorwf	_f_can_coming_to_distribution+1,w,c
  5026  002D28  B4D8               	btfsc	status,2,c
  5027  002D2A  0012               	return	
  5028  002D2C  D034               	goto	l7073
  5029  002D2E                     l7063:
  5030                           
  5031                           ;sort.c: 275: updateServoPosition(500, 1);
  5032  002D2E  0E01               	movlw	1
  5033  002D30  0100               	movlb	0	; () banked
  5034  002D32  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5035  002D34  0EF4               	movlw	244
  5036  002D36  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5037  002D38  0E00               	movlw	0
  5038  002D3A  0100               	movlb	0	; () banked
  5039  002D3C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5040  002D3E  0E01               	movlw	1
  5041  002D40  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5042  002D42  ECE6  F021         	call	_updateServoPosition	;wreg free
  5043                           
  5044                           ;sort.c: 276: break;
  5045  002D46  D03E               	goto	l7075
  5046  002D48                     l7065:
  5047                           
  5048                           ;sort.c: 278: updateServoPosition(850, 1);
  5049  002D48  0E03               	movlw	3
  5050  002D4A  0100               	movlb	0	; () banked
  5051  002D4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5052  002D4E  0E52               	movlw	82
  5053  002D50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5054  002D52  0E00               	movlw	0
  5055  002D54  0100               	movlb	0	; () banked
  5056  002D56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5057  002D58  0E01               	movlw	1
  5058  002D5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5059  002D5C  ECE6  F021         	call	_updateServoPosition	;wreg free
  5060                           
  5061                           ;sort.c: 279: break;
  5062  002D60  D031               	goto	l7075
  5063  002D62                     l7067:
  5064                           
  5065                           ;sort.c: 281: updateServoPosition(1670, 1);
  5066  002D62  0E06               	movlw	6
  5067  002D64  0100               	movlb	0	; () banked
  5068  002D66  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5069  002D68  0E86               	movlw	134
  5070  002D6A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5071  002D6C  0E00               	movlw	0
  5072  002D6E  0100               	movlb	0	; () banked
  5073  002D70  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5074  002D72  0E01               	movlw	1
  5075  002D74  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5076  002D76  ECE6  F021         	call	_updateServoPosition	;wreg free
  5077                           
  5078                           ;sort.c: 282: break;
  5079  002D7A  D024               	goto	l7075
  5080  002D7C                     l7069:
  5081                           
  5082                           ;sort.c: 284: updateServoPosition(2400, 1);
  5083  002D7C  0E09               	movlw	9
  5084  002D7E  0100               	movlb	0	; () banked
  5085  002D80  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5086  002D82  0E60               	movlw	96
  5087  002D84  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5088  002D86  0E00               	movlw	0
  5089  002D88  0100               	movlb	0	; () banked
  5090  002D8A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5091  002D8C  0E01               	movlw	1
  5092  002D8E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5093  002D90  ECE6  F021         	call	_updateServoPosition	;wreg free
  5094                           
  5095                           ;sort.c: 288: }
  5096                           
  5097                           ;sort.c: 287: break;
  5098                           
  5099                           ;sort.c: 286: default:
  5100                           
  5101                           ;sort.c: 285: break;
  5102  002D94  D017               	goto	l7075
  5103  002D96                     l7073:
  5104  002D96  C0E4  F088         	movff	_cur_can,??_Distribution
  5105  002D9A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5106                           
  5107                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5108                           ; Switch size 1, requested type "space"
  5109                           ; Number of cases is 1, Range of values is 0 to 0
  5110                           ; switch strategies available:
  5111                           ; Name         Instructions Cycles
  5112                           ; simple_byte            4     3 (average)
  5113                           ;	Chosen strategy is simple_byte
  5114  002D9E  0100               	movlb	0	; () banked
  5115  002DA0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5116  002DA2  0A00               	xorlw	0	; case 0
  5117  002DA4  A4D8               	btfss	status,2,c
  5118  002DA6  D00E               	goto	l7075
  5119                           
  5120                           ; BSR set to: 0
  5121                           ; Switch size 1, requested type "space"
  5122                           ; Number of cases is 4, Range of values is 0 to 3
  5123                           ; switch strategies available:
  5124                           ; Name         Instructions Cycles
  5125                           ; simple_byte           13     7 (average)
  5126                           ;	Chosen strategy is simple_byte
  5127  002DA8  0100               	movlb	0	; () banked
  5128  002DAA  5188               	movf	??_Distribution& (0+255),w,b
  5129  002DAC  0A00               	xorlw	0	; case 0
  5130  002DAE  B4D8               	btfsc	status,2,c
  5131  002DB0  D7BE               	goto	l7063
  5132  002DB2  0A01               	xorlw	1	; case 1
  5133  002DB4  B4D8               	btfsc	status,2,c
  5134  002DB6  D7C8               	goto	l7065
  5135  002DB8  0A03               	xorlw	3	; case 2
  5136  002DBA  B4D8               	btfsc	status,2,c
  5137  002DBC  D7D2               	goto	l7067
  5138  002DBE  0A01               	xorlw	1	; case 3
  5139  002DC0  B4D8               	btfsc	status,2,c
  5140  002DC2  D7DC               	goto	l7069
  5141  002DC4                     l7075:
  5142                           
  5143                           ;sort.c: 289: updateServoPosition(1050, 3);
  5144  002DC4  0E04               	movlw	4
  5145  002DC6  0100               	movlb	0	; () banked
  5146  002DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5147  002DCA  0E1A               	movlw	26
  5148  002DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5149  002DCE  0E00               	movlw	0
  5150  002DD0  0100               	movlb	0	; () banked
  5151  002DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5152  002DD4  0E03               	movlw	3
  5153  002DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5154  002DD8  ECE6  F021         	call	_updateServoPosition	;wreg free
  5155                           
  5156                           ;sort.c: 290: _delay((unsigned long)((750)*(32000000/4000.0)));
  5157  002DDC  0E1F               	movlw	31
  5158  002DDE  0100               	movlb	0	; () banked
  5159  002DE0  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5160  002DE2  0E71               	movlw	113
  5161  002DE4  0100               	movlb	0	; () banked
  5162  002DE6  6F88               	movwf	??_Distribution& (0+255),b
  5163  002DE8  0E1E               	movlw	30
  5164  002DEA                     u8387:
  5165  002DEA  2EE8               	decfsz	wreg,f,c
  5166  002DEC  D7FE               	bra	u8387
  5167  002DEE  2F88               	decfsz	??_Distribution& (0+255),f,b
  5168  002DF0  D7FC               	bra	u8387
  5169  002DF2  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5170  002DF4  D7FA               	bra	u8387
  5171  002DF6  F000               	nop	
  5172                           
  5173                           ;sort.c: 298: switch(cur_can){
  5174  002DF8  D034               	goto	l7089
  5175  002DFA                     l7079:
  5176                           
  5177                           ;sort.c: 300: updateServoPosition(1260, 3);
  5178  002DFA  0E04               	movlw	4
  5179  002DFC  0100               	movlb	0	; () banked
  5180  002DFE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5181  002E00  0EEC               	movlw	236
  5182  002E02  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5183  002E04  0E00               	movlw	0
  5184  002E06  0100               	movlb	0	; () banked
  5185  002E08  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5186  002E0A  0E03               	movlw	3
  5187  002E0C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5188  002E0E  ECE6  F021         	call	_updateServoPosition	;wreg free
  5189                           
  5190                           ;sort.c: 301: break;
  5191  002E12  D03E               	goto	l7091
  5192  002E14                     l7081:
  5193                           
  5194                           ;sort.c: 303: updateServoPosition(1260, 3);
  5195  002E14  0E04               	movlw	4
  5196  002E16  0100               	movlb	0	; () banked
  5197  002E18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5198  002E1A  0EEC               	movlw	236
  5199  002E1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5200  002E1E  0E00               	movlw	0
  5201  002E20  0100               	movlb	0	; () banked
  5202  002E22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5203  002E24  0E03               	movlw	3
  5204  002E26  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5205  002E28  ECE6  F021         	call	_updateServoPosition	;wreg free
  5206                           
  5207                           ;sort.c: 304: break;
  5208  002E2C  D031               	goto	l7091
  5209  002E2E                     l7083:
  5210                           
  5211                           ;sort.c: 306: updateServoPosition(1420, 3);
  5212  002E2E  0E05               	movlw	5
  5213  002E30  0100               	movlb	0	; () banked
  5214  002E32  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5215  002E34  0E8C               	movlw	140
  5216  002E36  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5217  002E38  0E00               	movlw	0
  5218  002E3A  0100               	movlb	0	; () banked
  5219  002E3C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5220  002E3E  0E03               	movlw	3
  5221  002E40  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5222  002E42  ECE6  F021         	call	_updateServoPosition	;wreg free
  5223                           
  5224                           ;sort.c: 307: break;
  5225  002E46  D024               	goto	l7091
  5226  002E48                     l7085:
  5227                           
  5228                           ;sort.c: 309: updateServoPosition(1420, 3);
  5229  002E48  0E05               	movlw	5
  5230  002E4A  0100               	movlb	0	; () banked
  5231  002E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5232  002E4E  0E8C               	movlw	140
  5233  002E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5234  002E52  0E00               	movlw	0
  5235  002E54  0100               	movlb	0	; () banked
  5236  002E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5237  002E58  0E03               	movlw	3
  5238  002E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5239  002E5C  ECE6  F021         	call	_updateServoPosition	;wreg free
  5240                           
  5241                           ;sort.c: 313: }
  5242                           
  5243                           ;sort.c: 312: break;
  5244                           
  5245                           ;sort.c: 311: default:
  5246                           
  5247                           ;sort.c: 310: break;
  5248  002E60  D017               	goto	l7091
  5249  002E62                     l7089:
  5250  002E62  C0E4  F088         	movff	_cur_can,??_Distribution
  5251  002E66  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  5252                           
  5253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5254                           ; Switch size 1, requested type "space"
  5255                           ; Number of cases is 1, Range of values is 0 to 0
  5256                           ; switch strategies available:
  5257                           ; Name         Instructions Cycles
  5258                           ; simple_byte            4     3 (average)
  5259                           ;	Chosen strategy is simple_byte
  5260  002E6A  0100               	movlb	0	; () banked
  5261  002E6C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  5262  002E6E  0A00               	xorlw	0	; case 0
  5263  002E70  A4D8               	btfss	status,2,c
  5264  002E72  D00E               	goto	l7091
  5265                           
  5266                           ; BSR set to: 0
  5267                           ; Switch size 1, requested type "space"
  5268                           ; Number of cases is 4, Range of values is 0 to 3
  5269                           ; switch strategies available:
  5270                           ; Name         Instructions Cycles
  5271                           ; simple_byte           13     7 (average)
  5272                           ;	Chosen strategy is simple_byte
  5273  002E74  0100               	movlb	0	; () banked
  5274  002E76  5188               	movf	??_Distribution& (0+255),w,b
  5275  002E78  0A00               	xorlw	0	; case 0
  5276  002E7A  B4D8               	btfsc	status,2,c
  5277  002E7C  D7BE               	goto	l7079
  5278  002E7E  0A01               	xorlw	1	; case 1
  5279  002E80  B4D8               	btfsc	status,2,c
  5280  002E82  D7C8               	goto	l7081
  5281  002E84  0A03               	xorlw	3	; case 2
  5282  002E86  B4D8               	btfsc	status,2,c
  5283  002E88  D7D2               	goto	l7083
  5284  002E8A  0A01               	xorlw	1	; case 3
  5285  002E8C  B4D8               	btfsc	status,2,c
  5286  002E8E  D7DC               	goto	l7085
  5287  002E90                     l7091:
  5288                           
  5289                           ;sort.c: 314: _delay((unsigned long)((2500)*(32000000/4000.0)));
  5290  002E90  0E66               	movlw	102
  5291  002E92  0100               	movlb	0	; () banked
  5292  002E94  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5293  002E96  0E76               	movlw	118
  5294  002E98  0100               	movlb	0	; () banked
  5295  002E9A  6F88               	movwf	??_Distribution& (0+255),b
  5296  002E9C  0EC1               	movlw	193
  5297  002E9E                     u8397:
  5298  002E9E  2EE8               	decfsz	wreg,f,c
  5299  002EA0  D7FE               	bra	u8397
  5300  002EA2  2F88               	decfsz	??_Distribution& (0+255),f,b
  5301  002EA4  D7FC               	bra	u8397
  5302  002EA6  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5303  002EA8  D7FA               	bra	u8397
  5304                           
  5305                           ;sort.c: 317: updateServoPosition(1050, 3);
  5306  002EAA  0E04               	movlw	4
  5307  002EAC  0100               	movlb	0	; () banked
  5308  002EAE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5309  002EB0  0E1A               	movlw	26
  5310  002EB2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5311  002EB4  0E00               	movlw	0
  5312  002EB6  0100               	movlb	0	; () banked
  5313  002EB8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5314  002EBA  0E03               	movlw	3
  5315  002EBC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5316  002EBE  ECE6  F021         	call	_updateServoPosition	;wreg free
  5317                           
  5318                           ;sort.c: 318: _delay((unsigned long)((750)*(32000000/4000.0)));
  5319  002EC2  0E1F               	movlw	31
  5320  002EC4  0100               	movlb	0	; () banked
  5321  002EC6  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5322  002EC8  0E71               	movlw	113
  5323  002ECA  0100               	movlb	0	; () banked
  5324  002ECC  6F88               	movwf	??_Distribution& (0+255),b
  5325  002ECE  0E1E               	movlw	30
  5326  002ED0                     u8407:
  5327  002ED0  2EE8               	decfsz	wreg,f,c
  5328  002ED2  D7FE               	bra	u8407
  5329  002ED4  2F88               	decfsz	??_Distribution& (0+255),f,b
  5330  002ED6  D7FC               	bra	u8407
  5331  002ED8  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5332  002EDA  D7FA               	bra	u8407
  5333  002EDC  F000               	nop	
  5334                           
  5335                           ;sort.c: 319: updateServoPosition(1200, 1);
  5336  002EDE  0E04               	movlw	4
  5337  002EE0  0100               	movlb	0	; () banked
  5338  002EE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5339  002EE4  0EB0               	movlw	176
  5340  002EE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5341  002EE8  0E00               	movlw	0
  5342  002EEA  0100               	movlb	0	; () banked
  5343  002EEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5344  002EEE  0E01               	movlw	1
  5345  002EF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5346  002EF2  ECE6  F021         	call	_updateServoPosition	;wreg free
  5347                           
  5348                           ;sort.c: 320: updateServoPosition(1050, 3);
  5349  002EF6  0E04               	movlw	4
  5350  002EF8  0100               	movlb	0	; () banked
  5351  002EFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5352  002EFC  0E1A               	movlw	26
  5353  002EFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5354  002F00  0E00               	movlw	0
  5355  002F02  0100               	movlb	0	; () banked
  5356  002F04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5357  002F06  0E03               	movlw	3
  5358  002F08  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5359  002F0A  ECE6  F021         	call	_updateServoPosition	;wreg free
  5360                           
  5361                           ;sort.c: 322: f_can_coming_to_distribution = 0;
  5362  002F0E  0E00               	movlw	0
  5363  002F10  6E6A               	movwf	_f_can_coming_to_distribution+1,c
  5364  002F12  0E00               	movlw	0
  5365  002F14  6E69               	movwf	_f_can_coming_to_distribution,c
  5366                           
  5367                           ;sort.c: 323: f_can_distributed = 1;
  5368  002F16  0E00               	movlw	0
  5369  002F18  0101               	movlb	1	; () banked
  5370  002F1A  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5371  002F1C  0E01               	movlw	1
  5372  002F1E  6F2F               	movwf	_f_can_distributed& (0+255),b
  5373                           
  5374                           ; BSR set to: 1
  5375                           ;sort.c: 324: f_most_recent_sort_time = 1;
  5376  002F20  0E00               	movlw	0
  5377  002F22  6E6C               	movwf	_f_most_recent_sort_time+1,c
  5378  002F24  0E01               	movlw	1
  5379  002F26  6E6B               	movwf	_f_most_recent_sort_time,c
  5380                           
  5381                           ; BSR set to: 1
  5382                           ;sort.c: 325: if(f_lastCan == 1){
  5383  002F28  0100               	movlb	0	; () banked
  5384  002F2A  05E8               	decf	_f_lastCan& (0+255),w,b
  5385  002F2C  0100               	movlb	0	; () banked
  5386  002F2E  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5387  002F30  A4D8               	btfss	status,2,c
  5388  002F32  0012               	return	
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;sort.c: 326: machine_state = DoneSorting_state;
  5392  002F34  0E02               	movlw	2
  5393  002F36  0100               	movlb	0	; () banked
  5394  002F38  6FFC               	movwf	_machine_state& (0+255),b
  5395                           
  5396                           ; BSR set to: 0
  5397  002F3A  0012               	return	
  5398  002F3C                     __end_of_Distribution:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           postinc0	equ	0xFEE
  5407                           wreg	equ	0xFE8
  5408                           postdec1	equ	0xFE5
  5409                           fsr1l	equ	0xFE1
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           fsr2h	equ	0xFDA
  5414                           fsr2l	equ	0xFD9
  5415                           status	equ	0xFD8
  5416                           
  5417 ;; *************** function _machineConfig *****************
  5418 ;; Defined at:
  5419 ;;		line 15 in file "MachineConfig.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    7
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_main
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text12
  5448  004650                     __ptext12:
  5449                           	opt stack 0
  5450  004650                     _machineConfig:
  5451                           	opt stack 23
  5452                           
  5453                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5454                           
  5455                           ;incstack = 0
  5456  004650  0EF0               	movlw	240
  5457  004652  6ED3               	movwf	4051,c	;volatile
  5458                           
  5459                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5460  004654  8C9B               	bsf	3995,6,c	;volatile
  5461                           
  5462                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5463  004656  0E07               	movlw	7
  5464  004658  6E92               	movwf	3986,c	;volatile
  5465                           
  5466                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5467  00465A  0EF2               	movlw	242
  5468  00465C  6E93               	movwf	3987,c	;volatile
  5469                           
  5470                           ;MachineConfig.c: 27: TRISC = 0x00;
  5471  00465E  0E00               	movlw	0
  5472  004660  6E94               	movwf	3988,c	;volatile
  5473                           
  5474                           ;MachineConfig.c: 31: TRISD = 0x00;
  5475  004662  0E00               	movlw	0
  5476  004664  6E95               	movwf	3989,c	;volatile
  5477                           
  5478                           ;MachineConfig.c: 34: TRISE = 0x00;
  5479  004666  0E00               	movlw	0
  5480  004668  6E96               	movwf	3990,c	;volatile
  5481                           
  5482                           ;MachineConfig.c: 37: LATA = 0x00;
  5483  00466A  0E00               	movlw	0
  5484  00466C  6E89               	movwf	3977,c	;volatile
  5485                           
  5486                           ;MachineConfig.c: 38: LATB = 0x00;
  5487  00466E  0E00               	movlw	0
  5488  004670  6E8A               	movwf	3978,c	;volatile
  5489                           
  5490                           ;MachineConfig.c: 39: LATC = 0x00;
  5491  004672  0E00               	movlw	0
  5492  004674  6E8B               	movwf	3979,c	;volatile
  5493                           
  5494                           ;MachineConfig.c: 40: LATD = 0x00;
  5495  004676  0E00               	movlw	0
  5496  004678  6E8C               	movwf	3980,c	;volatile
  5497                           
  5498                           ;MachineConfig.c: 41: LATE = 0x00;
  5499  00467A  0E00               	movlw	0
  5500  00467C  6E8D               	movwf	3981,c	;volatile
  5501                           
  5502                           ;MachineConfig.c: 43: nRBPU = 0;
  5503  00467E  9EF1               	bcf	intcon2,7,c	;volatile
  5504                           
  5505                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5506  004680  0E00               	movlw	0
  5507  004682  6EC2               	movwf	4034,c	;volatile
  5508                           
  5509                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5510  004684  0E0D               	movlw	13
  5511  004686  6EC1               	movwf	4033,c	;volatile
  5512                           
  5513                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5514  004688  0E00               	movlw	0
  5515  00468A  6EB5               	movwf	4021,c	;volatile
  5516                           
  5517                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5518  00468C  96B4               	bcf	4020,3,c	;volatile
  5519                           
  5520                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5521  00468E  0EB1               	movlw	177
  5522  004690  6EC0               	movwf	4032,c	;volatile
  5523                           
  5524                           ;MachineConfig.c: 55: INT1IE = 1;
  5525  004692  86F0               	bsf	intcon3,3,c	;volatile
  5526                           
  5527                           ;MachineConfig.c: 57: TMR0IE = 1;
  5528  004694  8AF2               	bsf	intcon,5,c	;volatile
  5529                           
  5530                           ;MachineConfig.c: 58: TMR1IE = 1;
  5531  004696  809D               	bsf	3997,0,c	;volatile
  5532                           
  5533                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5534  004698  0EB0               	movlw	176
  5535  00469A  6ECD               	movwf	4045,c	;volatile
  5536                           
  5537                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5538  00469C  0EB0               	movlw	176
  5539  00469E  6EB1               	movwf	4017,c	;volatile
  5540                           
  5541                           ;MachineConfig.c: 61: TMR2IE = 1;
  5542  0046A0  829D               	bsf	3997,1,c	;volatile
  5543                           
  5544                           ;MachineConfig.c: 62: TMR3IE = 1;
  5545  0046A2  82A0               	bsf	4000,1,c	;volatile
  5546                           
  5547                           ;MachineConfig.c: 63: PEIE = 1;
  5548  0046A4  8CF2               	bsf	intcon,6,c	;volatile
  5549                           
  5550                           ;MachineConfig.c: 64: ADIE = 0;
  5551  0046A6  9C9D               	bcf	3997,6,c	;volatile
  5552                           
  5553                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5554  0046A8  9EF2               	bcf	intcon,7,c	;volatile
  5555  0046AA  0012               	return		;funcret
  5556  0046AC                     __end_of_machineConfig:
  5557                           	opt stack 0
  5558                           tblptru	equ	0xFF8
  5559                           tblptrh	equ	0xFF7
  5560                           tblptrl	equ	0xFF6
  5561                           tablat	equ	0xFF5
  5562                           prodh	equ	0xFF4
  5563                           prodl	equ	0xFF3
  5564                           intcon	equ	0xFF2
  5565                           intcon2	equ	0xFF1
  5566                           intcon3	equ	0xFF0
  5567                           postinc0	equ	0xFEE
  5568                           wreg	equ	0xFE8
  5569                           postdec1	equ	0xFE5
  5570                           fsr1l	equ	0xFE1
  5571                           indf2	equ	0xFDF
  5572                           postinc2	equ	0xFDE
  5573                           postdec2	equ	0xFDD
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function _logRun *****************
  5579 ;; Defined at:
  5580 ;;		line 84 in file "EEPROM.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;		None
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5585 ;;  i               2   55[BANK0 ] int 
  5586 ;;  num             1   49[BANK0 ] unsigned char 
  5587 ;;  addr            2   57[BANK0 ] unsigned short 
  5588 ;;  byte11          1   54[BANK0 ] unsigned char 
  5589 ;;  byte3           1   52[BANK0 ] unsigned char 
  5590 ;;  byte2           1   51[BANK0 ] unsigned char 
  5591 ;;  byte1           1   50[BANK0 ] unsigned char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;Total ram usage:       10 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:   11
  5608 ;; This function calls:
  5609 ;;		_EEPROM_read
  5610 ;;		_EEPROM_write
  5611 ;; This function is called by:
  5612 ;;		_main
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text13
  5617  003806                     __ptext13:
  5618                           	opt stack 0
  5619  003806                     _logRun:
  5620                           	opt stack 19
  5621                           
  5622                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5623                           
  5624                           ;incstack = 0
  5625  003806  0E00               	movlw	0
  5626  003808  0100               	movlb	0	; () banked
  5627  00380A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5628  00380C  0E00               	movlw	0
  5629  00380E  6F80               	movwf	EEPROM_read@address& (0+255),b
  5630  003810  EC58  F027         	call	_EEPROM_read	;wreg free
  5631  003814  0100               	movlb	0	; () banked
  5632  003816  6FFD               	movwf	_sel& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5636  003818  0100               	movlb	0	; () banked
  5637  00381A  51FD               	movf	_sel& (0+255),w,b
  5638  00381C  0D0B               	mullw	11
  5639  00381E  0E01               	movlw	1
  5640  003820  24F3               	addwf	prodl,w,c
  5641  003822  0100               	movlb	0	; () banked
  5642  003824  6FB9               	movwf	logRun@addr& (0+255),b
  5643  003826  0E00               	movlw	0
  5644  003828  20F4               	addwfc	prodh,w,c
  5645  00382A  0100               	movlb	0	; () banked
  5646  00382C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;EEPROM.c: 101: if (sel < 3){
  5650  00382E  0E03               	movlw	3
  5651  003830  0100               	movlb	0	; () banked
  5652  003832  61FD               	cpfslt	_sel& (0+255),b
  5653  003834  D00E               	goto	l8629
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5657  003836  0100               	movlb	0	; () banked
  5658  003838  29FD               	incf	_sel& (0+255),w,b
  5659  00383A  0100               	movlb	0	; () banked
  5660  00383C  6FB1               	movwf	logRun@num& (0+255),b
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5664  00383E  0E00               	movlw	0
  5665  003840  0100               	movlb	0	; () banked
  5666  003842  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5667  003844  0E00               	movlw	0
  5668  003846  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5669  003848  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5670  00384C  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5671                           
  5672                           ;EEPROM.c: 104: }
  5673  003850  D00A               	goto	l8631
  5674  003852                     l8629:
  5675                           
  5676                           ;EEPROM.c: 105: else{
  5677                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5678  003852  0E00               	movlw	0
  5679  003854  0100               	movlb	0	; () banked
  5680  003856  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5681  003858  0E00               	movlw	0
  5682  00385A  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5683  00385C  0E00               	movlw	0
  5684  00385E  0100               	movlb	0	; () banked
  5685  003860  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5686  003862  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5687  003866                     l8631:
  5688                           
  5689                           ;EEPROM.c: 107: }
  5690                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5691  003866  0100               	movlb	0	; () banked
  5692  003868  51FE               	movf	_count_total& (0+255),w,b
  5693  00386A  0980               	iorlw	128
  5694  00386C  0100               	movlb	0	; () banked
  5695  00386E  6FB2               	movwf	logRun@byte1& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5699  003870  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5700  003874  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5701  003878  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5702  00387C  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5703                           
  5704                           ;EEPROM.c: 112: addr++;
  5705  003880  0100               	movlb	0	; () banked
  5706  003882  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5707  003884  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5711  003886  385B               	swapf	_count_pop_no_tab,w,c
  5712  003888  0BF0               	andlw	240
  5713  00388A  105D               	iorwf	_count_pop_w_tab,w,c
  5714  00388C  0100               	movlb	0	; () banked
  5715  00388E  6FB3               	movwf	logRun@byte2& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5719  003890  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5720  003894  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5721  003898  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5722  00389C  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5723                           
  5724                           ;EEPROM.c: 117: addr++;
  5725  0038A0  0100               	movlb	0	; () banked
  5726  0038A2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5727  0038A4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5731  0038A6  0101               	movlb	1	; () banked
  5732  0038A8  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5733  0038AA  0BF0               	andlw	240
  5734  0038AC  0101               	movlb	1	; () banked
  5735  0038AE  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5736  0038B0  0100               	movlb	0	; () banked
  5737  0038B2  6FB4               	movwf	logRun@byte3& (0+255),b
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5741  0038B4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5742  0038B8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5743  0038BC  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5744  0038C0  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5745                           
  5746                           ;EEPROM.c: 120: addr++;
  5747  0038C4  0100               	movlb	0	; () banked
  5748  0038C6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5749  0038C8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5753  0038CA  0E00               	movlw	0
  5754  0038CC  0100               	movlb	0	; () banked
  5755  0038CE  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5756  0038D0  0E00               	movlw	0
  5757  0038D2  6FB7               	movwf	logRun@i& (0+255),b
  5758                           
  5759                           ; BSR set to: 0
  5760  0038D4  0100               	movlb	0	; () banked
  5761  0038D6  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5762  0038D8  D008               	goto	l8655
  5763  0038DA  0100               	movlb	0	; () banked
  5764  0038DC  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5765  0038DE  E128               	bnz	l997
  5766  0038E0  0E07               	movlw	7
  5767  0038E2  0100               	movlb	0	; () banked
  5768  0038E4  5DB7               	subwf	logRun@i& (0+255),w,b
  5769  0038E6  B0D8               	btfsc	status,0,c
  5770  0038E8  D023               	goto	l997
  5771  0038EA                     l8655:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5775  0038EA  90D8               	bcf	status,0,c
  5776  0038EC  0100               	movlb	0	; () banked
  5777  0038EE  35B7               	rlcf	logRun@i& (0+255),w,b
  5778  0038F0  6ED9               	movwf	fsr2l,c
  5779  0038F2  0100               	movlb	0	; () banked
  5780  0038F4  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5781  0038F6  6EDA               	movwf	fsr2h,c
  5782  0038F8  0E0E               	movlw	low _startTime
  5783  0038FA  26D9               	addwf	fsr2l,f,c
  5784  0038FC  0E01               	movlw	high _startTime
  5785  0038FE  22DA               	addwfc	fsr2h,f,c
  5786  003900  50DF               	movf	indf2,w,c
  5787  003902  0100               	movlb	0	; () banked
  5788  003904  6FB5               	movwf	logRun@byte_i& (0+255),b
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5792  003906  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5793  00390A  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5794  00390E  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5795  003912  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5796                           
  5797                           ;EEPROM.c: 126: addr++;
  5798  003916  0100               	movlb	0	; () banked
  5799  003918  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5800  00391A  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5801                           
  5802                           ; BSR set to: 0
  5803  00391C  0100               	movlb	0	; () banked
  5804  00391E  4BB7               	infsnz	logRun@i& (0+255),f,b
  5805  003920  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5806                           
  5807                           ; BSR set to: 0
  5808  003922  0100               	movlb	0	; () banked
  5809  003924  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5810  003926  D7E1               	goto	l8655
  5811  003928  0100               	movlb	0	; () banked
  5812  00392A  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5813  00392C  E101               	bnz	u7890
  5814  00392E  D7D8               	goto	L6
  5815  003930                     u7890:
  5816  003930                     l997:
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;EEPROM.c: 127: }
  5820                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5821  003930  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5825  003934  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5826  003938  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5827  00393C  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5828  003940  ECBD  F01D         	call	_EEPROM_write	;wreg free
  5829  003944  0012               	return		;funcret
  5830  003946                     __end_of_logRun:
  5831                           	opt stack 0
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           intcon2	equ	0xFF1
  5840                           intcon3	equ	0xFF0
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _EEPROM_write *****************
  5853 ;; Defined at:
  5854 ;;		line 32 in file "EEPROM.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  address         2   43[BANK0 ] unsigned short 
  5857 ;;  data            1   45[BANK0 ] unsigned char 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  i               1   48[BANK0 ] unsigned char 
  5860 ;;  i               1   47[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5870 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;Total ram usage:        6 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:   10
  5877 ;; This function calls:
  5878 ;;		_EEPROM_read
  5879 ;;		_lcdInst
  5880 ;;		_printf
  5881 ;; This function is called by:
  5882 ;;		_Loading
  5883 ;;		_logRun
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text14
  5888  003B7A                     __ptext14:
  5889                           	opt stack 0
  5890  003B7A                     _EEPROM_write:
  5891                           	opt stack 18
  5892                           
  5893                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5894                           
  5895                           ;incstack = 0
  5896  003B7A  84A6               	bsf	4006,2,c	;volatile
  5897                           
  5898                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5899  003B7C  0100               	movlb	0	; () banked
  5900  003B7E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5901  003B80  6EAA               	movwf	4010,c	;volatile
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5905  003B82  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;EEPROM.c: 39: EEDATA = data;
  5909  003B86  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5913  003B8A  9EA6               	bcf	4006,7,c	;volatile
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5917  003B8C  9CA6               	bcf	4006,6,c	;volatile
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5921  003B8E  9EF2               	bcf	intcon,7,c	;volatile
  5922                           
  5923                           ;EEPROM.c: 45: EECON2 = 0x55;
  5924  003B90  0E55               	movlw	85
  5925  003B92  6EA7               	movwf	4007,c	;volatile
  5926                           
  5927                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5928  003B94  0EAA               	movlw	170
  5929  003B96  6EA7               	movwf	4007,c	;volatile
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5933  003B98  82A6               	bsf	4006,1,c	;volatile
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5937  003B9A  8EF2               	bsf	intcon,7,c	;volatile
  5938  003B9C                     l975:
  5939  003B9C  A8A1               	btfss	4001,4,c	;volatile
  5940  003B9E  D7FE               	goto	l975
  5941                           
  5942                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5943  003BA0  98A1               	bcf	4001,4,c	;volatile
  5944                           
  5945                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5946  003BA2  94A6               	bcf	4006,2,c	;volatile
  5947                           
  5948                           ;EEPROM.c: 57: if(debug){
  5949  003BA4  505F               	movf	_debug,w,c
  5950  003BA6  1060               	iorwf	_debug+1,w,c
  5951  003BA8  B4D8               	btfsc	status,2,c
  5952  003BAA  0012               	return	
  5953                           
  5954                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5955  003BAC  0E01               	movlw	1
  5956  003BAE  EC8A  F027         	call	_lcdInst
  5957  003BB2  0E68               	movlw	104
  5958  003BB4  0100               	movlb	0	; () banked
  5959  003BB6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5960  003BB8  0EE4               	movlw	228
  5961  003BBA                     u8417:
  5962  003BBA  2EE8               	decfsz	wreg,f,c
  5963  003BBC  D7FE               	bra	u8417
  5964  003BBE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5965  003BC0  D7FC               	bra	u8417
  5966  003BC2  F000               	nop	
  5967                           
  5968                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5969  003BC4  0E80               	movlw	128
  5970  003BC6  EC8A  F027         	call	_lcdInst
  5971                           
  5972                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5973  003BCA  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5974  003BCE  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5975  003BD2  EC58  F027         	call	_EEPROM_read	;wreg free
  5976  003BD6  0100               	movlb	0	; () banked
  5977  003BD8  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5978  003BDA  A4D8               	btfss	status,2,c
  5979  003BDC  D024               	goto	l6455
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5983  003BDE  0E22               	movlw	low STR_66
  5984  003BE0  0100               	movlb	0	; () banked
  5985  003BE2  6F8E               	movwf	printf@f& (0+255),b
  5986  003BE4  0EFB               	movlw	high STR_66
  5987  003BE6  0100               	movlb	0	; () banked
  5988  003BE8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5989  003BEA  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5990  003BEE  0100               	movlb	0	; () banked
  5991  003BF0  6B91               	clrf	(?_printf+3)& (0+255),b
  5992  003BF2  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5993  003BF6  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5994  003BFA  ECB8  F008         	call	_printf	;wreg free
  5995                           
  5996                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5997  003BFE  0E00               	movlw	0
  5998  003C00  0100               	movlb	0	; () banked
  5999  003C02  6FAF               	movwf	EEPROM_write@i& (0+255),b
  6000  003C04                     l6447:
  6001                           
  6002                           ; BSR set to: 0
  6003  003C04  0E63               	movlw	99
  6004  003C06  0100               	movlb	0	; () banked
  6005  003C08  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  6006  003C0A  D001               	goto	l6451
  6007  003C0C  0012               	return	
  6008  003C0E                     l6451:
  6009                           
  6010                           ; BSR set to: 0
  6011  003C0E  0E68               	movlw	104
  6012  003C10  0100               	movlb	0	; () banked
  6013  003C12  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6014  003C14  0EE4               	movlw	228
  6015  003C16                     u8427:
  6016  003C16  2EE8               	decfsz	wreg,f,c
  6017  003C18  D7FE               	bra	u8427
  6018  003C1A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6019  003C1C  D7FC               	bra	u8427
  6020  003C1E  F000               	nop	
  6021  003C20  0100               	movlb	0	; () banked
  6022  003C22  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  6023  003C24  D7EF               	goto	l6447
  6024  003C26                     l6455:
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  6028  003C26  0EBD               	movlw	low STR_67
  6029  003C28  0100               	movlb	0	; () banked
  6030  003C2A  6F8E               	movwf	printf@f& (0+255),b
  6031  003C2C  0EFF               	movlw	high STR_67
  6032  003C2E  0100               	movlb	0	; () banked
  6033  003C30  6F8F               	movwf	(printf@f+1)& (0+255),b
  6034  003C32  ECB8  F008         	call	_printf	;wreg free
  6035  003C36  0E00               	movlw	0
  6036  003C38  0100               	movlb	0	; () banked
  6037  003C3A  6FB0               	movwf	EEPROM_write@i_1338& (0+255),b
  6038  003C3C                     l6459:
  6039                           
  6040                           ; BSR set to: 0
  6041  003C3C  0E63               	movlw	99
  6042  003C3E  0100               	movlb	0	; () banked
  6043  003C40  65B0               	cpfsgt	EEPROM_write@i_1338& (0+255),b
  6044  003C42  D001               	goto	l6463
  6045  003C44  0012               	return	
  6046  003C46                     l6463:
  6047                           
  6048                           ; BSR set to: 0
  6049  003C46  0E68               	movlw	104
  6050  003C48  0100               	movlb	0	; () banked
  6051  003C4A  6FAE               	movwf	??_EEPROM_write& (0+255),b
  6052  003C4C  0EE4               	movlw	228
  6053  003C4E                     u8437:
  6054  003C4E  2EE8               	decfsz	wreg,f,c
  6055  003C50  D7FE               	bra	u8437
  6056  003C52  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  6057  003C54  D7FC               	bra	u8437
  6058  003C56  F000               	nop	
  6059  003C58  0100               	movlb	0	; () banked
  6060  003C5A  2BB0               	incf	EEPROM_write@i_1338& (0+255),f,b
  6061  003C5C  D7EF               	goto	l6459
  6062  003C5E                     __end_of_EEPROM_write:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           intcon3	equ	0xFF0
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           postdec1	equ	0xFE5
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function _EEPROM_read *****************
  6085 ;; Defined at:
  6086 ;;		line 68 in file "EEPROM.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  address         2    0[BANK0 ] unsigned short 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      unsigned char 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;Total ram usage:        2 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    7
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_Loading
  6111 ;;		_EEPROM_write
  6112 ;;		_logRun
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text15
  6117  004EB0                     __ptext15:
  6118                           	opt stack 0
  6119  004EB0                     _EEPROM_read:
  6120                           	opt stack 20
  6121                           
  6122                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  6123                           
  6124                           ;incstack = 0
  6125  004EB0  0100               	movlb	0	; () banked
  6126  004EB2  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  6127  004EB4  6EAA               	movwf	4010,c	;volatile
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  6131  004EB6  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  6135  004EBA  9EA6               	bcf	4006,7,c	;volatile
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  6139  004EBC  9CA6               	bcf	4006,6,c	;volatile
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  6143  004EBE  80A6               	bsf	4006,0,c	;volatile
  6144  004EC0                     l988:
  6145  004EC0  B0A6               	btfsc	4006,0,c	;volatile
  6146  004EC2  D7FE               	goto	l988
  6147                           
  6148                           ;EEPROM.c: 81: return EEDATA;
  6149  004EC4  50A8               	movf	4008,w,c	;volatile
  6150  004EC6  0012               	return	
  6151  004EC8                     __end_of_EEPROM_read:
  6152                           	opt stack 0
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           intcon2	equ	0xFF1
  6161                           intcon3	equ	0xFF0
  6162                           postinc0	equ	0xFEE
  6163                           wreg	equ	0xFE8
  6164                           postdec1	equ	0xFE5
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function _initUI *****************
  6174 ;; Defined at:
  6175 ;;		line 62 in file "UI.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;Total ram usage:        0 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:   12
  6196 ;; This function calls:
  6197 ;;		_change_state_to_menu_start
  6198 ;;		_loadRTC
  6199 ;; This function is called by:
  6200 ;;		_main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text16
  6205  004C68                     __ptext16:
  6206                           	opt stack 0
  6207  004C68                     _initUI:
  6208                           	opt stack 18
  6209                           
  6210                           ;UI.c: 63: (INTCONbits.GIE = 1);
  6211                           
  6212                           ;incstack = 0
  6213  004C68  8EF2               	bsf	intcon,7,c	;volatile
  6214                           
  6215                           ;UI.c: 64: machine_state = UI_state;
  6216  004C6A  0E00               	movlw	0
  6217  004C6C  0100               	movlb	0	; () banked
  6218  004C6E  6FFC               	movwf	_machine_state& (0+255),b
  6219                           
  6220                           ;UI.c: 65: logstate = 0;
  6221  004C70  0E00               	movlw	0
  6222  004C72  0100               	movlb	0	; () banked
  6223  004C74  6FF7               	movwf	(_logstate+1)& (0+255),b
  6224  004C76  0E00               	movlw	0
  6225  004C78  6FF6               	movwf	_logstate& (0+255),b
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;UI.c: 67: if(RTCflag){
  6229  004C7A  0100               	movlb	0	; () banked
  6230  004C7C  51E2               	movf	_RTCflag& (0+255),w,b
  6231  004C7E  0100               	movlb	0	; () banked
  6232  004C80  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  6233  004C82  A4D8               	btfss	status,2,c
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;UI.c: 68: loadRTC();
  6237  004C84  EC5D  F020         	call	_loadRTC	;wreg free
  6238                           
  6239                           ;UI.c: 69: }
  6240                           ;UI.c: 71: change_state_to_menu_start();
  6241  004C88  EC79  F026         	call	_change_state_to_menu_start	;wreg free
  6242                           
  6243                           ;UI.c: 72: firstboot = 1;
  6244  004C8C  0E00               	movlw	0
  6245  004C8E  6E70               	movwf	_firstboot+1,c
  6246  004C90  0E01               	movlw	1
  6247  004C92  6E6F               	movwf	_firstboot,c
  6248  004C94  0012               	return		;funcret
  6249  004C96                     __end_of_initUI:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           intcon	equ	0xFF2
  6258                           intcon2	equ	0xFF1
  6259                           intcon3	equ	0xFF0
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _loadRTC *****************
  6272 ;; Defined at:
  6273 ;;		line 28 in file "RTC.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  i               2   22[BANK0 ] int 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;Total ram usage:        3 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    9
  6294 ;; This function calls:
  6295 ;;		_I2C_Master_Init
  6296 ;;		_I2C_Master_Start
  6297 ;;		_I2C_Master_Stop
  6298 ;;		_I2C_Master_Write
  6299 ;; This function is called by:
  6300 ;;		_initUI
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text17
  6305  0040BA                     __ptext17:
  6306                           	opt stack 0
  6307  0040BA                     _loadRTC:
  6308                           	opt stack 20
  6309                           
  6310                           ;RTC.c: 30: I2C_Master_Init(10000);
  6311                           
  6312                           ;incstack = 0
  6313  0040BA  0E10               	movlw	16
  6314  0040BC  0100               	movlb	0	; () banked
  6315  0040BE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  6316  0040C0  0E27               	movlw	39
  6317  0040C2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  6318  0040C4  0E00               	movlw	0
  6319  0040C6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  6320  0040C8  0E00               	movlw	0
  6321  0040CA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  6322  0040CC  ECF8  F022         	call	_I2C_Master_Init	;wreg free
  6323                           
  6324                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6325  0040D0  9EF2               	bcf	intcon,7,c	;volatile
  6326                           
  6327                           ;RTC.c: 34: I2C_Master_Start();
  6328  0040D2  ECB0  F027         	call	_I2C_Master_Start	;wreg free
  6329                           
  6330                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6331  0040D6  0E00               	movlw	0
  6332  0040D8  0100               	movlb	0	; () banked
  6333  0040DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6334  0040DC  0ED0               	movlw	208
  6335  0040DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6336  0040E0  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  6337                           
  6338                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6339  0040E4  0E00               	movlw	0
  6340  0040E6  0100               	movlb	0	; () banked
  6341  0040E8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6342  0040EA  0E00               	movlw	0
  6343  0040EC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6344  0040EE  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  6345                           
  6346                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6347  0040F2  0E00               	movlw	0
  6348  0040F4  0100               	movlb	0	; () banked
  6349  0040F6  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6350  0040F8  0E00               	movlw	0
  6351  0040FA  6F96               	movwf	loadRTC@i& (0+255),b
  6352  0040FC                     l6637:
  6353                           
  6354                           ; BSR set to: 0
  6355  0040FC  0100               	movlb	0	; () banked
  6356  0040FE  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6357  004100  D008               	goto	l6641
  6358  004102  0100               	movlb	0	; () banked
  6359  004104  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6360  004106  E11B               	bnz	l6647
  6361  004108  0E07               	movlw	7
  6362  00410A  0100               	movlb	0	; () banked
  6363  00410C  5D96               	subwf	loadRTC@i& (0+255),w,b
  6364  00410E  B0D8               	btfsc	status,0,c
  6365  004110  D016               	goto	l6647
  6366  004112                     l6641:
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6370  004112  0E24               	movlw	low _time
  6371  004114  0100               	movlb	0	; () banked
  6372  004116  2596               	addwf	loadRTC@i& (0+255),w,b
  6373  004118  6ED9               	movwf	fsr2l,c
  6374  00411A  0E01               	movlw	high _time
  6375  00411C  0100               	movlb	0	; () banked
  6376  00411E  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6377  004120  6EDA               	movwf	fsr2h,c
  6378  004122  50DF               	movf	indf2,w,c
  6379  004124  0100               	movlb	0	; () banked
  6380  004126  6F95               	movwf	??_loadRTC& (0+255),b
  6381  004128  0100               	movlb	0	; () banked
  6382  00412A  5195               	movf	??_loadRTC& (0+255),w,b
  6383  00412C  0100               	movlb	0	; () banked
  6384  00412E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6385  004130  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6386  004132  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  6387  004136  0100               	movlb	0	; () banked
  6388  004138  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6389  00413A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6390  00413C  D7DF               	goto	l6637
  6391  00413E                     l6647:
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;RTC.c: 39: }
  6395                           ;RTC.c: 40: I2C_Master_Stop();
  6396  00413E  ECAC  F027         	call	_I2C_Master_Stop	;wreg free
  6397                           
  6398                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6399  004142  8EF2               	bsf	intcon,7,c	;volatile
  6400  004144  0012               	return		;funcret
  6401  004146                     __end_of_loadRTC:
  6402                           	opt stack 0
  6403                           tblptru	equ	0xFF8
  6404                           tblptrh	equ	0xFF7
  6405                           tblptrl	equ	0xFF6
  6406                           tablat	equ	0xFF5
  6407                           prodh	equ	0xFF4
  6408                           prodl	equ	0xFF3
  6409                           intcon	equ	0xFF2
  6410                           intcon2	equ	0xFF1
  6411                           intcon3	equ	0xFF0
  6412                           postinc0	equ	0xFEE
  6413                           wreg	equ	0xFE8
  6414                           postdec1	equ	0xFE5
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _I2C_Master_Init *****************
  6424 ;; Defined at:
  6425 ;;		line 15 in file "I2C.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  c               4   13[BANK0 ] const unsigned long 
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      void 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;Total ram usage:        8 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    8
  6446 ;; This function calls:
  6447 ;;		___lldiv
  6448 ;; This function is called by:
  6449 ;;		_main
  6450 ;;		_loadRTC
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text18
  6455  0045F0                     __ptext18:
  6456                           	opt stack 0
  6457  0045F0                     _I2C_Master_Init:
  6458                           	opt stack 20
  6459                           
  6460                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6461                           
  6462                           ;incstack = 0
  6463  0045F0  0E00               	movlw	0
  6464  0045F2  6EC7               	movwf	4039,c	;volatile
  6465                           
  6466                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6467  0045F4  0E28               	movlw	40
  6468  0045F6  6EC6               	movwf	4038,c	;volatile
  6469                           
  6470                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6471  0045F8  0E00               	movlw	0
  6472  0045FA  6EC5               	movwf	4037,c	;volatile
  6473                           
  6474                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6475  0045FC  0E00               	movlw	0
  6476  0045FE  0100               	movlb	0	; () banked
  6477  004600  6F80               	movwf	___lldiv@dividend& (0+255),b
  6478  004602  0E48               	movlw	72
  6479  004604  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6480  004606  0EE8               	movlw	232
  6481  004608  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6482  00460A  0E01               	movlw	1
  6483  00460C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6484  00460E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6485  004612  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6486  004616  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6487  00461A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6488  00461E  0E02               	movlw	2
  6489  004620                     u5015:
  6490  004620  90D8               	bcf	status,0,c
  6491  004622  0100               	movlb	0	; () banked
  6492  004624  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6493  004626  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6494  004628  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6495  00462A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6496  00462C  2EE8               	decfsz	wreg,f,c
  6497  00462E  D7F8               	goto	u5015
  6498  004630  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6499  004634  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6500  004638  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6501  00463C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6502  004640  EC59  F01F         	call	___lldiv	;wreg free
  6503  004644  0100               	movlb	0	; () banked
  6504  004646  0580               	decf	?___lldiv& (0+255),w,b
  6505  004648  6EC8               	movwf	4040,c	;volatile
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;I2C.c: 22: TRISC3 = 1;
  6509  00464A  8694               	bsf	3988,3,c	;volatile
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;I2C.c: 23: TRISC4 = 1;
  6513  00464C  8894               	bsf	3988,4,c	;volatile
  6514                           
  6515                           ; BSR set to: 0
  6516  00464E  0012               	return		;funcret
  6517  004650                     __end_of_I2C_Master_Init:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           intcon2	equ	0xFF1
  6527                           intcon3	equ	0xFF0
  6528                           postinc0	equ	0xFEE
  6529                           wreg	equ	0xFE8
  6530                           postdec1	equ	0xFE5
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function ___lldiv *****************
  6540 ;; Defined at:
  6541 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  dividend        4    0[BANK0 ] unsigned long 
  6544 ;;  divisor         4    4[BANK0 ] unsigned long 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  quotient        4    8[BANK0 ] unsigned long 
  6547 ;;  counter         1   12[BANK0 ] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  4    0[BANK0 ] unsigned long 
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:       13 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    7
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_I2C_Master_Init
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text19
  6572  003EB2                     __ptext19:
  6573                           	opt stack 0
  6574  003EB2                     ___lldiv:
  6575                           	opt stack 20
  6576                           
  6577                           ; BSR set to: 0
  6578                           ;incstack = 0
  6579  003EB2  0E00               	movlw	0
  6580  003EB4  0100               	movlb	0	; () banked
  6581  003EB6  6F88               	movwf	___lldiv@quotient& (0+255),b
  6582  003EB8  0E00               	movlw	0
  6583  003EBA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6584  003EBC  0E00               	movlw	0
  6585  003EBE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6586  003EC0  0E00               	movlw	0
  6587  003EC2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6588                           
  6589                           ; BSR set to: 0
  6590  003EC4  0100               	movlb	0	; () banked
  6591  003EC6  5184               	movf	___lldiv@divisor& (0+255),w,b
  6592  003EC8  0100               	movlb	0	; () banked
  6593  003ECA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6594  003ECC  0100               	movlb	0	; () banked
  6595  003ECE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6596  003ED0  0100               	movlb	0	; () banked
  6597  003ED2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6598  003ED4  B4D8               	btfsc	status,2,c
  6599  003ED6  D042               	goto	l1747
  6600                           
  6601                           ; BSR set to: 0
  6602  003ED8  0E01               	movlw	1
  6603  003EDA  0100               	movlb	0	; () banked
  6604  003EDC  6F8C               	movwf	___lldiv@counter& (0+255),b
  6605  003EDE  D008               	goto	l6025
  6606  003EE0                     l6023:
  6607                           
  6608                           ; BSR set to: 0
  6609  003EE0  0100               	movlb	0	; () banked
  6610  003EE2  90D8               	bcf	status,0,c
  6611  003EE4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6612  003EE6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6613  003EE8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6614  003EEA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6615  003EEC  0100               	movlb	0	; () banked
  6616  003EEE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6617  003EF0                     l6025:
  6618                           
  6619                           ; BSR set to: 0
  6620  003EF0  0100               	movlb	0	; () banked
  6621  003EF2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6622  003EF4  D7F5               	goto	l6023
  6623  003EF6                     l6027:
  6624                           
  6625                           ; BSR set to: 0
  6626  003EF6  0100               	movlb	0	; () banked
  6627  003EF8  90D8               	bcf	status,0,c
  6628  003EFA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6629  003EFC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6630  003EFE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6631  003F00  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6632                           
  6633                           ; BSR set to: 0
  6634  003F02  0100               	movlb	0	; () banked
  6635  003F04  5184               	movf	___lldiv@divisor& (0+255),w,b
  6636  003F06  0100               	movlb	0	; () banked
  6637  003F08  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6638  003F0A  0100               	movlb	0	; () banked
  6639  003F0C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6640  003F0E  0100               	movlb	0	; () banked
  6641  003F10  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6642  003F12  0100               	movlb	0	; () banked
  6643  003F14  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6644  003F16  0100               	movlb	0	; () banked
  6645  003F18  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6646  003F1A  0100               	movlb	0	; () banked
  6647  003F1C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6648  003F1E  0100               	movlb	0	; () banked
  6649  003F20  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6650  003F22  A0D8               	btfss	status,0,c
  6651  003F24  D012               	goto	l6035
  6652                           
  6653                           ; BSR set to: 0
  6654  003F26  0100               	movlb	0	; () banked
  6655  003F28  5184               	movf	___lldiv@divisor& (0+255),w,b
  6656  003F2A  0100               	movlb	0	; () banked
  6657  003F2C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6658  003F2E  0100               	movlb	0	; () banked
  6659  003F30  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6660  003F32  0100               	movlb	0	; () banked
  6661  003F34  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6662  003F36  0100               	movlb	0	; () banked
  6663  003F38  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6664  003F3A  0100               	movlb	0	; () banked
  6665  003F3C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6666  003F3E  0100               	movlb	0	; () banked
  6667  003F40  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6668  003F42  0100               	movlb	0	; () banked
  6669  003F44  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672  003F46  0100               	movlb	0	; () banked
  6673  003F48  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6674  003F4A                     l6035:
  6675                           
  6676                           ; BSR set to: 0
  6677  003F4A  0100               	movlb	0	; () banked
  6678  003F4C  90D8               	bcf	status,0,c
  6679  003F4E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6680  003F50  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6681  003F52  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6682  003F54  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6683                           
  6684                           ; BSR set to: 0
  6685  003F56  0100               	movlb	0	; () banked
  6686  003F58  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6687  003F5A  D7CD               	goto	l6027
  6688  003F5C                     l1747:
  6689                           
  6690                           ; BSR set to: 0
  6691  003F5C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6692  003F60  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6693  003F64  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6694  003F68  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6695                           
  6696                           ; BSR set to: 0
  6697  003F6C  0012               	return		;funcret
  6698  003F6E                     __end_of___lldiv:
  6699                           	opt stack 0
  6700                           tblptru	equ	0xFF8
  6701                           tblptrh	equ	0xFF7
  6702                           tblptrl	equ	0xFF6
  6703                           tablat	equ	0xFF5
  6704                           prodh	equ	0xFF4
  6705                           prodl	equ	0xFF3
  6706                           intcon	equ	0xFF2
  6707                           intcon2	equ	0xFF1
  6708                           intcon3	equ	0xFF0
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           postdec1	equ	0xFE5
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _change_state_to_menu_start *****************
  6721 ;; Defined at:
  6722 ;;		line 474 in file "UI.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:   11
  6743 ;; This function calls:
  6744 ;;		_lcdInst
  6745 ;;		_printRTC
  6746 ;;		_printf
  6747 ;; This function is called by:
  6748 ;;		_initUI
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text20
  6753  004CF2                     __ptext20:
  6754                           	opt stack 0
  6755  004CF2                     _change_state_to_menu_start:
  6756                           	opt stack 18
  6757                           
  6758                           ;UI.c: 475: cur_state = 0;
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;incstack = 0
  6762  004CF2  0E00               	movlw	0
  6763  004CF4  0100               	movlb	0	; () banked
  6764  004CF6  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6765  004CF8  0E00               	movlw	0
  6766  004CFA  6FE6               	movwf	_cur_state& (0+255),b
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;UI.c: 477: lcdInst(0b10000000);;
  6770  004CFC  0E80               	movlw	128
  6771  004CFE  EC8A  F027         	call	_lcdInst
  6772                           
  6773                           ;UI.c: 478: printRTC();
  6774  004D02  EC8E  F011         	call	_printRTC	;wreg free
  6775                           
  6776                           ;UI.c: 479: lcdInst(0b11000000);;
  6777  004D06  0EC0               	movlw	192
  6778  004D08  EC8A  F027         	call	_lcdInst
  6779                           
  6780                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6781  004D0C  0EF7               	movlw	low STR_30
  6782  004D0E  0100               	movlb	0	; () banked
  6783  004D10  6F8E               	movwf	printf@f& (0+255),b
  6784  004D12  0EFD               	movlw	high STR_30
  6785  004D14  0100               	movlb	0	; () banked
  6786  004D16  6F8F               	movwf	(printf@f+1)& (0+255),b
  6787  004D18  ECB8  F008         	call	_printf	;wreg free
  6788  004D1C  0012               	return		;funcret
  6789  004D1E                     __end_of_change_state_to_menu_start:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           intcon2	equ	0xFF1
  6799                           intcon3	equ	0xFF0
  6800                           postinc0	equ	0xFEE
  6801                           wreg	equ	0xFE8
  6802                           postdec1	equ	0xFE5
  6803                           fsr1l	equ	0xFE1
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _initTime *****************
  6812 ;; Defined at:
  6813 ;;		line 17 in file "RTC.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  s               1    wreg     unsigned char 
  6816 ;;  m               1    0[BANK0 ] unsigned char 
  6817 ;;  h               1    1[BANK0 ] unsigned char 
  6818 ;;  w               1    2[BANK0 ] unsigned char 
  6819 ;;  DD              1    3[BANK0 ] unsigned char 
  6820 ;;  MM              1    4[BANK0 ] unsigned char 
  6821 ;;  YY              1    5[BANK0 ] unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  s               1    6[BANK0 ] unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6833 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;Total ram usage:        7 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    7
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text21
  6848  004E56                     __ptext21:
  6849                           	opt stack 0
  6850  004E56                     _initTime:
  6851                           	opt stack 23
  6852                           
  6853                           ;incstack = 0
  6854                           ;initTime@s stored from wreg
  6855  004E56  0100               	movlb	0	; () banked
  6856  004E58  6F86               	movwf	initTime@s& (0+255),b
  6857                           
  6858                           ;RTC.c: 19: time[0] = s;
  6859  004E5A  C086  F124         	movff	initTime@s,_time
  6860                           
  6861                           ;RTC.c: 20: time[1] = m;
  6862  004E5E  C080  F125         	movff	initTime@m,_time+1
  6863                           
  6864                           ;RTC.c: 21: time[2] = h;
  6865  004E62  C081  F126         	movff	initTime@h,_time+2
  6866                           
  6867                           ;RTC.c: 22: time[3] = w;
  6868  004E66  C082  F127         	movff	initTime@w,_time+3
  6869                           
  6870                           ;RTC.c: 23: time[4] = DD;
  6871  004E6A  C083  F128         	movff	initTime@DD,_time+4
  6872                           
  6873                           ;RTC.c: 24: time[5] = MM;
  6874  004E6E  C084  F129         	movff	initTime@MM,_time+5
  6875                           
  6876                           ;RTC.c: 25: time[6] = YY;
  6877  004E72  C085  F12A         	movff	initTime@YY,_time+6
  6878  004E76  0012               	return		;funcret
  6879  004E78                     __end_of_initTime:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           intcon3	equ	0xFF0
  6890                           postinc0	equ	0xFEE
  6891                           wreg	equ	0xFE8
  6892                           postdec1	equ	0xFE5
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function _initLCD *****************
  6902 ;; Defined at:
  6903 ;;		line 48 in file "lcd.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;		None
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;		None
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      void 
  6910 ;; Registers used:
  6911 ;;		wreg, status,2, status,0, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;Total ram usage:        1 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    9
  6924 ;; This function calls:
  6925 ;;		_lcdInst
  6926 ;; This function is called by:
  6927 ;;		_main
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text22
  6932  0048F0                     __ptext22:
  6933                           	opt stack 0
  6934  0048F0                     _initLCD:
  6935                           	opt stack 21
  6936                           
  6937                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6938                           
  6939                           ;incstack = 0
  6940  0048F0  0E9C               	movlw	156
  6941  0048F2  0100               	movlb	0	; () banked
  6942  0048F4  6F83               	movwf	??_initLCD& (0+255),b
  6943  0048F6  0ED7               	movlw	215
  6944  0048F8                     u8447:
  6945  0048F8  2EE8               	decfsz	wreg,f,c
  6946  0048FA  D7FE               	bra	u8447
  6947  0048FC  2F83               	decfsz	??_initLCD& (0+255),f,b
  6948  0048FE  D7FC               	bra	u8447
  6949                           
  6950                           ;lcd.c: 50: lcdInst(0b00110011);
  6951  004900  0E33               	movlw	51
  6952  004902  EC8A  F027         	call	_lcdInst
  6953                           
  6954                           ;lcd.c: 51: lcdInst(0b00110010);
  6955  004906  0E32               	movlw	50
  6956  004908  EC8A  F027         	call	_lcdInst
  6957                           
  6958                           ;lcd.c: 53: lcdInst(0b00101000);
  6959  00490C  0E28               	movlw	40
  6960  00490E  EC8A  F027         	call	_lcdInst
  6961                           
  6962                           ;lcd.c: 54: lcdInst(0b00001100);
  6963  004912  0E0C               	movlw	12
  6964  004914  EC8A  F027         	call	_lcdInst
  6965                           
  6966                           ;lcd.c: 55: lcdInst(0b00000110);
  6967  004918  0E06               	movlw	6
  6968  00491A  EC8A  F027         	call	_lcdInst
  6969                           
  6970                           ;lcd.c: 56: lcdInst(0b00000001);
  6971  00491E  0E01               	movlw	1
  6972  004920  EC8A  F027         	call	_lcdInst
  6973                           
  6974                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6975  004924  0E9C               	movlw	156
  6976  004926  0100               	movlb	0	; () banked
  6977  004928  6F83               	movwf	??_initLCD& (0+255),b
  6978  00492A  0ED7               	movlw	215
  6979  00492C                     u8457:
  6980  00492C  2EE8               	decfsz	wreg,f,c
  6981  00492E  D7FE               	bra	u8457
  6982  004930  2F83               	decfsz	??_initLCD& (0+255),f,b
  6983  004932  D7FC               	bra	u8457
  6984  004934  0012               	return		;funcret
  6985  004936                     __end_of_initLCD:
  6986                           	opt stack 0
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           intcon2	equ	0xFF1
  6995                           intcon3	equ	0xFF0
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           postdec1	equ	0xFE5
  6999                           fsr1l	equ	0xFE1
  7000                           indf2	equ	0xFDF
  7001                           postinc2	equ	0xFDE
  7002                           postdec2	equ	0xFDD
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007 ;; *************** function _UI *****************
  7008 ;; Defined at:
  7009 ;;		line 76 in file "UI.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;		None
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;  i               1   73[BANK0 ] unsigned char 
  7014 ;;  i               1   85[BANK0 ] unsigned char 
  7015 ;;  i               1   84[BANK0 ] unsigned char 
  7016 ;;  i               1   83[BANK0 ] unsigned char 
  7017 ;;  i               1   82[BANK0 ] unsigned char 
  7018 ;;  i               1   81[BANK0 ] unsigned char 
  7019 ;;  i               1   80[BANK0 ] unsigned char 
  7020 ;;  i               1   79[BANK0 ] unsigned char 
  7021 ;;  i               1   78[BANK0 ] unsigned char 
  7022 ;;  i               1   77[BANK0 ] unsigned char 
  7023 ;;  i               1   76[BANK0 ] unsigned char 
  7024 ;;  i               1   75[BANK0 ] unsigned char 
  7025 ;;  i               1   74[BANK0 ] unsigned char 
  7026 ;;  month           4   86[BANK0 ] unsigned char [4]
  7027 ;;  i               1   72[BANK0 ] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      void 
  7030 ;; Registers used:
  7031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;Total ram usage:       22 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:   11
  7044 ;; This function calls:
  7045 ;;		___awdiv
  7046 ;;		___awmod
  7047 ;;		_change_state_to_menu_12
  7048 ;;		_change_state_to_menu_22
  7049 ;;		_lcdInst
  7050 ;;		_printRTC
  7051 ;;		_printf
  7052 ;;		_strcpy
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text23
  7059  0008CA                     __ptext23:
  7060                           	opt stack 0
  7061  0008CA                     _UI:
  7062                           	opt stack 19
  7063                           
  7064                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  7065                           
  7066                           ;incstack = 0
  7067  0008CA  0E02               	movlw	2
  7068  0008CC  0100               	movlb	0	; () banked
  7069  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  7070  0008D0  A4D8               	btfss	status,2,c
  7071  0008D2  D075               	goto	l8053
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7075  0008D4  0E01               	movlw	1
  7076  0008D6  EC8A  F027         	call	_lcdInst
  7077  0008DA  0E68               	movlw	104
  7078  0008DC  0100               	movlb	0	; () banked
  7079  0008DE  6FC4               	movwf	??_UI& (0+255),b
  7080  0008E0  0EE4               	movlw	228
  7081  0008E2                     u8467:
  7082  0008E2  2EE8               	decfsz	wreg,f,c
  7083  0008E4  D7FE               	bra	u8467
  7084  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7085  0008E8  D7FC               	bra	u8467
  7086  0008EA  F000               	nop	
  7087                           
  7088                           ;UI.c: 79: lcdInst(0b10000000);;
  7089  0008EC  0E80               	movlw	128
  7090  0008EE  EC8A  F027         	call	_lcdInst
  7091                           
  7092                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  7093  0008F2  0EA3               	movlw	low STR_1
  7094  0008F4  0100               	movlb	0	; () banked
  7095  0008F6  6F8E               	movwf	printf@f& (0+255),b
  7096  0008F8  0EFB               	movlw	high STR_1
  7097  0008FA  0100               	movlb	0	; () banked
  7098  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7099  0008FE  0E01               	movlw	1
  7100  000900  0100               	movlb	0	; () banked
  7101  000902  25FD               	addwf	_sel& (0+255),w,b
  7102  000904  0100               	movlb	0	; () banked
  7103  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  7104  000908  0100               	movlb	0	; () banked
  7105  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  7106  00090C  0E00               	movlw	0
  7107  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  7108  000910  ECB8  F008         	call	_printf	;wreg free
  7109                           
  7110                           ;UI.c: 81: lcdInst(0b11000000);;
  7111  000914  0EC0               	movlw	192
  7112  000916  EC8A  F027         	call	_lcdInst
  7113                           
  7114                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7115  00091A  0E0E               	movlw	14
  7116  00091C  0100               	movlb	0	; () banked
  7117  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7118  000920  0E10               	movlw	16
  7119  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  7120  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  7121  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7122  00092C  EC0C  F020         	call	___awmod	;wreg free
  7123  000930  C080  F0C6         	movff	?___awmod,_UI$2332
  7124  000934  C081  F0C7         	movff	?___awmod+1,_UI$2332+1
  7125                           
  7126                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  7127  000938  0E27               	movlw	low STR_2
  7128  00093A  0100               	movlb	0	; () banked
  7129  00093C  6F8E               	movwf	printf@f& (0+255),b
  7130  00093E  0EFF               	movlw	high STR_2
  7131  000940  0100               	movlb	0	; () banked
  7132  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  7133  000944  0E0E               	movlw	14
  7134  000946  0100               	movlb	0	; () banked
  7135  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7136  00094A  0E10               	movlw	16
  7137  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  7138  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  7139  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  7140  000956  EC0C  F020         	call	___awmod	;wreg free
  7141  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  7142  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7143  000962  0E00               	movlw	0
  7144  000964  0100               	movlb	0	; () banked
  7145  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7146  000968  0E3C               	movlw	60
  7147  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  7148  00096C  ECFA  F01E         	call	___awdiv	;wreg free
  7149  000970  C086  F090         	movff	?___awdiv,?_printf+2
  7150  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  7151  000978  C0C6  F080         	movff	_UI$2332,___awmod@dividend
  7152  00097C  C0C7  F081         	movff	_UI$2332+1,___awmod@dividend+1
  7153  000980  0E00               	movlw	0
  7154  000982  0100               	movlb	0	; () banked
  7155  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7156  000986  0E3C               	movlw	60
  7157  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  7158  00098A  EC0C  F020         	call	___awmod	;wreg free
  7159  00098E  C080  F092         	movff	?___awmod,?_printf+4
  7160  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  7161  000996  ECB8  F008         	call	_printf	;wreg free
  7162                           
  7163                           ;UI.c: 83: machine_state = UI_state;
  7164  00099A  0E00               	movlw	0
  7165  00099C  0100               	movlb	0	; () banked
  7166  00099E  6FFC               	movwf	_machine_state& (0+255),b
  7167  0009A0                     l180:
  7168  0009A0  A281               	btfss	3969,1,c	;volatile
  7169  0009A2  D7FE               	goto	l180
  7170                           
  7171                           ;UI.c: 86: }
  7172                           ;UI.c: 87: if(cur_state==12){
  7173  0009A4  0E0C               	movlw	12
  7174  0009A6  0100               	movlb	0	; () banked
  7175  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  7176  0009AA  0100               	movlb	0	; () banked
  7177  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7178  0009AE  A4D8               	btfss	status,2,c
  7179  0009B0  D003               	goto	l8051
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;UI.c: 88: change_state_to_menu_12();
  7183  0009B2  ECD8  F024         	call	_change_state_to_menu_12	;wreg free
  7184                           
  7185                           ;UI.c: 89: }
  7186  0009B6  D3D5               	goto	l8373
  7187  0009B8                     l8051:
  7188                           
  7189                           ;UI.c: 90: else{
  7190                           ;UI.c: 91: change_state_to_menu_22();
  7191  0009B8  ECBC  F024         	call	_change_state_to_menu_22	;wreg free
  7192                           
  7193                           ;UI.c: 92: }
  7194                           ;UI.c: 93: }
  7195  0009BC  D3D2               	goto	l8373
  7196  0009BE                     l8053:
  7197                           
  7198                           ;UI.c: 94: else if(cur_state == 0){
  7199  0009BE  0100               	movlb	0	; () banked
  7200  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  7201  0009C2  0100               	movlb	0	; () banked
  7202  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7203  0009C6  A4D8               	btfss	status,2,c
  7204  0009C8  D3CC               	goto	l8373
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  7208  0009CA  0E00               	movlw	0
  7209  0009CC  0100               	movlb	0	; () banked
  7210  0009CE  6FC8               	movwf	UI@i& (0+255),b
  7211  0009D0                     l8057:
  7212                           
  7213                           ; BSR set to: 0
  7214  0009D0  0E63               	movlw	99
  7215  0009D2  0100               	movlb	0	; () banked
  7216  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  7217  0009D6  D001               	goto	l8061
  7218  0009D8  D00C               	goto	l8065
  7219  0009DA                     l8061:
  7220                           
  7221                           ; BSR set to: 0
  7222  0009DA  0E68               	movlw	104
  7223  0009DC  0100               	movlb	0	; () banked
  7224  0009DE  6FC4               	movwf	??_UI& (0+255),b
  7225  0009E0  0EE4               	movlw	228
  7226  0009E2                     u8477:
  7227  0009E2  2EE8               	decfsz	wreg,f,c
  7228  0009E4  D7FE               	bra	u8477
  7229  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  7230  0009E8  D7FC               	bra	u8477
  7231  0009EA  F000               	nop	
  7232  0009EC  0100               	movlb	0	; () banked
  7233  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  7234  0009F0  D7EF               	goto	l8057
  7235  0009F2                     l8065:
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;UI.c: 96: if(cur_state == 0){
  7239  0009F2  0100               	movlb	0	; () banked
  7240  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  7241  0009F6  0100               	movlb	0	; () banked
  7242  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  7243  0009FA  A4D8               	btfss	status,2,c
  7244  0009FC  D3B2               	goto	l8373
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;UI.c: 97: printRTC();
  7248  0009FE  EC8E  F011         	call	_printRTC	;wreg free
  7249                           
  7250                           ;UI.c: 98: }
  7251                           ;UI.c: 99: }
  7252                           ;UI.c: 100: while(logstate){
  7253  000A02  D3AF               	goto	l8373
  7254  000A04                     l8069:
  7255                           
  7256                           ;UI.c: 102: if(!log_completion){
  7257  000A04  0100               	movlb	0	; () banked
  7258  000A06  51EE               	movf	_log_completion& (0+255),w,b
  7259  000A08  0100               	movlb	0	; () banked
  7260  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  7261  000A0C  A4D8               	btfss	status,2,c
  7262  000A0E  D041               	goto	l8099
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7266  000A10  0E01               	movlw	1
  7267  000A12  EC8A  F027         	call	_lcdInst
  7268  000A16  0E68               	movlw	104
  7269  000A18  0100               	movlb	0	; () banked
  7270  000A1A  6FC4               	movwf	??_UI& (0+255),b
  7271  000A1C  0EE4               	movlw	228
  7272  000A1E                     u8487:
  7273  000A1E  2EE8               	decfsz	wreg,f,c
  7274  000A20  D7FE               	bra	u8487
  7275  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  7276  000A24  D7FC               	bra	u8487
  7277  000A26  F000               	nop	
  7278                           
  7279                           ;UI.c: 104: lcdInst(0b10000000);;
  7280  000A28  0E80               	movlw	128
  7281  000A2A  EC8A  F027         	call	_lcdInst
  7282                           
  7283                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  7284  000A2E  0E91               	movlw	low STR_3
  7285  000A30  0100               	movlb	0	; () banked
  7286  000A32  6F8E               	movwf	printf@f& (0+255),b
  7287  000A34  0EFB               	movlw	high STR_3
  7288  000A36  0100               	movlb	0	; () banked
  7289  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  7290  000A3A  C0EC  F090         	movff	_log,?_printf+2
  7291  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  7292  000A42  ECB8  F008         	call	_printf	;wreg free
  7293                           
  7294                           ;UI.c: 106: lcdInst(0b11000000);;
  7295  000A46  0EC0               	movlw	192
  7296  000A48  EC8A  F027         	call	_lcdInst
  7297                           
  7298                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  7299  000A4C  0E4A               	movlw	low STR_4
  7300  000A4E  0100               	movlb	0	; () banked
  7301  000A50  6F8E               	movwf	printf@f& (0+255),b
  7302  000A52  0EFE               	movlw	high STR_4
  7303  000A54  0100               	movlb	0	; () banked
  7304  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  7305  000A58  ECB8  F008         	call	_printf	;wreg free
  7306  000A5C                     l8083:
  7307  000A5C  0E00               	movlw	0
  7308  000A5E  0100               	movlb	0	; () banked
  7309  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  7310  000A62                     l8085:
  7311                           
  7312                           ; BSR set to: 0
  7313  000A62  0E63               	movlw	99
  7314  000A64  0100               	movlb	0	; () banked
  7315  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  7316  000A68  D001               	goto	l8089
  7317  000A6A  D00C               	goto	l8093
  7318  000A6C                     l8089:
  7319                           
  7320                           ; BSR set to: 0
  7321  000A6C  0E68               	movlw	104
  7322  000A6E  0100               	movlb	0	; () banked
  7323  000A70  6FC4               	movwf	??_UI& (0+255),b
  7324  000A72  0EE4               	movlw	228
  7325  000A74                     u8497:
  7326  000A74  2EE8               	decfsz	wreg,f,c
  7327  000A76  D7FE               	bra	u8497
  7328  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7329  000A7A  D7FC               	bra	u8497
  7330  000A7C  F000               	nop	
  7331  000A7E  0100               	movlb	0	; () banked
  7332  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7333  000A82  D7EF               	goto	l8085
  7334  000A84                     l8093:
  7335                           
  7336                           ; BSR set to: 0
  7337  000A84  0100               	movlb	0	; () banked
  7338  000A86  51F6               	movf	_logstate& (0+255),w,b
  7339  000A88  0100               	movlb	0	; () banked
  7340  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7341  000A8C  B4D8               	btfsc	status,2,c
  7342  000A8E  0012               	return	
  7343  000A90  D7E5               	goto	l8083
  7344  000A92                     l8099:
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;UI.c: 111: else{
  7348                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7349  000A92  0E01               	movlw	1
  7350  000A94  EC8A  F027         	call	_lcdInst
  7351  000A98  0E68               	movlw	104
  7352  000A9A  0100               	movlb	0	; () banked
  7353  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7354  000A9E  0EE4               	movlw	228
  7355  000AA0                     u8507:
  7356  000AA0  2EE8               	decfsz	wreg,f,c
  7357  000AA2  D7FE               	bra	u8507
  7358  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7359  000AA6  D7FC               	bra	u8507
  7360  000AA8  F000               	nop	
  7361                           
  7362                           ;UI.c: 113: lcdInst(0b10000000);;
  7363  000AAA  0E80               	movlw	128
  7364  000AAC  EC8A  F027         	call	_lcdInst
  7365                           
  7366                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7367  000AB0  0E91               	movlw	low STR_3
  7368  000AB2  0100               	movlb	0	; () banked
  7369  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7370  000AB6  0EFB               	movlw	high STR_3
  7371  000AB8  0100               	movlb	0	; () banked
  7372  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7373  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7374  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7375  000AC4  ECB8  F008         	call	_printf	;wreg free
  7376                           
  7377                           ;UI.c: 115: lcdInst(0b11000000);;
  7378  000AC8  0EC0               	movlw	192
  7379  000ACA  EC8A  F027         	call	_lcdInst
  7380                           
  7381                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7382  000ACE  0EE6               	movlw	low STR_6
  7383  000AD0  0100               	movlb	0	; () banked
  7384  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7385  000AD4  0EFD               	movlw	high STR_6
  7386  000AD6  0100               	movlb	0	; () banked
  7387  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7388  000ADA  ECB8  F008         	call	_printf	;wreg free
  7389                           
  7390                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7391  000ADE  0E00               	movlw	0
  7392  000AE0  0100               	movlb	0	; () banked
  7393  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7394  000AE4                     l8113:
  7395                           
  7396                           ; BSR set to: 0
  7397  000AE4  0E63               	movlw	99
  7398  000AE6  0100               	movlb	0	; () banked
  7399  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7400  000AEA  D001               	goto	l8117
  7401  000AEC  D00C               	goto	l8121
  7402  000AEE                     l8117:
  7403                           
  7404                           ; BSR set to: 0
  7405  000AEE  0E68               	movlw	104
  7406  000AF0  0100               	movlb	0	; () banked
  7407  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7408  000AF4  0EE4               	movlw	228
  7409  000AF6                     u8517:
  7410  000AF6  2EE8               	decfsz	wreg,f,c
  7411  000AF8  D7FE               	bra	u8517
  7412  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7413  000AFC  D7FC               	bra	u8517
  7414  000AFE  F000               	nop	
  7415  000B00  0100               	movlb	0	; () banked
  7416  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7417  000B04  D7EF               	goto	l8113
  7418  000B06                     l8121:
  7419                           
  7420                           ; BSR set to: 0
  7421  000B06  0100               	movlb	0	; () banked
  7422  000B08  51F6               	movf	_logstate& (0+255),w,b
  7423  000B0A  0100               	movlb	0	; () banked
  7424  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7425  000B0E  B4D8               	btfsc	status,2,c
  7426  000B10  0012               	return	
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434  000B12  0E00               	movlw	0
  7435  000B14  0100               	movlb	0	; () banked
  7436  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7437  000B18                     l8127:
  7438                           
  7439                           ; BSR set to: 0
  7440  000B18  0E63               	movlw	99
  7441  000B1A  0100               	movlb	0	; () banked
  7442  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7443  000B1E  D001               	goto	l8131
  7444  000B20  D00C               	goto	l8135
  7445  000B22                     l8131:
  7446                           
  7447                           ; BSR set to: 0
  7448  000B22  0E68               	movlw	104
  7449  000B24  0100               	movlb	0	; () banked
  7450  000B26  6FC4               	movwf	??_UI& (0+255),b
  7451  000B28  0EE4               	movlw	228
  7452  000B2A                     u8527:
  7453  000B2A  2EE8               	decfsz	wreg,f,c
  7454  000B2C  D7FE               	bra	u8527
  7455  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7456  000B30  D7FC               	bra	u8527
  7457  000B32  F000               	nop	
  7458  000B34  0100               	movlb	0	; () banked
  7459  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7460  000B38  D7EF               	goto	l8127
  7461  000B3A                     l8135:
  7462                           
  7463                           ; BSR set to: 0
  7464  000B3A  0100               	movlb	0	; () banked
  7465  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7466  000B3E  0100               	movlb	0	; () banked
  7467  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7468  000B42  B4D8               	btfsc	status,2,c
  7469  000B44  0012               	return	
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7473                           
  7474                           ; BSR set to: 0
  7475                           
  7476                           ; BSR set to: 0
  7477  000B46  0E01               	movlw	1
  7478  000B48  EC8A  F027         	call	_lcdInst
  7479  000B4C  0E68               	movlw	104
  7480  000B4E  0100               	movlb	0	; () banked
  7481  000B50  6FC4               	movwf	??_UI& (0+255),b
  7482  000B52  0EE4               	movlw	228
  7483  000B54                     u8537:
  7484  000B54  2EE8               	decfsz	wreg,f,c
  7485  000B56  D7FE               	bra	u8537
  7486  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7487  000B5A  D7FC               	bra	u8537
  7488  000B5C  F000               	nop	
  7489                           
  7490                           ;UI.c: 122: lcdInst(0b10000000);;
  7491  000B5E  0E80               	movlw	128
  7492  000B60  EC8A  F027         	call	_lcdInst
  7493                           
  7494                           ;UI.c: 123: printf("START:");
  7495  000B64  0EC4               	movlw	low STR_7
  7496  000B66  0100               	movlb	0	; () banked
  7497  000B68  6F8E               	movwf	printf@f& (0+255),b
  7498  000B6A  0EFF               	movlw	high STR_7
  7499  000B6C  0100               	movlb	0	; () banked
  7500  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7501  000B70  ECB8  F008         	call	_printf	;wreg free
  7502                           
  7503                           ;UI.c: 124: lcdInst(0b11000000);;
  7504  000B74  0EC0               	movlw	192
  7505  000B76  EC8A  F027         	call	_lcdInst
  7506                           
  7507                           ;UI.c: 125: char month[] = "MMM";
  7508  000B7A  C135  F0D6         	movff	UI@F3228,UI@month
  7509  000B7E  C136  F0D7         	movff	UI@F3228+1,UI@month+1
  7510  000B82  C137  F0D8         	movff	UI@F3228+2,UI@month+2
  7511  000B86  C138  F0D9         	movff	UI@F3228+3,UI@month+3
  7512                           
  7513                           ;UI.c: 126: switch(log_startTime[5]){
  7514  000B8A  D0C3               	goto	l8179
  7515  000B8C                     l8151:
  7516                           
  7517                           ;UI.c: 128: strcpy(month, "JAN");
  7518  000B8C  0ED6               	movlw	low UI@month
  7519  000B8E  0100               	movlb	0	; () banked
  7520  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7521  000B92  0E00               	movlw	high UI@month
  7522  000B94  0100               	movlb	0	; () banked
  7523  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7524  000B98  0EDB               	movlw	low STR_8
  7525  000B9A  0100               	movlb	0	; () banked
  7526  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7527  000B9E  0EFF               	movlw	high STR_8
  7528  000BA0  0100               	movlb	0	; () banked
  7529  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7530  000BA4  ECF4  F024         	call	_strcpy	;wreg free
  7531                           
  7532                           ;UI.c: 129: break;
  7533  000BA8  D0E6               	goto	l8181
  7534  000BAA                     l8153:
  7535                           
  7536                           ;UI.c: 131: strcpy(month, "FEB");
  7537  000BAA  0ED6               	movlw	low UI@month
  7538  000BAC  0100               	movlb	0	; () banked
  7539  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7540  000BB0  0E00               	movlw	high UI@month
  7541  000BB2  0100               	movlb	0	; () banked
  7542  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7543  000BB6  0ECB               	movlw	low STR_9
  7544  000BB8  0100               	movlb	0	; () banked
  7545  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7546  000BBC  0EFF               	movlw	high STR_9
  7547  000BBE  0100               	movlb	0	; () banked
  7548  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7549  000BC2  ECF4  F024         	call	_strcpy	;wreg free
  7550                           
  7551                           ;UI.c: 132: break;
  7552  000BC6  D0D7               	goto	l8181
  7553  000BC8                     l8155:
  7554                           
  7555                           ;UI.c: 134: strcpy(month, "MAR");
  7556  000BC8  0ED6               	movlw	low UI@month
  7557  000BCA  0100               	movlb	0	; () banked
  7558  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7559  000BCE  0E00               	movlw	high UI@month
  7560  000BD0  0100               	movlb	0	; () banked
  7561  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7562  000BD4  0EE7               	movlw	low STR_10
  7563  000BD6  0100               	movlb	0	; () banked
  7564  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7565  000BDA  0EFF               	movlw	high STR_10
  7566  000BDC  0100               	movlb	0	; () banked
  7567  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7568  000BE0  ECF4  F024         	call	_strcpy	;wreg free
  7569                           
  7570                           ;UI.c: 135: break;
  7571  000BE4  D0C8               	goto	l8181
  7572  000BE6                     l8157:
  7573                           
  7574                           ;UI.c: 137: strcpy(month, "APR");
  7575  000BE6  0ED6               	movlw	low UI@month
  7576  000BE8  0100               	movlb	0	; () banked
  7577  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7578  000BEC  0E00               	movlw	high UI@month
  7579  000BEE  0100               	movlb	0	; () banked
  7580  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7581  000BF2  0EEB               	movlw	low STR_11
  7582  000BF4  0100               	movlb	0	; () banked
  7583  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7584  000BF8  0EFF               	movlw	high STR_11
  7585  000BFA  0100               	movlb	0	; () banked
  7586  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7587  000BFE  ECF4  F024         	call	_strcpy	;wreg free
  7588                           
  7589                           ;UI.c: 138: break;
  7590  000C02  D0B9               	goto	l8181
  7591  000C04                     l8159:
  7592                           
  7593                           ;UI.c: 140: strcpy(month, "MAY");
  7594  000C04  0ED6               	movlw	low UI@month
  7595  000C06  0100               	movlb	0	; () banked
  7596  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7597  000C0A  0E00               	movlw	high UI@month
  7598  000C0C  0100               	movlb	0	; () banked
  7599  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7600  000C10  0EFB               	movlw	low STR_12
  7601  000C12  0100               	movlb	0	; () banked
  7602  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7603  000C16  0EFF               	movlw	high STR_12
  7604  000C18  0100               	movlb	0	; () banked
  7605  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7606  000C1C  ECF4  F024         	call	_strcpy	;wreg free
  7607                           
  7608                           ;UI.c: 141: break;
  7609  000C20  D0AA               	goto	l8181
  7610  000C22                     l8161:
  7611                           
  7612                           ;UI.c: 143: strcpy(month, "JUN");
  7613  000C22  0ED6               	movlw	low UI@month
  7614  000C24  0100               	movlb	0	; () banked
  7615  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7616  000C28  0E00               	movlw	high UI@month
  7617  000C2A  0100               	movlb	0	; () banked
  7618  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7619  000C2E  0EDF               	movlw	low STR_13
  7620  000C30  0100               	movlb	0	; () banked
  7621  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7622  000C34  0EFF               	movlw	high STR_13
  7623  000C36  0100               	movlb	0	; () banked
  7624  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7625  000C3A  ECF4  F024         	call	_strcpy	;wreg free
  7626                           
  7627                           ;UI.c: 144: break;
  7628  000C3E  D09B               	goto	l8181
  7629  000C40                     l8163:
  7630                           
  7631                           ;UI.c: 146: strcpy(month, "JUL");
  7632  000C40  0ED6               	movlw	low UI@month
  7633  000C42  0100               	movlb	0	; () banked
  7634  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7635  000C46  0E00               	movlw	high UI@month
  7636  000C48  0100               	movlb	0	; () banked
  7637  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7638  000C4C  0ED7               	movlw	low STR_14
  7639  000C4E  0100               	movlb	0	; () banked
  7640  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7641  000C52  0EFF               	movlw	high STR_14
  7642  000C54  0100               	movlb	0	; () banked
  7643  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7644  000C58  ECF4  F024         	call	_strcpy	;wreg free
  7645                           
  7646                           ;UI.c: 147: break;
  7647  000C5C  D08C               	goto	l8181
  7648  000C5E                     l8165:
  7649                           
  7650                           ;UI.c: 149: strcpy(month, "AUG");
  7651  000C5E  0ED6               	movlw	low UI@month
  7652  000C60  0100               	movlb	0	; () banked
  7653  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7654  000C64  0E00               	movlw	high UI@month
  7655  000C66  0100               	movlb	0	; () banked
  7656  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7657  000C6A  0ED3               	movlw	low STR_15
  7658  000C6C  0100               	movlb	0	; () banked
  7659  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7660  000C70  0EFF               	movlw	high STR_15
  7661  000C72  0100               	movlb	0	; () banked
  7662  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7663  000C76  ECF4  F024         	call	_strcpy	;wreg free
  7664                           
  7665                           ;UI.c: 150: break;
  7666  000C7A  D07D               	goto	l8181
  7667  000C7C                     l8167:
  7668                           
  7669                           ;UI.c: 152: strcpy(month, "SEP");
  7670  000C7C  0ED6               	movlw	low UI@month
  7671  000C7E  0100               	movlb	0	; () banked
  7672  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7673  000C82  0E00               	movlw	high UI@month
  7674  000C84  0100               	movlb	0	; () banked
  7675  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7676  000C88  0EE3               	movlw	low STR_16
  7677  000C8A  0100               	movlb	0	; () banked
  7678  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7679  000C8E  0EFF               	movlw	high STR_16
  7680  000C90  0100               	movlb	0	; () banked
  7681  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7682  000C94  ECF4  F024         	call	_strcpy	;wreg free
  7683                           
  7684                           ;UI.c: 153: break;
  7685  000C98  D06E               	goto	l8181
  7686  000C9A                     l8169:
  7687                           
  7688                           ;UI.c: 155: strcpy(month, "OCT");
  7689  000C9A  0ED6               	movlw	low UI@month
  7690  000C9C  0100               	movlb	0	; () banked
  7691  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7692  000CA0  0E00               	movlw	high UI@month
  7693  000CA2  0100               	movlb	0	; () banked
  7694  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7695  000CA6  0EF3               	movlw	low STR_17
  7696  000CA8  0100               	movlb	0	; () banked
  7697  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7698  000CAC  0EFF               	movlw	high STR_17
  7699  000CAE  0100               	movlb	0	; () banked
  7700  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7701  000CB2  ECF4  F024         	call	_strcpy	;wreg free
  7702                           
  7703                           ;UI.c: 156: break;
  7704  000CB6  D05F               	goto	l8181
  7705  000CB8                     l8171:
  7706                           
  7707                           ;UI.c: 158: strcpy(month, "NOV");
  7708  000CB8  0ED6               	movlw	low UI@month
  7709  000CBA  0100               	movlb	0	; () banked
  7710  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7711  000CBE  0E00               	movlw	high UI@month
  7712  000CC0  0100               	movlb	0	; () banked
  7713  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7714  000CC4  0EF7               	movlw	low STR_18
  7715  000CC6  0100               	movlb	0	; () banked
  7716  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7717  000CCA  0EFF               	movlw	high STR_18
  7718  000CCC  0100               	movlb	0	; () banked
  7719  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7720  000CD0  ECF4  F024         	call	_strcpy	;wreg free
  7721                           
  7722                           ;UI.c: 159: break;
  7723  000CD4  D050               	goto	l8181
  7724  000CD6                     l8173:
  7725                           
  7726                           ;UI.c: 161: strcpy(month, "DEC");
  7727  000CD6  0ED6               	movlw	low UI@month
  7728  000CD8  0100               	movlb	0	; () banked
  7729  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7730  000CDC  0E00               	movlw	high UI@month
  7731  000CDE  0100               	movlb	0	; () banked
  7732  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7733  000CE2  0ECF               	movlw	low STR_19
  7734  000CE4  0100               	movlb	0	; () banked
  7735  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7736  000CE8  0EFF               	movlw	high STR_19
  7737  000CEA  0100               	movlb	0	; () banked
  7738  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7739  000CEE  ECF4  F024         	call	_strcpy	;wreg free
  7740                           
  7741                           ;UI.c: 162: break;
  7742  000CF2  D041               	goto	l8181
  7743  000CF4                     l8175:
  7744                           
  7745                           ;UI.c: 164: strcpy(month, "ERR");
  7746  000CF4  0ED6               	movlw	low UI@month
  7747  000CF6  0100               	movlb	0	; () banked
  7748  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7749  000CFA  0E00               	movlw	high UI@month
  7750  000CFC  0100               	movlb	0	; () banked
  7751  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7752  000D00  0EEF               	movlw	low STR_20
  7753  000D02  0100               	movlb	0	; () banked
  7754  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7755  000D06  0EFF               	movlw	high STR_20
  7756  000D08  0100               	movlb	0	; () banked
  7757  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7758  000D0C  ECF4  F024         	call	_strcpy	;wreg free
  7759                           
  7760                           ;UI.c: 166: }
  7761                           
  7762                           ;UI.c: 165: break;
  7763  000D10  D032               	goto	l8181
  7764  000D12                     l8179:
  7765  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7766  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7767  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7768                           
  7769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7770                           ; Switch size 1, requested type "space"
  7771                           ; Number of cases is 1, Range of values is 0 to 0
  7772                           ; switch strategies available:
  7773                           ; Name         Instructions Cycles
  7774                           ; simple_byte            4     3 (average)
  7775                           ;	Chosen strategy is simple_byte
  7776  000D1E  0100               	movlb	0	; () banked
  7777  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7778  000D22  0A00               	xorlw	0	; case 0
  7779  000D24  A4D8               	btfss	status,2,c
  7780  000D26  D7E6               	goto	l8175
  7781                           
  7782                           ; BSR set to: 0
  7783                           ; Switch size 1, requested type "space"
  7784                           ; Number of cases is 12, Range of values is 1 to 12
  7785                           ; switch strategies available:
  7786                           ; Name         Instructions Cycles
  7787                           ; simple_byte           37    19 (average)
  7788                           ;	Chosen strategy is simple_byte
  7789  000D28  0100               	movlb	0	; () banked
  7790  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7791  000D2C  0A01               	xorlw	1	; case 1
  7792  000D2E  B4D8               	btfsc	status,2,c
  7793  000D30  D72D               	goto	l8151
  7794  000D32  0A03               	xorlw	3	; case 2
  7795  000D34  B4D8               	btfsc	status,2,c
  7796  000D36  D739               	goto	l8153
  7797  000D38  0A01               	xorlw	1	; case 3
  7798  000D3A  B4D8               	btfsc	status,2,c
  7799  000D3C  D745               	goto	l8155
  7800  000D3E  0A07               	xorlw	7	; case 4
  7801  000D40  B4D8               	btfsc	status,2,c
  7802  000D42  D751               	goto	l8157
  7803  000D44  0A01               	xorlw	1	; case 5
  7804  000D46  B4D8               	btfsc	status,2,c
  7805  000D48  D75D               	goto	l8159
  7806  000D4A  0A03               	xorlw	3	; case 6
  7807  000D4C  B4D8               	btfsc	status,2,c
  7808  000D4E  D769               	goto	l8161
  7809  000D50  0A01               	xorlw	1	; case 7
  7810  000D52  B4D8               	btfsc	status,2,c
  7811  000D54  D775               	goto	l8163
  7812  000D56  0A0F               	xorlw	15	; case 8
  7813  000D58  B4D8               	btfsc	status,2,c
  7814  000D5A  D781               	goto	l8165
  7815  000D5C  0A01               	xorlw	1	; case 9
  7816  000D5E  B4D8               	btfsc	status,2,c
  7817  000D60  D78D               	goto	l8167
  7818  000D62  0A03               	xorlw	3	; case 10
  7819  000D64  B4D8               	btfsc	status,2,c
  7820  000D66  D799               	goto	l8169
  7821  000D68  0A01               	xorlw	1	; case 11
  7822  000D6A  B4D8               	btfsc	status,2,c
  7823  000D6C  D7A5               	goto	l8171
  7824  000D6E  0A07               	xorlw	7	; case 12
  7825  000D70  B4D8               	btfsc	status,2,c
  7826  000D72  D7B1               	goto	l8173
  7827  000D74  D7BF               	goto	l8175
  7828  000D76                     l8181:
  7829                           
  7830                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7831  000D76  0E0A               	movlw	low STR_21
  7832  000D78  0100               	movlb	0	; () banked
  7833  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7834  000D7C  0EFB               	movlw	high STR_21
  7835  000D7E  0100               	movlb	0	; () banked
  7836  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7837  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7838  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7839  000D8A  0ED6               	movlw	low UI@month
  7840  000D8C  0100               	movlb	0	; () banked
  7841  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7842  000D90  0E00               	movlw	high UI@month
  7843  000D92  0100               	movlb	0	; () banked
  7844  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7845  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7846  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7847  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7848  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7849  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7850  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7851  000DAE  ECB8  F008         	call	_printf	;wreg free
  7852                           
  7853                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7854  000DB2  0E00               	movlw	0
  7855  000DB4  0100               	movlb	0	; () banked
  7856  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7857  000DB8                     l8185:
  7858                           
  7859                           ; BSR set to: 0
  7860  000DB8  0E63               	movlw	99
  7861  000DBA  0100               	movlb	0	; () banked
  7862  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7863  000DBE  D001               	goto	l8189
  7864  000DC0  D00C               	goto	l8193
  7865  000DC2                     l8189:
  7866                           
  7867                           ; BSR set to: 0
  7868  000DC2  0E68               	movlw	104
  7869  000DC4  0100               	movlb	0	; () banked
  7870  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7871  000DC8  0EE4               	movlw	228
  7872  000DCA                     u8547:
  7873  000DCA  2EE8               	decfsz	wreg,f,c
  7874  000DCC  D7FE               	bra	u8547
  7875  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7876  000DD0  D7FC               	bra	u8547
  7877  000DD2  F000               	nop	
  7878  000DD4  0100               	movlb	0	; () banked
  7879  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7880  000DD8  D7EF               	goto	l8185
  7881  000DDA                     l8193:
  7882                           
  7883                           ; BSR set to: 0
  7884  000DDA  0100               	movlb	0	; () banked
  7885  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7886  000DDE  0100               	movlb	0	; () banked
  7887  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7888  000DE2  B4D8               	btfsc	status,2,c
  7889  000DE4  0012               	return	
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7893                           
  7894                           ; BSR set to: 0
  7895                           
  7896                           ; BSR set to: 0
  7897  000DE6  0E00               	movlw	0
  7898  000DE8  0100               	movlb	0	; () banked
  7899  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7900  000DEC                     l8199:
  7901                           
  7902                           ; BSR set to: 0
  7903  000DEC  0E63               	movlw	99
  7904  000DEE  0100               	movlb	0	; () banked
  7905  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7906  000DF2  D001               	goto	l8203
  7907  000DF4  D00C               	goto	l8207
  7908  000DF6                     l8203:
  7909                           
  7910                           ; BSR set to: 0
  7911  000DF6  0E68               	movlw	104
  7912  000DF8  0100               	movlb	0	; () banked
  7913  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7914  000DFC  0EE4               	movlw	228
  7915  000DFE                     u8557:
  7916  000DFE  2EE8               	decfsz	wreg,f,c
  7917  000E00  D7FE               	bra	u8557
  7918  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7919  000E04  D7FC               	bra	u8557
  7920  000E06  F000               	nop	
  7921  000E08  0100               	movlb	0	; () banked
  7922  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7923  000E0C  D7EF               	goto	l8199
  7924  000E0E                     l8207:
  7925                           
  7926                           ; BSR set to: 0
  7927  000E0E  0100               	movlb	0	; () banked
  7928  000E10  51F6               	movf	_logstate& (0+255),w,b
  7929  000E12  0100               	movlb	0	; () banked
  7930  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7931  000E16  B4D8               	btfsc	status,2,c
  7932  000E18  0012               	return	
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7936                           
  7937                           ; BSR set to: 0
  7938                           
  7939                           ; BSR set to: 0
  7940  000E1A  0E01               	movlw	1
  7941  000E1C  EC8A  F027         	call	_lcdInst
  7942  000E20  0E68               	movlw	104
  7943  000E22  0100               	movlb	0	; () banked
  7944  000E24  6FC4               	movwf	??_UI& (0+255),b
  7945  000E26  0EE4               	movlw	228
  7946  000E28                     u8567:
  7947  000E28  2EE8               	decfsz	wreg,f,c
  7948  000E2A  D7FE               	bra	u8567
  7949  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7950  000E2E  D7FC               	bra	u8567
  7951  000E30  F000               	nop	
  7952                           
  7953                           ;UI.c: 173: lcdInst(0b10000000);;
  7954  000E32  0E80               	movlw	128
  7955  000E34  EC8A  F027         	call	_lcdInst
  7956                           
  7957                           ;UI.c: 174: printf("DURATION:");
  7958  000E38  0E9B               	movlw	low STR_22
  7959  000E3A  0100               	movlb	0	; () banked
  7960  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7961  000E3E  0EFF               	movlw	high STR_22
  7962  000E40  0100               	movlb	0	; () banked
  7963  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7964  000E44  ECB8  F008         	call	_printf	;wreg free
  7965                           
  7966                           ;UI.c: 175: lcdInst(0b11000000);;
  7967  000E48  0EC0               	movlw	192
  7968  000E4A  EC8A  F027         	call	_lcdInst
  7969                           
  7970                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7971  000E4E  0E0E               	movlw	14
  7972  000E50  0100               	movlb	0	; () banked
  7973  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7974  000E54  0E10               	movlw	16
  7975  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7976  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7977  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7978  000E60  EC0C  F020         	call	___awmod	;wreg free
  7979  000E64  C080  F0C6         	movff	?___awmod,_UI$2332
  7980  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2332+1
  7981                           
  7982                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7983  000E6C  0E19               	movlw	low STR_23
  7984  000E6E  0100               	movlb	0	; () banked
  7985  000E70  6F8E               	movwf	printf@f& (0+255),b
  7986  000E72  0EFF               	movlw	high STR_23
  7987  000E74  0100               	movlb	0	; () banked
  7988  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7989  000E78  0E0E               	movlw	14
  7990  000E7A  0100               	movlb	0	; () banked
  7991  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7992  000E7E  0E10               	movlw	16
  7993  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7994  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7995  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7996  000E8A  EC0C  F020         	call	___awmod	;wreg free
  7997  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7998  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7999  000E96  0E00               	movlw	0
  8000  000E98  0100               	movlb	0	; () banked
  8001  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8002  000E9C  0E3C               	movlw	60
  8003  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  8004  000EA0  ECFA  F01E         	call	___awdiv	;wreg free
  8005  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  8006  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  8007  000EAC  C0C6  F080         	movff	_UI$2332,___awmod@dividend
  8008  000EB0  C0C7  F081         	movff	_UI$2332+1,___awmod@dividend+1
  8009  000EB4  0E00               	movlw	0
  8010  000EB6  0100               	movlb	0	; () banked
  8011  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8012  000EBA  0E3C               	movlw	60
  8013  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8014  000EBE  EC0C  F020         	call	___awmod	;wreg free
  8015  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  8016  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  8017  000ECA  ECB8  F008         	call	_printf	;wreg free
  8018                           
  8019                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8020  000ECE  0E00               	movlw	0
  8021  000ED0  0100               	movlb	0	; () banked
  8022  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  8023  000ED4                     l8227:
  8024                           
  8025                           ; BSR set to: 0
  8026  000ED4  0E63               	movlw	99
  8027  000ED6  0100               	movlb	0	; () banked
  8028  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  8029  000EDA  D001               	goto	l8231
  8030  000EDC  D00C               	goto	l8235
  8031  000EDE                     l8231:
  8032                           
  8033                           ; BSR set to: 0
  8034  000EDE  0E68               	movlw	104
  8035  000EE0  0100               	movlb	0	; () banked
  8036  000EE2  6FC4               	movwf	??_UI& (0+255),b
  8037  000EE4  0EE4               	movlw	228
  8038  000EE6                     u8577:
  8039  000EE6  2EE8               	decfsz	wreg,f,c
  8040  000EE8  D7FE               	bra	u8577
  8041  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  8042  000EEC  D7FC               	bra	u8577
  8043  000EEE  F000               	nop	
  8044  000EF0  0100               	movlb	0	; () banked
  8045  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  8046  000EF4  D7EF               	goto	l8227
  8047  000EF6                     l8235:
  8048                           
  8049                           ; BSR set to: 0
  8050  000EF6  0100               	movlb	0	; () banked
  8051  000EF8  51F6               	movf	_logstate& (0+255),w,b
  8052  000EFA  0100               	movlb	0	; () banked
  8053  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8054  000EFE  B4D8               	btfsc	status,2,c
  8055  000F00  0012               	return	
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8059                           
  8060                           ; BSR set to: 0
  8061                           
  8062                           ; BSR set to: 0
  8063  000F02  0E00               	movlw	0
  8064  000F04  0100               	movlb	0	; () banked
  8065  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  8066  000F08                     l8241:
  8067                           
  8068                           ; BSR set to: 0
  8069  000F08  0E63               	movlw	99
  8070  000F0A  0100               	movlb	0	; () banked
  8071  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  8072  000F0E  D001               	goto	l8245
  8073  000F10  D00C               	goto	l8249
  8074  000F12                     l8245:
  8075                           
  8076                           ; BSR set to: 0
  8077  000F12  0E68               	movlw	104
  8078  000F14  0100               	movlb	0	; () banked
  8079  000F16  6FC4               	movwf	??_UI& (0+255),b
  8080  000F18  0EE4               	movlw	228
  8081  000F1A                     u8587:
  8082  000F1A  2EE8               	decfsz	wreg,f,c
  8083  000F1C  D7FE               	bra	u8587
  8084  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  8085  000F20  D7FC               	bra	u8587
  8086  000F22  F000               	nop	
  8087  000F24  0100               	movlb	0	; () banked
  8088  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  8089  000F28  D7EF               	goto	l8241
  8090  000F2A                     l8249:
  8091                           
  8092                           ; BSR set to: 0
  8093  000F2A  0100               	movlb	0	; () banked
  8094  000F2C  51F6               	movf	_logstate& (0+255),w,b
  8095  000F2E  0100               	movlb	0	; () banked
  8096  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8097  000F32  B4D8               	btfsc	status,2,c
  8098  000F34  0012               	return	
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106  000F36  0E01               	movlw	1
  8107  000F38  EC8A  F027         	call	_lcdInst
  8108  000F3C  0E68               	movlw	104
  8109  000F3E  0100               	movlb	0	; () banked
  8110  000F40  6FC4               	movwf	??_UI& (0+255),b
  8111  000F42  0EE4               	movlw	228
  8112  000F44                     u8597:
  8113  000F44  2EE8               	decfsz	wreg,f,c
  8114  000F46  D7FE               	bra	u8597
  8115  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  8116  000F4A  D7FC               	bra	u8597
  8117  000F4C  F000               	nop	
  8118                           
  8119                           ;UI.c: 182: lcdInst(0b10000000);;
  8120  000F4E  0E80               	movlw	128
  8121  000F50  EC8A  F027         	call	_lcdInst
  8122                           
  8123                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  8124  000F54  0E3C               	movlw	low STR_24
  8125  000F56  0100               	movlb	0	; () banked
  8126  000F58  6F8E               	movwf	printf@f& (0+255),b
  8127  000F5A  0EFD               	movlw	high STR_24
  8128  000F5C  0100               	movlb	0	; () banked
  8129  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8130  000F60  ECB8  F008         	call	_printf	;wreg free
  8131                           
  8132                           ;UI.c: 184: lcdInst(0b11000000);;
  8133  000F64  0EC0               	movlw	192
  8134  000F66  EC8A  F027         	call	_lcdInst
  8135                           
  8136                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  8137  000F6A  0E19               	movlw	low STR_25
  8138  000F6C  0100               	movlb	0	; () banked
  8139  000F6E  6F8E               	movwf	printf@f& (0+255),b
  8140  000F70  0EFE               	movlw	high STR_25
  8141  000F72  0100               	movlb	0	; () banked
  8142  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  8143  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  8144  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  8145  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  8146  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  8147  000F86  ECB8  F008         	call	_printf	;wreg free
  8148                           
  8149                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8150  000F8A  0E00               	movlw	0
  8151  000F8C  0100               	movlb	0	; () banked
  8152  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  8153  000F90                     l8267:
  8154                           
  8155                           ; BSR set to: 0
  8156  000F90  0E63               	movlw	99
  8157  000F92  0100               	movlb	0	; () banked
  8158  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  8159  000F96  D001               	goto	l8271
  8160  000F98  D00C               	goto	l8275
  8161  000F9A                     l8271:
  8162                           
  8163                           ; BSR set to: 0
  8164  000F9A  0E68               	movlw	104
  8165  000F9C  0100               	movlb	0	; () banked
  8166  000F9E  6FC4               	movwf	??_UI& (0+255),b
  8167  000FA0  0EE4               	movlw	228
  8168  000FA2                     u8607:
  8169  000FA2  2EE8               	decfsz	wreg,f,c
  8170  000FA4  D7FE               	bra	u8607
  8171  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  8172  000FA8  D7FC               	bra	u8607
  8173  000FAA  F000               	nop	
  8174  000FAC  0100               	movlb	0	; () banked
  8175  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  8176  000FB0  D7EF               	goto	l8267
  8177  000FB2                     l8275:
  8178                           
  8179                           ; BSR set to: 0
  8180  000FB2  0100               	movlb	0	; () banked
  8181  000FB4  51F6               	movf	_logstate& (0+255),w,b
  8182  000FB6  0100               	movlb	0	; () banked
  8183  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8184  000FBA  B4D8               	btfsc	status,2,c
  8185  000FBC  0012               	return	
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8189                           
  8190                           ; BSR set to: 0
  8191                           
  8192                           ; BSR set to: 0
  8193  000FBE  0E00               	movlw	0
  8194  000FC0  0100               	movlb	0	; () banked
  8195  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  8196  000FC4                     l8281:
  8197                           
  8198                           ; BSR set to: 0
  8199  000FC4  0E63               	movlw	99
  8200  000FC6  0100               	movlb	0	; () banked
  8201  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  8202  000FCA  D001               	goto	l8285
  8203  000FCC  D00C               	goto	l8289
  8204  000FCE                     l8285:
  8205                           
  8206                           ; BSR set to: 0
  8207  000FCE  0E68               	movlw	104
  8208  000FD0  0100               	movlb	0	; () banked
  8209  000FD2  6FC4               	movwf	??_UI& (0+255),b
  8210  000FD4  0EE4               	movlw	228
  8211  000FD6                     u8617:
  8212  000FD6  2EE8               	decfsz	wreg,f,c
  8213  000FD8  D7FE               	bra	u8617
  8214  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  8215  000FDC  D7FC               	bra	u8617
  8216  000FDE  F000               	nop	
  8217  000FE0  0100               	movlb	0	; () banked
  8218  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  8219  000FE4  D7EF               	goto	l8281
  8220  000FE6                     l8289:
  8221                           
  8222                           ; BSR set to: 0
  8223  000FE6  0100               	movlb	0	; () banked
  8224  000FE8  51F6               	movf	_logstate& (0+255),w,b
  8225  000FEA  0100               	movlb	0	; () banked
  8226  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8227  000FEE  B4D8               	btfsc	status,2,c
  8228  000FF0  0012               	return	
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8232                           
  8233                           ; BSR set to: 0
  8234                           
  8235                           ; BSR set to: 0
  8236  000FF2  0E01               	movlw	1
  8237  000FF4  EC8A  F027         	call	_lcdInst
  8238  000FF8  0E68               	movlw	104
  8239  000FFA  0100               	movlb	0	; () banked
  8240  000FFC  6FC4               	movwf	??_UI& (0+255),b
  8241  000FFE  0EE4               	movlw	228
  8242  001000                     u8627:
  8243  001000  2EE8               	decfsz	wreg,f,c
  8244  001002  D7FE               	bra	u8627
  8245  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  8246  001006  D7FC               	bra	u8627
  8247  001008  F000               	nop	
  8248                           
  8249                           ;UI.c: 191: lcdInst(0b10000000);;
  8250  00100A  0E80               	movlw	128
  8251  00100C  EC8A  F027         	call	_lcdInst
  8252                           
  8253                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  8254  001010  0E4D               	movlw	low STR_26
  8255  001012  0100               	movlb	0	; () banked
  8256  001014  6F8E               	movwf	printf@f& (0+255),b
  8257  001016  0EFD               	movlw	high STR_26
  8258  001018  0100               	movlb	0	; () banked
  8259  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8260  00101C  ECB8  F008         	call	_printf	;wreg free
  8261                           
  8262                           ;UI.c: 193: lcdInst(0b11000000);;
  8263  001020  0EC0               	movlw	192
  8264  001022  EC8A  F027         	call	_lcdInst
  8265                           
  8266                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  8267  001026  0E08               	movlw	low STR_27
  8268  001028  0100               	movlb	0	; () banked
  8269  00102A  6F8E               	movwf	printf@f& (0+255),b
  8270  00102C  0EFE               	movlw	high STR_27
  8271  00102E  0100               	movlb	0	; () banked
  8272  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  8273  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  8274  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  8275  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  8276  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  8277  001042  ECB8  F008         	call	_printf	;wreg free
  8278                           
  8279                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8280  001046  0E00               	movlw	0
  8281  001048  0100               	movlb	0	; () banked
  8282  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  8283  00104C                     l8307:
  8284                           
  8285                           ; BSR set to: 0
  8286  00104C  0E63               	movlw	99
  8287  00104E  0100               	movlb	0	; () banked
  8288  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  8289  001052  D001               	goto	l8311
  8290  001054  D00C               	goto	l8315
  8291  001056                     l8311:
  8292                           
  8293                           ; BSR set to: 0
  8294  001056  0E68               	movlw	104
  8295  001058  0100               	movlb	0	; () banked
  8296  00105A  6FC4               	movwf	??_UI& (0+255),b
  8297  00105C  0EE4               	movlw	228
  8298  00105E                     u8637:
  8299  00105E  2EE8               	decfsz	wreg,f,c
  8300  001060  D7FE               	bra	u8637
  8301  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  8302  001064  D7FC               	bra	u8637
  8303  001066  F000               	nop	
  8304  001068  0100               	movlb	0	; () banked
  8305  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  8306  00106C  D7EF               	goto	l8307
  8307  00106E                     l8315:
  8308                           
  8309                           ; BSR set to: 0
  8310  00106E  0100               	movlb	0	; () banked
  8311  001070  51F6               	movf	_logstate& (0+255),w,b
  8312  001072  0100               	movlb	0	; () banked
  8313  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8314  001076  B4D8               	btfsc	status,2,c
  8315  001078  0012               	return	
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8319                           
  8320                           ; BSR set to: 0
  8321                           
  8322                           ; BSR set to: 0
  8323  00107A  0E00               	movlw	0
  8324  00107C  0100               	movlb	0	; () banked
  8325  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8326  001080                     l8321:
  8327                           
  8328                           ; BSR set to: 0
  8329  001080  0E63               	movlw	99
  8330  001082  0100               	movlb	0	; () banked
  8331  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8332  001086  D001               	goto	l8325
  8333  001088  D00C               	goto	l8329
  8334  00108A                     l8325:
  8335                           
  8336                           ; BSR set to: 0
  8337  00108A  0E68               	movlw	104
  8338  00108C  0100               	movlb	0	; () banked
  8339  00108E  6FC4               	movwf	??_UI& (0+255),b
  8340  001090  0EE4               	movlw	228
  8341  001092                     u8647:
  8342  001092  2EE8               	decfsz	wreg,f,c
  8343  001094  D7FE               	bra	u8647
  8344  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8345  001098  D7FC               	bra	u8647
  8346  00109A  F000               	nop	
  8347  00109C  0100               	movlb	0	; () banked
  8348  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8349  0010A0  D7EF               	goto	l8321
  8350  0010A2                     l8329:
  8351                           
  8352                           ; BSR set to: 0
  8353  0010A2  0100               	movlb	0	; () banked
  8354  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8355  0010A6  0100               	movlb	0	; () banked
  8356  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8357  0010AA  B4D8               	btfsc	status,2,c
  8358  0010AC  0012               	return	
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8362                           
  8363                           ; BSR set to: 0
  8364                           
  8365                           ; BSR set to: 0
  8366  0010AE  0E01               	movlw	1
  8367  0010B0  EC8A  F027         	call	_lcdInst
  8368  0010B4  0E68               	movlw	104
  8369  0010B6  0100               	movlb	0	; () banked
  8370  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8371  0010BA  0EE4               	movlw	228
  8372  0010BC                     u8657:
  8373  0010BC  2EE8               	decfsz	wreg,f,c
  8374  0010BE  D7FE               	bra	u8657
  8375  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8376  0010C2  D7FC               	bra	u8657
  8377  0010C4  F000               	nop	
  8378                           
  8379                           ;UI.c: 200: lcdInst(0b10000000);;
  8380  0010C6  0E80               	movlw	128
  8381  0010C8  EC8A  F027         	call	_lcdInst
  8382                           
  8383                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8384  0010CC  0E5E               	movlw	low STR_28
  8385  0010CE  0100               	movlb	0	; () banked
  8386  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8387  0010D2  0EFD               	movlw	high STR_28
  8388  0010D4  0100               	movlb	0	; () banked
  8389  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8390  0010D8  ECB8  F008         	call	_printf	;wreg free
  8391                           
  8392                           ;UI.c: 202: lcdInst(0b11000000);;
  8393  0010DC  0EC0               	movlw	192
  8394  0010DE  EC8A  F027         	call	_lcdInst
  8395                           
  8396                           ;UI.c: 203: printf("%d", log_count_total);
  8397  0010E2  0E16               	movlw	low (STR_27+14)
  8398  0010E4  0100               	movlb	0	; () banked
  8399  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8400  0010E8  0EFE               	movlw	high (STR_27+14)
  8401  0010EA  0100               	movlb	0	; () banked
  8402  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8403  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8404  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8405  0010F6  ECB8  F008         	call	_printf	;wreg free
  8406                           
  8407                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8408  0010FA  0E00               	movlw	0
  8409  0010FC  0100               	movlb	0	; () banked
  8410  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8411  001100                     l8347:
  8412                           
  8413                           ; BSR set to: 0
  8414  001100  0E63               	movlw	99
  8415  001102  0100               	movlb	0	; () banked
  8416  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8417  001106  D001               	goto	l8351
  8418  001108  D00C               	goto	l8355
  8419  00110A                     l8351:
  8420                           
  8421                           ; BSR set to: 0
  8422  00110A  0E68               	movlw	104
  8423  00110C  0100               	movlb	0	; () banked
  8424  00110E  6FC4               	movwf	??_UI& (0+255),b
  8425  001110  0EE4               	movlw	228
  8426  001112                     u8667:
  8427  001112  2EE8               	decfsz	wreg,f,c
  8428  001114  D7FE               	bra	u8667
  8429  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8430  001118  D7FC               	bra	u8667
  8431  00111A  F000               	nop	
  8432  00111C  0100               	movlb	0	; () banked
  8433  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8434  001120  D7EF               	goto	l8347
  8435  001122                     l8355:
  8436                           
  8437                           ; BSR set to: 0
  8438  001122  0100               	movlb	0	; () banked
  8439  001124  51F6               	movf	_logstate& (0+255),w,b
  8440  001126  0100               	movlb	0	; () banked
  8441  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8442  00112A  B4D8               	btfsc	status,2,c
  8443  00112C  0012               	return	
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8447                           
  8448                           ; BSR set to: 0
  8449                           
  8450                           ; BSR set to: 0
  8451  00112E  0E00               	movlw	0
  8452  001130  0100               	movlb	0	; () banked
  8453  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8454  001134                     l8361:
  8455                           
  8456                           ; BSR set to: 0
  8457  001134  0E63               	movlw	99
  8458  001136  0100               	movlb	0	; () banked
  8459  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8460  00113A  D001               	goto	l8365
  8461  00113C  D00C               	goto	l8369
  8462  00113E                     l8365:
  8463                           
  8464                           ; BSR set to: 0
  8465  00113E  0E68               	movlw	104
  8466  001140  0100               	movlb	0	; () banked
  8467  001142  6FC4               	movwf	??_UI& (0+255),b
  8468  001144  0EE4               	movlw	228
  8469  001146                     u8677:
  8470  001146  2EE8               	decfsz	wreg,f,c
  8471  001148  D7FE               	bra	u8677
  8472  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8473  00114C  D7FC               	bra	u8677
  8474  00114E  F000               	nop	
  8475  001150  0100               	movlb	0	; () banked
  8476  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8477  001154  D7EF               	goto	l8361
  8478  001156                     l8369:
  8479                           
  8480                           ; BSR set to: 0
  8481  001156  0100               	movlb	0	; () banked
  8482  001158  51F6               	movf	_logstate& (0+255),w,b
  8483  00115A  0100               	movlb	0	; () banked
  8484  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8485  00115E  B4D8               	btfsc	status,2,c
  8486  001160  0012               	return	
  8487  001162                     l8373:
  8488  001162  0100               	movlb	0	; () banked
  8489  001164  51F6               	movf	_logstate& (0+255),w,b
  8490  001166  0100               	movlb	0	; () banked
  8491  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8492  00116A  B4D8               	btfsc	status,2,c
  8493  00116C  0012               	return	
  8494  00116E  D44A               	goto	l8069
  8495  001170                     __end_of_UI:
  8496                           	opt stack 0
  8497                           tblptru	equ	0xFF8
  8498                           tblptrh	equ	0xFF7
  8499                           tblptrl	equ	0xFF6
  8500                           tablat	equ	0xFF5
  8501                           prodh	equ	0xFF4
  8502                           prodl	equ	0xFF3
  8503                           intcon	equ	0xFF2
  8504                           intcon2	equ	0xFF1
  8505                           intcon3	equ	0xFF0
  8506                           postinc0	equ	0xFEE
  8507                           wreg	equ	0xFE8
  8508                           postdec1	equ	0xFE5
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           fsr2h	equ	0xFDA
  8514                           fsr2l	equ	0xFD9
  8515                           status	equ	0xFD8
  8516                           
  8517 ;; *************** function _printRTC *****************
  8518 ;; Defined at:
  8519 ;;		line 63 in file "RTC.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;		None
  8522 ;; Auto vars:     Size  Location     Type
  8523 ;;  i               2   66[BANK0 ] int 
  8524 ;;  INT_time       14   46[BANK0 ] int [7]
  8525 ;;  month           4   62[BANK0 ] unsigned char [4]
  8526 ;;  RTC_month       2   60[BANK0 ] int 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      void 
  8529 ;; Registers used:
  8530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;Total ram usage:       25 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:   10
  8543 ;; This function calls:
  8544 ;;		_getRTC
  8545 ;;		_lcdInst
  8546 ;;		_printf
  8547 ;;		_strcpy
  8548 ;; This function is called by:
  8549 ;;		_UI
  8550 ;;		_change_state_to_menu_start
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           	psect	text24
  8555  00231C                     __ptext24:
  8556                           	opt stack 0
  8557  00231C                     _printRTC:
  8558                           	opt stack 18
  8559                           
  8560                           ;RTC.c: 64: getRTC();
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;incstack = 0
  8564  00231C  ECA3  F020         	call	_getRTC	;wreg free
  8565                           
  8566                           ;RTC.c: 65: char month[] = "MMM";
  8567  002320  C139  F0BE         	movff	printRTC@F3219,printRTC@month
  8568  002324  C13A  F0BF         	movff	printRTC@F3219+1,printRTC@month+1
  8569  002328  C13B  F0C0         	movff	printRTC@F3219+2,printRTC@month+2
  8570  00232C  C13C  F0C1         	movff	printRTC@F3219+3,printRTC@month+3
  8571                           
  8572                           ;RTC.c: 66: int INT_time[7];
  8573                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8574  002330  0E00               	movlw	0
  8575  002332  0100               	movlb	0	; () banked
  8576  002334  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8577  002336  0E00               	movlw	0
  8578  002338  6FC2               	movwf	printRTC@i& (0+255),b
  8579                           
  8580                           ; BSR set to: 0
  8581  00233A  0100               	movlb	0	; () banked
  8582  00233C  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8583  00233E  D008               	goto	l6231
  8584  002340  0100               	movlb	0	; () banked
  8585  002342  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8586  002344  E146               	bnz	l606
  8587  002346  0E07               	movlw	7
  8588  002348  0100               	movlb	0	; () banked
  8589  00234A  5DC2               	subwf	printRTC@i& (0+255),w,b
  8590  00234C  B0D8               	btfsc	status,0,c
  8591  00234E  D041               	goto	l606
  8592  002350                     l6231:
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8596  002350  0E24               	movlw	low _time
  8597  002352  0100               	movlb	0	; () banked
  8598  002354  25C2               	addwf	printRTC@i& (0+255),w,b
  8599  002356  6ED9               	movwf	fsr2l,c
  8600  002358  0E01               	movlw	high _time
  8601  00235A  0100               	movlb	0	; () banked
  8602  00235C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8603  00235E  6EDA               	movwf	fsr2h,c
  8604  002360  50DF               	movf	indf2,w,c
  8605  002362  0100               	movlb	0	; () banked
  8606  002364  6FAB               	movwf	??_printRTC& (0+255),b
  8607  002366  0100               	movlb	0	; () banked
  8608  002368  3BAB               	swapf	??_printRTC& (0+255),f,b
  8609  00236A  0E0F               	movlw	15
  8610  00236C  17AB               	andwf	??_printRTC& (0+255),f,b
  8611  00236E  0E0F               	movlw	15
  8612  002370  0100               	movlb	0	; () banked
  8613  002372  17AB               	andwf	??_printRTC& (0+255),f,b
  8614  002374  0100               	movlb	0	; () banked
  8615  002376  51AB               	movf	??_printRTC& (0+255),w,b
  8616  002378  0D0A               	mullw	10
  8617  00237A  0E24               	movlw	low _time
  8618  00237C  0100               	movlb	0	; () banked
  8619  00237E  25C2               	addwf	printRTC@i& (0+255),w,b
  8620  002380  6ED9               	movwf	fsr2l,c
  8621  002382  0E01               	movlw	high _time
  8622  002384  0100               	movlb	0	; () banked
  8623  002386  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8624  002388  6EDA               	movwf	fsr2h,c
  8625  00238A  50DF               	movf	indf2,w,c
  8626  00238C  0B0F               	andlw	15
  8627  00238E  0100               	movlb	0	; () banked
  8628  002390  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8629  002392  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8630  002394  50F3               	movf	prodl,w,c
  8631  002396  0100               	movlb	0	; () banked
  8632  002398  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8633  00239A  50F4               	movf	prodh,w,c
  8634  00239C  0100               	movlb	0	; () banked
  8635  00239E  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8636  0023A0  90D8               	bcf	status,0,c
  8637  0023A2  0100               	movlb	0	; () banked
  8638  0023A4  35C2               	rlcf	printRTC@i& (0+255),w,b
  8639  0023A6  6ED9               	movwf	fsr2l,c
  8640  0023A8  0100               	movlb	0	; () banked
  8641  0023AA  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8642  0023AC  6EDA               	movwf	fsr2h,c
  8643  0023AE  0EAE               	movlw	low printRTC@INT_time
  8644  0023B0  26D9               	addwf	fsr2l,f,c
  8645  0023B2  0E00               	movlw	high printRTC@INT_time
  8646  0023B4  22DA               	addwfc	fsr2h,f,c
  8647  0023B6  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8648  0023BA  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8649                           
  8650                           ; BSR set to: 0
  8651  0023BE  0100               	movlb	0	; () banked
  8652  0023C0  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8653  0023C2  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656  0023C4  0100               	movlb	0	; () banked
  8657  0023C6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8658  0023C8  D7C3               	goto	l6231
  8659  0023CA  0100               	movlb	0	; () banked
  8660  0023CC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8661  0023CE  E101               	bnz	u5030
  8662  0023D0  D7BA               	goto	L7
  8663  0023D2                     u5030:
  8664  0023D2                     l606:
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;RTC.c: 69: }
  8668                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8669  0023D2  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8670  0023D6  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8671                           
  8672                           ;RTC.c: 71: switch(RTC_month){
  8673  0023DA  D0B4               	goto	l6263
  8674  0023DC                     l6237:
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;RTC.c: 73: strcpy(month, "JAN");
  8678  0023DC  0EBE               	movlw	low printRTC@month
  8679  0023DE  0100               	movlb	0	; () banked
  8680  0023E0  6F80               	movwf	strcpy@to& (0+255),b
  8681  0023E2  0E00               	movlw	high printRTC@month
  8682  0023E4  0100               	movlb	0	; () banked
  8683  0023E6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8684  0023E8  0EDB               	movlw	low STR_8
  8685  0023EA  0100               	movlb	0	; () banked
  8686  0023EC  6F82               	movwf	strcpy@from& (0+255),b
  8687  0023EE  0EFF               	movlw	high STR_8
  8688  0023F0  0100               	movlb	0	; () banked
  8689  0023F2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8690  0023F4  ECF4  F024         	call	_strcpy	;wreg free
  8691                           
  8692                           ;RTC.c: 74: break;
  8693  0023F8  D0D4               	goto	l6265
  8694  0023FA                     l6239:
  8695                           
  8696                           ;RTC.c: 76: strcpy(month, "FEB");
  8697  0023FA  0EBE               	movlw	low printRTC@month
  8698  0023FC  0100               	movlb	0	; () banked
  8699  0023FE  6F80               	movwf	strcpy@to& (0+255),b
  8700  002400  0E00               	movlw	high printRTC@month
  8701  002402  0100               	movlb	0	; () banked
  8702  002404  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8703  002406  0ECB               	movlw	low STR_9
  8704  002408  0100               	movlb	0	; () banked
  8705  00240A  6F82               	movwf	strcpy@from& (0+255),b
  8706  00240C  0EFF               	movlw	high STR_9
  8707  00240E  0100               	movlb	0	; () banked
  8708  002410  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8709  002412  ECF4  F024         	call	_strcpy	;wreg free
  8710                           
  8711                           ;RTC.c: 77: break;
  8712  002416  D0C5               	goto	l6265
  8713  002418                     l6241:
  8714                           
  8715                           ;RTC.c: 79: strcpy(month, "MAR");
  8716  002418  0EBE               	movlw	low printRTC@month
  8717  00241A  0100               	movlb	0	; () banked
  8718  00241C  6F80               	movwf	strcpy@to& (0+255),b
  8719  00241E  0E00               	movlw	high printRTC@month
  8720  002420  0100               	movlb	0	; () banked
  8721  002422  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8722  002424  0EE7               	movlw	low STR_10
  8723  002426  0100               	movlb	0	; () banked
  8724  002428  6F82               	movwf	strcpy@from& (0+255),b
  8725  00242A  0EFF               	movlw	high STR_10
  8726  00242C  0100               	movlb	0	; () banked
  8727  00242E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8728  002430  ECF4  F024         	call	_strcpy	;wreg free
  8729                           
  8730                           ;RTC.c: 80: break;
  8731  002434  D0B6               	goto	l6265
  8732  002436                     l6243:
  8733                           
  8734                           ;RTC.c: 82: strcpy(month, "APR");
  8735  002436  0EBE               	movlw	low printRTC@month
  8736  002438  0100               	movlb	0	; () banked
  8737  00243A  6F80               	movwf	strcpy@to& (0+255),b
  8738  00243C  0E00               	movlw	high printRTC@month
  8739  00243E  0100               	movlb	0	; () banked
  8740  002440  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8741  002442  0EEB               	movlw	low STR_11
  8742  002444  0100               	movlb	0	; () banked
  8743  002446  6F82               	movwf	strcpy@from& (0+255),b
  8744  002448  0EFF               	movlw	high STR_11
  8745  00244A  0100               	movlb	0	; () banked
  8746  00244C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8747  00244E  ECF4  F024         	call	_strcpy	;wreg free
  8748                           
  8749                           ;RTC.c: 83: break;
  8750  002452  D0A7               	goto	l6265
  8751  002454                     l6245:
  8752                           
  8753                           ;RTC.c: 85: strcpy(month, "MAY");
  8754  002454  0EBE               	movlw	low printRTC@month
  8755  002456  0100               	movlb	0	; () banked
  8756  002458  6F80               	movwf	strcpy@to& (0+255),b
  8757  00245A  0E00               	movlw	high printRTC@month
  8758  00245C  0100               	movlb	0	; () banked
  8759  00245E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8760  002460  0EFB               	movlw	low STR_12
  8761  002462  0100               	movlb	0	; () banked
  8762  002464  6F82               	movwf	strcpy@from& (0+255),b
  8763  002466  0EFF               	movlw	high STR_12
  8764  002468  0100               	movlb	0	; () banked
  8765  00246A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8766  00246C  ECF4  F024         	call	_strcpy	;wreg free
  8767                           
  8768                           ;RTC.c: 86: break;
  8769  002470  D098               	goto	l6265
  8770  002472                     l6247:
  8771                           
  8772                           ;RTC.c: 88: strcpy(month, "JUN");
  8773  002472  0EBE               	movlw	low printRTC@month
  8774  002474  0100               	movlb	0	; () banked
  8775  002476  6F80               	movwf	strcpy@to& (0+255),b
  8776  002478  0E00               	movlw	high printRTC@month
  8777  00247A  0100               	movlb	0	; () banked
  8778  00247C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8779  00247E  0EDF               	movlw	low STR_13
  8780  002480  0100               	movlb	0	; () banked
  8781  002482  6F82               	movwf	strcpy@from& (0+255),b
  8782  002484  0EFF               	movlw	high STR_13
  8783  002486  0100               	movlb	0	; () banked
  8784  002488  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8785  00248A  ECF4  F024         	call	_strcpy	;wreg free
  8786                           
  8787                           ;RTC.c: 89: break;
  8788  00248E  D089               	goto	l6265
  8789  002490                     l6249:
  8790                           
  8791                           ;RTC.c: 91: strcpy(month, "JUL");
  8792  002490  0EBE               	movlw	low printRTC@month
  8793  002492  0100               	movlb	0	; () banked
  8794  002494  6F80               	movwf	strcpy@to& (0+255),b
  8795  002496  0E00               	movlw	high printRTC@month
  8796  002498  0100               	movlb	0	; () banked
  8797  00249A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8798  00249C  0ED7               	movlw	low STR_14
  8799  00249E  0100               	movlb	0	; () banked
  8800  0024A0  6F82               	movwf	strcpy@from& (0+255),b
  8801  0024A2  0EFF               	movlw	high STR_14
  8802  0024A4  0100               	movlb	0	; () banked
  8803  0024A6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8804  0024A8  ECF4  F024         	call	_strcpy	;wreg free
  8805                           
  8806                           ;RTC.c: 92: break;
  8807  0024AC  D07A               	goto	l6265
  8808  0024AE                     l6251:
  8809                           
  8810                           ;RTC.c: 94: strcpy(month, "AUG");
  8811  0024AE  0EBE               	movlw	low printRTC@month
  8812  0024B0  0100               	movlb	0	; () banked
  8813  0024B2  6F80               	movwf	strcpy@to& (0+255),b
  8814  0024B4  0E00               	movlw	high printRTC@month
  8815  0024B6  0100               	movlb	0	; () banked
  8816  0024B8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8817  0024BA  0ED3               	movlw	low STR_15
  8818  0024BC  0100               	movlb	0	; () banked
  8819  0024BE  6F82               	movwf	strcpy@from& (0+255),b
  8820  0024C0  0EFF               	movlw	high STR_15
  8821  0024C2  0100               	movlb	0	; () banked
  8822  0024C4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8823  0024C6  ECF4  F024         	call	_strcpy	;wreg free
  8824                           
  8825                           ;RTC.c: 95: break;
  8826  0024CA  D06B               	goto	l6265
  8827  0024CC                     l6253:
  8828                           
  8829                           ;RTC.c: 97: strcpy(month, "SEP");
  8830  0024CC  0EBE               	movlw	low printRTC@month
  8831  0024CE  0100               	movlb	0	; () banked
  8832  0024D0  6F80               	movwf	strcpy@to& (0+255),b
  8833  0024D2  0E00               	movlw	high printRTC@month
  8834  0024D4  0100               	movlb	0	; () banked
  8835  0024D6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8836  0024D8  0EE3               	movlw	low STR_16
  8837  0024DA  0100               	movlb	0	; () banked
  8838  0024DC  6F82               	movwf	strcpy@from& (0+255),b
  8839  0024DE  0EFF               	movlw	high STR_16
  8840  0024E0  0100               	movlb	0	; () banked
  8841  0024E2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8842  0024E4  ECF4  F024         	call	_strcpy	;wreg free
  8843                           
  8844                           ;RTC.c: 98: break;
  8845  0024E8  D05C               	goto	l6265
  8846  0024EA                     l6255:
  8847                           
  8848                           ;RTC.c: 100: strcpy(month, "OCT");
  8849  0024EA  0EBE               	movlw	low printRTC@month
  8850  0024EC  0100               	movlb	0	; () banked
  8851  0024EE  6F80               	movwf	strcpy@to& (0+255),b
  8852  0024F0  0E00               	movlw	high printRTC@month
  8853  0024F2  0100               	movlb	0	; () banked
  8854  0024F4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8855  0024F6  0EF3               	movlw	low STR_17
  8856  0024F8  0100               	movlb	0	; () banked
  8857  0024FA  6F82               	movwf	strcpy@from& (0+255),b
  8858  0024FC  0EFF               	movlw	high STR_17
  8859  0024FE  0100               	movlb	0	; () banked
  8860  002500  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8861  002502  ECF4  F024         	call	_strcpy	;wreg free
  8862                           
  8863                           ;RTC.c: 101: break;
  8864  002506  D04D               	goto	l6265
  8865  002508                     l6257:
  8866                           
  8867                           ;RTC.c: 103: strcpy(month, "NOV");
  8868  002508  0EBE               	movlw	low printRTC@month
  8869  00250A  0100               	movlb	0	; () banked
  8870  00250C  6F80               	movwf	strcpy@to& (0+255),b
  8871  00250E  0E00               	movlw	high printRTC@month
  8872  002510  0100               	movlb	0	; () banked
  8873  002512  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8874  002514  0EF7               	movlw	low STR_18
  8875  002516  0100               	movlb	0	; () banked
  8876  002518  6F82               	movwf	strcpy@from& (0+255),b
  8877  00251A  0EFF               	movlw	high STR_18
  8878  00251C  0100               	movlb	0	; () banked
  8879  00251E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8880  002520  ECF4  F024         	call	_strcpy	;wreg free
  8881                           
  8882                           ;RTC.c: 104: break;
  8883  002524  D03E               	goto	l6265
  8884  002526                     l6259:
  8885                           
  8886                           ;RTC.c: 106: strcpy(month, "DEC");
  8887  002526  0EBE               	movlw	low printRTC@month
  8888  002528  0100               	movlb	0	; () banked
  8889  00252A  6F80               	movwf	strcpy@to& (0+255),b
  8890  00252C  0E00               	movlw	high printRTC@month
  8891  00252E  0100               	movlb	0	; () banked
  8892  002530  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8893  002532  0ECF               	movlw	low STR_19
  8894  002534  0100               	movlb	0	; () banked
  8895  002536  6F82               	movwf	strcpy@from& (0+255),b
  8896  002538  0EFF               	movlw	high STR_19
  8897  00253A  0100               	movlb	0	; () banked
  8898  00253C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8899  00253E  ECF4  F024         	call	_strcpy	;wreg free
  8900                           
  8901                           ;RTC.c: 108: }
  8902                           
  8903                           ;RTC.c: 107: break;
  8904  002542  D02F               	goto	l6265
  8905  002544                     l6263:
  8906  002544  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8907  002548  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8908                           
  8909                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8910                           ; Switch size 1, requested type "space"
  8911                           ; Number of cases is 1, Range of values is 0 to 0
  8912                           ; switch strategies available:
  8913                           ; Name         Instructions Cycles
  8914                           ; simple_byte            4     3 (average)
  8915                           ;	Chosen strategy is simple_byte
  8916  00254C  0100               	movlb	0	; () banked
  8917  00254E  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8918  002550  0A00               	xorlw	0	; case 0
  8919  002552  A4D8               	btfss	status,2,c
  8920  002554  D026               	goto	l6265
  8921                           
  8922                           ; BSR set to: 0
  8923                           ; Switch size 1, requested type "space"
  8924                           ; Number of cases is 12, Range of values is 1 to 12
  8925                           ; switch strategies available:
  8926                           ; Name         Instructions Cycles
  8927                           ; simple_byte           37    19 (average)
  8928                           ;	Chosen strategy is simple_byte
  8929  002556  0100               	movlb	0	; () banked
  8930  002558  51AB               	movf	??_printRTC& (0+255),w,b
  8931  00255A  0A01               	xorlw	1	; case 1
  8932  00255C  B4D8               	btfsc	status,2,c
  8933  00255E  D73E               	goto	l6237
  8934  002560  0A03               	xorlw	3	; case 2
  8935  002562  B4D8               	btfsc	status,2,c
  8936  002564  D74A               	goto	l6239
  8937  002566  0A01               	xorlw	1	; case 3
  8938  002568  B4D8               	btfsc	status,2,c
  8939  00256A  D756               	goto	l6241
  8940  00256C  0A07               	xorlw	7	; case 4
  8941  00256E  B4D8               	btfsc	status,2,c
  8942  002570  D762               	goto	l6243
  8943  002572  0A01               	xorlw	1	; case 5
  8944  002574  B4D8               	btfsc	status,2,c
  8945  002576  D76E               	goto	l6245
  8946  002578  0A03               	xorlw	3	; case 6
  8947  00257A  B4D8               	btfsc	status,2,c
  8948  00257C  D77A               	goto	l6247
  8949  00257E  0A01               	xorlw	1	; case 7
  8950  002580  B4D8               	btfsc	status,2,c
  8951  002582  D786               	goto	l6249
  8952  002584  0A0F               	xorlw	15	; case 8
  8953  002586  B4D8               	btfsc	status,2,c
  8954  002588  D792               	goto	l6251
  8955  00258A  0A01               	xorlw	1	; case 9
  8956  00258C  B4D8               	btfsc	status,2,c
  8957  00258E  D79E               	goto	l6253
  8958  002590  0A03               	xorlw	3	; case 10
  8959  002592  B4D8               	btfsc	status,2,c
  8960  002594  D7AA               	goto	l6255
  8961  002596  0A01               	xorlw	1	; case 11
  8962  002598  B4D8               	btfsc	status,2,c
  8963  00259A  D7B6               	goto	l6257
  8964  00259C  0A07               	xorlw	7	; case 12
  8965  00259E  B4D8               	btfsc	status,2,c
  8966  0025A0  D7C2               	goto	l6259
  8967  0025A2                     l6265:
  8968                           
  8969                           ;RTC.c: 109: lcdInst(0b10000000);;
  8970  0025A2  0E80               	movlw	128
  8971  0025A4  EC8A  F027         	call	_lcdInst
  8972                           
  8973                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8974  0025A8  0E0A               	movlw	low STR_21
  8975  0025AA  0100               	movlb	0	; () banked
  8976  0025AC  6F8E               	movwf	printf@f& (0+255),b
  8977  0025AE  0EFB               	movlw	high STR_21
  8978  0025B0  0100               	movlb	0	; () banked
  8979  0025B2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8980  0025B4  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8981  0025B8  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8982  0025BC  0EBE               	movlw	low printRTC@month
  8983  0025BE  0100               	movlb	0	; () banked
  8984  0025C0  6F92               	movwf	(?_printf+4)& (0+255),b
  8985  0025C2  0E00               	movlw	high printRTC@month
  8986  0025C4  0100               	movlb	0	; () banked
  8987  0025C6  6F93               	movwf	(?_printf+5)& (0+255),b
  8988  0025C8  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8989  0025CC  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8990  0025D0  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8991  0025D4  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8992  0025D8  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8993  0025DC  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8994  0025E0  ECB8  F008         	call	_printf	;wreg free
  8995  0025E4  0012               	return		;funcret
  8996  0025E6                     __end_of_printRTC:
  8997                           	opt stack 0
  8998                           tblptru	equ	0xFF8
  8999                           tblptrh	equ	0xFF7
  9000                           tblptrl	equ	0xFF6
  9001                           tablat	equ	0xFF5
  9002                           prodh	equ	0xFF4
  9003                           prodl	equ	0xFF3
  9004                           intcon	equ	0xFF2
  9005                           intcon2	equ	0xFF1
  9006                           intcon3	equ	0xFF0
  9007                           postinc0	equ	0xFEE
  9008                           wreg	equ	0xFE8
  9009                           postdec1	equ	0xFE5
  9010                           fsr1l	equ	0xFE1
  9011                           indf2	equ	0xFDF
  9012                           postinc2	equ	0xFDE
  9013                           postdec2	equ	0xFDD
  9014                           fsr2h	equ	0xFDA
  9015                           fsr2l	equ	0xFD9
  9016                           status	equ	0xFD8
  9017                           
  9018 ;; *************** function _strcpy *****************
  9019 ;; Defined at:
  9020 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  to              2    0[BANK0 ] PTR unsigned char 
  9023 ;;		 -> printRTC@month(4), UI@month(4), 
  9024 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  9025 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9026 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9027 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  9028 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  9029 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  9030 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  9031 ;;		 -> STR_8(4), 
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  9034 ;;		 -> printRTC@month(4), UI@month(4), 
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  2    0[BANK0 ] PTR unsigned char 
  9037 ;; Registers used:
  9038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9044 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;Total ram usage:        6 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    7
  9051 ;; This function calls:
  9052 ;;		Nothing
  9053 ;; This function is called by:
  9054 ;;		_UI
  9055 ;;		_printRTC
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           	psect	text25
  9060  0049E8                     __ptext25:
  9061                           	opt stack 0
  9062  0049E8                     _strcpy:
  9063                           	opt stack 20
  9064                           
  9065                           ;incstack = 0
  9066  0049E8  C080  F084         	movff	strcpy@to,strcpy@cp
  9067  0049EC  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  9068  0049F0  D006               	goto	l5975
  9069  0049F2                     l5973:
  9070  0049F2  0100               	movlb	0	; () banked
  9071  0049F4  4B84               	infsnz	strcpy@cp& (0+255),f,b
  9072  0049F6  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  9073  0049F8  0100               	movlb	0	; () banked
  9074  0049FA  4B82               	infsnz	strcpy@from& (0+255),f,b
  9075  0049FC  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  9076  0049FE                     l5975:
  9077  0049FE  C082  FFF6         	movff	strcpy@from,tblptrl
  9078  004A02  C083  FFF7         	movff	strcpy@from+1,tblptrh
  9079  004A06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9080  004A06  6AF8               	clrf	tblptru,c
  9081  004A08                     	endif
  9082  004A08                     	if	0	;tblptru may be non-zero
  9083  004A08                     	endif
  9084  004A08  C084  FFD9         	movff	strcpy@cp,fsr2l
  9085  004A0C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  9086  004A10  0008               	tblrd		*
  9087  004A12  CFF5 FFDF          	movff	tablat,indf2
  9088  004A16  50DF               	movf	indf2,w,c
  9089  004A18  B4D8               	btfsc	status,2,c
  9090  004A1A  0012               	return	
  9091  004A1C  D7EA               	goto	l5973
  9092  004A1E                     __end_of_strcpy:
  9093                           	opt stack 0
  9094                           tblptru	equ	0xFF8
  9095                           tblptrh	equ	0xFF7
  9096                           tblptrl	equ	0xFF6
  9097                           tablat	equ	0xFF5
  9098                           prodh	equ	0xFF4
  9099                           prodl	equ	0xFF3
  9100                           intcon	equ	0xFF2
  9101                           intcon2	equ	0xFF1
  9102                           intcon3	equ	0xFF0
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function _getRTC *****************
  9115 ;; Defined at:
  9116 ;;		line 44 in file "RTC.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;  i               2    3[BANK0 ] int 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      void 
  9123 ;; Registers used:
  9124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        2 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    9
  9137 ;; This function calls:
  9138 ;;		_I2C_Master_Read
  9139 ;;		_I2C_Master_Start
  9140 ;;		_I2C_Master_Stop
  9141 ;;		_I2C_Master_Write
  9142 ;; This function is called by:
  9143 ;;		_printRTC
  9144 ;;		_initSortTimer
  9145 ;; This function uses a non-reentrant model
  9146 ;;
  9147                           
  9148                           	psect	text26
  9149  004146                     __ptext26:
  9150                           	opt stack 0
  9151  004146                     _getRTC:
  9152                           	opt stack 18
  9153                           
  9154                           ;RTC.c: 48: I2C_Master_Start();
  9155                           
  9156                           ;incstack = 0
  9157  004146  ECB0  F027         	call	_I2C_Master_Start	;wreg free
  9158                           
  9159                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  9160  00414A  0E00               	movlw	0
  9161  00414C  0100               	movlb	0	; () banked
  9162  00414E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9163  004150  0ED0               	movlw	208
  9164  004152  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9165  004154  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  9166                           
  9167                           ;RTC.c: 50: I2C_Master_Write(0x00);
  9168  004158  0E00               	movlw	0
  9169  00415A  0100               	movlb	0	; () banked
  9170  00415C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9171  00415E  0E00               	movlw	0
  9172  004160  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9173  004162  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  9174                           
  9175                           ;RTC.c: 51: I2C_Master_Stop();
  9176  004166  ECAC  F027         	call	_I2C_Master_Stop	;wreg free
  9177                           
  9178                           ;RTC.c: 54: I2C_Master_Start();
  9179  00416A  ECB0  F027         	call	_I2C_Master_Start	;wreg free
  9180                           
  9181                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  9182  00416E  0E00               	movlw	0
  9183  004170  0100               	movlb	0	; () banked
  9184  004172  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9185  004174  0ED1               	movlw	209
  9186  004176  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9187  004178  EC9E  F027         	call	_I2C_Master_Write	;wreg free
  9188                           
  9189                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  9190  00417C  0E00               	movlw	0
  9191  00417E  0100               	movlb	0	; () banked
  9192  004180  6F84               	movwf	(getRTC@i+1)& (0+255),b
  9193  004182  0E00               	movlw	0
  9194  004184  6F83               	movwf	getRTC@i& (0+255),b
  9195  004186                     l5981:
  9196                           
  9197                           ; BSR set to: 0
  9198  004186  0100               	movlb	0	; () banked
  9199  004188  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  9200  00418A  D008               	goto	l5985
  9201  00418C  0100               	movlb	0	; () banked
  9202  00418E  5184               	movf	(getRTC@i+1)& (0+255),w,b
  9203  004190  E115               	bnz	l5991
  9204  004192  0E06               	movlw	6
  9205  004194  0100               	movlb	0	; () banked
  9206  004196  5D83               	subwf	getRTC@i& (0+255),w,b
  9207  004198  B0D8               	btfsc	status,0,c
  9208  00419A  D010               	goto	l5991
  9209  00419C                     l5985:
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  9213  00419C  0E24               	movlw	low _time
  9214  00419E  0100               	movlb	0	; () banked
  9215  0041A0  2583               	addwf	getRTC@i& (0+255),w,b
  9216  0041A2  6ED9               	movwf	fsr2l,c
  9217  0041A4  0E01               	movlw	high _time
  9218  0041A6  0100               	movlb	0	; () banked
  9219  0041A8  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  9220  0041AA  6EDA               	movwf	fsr2h,c
  9221  0041AC  0E01               	movlw	1
  9222  0041AE  EC4B  F026         	call	_I2C_Master_Read
  9223  0041B2  6EDF               	movwf	indf2,c
  9224  0041B4  0100               	movlb	0	; () banked
  9225  0041B6  4B83               	infsnz	getRTC@i& (0+255),f,b
  9226  0041B8  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  9227  0041BA  D7E5               	goto	l5981
  9228  0041BC                     l5991:
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;RTC.c: 58: }
  9232                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  9233  0041BC  0E00               	movlw	0
  9234  0041BE  EC4B  F026         	call	_I2C_Master_Read
  9235  0041C2  0101               	movlb	1	; () banked
  9236  0041C4  6F2A               	movwf	(_time+6)& (0+255),b
  9237                           
  9238                           ;RTC.c: 60: I2C_Master_Stop();
  9239  0041C6  ECAC  F027         	call	_I2C_Master_Stop	;wreg free
  9240  0041CA  0012               	return		;funcret
  9241  0041CC                     __end_of_getRTC:
  9242                           	opt stack 0
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           intcon2	equ	0xFF1
  9251                           intcon3	equ	0xFF0
  9252                           postinc0	equ	0xFEE
  9253                           wreg	equ	0xFE8
  9254                           postdec1	equ	0xFE5
  9255                           fsr1l	equ	0xFE1
  9256                           indf2	equ	0xFDF
  9257                           postinc2	equ	0xFDE
  9258                           postdec2	equ	0xFDD
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function _I2C_Master_Write *****************
  9264 ;; Defined at:
  9265 ;;		line 49 in file "I2C.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  d               2    1[BANK0 ] unsigned int 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;		None
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      void 
  9272 ;; Registers used:
  9273 ;;		wreg, status,2, status,0, cstack
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;Total ram usage:        2 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    8
  9286 ;; This function calls:
  9287 ;;		_I2C_Master_Wait
  9288 ;; This function is called by:
  9289 ;;		_loadRTC
  9290 ;;		_getRTC
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           	psect	text27
  9295  004F3C                     __ptext27:
  9296                           	opt stack 0
  9297  004F3C                     _I2C_Master_Write:
  9298                           	opt stack 18
  9299                           
  9300                           ;I2C.c: 51: I2C_Master_Wait();
  9301                           
  9302                           ;incstack = 0
  9303  004F3C  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9304                           
  9305                           ;I2C.c: 52: SSPBUF = d;
  9306  004F40  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9307  004F44  0012               	return		;funcret
  9308  004F46                     __end_of_I2C_Master_Write:
  9309                           	opt stack 0
  9310                           tblptru	equ	0xFF8
  9311                           tblptrh	equ	0xFF7
  9312                           tblptrl	equ	0xFF6
  9313                           tablat	equ	0xFF5
  9314                           prodh	equ	0xFF4
  9315                           prodl	equ	0xFF3
  9316                           intcon	equ	0xFF2
  9317                           intcon2	equ	0xFF1
  9318                           intcon3	equ	0xFF0
  9319                           postinc0	equ	0xFEE
  9320                           wreg	equ	0xFE8
  9321                           postdec1	equ	0xFE5
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function _I2C_Master_Stop *****************
  9331 ;; Defined at:
  9332 ;;		line 43 in file "I2C.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;Total ram usage:        0 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    8
  9353 ;; This function calls:
  9354 ;;		_I2C_Master_Wait
  9355 ;; This function is called by:
  9356 ;;		_loadRTC
  9357 ;;		_getRTC
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text28
  9362  004F58                     __ptext28:
  9363                           	opt stack 0
  9364  004F58                     _I2C_Master_Stop:
  9365                           	opt stack 18
  9366                           
  9367                           ;I2C.c: 45: I2C_Master_Wait();
  9368                           
  9369                           ;incstack = 0
  9370  004F58  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9371                           
  9372                           ;I2C.c: 46: PEN = 1;
  9373  004F5C  84C5               	bsf	4037,2,c	;volatile
  9374  004F5E  0012               	return		;funcret
  9375  004F60                     __end_of_I2C_Master_Stop:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           intcon2	equ	0xFF1
  9385                           intcon3	equ	0xFF0
  9386                           postinc0	equ	0xFEE
  9387                           wreg	equ	0xFE8
  9388                           postdec1	equ	0xFE5
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           fsr2h	equ	0xFDA
  9394                           fsr2l	equ	0xFD9
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function _I2C_Master_Start *****************
  9398 ;; Defined at:
  9399 ;;		line 31 in file "I2C.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;		None
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;		None
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  1    wreg      void 
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0, cstack
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/0
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;Total ram usage:        0 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    8
  9420 ;; This function calls:
  9421 ;;		_I2C_Master_Wait
  9422 ;; This function is called by:
  9423 ;;		_loadRTC
  9424 ;;		_getRTC
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text29
  9429  004F60                     __ptext29:
  9430                           	opt stack 0
  9431  004F60                     _I2C_Master_Start:
  9432                           	opt stack 18
  9433                           
  9434                           ;I2C.c: 33: I2C_Master_Wait();
  9435                           
  9436                           ;incstack = 0
  9437  004F60  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9438                           
  9439                           ;I2C.c: 34: SEN = 1;
  9440  004F64  80C5               	bsf	4037,0,c	;volatile
  9441  004F66  0012               	return		;funcret
  9442  004F68                     __end_of_I2C_Master_Start:
  9443                           	opt stack 0
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           intcon3	equ	0xFF0
  9453                           postinc0	equ	0xFEE
  9454                           wreg	equ	0xFE8
  9455                           postdec1	equ	0xFE5
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _I2C_Master_Read *****************
  9465 ;; Defined at:
  9466 ;;		line 55 in file "I2C.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;  a               1    wreg     unsigned char 
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;  a               1    1[BANK0 ] unsigned char 
  9471 ;;  temp            1    2[BANK0 ] unsigned char 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      unsigned char 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;Total ram usage:        2 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    8
  9488 ;; This function calls:
  9489 ;;		_I2C_Master_Wait
  9490 ;; This function is called by:
  9491 ;;		_getRTC
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text30
  9496  004C96                     __ptext30:
  9497                           	opt stack 0
  9498  004C96                     _I2C_Master_Read:
  9499                           	opt stack 18
  9500                           
  9501                           ;incstack = 0
  9502                           ;I2C_Master_Read@a stored from wreg
  9503  004C96  0100               	movlb	0	; () banked
  9504  004C98  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9505                           
  9506                           ;I2C.c: 57: unsigned char temp;
  9507                           ;I2C.c: 58: I2C_Master_Wait();
  9508  004C9A  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9509                           
  9510                           ;I2C.c: 59: RCEN = 1;
  9511  004C9E  86C5               	bsf	4037,3,c	;volatile
  9512                           
  9513                           ;I2C.c: 60: I2C_Master_Wait();
  9514  004CA0  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9515                           
  9516                           ;I2C.c: 61: temp = SSPBUF;
  9517  004CA4  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9518                           
  9519                           ;I2C.c: 62: I2C_Master_Wait();
  9520  004CA8  EC6F  F027         	call	_I2C_Master_Wait	;wreg free
  9521                           
  9522                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9523  004CAC  0100               	movlb	0	; () banked
  9524  004CAE  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9525  004CB0  0100               	movlb	0	; () banked
  9526  004CB2  A4D8               	btfss	status,2,c
  9527  004CB4  D002               	goto	u4120
  9528  004CB6  8AC5               	bsf	4037,5,c	;volatile
  9529  004CB8  D001               	goto	l5669
  9530  004CBA                     u4120:
  9531  004CBA  9AC5               	bcf	4037,5,c	;volatile
  9532  004CBC                     l5669:
  9533                           
  9534                           ;I2C.c: 64: ACKEN = 1;
  9535  004CBC  88C5               	bsf	4037,4,c	;volatile
  9536                           
  9537                           ;I2C.c: 65: return temp;
  9538  004CBE  0100               	movlb	0	; () banked
  9539  004CC0  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9540  004CC2  0012               	return	
  9541  004CC4                     __end_of_I2C_Master_Read:
  9542                           	opt stack 0
  9543                           tblptru	equ	0xFF8
  9544                           tblptrh	equ	0xFF7
  9545                           tblptrl	equ	0xFF6
  9546                           tablat	equ	0xFF5
  9547                           prodh	equ	0xFF4
  9548                           prodl	equ	0xFF3
  9549                           intcon	equ	0xFF2
  9550                           intcon2	equ	0xFF1
  9551                           intcon3	equ	0xFF0
  9552                           postinc0	equ	0xFEE
  9553                           wreg	equ	0xFE8
  9554                           postdec1	equ	0xFE5
  9555                           fsr1l	equ	0xFE1
  9556                           indf2	equ	0xFDF
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function _I2C_Master_Wait *****************
  9564 ;; Defined at:
  9565 ;;		line 26 in file "I2C.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      void 
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, status,0
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;Total ram usage:        1 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    7
  9586 ;; This function calls:
  9587 ;;		Nothing
  9588 ;; This function is called by:
  9589 ;;		_I2C_Master_Start
  9590 ;;		_I2C_Master_Stop
  9591 ;;		_I2C_Master_Write
  9592 ;;		_I2C_Master_Read
  9593 ;;		_I2C_Master_RepeatedStart
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text31
  9598  004EDE                     __ptext31:
  9599                           	opt stack 0
  9600  004EDE                     _I2C_Master_Wait:
  9601                           	opt stack 18
  9602  004EDE                     l66:
  9603  004EDE  B4C7               	btfsc	4039,2,c	;volatile
  9604  004EE0  D7FE               	goto	l66
  9605  004EE2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9606  004EE6  0E1F               	movlw	31
  9607  004EE8  0100               	movlb	0	; () banked
  9608  004EEA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9609  004EEC  B4D8               	btfsc	status,2,c
  9610  004EEE  0012               	return	
  9611  004EF0  D7F6               	goto	l66
  9612  004EF2                     __end_of_I2C_Master_Wait:
  9613                           	opt stack 0
  9614                           tblptru	equ	0xFF8
  9615                           tblptrh	equ	0xFF7
  9616                           tblptrl	equ	0xFF6
  9617                           tablat	equ	0xFF5
  9618                           prodh	equ	0xFF4
  9619                           prodl	equ	0xFF3
  9620                           intcon	equ	0xFF2
  9621                           intcon2	equ	0xFF1
  9622                           intcon3	equ	0xFF0
  9623                           postinc0	equ	0xFEE
  9624                           wreg	equ	0xFE8
  9625                           postdec1	equ	0xFE5
  9626                           fsr1l	equ	0xFE1
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           fsr2h	equ	0xFDA
  9631                           fsr2l	equ	0xFD9
  9632                           status	equ	0xFD8
  9633                           
  9634 ;; *************** function _change_state_to_menu_22 *****************
  9635 ;; Defined at:
  9636 ;;		line 498 in file "UI.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;		None
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  1    wreg      void 
  9643 ;; Registers used:
  9644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;Total ram usage:        0 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:   10
  9657 ;; This function calls:
  9658 ;;		_lcdInst
  9659 ;;		_printf
  9660 ;; This function is called by:
  9661 ;;		_UI
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           	psect	text32
  9666  004978                     __ptext32:
  9667                           	opt stack 0
  9668  004978                     _change_state_to_menu_22:
  9669                           	opt stack 19
  9670                           
  9671                           ;UI.c: 499: cur_state = 22;
  9672                           
  9673                           ; BSR set to: 0
  9674                           ;incstack = 0
  9675  004978  0E00               	movlw	0
  9676  00497A  0100               	movlb	0	; () banked
  9677  00497C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9678  00497E  0E16               	movlw	22
  9679  004980  6FE6               	movwf	_cur_state& (0+255),b
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;UI.c: 501: lcdInst(0b10000000);;
  9683  004982  0E80               	movlw	128
  9684  004984  EC8A  F027         	call	_lcdInst
  9685                           
  9686                           ;UI.c: 502: printf("2. SORT        <");
  9687  004988  0EC4               	movlw	low STR_34
  9688  00498A  0100               	movlb	0	; () banked
  9689  00498C  6F8E               	movwf	printf@f& (0+255),b
  9690  00498E  0EFD               	movlw	high STR_34
  9691  004990  0100               	movlb	0	; () banked
  9692  004992  6F8F               	movwf	(printf@f+1)& (0+255),b
  9693  004994  ECB8  F008         	call	_printf	;wreg free
  9694                           
  9695                           ;UI.c: 503: lcdInst(0b11000000);;
  9696  004998  0EC0               	movlw	192
  9697  00499A  EC8A  F027         	call	_lcdInst
  9698                           
  9699                           ;UI.c: 504: printf("3. LOGS         ");
  9700  00499E  0E09               	movlw	low STR_36
  9701  0049A0  0100               	movlb	0	; () banked
  9702  0049A2  6F8E               	movwf	printf@f& (0+255),b
  9703  0049A4  0EFD               	movlw	high STR_36
  9704  0049A6  0100               	movlb	0	; () banked
  9705  0049A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9706  0049AA  ECB8  F008         	call	_printf	;wreg free
  9707  0049AE  0012               	return		;funcret
  9708  0049B0                     __end_of_change_state_to_menu_22:
  9709                           	opt stack 0
  9710                           tblptru	equ	0xFF8
  9711                           tblptrh	equ	0xFF7
  9712                           tblptrl	equ	0xFF6
  9713                           tablat	equ	0xFF5
  9714                           prodh	equ	0xFF4
  9715                           prodl	equ	0xFF3
  9716                           intcon	equ	0xFF2
  9717                           intcon2	equ	0xFF1
  9718                           intcon3	equ	0xFF0
  9719                           postinc0	equ	0xFEE
  9720                           wreg	equ	0xFE8
  9721                           postdec1	equ	0xFE5
  9722                           fsr1l	equ	0xFE1
  9723                           indf2	equ	0xFDF
  9724                           postinc2	equ	0xFDE
  9725                           postdec2	equ	0xFDD
  9726                           fsr2h	equ	0xFDA
  9727                           fsr2l	equ	0xFD9
  9728                           status	equ	0xFD8
  9729                           
  9730 ;; *************** function _change_state_to_menu_12 *****************
  9731 ;; Defined at:
  9732 ;;		line 490 in file "UI.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      void 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:   10
  9753 ;; This function calls:
  9754 ;;		_lcdInst
  9755 ;;		_printf
  9756 ;; This function is called by:
  9757 ;;		_UI
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text33
  9762  0049B0                     __ptext33:
  9763                           	opt stack 0
  9764  0049B0                     _change_state_to_menu_12:
  9765                           	opt stack 19
  9766                           
  9767                           ;UI.c: 491: cur_state = 12;
  9768                           
  9769                           ;incstack = 0
  9770  0049B0  0E00               	movlw	0
  9771  0049B2  0100               	movlb	0	; () banked
  9772  0049B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9773  0049B6  0E0C               	movlw	12
  9774  0049B8  6FE6               	movwf	_cur_state& (0+255),b
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;UI.c: 493: lcdInst(0b10000000);;
  9778  0049BA  0E80               	movlw	128
  9779  0049BC  EC8A  F027         	call	_lcdInst
  9780                           
  9781                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9782  0049C0  0E2B               	movlw	low STR_33
  9783  0049C2  0100               	movlb	0	; () banked
  9784  0049C4  6F8E               	movwf	printf@f& (0+255),b
  9785  0049C6  0EFD               	movlw	high STR_33
  9786  0049C8  0100               	movlb	0	; () banked
  9787  0049CA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9788  0049CC  ECB8  F008         	call	_printf	;wreg free
  9789                           
  9790                           ;UI.c: 495: lcdInst(0b11000000);;
  9791  0049D0  0EC0               	movlw	192
  9792  0049D2  EC8A  F027         	call	_lcdInst
  9793                           
  9794                           ;UI.c: 496: printf("2. SORT        <");
  9795  0049D6  0EC4               	movlw	low STR_34
  9796  0049D8  0100               	movlb	0	; () banked
  9797  0049DA  6F8E               	movwf	printf@f& (0+255),b
  9798  0049DC  0EFD               	movlw	high STR_34
  9799  0049DE  0100               	movlb	0	; () banked
  9800  0049E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9801  0049E2  ECB8  F008         	call	_printf	;wreg free
  9802  0049E6  0012               	return		;funcret
  9803  0049E8                     __end_of_change_state_to_menu_12:
  9804                           	opt stack 0
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           intcon3	equ	0xFF0
  9814                           postinc0	equ	0xFEE
  9815                           wreg	equ	0xFE8
  9816                           postdec1	equ	0xFE5
  9817                           fsr1l	equ	0xFE1
  9818                           indf2	equ	0xFDF
  9819                           postinc2	equ	0xFDE
  9820                           postdec2	equ	0xFDD
  9821                           fsr2h	equ	0xFDA
  9822                           fsr2l	equ	0xFD9
  9823                           status	equ	0xFD8
  9824                           
  9825 ;; *************** function ___awmod *****************
  9826 ;; Defined at:
  9827 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9828 ;; Parameters:    Size  Location     Type
  9829 ;;  dividend        2    0[BANK0 ] int 
  9830 ;;  divisor         2    2[BANK0 ] int 
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;  sign            1    5[BANK0 ] unsigned char 
  9833 ;;  counter         1    4[BANK0 ] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  2    0[BANK0 ] int 
  9836 ;; Registers used:
  9837 ;;		wreg, status,2, status,0
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9843 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;Total ram usage:        6 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    7
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_UI
  9854 ;;		_Loading
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           	psect	text34
  9859  004018                     __ptext34:
  9860                           	opt stack 0
  9861  004018                     ___awmod:
  9862                           	opt stack 21
  9863                           
  9864                           ;incstack = 0
  9865  004018  0E00               	movlw	0
  9866  00401A  0100               	movlb	0	; () banked
  9867  00401C  6F85               	movwf	___awmod@sign& (0+255),b
  9868                           
  9869                           ; BSR set to: 0
  9870  00401E  0100               	movlb	0	; () banked
  9871  004020  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9872  004022  D008               	goto	l6531
  9873                           
  9874                           ; BSR set to: 0
  9875  004024  0100               	movlb	0	; () banked
  9876  004026  6D80               	negf	___awmod@dividend& (0+255),b
  9877  004028  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9878  00402A  B0D8               	btfsc	status,0,c
  9879  00402C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9880                           
  9881                           ; BSR set to: 0
  9882  00402E  0E01               	movlw	1
  9883  004030  0100               	movlb	0	; () banked
  9884  004032  6F85               	movwf	___awmod@sign& (0+255),b
  9885  004034                     l6531:
  9886                           
  9887                           ; BSR set to: 0
  9888  004034  0100               	movlb	0	; () banked
  9889  004036  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9890  004038  D005               	goto	l6535
  9891                           
  9892                           ; BSR set to: 0
  9893  00403A  0100               	movlb	0	; () banked
  9894  00403C  6D82               	negf	___awmod@divisor& (0+255),b
  9895  00403E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9896  004040  B0D8               	btfsc	status,0,c
  9897  004042  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9898  004044                     l6535:
  9899                           
  9900                           ; BSR set to: 0
  9901  004044  0100               	movlb	0	; () banked
  9902  004046  5182               	movf	___awmod@divisor& (0+255),w,b
  9903  004048  0100               	movlb	0	; () banked
  9904  00404A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9905  00404C  B4D8               	btfsc	status,2,c
  9906  00404E  D026               	goto	l6551
  9907                           
  9908                           ; BSR set to: 0
  9909  004050  0E01               	movlw	1
  9910  004052  0100               	movlb	0	; () banked
  9911  004054  6F84               	movwf	___awmod@counter& (0+255),b
  9912  004056  D006               	goto	l6541
  9913  004058                     l6539:
  9914                           
  9915                           ; BSR set to: 0
  9916  004058  0100               	movlb	0	; () banked
  9917  00405A  90D8               	bcf	status,0,c
  9918  00405C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9919  00405E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9920  004060  0100               	movlb	0	; () banked
  9921  004062  2B84               	incf	___awmod@counter& (0+255),f,b
  9922  004064                     l6541:
  9923                           
  9924                           ; BSR set to: 0
  9925  004064  0100               	movlb	0	; () banked
  9926  004066  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9927  004068  D7F7               	goto	l6539
  9928  00406A                     l6543:
  9929                           
  9930                           ; BSR set to: 0
  9931  00406A  0100               	movlb	0	; () banked
  9932  00406C  5182               	movf	___awmod@divisor& (0+255),w,b
  9933  00406E  0100               	movlb	0	; () banked
  9934  004070  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9935  004072  0100               	movlb	0	; () banked
  9936  004074  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9937  004076  0100               	movlb	0	; () banked
  9938  004078  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9939  00407A  A0D8               	btfss	status,0,c
  9940  00407C  D008               	goto	l6547
  9941                           
  9942                           ; BSR set to: 0
  9943  00407E  0100               	movlb	0	; () banked
  9944  004080  5182               	movf	___awmod@divisor& (0+255),w,b
  9945  004082  0100               	movlb	0	; () banked
  9946  004084  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9947  004086  0100               	movlb	0	; () banked
  9948  004088  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9949  00408A  0100               	movlb	0	; () banked
  9950  00408C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9951  00408E                     l6547:
  9952                           
  9953                           ; BSR set to: 0
  9954  00408E  0100               	movlb	0	; () banked
  9955  004090  90D8               	bcf	status,0,c
  9956  004092  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9957  004094  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9958                           
  9959                           ; BSR set to: 0
  9960  004096  0100               	movlb	0	; () banked
  9961  004098  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9962  00409A  D7E7               	goto	l6543
  9963  00409C                     l6551:
  9964                           
  9965                           ; BSR set to: 0
  9966  00409C  0100               	movlb	0	; () banked
  9967  00409E  5185               	movf	___awmod@sign& (0+255),w,b
  9968  0040A0  0100               	movlb	0	; () banked
  9969  0040A2  B4D8               	btfsc	status,2,c
  9970  0040A4  D005               	goto	l6555
  9971                           
  9972                           ; BSR set to: 0
  9973  0040A6  0100               	movlb	0	; () banked
  9974  0040A8  6D80               	negf	___awmod@dividend& (0+255),b
  9975  0040AA  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9976  0040AC  B0D8               	btfsc	status,0,c
  9977  0040AE  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9978  0040B0                     l6555:
  9979                           
  9980                           ; BSR set to: 0
  9981  0040B0  C080  F080         	movff	___awmod@dividend,?___awmod
  9982  0040B4  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9983  0040B8  0012               	return	
  9984  0040BA                     __end_of___awmod:
  9985                           	opt stack 0
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           intcon3	equ	0xFF0
  9995                           postinc0	equ	0xFEE
  9996                           wreg	equ	0xFE8
  9997                           postdec1	equ	0xFE5
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           fsr2h	equ	0xFDA
 10003                           fsr2l	equ	0xFD9
 10004                           status	equ	0xFD8
 10005                           
 10006 ;; *************** function ___awdiv *****************
 10007 ;; Defined at:
 10008 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;  dividend        2    6[BANK0 ] int 
 10011 ;;  divisor         2    8[BANK0 ] int 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  quotient        2   12[BANK0 ] int 
 10014 ;;  sign            1   11[BANK0 ] unsigned char 
 10015 ;;  counter         1   10[BANK0 ] unsigned char 
 10016 ;; Return value:  Size  Location     Type
 10017 ;;                  2    6[BANK0 ] int 
 10018 ;; Registers used:
 10019 ;;		wreg, status,2, status,0
 10020 ;; Tracked objects:
 10021 ;;		On entry : 0/0
 10022 ;;		On exit  : 0/0
 10023 ;;		Unchanged: 0/0
 10024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;Total ram usage:        8 bytes
 10030 ;; Hardware stack levels used:    1
 10031 ;; Hardware stack levels required when called:    7
 10032 ;; This function calls:
 10033 ;;		Nothing
 10034 ;; This function is called by:
 10035 ;;		_UI
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           	psect	text35
 10040  003DF4                     __ptext35:
 10041                           	opt stack 0
 10042  003DF4                     ___awdiv:
 10043                           	opt stack 22
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;incstack = 0
 10047  003DF4  0E00               	movlw	0
 10048  003DF6  0100               	movlb	0	; () banked
 10049  003DF8  6F8B               	movwf	___awdiv@sign& (0+255),b
 10050                           
 10051                           ; BSR set to: 0
 10052  003DFA  0100               	movlb	0	; () banked
 10053  003DFC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10054  003DFE  D008               	goto	l7971
 10055                           
 10056                           ; BSR set to: 0
 10057  003E00  0100               	movlb	0	; () banked
 10058  003E02  6D88               	negf	___awdiv@divisor& (0+255),b
 10059  003E04  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10060  003E06  B0D8               	btfsc	status,0,c
 10061  003E08  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10062                           
 10063                           ; BSR set to: 0
 10064  003E0A  0E01               	movlw	1
 10065  003E0C  0100               	movlb	0	; () banked
 10066  003E0E  6F8B               	movwf	___awdiv@sign& (0+255),b
 10067  003E10                     l7971:
 10068                           
 10069                           ; BSR set to: 0
 10070  003E10  0100               	movlb	0	; () banked
 10071  003E12  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10072  003E14  D008               	goto	l7977
 10073                           
 10074                           ; BSR set to: 0
 10075  003E16  0100               	movlb	0	; () banked
 10076  003E18  6D86               	negf	___awdiv@dividend& (0+255),b
 10077  003E1A  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10078  003E1C  B0D8               	btfsc	status,0,c
 10079  003E1E  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10080                           
 10081                           ; BSR set to: 0
 10082  003E20  0E01               	movlw	1
 10083  003E22  0100               	movlb	0	; () banked
 10084  003E24  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 10085  003E26                     l7977:
 10086                           
 10087                           ; BSR set to: 0
 10088  003E26  0E00               	movlw	0
 10089  003E28  0100               	movlb	0	; () banked
 10090  003E2A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10091  003E2C  0E00               	movlw	0
 10092  003E2E  6F8C               	movwf	___awdiv@quotient& (0+255),b
 10093                           
 10094                           ; BSR set to: 0
 10095  003E30  0100               	movlb	0	; () banked
 10096  003E32  5188               	movf	___awdiv@divisor& (0+255),w,b
 10097  003E34  0100               	movlb	0	; () banked
 10098  003E36  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10099  003E38  B4D8               	btfsc	status,2,c
 10100  003E3A  D02C               	goto	l7999
 10101                           
 10102                           ; BSR set to: 0
 10103  003E3C  0E01               	movlw	1
 10104  003E3E  0100               	movlb	0	; () banked
 10105  003E40  6F8A               	movwf	___awdiv@counter& (0+255),b
 10106  003E42  D006               	goto	l7985
 10107  003E44                     l7983:
 10108                           
 10109                           ; BSR set to: 0
 10110  003E44  0100               	movlb	0	; () banked
 10111  003E46  90D8               	bcf	status,0,c
 10112  003E48  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 10113  003E4A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10114  003E4C  0100               	movlb	0	; () banked
 10115  003E4E  2B8A               	incf	___awdiv@counter& (0+255),f,b
 10116  003E50                     l7985:
 10117                           
 10118                           ; BSR set to: 0
 10119  003E50  0100               	movlb	0	; () banked
 10120  003E52  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10121  003E54  D7F7               	goto	l7983
 10122  003E56                     l7987:
 10123                           
 10124                           ; BSR set to: 0
 10125  003E56  0100               	movlb	0	; () banked
 10126  003E58  90D8               	bcf	status,0,c
 10127  003E5A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 10128  003E5C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10129                           
 10130                           ; BSR set to: 0
 10131  003E5E  0100               	movlb	0	; () banked
 10132  003E60  5188               	movf	___awdiv@divisor& (0+255),w,b
 10133  003E62  0100               	movlb	0	; () banked
 10134  003E64  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 10135  003E66  0100               	movlb	0	; () banked
 10136  003E68  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10137  003E6A  0100               	movlb	0	; () banked
 10138  003E6C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10139  003E6E  A0D8               	btfss	status,0,c
 10140  003E70  D00A               	goto	l7995
 10141                           
 10142                           ; BSR set to: 0
 10143  003E72  0100               	movlb	0	; () banked
 10144  003E74  5188               	movf	___awdiv@divisor& (0+255),w,b
 10145  003E76  0100               	movlb	0	; () banked
 10146  003E78  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 10147  003E7A  0100               	movlb	0	; () banked
 10148  003E7C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10149  003E7E  0100               	movlb	0	; () banked
 10150  003E80  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10151                           
 10152                           ; BSR set to: 0
 10153  003E82  0100               	movlb	0	; () banked
 10154  003E84  818C               	bsf	___awdiv@quotient& (0+255),0,b
 10155  003E86                     l7995:
 10156                           
 10157                           ; BSR set to: 0
 10158  003E86  0100               	movlb	0	; () banked
 10159  003E88  90D8               	bcf	status,0,c
 10160  003E8A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10161  003E8C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 10162                           
 10163                           ; BSR set to: 0
 10164  003E8E  0100               	movlb	0	; () banked
 10165  003E90  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 10166  003E92  D7E1               	goto	l7987
 10167  003E94                     l7999:
 10168                           
 10169                           ; BSR set to: 0
 10170  003E94  0100               	movlb	0	; () banked
 10171  003E96  518B               	movf	___awdiv@sign& (0+255),w,b
 10172  003E98  0100               	movlb	0	; () banked
 10173  003E9A  B4D8               	btfsc	status,2,c
 10174  003E9C  D005               	goto	l8003
 10175                           
 10176                           ; BSR set to: 0
 10177  003E9E  0100               	movlb	0	; () banked
 10178  003EA0  6D8C               	negf	___awdiv@quotient& (0+255),b
 10179  003EA2  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10180  003EA4  B0D8               	btfsc	status,0,c
 10181  003EA6  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10182  003EA8                     l8003:
 10183                           
 10184                           ; BSR set to: 0
 10185  003EA8  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 10186  003EAC  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 10187  003EB0  0012               	return	
 10188  003EB2                     __end_of___awdiv:
 10189                           	opt stack 0
 10190                           tblptru	equ	0xFF8
 10191                           tblptrh	equ	0xFF7
 10192                           tblptrl	equ	0xFF6
 10193                           tablat	equ	0xFF5
 10194                           prodh	equ	0xFF4
 10195                           prodl	equ	0xFF3
 10196                           intcon	equ	0xFF2
 10197                           intcon2	equ	0xFF1
 10198                           intcon3	equ	0xFF0
 10199                           postinc0	equ	0xFEE
 10200                           wreg	equ	0xFE8
 10201                           postdec1	equ	0xFE5
 10202                           fsr1l	equ	0xFE1
 10203                           indf2	equ	0xFDF
 10204                           postinc2	equ	0xFDE
 10205                           postdec2	equ	0xFDD
 10206                           fsr2h	equ	0xFDA
 10207                           fsr2l	equ	0xFD9
 10208                           status	equ	0xFD8
 10209                           
 10210 ;; *************** function _Test *****************
 10211 ;; Defined at:
 10212 ;;		line 30 in file "Test.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;		None
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;		None
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      void 
 10219 ;; Registers used:
 10220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;Total ram usage:        2 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:   11
 10233 ;; This function calls:
 10234 ;;		_BlockerTest
 10235 ;;		_BothServos
 10236 ;;		_EEPROMTest
 10237 ;;		_PortTestA5
 10238 ;;		_PortTests
 10239 ;;		_PusherTest
 10240 ;;		_SpeedTest
 10241 ;;		_actuatorTest
 10242 ;;		_algorithmTest
 10243 ;;		_lcdInst
 10244 ;;		_printf
 10245 ;;		_sensorTest
 10246 ;; This function is called by:
 10247 ;;		_main
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           	psect	text36
 10252  003A66                     __ptext36:
 10253                           	opt stack 0
 10254  003A66                     _Test:
 10255                           	opt stack 19
 10256  003A66                     
 10257                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10258  003A66  0E01               	movlw	1
 10259  003A68  EC8A  F027         	call	_lcdInst
 10260  003A6C  0E68               	movlw	104
 10261  003A6E  0100               	movlb	0	; () banked
 10262  003A70  6FC6               	movwf	??_Test& (0+255),b
 10263  003A72  0EE4               	movlw	228
 10264  003A74                     u8687:
 10265  003A74  2EE8               	decfsz	wreg,f,c
 10266  003A76  D7FE               	bra	u8687
 10267  003A78  2FC6               	decfsz	??_Test& (0+255),f,b
 10268  003A7A  D7FC               	bra	u8687
 10269  003A7C  F000               	nop	
 10270  003A7E  0E80               	movlw	128
 10271  003A80  EC8A  F027         	call	_lcdInst
 10272                           
 10273                           ;Test.c: 34: printf("2.SNR|4.HI|5.MED");
 10274  003A84  0E92               	movlw	low STR_68
 10275  003A86  0100               	movlb	0	; () banked
 10276  003A88  6F8E               	movwf	printf@f& (0+255),b
 10277  003A8A  0EFC               	movlw	high STR_68
 10278  003A8C  0100               	movlb	0	; () banked
 10279  003A8E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10280  003A90  ECB8  F008         	call	_printf	;wreg free
 10281                           
 10282                           ;Test.c: 35: lcdInst(0b11000000);;
 10283  003A94  0EC0               	movlw	192
 10284  003A96  EC8A  F027         	call	_lcdInst
 10285                           
 10286                           ;Test.c: 36: printf("B.PSH|8.SV|9.BLK");
 10287  003A9A  0EA3               	movlw	low STR_69
 10288  003A9C  0100               	movlb	0	; () banked
 10289  003A9E  6F8E               	movwf	printf@f& (0+255),b
 10290  003AA0  0EFC               	movlw	high STR_69
 10291  003AA2  0100               	movlb	0	; () banked
 10292  003AA4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10293  003AA6  ECB8  F008         	call	_printf	;wreg free
 10294                           
 10295                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
 10296  003AAA  0E05               	movlw	5
 10297  003AAC  0100               	movlb	0	; () banked
 10298  003AAE  6FC7               	movwf	(??_Test+1)& (0+255),b
 10299  003AB0  0E0F               	movlw	15
 10300  003AB2  0100               	movlb	0	; () banked
 10301  003AB4  6FC6               	movwf	??_Test& (0+255),b
 10302  003AB6  0EF1               	movlw	241
 10303  003AB8                     u8697:
 10304  003AB8  2EE8               	decfsz	wreg,f,c
 10305  003ABA  D7FE               	bra	u8697
 10306  003ABC  2FC6               	decfsz	??_Test& (0+255),f,b
 10307  003ABE  D7FC               	bra	u8697
 10308  003AC0  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
 10309  003AC2  D7FA               	bra	u8697
 10310  003AC4                     l1089:
 10311  003AC4  A281               	btfss	3969,1,c	;volatile
 10312  003AC6  D7FE               	goto	l1089
 10313                           
 10314                           ;Test.c: 39: var = PORTB >> 4;
 10315  003AC8  CF81 F0C6          	movff	3969,??_Test	;volatile
 10316  003ACC  0100               	movlb	0	; () banked
 10317  003ACE  3BC6               	swapf	??_Test& (0+255),f,b
 10318  003AD0  0E0F               	movlw	15
 10319  003AD2  17C6               	andwf	??_Test& (0+255),f,b
 10320  003AD4  0100               	movlb	0	; () banked
 10321  003AD6  51C6               	movf	??_Test& (0+255),w,b
 10322  003AD8  0100               	movlb	0	; () banked
 10323  003ADA  6FFA               	movwf	_var& (0+255),b
 10324  003ADC  6BFB               	clrf	(_var+1)& (0+255),b
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;Test.c: 40: var++;
 10328  003ADE  0100               	movlb	0	; () banked
 10329  003AE0  4BFA               	infsnz	_var& (0+255),f,b
 10330  003AE2  2BFB               	incf	(_var+1)& (0+255),f,b
 10331  003AE4                     l1092:
 10332  003AE4  A281               	btfss	3969,1,c	;volatile
 10333  003AE6  D01F               	goto	l8707
 10334  003AE8  D7FD               	goto	l1092
 10335  003AEA                     l8685:
 10336                           
 10337                           ;Test.c: 44: algorithmTest();
 10338  003AEA  EC2F  F01E         	call	_algorithmTest	;wreg free
 10339                           
 10340                           ;Test.c: 45: break;
 10341  003AEE  D7BB               	goto	l8667
 10342  003AF0                     l8687:
 10343                           
 10344                           ;Test.c: 47: sensorTest();
 10345  003AF0  EC0F  F010         	call	_sensorTest	;wreg free
 10346                           
 10347                           ;Test.c: 48: break;
 10348  003AF4  D7B8               	goto	l8667
 10349  003AF6                     l8689:
 10350                           
 10351                           ;Test.c: 50: actuatorTest();
 10352  003AF6  EC09  F000         	call	_actuatorTest	;wreg free
 10353                           
 10354                           ;Test.c: 51: break;
 10355  003AFA  D7B5               	goto	l8667
 10356  003AFC                     l8691:
 10357                           
 10358                           ;Test.c: 53: PortTestA5();
 10359  003AFC  EC56  F023         	call	_PortTestA5	;wreg free
 10360                           
 10361                           ;Test.c: 54: break;
 10362  003B00  D7B2               	goto	l8667
 10363  003B02                     l8693:
 10364                           
 10365                           ;Test.c: 57: SpeedTest();
 10366  003B02  ECE6  F020         	call	_SpeedTest	;wreg free
 10367                           
 10368                           ;Test.c: 58: break;
 10369  003B06  D7AF               	goto	l8667
 10370  003B08                     l8695:
 10371                           
 10372                           ;Test.c: 60: EEPROMTest();
 10373  003B08  ECBC  F027         	call	_EEPROMTest	;wreg free
 10374                           
 10375                           ;Test.c: 61: break;
 10376  003B0C  D7AC               	goto	l8667
 10377  003B0E                     l8697:
 10378                           
 10379                           ;Test.c: 63: PusherTest();
 10380  003B0E  EC53  F014         	call	_PusherTest	;wreg free
 10381                           
 10382                           ;Test.c: 64: break;
 10383  003B12  D7A9               	goto	l8667
 10384  003B14                     l8699:
 10385                           
 10386                           ;Test.c: 66: PortTests();
 10387  003B14  EC28  F021         	call	_PortTests	;wreg free
 10388                           
 10389                           ;Test.c: 67: break;
 10390  003B18  D7A6               	goto	l8667
 10391  003B1A                     l8701:
 10392                           
 10393                           ;Test.c: 69: BothServos();
 10394  003B1A  EC96  F00C         	call	_BothServos	;wreg free
 10395                           
 10396                           ;Test.c: 70: break;
 10397  003B1E  D7A3               	goto	l8667
 10398  003B20                     l8703:
 10399                           
 10400                           ;Test.c: 72: BlockerTest();
 10401  003B20  EC7F  F01A         	call	_BlockerTest	;wreg free
 10402                           
 10403                           ;Test.c: 76: }
 10404                           
 10405                           ;Test.c: 75: break;
 10406                           
 10407                           ;Test.c: 74: default:
 10408                           
 10409                           ;Test.c: 73: break;
 10410  003B24  D7A0               	goto	l8667
 10411  003B26                     l8707:
 10412  003B26  C0FA  F0C6         	movff	_var,??_Test
 10413  003B2A  C0FB  F0C7         	movff	_var+1,??_Test+1
 10414                           
 10415                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10416                           ; Switch size 1, requested type "space"
 10417                           ; Number of cases is 1, Range of values is 0 to 0
 10418                           ; switch strategies available:
 10419                           ; Name         Instructions Cycles
 10420                           ; simple_byte            4     3 (average)
 10421                           ;	Chosen strategy is simple_byte
 10422  003B2E  0100               	movlb	0	; () banked
 10423  003B30  51C7               	movf	(??_Test+1)& (0+255),w,b
 10424  003B32  0A00               	xorlw	0	; case 0
 10425  003B34  A4D8               	btfss	status,2,c
 10426  003B36  D797               	goto	l8667
 10427                           
 10428                           ; BSR set to: 0
 10429                           ; Switch size 1, requested type "space"
 10430                           ; Number of cases is 10, Range of values is 1 to 11
 10431                           ; switch strategies available:
 10432                           ; Name         Instructions Cycles
 10433                           ; simple_byte           31    16 (average)
 10434                           ;	Chosen strategy is simple_byte
 10435  003B38  0100               	movlb	0	; () banked
 10436  003B3A  51C6               	movf	??_Test& (0+255),w,b
 10437  003B3C  0A01               	xorlw	1	; case 1
 10438  003B3E  B4D8               	btfsc	status,2,c
 10439  003B40  D7D4               	goto	l8685
 10440  003B42  0A03               	xorlw	3	; case 2
 10441  003B44  B4D8               	btfsc	status,2,c
 10442  003B46  D7D4               	goto	l8687
 10443  003B48  0A01               	xorlw	1	; case 3
 10444  003B4A  B4D8               	btfsc	status,2,c
 10445  003B4C  D7D4               	goto	l8689
 10446  003B4E  0A06               	xorlw	6	; case 5
 10447  003B50  B4D8               	btfsc	status,2,c
 10448  003B52  D7D4               	goto	l8691
 10449  003B54  0A03               	xorlw	3	; case 6
 10450  003B56  B4D8               	btfsc	status,2,c
 10451  003B58  D7D4               	goto	l8693
 10452  003B5A  0A01               	xorlw	1	; case 7
 10453  003B5C  B4D8               	btfsc	status,2,c
 10454  003B5E  D7D4               	goto	l8695
 10455  003B60  0A0F               	xorlw	15	; case 8
 10456  003B62  B4D8               	btfsc	status,2,c
 10457  003B64  D7D4               	goto	l8697
 10458  003B66  0A01               	xorlw	1	; case 9
 10459  003B68  B4D8               	btfsc	status,2,c
 10460  003B6A  D7D4               	goto	l8699
 10461  003B6C  0A03               	xorlw	3	; case 10
 10462  003B6E  B4D8               	btfsc	status,2,c
 10463  003B70  D7D4               	goto	l8701
 10464  003B72  0A01               	xorlw	1	; case 11
 10465  003B74  B4D8               	btfsc	status,2,c
 10466  003B76  D7D4               	goto	l8703
 10467                           
 10468                           ; BSR set to: 0
 10469                           
 10470                           ; BSR set to: 0
 10471  003B78  D776               	goto	l8667
 10472  003B7A                     __end_of_Test:
 10473                           	opt stack 0
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           intcon	equ	0xFF2
 10481                           intcon2	equ	0xFF1
 10482                           intcon3	equ	0xFF0
 10483                           postinc0	equ	0xFEE
 10484                           wreg	equ	0xFE8
 10485                           postdec1	equ	0xFE5
 10486                           fsr1l	equ	0xFE1
 10487                           indf2	equ	0xFDF
 10488                           postinc2	equ	0xFDE
 10489                           postdec2	equ	0xFDD
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function _sensorTest *****************
 10495 ;; Defined at:
 10496 ;;		line 124 in file "Test.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  res             2   45[BANK0 ] int 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:        4 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:   10
 10517 ;; This function calls:
 10518 ;;		_lcdInst
 10519 ;;		_printf
 10520 ;;		_readADC
 10521 ;;		_readMAG
 10522 ;; This function is called by:
 10523 ;;		_Test
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text37
 10528  00201E                     __ptext37:
 10529                           	opt stack 0
 10530  00201E                     _sensorTest:
 10531                           	opt stack 19
 10532                           
 10533                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;incstack = 0
 10537  00201E  0E01               	movlw	1
 10538  002020  EC8A  F027         	call	_lcdInst
 10539  002024  0E68               	movlw	104
 10540  002026  0100               	movlb	0	; () banked
 10541  002028  6FAB               	movwf	??_sensorTest& (0+255),b
 10542  00202A  0EE4               	movlw	228
 10543  00202C                     u8707:
 10544  00202C  2EE8               	decfsz	wreg,f,c
 10545  00202E  D7FE               	bra	u8707
 10546  002030  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10547  002032  D7FC               	bra	u8707
 10548  002034  F000               	nop	
 10549  002036  0E80               	movlw	128
 10550  002038  EC8A  F027         	call	_lcdInst
 10551                           
 10552                           ;Test.c: 127: printf("SENSORS");
 10553  00203C  0EAE               	movlw	low STR_77
 10554  00203E  0100               	movlb	0	; () banked
 10555  002040  6F8E               	movwf	printf@f& (0+255),b
 10556  002042  0EFF               	movlw	high STR_77
 10557  002044  0100               	movlb	0	; () banked
 10558  002046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10559  002048  ECB8  F008         	call	_printf	;wreg free
 10560                           
 10561                           ;Test.c: 128: lcdInst(0b11000000);;
 10562  00204C  0EC0               	movlw	192
 10563  00204E  EC8A  F027         	call	_lcdInst
 10564                           
 10565                           ;Test.c: 129: printf("PUSH TO START");
 10566  002052  0E0B               	movlw	low STR_71
 10567  002054  0100               	movlb	0	; () banked
 10568  002056  6F8E               	movwf	printf@f& (0+255),b
 10569  002058  0EFF               	movlw	high STR_71
 10570  00205A  0100               	movlb	0	; () banked
 10571  00205C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10572  00205E  ECB8  F008         	call	_printf	;wreg free
 10573                           
 10574                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10575  002062  0E05               	movlw	5
 10576  002064  0100               	movlb	0	; () banked
 10577  002066  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10578  002068  0E0F               	movlw	15
 10579  00206A  0100               	movlb	0	; () banked
 10580  00206C  6FAB               	movwf	??_sensorTest& (0+255),b
 10581  00206E  0EF1               	movlw	241
 10582  002070                     u8717:
 10583  002070  2EE8               	decfsz	wreg,f,c
 10584  002072  D7FE               	bra	u8717
 10585  002074  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10586  002076  D7FC               	bra	u8717
 10587  002078  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10588  00207A  D7FA               	bra	u8717
 10589  00207C                     l1122:
 10590  00207C  A281               	btfss	3969,1,c	;volatile
 10591  00207E  D7FE               	goto	l1122
 10592  002080                     l1125:
 10593  002080  B281               	btfsc	3969,1,c	;volatile
 10594  002082  D7FE               	goto	l1125
 10595                           
 10596                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10597  002084  0E01               	movlw	1
 10598  002086  EC8A  F027         	call	_lcdInst
 10599  00208A  0E68               	movlw	104
 10600  00208C  0100               	movlb	0	; () banked
 10601  00208E  6FAB               	movwf	??_sensorTest& (0+255),b
 10602  002090  0EE4               	movlw	228
 10603  002092                     u8727:
 10604  002092  2EE8               	decfsz	wreg,f,c
 10605  002094  D7FE               	bra	u8727
 10606  002096  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10607  002098  D7FC               	bra	u8727
 10608  00209A  F000               	nop	
 10609  00209C  0E80               	movlw	128
 10610  00209E  EC8A  F027         	call	_lcdInst
 10611                           
 10612                           ;Test.c: 138: printf("TST: IR SNSR");
 10613  0020A2  0E35               	movlw	low STR_79
 10614  0020A4  0100               	movlb	0	; () banked
 10615  0020A6  6F8E               	movwf	printf@f& (0+255),b
 10616  0020A8  0EFF               	movlw	high STR_79
 10617  0020AA  0100               	movlb	0	; () banked
 10618  0020AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10619  0020AE  ECB8  F008         	call	_printf	;wreg free
 10620                           
 10621                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10622  0020B2  0E05               	movlw	5
 10623  0020B4  0100               	movlb	0	; () banked
 10624  0020B6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10625  0020B8  0E0F               	movlw	15
 10626  0020BA  0100               	movlb	0	; () banked
 10627  0020BC  6FAB               	movwf	??_sensorTest& (0+255),b
 10628  0020BE  0EF1               	movlw	241
 10629  0020C0                     u8737:
 10630  0020C0  2EE8               	decfsz	wreg,f,c
 10631  0020C2  D7FE               	bra	u8737
 10632  0020C4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10633  0020C6  D7FC               	bra	u8737
 10634  0020C8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10635  0020CA  D7FA               	bra	u8737
 10636                           
 10637                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10638  0020CC  8A8B               	bsf	3979,5,c	;volatile
 10639                           
 10640                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10641  0020CE  D05C               	goto	l7189
 10642  0020D0                     l7171:
 10643                           
 10644                           ;Test.c: 143: readADC(0);
 10645  0020D0  0E00               	movlw	0
 10646  0020D2  EC8F  F026         	call	_readADC
 10647                           
 10648                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10649  0020D6  50C3               	movf	4035,w,c	;volatile
 10650  0020D8  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10651  0020DC  0100               	movlb	0	; () banked
 10652  0020DE  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10653  0020E0  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10654  0020E4  0100               	movlb	0	; () banked
 10655  0020E6  6BAB               	clrf	??_sensorTest& (0+255),b
 10656  0020E8  0100               	movlb	0	; () banked
 10657  0020EA  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10658  0020EC  0100               	movlb	0	; () banked
 10659  0020EE  6FAD               	movwf	sensorTest@res& (0+255),b
 10660  0020F0  0100               	movlb	0	; () banked
 10661  0020F2  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10662  0020F4  0100               	movlb	0	; () banked
 10663  0020F6  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;Test.c: 145: IR_signal = (res > 800) ? 1 : 0;
 10667  0020F8  0100               	movlb	0	; () banked
 10668  0020FA  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10669  0020FC  D00A               	goto	u5860
 10670  0020FE  0E21               	movlw	33
 10671  002100  0100               	movlb	0	; () banked
 10672  002102  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10673  002104  0E03               	movlw	3
 10674  002106  0100               	movlb	0	; () banked
 10675  002108  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10676  00210A  A0D8               	btfss	status,0,c
 10677  00210C  D002               	goto	u5860
 10678  00210E  0E01               	movlw	1
 10679  002110  D001               	goto	u5870
 10680  002112                     u5860:
 10681  002112  0E00               	movlw	0
 10682  002114                     u5870:
 10683  002114  0100               	movlb	0	; () banked
 10684  002116  6FDE               	movwf	_IR_signal& (0+255),b
 10685  002118  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10686                           
 10687                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10688  00211A  0E01               	movlw	1
 10689  00211C  EC8A  F027         	call	_lcdInst
 10690  002120  0E68               	movlw	104
 10691  002122  0100               	movlb	0	; () banked
 10692  002124  6FAB               	movwf	??_sensorTest& (0+255),b
 10693  002126  0EE4               	movlw	228
 10694  002128                     u8747:
 10695  002128  2EE8               	decfsz	wreg,f,c
 10696  00212A  D7FE               	bra	u8747
 10697  00212C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10698  00212E  D7FC               	bra	u8747
 10699  002130  F000               	nop	
 10700  002132  0E80               	movlw	128
 10701  002134  EC8A  F027         	call	_lcdInst
 10702                           
 10703                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10704  002138  0E5A               	movlw	low STR_80
 10705  00213A  0100               	movlb	0	; () banked
 10706  00213C  6F8E               	movwf	printf@f& (0+255),b
 10707  00213E  0EFE               	movlw	high STR_80
 10708  002140  0100               	movlb	0	; () banked
 10709  002142  6F8F               	movwf	(printf@f+1)& (0+255),b
 10710  002144  C0DE  F090         	movff	_IR_signal,?_printf+2
 10711  002148  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10712  00214C  ECB8  F008         	call	_printf	;wreg free
 10713                           
 10714                           ;Test.c: 149: lcdInst(0b11000000);;
 10715  002150  0EC0               	movlw	192
 10716  002152  EC8A  F027         	call	_lcdInst
 10717                           
 10718                           ;Test.c: 150: printf("%d", res);
 10719  002156  0E16               	movlw	low (STR_27+14)
 10720  002158  0100               	movlb	0	; () banked
 10721  00215A  6F8E               	movwf	printf@f& (0+255),b
 10722  00215C  0EFE               	movlw	high (STR_27+14)
 10723  00215E  0100               	movlb	0	; () banked
 10724  002160  6F8F               	movwf	(printf@f+1)& (0+255),b
 10725  002162  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10726  002166  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10727  00216A  ECB8  F008         	call	_printf	;wreg free
 10728                           
 10729                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10730  00216E  0E05               	movlw	5
 10731  002170  0100               	movlb	0	; () banked
 10732  002172  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10733  002174  0E0F               	movlw	15
 10734  002176  0100               	movlb	0	; () banked
 10735  002178  6FAB               	movwf	??_sensorTest& (0+255),b
 10736  00217A  0EF1               	movlw	241
 10737  00217C                     u8757:
 10738  00217C  2EE8               	decfsz	wreg,f,c
 10739  00217E  D7FE               	bra	u8757
 10740  002180  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10741  002182  D7FC               	bra	u8757
 10742  002184  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10743  002186  D7FA               	bra	u8757
 10744  002188                     l7189:
 10745  002188  A281               	btfss	3969,1,c	;volatile
 10746  00218A  D7A2               	goto	l7171
 10747                           
 10748                           ;Test.c: 152: }
 10749                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10750  00218C  9A8B               	bcf	3979,5,c	;volatile
 10751                           
 10752                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10753  00218E  0E01               	movlw	1
 10754  002190  EC8A  F027         	call	_lcdInst
 10755  002194  0E68               	movlw	104
 10756  002196  0100               	movlb	0	; () banked
 10757  002198  6FAB               	movwf	??_sensorTest& (0+255),b
 10758  00219A  0EE4               	movlw	228
 10759  00219C                     u8767:
 10760  00219C  2EE8               	decfsz	wreg,f,c
 10761  00219E  D7FE               	bra	u8767
 10762  0021A0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10763  0021A2  D7FC               	bra	u8767
 10764  0021A4  F000               	nop	
 10765  0021A6  0E80               	movlw	128
 10766  0021A8  EC8A  F027         	call	_lcdInst
 10767                           
 10768                           ;Test.c: 162: printf("TST: MAGNETISM");
 10769  0021AC  0E87               	movlw	low STR_82
 10770  0021AE  0100               	movlb	0	; () banked
 10771  0021B0  6F8E               	movwf	printf@f& (0+255),b
 10772  0021B2  0EFE               	movlw	high STR_82
 10773  0021B4  0100               	movlb	0	; () banked
 10774  0021B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10775  0021B8  ECB8  F008         	call	_printf	;wreg free
 10776                           
 10777                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10778  0021BC  0E05               	movlw	5
 10779  0021BE  0100               	movlb	0	; () banked
 10780  0021C0  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10781  0021C2  0E0F               	movlw	15
 10782  0021C4  0100               	movlb	0	; () banked
 10783  0021C6  6FAB               	movwf	??_sensorTest& (0+255),b
 10784  0021C8  0EF1               	movlw	241
 10785  0021CA                     u8777:
 10786  0021CA  2EE8               	decfsz	wreg,f,c
 10787  0021CC  D7FE               	bra	u8777
 10788  0021CE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10789  0021D0  D7FC               	bra	u8777
 10790  0021D2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10791  0021D4  D7FA               	bra	u8777
 10792                           
 10793                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10794  0021D6  D021               	goto	l7207
 10795  0021D8                     l7201:
 10796                           
 10797                           ;Test.c: 165: readMAG();
 10798  0021D8  EC52  F024         	call	_readMAG	;wreg free
 10799                           
 10800                           ;Test.c: 166: lcdInst(0b10000000);;
 10801  0021DC  0E80               	movlw	128
 10802  0021DE  EC8A  F027         	call	_lcdInst
 10803                           
 10804                           ;Test.c: 167: lcdInst(0b11000000);;
 10805  0021E2  0EC0               	movlw	192
 10806  0021E4  EC8A  F027         	call	_lcdInst
 10807                           
 10808                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10809  0021E8  0E2A               	movlw	low STR_83
 10810  0021EA  0100               	movlb	0	; () banked
 10811  0021EC  6F8E               	movwf	printf@f& (0+255),b
 10812  0021EE  0EFE               	movlw	high STR_83
 10813  0021F0  0100               	movlb	0	; () banked
 10814  0021F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10815  0021F4  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10816  0021F8  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10817  0021FC  ECB8  F008         	call	_printf	;wreg free
 10818                           
 10819                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10820  002200  0E05               	movlw	5
 10821  002202  0100               	movlb	0	; () banked
 10822  002204  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10823  002206  0E0F               	movlw	15
 10824  002208  0100               	movlb	0	; () banked
 10825  00220A  6FAB               	movwf	??_sensorTest& (0+255),b
 10826  00220C  0EF1               	movlw	241
 10827  00220E                     u8787:
 10828  00220E  2EE8               	decfsz	wreg,f,c
 10829  002210  D7FE               	bra	u8787
 10830  002212  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10831  002214  D7FC               	bra	u8787
 10832  002216  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10833  002218  D7FA               	bra	u8787
 10834  00221A                     l7207:
 10835  00221A  A281               	btfss	3969,1,c	;volatile
 10836  00221C  D7DD               	goto	l7201
 10837                           
 10838                           ;Test.c: 170: }
 10839                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10840  00221E  0E01               	movlw	1
 10841  002220  EC8A  F027         	call	_lcdInst
 10842  002224  0E68               	movlw	104
 10843  002226  0100               	movlb	0	; () banked
 10844  002228  6FAB               	movwf	??_sensorTest& (0+255),b
 10845  00222A  0EE4               	movlw	228
 10846  00222C                     u8797:
 10847  00222C  2EE8               	decfsz	wreg,f,c
 10848  00222E  D7FE               	bra	u8797
 10849  002230  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10850  002232  D7FC               	bra	u8797
 10851  002234  F000               	nop	
 10852  002236  0E80               	movlw	128
 10853  002238  EC8A  F027         	call	_lcdInst
 10854                           
 10855                           ;Test.c: 176: printf("TST: COND");
 10856  00223C  0E87               	movlw	low STR_84
 10857  00223E  0100               	movlb	0	; () banked
 10858  002240  6F8E               	movwf	printf@f& (0+255),b
 10859  002242  0EFF               	movlw	high STR_84
 10860  002244  0100               	movlb	0	; () banked
 10861  002246  6F8F               	movwf	(printf@f+1)& (0+255),b
 10862  002248  ECB8  F008         	call	_printf	;wreg free
 10863                           
 10864                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10865  00224C  0E05               	movlw	5
 10866  00224E  0100               	movlb	0	; () banked
 10867  002250  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10868  002252  0E0F               	movlw	15
 10869  002254  0100               	movlb	0	; () banked
 10870  002256  6FAB               	movwf	??_sensorTest& (0+255),b
 10871  002258  0EF1               	movlw	241
 10872  00225A                     u8807:
 10873  00225A  2EE8               	decfsz	wreg,f,c
 10874  00225C  D7FE               	bra	u8807
 10875  00225E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10876  002260  D7FC               	bra	u8807
 10877  002262  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10878  002264  D7FA               	bra	u8807
 10879  002266                     l7219:
 10880                           
 10881                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10882  002266  0E01               	movlw	1
 10883  002268  EC8A  F027         	call	_lcdInst
 10884  00226C  0E68               	movlw	104
 10885  00226E  0100               	movlb	0	; () banked
 10886  002270  6FAB               	movwf	??_sensorTest& (0+255),b
 10887  002272  0EE4               	movlw	228
 10888  002274                     u8817:
 10889  002274  2EE8               	decfsz	wreg,f,c
 10890  002276  D7FE               	bra	u8817
 10891  002278  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10892  00227A  D7FC               	bra	u8817
 10893  00227C  F000               	nop	
 10894  00227E  0E80               	movlw	128
 10895  002280  EC8A  F027         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 180: printf("TST: COND");
 10898  002284  0E87               	movlw	low STR_84
 10899  002286  0100               	movlb	0	; () banked
 10900  002288  6F8E               	movwf	printf@f& (0+255),b
 10901  00228A  0EFF               	movlw	high STR_84
 10902  00228C  0100               	movlb	0	; () banked
 10903  00228E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  002290  ECB8  F008         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10907  002294  D01B               	goto	l7231
 10908  002296                     l7227:
 10909                           
 10910                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10911  002296  0E80               	movlw	128
 10912  002298  EC8A  F027         	call	_lcdInst
 10913  00229C  0EC0               	movlw	192
 10914  00229E  EC8A  F027         	call	_lcdInst
 10915                           
 10916                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10917  0022A2  0EA5               	movlw	low STR_86
 10918  0022A4  0100               	movlb	0	; () banked
 10919  0022A6  6F8E               	movwf	printf@f& (0+255),b
 10920  0022A8  0EFF               	movlw	high STR_86
 10921  0022AA  0100               	movlb	0	; () banked
 10922  0022AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10923  0022AE  A480               	btfss	3968,2,c	;volatile
 10924  0022B0  D004               	goto	u5900
 10925  0022B2  0100               	movlb	0	; () banked
 10926  0022B4  6BAB               	clrf	??_sensorTest& (0+255),b
 10927  0022B6  2BAB               	incf	??_sensorTest& (0+255),f,b
 10928  0022B8  D002               	goto	u5908
 10929  0022BA                     u5900:
 10930  0022BA  0100               	movlb	0	; () banked
 10931  0022BC  6BAB               	clrf	??_sensorTest& (0+255),b
 10932  0022BE                     u5908:
 10933  0022BE  0100               	movlb	0	; () banked
 10934  0022C0  51AB               	movf	??_sensorTest& (0+255),w,b
 10935  0022C2  0100               	movlb	0	; () banked
 10936  0022C4  6F90               	movwf	(?_printf+2)& (0+255),b
 10937  0022C6  6B91               	clrf	(?_printf+3)& (0+255),b
 10938  0022C8  ECB8  F008         	call	_printf	;wreg free
 10939  0022CC                     l7231:
 10940  0022CC  A281               	btfss	3969,1,c	;volatile
 10941  0022CE  D7E3               	goto	l7227
 10942                           
 10943                           ;Test.c: 187: }
 10944                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10945  0022D0  3881               	swapf	3969,w,c	;volatile
 10946  0022D2  0B0F               	andlw	15
 10947  0022D4  0A0F               	xorlw	15
 10948  0022D6  B4D8               	btfsc	status,2,c
 10949  0022D8  0012               	return	
 10950                           
 10951                           ;Test.c: 191: else{
 10952                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10953                           
 10954                           ;Test.c: 190: }
 10955                           
 10956                           ;Test.c: 189: break;
 10957  0022DA  8689               	bsf	3977,3,c	;volatile
 10958                           
 10959                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10960  0022DC  D01B               	goto	l7243
 10961  0022DE                     l7239:
 10962                           
 10963                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10964  0022DE  0E80               	movlw	128
 10965  0022E0  EC8A  F027         	call	_lcdInst
 10966  0022E4  0EC0               	movlw	192
 10967  0022E6  EC8A  F027         	call	_lcdInst
 10968                           
 10969                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10970  0022EA  0EA5               	movlw	low STR_86
 10971  0022EC  0100               	movlb	0	; () banked
 10972  0022EE  6F8E               	movwf	printf@f& (0+255),b
 10973  0022F0  0EFF               	movlw	high STR_86
 10974  0022F2  0100               	movlb	0	; () banked
 10975  0022F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10976  0022F6  A480               	btfss	3968,2,c	;volatile
 10977  0022F8  D004               	goto	u5930
 10978  0022FA  0100               	movlb	0	; () banked
 10979  0022FC  6BAB               	clrf	??_sensorTest& (0+255),b
 10980  0022FE  2BAB               	incf	??_sensorTest& (0+255),f,b
 10981  002300  D002               	goto	u5938
 10982  002302                     u5930:
 10983  002302  0100               	movlb	0	; () banked
 10984  002304  6BAB               	clrf	??_sensorTest& (0+255),b
 10985  002306                     u5938:
 10986  002306  0100               	movlb	0	; () banked
 10987  002308  51AB               	movf	??_sensorTest& (0+255),w,b
 10988  00230A  0100               	movlb	0	; () banked
 10989  00230C  6F90               	movwf	(?_printf+2)& (0+255),b
 10990  00230E  6B91               	clrf	(?_printf+3)& (0+255),b
 10991  002310  ECB8  F008         	call	_printf	;wreg free
 10992  002314                     l7243:
 10993  002314  B281               	btfsc	3969,1,c	;volatile
 10994  002316  D7E3               	goto	l7239
 10995                           
 10996                           ;Test.c: 197: }
 10997                           ;Test.c: 198: LATAbits.LATA3 = !1;
 10998  002318  9689               	bcf	3977,3,c	;volatile
 10999  00231A  D7A5               	goto	l7219
 11000  00231C                     __end_of_sensorTest:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           intcon3	equ	0xFF0
 11011                           postinc0	equ	0xFEE
 11012                           wreg	equ	0xFE8
 11013                           postdec1	equ	0xFE5
 11014                           fsr1l	equ	0xFE1
 11015                           indf2	equ	0xFDF
 11016                           postinc2	equ	0xFDE
 11017                           postdec2	equ	0xFDD
 11018                           fsr2h	equ	0xFDA
 11019                           fsr2l	equ	0xFD9
 11020                           status	equ	0xFD8
 11021                           
 11022 ;; *************** function _readMAG *****************
 11023 ;; Defined at:
 11024 ;;		line 29 in file "ADCFunctionality.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;		None
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  res             2    4[BANK0 ] int 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg, status,2, status,0, cstack
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11039 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;Total ram usage:        4 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    8
 11045 ;; This function calls:
 11046 ;;		_readADC
 11047 ;; This function is called by:
 11048 ;;		_getMAG
 11049 ;;		_sensorTest
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           	psect	text38
 11054  0048A4                     __ptext38:
 11055                           	opt stack 0
 11056  0048A4                     _readMAG:
 11057                           	opt stack 19
 11058                           
 11059                           ;ADCFunctionality.c: 30: readADC(1);
 11060                           
 11061                           ;incstack = 0
 11062  0048A4  0E01               	movlw	1
 11063  0048A6  EC8F  F026         	call	_readADC
 11064                           
 11065                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 11066  0048AA  50C3               	movf	4035,w,c	;volatile
 11067  0048AC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 11068  0048B0  0100               	movlb	0	; () banked
 11069  0048B2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 11070  0048B4  C082  F083         	movff	??_readMAG,??_readMAG+1
 11071  0048B8  0100               	movlb	0	; () banked
 11072  0048BA  6B82               	clrf	??_readMAG& (0+255),b
 11073  0048BC  0100               	movlb	0	; () banked
 11074  0048BE  1182               	iorwf	??_readMAG& (0+255),w,b
 11075  0048C0  0100               	movlb	0	; () banked
 11076  0048C2  6F84               	movwf	readMAG@res& (0+255),b
 11077  0048C4  0100               	movlb	0	; () banked
 11078  0048C6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 11079  0048C8  0100               	movlb	0	; () banked
 11080  0048CA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 11084  0048CC  0100               	movlb	0	; () banked
 11085  0048CE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 11086  0048D0  D008               	goto	u4341
 11087  0048D2  0100               	movlb	0	; () banked
 11088  0048D4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 11089  0048D6  E107               	bnz	u4340
 11090  0048D8  0E96               	movlw	150
 11091  0048DA  0100               	movlb	0	; () banked
 11092  0048DC  5D84               	subwf	readMAG@res& (0+255),w,b
 11093  0048DE  B0D8               	btfsc	status,0,c
 11094  0048E0  D002               	goto	u4340
 11095  0048E2                     u4341:
 11096  0048E2  0E01               	movlw	1
 11097  0048E4  D001               	goto	u4350
 11098  0048E6                     u4340:
 11099  0048E6  0E00               	movlw	0
 11100  0048E8                     u4350:
 11101  0048E8  0100               	movlb	0	; () banked
 11102  0048EA  6FE0               	movwf	_MAG_signal& (0+255),b
 11103  0048EC  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 11104                           
 11105                           ; BSR set to: 0
 11106  0048EE  0012               	return		;funcret
 11107  0048F0                     __end_of_readMAG:
 11108                           	opt stack 0
 11109                           tblptru	equ	0xFF8
 11110                           tblptrh	equ	0xFF7
 11111                           tblptrl	equ	0xFF6
 11112                           tablat	equ	0xFF5
 11113                           prodh	equ	0xFF4
 11114                           prodl	equ	0xFF3
 11115                           intcon	equ	0xFF2
 11116                           intcon2	equ	0xFF1
 11117                           intcon3	equ	0xFF0
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           postdec1	equ	0xFE5
 11121                           fsr1l	equ	0xFE1
 11122                           indf2	equ	0xFDF
 11123                           postinc2	equ	0xFDE
 11124                           postdec2	equ	0xFDD
 11125                           fsr2h	equ	0xFDA
 11126                           fsr2l	equ	0xFD9
 11127                           status	equ	0xFD8
 11128                           
 11129 ;; *************** function _algorithmTest *****************
 11130 ;; Defined at:
 11131 ;;		line 80 in file "Test.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;		None
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;		None
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1    wreg      void 
 11138 ;; Registers used:
 11139 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;Total ram usage:        2 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:   10
 11152 ;; This function calls:
 11153 ;;		_lcdInst
 11154 ;;		_printf
 11155 ;; This function is called by:
 11156 ;;		_Test
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text39
 11161  003C5E                     __ptext39:
 11162                           	opt stack 0
 11163  003C5E                     _algorithmTest:
 11164                           	opt stack 19
 11165                           
 11166                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;incstack = 0
 11170  003C5E  0E01               	movlw	1
 11171  003C60  EC8A  F027         	call	_lcdInst
 11172  003C64  0E68               	movlw	104
 11173  003C66  0100               	movlb	0	; () banked
 11174  003C68  6FAB               	movwf	??_algorithmTest& (0+255),b
 11175  003C6A  0EE4               	movlw	228
 11176  003C6C                     u8827:
 11177  003C6C  2EE8               	decfsz	wreg,f,c
 11178  003C6E  D7FE               	bra	u8827
 11179  003C70  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11180  003C72  D7FC               	bra	u8827
 11181  003C74  F000               	nop	
 11182  003C76  0E80               	movlw	128
 11183  003C78  EC8A  F027         	call	_lcdInst
 11184                           
 11185                           ;Test.c: 83: printf("ALGORITHM TEST");
 11186  003C7C  0ED2               	movlw	low STR_70
 11187  003C7E  0100               	movlb	0	; () banked
 11188  003C80  6F8E               	movwf	printf@f& (0+255),b
 11189  003C82  0EFE               	movlw	high STR_70
 11190  003C84  0100               	movlb	0	; () banked
 11191  003C86  6F8F               	movwf	(printf@f+1)& (0+255),b
 11192  003C88  ECB8  F008         	call	_printf	;wreg free
 11193                           
 11194                           ;Test.c: 84: lcdInst(0b11000000);;
 11195  003C8C  0EC0               	movlw	192
 11196  003C8E  EC8A  F027         	call	_lcdInst
 11197                           
 11198                           ;Test.c: 85: printf("PUSH TO START");
 11199  003C92  0E0B               	movlw	low STR_71
 11200  003C94  0100               	movlb	0	; () banked
 11201  003C96  6F8E               	movwf	printf@f& (0+255),b
 11202  003C98  0EFF               	movlw	high STR_71
 11203  003C9A  0100               	movlb	0	; () banked
 11204  003C9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11205  003C9E  ECB8  F008         	call	_printf	;wreg free
 11206                           
 11207                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 11208  003CA2  0E05               	movlw	5
 11209  003CA4  0100               	movlb	0	; () banked
 11210  003CA6  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 11211  003CA8  0E0F               	movlw	15
 11212  003CAA  0100               	movlb	0	; () banked
 11213  003CAC  6FAB               	movwf	??_algorithmTest& (0+255),b
 11214  003CAE  0EF1               	movlw	241
 11215  003CB0                     u8837:
 11216  003CB0  2EE8               	decfsz	wreg,f,c
 11217  003CB2  D7FE               	bra	u8837
 11218  003CB4  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11219  003CB6  D7FC               	bra	u8837
 11220  003CB8  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 11221  003CBA  D7FA               	bra	u8837
 11222  003CBC                     l1113:
 11223  003CBC  A281               	btfss	3969,1,c	;volatile
 11224  003CBE  D7FE               	goto	l1113
 11225  003CC0                     l1116:
 11226  003CC0  B281               	btfsc	3969,1,c	;volatile
 11227  003CC2  D7FE               	goto	l1116
 11228                           
 11229                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11230  003CC4  0E01               	movlw	1
 11231  003CC6  EC8A  F027         	call	_lcdInst
 11232  003CCA  0E68               	movlw	104
 11233  003CCC  0100               	movlb	0	; () banked
 11234  003CCE  6FAB               	movwf	??_algorithmTest& (0+255),b
 11235  003CD0  0EE4               	movlw	228
 11236  003CD2                     u8847:
 11237  003CD2  2EE8               	decfsz	wreg,f,c
 11238  003CD4  D7FE               	bra	u8847
 11239  003CD6  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11240  003CD8  D7FC               	bra	u8847
 11241  003CDA  F000               	nop	
 11242  003CDC  0E80               	movlw	128
 11243  003CDE  EC8A  F027         	call	_lcdInst
 11244                           
 11245                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11246  003CE2  0E5F               	movlw	low STR_72
 11247  003CE4  0100               	movlb	0	; () banked
 11248  003CE6  6F8E               	movwf	printf@f& (0+255),b
 11249  003CE8  0EFC               	movlw	high STR_72
 11250  003CEA  0100               	movlb	0	; () banked
 11251  003CEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11252  003CEE  ECB8  F008         	call	_printf	;wreg free
 11253                           
 11254                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11255  003CF2  0EEF               	movlw	low STR_73
 11256  003CF4  0100               	movlb	0	; () banked
 11257  003CF6  6F8E               	movwf	printf@f& (0+255),b
 11258  003CF8  0EFE               	movlw	high STR_73
 11259  003CFA  0100               	movlb	0	; () banked
 11260  003CFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11261  003CFE  ECB8  F008         	call	_printf	;wreg free
 11262                           
 11263                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11264  003D02  0E4F               	movlw	low STR_74
 11265  003D04  0100               	movlb	0	; () banked
 11266  003D06  6F8E               	movwf	printf@f& (0+255),b
 11267  003D08  0EFF               	movlw	high STR_74
 11268  003D0A  0100               	movlb	0	; () banked
 11269  003D0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11270  003D0E  ECB8  F008         	call	_printf	;wreg free
 11271                           
 11272                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11273  003D12  0EB4               	movlw	low STR_75
 11274  003D14  0100               	movlb	0	; () banked
 11275  003D16  6F8E               	movwf	printf@f& (0+255),b
 11276  003D18  0EFE               	movlw	high STR_75
 11277  003D1A  0100               	movlb	0	; () banked
 11278  003D1C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11279  003D1E  ECB8  F008         	call	_printf	;wreg free
 11280                           
 11281                           ;Test.c: 121: printf("ALG5: NO CANS");
 11282  003D22  0EFD               	movlw	low STR_76
 11283  003D24  0100               	movlb	0	; () banked
 11284  003D26  6F8E               	movwf	printf@f& (0+255),b
 11285  003D28  0EFE               	movlw	high STR_76
 11286  003D2A  0100               	movlb	0	; () banked
 11287  003D2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11288  003D2E  ECB8  F008         	call	_printf	;wreg free
 11289  003D32  0012               	return		;funcret
 11290  003D34                     __end_of_algorithmTest:
 11291                           	opt stack 0
 11292                           tblptru	equ	0xFF8
 11293                           tblptrh	equ	0xFF7
 11294                           tblptrl	equ	0xFF6
 11295                           tablat	equ	0xFF5
 11296                           prodh	equ	0xFF4
 11297                           prodl	equ	0xFF3
 11298                           intcon	equ	0xFF2
 11299                           intcon2	equ	0xFF1
 11300                           intcon3	equ	0xFF0
 11301                           postinc0	equ	0xFEE
 11302                           wreg	equ	0xFE8
 11303                           postdec1	equ	0xFE5
 11304                           fsr1l	equ	0xFE1
 11305                           indf2	equ	0xFDF
 11306                           postinc2	equ	0xFDE
 11307                           postdec2	equ	0xFDD
 11308                           fsr2h	equ	0xFDA
 11309                           fsr2l	equ	0xFD9
 11310                           status	equ	0xFD8
 11311                           
 11312 ;; *************** function _actuatorTest *****************
 11313 ;; Defined at:
 11314 ;;		line 203 in file "Test.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;  i               1   45[BANK0 ] unsigned char 
 11319 ;;  i               1   67[BANK0 ] unsigned char 
 11320 ;;  i               1   66[BANK0 ] unsigned char 
 11321 ;;  i               1   65[BANK0 ] unsigned char 
 11322 ;;  i               1   64[BANK0 ] unsigned char 
 11323 ;;  i               1   63[BANK0 ] unsigned char 
 11324 ;;  i               1   62[BANK0 ] unsigned char 
 11325 ;;  i               1   61[BANK0 ] unsigned char 
 11326 ;;  i               1   60[BANK0 ] unsigned char 
 11327 ;;  i               1   59[BANK0 ] unsigned char 
 11328 ;;  i               1   58[BANK0 ] unsigned char 
 11329 ;;  i               1   57[BANK0 ] unsigned char 
 11330 ;;  i               1   56[BANK0 ] unsigned char 
 11331 ;;  i               1   55[BANK0 ] unsigned char 
 11332 ;;  i               1   54[BANK0 ] unsigned char 
 11333 ;;  i               1   53[BANK0 ] unsigned char 
 11334 ;;  i               1   52[BANK0 ] unsigned char 
 11335 ;;  i               1   51[BANK0 ] unsigned char 
 11336 ;;  i               1   50[BANK0 ] unsigned char 
 11337 ;;  i               1   49[BANK0 ] unsigned char 
 11338 ;;  i               1   48[BANK0 ] unsigned char 
 11339 ;;  i               1   47[BANK0 ] unsigned char 
 11340 ;;  i               1   46[BANK0 ] unsigned char 
 11341 ;;  i               2   68[BANK0 ] int 
 11342 ;; Return value:  Size  Location     Type
 11343 ;;                  1    wreg      void 
 11344 ;; Registers used:
 11345 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11354 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;Total ram usage:       27 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:   10
 11358 ;; This function calls:
 11359 ;;		_lcdInst
 11360 ;;		_printf
 11361 ;;		_updateServoPosition
 11362 ;; This function is called by:
 11363 ;;		_Test
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           	psect	text40
 11368  000012                     __ptext40:
 11369                           	opt stack 0
 11370  000012                     _actuatorTest:
 11371                           	opt stack 19
 11372                           
 11373                           ;Test.c: 205: int i = 0;
 11374                           
 11375                           ;incstack = 0
 11376  000012  0E00               	movlw	0
 11377  000014  0100               	movlb	0	; () banked
 11378  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11379  000018  0E00               	movlw	0
 11380  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11384  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11388  00001E  0E01               	movlw	1
 11389  000020  EC8A  F027         	call	_lcdInst
 11390  000024  0E68               	movlw	104
 11391  000026  0100               	movlb	0	; () banked
 11392  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11393  00002A  0EE4               	movlw	228
 11394  00002C                     u8857:
 11395  00002C  2EE8               	decfsz	wreg,f,c
 11396  00002E  D7FE               	bra	u8857
 11397  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11398  000032  D7FC               	bra	u8857
 11399  000034  F000               	nop	
 11400  000036  0E80               	movlw	128
 11401  000038  EC8A  F027         	call	_lcdInst
 11402                           
 11403                           ;Test.c: 209: printf("ACTUATORS");
 11404  00003C  0E91               	movlw	low STR_88
 11405  00003E  0100               	movlb	0	; () banked
 11406  000040  6F8E               	movwf	printf@f& (0+255),b
 11407  000042  0EFF               	movlw	high STR_88
 11408  000044  0100               	movlb	0	; () banked
 11409  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11410  000048  ECB8  F008         	call	_printf	;wreg free
 11411                           
 11412                           ;Test.c: 210: lcdInst(0b11000000);;
 11413  00004C  0EC0               	movlw	192
 11414  00004E  EC8A  F027         	call	_lcdInst
 11415                           
 11416                           ;Test.c: 211: printf("PUSH TO START");
 11417  000052  0E0B               	movlw	low STR_71
 11418  000054  0100               	movlb	0	; () banked
 11419  000056  6F8E               	movwf	printf@f& (0+255),b
 11420  000058  0EFF               	movlw	high STR_71
 11421  00005A  0100               	movlb	0	; () banked
 11422  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11423  00005E  ECB8  F008         	call	_printf	;wreg free
 11424                           
 11425                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11426  000062  0E05               	movlw	5
 11427  000064  0100               	movlb	0	; () banked
 11428  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11429  000068  0E0F               	movlw	15
 11430  00006A  0100               	movlb	0	; () banked
 11431  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11432  00006E  0EF1               	movlw	241
 11433  000070                     u8867:
 11434  000070  2EE8               	decfsz	wreg,f,c
 11435  000072  D7FE               	bra	u8867
 11436  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11437  000076  D7FC               	bra	u8867
 11438  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11439  00007A  D7FA               	bra	u8867
 11440  00007C                     l1148:
 11441  00007C  A281               	btfss	3969,1,c	;volatile
 11442  00007E  D7FE               	goto	l1148
 11443  000080                     l1151:
 11444  000080  B281               	btfsc	3969,1,c	;volatile
 11445  000082  D7FE               	goto	l1151
 11446                           
 11447                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11448  000084  0E01               	movlw	1
 11449  000086  EC8A  F027         	call	_lcdInst
 11450  00008A  0E68               	movlw	104
 11451  00008C  0100               	movlb	0	; () banked
 11452  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11453  000090  0EE4               	movlw	228
 11454  000092                     u8877:
 11455  000092  2EE8               	decfsz	wreg,f,c
 11456  000094  D7FE               	bra	u8877
 11457  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11458  000098  D7FC               	bra	u8877
 11459  00009A  F000               	nop	
 11460  00009C  0E80               	movlw	128
 11461  00009E  EC8A  F027         	call	_lcdInst
 11462                           
 11463                           ;Test.c: 220: printf("TST: DC MOTORS");
 11464  0000A2  0EC3               	movlw	low STR_90
 11465  0000A4  0100               	movlb	0	; () banked
 11466  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11467  0000A8  0EFE               	movlw	high STR_90
 11468  0000AA  0100               	movlb	0	; () banked
 11469  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11470  0000AE  ECB8  F008         	call	_printf	;wreg free
 11471                           
 11472                           ;Test.c: 221: lcdInst(0b11000000);;
 11473  0000B2  0EC0               	movlw	192
 11474  0000B4  EC8A  F027         	call	_lcdInst
 11475                           
 11476                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11477  0000B8  0EE1               	movlw	low STR_91
 11478  0000BA  0100               	movlb	0	; () banked
 11479  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11480  0000BE  0EFE               	movlw	high STR_91
 11481  0000C0  0100               	movlb	0	; () banked
 11482  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11483  0000C4  ECB8  F008         	call	_printf	;wreg free
 11484                           
 11485                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11486  0000C8  8A89               	bsf	3977,5,c	;volatile
 11487                           
 11488                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11489  0000CA  0E00               	movlw	0
 11490  0000CC  0100               	movlb	0	; () banked
 11491  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11492  0000D0  0E00               	movlw	0
 11493  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496  0000D4  0100               	movlb	0	; () banked
 11497  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11498  0000D8  D008               	goto	l7283
 11499  0000DA  0100               	movlb	0	; () banked
 11500  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11501  0000DE  E123               	bnz	l1155
 11502  0000E0  0E05               	movlw	5
 11503  0000E2  0100               	movlb	0	; () banked
 11504  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11505  0000E6  B0D8               	btfsc	status,0,c
 11506  0000E8  D01E               	goto	l1155
 11507  0000EA                     l7283:
 11508                           
 11509                           ; BSR set to: 0
 11510  0000EA  0E00               	movlw	0
 11511  0000EC  0100               	movlb	0	; () banked
 11512  0000EE  6FAD               	movwf	actuatorTest@i_1652& (0+255),b
 11513  0000F0                     l7285:
 11514                           
 11515                           ; BSR set to: 0
 11516  0000F0  0E63               	movlw	99
 11517  0000F2  0100               	movlb	0	; () banked
 11518  0000F4  65AD               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11519  0000F6  D001               	goto	l7289
 11520  0000F8  D00C               	goto	l7293
 11521  0000FA                     l7289:
 11522                           
 11523                           ; BSR set to: 0
 11524  0000FA  0E68               	movlw	104
 11525  0000FC  0100               	movlb	0	; () banked
 11526  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11527  000100  0EE4               	movlw	228
 11528  000102                     u8887:
 11529  000102  2EE8               	decfsz	wreg,f,c
 11530  000104  D7FE               	bra	u8887
 11531  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11532  000108  D7FC               	bra	u8887
 11533  00010A  F000               	nop	
 11534  00010C  0100               	movlb	0	; () banked
 11535  00010E  2BAD               	incf	actuatorTest@i_1652& (0+255),f,b
 11536  000110  D7EF               	goto	l7285
 11537  000112                     l7293:
 11538                           
 11539                           ; BSR set to: 0
 11540  000112  0100               	movlb	0	; () banked
 11541  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11542  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11543                           
 11544                           ; BSR set to: 0
 11545  000118  0100               	movlb	0	; () banked
 11546  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11547  00011C  D7E6               	goto	l7283
 11548  00011E  0100               	movlb	0	; () banked
 11549  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11550  000122  E101               	bnz	u6000
 11551  000124  D7DD               	goto	L8
 11552  000126                     u6000:
 11553  000126                     l1155:
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11557  000126  9A89               	bcf	3977,5,c	;volatile
 11558                           
 11559                           ; BSR set to: 0
 11560                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11561  000128  0E01               	movlw	1
 11562  00012A  EC8A  F027         	call	_lcdInst
 11563  00012E  0E68               	movlw	104
 11564  000130  0100               	movlb	0	; () banked
 11565  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11566  000134  0EE4               	movlw	228
 11567  000136                     u8897:
 11568  000136  2EE8               	decfsz	wreg,f,c
 11569  000138  D7FE               	bra	u8897
 11570  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11571  00013C  D7FC               	bra	u8897
 11572  00013E  F000               	nop	
 11573  000140  0E80               	movlw	128
 11574  000142  EC8A  F027         	call	_lcdInst
 11575                           
 11576                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11577  000146  0E70               	movlw	low STR_92
 11578  000148  0100               	movlb	0	; () banked
 11579  00014A  6F8E               	movwf	printf@f& (0+255),b
 11580  00014C  0EFC               	movlw	high STR_92
 11581  00014E  0100               	movlb	0	; () banked
 11582  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11583  000152  ECB8  F008         	call	_printf	;wreg free
 11584                           
 11585                           ;Test.c: 233: lcdInst(0b11000000);;
 11586  000156  0EC0               	movlw	192
 11587  000158  EC8A  F027         	call	_lcdInst
 11588                           
 11589                           ;Test.c: 234: printf("PIN RA3...");
 11590  00015C  0E5B               	movlw	low STR_93
 11591  00015E  0100               	movlb	0	; () banked
 11592  000160  6F8E               	movwf	printf@f& (0+255),b
 11593  000162  0EFF               	movlw	high STR_93
 11594  000164  0100               	movlb	0	; () banked
 11595  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11596  000168  ECB8  F008         	call	_printf	;wreg free
 11597                           
 11598                           ;Test.c: 235: for(i=0;i<5;i++){
 11599  00016C  0E00               	movlw	0
 11600  00016E  0100               	movlb	0	; () banked
 11601  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11602  000172  0E00               	movlw	0
 11603  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11604                           
 11605                           ; BSR set to: 0
 11606  000176  0100               	movlb	0	; () banked
 11607  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11608  00017A  D008               	goto	l1158
 11609  00017C  0100               	movlb	0	; () banked
 11610  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11611  000180  E12C               	bnz	l1159
 11612  000182  0E05               	movlw	5
 11613  000184  0100               	movlb	0	; () banked
 11614  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11615  000188  B0D8               	btfsc	status,0,c
 11616  00018A  D027               	goto	l1159
 11617  00018C                     l1158:
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11621  00018C  8689               	bsf	3977,3,c	;volatile
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11625  00018E  0E0D               	movlw	13
 11626  000190  0100               	movlb	0	; () banked
 11627  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11628  000194  0E2D               	movlw	45
 11629  000196  0100               	movlb	0	; () banked
 11630  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11631  00019A  0ED7               	movlw	215
 11632  00019C                     u8907:
 11633  00019C  2EE8               	decfsz	wreg,f,c
 11634  00019E  D7FE               	bra	u8907
 11635  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11636  0001A2  D7FC               	bra	u8907
 11637  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11638  0001A6  D7FA               	bra	u8907
 11639  0001A8  D000               	nop2	
 11640                           
 11641                           ;Test.c: 238: LATAbits.LATA3 = !1;
 11642  0001AA  9689               	bcf	3977,3,c	;volatile
 11643                           
 11644                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11645  0001AC  0E1D               	movlw	29
 11646  0001AE  0100               	movlb	0	; () banked
 11647  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11648  0001B2  0E69               	movlw	105
 11649  0001B4  0100               	movlb	0	; () banked
 11650  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11651  0001B8  0EA5               	movlw	165
 11652  0001BA                     u8917:
 11653  0001BA  2EE8               	decfsz	wreg,f,c
 11654  0001BC  D7FE               	bra	u8917
 11655  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11656  0001C0  D7FC               	bra	u8917
 11657  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11658  0001C4  D7FA               	bra	u8917
 11659  0001C6  0100               	movlb	0	; () banked
 11660  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11661  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11662  0001CC  0100               	movlb	0	; () banked
 11663  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11664  0001D0  D7DD               	goto	l1158
 11665  0001D2  0100               	movlb	0	; () banked
 11666  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11667  0001D6  E101               	bnz	u6020
 11668  0001D8  D7D4               	goto	L9
 11669  0001DA                     u6020:
 11670  0001DA                     l1159:
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;Test.c: 240: }
 11674                           ;Test.c: 241: LATAbits.LATA3 = !1;
 11675  0001DA  9689               	bcf	3977,3,c	;volatile
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11679  0001DC  0E01               	movlw	1
 11680  0001DE  EC8A  F027         	call	_lcdInst
 11681  0001E2  0E68               	movlw	104
 11682  0001E4  0100               	movlb	0	; () banked
 11683  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11684  0001E8  0EE4               	movlw	228
 11685  0001EA                     u8927:
 11686  0001EA  2EE8               	decfsz	wreg,f,c
 11687  0001EC  D7FE               	bra	u8927
 11688  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11689  0001F0  D7FC               	bra	u8927
 11690  0001F2  F000               	nop	
 11691  0001F4  0E80               	movlw	128
 11692  0001F6  EC8A  F027         	call	_lcdInst
 11693                           
 11694                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11695  0001FA  0E81               	movlw	low STR_94
 11696  0001FC  0100               	movlb	0	; () banked
 11697  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11698  000200  0EFC               	movlw	high STR_94
 11699  000202  0100               	movlb	0	; () banked
 11700  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11701  000206  ECB8  F008         	call	_printf	;wreg free
 11702                           
 11703                           ;Test.c: 249: lcdInst(0b11000000);;
 11704  00020A  0EC0               	movlw	192
 11705  00020C  EC8A  F027         	call	_lcdInst
 11706                           
 11707                           ;Test.c: 250: printf("PIN RA4...");
 11708  000210  0E66               	movlw	low STR_95
 11709  000212  0100               	movlb	0	; () banked
 11710  000214  6F8E               	movwf	printf@f& (0+255),b
 11711  000216  0EFF               	movlw	high STR_95
 11712  000218  0100               	movlb	0	; () banked
 11713  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11714  00021C  ECB8  F008         	call	_printf	;wreg free
 11715                           
 11716                           ;Test.c: 251: for(i=0;i<5;i++){
 11717  000220  0E00               	movlw	0
 11718  000222  0100               	movlb	0	; () banked
 11719  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11720  000226  0E00               	movlw	0
 11721  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11722                           
 11723                           ; BSR set to: 0
 11724  00022A  0100               	movlb	0	; () banked
 11725  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11726  00022E  D008               	goto	l1160
 11727  000230  0100               	movlb	0	; () banked
 11728  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11729  000234  E12C               	bnz	l1161
 11730  000236  0E05               	movlw	5
 11731  000238  0100               	movlb	0	; () banked
 11732  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11733  00023C  B0D8               	btfsc	status,0,c
 11734  00023E  D027               	goto	l1161
 11735  000240                     l1160:
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11739  000240  8889               	bsf	3977,4,c	;volatile
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11743  000242  0E0D               	movlw	13
 11744  000244  0100               	movlb	0	; () banked
 11745  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11746  000248  0E2D               	movlw	45
 11747  00024A  0100               	movlb	0	; () banked
 11748  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11749  00024E  0ED7               	movlw	215
 11750  000250                     u8937:
 11751  000250  2EE8               	decfsz	wreg,f,c
 11752  000252  D7FE               	bra	u8937
 11753  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11754  000256  D7FC               	bra	u8937
 11755  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11756  00025A  D7FA               	bra	u8937
 11757  00025C  D000               	nop2	
 11758                           
 11759                           ;Test.c: 254: LATAbits.LATA4 = !1;
 11760  00025E  9889               	bcf	3977,4,c	;volatile
 11761                           
 11762                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11763  000260  0E1D               	movlw	29
 11764  000262  0100               	movlb	0	; () banked
 11765  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11766  000266  0E69               	movlw	105
 11767  000268  0100               	movlb	0	; () banked
 11768  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11769  00026C  0EA5               	movlw	165
 11770  00026E                     u8947:
 11771  00026E  2EE8               	decfsz	wreg,f,c
 11772  000270  D7FE               	bra	u8947
 11773  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11774  000274  D7FC               	bra	u8947
 11775  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11776  000278  D7FA               	bra	u8947
 11777  00027A  0100               	movlb	0	; () banked
 11778  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11779  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11780  000280  0100               	movlb	0	; () banked
 11781  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11782  000284  D7DD               	goto	l1160
 11783  000286  0100               	movlb	0	; () banked
 11784  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11785  00028A  E101               	bnz	u6040
 11786  00028C  D7D4               	goto	L10
 11787  00028E                     u6040:
 11788  00028E                     l1161:
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;Test.c: 256: }
 11792                           ;Test.c: 257: LATAbits.LATA4 = !1;
 11793  00028E  9889               	bcf	3977,4,c	;volatile
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11797  000290  0E01               	movlw	1
 11798  000292  EC8A  F027         	call	_lcdInst
 11799  000296  0E68               	movlw	104
 11800  000298  0100               	movlb	0	; () banked
 11801  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11802  00029C  0EE4               	movlw	228
 11803  00029E                     u8957:
 11804  00029E  2EE8               	decfsz	wreg,f,c
 11805  0002A0  D7FE               	bra	u8957
 11806  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11807  0002A4  D7FC               	bra	u8957
 11808  0002A6  F000               	nop	
 11809  0002A8  0E80               	movlw	128
 11810  0002AA  EC8A  F027         	call	_lcdInst
 11811                           
 11812                           ;Test.c: 261: machine_state = Sorting_state;
 11813  0002AE  0E01               	movlw	1
 11814  0002B0  0100               	movlb	0	; () banked
 11815  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;Test.c: 262: was_low_1 = 0;
 11819  0002B4  0E00               	movlw	0
 11820  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11821  0002B8  0E00               	movlw	0
 11822  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;Test.c: 263: was_low_1 = 0;
 11826  0002BC  0E00               	movlw	0
 11827  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11828  0002C0  0E00               	movlw	0
 11829  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;Test.c: 270: printf("TST: PAN SERVO");
 11833  0002C4  0EA5               	movlw	low STR_96
 11834  0002C6  0100               	movlb	0	; () banked
 11835  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11836  0002CA  0EFE               	movlw	high STR_96
 11837  0002CC  0100               	movlb	0	; () banked
 11838  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11839  0002D0  ECB8  F008         	call	_printf	;wreg free
 11840                           
 11841                           ;Test.c: 271: lcdInst(0b11000000);;
 11842  0002D4  0EC0               	movlw	192
 11843  0002D6  EC8A  F027         	call	_lcdInst
 11844                           
 11845                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11846  0002DA  0E0A               	movlw	low STR_97
 11847  0002DC  0100               	movlb	0	; () banked
 11848  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11849  0002E0  0EFC               	movlw	high STR_97
 11850  0002E2  0100               	movlb	0	; () banked
 11851  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11852  0002E6  ECB8  F008         	call	_printf	;wreg free
 11853                           
 11854                           ;Test.c: 273: updateServoPosition(1200, 1);
 11855  0002EA  0E04               	movlw	4
 11856  0002EC  0100               	movlb	0	; () banked
 11857  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11858  0002F0  0EB0               	movlw	176
 11859  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11860  0002F4  0E00               	movlw	0
 11861  0002F6  0100               	movlb	0	; () banked
 11862  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11863  0002FA  0E01               	movlw	1
 11864  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11865  0002FE  ECE6  F021         	call	_updateServoPosition	;wreg free
 11866                           
 11867                           ;Test.c: 274: TMR1ON = 1;
 11868  000302  80CD               	bsf	4045,0,c	;volatile
 11869                           
 11870                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11871  000304  0E00               	movlw	0
 11872  000306  0100               	movlb	0	; () banked
 11873  000308  6FAE               	movwf	actuatorTest@i_1659& (0+255),b
 11874  00030A                     l7369:
 11875                           
 11876                           ; BSR set to: 0
 11877  00030A  0E63               	movlw	99
 11878  00030C  0100               	movlb	0	; () banked
 11879  00030E  65AE               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11880  000310  D001               	goto	l7373
 11881  000312  D00C               	goto	l7377
 11882  000314                     l7373:
 11883                           
 11884                           ; BSR set to: 0
 11885  000314  0E68               	movlw	104
 11886  000316  0100               	movlb	0	; () banked
 11887  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11888  00031A  0EE4               	movlw	228
 11889  00031C                     u8967:
 11890  00031C  2EE8               	decfsz	wreg,f,c
 11891  00031E  D7FE               	bra	u8967
 11892  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11893  000322  D7FC               	bra	u8967
 11894  000324  F000               	nop	
 11895  000326  0100               	movlb	0	; () banked
 11896  000328  2BAE               	incf	actuatorTest@i_1659& (0+255),f,b
 11897  00032A  D7EF               	goto	l7369
 11898  00032C                     l7377:
 11899                           
 11900                           ; BSR set to: 0
 11901  00032C  0E00               	movlw	0
 11902  00032E  0100               	movlb	0	; () banked
 11903  000330  6FAF               	movwf	actuatorTest@i_1660& (0+255),b
 11904  000332                     l7379:
 11905                           
 11906                           ; BSR set to: 0
 11907  000332  0E63               	movlw	99
 11908  000334  0100               	movlb	0	; () banked
 11909  000336  65AF               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11910  000338  D001               	goto	l7383
 11911  00033A  D00C               	goto	l7387
 11912  00033C                     l7383:
 11913                           
 11914                           ; BSR set to: 0
 11915  00033C  0E68               	movlw	104
 11916  00033E  0100               	movlb	0	; () banked
 11917  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11918  000342  0EE4               	movlw	228
 11919  000344                     u8977:
 11920  000344  2EE8               	decfsz	wreg,f,c
 11921  000346  D7FE               	bra	u8977
 11922  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11923  00034A  D7FC               	bra	u8977
 11924  00034C  F000               	nop	
 11925  00034E  0100               	movlb	0	; () banked
 11926  000350  2BAF               	incf	actuatorTest@i_1660& (0+255),f,b
 11927  000352  D7EF               	goto	l7379
 11928  000354                     l7387:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11932  000354  0E80               	movlw	128
 11933  000356  EC8A  F027         	call	_lcdInst
 11934  00035A  0EC0               	movlw	192
 11935  00035C  EC8A  F027         	call	_lcdInst
 11936                           
 11937                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11938  000360  0EF9               	movlw	low STR_98
 11939  000362  0100               	movlb	0	; () banked
 11940  000364  6F8E               	movwf	printf@f& (0+255),b
 11941  000366  0EFB               	movlw	high STR_98
 11942  000368  0100               	movlb	0	; () banked
 11943  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11944  00036C  ECB8  F008         	call	_printf	;wreg free
 11945                           
 11946                           ;Test.c: 279: updateServoPosition(500, 1);
 11947  000370  0E01               	movlw	1
 11948  000372  0100               	movlb	0	; () banked
 11949  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11950  000376  0EF4               	movlw	244
 11951  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11952  00037A  0E00               	movlw	0
 11953  00037C  0100               	movlb	0	; () banked
 11954  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11955  000380  0E01               	movlw	1
 11956  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11957  000384  ECE6  F021         	call	_updateServoPosition	;wreg free
 11958                           
 11959                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11960  000388  0E00               	movlw	0
 11961  00038A  0100               	movlb	0	; () banked
 11962  00038C  6FB0               	movwf	actuatorTest@i_1662& (0+255),b
 11963  00038E                     l7395:
 11964                           
 11965                           ; BSR set to: 0
 11966  00038E  0E63               	movlw	99
 11967  000390  0100               	movlb	0	; () banked
 11968  000392  65B0               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11969  000394  D001               	goto	l7399
 11970  000396  D00C               	goto	l7403
 11971  000398                     l7399:
 11972                           
 11973                           ; BSR set to: 0
 11974  000398  0E68               	movlw	104
 11975  00039A  0100               	movlb	0	; () banked
 11976  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11977  00039E  0EE4               	movlw	228
 11978  0003A0                     u8987:
 11979  0003A0  2EE8               	decfsz	wreg,f,c
 11980  0003A2  D7FE               	bra	u8987
 11981  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11982  0003A6  D7FC               	bra	u8987
 11983  0003A8  F000               	nop	
 11984  0003AA  0100               	movlb	0	; () banked
 11985  0003AC  2BB0               	incf	actuatorTest@i_1662& (0+255),f,b
 11986  0003AE  D7EF               	goto	l7395
 11987  0003B0                     l7403:
 11988                           
 11989                           ; BSR set to: 0
 11990  0003B0  0E00               	movlw	0
 11991  0003B2  0100               	movlb	0	; () banked
 11992  0003B4  6FB1               	movwf	actuatorTest@i_1663& (0+255),b
 11993  0003B6                     l7405:
 11994                           
 11995                           ; BSR set to: 0
 11996  0003B6  0E63               	movlw	99
 11997  0003B8  0100               	movlb	0	; () banked
 11998  0003BA  65B1               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11999  0003BC  D001               	goto	l7409
 12000  0003BE  D00C               	goto	l7413
 12001  0003C0                     l7409:
 12002                           
 12003                           ; BSR set to: 0
 12004  0003C0  0E68               	movlw	104
 12005  0003C2  0100               	movlb	0	; () banked
 12006  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12007  0003C6  0EE4               	movlw	228
 12008  0003C8                     u8997:
 12009  0003C8  2EE8               	decfsz	wreg,f,c
 12010  0003CA  D7FE               	bra	u8997
 12011  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12012  0003CE  D7FC               	bra	u8997
 12013  0003D0  F000               	nop	
 12014  0003D2  0100               	movlb	0	; () banked
 12015  0003D4  2BB1               	incf	actuatorTest@i_1663& (0+255),f,b
 12016  0003D6  D7EF               	goto	l7405
 12017  0003D8                     l7413:
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12021  0003D8  0E80               	movlw	128
 12022  0003DA  EC8A  F027         	call	_lcdInst
 12023  0003DE  0EC0               	movlw	192
 12024  0003E0  EC8A  F027         	call	_lcdInst
 12025                           
 12026                           ;Test.c: 283: printf("LEFT -- 2s      ");
 12027  0003E4  0ED7               	movlw	low STR_99
 12028  0003E6  0100               	movlb	0	; () banked
 12029  0003E8  6F8E               	movwf	printf@f& (0+255),b
 12030  0003EA  0EFB               	movlw	high STR_99
 12031  0003EC  0100               	movlb	0	; () banked
 12032  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12033  0003F0  ECB8  F008         	call	_printf	;wreg free
 12034                           
 12035                           ;Test.c: 284: updateServoPosition(2400, 1);
 12036  0003F4  0E09               	movlw	9
 12037  0003F6  0100               	movlb	0	; () banked
 12038  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12039  0003FA  0E60               	movlw	96
 12040  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12041  0003FE  0E00               	movlw	0
 12042  000400  0100               	movlb	0	; () banked
 12043  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12044  000404  0E01               	movlw	1
 12045  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12046  000408  ECE6  F021         	call	_updateServoPosition	;wreg free
 12047                           
 12048                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12049  00040C  0E00               	movlw	0
 12050  00040E  0100               	movlb	0	; () banked
 12051  000410  6FB2               	movwf	actuatorTest@i_1665& (0+255),b
 12052  000412                     l7421:
 12053                           
 12054                           ; BSR set to: 0
 12055  000412  0E63               	movlw	99
 12056  000414  0100               	movlb	0	; () banked
 12057  000416  65B2               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12058  000418  D001               	goto	l7425
 12059  00041A  D00C               	goto	l7429
 12060  00041C                     l7425:
 12061                           
 12062                           ; BSR set to: 0
 12063  00041C  0E68               	movlw	104
 12064  00041E  0100               	movlb	0	; () banked
 12065  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 12066  000422  0EE4               	movlw	228
 12067  000424                     u9007:
 12068  000424  2EE8               	decfsz	wreg,f,c
 12069  000426  D7FE               	bra	u9007
 12070  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12071  00042A  D7FC               	bra	u9007
 12072  00042C  F000               	nop	
 12073  00042E  0100               	movlb	0	; () banked
 12074  000430  2BB2               	incf	actuatorTest@i_1665& (0+255),f,b
 12075  000432  D7EF               	goto	l7421
 12076  000434                     l7429:
 12077                           
 12078                           ; BSR set to: 0
 12079  000434  0E00               	movlw	0
 12080  000436  0100               	movlb	0	; () banked
 12081  000438  6FB3               	movwf	actuatorTest@i_1666& (0+255),b
 12082  00043A                     l7431:
 12083                           
 12084                           ; BSR set to: 0
 12085  00043A  0E63               	movlw	99
 12086  00043C  0100               	movlb	0	; () banked
 12087  00043E  65B3               	cpfsgt	actuatorTest@i_1666& (0+255),b
 12088  000440  D001               	goto	l7435
 12089  000442  D00C               	goto	l7439
 12090  000444                     l7435:
 12091                           
 12092                           ; BSR set to: 0
 12093  000444  0E68               	movlw	104
 12094  000446  0100               	movlb	0	; () banked
 12095  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 12096  00044A  0EE4               	movlw	228
 12097  00044C                     u9017:
 12098  00044C  2EE8               	decfsz	wreg,f,c
 12099  00044E  D7FE               	bra	u9017
 12100  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12101  000452  D7FC               	bra	u9017
 12102  000454  F000               	nop	
 12103  000456  0100               	movlb	0	; () banked
 12104  000458  2BB3               	incf	actuatorTest@i_1666& (0+255),f,b
 12105  00045A  D7EF               	goto	l7431
 12106  00045C                     l7439:
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12110  00045C  0E80               	movlw	128
 12111  00045E  EC8A  F027         	call	_lcdInst
 12112  000462  0EC0               	movlw	192
 12113  000464  EC8A  F027         	call	_lcdInst
 12114                           
 12115                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 12116  000468  0E2C               	movlw	low STR_100
 12117  00046A  0100               	movlb	0	; () banked
 12118  00046C  6F8E               	movwf	printf@f& (0+255),b
 12119  00046E  0EFC               	movlw	high STR_100
 12120  000470  0100               	movlb	0	; () banked
 12121  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 12122  000474  ECB8  F008         	call	_printf	;wreg free
 12123                           
 12124                           ;Test.c: 289: updateServoPosition(1670, 1);
 12125  000478  0E06               	movlw	6
 12126  00047A  0100               	movlb	0	; () banked
 12127  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12128  00047E  0E86               	movlw	134
 12129  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12130  000482  0E00               	movlw	0
 12131  000484  0100               	movlb	0	; () banked
 12132  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12133  000488  0E01               	movlw	1
 12134  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12135  00048C  ECE6  F021         	call	_updateServoPosition	;wreg free
 12136                           
 12137                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12138  000490  0E00               	movlw	0
 12139  000492  0100               	movlb	0	; () banked
 12140  000494  6FB4               	movwf	actuatorTest@i_1668& (0+255),b
 12141  000496                     l7447:
 12142                           
 12143                           ; BSR set to: 0
 12144  000496  0E63               	movlw	99
 12145  000498  0100               	movlb	0	; () banked
 12146  00049A  65B4               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12147  00049C  D001               	goto	l7451
 12148  00049E  D00C               	goto	l7455
 12149  0004A0                     l7451:
 12150                           
 12151                           ; BSR set to: 0
 12152  0004A0  0E68               	movlw	104
 12153  0004A2  0100               	movlb	0	; () banked
 12154  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12155  0004A6  0EE4               	movlw	228
 12156  0004A8                     u9027:
 12157  0004A8  2EE8               	decfsz	wreg,f,c
 12158  0004AA  D7FE               	bra	u9027
 12159  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12160  0004AE  D7FC               	bra	u9027
 12161  0004B0  F000               	nop	
 12162  0004B2  0100               	movlb	0	; () banked
 12163  0004B4  2BB4               	incf	actuatorTest@i_1668& (0+255),f,b
 12164  0004B6  D7EF               	goto	l7447
 12165  0004B8                     l7455:
 12166                           
 12167                           ; BSR set to: 0
 12168  0004B8  0E00               	movlw	0
 12169  0004BA  0100               	movlb	0	; () banked
 12170  0004BC  6FB5               	movwf	actuatorTest@i_1669& (0+255),b
 12171  0004BE                     l7457:
 12172                           
 12173                           ; BSR set to: 0
 12174  0004BE  0E63               	movlw	99
 12175  0004C0  0100               	movlb	0	; () banked
 12176  0004C2  65B5               	cpfsgt	actuatorTest@i_1669& (0+255),b
 12177  0004C4  D001               	goto	l7461
 12178  0004C6  D00C               	goto	l7465
 12179  0004C8                     l7461:
 12180                           
 12181                           ; BSR set to: 0
 12182  0004C8  0E68               	movlw	104
 12183  0004CA  0100               	movlb	0	; () banked
 12184  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12185  0004CE  0EE4               	movlw	228
 12186  0004D0                     u9037:
 12187  0004D0  2EE8               	decfsz	wreg,f,c
 12188  0004D2  D7FE               	bra	u9037
 12189  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12190  0004D6  D7FC               	bra	u9037
 12191  0004D8  F000               	nop	
 12192  0004DA  0100               	movlb	0	; () banked
 12193  0004DC  2BB5               	incf	actuatorTest@i_1669& (0+255),f,b
 12194  0004DE  D7EF               	goto	l7457
 12195  0004E0                     l7465:
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12199  0004E0  0E80               	movlw	128
 12200  0004E2  EC8A  F027         	call	_lcdInst
 12201  0004E6  0EC0               	movlw	192
 12202  0004E8  EC8A  F027         	call	_lcdInst
 12203                           
 12204                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 12205  0004EC  0E3D               	movlw	low STR_101
 12206  0004EE  0100               	movlb	0	; () banked
 12207  0004F0  6F8E               	movwf	printf@f& (0+255),b
 12208  0004F2  0EFC               	movlw	high STR_101
 12209  0004F4  0100               	movlb	0	; () banked
 12210  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 12211  0004F8  ECB8  F008         	call	_printf	;wreg free
 12212                           
 12213                           ;Test.c: 294: updateServoPosition(850, 1);
 12214  0004FC  0E03               	movlw	3
 12215  0004FE  0100               	movlb	0	; () banked
 12216  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12217  000502  0E52               	movlw	82
 12218  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12219  000506  0E00               	movlw	0
 12220  000508  0100               	movlb	0	; () banked
 12221  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12222  00050C  0E01               	movlw	1
 12223  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12224  000510  ECE6  F021         	call	_updateServoPosition	;wreg free
 12225                           
 12226                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12227  000514  0E00               	movlw	0
 12228  000516  0100               	movlb	0	; () banked
 12229  000518  6FB6               	movwf	actuatorTest@i_1671& (0+255),b
 12230  00051A                     l7473:
 12231                           
 12232                           ; BSR set to: 0
 12233  00051A  0E63               	movlw	99
 12234  00051C  0100               	movlb	0	; () banked
 12235  00051E  65B6               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12236  000520  D001               	goto	l7477
 12237  000522  D00C               	goto	l7481
 12238  000524                     l7477:
 12239                           
 12240                           ; BSR set to: 0
 12241  000524  0E68               	movlw	104
 12242  000526  0100               	movlb	0	; () banked
 12243  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12244  00052A  0EE4               	movlw	228
 12245  00052C                     u9047:
 12246  00052C  2EE8               	decfsz	wreg,f,c
 12247  00052E  D7FE               	bra	u9047
 12248  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12249  000532  D7FC               	bra	u9047
 12250  000534  F000               	nop	
 12251  000536  0100               	movlb	0	; () banked
 12252  000538  2BB6               	incf	actuatorTest@i_1671& (0+255),f,b
 12253  00053A  D7EF               	goto	l7473
 12254  00053C                     l7481:
 12255                           
 12256                           ; BSR set to: 0
 12257  00053C  0E00               	movlw	0
 12258  00053E  0100               	movlb	0	; () banked
 12259  000540  6FB7               	movwf	actuatorTest@i_1672& (0+255),b
 12260  000542                     l7483:
 12261                           
 12262                           ; BSR set to: 0
 12263  000542  0E63               	movlw	99
 12264  000544  0100               	movlb	0	; () banked
 12265  000546  65B7               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12266  000548  D001               	goto	l7487
 12267  00054A  D00C               	goto	l7491
 12268  00054C                     l7487:
 12269                           
 12270                           ; BSR set to: 0
 12271  00054C  0E68               	movlw	104
 12272  00054E  0100               	movlb	0	; () banked
 12273  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12274  000552  0EE4               	movlw	228
 12275  000554                     u9057:
 12276  000554  2EE8               	decfsz	wreg,f,c
 12277  000556  D7FE               	bra	u9057
 12278  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12279  00055A  D7FC               	bra	u9057
 12280  00055C  F000               	nop	
 12281  00055E  0100               	movlb	0	; () banked
 12282  000560  2BB7               	incf	actuatorTest@i_1672& (0+255),f,b
 12283  000562  D7EF               	goto	l7483
 12284  000564                     l7491:
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12288  000564  0E80               	movlw	128
 12289  000566  EC8A  F027         	call	_lcdInst
 12290  00056A  0EC0               	movlw	192
 12291  00056C  EC8A  F027         	call	_lcdInst
 12292                           
 12293                           ;Test.c: 298: printf("MID -- 2s       ");
 12294  000570  0EB5               	movlw	low STR_102
 12295  000572  0100               	movlb	0	; () banked
 12296  000574  6F8E               	movwf	printf@f& (0+255),b
 12297  000576  0EFB               	movlw	high STR_102
 12298  000578  0100               	movlb	0	; () banked
 12299  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12300  00057C  ECB8  F008         	call	_printf	;wreg free
 12301                           
 12302                           ;Test.c: 299: updateServoPosition(1200, 1);
 12303  000580  0E04               	movlw	4
 12304  000582  0100               	movlb	0	; () banked
 12305  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12306  000586  0EB0               	movlw	176
 12307  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12308  00058A  0E00               	movlw	0
 12309  00058C  0100               	movlb	0	; () banked
 12310  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12311  000590  0E01               	movlw	1
 12312  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12313  000594  ECE6  F021         	call	_updateServoPosition	;wreg free
 12314                           
 12315                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12316  000598  0E00               	movlw	0
 12317  00059A  0100               	movlb	0	; () banked
 12318  00059C  6FB8               	movwf	actuatorTest@i_1674& (0+255),b
 12319  00059E                     l7499:
 12320                           
 12321                           ; BSR set to: 0
 12322  00059E  0E63               	movlw	99
 12323  0005A0  0100               	movlb	0	; () banked
 12324  0005A2  65B8               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12325  0005A4  D001               	goto	l7503
 12326  0005A6  D00C               	goto	l7507
 12327  0005A8                     l7503:
 12328                           
 12329                           ; BSR set to: 0
 12330  0005A8  0E68               	movlw	104
 12331  0005AA  0100               	movlb	0	; () banked
 12332  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12333  0005AE  0EE4               	movlw	228
 12334  0005B0                     u9067:
 12335  0005B0  2EE8               	decfsz	wreg,f,c
 12336  0005B2  D7FE               	bra	u9067
 12337  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12338  0005B6  D7FC               	bra	u9067
 12339  0005B8  F000               	nop	
 12340  0005BA  0100               	movlb	0	; () banked
 12341  0005BC  2BB8               	incf	actuatorTest@i_1674& (0+255),f,b
 12342  0005BE  D7EF               	goto	l7499
 12343  0005C0                     l7507:
 12344                           
 12345                           ; BSR set to: 0
 12346  0005C0  0E00               	movlw	0
 12347  0005C2  0100               	movlb	0	; () banked
 12348  0005C4  6FB9               	movwf	actuatorTest@i_1675& (0+255),b
 12349  0005C6                     l7509:
 12350                           
 12351                           ; BSR set to: 0
 12352  0005C6  0E63               	movlw	99
 12353  0005C8  0100               	movlb	0	; () banked
 12354  0005CA  65B9               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12355  0005CC  D001               	goto	l7513
 12356  0005CE  D00C               	goto	l1185
 12357  0005D0                     l7513:
 12358                           
 12359                           ; BSR set to: 0
 12360  0005D0  0E68               	movlw	104
 12361  0005D2  0100               	movlb	0	; () banked
 12362  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12363  0005D6  0EE4               	movlw	228
 12364  0005D8                     u9077:
 12365  0005D8  2EE8               	decfsz	wreg,f,c
 12366  0005DA  D7FE               	bra	u9077
 12367  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12368  0005DE  D7FC               	bra	u9077
 12369  0005E0  F000               	nop	
 12370  0005E2  0100               	movlb	0	; () banked
 12371  0005E4  2BB9               	incf	actuatorTest@i_1675& (0+255),f,b
 12372  0005E6  D7EF               	goto	l7509
 12373  0005E8                     l1185:
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;Test.c: 301: TMR1ON = 0;
 12377  0005E8  90CD               	bcf	4045,0,c	;volatile
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;Test.c: 308: printf("TST: TILT SERVO");
 12381  0005EA  0E3A               	movlw	low STR_103
 12382  0005EC  0100               	movlb	0	; () banked
 12383  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12384  0005F0  0EFE               	movlw	high STR_103
 12385  0005F2  0100               	movlb	0	; () banked
 12386  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12387  0005F6  ECB8  F008         	call	_printf	;wreg free
 12388                           
 12389                           ;Test.c: 309: lcdInst(0b11000000);;
 12390  0005FA  0EC0               	movlw	192
 12391  0005FC  EC8A  F027         	call	_lcdInst
 12392                           
 12393                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12394  000600  0EE8               	movlw	low STR_104
 12395  000602  0100               	movlb	0	; () banked
 12396  000604  6F8E               	movwf	printf@f& (0+255),b
 12397  000606  0EFB               	movlw	high STR_104
 12398  000608  0100               	movlb	0	; () banked
 12399  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12400  00060C  ECB8  F008         	call	_printf	;wreg free
 12401                           
 12402                           ;Test.c: 311: updateServoPosition(1050, 3);
 12403  000610  0E04               	movlw	4
 12404  000612  0100               	movlb	0	; () banked
 12405  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12406  000616  0E1A               	movlw	26
 12407  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12408  00061A  0E00               	movlw	0
 12409  00061C  0100               	movlb	0	; () banked
 12410  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12411  000620  0E03               	movlw	3
 12412  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12413  000624  ECE6  F021         	call	_updateServoPosition	;wreg free
 12414                           
 12415                           ;Test.c: 312: TMR3ON = 1;
 12416  000628  80B1               	bsf	4017,0,c	;volatile
 12417                           
 12418                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12419  00062A  0E00               	movlw	0
 12420  00062C  0100               	movlb	0	; () banked
 12421  00062E  6FBA               	movwf	actuatorTest@i_1678& (0+255),b
 12422  000630                     l7527:
 12423                           
 12424                           ; BSR set to: 0
 12425  000630  0E63               	movlw	99
 12426  000632  0100               	movlb	0	; () banked
 12427  000634  65BA               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12428  000636  D001               	goto	l7531
 12429  000638  D00C               	goto	l7535
 12430  00063A                     l7531:
 12431                           
 12432                           ; BSR set to: 0
 12433  00063A  0E68               	movlw	104
 12434  00063C  0100               	movlb	0	; () banked
 12435  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12436  000640  0EE4               	movlw	228
 12437  000642                     u9087:
 12438  000642  2EE8               	decfsz	wreg,f,c
 12439  000644  D7FE               	bra	u9087
 12440  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12441  000648  D7FC               	bra	u9087
 12442  00064A  F000               	nop	
 12443  00064C  0100               	movlb	0	; () banked
 12444  00064E  2BBA               	incf	actuatorTest@i_1678& (0+255),f,b
 12445  000650  D7EF               	goto	l7527
 12446  000652                     l7535:
 12447                           
 12448                           ; BSR set to: 0
 12449  000652  0E00               	movlw	0
 12450  000654  0100               	movlb	0	; () banked
 12451  000656  6FBB               	movwf	actuatorTest@i_1679& (0+255),b
 12452  000658                     l7537:
 12453                           
 12454                           ; BSR set to: 0
 12455  000658  0E63               	movlw	99
 12456  00065A  0100               	movlb	0	; () banked
 12457  00065C  65BB               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12458  00065E  D001               	goto	l7541
 12459  000660  D00C               	goto	l7545
 12460  000662                     l7541:
 12461                           
 12462                           ; BSR set to: 0
 12463  000662  0E68               	movlw	104
 12464  000664  0100               	movlb	0	; () banked
 12465  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12466  000668  0EE4               	movlw	228
 12467  00066A                     u9097:
 12468  00066A  2EE8               	decfsz	wreg,f,c
 12469  00066C  D7FE               	bra	u9097
 12470  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12471  000670  D7FC               	bra	u9097
 12472  000672  F000               	nop	
 12473  000674  0100               	movlb	0	; () banked
 12474  000676  2BBB               	incf	actuatorTest@i_1679& (0+255),f,b
 12475  000678  D7EF               	goto	l7537
 12476  00067A                     l7545:
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12480  00067A  0E80               	movlw	128
 12481  00067C  EC8A  F027         	call	_lcdInst
 12482  000680  0EC0               	movlw	192
 12483  000682  EC8A  F027         	call	_lcdInst
 12484                           
 12485                           ;Test.c: 316: printf("DROP -- 2s      ");
 12486  000686  0EC6               	movlw	low STR_105
 12487  000688  0100               	movlb	0	; () banked
 12488  00068A  6F8E               	movwf	printf@f& (0+255),b
 12489  00068C  0EFB               	movlw	high STR_105
 12490  00068E  0100               	movlb	0	; () banked
 12491  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12492  000692  ECB8  F008         	call	_printf	;wreg free
 12493                           
 12494                           ;Test.c: 317: updateServoPosition(1260, 3);
 12495  000696  0E04               	movlw	4
 12496  000698  0100               	movlb	0	; () banked
 12497  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12498  00069C  0EEC               	movlw	236
 12499  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12500  0006A0  0E00               	movlw	0
 12501  0006A2  0100               	movlb	0	; () banked
 12502  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12503  0006A6  0E03               	movlw	3
 12504  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12505  0006AA  ECE6  F021         	call	_updateServoPosition	;wreg free
 12506                           
 12507                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12508  0006AE  0E00               	movlw	0
 12509  0006B0  0100               	movlb	0	; () banked
 12510  0006B2  6FBC               	movwf	actuatorTest@i_1681& (0+255),b
 12511  0006B4                     l7553:
 12512                           
 12513                           ; BSR set to: 0
 12514  0006B4  0E63               	movlw	99
 12515  0006B6  0100               	movlb	0	; () banked
 12516  0006B8  65BC               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12517  0006BA  D001               	goto	l7557
 12518  0006BC  D00C               	goto	l7561
 12519  0006BE                     l7557:
 12520                           
 12521                           ; BSR set to: 0
 12522  0006BE  0E68               	movlw	104
 12523  0006C0  0100               	movlb	0	; () banked
 12524  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12525  0006C4  0EE4               	movlw	228
 12526  0006C6                     u9107:
 12527  0006C6  2EE8               	decfsz	wreg,f,c
 12528  0006C8  D7FE               	bra	u9107
 12529  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12530  0006CC  D7FC               	bra	u9107
 12531  0006CE  F000               	nop	
 12532  0006D0  0100               	movlb	0	; () banked
 12533  0006D2  2BBC               	incf	actuatorTest@i_1681& (0+255),f,b
 12534  0006D4  D7EF               	goto	l7553
 12535  0006D6                     l7561:
 12536                           
 12537                           ; BSR set to: 0
 12538  0006D6  0E00               	movlw	0
 12539  0006D8  0100               	movlb	0	; () banked
 12540  0006DA  6FBD               	movwf	actuatorTest@i_1682& (0+255),b
 12541  0006DC                     l7563:
 12542                           
 12543                           ; BSR set to: 0
 12544  0006DC  0E63               	movlw	99
 12545  0006DE  0100               	movlb	0	; () banked
 12546  0006E0  65BD               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12547  0006E2  D001               	goto	l7567
 12548  0006E4  D00C               	goto	l7571
 12549  0006E6                     l7567:
 12550                           
 12551                           ; BSR set to: 0
 12552  0006E6  0E68               	movlw	104
 12553  0006E8  0100               	movlb	0	; () banked
 12554  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12555  0006EC  0EE4               	movlw	228
 12556  0006EE                     u9117:
 12557  0006EE  2EE8               	decfsz	wreg,f,c
 12558  0006F0  D7FE               	bra	u9117
 12559  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12560  0006F4  D7FC               	bra	u9117
 12561  0006F6  F000               	nop	
 12562  0006F8  0100               	movlb	0	; () banked
 12563  0006FA  2BBD               	incf	actuatorTest@i_1682& (0+255),f,b
 12564  0006FC  D7EF               	goto	l7563
 12565  0006FE                     l7571:
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12569  0006FE  0E80               	movlw	128
 12570  000700  EC8A  F027         	call	_lcdInst
 12571  000704  0EC0               	movlw	192
 12572  000706  EC8A  F027         	call	_lcdInst
 12573                           
 12574                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12575  00070A  0EE8               	movlw	low STR_104
 12576  00070C  0100               	movlb	0	; () banked
 12577  00070E  6F8E               	movwf	printf@f& (0+255),b
 12578  000710  0EFB               	movlw	high STR_104
 12579  000712  0100               	movlb	0	; () banked
 12580  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12581  000716  ECB8  F008         	call	_printf	;wreg free
 12582                           
 12583                           ;Test.c: 322: updateServoPosition(1050, 3);
 12584  00071A  0E04               	movlw	4
 12585  00071C  0100               	movlb	0	; () banked
 12586  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12587  000720  0E1A               	movlw	26
 12588  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12589  000724  0E00               	movlw	0
 12590  000726  0100               	movlb	0	; () banked
 12591  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12592  00072A  0E03               	movlw	3
 12593  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12594  00072E  ECE6  F021         	call	_updateServoPosition	;wreg free
 12595                           
 12596                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12597  000732  0E00               	movlw	0
 12598  000734  0100               	movlb	0	; () banked
 12599  000736  6FBE               	movwf	actuatorTest@i_1684& (0+255),b
 12600  000738                     l7579:
 12601                           
 12602                           ; BSR set to: 0
 12603  000738  0E63               	movlw	99
 12604  00073A  0100               	movlb	0	; () banked
 12605  00073C  65BE               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12606  00073E  D001               	goto	l7583
 12607  000740  D00C               	goto	l7587
 12608  000742                     l7583:
 12609                           
 12610                           ; BSR set to: 0
 12611  000742  0E68               	movlw	104
 12612  000744  0100               	movlb	0	; () banked
 12613  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12614  000748  0EE4               	movlw	228
 12615  00074A                     u9127:
 12616  00074A  2EE8               	decfsz	wreg,f,c
 12617  00074C  D7FE               	bra	u9127
 12618  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12619  000750  D7FC               	bra	u9127
 12620  000752  F000               	nop	
 12621  000754  0100               	movlb	0	; () banked
 12622  000756  2BBE               	incf	actuatorTest@i_1684& (0+255),f,b
 12623  000758  D7EF               	goto	l7579
 12624  00075A                     l7587:
 12625                           
 12626                           ; BSR set to: 0
 12627  00075A  0E00               	movlw	0
 12628  00075C  0100               	movlb	0	; () banked
 12629  00075E  6FBF               	movwf	actuatorTest@i_1685& (0+255),b
 12630  000760                     l7589:
 12631                           
 12632                           ; BSR set to: 0
 12633  000760  0E63               	movlw	99
 12634  000762  0100               	movlb	0	; () banked
 12635  000764  65BF               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12636  000766  D001               	goto	l7593
 12637  000768  D00C               	goto	l1197
 12638  00076A                     l7593:
 12639                           
 12640                           ; BSR set to: 0
 12641  00076A  0E68               	movlw	104
 12642  00076C  0100               	movlb	0	; () banked
 12643  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12644  000770  0EE4               	movlw	228
 12645  000772                     u9137:
 12646  000772  2EE8               	decfsz	wreg,f,c
 12647  000774  D7FE               	bra	u9137
 12648  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12649  000778  D7FC               	bra	u9137
 12650  00077A  F000               	nop	
 12651  00077C  0100               	movlb	0	; () banked
 12652  00077E  2BBF               	incf	actuatorTest@i_1685& (0+255),f,b
 12653  000780  D7EF               	goto	l7589
 12654  000782                     l1197:
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;Test.c: 324: TMR3ON = 0;
 12658  000782  90B1               	bcf	4017,0,c	;volatile
 12659                           
 12660                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12661  000784  9EF2               	bcf	intcon,7,c	;volatile
 12662                           
 12663                           ; BSR set to: 0
 12664                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12665  000786  0E01               	movlw	1
 12666  000788  EC8A  F027         	call	_lcdInst
 12667  00078C  0E68               	movlw	104
 12668  00078E  0100               	movlb	0	; () banked
 12669  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12670  000792  0EE4               	movlw	228
 12671  000794                     u9147:
 12672  000794  2EE8               	decfsz	wreg,f,c
 12673  000796  D7FE               	bra	u9147
 12674  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12675  00079A  D7FC               	bra	u9147
 12676  00079C  F000               	nop	
 12677  00079E  0E80               	movlw	128
 12678  0007A0  EC8A  F027         	call	_lcdInst
 12679                           
 12680                           ;Test.c: 331: printf("TST: CAM SERVO");
 12681  0007A4  0E96               	movlw	low STR_107
 12682  0007A6  0100               	movlb	0	; () banked
 12683  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12684  0007AA  0EFE               	movlw	high STR_107
 12685  0007AC  0100               	movlb	0	; () banked
 12686  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12687  0007B0  ECB8  F008         	call	_printf	;wreg free
 12688                           
 12689                           ;Test.c: 332: lcdInst(0b11000000);;
 12690  0007B4  0EC0               	movlw	192
 12691  0007B6  EC8A  F027         	call	_lcdInst
 12692                           
 12693                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12694  0007BA  0E78               	movlw	low STR_108
 12695  0007BC  0100               	movlb	0	; () banked
 12696  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12697  0007C0  0EFE               	movlw	high STR_108
 12698  0007C2  0100               	movlb	0	; () banked
 12699  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12700  0007C6  ECB8  F008         	call	_printf	;wreg free
 12701                           
 12702                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12703  0007CA  808B               	bsf	3979,0,c	;volatile
 12704                           
 12705                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12706  0007CC  0E00               	movlw	0
 12707  0007CE  0100               	movlb	0	; () banked
 12708  0007D0  6FC0               	movwf	actuatorTest@i_1688& (0+255),b
 12709  0007D2                     l7613:
 12710                           
 12711                           ; BSR set to: 0
 12712  0007D2  0E63               	movlw	99
 12713  0007D4  0100               	movlb	0	; () banked
 12714  0007D6  65C0               	cpfsgt	actuatorTest@i_1688& (0+255),b
 12715  0007D8  D001               	goto	l7617
 12716  0007DA  D00C               	goto	l7621
 12717  0007DC                     l7617:
 12718                           
 12719                           ; BSR set to: 0
 12720  0007DC  0E68               	movlw	104
 12721  0007DE  0100               	movlb	0	; () banked
 12722  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12723  0007E2  0EE4               	movlw	228
 12724  0007E4                     u9157:
 12725  0007E4  2EE8               	decfsz	wreg,f,c
 12726  0007E6  D7FE               	bra	u9157
 12727  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12728  0007EA  D7FC               	bra	u9157
 12729  0007EC  F000               	nop	
 12730  0007EE  0100               	movlb	0	; () banked
 12731  0007F0  2BC0               	incf	actuatorTest@i_1688& (0+255),f,b
 12732  0007F2  D7EF               	goto	l7613
 12733  0007F4                     l7621:
 12734                           
 12735                           ; BSR set to: 0
 12736  0007F4  0E00               	movlw	0
 12737  0007F6  0100               	movlb	0	; () banked
 12738  0007F8  6FC1               	movwf	actuatorTest@i_1689& (0+255),b
 12739  0007FA                     l7623:
 12740                           
 12741                           ; BSR set to: 0
 12742  0007FA  0E63               	movlw	99
 12743  0007FC  0100               	movlb	0	; () banked
 12744  0007FE  65C1               	cpfsgt	actuatorTest@i_1689& (0+255),b
 12745  000800  D001               	goto	l7627
 12746  000802  D00C               	goto	l7631
 12747  000804                     l7627:
 12748                           
 12749                           ; BSR set to: 0
 12750  000804  0E68               	movlw	104
 12751  000806  0100               	movlb	0	; () banked
 12752  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12753  00080A  0EE4               	movlw	228
 12754  00080C                     u9167:
 12755  00080C  2EE8               	decfsz	wreg,f,c
 12756  00080E  D7FE               	bra	u9167
 12757  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12758  000812  D7FC               	bra	u9167
 12759  000814  F000               	nop	
 12760  000816  0100               	movlb	0	; () banked
 12761  000818  2BC1               	incf	actuatorTest@i_1689& (0+255),f,b
 12762  00081A  D7EF               	goto	l7623
 12763  00081C                     l7631:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12767  00081C  0E80               	movlw	128
 12768  00081E  EC8A  F027         	call	_lcdInst
 12769  000822  0EC0               	movlw	192
 12770  000824  EC8A  F027         	call	_lcdInst
 12771                           
 12772                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12773  000828  0E69               	movlw	low STR_109
 12774  00082A  0100               	movlb	0	; () banked
 12775  00082C  6F8E               	movwf	printf@f& (0+255),b
 12776  00082E  0EFE               	movlw	high STR_109
 12777  000830  0100               	movlb	0	; () banked
 12778  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12779  000834  ECB8  F008         	call	_printf	;wreg free
 12780                           
 12781                           ;Test.c: 340: for(i=0;i<10000;i++)
 12782  000838  0E00               	movlw	0
 12783  00083A  0100               	movlb	0	; () banked
 12784  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12785  00083E  0E00               	movlw	0
 12786  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12787  000842                     l7637:
 12788                           
 12789                           ; BSR set to: 0
 12790  000842  0100               	movlb	0	; () banked
 12791  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12792  000846  D008               	goto	l1202
 12793  000848  0E10               	movlw	16
 12794  00084A  0100               	movlb	0	; () banked
 12795  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12796  00084E  0E27               	movlw	39
 12797  000850  0100               	movlb	0	; () banked
 12798  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12799  000854  B0D8               	btfsc	status,0,c
 12800  000856  D00D               	goto	l7647
 12801  000858                     l1202:
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;Test.c: 341: {
 12805                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12806  000858  808B               	bsf	3979,0,c	;volatile
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12810  00085A  0E1A               	movlw	26
 12811  00085C                     u9177:
 12812  00085C  2EE8               	decfsz	wreg,f,c
 12813  00085E  D7FE               	bra	u9177
 12814  000860  D000               	nop2	
 12815                           
 12816                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12817  000862  908B               	bcf	3979,0,c	;volatile
 12818                           
 12819                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12820  000864  0EF0               	movlw	240
 12821  000866                     u9187:
 12822  000866  2EE8               	decfsz	wreg,f,c
 12823  000868  D7FE               	bra	u9187
 12824  00086A  0100               	movlb	0	; () banked
 12825  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12826  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12827  000870  D7E8               	goto	l7637
 12828  000872                     l7647:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;Test.c: 346: }
 12832                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12833  000872  0E00               	movlw	0
 12834  000874  0100               	movlb	0	; () banked
 12835  000876  6FC2               	movwf	actuatorTest@i_1691& (0+255),b
 12836  000878                     l7649:
 12837                           
 12838                           ; BSR set to: 0
 12839  000878  0E63               	movlw	99
 12840  00087A  0100               	movlb	0	; () banked
 12841  00087C  65C2               	cpfsgt	actuatorTest@i_1691& (0+255),b
 12842  00087E  D001               	goto	l7653
 12843  000880  D00C               	goto	l7657
 12844  000882                     l7653:
 12845                           
 12846                           ; BSR set to: 0
 12847  000882  0E68               	movlw	104
 12848  000884  0100               	movlb	0	; () banked
 12849  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12850  000888  0EE4               	movlw	228
 12851  00088A                     u9197:
 12852  00088A  2EE8               	decfsz	wreg,f,c
 12853  00088C  D7FE               	bra	u9197
 12854  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12855  000890  D7FC               	bra	u9197
 12856  000892  F000               	nop	
 12857  000894  0100               	movlb	0	; () banked
 12858  000896  2BC2               	incf	actuatorTest@i_1691& (0+255),f,b
 12859  000898  D7EF               	goto	l7649
 12860  00089A                     l7657:
 12861                           
 12862                           ; BSR set to: 0
 12863  00089A  0E00               	movlw	0
 12864  00089C  0100               	movlb	0	; () banked
 12865  00089E  6FC3               	movwf	actuatorTest@i_1692& (0+255),b
 12866  0008A0                     l7659:
 12867                           
 12868                           ; BSR set to: 0
 12869  0008A0  0E63               	movlw	99
 12870  0008A2  0100               	movlb	0	; () banked
 12871  0008A4  65C3               	cpfsgt	actuatorTest@i_1692& (0+255),b
 12872  0008A6  D001               	goto	l7663
 12873  0008A8  D00C               	goto	l7667
 12874  0008AA                     l7663:
 12875                           
 12876                           ; BSR set to: 0
 12877  0008AA  0E68               	movlw	104
 12878  0008AC  0100               	movlb	0	; () banked
 12879  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12880  0008B0  0EE4               	movlw	228
 12881  0008B2                     u9207:
 12882  0008B2  2EE8               	decfsz	wreg,f,c
 12883  0008B4  D7FE               	bra	u9207
 12884  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12885  0008B8  D7FC               	bra	u9207
 12886  0008BA  F000               	nop	
 12887  0008BC  0100               	movlb	0	; () banked
 12888  0008BE  2BC3               	incf	actuatorTest@i_1692& (0+255),f,b
 12889  0008C0  D7EF               	goto	l7659
 12890  0008C2                     l7667:
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;Test.c: 349: machine_state = Testing_state;
 12894  0008C2  0E03               	movlw	3
 12895  0008C4  0100               	movlb	0	; () banked
 12896  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12897                           
 12898                           ; BSR set to: 0
 12899  0008C8  0012               	return		;funcret
 12900  0008CA                     __end_of_actuatorTest:
 12901                           	opt stack 0
 12902                           tblptru	equ	0xFF8
 12903                           tblptrh	equ	0xFF7
 12904                           tblptrl	equ	0xFF6
 12905                           tablat	equ	0xFF5
 12906                           prodh	equ	0xFF4
 12907                           prodl	equ	0xFF3
 12908                           intcon	equ	0xFF2
 12909                           intcon2	equ	0xFF1
 12910                           intcon3	equ	0xFF0
 12911                           postinc0	equ	0xFEE
 12912                           wreg	equ	0xFE8
 12913                           postdec1	equ	0xFE5
 12914                           fsr1l	equ	0xFE1
 12915                           indf2	equ	0xFDF
 12916                           postinc2	equ	0xFDE
 12917                           postdec2	equ	0xFDD
 12918                           fsr2h	equ	0xFDA
 12919                           fsr2l	equ	0xFD9
 12920                           status	equ	0xFD8
 12921                           
 12922 ;; *************** function _SpeedTest *****************
 12923 ;; Defined at:
 12924 ;;		line 549 in file "Test.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;		None
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;		None
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  1    wreg      void 
 12931 ;; Registers used:
 12932 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12942 ;;Total ram usage:        1 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:   10
 12945 ;; This function calls:
 12946 ;;		_lcdInst
 12947 ;;		_printf
 12948 ;; This function is called by:
 12949 ;;		_Test
 12950 ;; This function uses a non-reentrant model
 12951 ;;
 12952                           
 12953                           	psect	text41
 12954  0041CC                     __ptext41:
 12955                           	opt stack 0
 12956  0041CC                     _SpeedTest:
 12957                           	opt stack 19
 12958                           
 12959                           ;Test.c: 551: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;incstack = 0
 12963  0041CC  0E01               	movlw	1
 12964  0041CE  EC8A  F027         	call	_lcdInst
 12965  0041D2  0E68               	movlw	104
 12966  0041D4  0100               	movlb	0	; () banked
 12967  0041D6  6FAB               	movwf	??_SpeedTest& (0+255),b
 12968  0041D8  0EE4               	movlw	228
 12969  0041DA                     u9217:
 12970  0041DA  2EE8               	decfsz	wreg,f,c
 12971  0041DC  D7FE               	bra	u9217
 12972  0041DE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12973  0041E0  D7FC               	bra	u9217
 12974  0041E2  F000               	nop	
 12975  0041E4  0E80               	movlw	128
 12976  0041E6  EC8A  F027         	call	_lcdInst
 12977                           
 12978                           ;Test.c: 552: printf("S: D WILL RETURN ");
 12979  0041EA  0E5B               	movlw	low STR_120
 12980  0041EC  0100               	movlb	0	; () banked
 12981  0041EE  6F8E               	movwf	printf@f& (0+255),b
 12982  0041F0  0EFB               	movlw	high STR_120
 12983  0041F2  0100               	movlb	0	; () banked
 12984  0041F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12985  0041F6  ECB8  F008         	call	_printf	;wreg free
 12986                           
 12987                           ;Test.c: 553: lcdInst(0b11000000);;
 12988  0041FA  0EC0               	movlw	192
 12989  0041FC  EC8A  F027         	call	_lcdInst
 12990                           
 12991                           ;Test.c: 554: printf("OTHER SETS RA5   ");
 12992  004200  0E49               	movlw	low STR_112
 12993  004202  0100               	movlb	0	; () banked
 12994  004204  6F8E               	movwf	printf@f& (0+255),b
 12995  004206  0EFB               	movlw	high STR_112
 12996  004208  0100               	movlb	0	; () banked
 12997  00420A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12998  00420C  ECB8  F008         	call	_printf	;wreg free
 12999  004210                     l1288:
 13000  004210  A281               	btfss	3969,1,c	;volatile
 13001  004212  D7FE               	goto	l1288
 13002                           
 13003                           ;Test.c: 559: }
 13004                           ;Test.c: 560: if(PORTB >> 4 == 0b1111){
 13005  004214  3881               	swapf	3969,w,c	;volatile
 13006  004216  0B0F               	andlw	15
 13007  004218  0A0F               	xorlw	15
 13008  00421A  B4D8               	btfsc	status,2,c
 13009  00421C  0012               	return	
 13010  00421E  D014               	goto	l7709
 13011  004220                     l1295:
 13012                           
 13013                           ;Test.c: 565: LATAbits.LATA5 = 1;
 13014  004220  8A89               	bsf	3977,5,c	;volatile
 13015                           
 13016                           ;Test.c: 566: _delay((unsigned long)((5)*(32000000/4000.0)));
 13017  004222  0E34               	movlw	52
 13018  004224  0100               	movlb	0	; () banked
 13019  004226  6FAB               	movwf	??_SpeedTest& (0+255),b
 13020  004228  0EF1               	movlw	241
 13021  00422A                     u9227:
 13022  00422A  2EE8               	decfsz	wreg,f,c
 13023  00422C  D7FE               	bra	u9227
 13024  00422E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13025  004230  D7FC               	bra	u9227
 13026  004232  D000               	nop2	
 13027                           
 13028                           ;Test.c: 567: LATAbits.LATA5 = 0;
 13029  004234  9A89               	bcf	3977,5,c	;volatile
 13030                           
 13031                           ;Test.c: 568: _delay((unsigned long)((5)*(32000000/4000.0)));
 13032  004236  0E34               	movlw	52
 13033  004238  0100               	movlb	0	; () banked
 13034  00423A  6FAB               	movwf	??_SpeedTest& (0+255),b
 13035  00423C  0EF1               	movlw	241
 13036  00423E                     u9237:
 13037  00423E  2EE8               	decfsz	wreg,f,c
 13038  004240  D7FE               	bra	u9237
 13039  004242  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 13040  004244  D7FC               	bra	u9237
 13041  004246  D000               	nop2	
 13042  004248                     l7709:
 13043  004248  B281               	btfsc	3969,1,c	;volatile
 13044  00424A  D7EA               	goto	l1295
 13045                           
 13046                           ;Test.c: 571: }
 13047                           ;Test.c: 572: LATAbits.LATA5 = 0;
 13048  00424C  9A89               	bcf	3977,5,c	;volatile
 13049  00424E  D7E0               	goto	l1288
 13050  004250                     __end_of_SpeedTest:
 13051                           	opt stack 0
 13052                           tblptru	equ	0xFF8
 13053                           tblptrh	equ	0xFF7
 13054                           tblptrl	equ	0xFF6
 13055                           tablat	equ	0xFF5
 13056                           prodh	equ	0xFF4
 13057                           prodl	equ	0xFF3
 13058                           intcon	equ	0xFF2
 13059                           intcon2	equ	0xFF1
 13060                           intcon3	equ	0xFF0
 13061                           postinc0	equ	0xFEE
 13062                           wreg	equ	0xFE8
 13063                           postdec1	equ	0xFE5
 13064                           fsr1l	equ	0xFE1
 13065                           indf2	equ	0xFDF
 13066                           postinc2	equ	0xFDE
 13067                           postdec2	equ	0xFDD
 13068                           fsr2h	equ	0xFDA
 13069                           fsr2l	equ	0xFD9
 13070                           status	equ	0xFD8
 13071                           
 13072 ;; *************** function _PusherTest *****************
 13073 ;; Defined at:
 13074 ;;		line 467 in file "Test.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;		None
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  i               2   51[BANK0 ] int 
 13079 ;;  i               2   49[BANK0 ] int 
 13080 ;;  res             2   47[BANK0 ] int 
 13081 ;;  res             2   45[BANK0 ] int 
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      void 
 13084 ;; Registers used:
 13085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : 0/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13092 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13094 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13095 ;;Total ram usage:       10 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:   10
 13098 ;; This function calls:
 13099 ;;		_lcdInst
 13100 ;;		_printf
 13101 ;;		_readADC
 13102 ;; This function is called by:
 13103 ;;		_Test
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           	psect	text42
 13108  0028A6                     __ptext42:
 13109                           	opt stack 0
 13110  0028A6                     _PusherTest:
 13111                           	opt stack 19
 13112                           
 13113                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13114                           
 13115                           ;incstack = 0
 13116  0028A6  0E01               	movlw	1
 13117  0028A8  EC8A  F027         	call	_lcdInst
 13118  0028AC  0E68               	movlw	104
 13119  0028AE  0100               	movlb	0	; () banked
 13120  0028B0  6FAB               	movwf	??_PusherTest& (0+255),b
 13121  0028B2  0EE4               	movlw	228
 13122  0028B4                     u9247:
 13123  0028B4  2EE8               	decfsz	wreg,f,c
 13124  0028B6  D7FE               	bra	u9247
 13125  0028B8  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13126  0028BA  D7FC               	bra	u9247
 13127  0028BC  F000               	nop	
 13128  0028BE  0E80               	movlw	128
 13129  0028C0  EC8A  F027         	call	_lcdInst
 13130                           
 13131                           ;Test.c: 469: printf("PUSHER TST");
 13132  0028C4  0E71               	movlw	low STR_113
 13133  0028C6  0100               	movlb	0	; () banked
 13134  0028C8  6F8E               	movwf	printf@f& (0+255),b
 13135  0028CA  0EFF               	movlw	high STR_113
 13136  0028CC  0100               	movlb	0	; () banked
 13137  0028CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13138  0028D0  ECB8  F008         	call	_printf	;wreg free
 13139                           
 13140                           ;Test.c: 470: LATCbits.LATC5 = 1;
 13141  0028D4  8A8B               	bsf	3979,5,c	;volatile
 13142                           
 13143                           ;Test.c: 472: while(PORTBbits.RB1 == 0){
 13144  0028D6  D05C               	goto	l7739
 13145  0028D8                     l7721:
 13146                           
 13147                           ;Test.c: 473: readADC(0);
 13148  0028D8  0E00               	movlw	0
 13149  0028DA  EC8F  F026         	call	_readADC
 13150                           
 13151                           ;Test.c: 474: int res = ADRESH<<8 | ADRESL;
 13152  0028DE  50C3               	movf	4035,w,c	;volatile
 13153  0028E0  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13154  0028E4  0100               	movlb	0	; () banked
 13155  0028E6  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13156  0028E8  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13157  0028EC  0100               	movlb	0	; () banked
 13158  0028EE  6BAB               	clrf	??_PusherTest& (0+255),b
 13159  0028F0  0100               	movlb	0	; () banked
 13160  0028F2  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13161  0028F4  0100               	movlb	0	; () banked
 13162  0028F6  6FAD               	movwf	PusherTest@res& (0+255),b
 13163  0028F8  0100               	movlb	0	; () banked
 13164  0028FA  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13165  0028FC  0100               	movlb	0	; () banked
 13166  0028FE  6FAE               	movwf	(PusherTest@res+1)& (0+255),b
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;Test.c: 475: IR_signal = (res > 800) ? 1 : 0;
 13170  002900  0100               	movlb	0	; () banked
 13171  002902  BFAE               	btfsc	(PusherTest@res+1)& (0+255),7,b
 13172  002904  D00A               	goto	u6570
 13173  002906  0E21               	movlw	33
 13174  002908  0100               	movlb	0	; () banked
 13175  00290A  5DAD               	subwf	PusherTest@res& (0+255),w,b
 13176  00290C  0E03               	movlw	3
 13177  00290E  0100               	movlb	0	; () banked
 13178  002910  59AE               	subwfb	(PusherTest@res+1)& (0+255),w,b
 13179  002912  A0D8               	btfss	status,0,c
 13180  002914  D002               	goto	u6570
 13181  002916  0E01               	movlw	1
 13182  002918  D001               	goto	u6580
 13183  00291A                     u6570:
 13184  00291A  0E00               	movlw	0
 13185  00291C                     u6580:
 13186  00291C  0100               	movlb	0	; () banked
 13187  00291E  6FDE               	movwf	_IR_signal& (0+255),b
 13188  002920  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13189                           
 13190                           ;Test.c: 477: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13191  002922  0E01               	movlw	1
 13192  002924  EC8A  F027         	call	_lcdInst
 13193  002928  0E68               	movlw	104
 13194  00292A  0100               	movlb	0	; () banked
 13195  00292C  6FAB               	movwf	??_PusherTest& (0+255),b
 13196  00292E  0EE4               	movlw	228
 13197  002930                     u9257:
 13198  002930  2EE8               	decfsz	wreg,f,c
 13199  002932  D7FE               	bra	u9257
 13200  002934  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13201  002936  D7FC               	bra	u9257
 13202  002938  F000               	nop	
 13203  00293A  0E80               	movlw	128
 13204  00293C  EC8A  F027         	call	_lcdInst
 13205                           
 13206                           ;Test.c: 478: printf("IR_signal: %d ", IR_signal);
 13207  002940  0E5A               	movlw	low STR_80
 13208  002942  0100               	movlb	0	; () banked
 13209  002944  6F8E               	movwf	printf@f& (0+255),b
 13210  002946  0EFE               	movlw	high STR_80
 13211  002948  0100               	movlb	0	; () banked
 13212  00294A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13213  00294C  C0DE  F090         	movff	_IR_signal,?_printf+2
 13214  002950  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13215  002954  ECB8  F008         	call	_printf	;wreg free
 13216                           
 13217                           ;Test.c: 479: lcdInst(0b11000000);;
 13218  002958  0EC0               	movlw	192
 13219  00295A  EC8A  F027         	call	_lcdInst
 13220                           
 13221                           ;Test.c: 480: printf("%d", res);
 13222  00295E  0E16               	movlw	low (STR_27+14)
 13223  002960  0100               	movlb	0	; () banked
 13224  002962  6F8E               	movwf	printf@f& (0+255),b
 13225  002964  0EFE               	movlw	high (STR_27+14)
 13226  002966  0100               	movlb	0	; () banked
 13227  002968  6F8F               	movwf	(printf@f+1)& (0+255),b
 13228  00296A  C0AD  F090         	movff	PusherTest@res,?_printf+2
 13229  00296E  C0AE  F091         	movff	PusherTest@res+1,?_printf+3
 13230  002972  ECB8  F008         	call	_printf	;wreg free
 13231                           
 13232                           ;Test.c: 481: _delay((unsigned long)((100)*(32000000/4000.0)));
 13233  002976  0E05               	movlw	5
 13234  002978  0100               	movlb	0	; () banked
 13235  00297A  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13236  00297C  0E0F               	movlw	15
 13237  00297E  0100               	movlb	0	; () banked
 13238  002980  6FAB               	movwf	??_PusherTest& (0+255),b
 13239  002982  0EF1               	movlw	241
 13240  002984                     u9267:
 13241  002984  2EE8               	decfsz	wreg,f,c
 13242  002986  D7FE               	bra	u9267
 13243  002988  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13244  00298A  D7FC               	bra	u9267
 13245  00298C  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13246  00298E  D7FA               	bra	u9267
 13247  002990                     l7739:
 13248  002990  B281               	btfsc	3969,1,c	;volatile
 13249  002992  D05D               	goto	l7759
 13250  002994  D7A1               	goto	l7721
 13251  002996                     l7741:
 13252                           
 13253                           ;Test.c: 487: readADC(0);
 13254  002996  0E00               	movlw	0
 13255  002998  EC8F  F026         	call	_readADC
 13256                           
 13257                           ;Test.c: 488: int res = ADRESH<<8 | ADRESL;
 13258  00299C  50C3               	movf	4035,w,c	;volatile
 13259  00299E  CFC4 F0AB          	movff	4036,??_PusherTest	;volatile
 13260  0029A2  0100               	movlb	0	; () banked
 13261  0029A4  6BAC               	clrf	(??_PusherTest+1)& (0+255),b
 13262  0029A6  C0AB  F0AC         	movff	??_PusherTest,??_PusherTest+1
 13263  0029AA  0100               	movlb	0	; () banked
 13264  0029AC  6BAB               	clrf	??_PusherTest& (0+255),b
 13265  0029AE  0100               	movlb	0	; () banked
 13266  0029B0  11AB               	iorwf	??_PusherTest& (0+255),w,b
 13267  0029B2  0100               	movlb	0	; () banked
 13268  0029B4  6FAF               	movwf	PusherTest@res_1707& (0+255),b
 13269  0029B6  0100               	movlb	0	; () banked
 13270  0029B8  51AC               	movf	(??_PusherTest+1)& (0+255),w,b
 13271  0029BA  0100               	movlb	0	; () banked
 13272  0029BC  6FB0               	movwf	(PusherTest@res_1707+1)& (0+255),b
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;Test.c: 489: IR_signal = (res > 800) ? 1 : 0;
 13276  0029BE  0100               	movlb	0	; () banked
 13277  0029C0  BFB0               	btfsc	(PusherTest@res_1707+1)& (0+255),7,b
 13278  0029C2  D00A               	goto	u6600
 13279  0029C4  0E21               	movlw	33
 13280  0029C6  0100               	movlb	0	; () banked
 13281  0029C8  5DAF               	subwf	PusherTest@res_1707& (0+255),w,b
 13282  0029CA  0E03               	movlw	3
 13283  0029CC  0100               	movlb	0	; () banked
 13284  0029CE  59B0               	subwfb	(PusherTest@res_1707+1)& (0+255),w,b
 13285  0029D0  A0D8               	btfss	status,0,c
 13286  0029D2  D002               	goto	u6600
 13287  0029D4  0E01               	movlw	1
 13288  0029D6  D001               	goto	u6610
 13289  0029D8                     u6600:
 13290  0029D8  0E00               	movlw	0
 13291  0029DA                     u6610:
 13292  0029DA  0100               	movlb	0	; () banked
 13293  0029DC  6FDE               	movwf	_IR_signal& (0+255),b
 13294  0029DE  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 13295                           
 13296                           ;Test.c: 490: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13297  0029E0  0E01               	movlw	1
 13298  0029E2  EC8A  F027         	call	_lcdInst
 13299  0029E6  0E68               	movlw	104
 13300  0029E8  0100               	movlb	0	; () banked
 13301  0029EA  6FAB               	movwf	??_PusherTest& (0+255),b
 13302  0029EC  0EE4               	movlw	228
 13303  0029EE                     u9277:
 13304  0029EE  2EE8               	decfsz	wreg,f,c
 13305  0029F0  D7FE               	bra	u9277
 13306  0029F2  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13307  0029F4  D7FC               	bra	u9277
 13308  0029F6  F000               	nop	
 13309  0029F8  0E80               	movlw	128
 13310  0029FA  EC8A  F027         	call	_lcdInst
 13311                           
 13312                           ;Test.c: 491: printf("IR_signal: %d ", IR_signal);
 13313  0029FE  0E5A               	movlw	low STR_80
 13314  002A00  0100               	movlb	0	; () banked
 13315  002A02  6F8E               	movwf	printf@f& (0+255),b
 13316  002A04  0EFE               	movlw	high STR_80
 13317  002A06  0100               	movlb	0	; () banked
 13318  002A08  6F8F               	movwf	(printf@f+1)& (0+255),b
 13319  002A0A  C0DE  F090         	movff	_IR_signal,?_printf+2
 13320  002A0E  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 13321  002A12  ECB8  F008         	call	_printf	;wreg free
 13322                           
 13323                           ;Test.c: 492: lcdInst(0b11000000);;
 13324  002A16  0EC0               	movlw	192
 13325  002A18  EC8A  F027         	call	_lcdInst
 13326                           
 13327                           ;Test.c: 493: printf("%d", res);
 13328  002A1C  0E16               	movlw	low (STR_27+14)
 13329  002A1E  0100               	movlb	0	; () banked
 13330  002A20  6F8E               	movwf	printf@f& (0+255),b
 13331  002A22  0EFE               	movlw	high (STR_27+14)
 13332  002A24  0100               	movlb	0	; () banked
 13333  002A26  6F8F               	movwf	(printf@f+1)& (0+255),b
 13334  002A28  C0AF  F090         	movff	PusherTest@res_1707,?_printf+2
 13335  002A2C  C0B0  F091         	movff	PusherTest@res_1707+1,?_printf+3
 13336  002A30  ECB8  F008         	call	_printf	;wreg free
 13337                           
 13338                           ;Test.c: 494: _delay((unsigned long)((100)*(32000000/4000.0)));
 13339  002A34  0E05               	movlw	5
 13340  002A36  0100               	movlb	0	; () banked
 13341  002A38  6FAC               	movwf	(??_PusherTest+1)& (0+255),b
 13342  002A3A  0E0F               	movlw	15
 13343  002A3C  0100               	movlb	0	; () banked
 13344  002A3E  6FAB               	movwf	??_PusherTest& (0+255),b
 13345  002A40  0EF1               	movlw	241
 13346  002A42                     u9287:
 13347  002A42  2EE8               	decfsz	wreg,f,c
 13348  002A44  D7FE               	bra	u9287
 13349  002A46  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 13350  002A48  D7FC               	bra	u9287
 13351  002A4A  2FAC               	decfsz	(??_PusherTest+1)& (0+255),f,b
 13352  002A4C  D7FA               	bra	u9287
 13353  002A4E                     l7759:
 13354  002A4E  A281               	btfss	3969,1,c	;volatile
 13355  002A50  D7A2               	goto	l7741
 13356                           
 13357                           ;Test.c: 495: }
 13358                           ;Test.c: 496: if(PORTB >> 4 == 0b1111){
 13359  002A52  3881               	swapf	3969,w,c	;volatile
 13360  002A54  0B0F               	andlw	15
 13361  002A56  0A0F               	xorlw	15
 13362  002A58  B4D8               	btfsc	status,2,c
 13363  002A5A  D047               	goto	l1257
 13364                           
 13365                           ;Test.c: 501: else if(PORTB >> 4 == 0b0101){
 13366                           
 13367                           ;Test.c: 498: }
 13368                           
 13369                           ;Test.c: 497: break;
 13370  002A5C  3881               	swapf	3969,w,c	;volatile
 13371  002A5E  0B0F               	andlw	15
 13372  002A60  0A05               	xorlw	5
 13373  002A62  A4D8               	btfss	status,2,c
 13374  002A64  D01D               	goto	l7781
 13375                           
 13376                           ;Test.c: 502: for(int i = 0; i<3000; i++){
 13377  002A66  0E00               	movlw	0
 13378  002A68  0100               	movlb	0	; () banked
 13379  002A6A  6FB2               	movwf	(PusherTest@i+1)& (0+255),b
 13380  002A6C  0E00               	movlw	0
 13381  002A6E  6FB1               	movwf	PusherTest@i& (0+255),b
 13382  002A70                     l7771:
 13383                           
 13384                           ; BSR set to: 0
 13385  002A70  0100               	movlb	0	; () banked
 13386  002A72  BFB2               	btfsc	(PusherTest@i+1)& (0+255),7,b
 13387  002A74  D008               	goto	l1260
 13388  002A76  0EB8               	movlw	184
 13389  002A78  0100               	movlb	0	; () banked
 13390  002A7A  5DB1               	subwf	PusherTest@i& (0+255),w,b
 13391  002A7C  0E0B               	movlw	11
 13392  002A7E  0100               	movlb	0	; () banked
 13393  002A80  59B2               	subwfb	(PusherTest@i+1)& (0+255),w,b
 13394  002A82  B0D8               	btfsc	status,0,c
 13395  002A84  D02F               	goto	l1266
 13396  002A86                     l1260:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;Test.c: 503: LATAbits.LATA4 = 1;
 13400  002A86  8889               	bsf	3977,4,c	;volatile
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;Test.c: 504: _delay((unsigned long)((75)*(32000000/4000000.0)));
 13404  002A88  0EC8               	movlw	200
 13405  002A8A                     u9297:
 13406  002A8A  2EE8               	decfsz	wreg,f,c
 13407  002A8C  D7FE               	bra	u9297
 13408                           
 13409                           ;Test.c: 505: LATAbits.LATA4 = 0;
 13410  002A8E  9889               	bcf	3977,4,c	;volatile
 13411                           
 13412                           ;Test.c: 506: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13413  002A90  0E42               	movlw	66
 13414  002A92                     u9307:
 13415  002A92  2EE8               	decfsz	wreg,f,c
 13416  002A94  D7FE               	bra	u9307
 13417  002A96  D000               	nop2	
 13418  002A98  0100               	movlb	0	; () banked
 13419  002A9A  4BB1               	infsnz	PusherTest@i& (0+255),f,b
 13420  002A9C  2BB2               	incf	(PusherTest@i+1)& (0+255),f,b
 13421  002A9E  D7E8               	goto	l7771
 13422  002AA0                     l7781:
 13423                           
 13424                           ;Test.c: 509: else if (PORTB >> 4 == 0b110){
 13425  002AA0  3881               	swapf	3969,w,c	;volatile
 13426  002AA2  0B0F               	andlw	15
 13427  002AA4  0A06               	xorlw	6
 13428  002AA6  A4D8               	btfss	status,2,c
 13429  002AA8  D01D               	goto	l1266
 13430                           
 13431                           ;Test.c: 510: for(int i = 0; i<3000; i++){
 13432  002AAA  0E00               	movlw	0
 13433  002AAC  0100               	movlb	0	; () banked
 13434  002AAE  6FB4               	movwf	(PusherTest@i_1711+1)& (0+255),b
 13435  002AB0  0E00               	movlw	0
 13436  002AB2  6FB3               	movwf	PusherTest@i_1711& (0+255),b
 13437  002AB4                     l7785:
 13438                           
 13439                           ; BSR set to: 0
 13440  002AB4  0100               	movlb	0	; () banked
 13441  002AB6  BFB4               	btfsc	(PusherTest@i_1711+1)& (0+255),7,b
 13442  002AB8  D008               	goto	l1264
 13443  002ABA  0EB8               	movlw	184
 13444  002ABC  0100               	movlb	0	; () banked
 13445  002ABE  5DB3               	subwf	PusherTest@i_1711& (0+255),w,b
 13446  002AC0  0E0B               	movlw	11
 13447  002AC2  0100               	movlb	0	; () banked
 13448  002AC4  59B4               	subwfb	(PusherTest@i_1711+1)& (0+255),w,b
 13449  002AC6  B0D8               	btfsc	status,0,c
 13450  002AC8  D00D               	goto	l1266
 13451  002ACA                     l1264:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Test.c: 511: LATAbits.LATA4 = 1;
 13455  002ACA  8889               	bsf	3977,4,c	;volatile
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;Test.c: 512: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13459  002ACC  0E9A               	movlw	154
 13460  002ACE                     u9317:
 13461  002ACE  2EE8               	decfsz	wreg,f,c
 13462  002AD0  D7FE               	bra	u9317
 13463  002AD2  D000               	nop2	
 13464                           
 13465                           ;Test.c: 513: LATAbits.LATA4 = 0;
 13466  002AD4  9889               	bcf	3977,4,c	;volatile
 13467                           
 13468                           ;Test.c: 514: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13469  002AD6  0E70               	movlw	112
 13470  002AD8                     u9327:
 13471  002AD8  2EE8               	decfsz	wreg,f,c
 13472  002ADA  D7FE               	bra	u9327
 13473  002ADC  0100               	movlb	0	; () banked
 13474  002ADE  4BB3               	infsnz	PusherTest@i_1711& (0+255),f,b
 13475  002AE0  2BB4               	incf	(PusherTest@i_1711+1)& (0+255),f,b
 13476  002AE2  D7E8               	goto	l7785
 13477  002AE4                     l1266:
 13478  002AE4  A281               	btfss	3969,1,c	;volatile
 13479  002AE6  D7B3               	goto	l7759
 13480  002AE8  D7FD               	goto	l1266
 13481  002AEA                     l1257:
 13482                           
 13483                           ;Test.c: 519: }
 13484                           ;Test.c: 520: LATCbits.LATC5 = 0;
 13485  002AEA  9A8B               	bcf	3979,5,c	;volatile
 13486  002AEC  0012               	return		;funcret
 13487  002AEE                     __end_of_PusherTest:
 13488                           	opt stack 0
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           intcon	equ	0xFF2
 13496                           intcon2	equ	0xFF1
 13497                           intcon3	equ	0xFF0
 13498                           postinc0	equ	0xFEE
 13499                           wreg	equ	0xFE8
 13500                           postdec1	equ	0xFE5
 13501                           fsr1l	equ	0xFE1
 13502                           indf2	equ	0xFDF
 13503                           postinc2	equ	0xFDE
 13504                           postdec2	equ	0xFDD
 13505                           fsr2h	equ	0xFDA
 13506                           fsr2l	equ	0xFD9
 13507                           status	equ	0xFD8
 13508                           
 13509 ;; *************** function _readADC *****************
 13510 ;; Defined at:
 13511 ;;		line 15 in file "ADCFunctionality.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  channel         1    wreg     unsigned char 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  channel         1    1[BANK0 ] unsigned char 
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      void 
 13518 ;; Registers used:
 13519 ;;		wreg, status,2, status,0, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;Total ram usage:        2 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    7
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_readIR
 13536 ;;		_readMAG
 13537 ;;		_sensorTest
 13538 ;;		_PusherTest
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	text43
 13543  004D1E                     __ptext43:
 13544                           	opt stack 0
 13545  004D1E                     _readADC:
 13546                           	opt stack 20
 13547                           
 13548                           ;incstack = 0
 13549                           ;readADC@channel stored from wreg
 13550  004D1E  0100               	movlb	0	; () banked
 13551  004D20  6F81               	movwf	readADC@channel& (0+255),b
 13552                           
 13553                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 13554  004D22  0100               	movlb	0	; () banked
 13555  004D24  4581               	rlncf	readADC@channel& (0+255),w,b
 13556  004D26  46E8               	rlncf	wreg,f,c
 13557  004D28  0BFC               	andlw	252
 13558  004D2A  6EC2               	movwf	4034,c	;volatile
 13559                           
 13560                           ; BSR set to: 0
 13561                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 13562  004D2C  80C2               	bsf	4034,0,c	;volatile
 13563                           
 13564                           ; BSR set to: 0
 13565                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 13566  004D2E  82C2               	bsf	4034,1,c	;volatile
 13567                           
 13568                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 13569  004D30  D009               	goto	l5647
 13570  004D32                     l5645:
 13571  004D32  0E34               	movlw	52
 13572  004D34  0100               	movlb	0	; () banked
 13573  004D36  6F80               	movwf	??_readADC& (0+255),b
 13574  004D38  0EF1               	movlw	241
 13575  004D3A                     u9337:
 13576  004D3A  2EE8               	decfsz	wreg,f,c
 13577  004D3C  D7FE               	bra	u9337
 13578  004D3E  2F80               	decfsz	??_readADC& (0+255),f,b
 13579  004D40  D7FC               	bra	u9337
 13580  004D42  D000               	nop2	
 13581  004D44                     l5647:
 13582  004D44  A2C2               	btfss	4034,1,c	;volatile
 13583  004D46  0012               	return	
 13584  004D48  D7F4               	goto	l5645
 13585  004D4A                     __end_of_readADC:
 13586                           	opt stack 0
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           intcon2	equ	0xFF1
 13595                           intcon3	equ	0xFF0
 13596                           postinc0	equ	0xFEE
 13597                           wreg	equ	0xFE8
 13598                           postdec1	equ	0xFE5
 13599                           fsr1l	equ	0xFE1
 13600                           indf2	equ	0xFDF
 13601                           postinc2	equ	0xFDE
 13602                           postdec2	equ	0xFDD
 13603                           fsr2h	equ	0xFDA
 13604                           fsr2l	equ	0xFD9
 13605                           status	equ	0xFD8
 13606                           
 13607 ;; *************** function _PortTests *****************
 13608 ;; Defined at:
 13609 ;;		line 409 in file "Test.c"
 13610 ;; Parameters:    Size  Location     Type
 13611 ;;		None
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;		None
 13614 ;; Return value:  Size  Location     Type
 13615 ;;                  1    wreg      void 
 13616 ;; Registers used:
 13617 ;;		wreg, status,2, status,0
 13618 ;; Tracked objects:
 13619 ;;		On entry : 0/0
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13627 ;;Total ram usage:        2 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; Hardware stack levels required when called:    7
 13630 ;; This function calls:
 13631 ;;		Nothing
 13632 ;; This function is called by:
 13633 ;;		_Test
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           	psect	text44
 13638  004250                     __ptext44:
 13639                           	opt stack 0
 13640  004250                     _PortTests:
 13641                           	opt stack 22
 13642  004250                     l1215:
 13643  004250  A281               	btfss	3969,1,c	;volatile
 13644  004252  D7FE               	goto	l1215
 13645                           
 13646                           ;Test.c: 413: var = PORTB >> 4;
 13647  004254  CF81 F080          	movff	3969,??_PortTests	;volatile
 13648  004258  0100               	movlb	0	; () banked
 13649  00425A  3B80               	swapf	??_PortTests& (0+255),f,b
 13650  00425C  0E0F               	movlw	15
 13651  00425E  1780               	andwf	??_PortTests& (0+255),f,b
 13652  004260  0100               	movlb	0	; () banked
 13653  004262  5180               	movf	??_PortTests& (0+255),w,b
 13654  004264  0100               	movlb	0	; () banked
 13655  004266  6FFA               	movwf	_var& (0+255),b
 13656  004268  6BFB               	clrf	(_var+1)& (0+255),b
 13657                           
 13658                           ;Test.c: 414: switch(var){
 13659  00426A  D00C               	goto	l7799
 13660  00426C                     l1219:
 13661                           
 13662                           ; BSR set to: 0
 13663                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13664  00426C  808D               	bsf	3981,0,c	;volatile
 13665                           
 13666                           ;Test.c: 417: break;
 13667  00426E  D027               	goto	l1227
 13668  004270                     l1221:
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13672  004270  828D               	bsf	3981,1,c	;volatile
 13673                           
 13674                           ;Test.c: 420: break;
 13675  004272  D025               	goto	l1227
 13676  004274                     l1222:
 13677                           
 13678                           ; BSR set to: 0
 13679                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13680  004274  808C               	bsf	3980,0,c	;volatile
 13681                           
 13682                           ;Test.c: 423: break;
 13683  004276  D023               	goto	l1227
 13684  004278                     l1223:
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13688  004278  8689               	bsf	3977,3,c	;volatile
 13689                           
 13690                           ;Test.c: 426: break;
 13691  00427A  D021               	goto	l1227
 13692  00427C                     l1224:
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13696  00427C  8889               	bsf	3977,4,c	;volatile
 13697                           
 13698                           ;Test.c: 429: break;
 13699  00427E  D01F               	goto	l1227
 13700  004280                     l1225:
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13704  004280  8A89               	bsf	3977,5,c	;volatile
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;Test.c: 435: }
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;Test.c: 434: break;
 13711                           
 13712                           ;Test.c: 433: default:
 13713                           
 13714                           ;Test.c: 432: break;
 13715  004282  D01D               	goto	l1227
 13716  004284                     l7799:
 13717                           
 13718                           ; BSR set to: 0
 13719  004284  C0FA  F080         	movff	_var,??_PortTests
 13720  004288  C0FB  F081         	movff	_var+1,??_PortTests+1
 13721                           
 13722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13723                           ; Switch size 1, requested type "space"
 13724                           ; Number of cases is 1, Range of values is 0 to 0
 13725                           ; switch strategies available:
 13726                           ; Name         Instructions Cycles
 13727                           ; simple_byte            4     3 (average)
 13728                           ;	Chosen strategy is simple_byte
 13729  00428C  0100               	movlb	0	; () banked
 13730  00428E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13731  004290  0A00               	xorlw	0	; case 0
 13732  004292  A4D8               	btfss	status,2,c
 13733  004294  D014               	goto	l1227
 13734                           
 13735                           ; BSR set to: 0
 13736                           ; Switch size 1, requested type "space"
 13737                           ; Number of cases is 6, Range of values is 0 to 5
 13738                           ; switch strategies available:
 13739                           ; Name         Instructions Cycles
 13740                           ; simple_byte           19    10 (average)
 13741                           ;	Chosen strategy is simple_byte
 13742  004296  0100               	movlb	0	; () banked
 13743  004298  5180               	movf	??_PortTests& (0+255),w,b
 13744  00429A  0A00               	xorlw	0	; case 0
 13745  00429C  B4D8               	btfsc	status,2,c
 13746  00429E  D7E6               	goto	l1219
 13747  0042A0  0A01               	xorlw	1	; case 1
 13748  0042A2  B4D8               	btfsc	status,2,c
 13749  0042A4  D7E5               	goto	l1221
 13750  0042A6  0A03               	xorlw	3	; case 2
 13751  0042A8  B4D8               	btfsc	status,2,c
 13752  0042AA  D7E4               	goto	l1222
 13753  0042AC  0A01               	xorlw	1	; case 3
 13754  0042AE  B4D8               	btfsc	status,2,c
 13755  0042B0  D7E3               	goto	l1223
 13756  0042B2  0A07               	xorlw	7	; case 4
 13757  0042B4  B4D8               	btfsc	status,2,c
 13758  0042B6  D7E2               	goto	l1224
 13759  0042B8  0A01               	xorlw	1	; case 5
 13760  0042BA  B4D8               	btfsc	status,2,c
 13761  0042BC  D7E1               	goto	l1225
 13762  0042BE                     l1227:
 13763  0042BE  B281               	btfsc	3969,1,c	;volatile
 13764  0042C0  D7FE               	goto	l1227
 13765                           
 13766                           ;Test.c: 437: __nop();
 13767  0042C2  F000               	nop	
 13768                           
 13769                           ;Test.c: 438: __nop();
 13770  0042C4  F000               	nop	
 13771                           
 13772                           ;Test.c: 439: LATA = 0x00;
 13773  0042C6  0E00               	movlw	0
 13774  0042C8  6E89               	movwf	3977,c	;volatile
 13775                           
 13776                           ;Test.c: 440: LATE = 0x00;
 13777  0042CA  0E00               	movlw	0
 13778  0042CC  6E8D               	movwf	3981,c	;volatile
 13779                           
 13780                           ;Test.c: 441: LATD = 0x00; }
 13781  0042CE  0E00               	movlw	0
 13782  0042D0  6E8C               	movwf	3980,c	;volatile
 13783  0042D2  D7BE               	goto	l1215
 13784  0042D4                     __end_of_PortTests:
 13785                           	opt stack 0
 13786                           tblptru	equ	0xFF8
 13787                           tblptrh	equ	0xFF7
 13788                           tblptrl	equ	0xFF6
 13789                           tablat	equ	0xFF5
 13790                           prodh	equ	0xFF4
 13791                           prodl	equ	0xFF3
 13792                           intcon	equ	0xFF2
 13793                           intcon2	equ	0xFF1
 13794                           intcon3	equ	0xFF0
 13795                           postinc0	equ	0xFEE
 13796                           wreg	equ	0xFE8
 13797                           postdec1	equ	0xFE5
 13798                           fsr1l	equ	0xFE1
 13799                           indf2	equ	0xFDF
 13800                           postinc2	equ	0xFDE
 13801                           postdec2	equ	0xFDD
 13802                           fsr2h	equ	0xFDA
 13803                           fsr2l	equ	0xFD9
 13804                           status	equ	0xFD8
 13805                           
 13806 ;; *************** function _PortTestA5 *****************
 13807 ;; Defined at:
 13808 ;;		line 444 in file "Test.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;		None
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;		None
 13813 ;; Return value:  Size  Location     Type
 13814 ;;                  1    wreg      void 
 13815 ;; Registers used:
 13816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;Total ram usage:        1 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:   10
 13829 ;; This function calls:
 13830 ;;		_lcdInst
 13831 ;;		_printf
 13832 ;; This function is called by:
 13833 ;;		_Test
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           	psect	text45
 13838  0046AC                     __ptext45:
 13839                           	opt stack 0
 13840  0046AC                     _PortTestA5:
 13841                           	opt stack 19
 13842                           
 13843                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13844                           
 13845                           ;incstack = 0
 13846  0046AC  0E01               	movlw	1
 13847  0046AE  EC8A  F027         	call	_lcdInst
 13848  0046B2  0E68               	movlw	104
 13849  0046B4  0100               	movlb	0	; () banked
 13850  0046B6  6FAB               	movwf	??_PortTestA5& (0+255),b
 13851  0046B8  0EE4               	movlw	228
 13852  0046BA                     u9347:
 13853  0046BA  2EE8               	decfsz	wreg,f,c
 13854  0046BC  D7FE               	bra	u9347
 13855  0046BE  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13856  0046C0  D7FC               	bra	u9347
 13857  0046C2  F000               	nop	
 13858  0046C4  0E80               	movlw	128
 13859  0046C6  EC8A  F027         	call	_lcdInst
 13860                           
 13861                           ;Test.c: 446: printf("D WILL RETURN    ");
 13862  0046CA  0E37               	movlw	low STR_111
 13863  0046CC  0100               	movlb	0	; () banked
 13864  0046CE  6F8E               	movwf	printf@f& (0+255),b
 13865  0046D0  0EFB               	movlw	high STR_111
 13866  0046D2  0100               	movlb	0	; () banked
 13867  0046D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13868  0046D6  ECB8  F008         	call	_printf	;wreg free
 13869                           
 13870                           ;Test.c: 447: lcdInst(0b11000000);;
 13871  0046DA  0EC0               	movlw	192
 13872  0046DC  EC8A  F027         	call	_lcdInst
 13873                           
 13874                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13875  0046E0  0E49               	movlw	low STR_112
 13876  0046E2  0100               	movlb	0	; () banked
 13877  0046E4  6F8E               	movwf	printf@f& (0+255),b
 13878  0046E6  0EFB               	movlw	high STR_112
 13879  0046E8  0100               	movlb	0	; () banked
 13880  0046EA  6F8F               	movwf	(printf@f+1)& (0+255),b
 13881  0046EC  ECB8  F008         	call	_printf	;wreg free
 13882  0046F0                     l1236:
 13883  0046F0  A281               	btfss	3969,1,c	;volatile
 13884  0046F2  D7FE               	goto	l1236
 13885                           
 13886                           ;Test.c: 453: }
 13887                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13888  0046F4  3881               	swapf	3969,w,c	;volatile
 13889  0046F6  0B0F               	andlw	15
 13890  0046F8  0A0F               	xorlw	15
 13891  0046FA  B4D8               	btfsc	status,2,c
 13892  0046FC  0012               	return	
 13893                           
 13894                           ;Test.c: 457: else{
 13895                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13896                           
 13897                           ;Test.c: 456: }
 13898                           
 13899                           ;Test.c: 455: break;
 13900  0046FE  8A89               	bsf	3977,5,c	;volatile
 13901  004700                     l1242:
 13902  004700  B281               	btfsc	3969,1,c	;volatile
 13903  004702  D7FE               	goto	l1242
 13904                           
 13905                           ;Test.c: 461: }
 13906                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13907  004704  9A89               	bcf	3977,5,c	;volatile
 13908  004706  D7F4               	goto	l1236
 13909  004708                     __end_of_PortTestA5:
 13910                           	opt stack 0
 13911                           tblptru	equ	0xFF8
 13912                           tblptrh	equ	0xFF7
 13913                           tblptrl	equ	0xFF6
 13914                           tablat	equ	0xFF5
 13915                           prodh	equ	0xFF4
 13916                           prodl	equ	0xFF3
 13917                           intcon	equ	0xFF2
 13918                           intcon2	equ	0xFF1
 13919                           intcon3	equ	0xFF0
 13920                           postinc0	equ	0xFEE
 13921                           wreg	equ	0xFE8
 13922                           postdec1	equ	0xFE5
 13923                           fsr1l	equ	0xFE1
 13924                           indf2	equ	0xFDF
 13925                           postinc2	equ	0xFDE
 13926                           postdec2	equ	0xFDD
 13927                           fsr2h	equ	0xFDA
 13928                           fsr2l	equ	0xFD9
 13929                           status	equ	0xFD8
 13930                           
 13931 ;; *************** function _EEPROMTest *****************
 13932 ;; Defined at:
 13933 ;;		line 577 in file "Test.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;		None
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;		None
 13938 ;; Return value:  Size  Location     Type
 13939 ;;                  1    wreg      void 
 13940 ;; Registers used:
 13941 ;;		None
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;Total ram usage:        0 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    7
 13954 ;; This function calls:
 13955 ;;		Nothing
 13956 ;; This function is called by:
 13957 ;;		_Test
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           	psect	text46
 13962  004F78                     __ptext46:
 13963                           	opt stack 0
 13964  004F78                     _EEPROMTest:
 13965                           	opt stack 22
 13966                           
 13967                           ;incstack = 0
 13968  004F78  0012               	return		;funcret
 13969  004F7A                     __end_of_EEPROMTest:
 13970                           	opt stack 0
 13971                           tblptru	equ	0xFF8
 13972                           tblptrh	equ	0xFF7
 13973                           tblptrl	equ	0xFF6
 13974                           tablat	equ	0xFF5
 13975                           prodh	equ	0xFF4
 13976                           prodl	equ	0xFF3
 13977                           intcon	equ	0xFF2
 13978                           intcon2	equ	0xFF1
 13979                           intcon3	equ	0xFF0
 13980                           postinc0	equ	0xFEE
 13981                           wreg	equ	0xFE8
 13982                           postdec1	equ	0xFE5
 13983                           fsr1l	equ	0xFE1
 13984                           indf2	equ	0xFDF
 13985                           postinc2	equ	0xFDE
 13986                           postdec2	equ	0xFDD
 13987                           fsr2h	equ	0xFDA
 13988                           fsr2l	equ	0xFD9
 13989                           status	equ	0xFD8
 13990                           
 13991 ;; *************** function _BothServos *****************
 13992 ;; Defined at:
 13993 ;;		line 352 in file "Test.c"
 13994 ;; Parameters:    Size  Location     Type
 13995 ;;		None
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;		None
 13998 ;; Return value:  Size  Location     Type
 13999 ;;                  1    wreg      void 
 14000 ;; Registers used:
 14001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14011 ;;Total ram usage:        2 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:   10
 14014 ;; This function calls:
 14015 ;;		_initServos
 14016 ;;		_lcdInst
 14017 ;;		_printf
 14018 ;;		_updateServoPosition
 14019 ;; This function is called by:
 14020 ;;		_Test
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           	psect	text47
 14025  00192C                     __ptext47:
 14026                           	opt stack 0
 14027  00192C                     _BothServos:
 14028                           	opt stack 19
 14029                           
 14030                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14031                           
 14032                           ;incstack = 0
 14033  00192C  0E01               	movlw	1
 14034  00192E  EC8A  F027         	call	_lcdInst
 14035  001932  0E68               	movlw	104
 14036  001934  0100               	movlb	0	; () banked
 14037  001936  6FAB               	movwf	??_BothServos& (0+255),b
 14038  001938  0EE4               	movlw	228
 14039  00193A                     u9357:
 14040  00193A  2EE8               	decfsz	wreg,f,c
 14041  00193C  D7FE               	bra	u9357
 14042  00193E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14043  001940  D7FC               	bra	u9357
 14044  001942  F000               	nop	
 14045  001944  0E80               	movlw	128
 14046  001946  EC8A  F027         	call	_lcdInst
 14047                           
 14048                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 14049  00194A  0EB4               	movlw	low STR_110
 14050  00194C  0100               	movlb	0	; () banked
 14051  00194E  6F8E               	movwf	printf@f& (0+255),b
 14052  001950  0EFC               	movlw	high STR_110
 14053  001952  0100               	movlb	0	; () banked
 14054  001954  6F8F               	movwf	(printf@f+1)& (0+255),b
 14055  001956  ECB8  F008         	call	_printf	;wreg free
 14056                           
 14057                           ;Test.c: 355: TMR1ON = 1;
 14058  00195A  80CD               	bsf	4045,0,c	;volatile
 14059                           
 14060                           ;Test.c: 356: TMR3ON = 1;
 14061  00195C  80B1               	bsf	4017,0,c	;volatile
 14062                           
 14063                           ;Test.c: 357: machine_state = Sorting_state;
 14064  00195E  0E01               	movlw	1
 14065  001960  0100               	movlb	0	; () banked
 14066  001962  6FFC               	movwf	_machine_state& (0+255),b
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;Test.c: 358: was_low_1 = 0;
 14070  001964  0E00               	movlw	0
 14071  001966  6E7A               	movwf	_was_low_1+1,c	;volatile
 14072  001968  0E00               	movlw	0
 14073  00196A  6E79               	movwf	_was_low_1,c	;volatile
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;Test.c: 359: was_low_3 = 0;
 14077  00196C  0E00               	movlw	0
 14078  00196E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14079  001970  0E00               	movlw	0
 14080  001972  6E7B               	movwf	_was_low_3,c	;volatile
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;Test.c: 365: initServos();
 14084  001974  EC84  F023         	call	_initServos	;wreg free
 14085                           
 14086                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14087  001978  0E3D               	movlw	61
 14088  00197A  0100               	movlb	0	; () banked
 14089  00197C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14090  00197E  0EE1               	movlw	225
 14091  001980  0100               	movlb	0	; () banked
 14092  001982  6FAB               	movwf	??_BothServos& (0+255),b
 14093  001984  0E3F               	movlw	63
 14094  001986                     u9367:
 14095  001986  2EE8               	decfsz	wreg,f,c
 14096  001988  D7FE               	bra	u9367
 14097  00198A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14098  00198C  D7FC               	bra	u9367
 14099  00198E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14100  001990  D7FA               	bra	u9367
 14101  001992  D000               	nop2	
 14102                           
 14103                           ;Test.c: 368: updateServoPosition(500, 1);
 14104  001994  0E01               	movlw	1
 14105  001996  0100               	movlb	0	; () banked
 14106  001998  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14107  00199A  0EF4               	movlw	244
 14108  00199C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14109  00199E  0E00               	movlw	0
 14110  0019A0  0100               	movlb	0	; () banked
 14111  0019A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14112  0019A4  0E01               	movlw	1
 14113  0019A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14114  0019A8  ECE6  F021         	call	_updateServoPosition	;wreg free
 14115                           
 14116                           ;Test.c: 369: updateServoPosition(1050, 3);
 14117  0019AC  0E04               	movlw	4
 14118  0019AE  0100               	movlb	0	; () banked
 14119  0019B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14120  0019B2  0E1A               	movlw	26
 14121  0019B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14122  0019B6  0E00               	movlw	0
 14123  0019B8  0100               	movlb	0	; () banked
 14124  0019BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14125  0019BC  0E03               	movlw	3
 14126  0019BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14127  0019C0  ECE6  F021         	call	_updateServoPosition	;wreg free
 14128                           
 14129                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 14130  0019C4  0E1F               	movlw	31
 14131  0019C6  0100               	movlb	0	; () banked
 14132  0019C8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14133  0019CA  0E71               	movlw	113
 14134  0019CC  0100               	movlb	0	; () banked
 14135  0019CE  6FAB               	movwf	??_BothServos& (0+255),b
 14136  0019D0  0E1E               	movlw	30
 14137  0019D2                     u9377:
 14138  0019D2  2EE8               	decfsz	wreg,f,c
 14139  0019D4  D7FE               	bra	u9377
 14140  0019D6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14141  0019D8  D7FC               	bra	u9377
 14142  0019DA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14143  0019DC  D7FA               	bra	u9377
 14144  0019DE  F000               	nop	
 14145                           
 14146                           ;Test.c: 371: updateServoPosition(1260, 3);
 14147  0019E0  0E04               	movlw	4
 14148  0019E2  0100               	movlb	0	; () banked
 14149  0019E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14150  0019E6  0EEC               	movlw	236
 14151  0019E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14152  0019EA  0E00               	movlw	0
 14153  0019EC  0100               	movlb	0	; () banked
 14154  0019EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14155  0019F0  0E03               	movlw	3
 14156  0019F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14157  0019F4  ECE6  F021         	call	_updateServoPosition	;wreg free
 14158                           
 14159                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14160  0019F8  0E66               	movlw	102
 14161  0019FA  0100               	movlb	0	; () banked
 14162  0019FC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14163  0019FE  0E76               	movlw	118
 14164  001A00  0100               	movlb	0	; () banked
 14165  001A02  6FAB               	movwf	??_BothServos& (0+255),b
 14166  001A04  0EC1               	movlw	193
 14167  001A06                     u9387:
 14168  001A06  2EE8               	decfsz	wreg,f,c
 14169  001A08  D7FE               	bra	u9387
 14170  001A0A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14171  001A0C  D7FC               	bra	u9387
 14172  001A0E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14173  001A10  D7FA               	bra	u9387
 14174                           
 14175                           ;Test.c: 373: updateServoPosition(1050, 3);
 14176  001A12  0E04               	movlw	4
 14177  001A14  0100               	movlb	0	; () banked
 14178  001A16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14179  001A18  0E1A               	movlw	26
 14180  001A1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14181  001A1C  0E00               	movlw	0
 14182  001A1E  0100               	movlb	0	; () banked
 14183  001A20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14184  001A22  0E03               	movlw	3
 14185  001A24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14186  001A26  ECE6  F021         	call	_updateServoPosition	;wreg free
 14187                           
 14188                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 14189  001A2A  0E1F               	movlw	31
 14190  001A2C  0100               	movlb	0	; () banked
 14191  001A2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14192  001A30  0E71               	movlw	113
 14193  001A32  0100               	movlb	0	; () banked
 14194  001A34  6FAB               	movwf	??_BothServos& (0+255),b
 14195  001A36  0E1E               	movlw	30
 14196  001A38                     u9397:
 14197  001A38  2EE8               	decfsz	wreg,f,c
 14198  001A3A  D7FE               	bra	u9397
 14199  001A3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14200  001A3E  D7FC               	bra	u9397
 14201  001A40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14202  001A42  D7FA               	bra	u9397
 14203  001A44  F000               	nop	
 14204                           
 14205                           ;Test.c: 376: updateServoPosition(850, 1);
 14206  001A46  0E03               	movlw	3
 14207  001A48  0100               	movlb	0	; () banked
 14208  001A4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14209  001A4C  0E52               	movlw	82
 14210  001A4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14211  001A50  0E00               	movlw	0
 14212  001A52  0100               	movlb	0	; () banked
 14213  001A54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14214  001A56  0E01               	movlw	1
 14215  001A58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14216  001A5A  ECE6  F021         	call	_updateServoPosition	;wreg free
 14217                           
 14218                           ;Test.c: 377: updateServoPosition(1050, 3);
 14219  001A5E  0E04               	movlw	4
 14220  001A60  0100               	movlb	0	; () banked
 14221  001A62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14222  001A64  0E1A               	movlw	26
 14223  001A66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14224  001A68  0E00               	movlw	0
 14225  001A6A  0100               	movlb	0	; () banked
 14226  001A6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14227  001A6E  0E03               	movlw	3
 14228  001A70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14229  001A72  ECE6  F021         	call	_updateServoPosition	;wreg free
 14230                           
 14231                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 14232  001A76  0E1F               	movlw	31
 14233  001A78  0100               	movlb	0	; () banked
 14234  001A7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14235  001A7C  0E71               	movlw	113
 14236  001A7E  0100               	movlb	0	; () banked
 14237  001A80  6FAB               	movwf	??_BothServos& (0+255),b
 14238  001A82  0E1E               	movlw	30
 14239  001A84                     u9407:
 14240  001A84  2EE8               	decfsz	wreg,f,c
 14241  001A86  D7FE               	bra	u9407
 14242  001A88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14243  001A8A  D7FC               	bra	u9407
 14244  001A8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14245  001A8E  D7FA               	bra	u9407
 14246  001A90  F000               	nop	
 14247                           
 14248                           ;Test.c: 379: updateServoPosition(1260, 3);
 14249  001A92  0E04               	movlw	4
 14250  001A94  0100               	movlb	0	; () banked
 14251  001A96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14252  001A98  0EEC               	movlw	236
 14253  001A9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14254  001A9C  0E00               	movlw	0
 14255  001A9E  0100               	movlb	0	; () banked
 14256  001AA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14257  001AA2  0E03               	movlw	3
 14258  001AA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14259  001AA6  ECE6  F021         	call	_updateServoPosition	;wreg free
 14260                           
 14261                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14262  001AAA  0E66               	movlw	102
 14263  001AAC  0100               	movlb	0	; () banked
 14264  001AAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14265  001AB0  0E76               	movlw	118
 14266  001AB2  0100               	movlb	0	; () banked
 14267  001AB4  6FAB               	movwf	??_BothServos& (0+255),b
 14268  001AB6  0EC1               	movlw	193
 14269  001AB8                     u9417:
 14270  001AB8  2EE8               	decfsz	wreg,f,c
 14271  001ABA  D7FE               	bra	u9417
 14272  001ABC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14273  001ABE  D7FC               	bra	u9417
 14274  001AC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14275  001AC2  D7FA               	bra	u9417
 14276                           
 14277                           ;Test.c: 381: updateServoPosition(1050, 3);
 14278  001AC4  0E04               	movlw	4
 14279  001AC6  0100               	movlb	0	; () banked
 14280  001AC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14281  001ACA  0E1A               	movlw	26
 14282  001ACC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14283  001ACE  0E00               	movlw	0
 14284  001AD0  0100               	movlb	0	; () banked
 14285  001AD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14286  001AD4  0E03               	movlw	3
 14287  001AD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14288  001AD8  ECE6  F021         	call	_updateServoPosition	;wreg free
 14289                           
 14290                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 14291  001ADC  0E1F               	movlw	31
 14292  001ADE  0100               	movlb	0	; () banked
 14293  001AE0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14294  001AE2  0E71               	movlw	113
 14295  001AE4  0100               	movlb	0	; () banked
 14296  001AE6  6FAB               	movwf	??_BothServos& (0+255),b
 14297  001AE8  0E1E               	movlw	30
 14298  001AEA                     u9427:
 14299  001AEA  2EE8               	decfsz	wreg,f,c
 14300  001AEC  D7FE               	bra	u9427
 14301  001AEE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14302  001AF0  D7FC               	bra	u9427
 14303  001AF2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14304  001AF4  D7FA               	bra	u9427
 14305  001AF6  F000               	nop	
 14306                           
 14307                           ;Test.c: 384: updateServoPosition(1200, 1);
 14308  001AF8  0E04               	movlw	4
 14309  001AFA  0100               	movlb	0	; () banked
 14310  001AFC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14311  001AFE  0EB0               	movlw	176
 14312  001B00  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14313  001B02  0E00               	movlw	0
 14314  001B04  0100               	movlb	0	; () banked
 14315  001B06  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14316  001B08  0E01               	movlw	1
 14317  001B0A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14318  001B0C  ECE6  F021         	call	_updateServoPosition	;wreg free
 14319                           
 14320                           ;Test.c: 385: updateServoPosition(1050, 3);
 14321  001B10  0E04               	movlw	4
 14322  001B12  0100               	movlb	0	; () banked
 14323  001B14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14324  001B16  0E1A               	movlw	26
 14325  001B18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14326  001B1A  0E00               	movlw	0
 14327  001B1C  0100               	movlb	0	; () banked
 14328  001B1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14329  001B20  0E03               	movlw	3
 14330  001B22  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14331  001B24  ECE6  F021         	call	_updateServoPosition	;wreg free
 14332                           
 14333                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 14334  001B28  0E3D               	movlw	61
 14335  001B2A  0100               	movlb	0	; () banked
 14336  001B2C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14337  001B2E  0EE1               	movlw	225
 14338  001B30  0100               	movlb	0	; () banked
 14339  001B32  6FAB               	movwf	??_BothServos& (0+255),b
 14340  001B34  0E3F               	movlw	63
 14341  001B36                     u9437:
 14342  001B36  2EE8               	decfsz	wreg,f,c
 14343  001B38  D7FE               	bra	u9437
 14344  001B3A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14345  001B3C  D7FC               	bra	u9437
 14346  001B3E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14347  001B40  D7FA               	bra	u9437
 14348  001B42  D000               	nop2	
 14349                           
 14350                           ;Test.c: 388: updateServoPosition(1670, 1);
 14351  001B44  0E06               	movlw	6
 14352  001B46  0100               	movlb	0	; () banked
 14353  001B48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14354  001B4A  0E86               	movlw	134
 14355  001B4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14356  001B4E  0E00               	movlw	0
 14357  001B50  0100               	movlb	0	; () banked
 14358  001B52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14359  001B54  0E01               	movlw	1
 14360  001B56  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14361  001B58  ECE6  F021         	call	_updateServoPosition	;wreg free
 14362                           
 14363                           ;Test.c: 389: updateServoPosition(1050, 3);
 14364  001B5C  0E04               	movlw	4
 14365  001B5E  0100               	movlb	0	; () banked
 14366  001B60  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14367  001B62  0E1A               	movlw	26
 14368  001B64  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14369  001B66  0E00               	movlw	0
 14370  001B68  0100               	movlb	0	; () banked
 14371  001B6A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14372  001B6C  0E03               	movlw	3
 14373  001B6E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14374  001B70  ECE6  F021         	call	_updateServoPosition	;wreg free
 14375                           
 14376                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 14377  001B74  0E1F               	movlw	31
 14378  001B76  0100               	movlb	0	; () banked
 14379  001B78  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14380  001B7A  0E71               	movlw	113
 14381  001B7C  0100               	movlb	0	; () banked
 14382  001B7E  6FAB               	movwf	??_BothServos& (0+255),b
 14383  001B80  0E1E               	movlw	30
 14384  001B82                     u9447:
 14385  001B82  2EE8               	decfsz	wreg,f,c
 14386  001B84  D7FE               	bra	u9447
 14387  001B86  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14388  001B88  D7FC               	bra	u9447
 14389  001B8A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14390  001B8C  D7FA               	bra	u9447
 14391  001B8E  F000               	nop	
 14392                           
 14393                           ;Test.c: 391: updateServoPosition(1420, 3);
 14394  001B90  0E05               	movlw	5
 14395  001B92  0100               	movlb	0	; () banked
 14396  001B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14397  001B96  0E8C               	movlw	140
 14398  001B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14399  001B9A  0E00               	movlw	0
 14400  001B9C  0100               	movlb	0	; () banked
 14401  001B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14402  001BA0  0E03               	movlw	3
 14403  001BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14404  001BA4  ECE6  F021         	call	_updateServoPosition	;wreg free
 14405                           
 14406                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14407  001BA8  0E66               	movlw	102
 14408  001BAA  0100               	movlb	0	; () banked
 14409  001BAC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14410  001BAE  0E76               	movlw	118
 14411  001BB0  0100               	movlb	0	; () banked
 14412  001BB2  6FAB               	movwf	??_BothServos& (0+255),b
 14413  001BB4  0EC1               	movlw	193
 14414  001BB6                     u9457:
 14415  001BB6  2EE8               	decfsz	wreg,f,c
 14416  001BB8  D7FE               	bra	u9457
 14417  001BBA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14418  001BBC  D7FC               	bra	u9457
 14419  001BBE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14420  001BC0  D7FA               	bra	u9457
 14421                           
 14422                           ;Test.c: 393: updateServoPosition(1050, 3);
 14423  001BC2  0E04               	movlw	4
 14424  001BC4  0100               	movlb	0	; () banked
 14425  001BC6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14426  001BC8  0E1A               	movlw	26
 14427  001BCA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14428  001BCC  0E00               	movlw	0
 14429  001BCE  0100               	movlb	0	; () banked
 14430  001BD0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14431  001BD2  0E03               	movlw	3
 14432  001BD4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14433  001BD6  ECE6  F021         	call	_updateServoPosition	;wreg free
 14434                           
 14435                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 14436  001BDA  0E1F               	movlw	31
 14437  001BDC  0100               	movlb	0	; () banked
 14438  001BDE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14439  001BE0  0E71               	movlw	113
 14440  001BE2  0100               	movlb	0	; () banked
 14441  001BE4  6FAB               	movwf	??_BothServos& (0+255),b
 14442  001BE6  0E1E               	movlw	30
 14443  001BE8                     u9467:
 14444  001BE8  2EE8               	decfsz	wreg,f,c
 14445  001BEA  D7FE               	bra	u9467
 14446  001BEC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14447  001BEE  D7FC               	bra	u9467
 14448  001BF0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14449  001BF2  D7FA               	bra	u9467
 14450  001BF4  F000               	nop	
 14451                           
 14452                           ;Test.c: 396: updateServoPosition(2400, 1);
 14453  001BF6  0E09               	movlw	9
 14454  001BF8  0100               	movlb	0	; () banked
 14455  001BFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14456  001BFC  0E60               	movlw	96
 14457  001BFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14458  001C00  0E00               	movlw	0
 14459  001C02  0100               	movlb	0	; () banked
 14460  001C04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14461  001C06  0E01               	movlw	1
 14462  001C08  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14463  001C0A  ECE6  F021         	call	_updateServoPosition	;wreg free
 14464                           
 14465                           ;Test.c: 397: updateServoPosition(1050, 3);
 14466  001C0E  0E04               	movlw	4
 14467  001C10  0100               	movlb	0	; () banked
 14468  001C12  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14469  001C14  0E1A               	movlw	26
 14470  001C16  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14471  001C18  0E00               	movlw	0
 14472  001C1A  0100               	movlb	0	; () banked
 14473  001C1C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14474  001C1E  0E03               	movlw	3
 14475  001C20  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14476  001C22  ECE6  F021         	call	_updateServoPosition	;wreg free
 14477                           
 14478                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 14479  001C26  0E1F               	movlw	31
 14480  001C28  0100               	movlb	0	; () banked
 14481  001C2A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14482  001C2C  0E71               	movlw	113
 14483  001C2E  0100               	movlb	0	; () banked
 14484  001C30  6FAB               	movwf	??_BothServos& (0+255),b
 14485  001C32  0E1E               	movlw	30
 14486  001C34                     u9477:
 14487  001C34  2EE8               	decfsz	wreg,f,c
 14488  001C36  D7FE               	bra	u9477
 14489  001C38  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14490  001C3A  D7FC               	bra	u9477
 14491  001C3C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14492  001C3E  D7FA               	bra	u9477
 14493  001C40  F000               	nop	
 14494                           
 14495                           ;Test.c: 399: updateServoPosition(1420, 3);
 14496  001C42  0E05               	movlw	5
 14497  001C44  0100               	movlb	0	; () banked
 14498  001C46  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14499  001C48  0E8C               	movlw	140
 14500  001C4A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14501  001C4C  0E00               	movlw	0
 14502  001C4E  0100               	movlb	0	; () banked
 14503  001C50  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14504  001C52  0E03               	movlw	3
 14505  001C54  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14506  001C56  ECE6  F021         	call	_updateServoPosition	;wreg free
 14507                           
 14508                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 14509  001C5A  0E66               	movlw	102
 14510  001C5C  0100               	movlb	0	; () banked
 14511  001C5E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14512  001C60  0E76               	movlw	118
 14513  001C62  0100               	movlb	0	; () banked
 14514  001C64  6FAB               	movwf	??_BothServos& (0+255),b
 14515  001C66  0EC1               	movlw	193
 14516  001C68                     u9487:
 14517  001C68  2EE8               	decfsz	wreg,f,c
 14518  001C6A  D7FE               	bra	u9487
 14519  001C6C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14520  001C6E  D7FC               	bra	u9487
 14521  001C70  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14522  001C72  D7FA               	bra	u9487
 14523                           
 14524                           ;Test.c: 401: updateServoPosition(1050, 3);
 14525  001C74  0E04               	movlw	4
 14526  001C76  0100               	movlb	0	; () banked
 14527  001C78  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14528  001C7A  0E1A               	movlw	26
 14529  001C7C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14530  001C7E  0E00               	movlw	0
 14531  001C80  0100               	movlb	0	; () banked
 14532  001C82  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14533  001C84  0E03               	movlw	3
 14534  001C86  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14535  001C88  ECE6  F021         	call	_updateServoPosition	;wreg free
 14536                           
 14537                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 14538  001C8C  0E1F               	movlw	31
 14539  001C8E  0100               	movlb	0	; () banked
 14540  001C90  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 14541  001C92  0E71               	movlw	113
 14542  001C94  0100               	movlb	0	; () banked
 14543  001C96  6FAB               	movwf	??_BothServos& (0+255),b
 14544  001C98  0E1E               	movlw	30
 14545  001C9A                     u9497:
 14546  001C9A  2EE8               	decfsz	wreg,f,c
 14547  001C9C  D7FE               	bra	u9497
 14548  001C9E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14549  001CA0  D7FC               	bra	u9497
 14550  001CA2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14551  001CA4  D7FA               	bra	u9497
 14552  001CA6  F000               	nop	
 14553                           
 14554                           ;Test.c: 404: TMR1ON = 0;
 14555  001CA8  90CD               	bcf	4045,0,c	;volatile
 14556                           
 14557                           ;Test.c: 405: TMR3ON = 0;
 14558  001CAA  90B1               	bcf	4017,0,c	;volatile
 14559                           
 14560                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14561  001CAC  9EF2               	bcf	intcon,7,c	;volatile
 14562  001CAE  0012               	return		;funcret
 14563  001CB0                     __end_of_BothServos:
 14564                           	opt stack 0
 14565                           tblptru	equ	0xFF8
 14566                           tblptrh	equ	0xFF7
 14567                           tblptrl	equ	0xFF6
 14568                           tablat	equ	0xFF5
 14569                           prodh	equ	0xFF4
 14570                           prodl	equ	0xFF3
 14571                           intcon	equ	0xFF2
 14572                           intcon2	equ	0xFF1
 14573                           intcon3	equ	0xFF0
 14574                           postinc0	equ	0xFEE
 14575                           wreg	equ	0xFE8
 14576                           postdec1	equ	0xFE5
 14577                           fsr1l	equ	0xFE1
 14578                           indf2	equ	0xFDF
 14579                           postinc2	equ	0xFDE
 14580                           postdec2	equ	0xFDD
 14581                           fsr2h	equ	0xFDA
 14582                           fsr2l	equ	0xFD9
 14583                           status	equ	0xFD8
 14584                           
 14585 ;; *************** function _initServos *****************
 14586 ;; Defined at:
 14587 ;;		line 374 in file "sort.c"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;		None
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;		None
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  1    wreg      void 
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0, cstack
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;Total ram usage:        1 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    8
 14608 ;; This function calls:
 14609 ;;		_updateServoPosition
 14610 ;; This function is called by:
 14611 ;;		_Loading
 14612 ;;		_BothServos
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text48
 14617  004708                     __ptext48:
 14618                           	opt stack 0
 14619  004708                     _initServos:
 14620                           	opt stack 20
 14621                           
 14622                           ;sort.c: 375: updateServoPosition(1200, 1);
 14623                           
 14624                           ;incstack = 0
 14625  004708  0E04               	movlw	4
 14626  00470A  0100               	movlb	0	; () banked
 14627  00470C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14628  00470E  0EB0               	movlw	176
 14629  004710  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14630  004712  0E00               	movlw	0
 14631  004714  0100               	movlb	0	; () banked
 14632  004716  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14633  004718  0E01               	movlw	1
 14634  00471A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14635  00471C  ECE6  F021         	call	_updateServoPosition	;wreg free
 14636                           
 14637                           ;sort.c: 376: updateServoPosition(1050, 3);
 14638  004720  0E04               	movlw	4
 14639  004722  0100               	movlb	0	; () banked
 14640  004724  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14641  004726  0E1A               	movlw	26
 14642  004728  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14643  00472A  0E00               	movlw	0
 14644  00472C  0100               	movlb	0	; () banked
 14645  00472E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14646  004730  0E03               	movlw	3
 14647  004732  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14648  004734  ECE6  F021         	call	_updateServoPosition	;wreg free
 14649                           
 14650                           ;sort.c: 377: TMR1ON = 1;
 14651  004738  80CD               	bsf	4045,0,c	;volatile
 14652                           
 14653                           ;sort.c: 378: was_low_1 = 0;
 14654  00473A  0E00               	movlw	0
 14655  00473C  6E7A               	movwf	_was_low_1+1,c	;volatile
 14656  00473E  0E00               	movlw	0
 14657  004740  6E79               	movwf	_was_low_1,c	;volatile
 14658                           
 14659                           ;sort.c: 379: _delay((unsigned long)((5)*(32000000/4000.0)));
 14660  004742  0E34               	movlw	52
 14661  004744  0100               	movlb	0	; () banked
 14662  004746  6F88               	movwf	??_initServos& (0+255),b
 14663  004748  0EF1               	movlw	241
 14664  00474A                     u9507:
 14665  00474A  2EE8               	decfsz	wreg,f,c
 14666  00474C  D7FE               	bra	u9507
 14667  00474E  2F88               	decfsz	??_initServos& (0+255),f,b
 14668  004750  D7FC               	bra	u9507
 14669  004752  D000               	nop2	
 14670                           
 14671                           ;sort.c: 380: TMR3ON = 1;
 14672  004754  80B1               	bsf	4017,0,c	;volatile
 14673                           
 14674                           ;sort.c: 381: was_low_3 = 0;
 14675  004756  0E00               	movlw	0
 14676  004758  6E7C               	movwf	_was_low_3+1,c	;volatile
 14677  00475A  0E00               	movlw	0
 14678  00475C  6E7B               	movwf	_was_low_3,c	;volatile
 14679                           
 14680                           ;sort.c: 383: LATCbits.LATC0 = 1;
 14681  00475E  808B               	bsf	3979,0,c	;volatile
 14682  004760  0012               	return		;funcret
 14683  004762                     __end_of_initServos:
 14684                           	opt stack 0
 14685                           tblptru	equ	0xFF8
 14686                           tblptrh	equ	0xFF7
 14687                           tblptrl	equ	0xFF6
 14688                           tablat	equ	0xFF5
 14689                           prodh	equ	0xFF4
 14690                           prodl	equ	0xFF3
 14691                           intcon	equ	0xFF2
 14692                           intcon2	equ	0xFF1
 14693                           intcon3	equ	0xFF0
 14694                           postinc0	equ	0xFEE
 14695                           wreg	equ	0xFE8
 14696                           postdec1	equ	0xFE5
 14697                           fsr1l	equ	0xFE1
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705 ;; *************** function _updateServoPosition *****************
 14706 ;; Defined at:
 14707 ;;		line 442 in file "sort.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;  time_us         2    0[BANK0 ] int 
 14710 ;;  timer           2    2[BANK0 ] int 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  my_time         2    6[BANK0 ] unsigned int 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  1    wreg      void 
 14715 ;; Registers used:
 14716 ;;		wreg, status,2, status,0
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14722 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;Total ram usage:        8 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    7
 14729 ;; This function calls:
 14730 ;;		Nothing
 14731 ;; This function is called by:
 14732 ;;		_Distribution
 14733 ;;		_initServos
 14734 ;;		_actuatorTest
 14735 ;;		_BothServos
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           	psect	text49
 14740  0043CC                     __ptext49:
 14741                           	opt stack 0
 14742  0043CC                     _updateServoPosition:
 14743                           	opt stack 20
 14744                           
 14745                           ;sort.c: 443: unsigned int my_time = 65535 - time_us;
 14746                           
 14747                           ;incstack = 0
 14748  0043CC  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14749  0043D0  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14750  0043D4  0100               	movlb	0	; () banked
 14751  0043D6  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14752  0043D8  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14753  0043DA  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14754  0043DC  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14755  0043DE  0EFF               	movlw	255
 14756  0043E0  0100               	movlb	0	; () banked
 14757  0043E2  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14758  0043E4  0100               	movlb	0	; () banked
 14759  0043E6  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14760  0043E8  0EFF               	movlw	255
 14761  0043EA  0100               	movlb	0	; () banked
 14762  0043EC  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14763  0043EE  0100               	movlb	0	; () banked
 14764  0043F0  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14765                           
 14766                           ;sort.c: 444: switch(timer){
 14767  0043F2  D015               	goto	l6011
 14768  0043F4                     l6009:
 14769                           
 14770                           ; BSR set to: 0
 14771                           ;sort.c: 446: servoTimes[0] = my_time >> 8;
 14772  0043F4  0100               	movlb	0	; () banked
 14773  0043F6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14774  0043F8  0101               	movlb	1	; () banked
 14775  0043FA  6F1C               	movwf	_servoTimes& (0+255),b
 14776  0043FC  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14777                           
 14778                           ;sort.c: 447: servoTimes[1] = my_time & 0xFF;
 14779  0043FE  0100               	movlb	0	; () banked
 14780  004400  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14781  004402  0101               	movlb	1	; () banked
 14782  004404  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14783  004406  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14784  004408                     l839:
 14785                           
 14786                           ;sort.c: 449: servoTimes[2] = my_time >> 8;
 14787  004408  0100               	movlb	0	; () banked
 14788  00440A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14789  00440C  0101               	movlb	1	; () banked
 14790  00440E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14791  004410  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14792                           
 14793                           ;sort.c: 450: servoTimes[3] = my_time & 0xFF;
 14794  004412  0100               	movlb	0	; () banked
 14795  004414  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14796  004416  0101               	movlb	1	; () banked
 14797  004418  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14798  00441A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14799                           
 14800                           ;sort.c: 451: }
 14801  00441C  0012               	return	
 14802  00441E                     l6011:
 14803  00441E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14804  004422  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14805                           
 14806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14807                           ; Switch size 1, requested type "space"
 14808                           ; Number of cases is 1, Range of values is 0 to 0
 14809                           ; switch strategies available:
 14810                           ; Name         Instructions Cycles
 14811                           ; simple_byte            4     3 (average)
 14812                           ;	Chosen strategy is simple_byte
 14813  004426  0100               	movlb	0	; () banked
 14814  004428  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14815  00442A  0A00               	xorlw	0	; case 0
 14816  00442C  A4D8               	btfss	status,2,c
 14817  00442E  0012               	return	
 14818                           
 14819                           ; BSR set to: 0
 14820                           ; Switch size 1, requested type "space"
 14821                           ; Number of cases is 2, Range of values is 1 to 3
 14822                           ; switch strategies available:
 14823                           ; Name         Instructions Cycles
 14824                           ; simple_byte            7     4 (average)
 14825                           ;	Chosen strategy is simple_byte
 14826  004430  0100               	movlb	0	; () banked
 14827  004432  5184               	movf	??_updateServoPosition& (0+255),w,b
 14828  004434  0A01               	xorlw	1	; case 1
 14829  004436  B4D8               	btfsc	status,2,c
 14830  004438  D7DD               	goto	l6009
 14831  00443A  0A02               	xorlw	2	; case 3
 14832  00443C  A4D8               	btfss	status,2,c
 14833  00443E  0012               	return	
 14834  004440  D7E3               	goto	l839
 14835  004442                     __end_of_updateServoPosition:
 14836                           	opt stack 0
 14837                           tblptru	equ	0xFF8
 14838                           tblptrh	equ	0xFF7
 14839                           tblptrl	equ	0xFF6
 14840                           tablat	equ	0xFF5
 14841                           prodh	equ	0xFF4
 14842                           prodl	equ	0xFF3
 14843                           intcon	equ	0xFF2
 14844                           intcon2	equ	0xFF1
 14845                           intcon3	equ	0xFF0
 14846                           postinc0	equ	0xFEE
 14847                           wreg	equ	0xFE8
 14848                           postdec1	equ	0xFE5
 14849                           fsr1l	equ	0xFE1
 14850                           indf2	equ	0xFDF
 14851                           postinc2	equ	0xFDE
 14852                           postdec2	equ	0xFDD
 14853                           fsr2h	equ	0xFDA
 14854                           fsr2l	equ	0xFD9
 14855                           status	equ	0xFD8
 14856                           
 14857 ;; *************** function _BlockerTest *****************
 14858 ;; Defined at:
 14859 ;;		line 589 in file "Test.c"
 14860 ;; Parameters:    Size  Location     Type
 14861 ;;		None
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;  i               2   44[BANK0 ] int 
 14864 ;;  cond_flag       2   48[BANK0 ] int 
 14865 ;;  cam_flag        2   46[BANK0 ] int 
 14866 ;; Return value:  Size  Location     Type
 14867 ;;                  1    wreg      void 
 14868 ;; Registers used:
 14869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14876 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14878 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;Total ram usage:        7 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:   10
 14882 ;; This function calls:
 14883 ;;		_lcdInst
 14884 ;;		_printf
 14885 ;; This function is called by:
 14886 ;;		_Test
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           	psect	text50
 14891  0034FE                     __ptext50:
 14892                           	opt stack 0
 14893  0034FE                     _BlockerTest:
 14894                           	opt stack 19
 14895                           
 14896                           ;Test.c: 590: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14897                           
 14898                           ;incstack = 0
 14899  0034FE  0E01               	movlw	1
 14900  003500  EC8A  F027         	call	_lcdInst
 14901  003504  0E68               	movlw	104
 14902  003506  0100               	movlb	0	; () banked
 14903  003508  6FAB               	movwf	??_BlockerTest& (0+255),b
 14904  00350A  0EE4               	movlw	228
 14905  00350C                     u9517:
 14906  00350C  2EE8               	decfsz	wreg,f,c
 14907  00350E  D7FE               	bra	u9517
 14908  003510  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14909  003512  D7FC               	bra	u9517
 14910  003514  F000               	nop	
 14911  003516  0E80               	movlw	128
 14912  003518  EC8A  F027         	call	_lcdInst
 14913                           
 14914                           ;Test.c: 591: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14915  00351C  0E7F               	movlw	low STR_122
 14916  00351E  0100               	movlb	0	; () banked
 14917  003520  6F8E               	movwf	printf@f& (0+255),b
 14918  003522  0EFB               	movlw	high STR_122
 14919  003524  0100               	movlb	0	; () banked
 14920  003526  6F8F               	movwf	(printf@f+1)& (0+255),b
 14921  003528  A480               	btfss	3968,2,c	;volatile
 14922  00352A  D004               	goto	u6730
 14923  00352C  0100               	movlb	0	; () banked
 14924  00352E  6BAB               	clrf	??_BlockerTest& (0+255),b
 14925  003530  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14926  003532  D002               	goto	u6738
 14927  003534                     u6730:
 14928  003534  0100               	movlb	0	; () banked
 14929  003536  6BAB               	clrf	??_BlockerTest& (0+255),b
 14930  003538                     u6738:
 14931  003538  0100               	movlb	0	; () banked
 14932  00353A  51AB               	movf	??_BlockerTest& (0+255),w,b
 14933  00353C  0100               	movlb	0	; () banked
 14934  00353E  6F90               	movwf	(?_printf+2)& (0+255),b
 14935  003540  6B91               	clrf	(?_printf+3)& (0+255),b
 14936  003542  ECB8  F008         	call	_printf	;wreg free
 14937                           
 14938                           ;Test.c: 592: lcdInst(0b11000000);;
 14939  003546  0EC0               	movlw	192
 14940  003548  EC8A  F027         	call	_lcdInst
 14941                           
 14942                           ;Test.c: 593: printf("OTHER: CAM TOGGLE");
 14943  00354C  0E6D               	movlw	low STR_123
 14944  00354E  0100               	movlb	0	; () banked
 14945  003550  6F8E               	movwf	printf@f& (0+255),b
 14946  003552  0EFB               	movlw	high STR_123
 14947  003554  0100               	movlb	0	; () banked
 14948  003556  6F8F               	movwf	(printf@f+1)& (0+255),b
 14949  003558  ECB8  F008         	call	_printf	;wreg free
 14950                           
 14951                           ;Test.c: 594: int cam_flag = 1;
 14952  00355C  0E00               	movlw	0
 14953  00355E  0100               	movlb	0	; () banked
 14954  003560  6FAF               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 14955  003562  0E01               	movlw	1
 14956  003564  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 14957                           
 14958                           ; BSR set to: 0
 14959                           ;Test.c: 595: int cond_flag = 0;
 14960  003566  0E00               	movlw	0
 14961  003568  0100               	movlb	0	; () banked
 14962  00356A  6FB1               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 14963  00356C  0E00               	movlw	0
 14964  00356E  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;Test.c: 597: while(PORTBbits.RB1 == 0){
 14968                           
 14969                           ;Test.c: 596: while(1){
 14970  003570  D018               	goto	l7919
 14971  003572                     l7915:
 14972                           
 14973                           ;Test.c: 598: lcdInst(0b10000000);;
 14974  003572  0E80               	movlw	128
 14975  003574  EC8A  F027         	call	_lcdInst
 14976                           
 14977                           ;Test.c: 599: printf("D: RET|2: COND %d", PORTAbits.RA2);
 14978  003578  0E7F               	movlw	low STR_122
 14979  00357A  0100               	movlb	0	; () banked
 14980  00357C  6F8E               	movwf	printf@f& (0+255),b
 14981  00357E  0EFB               	movlw	high STR_122
 14982  003580  0100               	movlb	0	; () banked
 14983  003582  6F8F               	movwf	(printf@f+1)& (0+255),b
 14984  003584  A480               	btfss	3968,2,c	;volatile
 14985  003586  D004               	goto	u6740
 14986  003588  0100               	movlb	0	; () banked
 14987  00358A  6BAB               	clrf	??_BlockerTest& (0+255),b
 14988  00358C  2BAB               	incf	??_BlockerTest& (0+255),f,b
 14989  00358E  D002               	goto	u6748
 14990  003590                     u6740:
 14991  003590  0100               	movlb	0	; () banked
 14992  003592  6BAB               	clrf	??_BlockerTest& (0+255),b
 14993  003594                     u6748:
 14994  003594  0100               	movlb	0	; () banked
 14995  003596  51AB               	movf	??_BlockerTest& (0+255),w,b
 14996  003598  0100               	movlb	0	; () banked
 14997  00359A  6F90               	movwf	(?_printf+2)& (0+255),b
 14998  00359C  6B91               	clrf	(?_printf+3)& (0+255),b
 14999  00359E  ECB8  F008         	call	_printf	;wreg free
 15000  0035A2                     l7919:
 15001  0035A2  A281               	btfss	3969,1,c	;volatile
 15002  0035A4  D7E6               	goto	l7915
 15003                           
 15004                           ;Test.c: 600: }
 15005                           ;Test.c: 601: if(PORTB >> 4 == 0b1111){
 15006  0035A6  3881               	swapf	3969,w,c	;volatile
 15007  0035A8  0B0F               	andlw	15
 15008  0035AA  0A0F               	xorlw	15
 15009  0035AC  B4D8               	btfsc	status,2,c
 15010  0035AE  0012               	return	
 15011                           
 15012                           ;Test.c: 604: else if(PORTB >> 4 == 0b0001){
 15013                           
 15014                           ;Test.c: 603: }
 15015                           
 15016                           ;Test.c: 602: break;
 15017  0035B0  3881               	swapf	3969,w,c	;volatile
 15018  0035B2  0B0F               	andlw	15
 15019  0035B4  06E8               	decf	wreg,f,c
 15020  0035B6  A4D8               	btfss	status,2,c
 15021  0035B8  D016               	goto	l7937
 15022                           
 15023                           ;Test.c: 605: if(cond_flag){
 15024  0035BA  0100               	movlb	0	; () banked
 15025  0035BC  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15026  0035BE  0100               	movlb	0	; () banked
 15027  0035C0  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15028  0035C2  B4D8               	btfsc	status,2,c
 15029  0035C4  D007               	goto	l1312
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;Test.c: 606: LATAbits.LATA3 = 1;
 15033  0035C6  8689               	bsf	3977,3,c	;volatile
 15034  0035C8  D006               	goto	l7935
 15035  0035CA                     u6791:
 15036  0035CA  0E01               	movlw	1
 15037  0035CC                     u6800:
 15038  0035CC  0100               	movlb	0	; () banked
 15039  0035CE  6FB0               	movwf	BlockerTest@cond_flag& (0+255),b
 15040  0035D0  6BB1               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 15041                           
 15042                           ;Test.c: 608: }
 15043  0035D2  D054               	goto	l7961
 15044  0035D4                     l1312:
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;Test.c: 609: else{
 15048                           ;Test.c: 610: LATAbits.LATA3 = 0;
 15049  0035D4  9689               	bcf	3977,3,c	;volatile
 15050  0035D6                     l7935:
 15051                           
 15052                           ; BSR set to: 0
 15053                           ;Test.c: 611: cond_flag = !cond_flag;
 15054  0035D6  0100               	movlb	0	; () banked
 15055  0035D8  51B0               	movf	BlockerTest@cond_flag& (0+255),w,b
 15056  0035DA  0100               	movlb	0	; () banked
 15057  0035DC  11B1               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 15058  0035DE  B4D8               	btfsc	status,2,c
 15059  0035E0  D7F4               	goto	u6791
 15060  0035E2  0E00               	movlw	0
 15061  0035E4  D7F3               	goto	u6800
 15062  0035E6                     l7937:
 15063                           
 15064                           ;Test.c: 614: else{
 15065                           ;Test.c: 615: if(cam_flag){
 15066  0035E6  0100               	movlb	0	; () banked
 15067  0035E8  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15068  0035EA  0100               	movlb	0	; () banked
 15069  0035EC  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15070  0035EE  B4D8               	btfsc	status,2,c
 15071  0035F0  D007               	goto	l7943
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;Test.c: 616: LATCbits.LATC0 = 1;
 15075  0035F2  808B               	bsf	3979,0,c	;volatile
 15076  0035F4  D023               	goto	l7955
 15077  0035F6                     u6841:
 15078  0035F6  0E01               	movlw	1
 15079  0035F8                     u6850:
 15080  0035F8  0100               	movlb	0	; () banked
 15081  0035FA  6FAE               	movwf	BlockerTest@cam_flag& (0+255),b
 15082  0035FC  6BAF               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 15083                           
 15084                           ;Test.c: 618: }
 15085  0035FE  D03E               	goto	l7961
 15086  003600                     l7943:
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;Test.c: 619: else{
 15090                           ;Test.c: 620: for(int i=0;i<5000;i++)
 15091  003600  0E00               	movlw	0
 15092  003602  0100               	movlb	0	; () banked
 15093  003604  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 15094  003606  0E00               	movlw	0
 15095  003608  6FAC               	movwf	BlockerTest@i& (0+255),b
 15096  00360A                     l7945:
 15097                           
 15098                           ; BSR set to: 0
 15099  00360A  0100               	movlb	0	; () banked
 15100  00360C  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 15101  00360E  D008               	goto	l1317
 15102  003610  0E88               	movlw	136
 15103  003612  0100               	movlb	0	; () banked
 15104  003614  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 15105  003616  0E13               	movlw	19
 15106  003618  0100               	movlb	0	; () banked
 15107  00361A  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 15108  00361C  B0D8               	btfsc	status,0,c
 15109  00361E  D00D               	goto	l1318
 15110  003620                     l1317:
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;Test.c: 621: {
 15114                           ;Test.c: 622: LATCbits.LATC0 = 1;
 15115  003620  808B               	bsf	3979,0,c	;volatile
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;Test.c: 623: _delay((unsigned long)((10)*(32000000/4000000.0)));
 15119  003622  0E1A               	movlw	26
 15120  003624                     u9527:
 15121  003624  2EE8               	decfsz	wreg,f,c
 15122  003626  D7FE               	bra	u9527
 15123  003628  D000               	nop2	
 15124                           
 15125                           ;Test.c: 624: LATCbits.LATC0 = 0;
 15126  00362A  908B               	bcf	3979,0,c	;volatile
 15127                           
 15128                           ;Test.c: 625: _delay((unsigned long)((90)*(32000000/4000000.0)));
 15129  00362C  0EF0               	movlw	240
 15130  00362E                     u9537:
 15131  00362E  2EE8               	decfsz	wreg,f,c
 15132  003630  D7FE               	bra	u9537
 15133  003632  0100               	movlb	0	; () banked
 15134  003634  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 15135  003636  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 15136  003638  D7E8               	goto	l7945
 15137  00363A                     l1318:
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;Test.c: 626: }
 15141                           ;Test.c: 627: LATCbits.LATC0 = 0;
 15142  00363A  908B               	bcf	3979,0,c	;volatile
 15143  00363C                     l7955:
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;Test.c: 628: cam_flag = !cam_flag;
 15147  00363C  0100               	movlb	0	; () banked
 15148  00363E  51AE               	movf	BlockerTest@cam_flag& (0+255),w,b
 15149  003640  0100               	movlb	0	; () banked
 15150  003642  11AF               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 15151  003644  B4D8               	btfsc	status,2,c
 15152  003646  D7D7               	goto	u6841
 15153  003648  0E00               	movlw	0
 15154  00364A  D7D6               	goto	u6850
 15155  00364C                     l7957:
 15156                           
 15157                           ;Test.c: 633: lcdInst(0b10000000);;
 15158  00364C  0E80               	movlw	128
 15159  00364E  EC8A  F027         	call	_lcdInst
 15160                           
 15161                           ;Test.c: 634: printf("D: RET|2: COND %d", PORTAbits.RA2);
 15162  003652  0E7F               	movlw	low STR_122
 15163  003654  0100               	movlb	0	; () banked
 15164  003656  6F8E               	movwf	printf@f& (0+255),b
 15165  003658  0EFB               	movlw	high STR_122
 15166  00365A  0100               	movlb	0	; () banked
 15167  00365C  6F8F               	movwf	(printf@f+1)& (0+255),b
 15168  00365E  A480               	btfss	3968,2,c	;volatile
 15169  003660  D004               	goto	u6900
 15170  003662  0100               	movlb	0	; () banked
 15171  003664  6BAB               	clrf	??_BlockerTest& (0+255),b
 15172  003666  2BAB               	incf	??_BlockerTest& (0+255),f,b
 15173  003668  D002               	goto	u6908
 15174  00366A                     u6900:
 15175  00366A  0100               	movlb	0	; () banked
 15176  00366C  6BAB               	clrf	??_BlockerTest& (0+255),b
 15177  00366E                     u6908:
 15178  00366E  0100               	movlb	0	; () banked
 15179  003670  51AB               	movf	??_BlockerTest& (0+255),w,b
 15180  003672  0100               	movlb	0	; () banked
 15181  003674  6F90               	movwf	(?_printf+2)& (0+255),b
 15182  003676  6B91               	clrf	(?_printf+3)& (0+255),b
 15183  003678  ECB8  F008         	call	_printf	;wreg free
 15184  00367C                     l7961:
 15185  00367C  A281               	btfss	3969,1,c	;volatile
 15186  00367E  D791               	goto	l7919
 15187  003680  D7E5               	goto	l7957
 15188  003682                     __end_of_BlockerTest:
 15189                           	opt stack 0
 15190                           tblptru	equ	0xFF8
 15191                           tblptrh	equ	0xFF7
 15192                           tblptrl	equ	0xFF6
 15193                           tablat	equ	0xFF5
 15194                           prodh	equ	0xFF4
 15195                           prodl	equ	0xFF3
 15196                           intcon	equ	0xFF2
 15197                           intcon2	equ	0xFF1
 15198                           intcon3	equ	0xFF0
 15199                           postinc0	equ	0xFEE
 15200                           wreg	equ	0xFE8
 15201                           postdec1	equ	0xFE5
 15202                           fsr1l	equ	0xFE1
 15203                           indf2	equ	0xFDF
 15204                           postinc2	equ	0xFDE
 15205                           postdec2	equ	0xFDD
 15206                           fsr2h	equ	0xFDA
 15207                           fsr2l	equ	0xFD9
 15208                           status	equ	0xFD8
 15209                           
 15210 ;; *************** function _printf *****************
 15211 ;; Defined at:
 15212 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15213 ;; Parameters:    Size  Location     Type
 15214 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 15215 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 15216 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 15217 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 15218 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 15219 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 15220 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 15221 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 15222 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 15223 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 15224 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 15225 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 15226 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 15227 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 15228 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 15229 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 15230 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 15231 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 15232 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 15233 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 15234 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 15235 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 15236 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 15237 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 15238 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 15239 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  tmpval          4    0        struct .
 15242 ;;  width           2   41[BANK0 ] int 
 15243 ;;  val             2   37[BANK0 ] unsigned int 
 15244 ;;  len             2   35[BANK0 ] unsigned int 
 15245 ;;  ap              2   33[BANK0 ] PTR void [1]
 15246 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15247 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 15248 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 15249 ;;  c               1   40[BANK0 ] char 
 15250 ;;  flag            1   39[BANK0 ] unsigned char 
 15251 ;;  prec            1   30[BANK0 ] char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  2   14[BANK0 ] int 
 15254 ;; Registers used:
 15255 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15261 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;Total ram usage:       29 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; Hardware stack levels required when called:    9
 15268 ;; This function calls:
 15269 ;;		___lwdiv
 15270 ;;		___lwmod
 15271 ;;		___wmul
 15272 ;;		_isdigit
 15273 ;;		_putch
 15274 ;; This function is called by:
 15275 ;;		_UI
 15276 ;;		_change_state_to_menu_start
 15277 ;;		_change_state_to_menu_12
 15278 ;;		_change_state_to_menu_22
 15279 ;;		_printRTC
 15280 ;;		_EEPROM_write
 15281 ;;		_Test
 15282 ;;		_algorithmTest
 15283 ;;		_sensorTest
 15284 ;;		_actuatorTest
 15285 ;;		_BothServos
 15286 ;;		_PortTestA5
 15287 ;;		_PusherTest
 15288 ;;		_SpeedTest
 15289 ;;		_BlockerTest
 15290 ;;		_ToggleTestA5
 15291 ;; This function uses a non-reentrant model
 15292 ;;
 15293                           
 15294                           	psect	text51
 15295  001170                     __ptext51:
 15296                           	opt stack 0
 15297  001170                     _printf:
 15298                           	opt stack 18
 15299                           
 15300                           ;doprnt.c: 466: va_list ap;
 15301                           ;doprnt.c: 499: signed char c;
 15302                           ;doprnt.c: 501: int width;
 15303                           ;doprnt.c: 506: signed char prec;
 15304                           ;doprnt.c: 508: unsigned char flag;
 15305                           ;doprnt.c: 523: union {
 15306                           ;doprnt.c: 524: unsigned long vd;
 15307                           ;doprnt.c: 525: double integ;
 15308                           ;doprnt.c: 526: } tmpval;
 15309                           ;doprnt.c: 528: unsigned int val;
 15310                           ;doprnt.c: 529: unsigned len;
 15311                           ;doprnt.c: 530: const char * cp;
 15312                           ;doprnt.c: 533: *ap = __va_start();
 15313                           
 15314                           ;incstack = 0
 15315  001170  0E90               	movlw	low (?_printf+2)
 15316  001172  0100               	movlb	0	; () banked
 15317  001174  6FA1               	movwf	printf@ap& (0+255),b
 15318  001176  0E00               	movlw	high (?_printf+2)
 15319  001178  0100               	movlb	0	; () banked
 15320  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 15321                           
 15322                           ;doprnt.c: 536: while(c = *f++) {
 15323  00117C  D205               	goto	l5969
 15324  00117E                     l5839:
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;doprnt.c: 538: if(c != '%')
 15328  00117E  0E25               	movlw	37
 15329  001180  0100               	movlb	0	; () banked
 15330  001182  19A8               	xorwf	printf@c& (0+255),w,b
 15331  001184  B4D8               	btfsc	status,2,c
 15332  001186  D005               	goto	l5843
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;doprnt.c: 540: {
 15336                           ;doprnt.c: 541: (putch(c) );
 15337  001188  0100               	movlb	0	; () banked
 15338  00118A  51A8               	movf	printf@c& (0+255),w,b
 15339  00118C  EC82  F027         	call	_putch
 15340                           
 15341                           ;doprnt.c: 542: continue;
 15342  001190  D1FB               	goto	l5969
 15343  001192                     l5843:
 15344                           
 15345                           ;doprnt.c: 543: }
 15346                           ;doprnt.c: 546: width = 0;
 15347  001192  0E00               	movlw	0
 15348  001194  0100               	movlb	0	; () banked
 15349  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 15350  001198  0E00               	movlw	0
 15351  00119A  6FA9               	movwf	printf@width& (0+255),b
 15352                           
 15353                           ;doprnt.c: 548: flag = 0;
 15354  00119C  0E00               	movlw	0
 15355  00119E  0100               	movlb	0	; () banked
 15356  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;doprnt.c: 551: switch(*f) {
 15360                           
 15361                           ;doprnt.c: 550: for(;;) {
 15362  0011A2  D005               	goto	l5849
 15363  0011A4                     l5845:
 15364                           
 15365                           ;doprnt.c: 580: flag |= 0x04;
 15366  0011A4  0100               	movlb	0	; () banked
 15367  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 15368                           
 15369                           ;doprnt.c: 581: f++;
 15370  0011A8  0100               	movlb	0	; () banked
 15371  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 15372  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15373  0011AE                     l5849:
 15374  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 15375  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 15376  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15377  0011B6  6AF8               	clrf	tblptru,c
 15378  0011B8                     	endif
 15379  0011B8                     	if	0	;tblptru may be non-zero
 15380  0011B8                     	endif
 15381  0011B8  0008               	tblrd		*
 15382  0011BA  50F5               	movf	tablat,w,c
 15383                           
 15384                           ; Switch size 1, requested type "space"
 15385                           ; Number of cases is 1, Range of values is 48 to 48
 15386                           ; switch strategies available:
 15387                           ; Name         Instructions Cycles
 15388                           ; simple_byte            4     3 (average)
 15389                           ;	Chosen strategy is simple_byte
 15390  0011BC  0A30               	xorlw	48	; case 48
 15391  0011BE  B4D8               	btfsc	status,2,c
 15392  0011C0  D7F1               	goto	l5845
 15393                           
 15394                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15395                           
 15396                           ;doprnt.c: 586: }
 15397                           
 15398                           ;doprnt.c: 585: break;
 15399  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 15400  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 15401  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15402  0011CA  6AF8               	clrf	tblptru,c
 15403  0011CC                     	endif
 15404  0011CC                     	if	0	;tblptru may be non-zero
 15405  0011CC                     	endif
 15406  0011CC  0008               	tblrd		*
 15407  0011CE  50F5               	movf	tablat,w,c
 15408  0011D0  ECA5  F026         	call	_isdigit
 15409  0011D4  A0D8               	btfss	status,0,c
 15410  0011D6  D0D2               	goto	l5897
 15411                           
 15412                           ;doprnt.c: 598: width = 0;
 15413  0011D8  0E00               	movlw	0
 15414  0011DA  0100               	movlb	0	; () banked
 15415  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 15416  0011DE  0E00               	movlw	0
 15417  0011E0  6FA9               	movwf	printf@width& (0+255),b
 15418  0011E2                     l5855:
 15419                           
 15420                           ;doprnt.c: 600: width *= 10;
 15421  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 15422  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 15423  0011EA  0E00               	movlw	0
 15424  0011EC  0100               	movlb	0	; () banked
 15425  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15426  0011F0  0E0A               	movlw	10
 15427  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 15428  0011F4  EC0F  F025         	call	___wmul	;wreg free
 15429  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 15430  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 15431                           
 15432                           ;doprnt.c: 601: width += *f++ - '0';
 15433  001200  0ED0               	movlw	208
 15434  001202  0100               	movlb	0	; () banked
 15435  001204  6F9A               	movwf	??_printf& (0+255),b
 15436  001206  0EFF               	movlw	255
 15437  001208  0100               	movlb	0	; () banked
 15438  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 15439  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 15440  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 15441  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15442  001214  6AF8               	clrf	tblptru,c
 15443  001216                     	endif
 15444  001216                     	if	0	;tblptru may be non-zero
 15445  001216                     	endif
 15446  001216  0008               	tblrd		*
 15447  001218  50F5               	movf	tablat,w,c
 15448  00121A  0100               	movlb	0	; () banked
 15449  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 15450  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 15451  001220  0100               	movlb	0	; () banked
 15452  001222  519A               	movf	??_printf& (0+255),w,b
 15453  001224  0100               	movlb	0	; () banked
 15454  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 15455  001228  0100               	movlb	0	; () banked
 15456  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 15457  00122C  0100               	movlb	0	; () banked
 15458  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 15459  001230  0100               	movlb	0	; () banked
 15460  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 15461  001234  0100               	movlb	0	; () banked
 15462  001236  27A9               	addwf	printf@width& (0+255),f,b
 15463  001238  0100               	movlb	0	; () banked
 15464  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 15465  00123C  0100               	movlb	0	; () banked
 15466  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 15467                           
 15468                           ; BSR set to: 0
 15469  001240  0100               	movlb	0	; () banked
 15470  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 15471  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15475  001246  C08E  FFF6         	movff	printf@f,tblptrl
 15476  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 15477  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15478  00124E  6AF8               	clrf	tblptru,c
 15479  001250                     	endif
 15480  001250                     	if	0	;tblptru may be non-zero
 15481  001250                     	endif
 15482  001250  0008               	tblrd		*
 15483  001252  50F5               	movf	tablat,w,c
 15484  001254  ECA5  F026         	call	_isdigit
 15485  001258  A0D8               	btfss	status,0,c
 15486  00125A  D090               	goto	l5897
 15487  00125C  D7C2               	goto	l5855
 15488  00125E                     l5863:
 15489                           
 15490                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15491  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 15492  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15493  001266  CFDE F09F          	movff	postinc2,printf@cp
 15494  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 15495  00126E  0E02               	movlw	2
 15496  001270  0100               	movlb	0	; () banked
 15497  001272  27A1               	addwf	printf@ap& (0+255),f,b
 15498  001274  0E00               	movlw	0
 15499  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15500                           
 15501                           ; BSR set to: 0
 15502                           ;doprnt.c: 740: if(!cp)
 15503  001278  0100               	movlb	0	; () banked
 15504  00127A  519F               	movf	printf@cp& (0+255),w,b
 15505  00127C  0100               	movlb	0	; () banked
 15506  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 15507  001280  A4D8               	btfss	status,2,c
 15508  001282  D006               	goto	l5871
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;doprnt.c: 741: cp = "(null)";
 15512  001284  0EB6               	movlw	low STR_126
 15513  001286  0100               	movlb	0	; () banked
 15514  001288  6F9F               	movwf	printf@cp& (0+255),b
 15515  00128A  0EFF               	movlw	high STR_126
 15516  00128C  0100               	movlb	0	; () banked
 15517  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 15518  001290                     l5871:
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;doprnt.c: 745: len = 0;
 15522  001290  0E00               	movlw	0
 15523  001292  0100               	movlb	0	; () banked
 15524  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 15525  001296  0E00               	movlw	0
 15526  001298  6FA3               	movwf	printf@len& (0+255),b
 15527                           
 15528                           ;doprnt.c: 746: while(cp[len])
 15529  00129A  D003               	goto	l5875
 15530  00129C                     l5873:
 15531                           
 15532                           ;doprnt.c: 747: len++;
 15533  00129C  0100               	movlb	0	; () banked
 15534  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 15535  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 15536  0012A2                     l5875:
 15537                           
 15538                           ; BSR set to: 0
 15539  0012A2  0100               	movlb	0	; () banked
 15540  0012A4  51A3               	movf	printf@len& (0+255),w,b
 15541  0012A6  0100               	movlb	0	; () banked
 15542  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 15543  0012AA  0100               	movlb	0	; () banked
 15544  0012AC  6F9A               	movwf	??_printf& (0+255),b
 15545  0012AE  0100               	movlb	0	; () banked
 15546  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 15547  0012B2  0100               	movlb	0	; () banked
 15548  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 15549  0012B6  0100               	movlb	0	; () banked
 15550  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 15551  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 15552  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 15553  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 15554  0012C4  6EF8               	movwf	tblptru,c
 15555  0012C6  0E0F               	movlw	(high __ramtop+-1)
 15556  0012C8  64F7               	cpfsgt	tblptrh,c
 15557  0012CA  D003               	bra	u4407
 15558  0012CC  0008               	tblrd		*
 15559  0012CE  50F5               	movf	tablat,w,c
 15560  0012D0  D005               	bra	u4400
 15561  0012D2                     u4407:
 15562  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 15563  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 15564  0012DA  50EF               	movf	indf0,w,c
 15565  0012DC                     u4400:
 15566  0012DC  0900               	iorlw	0
 15567  0012DE  A4D8               	btfss	status,2,c
 15568  0012E0  D7DD               	goto	l5873
 15569                           
 15570                           ;doprnt.c: 757: if(width > len)
 15571  0012E2  0100               	movlb	0	; () banked
 15572  0012E4  51A9               	movf	printf@width& (0+255),w,b
 15573  0012E6  0100               	movlb	0	; () banked
 15574  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 15575  0012EA  0100               	movlb	0	; () banked
 15576  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 15577  0012EE  0100               	movlb	0	; () banked
 15578  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 15579  0012F2  B0D8               	btfsc	status,0,c
 15580  0012F4  D009               	goto	l5881
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;doprnt.c: 758: width -= len;
 15584  0012F6  0100               	movlb	0	; () banked
 15585  0012F8  51A3               	movf	printf@len& (0+255),w,b
 15586  0012FA  0100               	movlb	0	; () banked
 15587  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 15588  0012FE  0100               	movlb	0	; () banked
 15589  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 15590  001302  0100               	movlb	0	; () banked
 15591  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15592  001306  D009               	goto	l5885
 15593  001308                     l5881:
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;doprnt.c: 759: else
 15597                           ;doprnt.c: 760: width = 0;
 15598  001308  0E00               	movlw	0
 15599  00130A  0100               	movlb	0	; () banked
 15600  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 15601  00130E  0E00               	movlw	0
 15602  001310  6FA9               	movwf	printf@width& (0+255),b
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;doprnt.c: 764: while(width--)
 15606  001312  D003               	goto	l5885
 15607  001314                     l5883:
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;doprnt.c: 765: (putch(' ') );
 15611  001314  0E20               	movlw	32
 15612  001316  EC82  F027         	call	_putch
 15613  00131A                     l5885:
 15614  00131A  0100               	movlb	0	; () banked
 15615  00131C  07A9               	decf	printf@width& (0+255),f,b
 15616  00131E  A0D8               	btfss	status,0,c
 15617  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 15618  001322  0100               	movlb	0	; () banked
 15619  001324  29A9               	incf	printf@width& (0+255),w,b
 15620  001326  E1F6               	bnz	l5883
 15621  001328  0100               	movlb	0	; () banked
 15622  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 15623  00132C  B4D8               	btfsc	status,2,c
 15624  00132E  D017               	goto	l5891
 15625  001330  D7F1               	goto	l5883
 15626  001332                     l5887:
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;doprnt.c: 768: (putch(*cp++) );
 15630  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 15631  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 15632  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 15633  00133C  6EF8               	movwf	tblptru,c
 15634  00133E  0E0F               	movlw	(high __ramtop+-1)
 15635  001340  64F7               	cpfsgt	tblptrh,c
 15636  001342  D003               	bra	u4447
 15637  001344  0008               	tblrd		*
 15638  001346  50F5               	movf	tablat,w,c
 15639  001348  D005               	bra	u4440
 15640  00134A                     u4447:
 15641  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 15642  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 15643  001352  50EF               	movf	indf0,w,c
 15644  001354                     u4440:
 15645  001354  EC82  F027         	call	_putch
 15646  001358  0100               	movlb	0	; () banked
 15647  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 15648  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 15649  00135E                     l5891:
 15650                           
 15651                           ; BSR set to: 0
 15652  00135E  0100               	movlb	0	; () banked
 15653  001360  07A3               	decf	printf@len& (0+255),f,b
 15654  001362  A0D8               	btfss	status,0,c
 15655  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 15656  001366  0100               	movlb	0	; () banked
 15657  001368  29A3               	incf	printf@len& (0+255),w,b
 15658  00136A  E1E3               	bnz	l5887
 15659  00136C  0100               	movlb	0	; () banked
 15660  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 15661  001370  B4D8               	btfsc	status,2,c
 15662  001372  D10A               	goto	l5969
 15663  001374  D7DE               	goto	l5887
 15664  001376                     l5893:
 15665                           
 15666                           ; BSR set to: 0
 15667                           ;doprnt.c: 818: flag |= 0x40;
 15668  001376  0100               	movlb	0	; () banked
 15669  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 15670                           
 15671                           ; BSR set to: 0
 15672                           ;doprnt.c: 822: }
 15673                           
 15674                           ;doprnt.c: 819: break;
 15675  00137A  D01D               	goto	l1353
 15676  00137C                     l5897:
 15677  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 15678  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 15679  001384  0100               	movlb	0	; () banked
 15680  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 15681  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15682  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15683  00138A  6AF8               	clrf	tblptru,c
 15684  00138C                     	endif
 15685  00138C                     	if	0	;tblptru may be non-zero
 15686  00138C                     	endif
 15687  00138C  0008               	tblrd		*
 15688  00138E  CFF5 F0A8          	movff	tablat,printf@c
 15689  001392  0100               	movlb	0	; () banked
 15690  001394  51A8               	movf	printf@c& (0+255),w,b
 15691                           
 15692                           ; Switch size 1, requested type "space"
 15693                           ; Number of cases is 5, Range of values is 0 to 117
 15694                           ; switch strategies available:
 15695                           ; Name         Instructions Cycles
 15696                           ; simple_byte           16     9 (average)
 15697                           ;	Chosen strategy is simple_byte
 15698  001396  0A00               	xorlw	0	; case 0
 15699  001398  B4D8               	btfsc	status,2,c
 15700  00139A  0012               	return	
 15701  00139C  0A64               	xorlw	100	; case 100
 15702  00139E  B4D8               	btfsc	status,2,c
 15703  0013A0  D00A               	goto	l1353
 15704  0013A2  0A0D               	xorlw	13	; case 105
 15705  0013A4  B4D8               	btfsc	status,2,c
 15706  0013A6  D007               	goto	l1353
 15707  0013A8  0A1A               	xorlw	26	; case 115
 15708  0013AA  B4D8               	btfsc	status,2,c
 15709  0013AC  D758               	goto	l5863
 15710  0013AE  0A06               	xorlw	6	; case 117
 15711  0013B0  B4D8               	btfsc	status,2,c
 15712  0013B2  D7E1               	goto	l5893
 15713  0013B4  D0E9               	goto	l5969
 15714  0013B6                     l1353:
 15715                           
 15716                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15717  0013B6  0100               	movlb	0	; () banked
 15718  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 15719  0013BA  D019               	goto	l5909
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;doprnt.c: 1253: {
 15723                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15724  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15725  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15726  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 15727  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 15728                           
 15729                           ; BSR set to: 0
 15730  0013CC  0E02               	movlw	2
 15731  0013CE  0100               	movlb	0	; () banked
 15732  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 15733  0013D2  0E00               	movlw	0
 15734  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15735                           
 15736                           ; BSR set to: 0
 15737                           ;doprnt.c: 1261: if((int)val < 0) {
 15738  0013D6  0100               	movlb	0	; () banked
 15739  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15740  0013DA  D016               	goto	l5913
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;doprnt.c: 1262: flag |= 0x03;
 15744  0013DC  0E03               	movlw	3
 15745  0013DE  0100               	movlb	0	; () banked
 15746  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 15747                           
 15748                           ; BSR set to: 0
 15749                           ;doprnt.c: 1263: val = -val;
 15750  0013E2  0100               	movlb	0	; () banked
 15751  0013E4  6DA5               	negf	printf@val& (0+255),b
 15752  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15753  0013E8  B0D8               	btfsc	status,0,c
 15754  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;doprnt.c: 1264: }
 15758                           ;doprnt.c: 1266: }
 15759  0013EC  D00D               	goto	l5913
 15760  0013EE                     l5909:
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;doprnt.c: 1268: else
 15764                           ;doprnt.c: 1273: {
 15765                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15766  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15767  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15768  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 15769  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 15770                           
 15771                           ; BSR set to: 0
 15772  0013FE  0E02               	movlw	2
 15773  001400  0100               	movlb	0	; () banked
 15774  001402  27A1               	addwf	printf@ap& (0+255),f,b
 15775  001404  0E00               	movlw	0
 15776  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15777  001408                     l5913:
 15778                           
 15779                           ; BSR set to: 0
 15780                           ;doprnt.c: 1287: }
 15781                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15782  001408  0E01               	movlw	1
 15783  00140A  0100               	movlb	0	; () banked
 15784  00140C  6FA8               	movwf	printf@c& (0+255),b
 15785  00140E                     l5915:
 15786                           
 15787                           ; BSR set to: 0
 15788  00140E  0E05               	movlw	5
 15789  001410  0100               	movlb	0	; () banked
 15790  001412  19A8               	xorwf	printf@c& (0+255),w,b
 15791  001414  B4D8               	btfsc	status,2,c
 15792  001416  D019               	goto	l5927
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;doprnt.c: 1306: if(val < dpowers[c])
 15796                           
 15797                           ; BSR set to: 0
 15798                           
 15799                           ; BSR set to: 0
 15800  001418  0100               	movlb	0	; () banked
 15801  00141A  51A8               	movf	printf@c& (0+255),w,b
 15802  00141C  0D02               	mullw	2
 15803  00141E  0E00               	movlw	low _dpowers
 15804  001420  24F3               	addwf	prodl,w,c
 15805  001422  6EF6               	movwf	tblptrl,c
 15806  001424  0EFB               	movlw	high _dpowers
 15807  001426  20F4               	addwfc	prodh,w,c
 15808  001428  6EF7               	movwf	tblptrh,c
 15809  00142A                     	if	1	;There are 3 active tblptr bytes
 15810  00142A  6AF8               	clrf	tblptru,c
 15811  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 15812  00142E  22F8               	addwfc	tblptru,f,c
 15813  001430                     	endif
 15814  001430  0009               	tblrd		*+
 15815  001432  50F5               	movf	tablat,w,c
 15816  001434  0100               	movlb	0	; () banked
 15817  001436  5DA5               	subwf	printf@val& (0+255),w,b
 15818  001438  0009               	tblrd		*+
 15819  00143A  50F5               	movf	tablat,w,c
 15820  00143C  0100               	movlb	0	; () banked
 15821  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 15822  001440  A0D8               	btfss	status,0,c
 15823  001442  D003               	goto	l5927
 15824                           
 15825                           ; BSR set to: 0
 15826                           
 15827                           ; BSR set to: 0
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;doprnt.c: 1307: break;
 15831  001444  0100               	movlb	0	; () banked
 15832  001446  2BA8               	incf	printf@c& (0+255),f,b
 15833  001448  D7E2               	goto	l5915
 15834  00144A                     l5927:
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15838  00144A  0100               	movlb	0	; () banked
 15839  00144C  51A9               	movf	printf@width& (0+255),w,b
 15840  00144E  0100               	movlb	0	; () banked
 15841  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15842  001452  B4D8               	btfsc	status,2,c
 15843  001454  D00B               	goto	l5933
 15844                           
 15845                           ; BSR set to: 0
 15846  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15847  00145A  0E03               	movlw	3
 15848  00145C  0100               	movlb	0	; () banked
 15849  00145E  179A               	andwf	??_printf& (0+255),f,b
 15850  001460  B4D8               	btfsc	status,2,c
 15851  001462  D004               	goto	l5933
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;doprnt.c: 1346: width--;
 15855  001464  0100               	movlb	0	; () banked
 15856  001466  07A9               	decf	printf@width& (0+255),f,b
 15857  001468  A0D8               	btfss	status,0,c
 15858  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15859  00146C                     l5933:
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;doprnt.c: 1381: if(width > c)
 15863  00146C  0E80               	movlw	128
 15864  00146E  0100               	movlb	0	; () banked
 15865  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15866  001472  0E7F               	movlw	127
 15867  001474  0100               	movlb	0	; () banked
 15868  001476  6F9A               	movwf	??_printf& (0+255),b
 15869  001478  0100               	movlb	0	; () banked
 15870  00147A  51A9               	movf	printf@width& (0+255),w,b
 15871  00147C  0100               	movlb	0	; () banked
 15872  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15873  001480  0100               	movlb	0	; () banked
 15874  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15875  001484  0A80               	xorlw	128
 15876  001486  0100               	movlb	0	; () banked
 15877  001488  599A               	subwfb	??_printf& (0+255),w,b
 15878  00148A  B0D8               	btfsc	status,0,c
 15879  00148C  D00B               	goto	l5937
 15880                           
 15881                           ; BSR set to: 0
 15882                           ;doprnt.c: 1382: width -= c;
 15883  00148E  0100               	movlb	0	; () banked
 15884  001490  51A8               	movf	printf@c& (0+255),w,b
 15885  001492  0100               	movlb	0	; () banked
 15886  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15887  001496  0E00               	movlw	0
 15888  001498  0100               	movlb	0	; () banked
 15889  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15890  00149C  0EFF               	movlw	255
 15891  00149E  0100               	movlb	0	; () banked
 15892  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15893  0014A2  D005               	goto	l5939
 15894  0014A4                     l5937:
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;doprnt.c: 1383: else
 15898                           ;doprnt.c: 1384: width = 0;
 15899  0014A4  0E00               	movlw	0
 15900  0014A6  0100               	movlb	0	; () banked
 15901  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15902  0014AA  0E00               	movlw	0
 15903  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15904  0014AE                     l5939:
 15905                           
 15906                           ; BSR set to: 0
 15907                           ;doprnt.c: 1387: if(flag & 0x04) {
 15908  0014AE  0100               	movlb	0	; () banked
 15909  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15910  0014B2  D018               	goto	l5951
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;doprnt.c: 1392: if(flag & 0x03)
 15914  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15915  0014B8  0E03               	movlw	3
 15916  0014BA  0100               	movlb	0	; () banked
 15917  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15918  0014BE  B4D8               	btfsc	status,2,c
 15919  0014C0  D003               	goto	l5945
 15920                           
 15921                           ; BSR set to: 0
 15922                           ;doprnt.c: 1393: (putch('-') );
 15923  0014C2  0E2D               	movlw	45
 15924  0014C4  EC82  F027         	call	_putch
 15925  0014C8                     l5945:
 15926                           
 15927                           ;doprnt.c: 1415: if(width)
 15928  0014C8  0100               	movlb	0	; () banked
 15929  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15930  0014CC  0100               	movlb	0	; () banked
 15931  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15932  0014D0  B4D8               	btfsc	status,2,c
 15933  0014D2  D025               	goto	l5961
 15934                           
 15935                           ; BSR set to: 0
 15936                           ;doprnt.c: 1417: (putch('0') );
 15937                           
 15938                           ; BSR set to: 0
 15939                           
 15940                           ;doprnt.c: 1416: do
 15941  0014D4  0E30               	movlw	48
 15942  0014D6  EC82  F027         	call	_putch
 15943                           
 15944                           ;doprnt.c: 1418: while(--width);
 15945  0014DA  0100               	movlb	0	; () banked
 15946  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15947  0014DE  A0D8               	btfss	status,0,c
 15948  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15949  0014E2  D7F2               	goto	l5945
 15950  0014E4                     l5951:
 15951                           
 15952                           ; BSR set to: 0
 15953                           ;doprnt.c: 1422: {
 15954                           ;doprnt.c: 1424: if(width
 15955                           ;doprnt.c: 1428: )
 15956  0014E4  0100               	movlb	0	; () banked
 15957  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15958  0014E8  0100               	movlb	0	; () banked
 15959  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15960  0014EC  B4D8               	btfsc	status,2,c
 15961  0014EE  D00D               	goto	l5957
 15962  0014F0                     l5953:
 15963                           
 15964                           ; BSR set to: 0
 15965                           ;doprnt.c: 1430: (putch(' ') );
 15966  0014F0  0E20               	movlw	32
 15967  0014F2  EC82  F027         	call	_putch
 15968                           
 15969                           ;doprnt.c: 1431: while(--width);
 15970  0014F6  0100               	movlb	0	; () banked
 15971  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15972  0014FA  A0D8               	btfss	status,0,c
 15973  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15974  0014FE  0100               	movlb	0	; () banked
 15975  001500  51A9               	movf	printf@width& (0+255),w,b
 15976  001502  0100               	movlb	0	; () banked
 15977  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15978  001506  A4D8               	btfss	status,2,c
 15979  001508  D7F3               	goto	l5953
 15980  00150A                     l5957:
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;doprnt.c: 1438: if(flag & 0x03)
 15984  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15985  00150E  0E03               	movlw	3
 15986  001510  0100               	movlb	0	; () banked
 15987  001512  179A               	andwf	??_printf& (0+255),f,b
 15988  001514  B4D8               	btfsc	status,2,c
 15989  001516  D003               	goto	l5961
 15990                           
 15991                           ; BSR set to: 0
 15992                           ;doprnt.c: 1439: (putch('-') );
 15993  001518  0E2D               	movlw	45
 15994  00151A  EC82  F027         	call	_putch
 15995  00151E                     l5961:
 15996                           
 15997                           ;doprnt.c: 1469: }
 15998                           ;doprnt.c: 1472: prec = c;
 15999  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 16000                           
 16001                           ;doprnt.c: 1474: while(prec--) {
 16002  001522  D02C               	goto	l5967
 16003  001524                     l5963:
 16004                           
 16005                           ;doprnt.c: 1478: {
 16006                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16007  001524  0100               	movlb	0	; () banked
 16008  001526  519E               	movf	printf@prec& (0+255),w,b
 16009  001528  0D02               	mullw	2
 16010  00152A  0E00               	movlw	low _dpowers
 16011  00152C  24F3               	addwf	prodl,w,c
 16012  00152E  6EF6               	movwf	tblptrl,c
 16013  001530  0EFB               	movlw	high _dpowers
 16014  001532  20F4               	addwfc	prodh,w,c
 16015  001534  6EF7               	movwf	tblptrh,c
 16016  001536                     	if	1	;There are 3 active tblptr bytes
 16017  001536  6AF8               	clrf	tblptru,c
 16018  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 16019  00153A  22F8               	addwfc	tblptru,f,c
 16020  00153C                     	endif
 16021  00153C  0009               	tblrd		*+
 16022  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 16023  001542  000A               	tblrd		*-
 16024  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 16025  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 16026  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 16027  001550  ECAA  F021         	call	___lwdiv	;wreg free
 16028  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 16029  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 16030  00155C  0E00               	movlw	0
 16031  00155E  0100               	movlb	0	; () banked
 16032  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16033  001562  0E0A               	movlw	10
 16034  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 16035  001566  ECC7  F022         	call	___lwmod	;wreg free
 16036  00156A  0100               	movlb	0	; () banked
 16037  00156C  5187               	movf	?___lwmod& (0+255),w,b
 16038  00156E  0F30               	addlw	48
 16039  001570  0100               	movlb	0	; () banked
 16040  001572  6FA8               	movwf	printf@c& (0+255),b
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;doprnt.c: 1523: }
 16044                           ;doprnt.c: 1524: (putch(c) );
 16045  001574  0100               	movlb	0	; () banked
 16046  001576  51A8               	movf	printf@c& (0+255),w,b
 16047  001578  EC82  F027         	call	_putch
 16048  00157C                     l5967:
 16049  00157C  0100               	movlb	0	; () banked
 16050  00157E  079E               	decf	printf@prec& (0+255),f,b
 16051  001580  0100               	movlb	0	; () banked
 16052  001582  299E               	incf	printf@prec& (0+255),w,b
 16053  001584  A4D8               	btfss	status,2,c
 16054  001586  D7CE               	goto	l5963
 16055  001588                     l5969:
 16056  001588  C08E  FFF6         	movff	printf@f,tblptrl
 16057  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 16058  001590  0100               	movlb	0	; () banked
 16059  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 16060  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 16061  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16062  001596  6AF8               	clrf	tblptru,c
 16063  001598                     	endif
 16064  001598                     	if	0	;tblptru may be non-zero
 16065  001598                     	endif
 16066  001598  0008               	tblrd		*
 16067  00159A  CFF5 F0A8          	movff	tablat,printf@c
 16068  00159E  0100               	movlb	0	; () banked
 16069  0015A0  51A8               	movf	printf@c& (0+255),w,b
 16070  0015A2  B4D8               	btfsc	status,2,c
 16071  0015A4  0012               	return	
 16072  0015A6  D5EB               	goto	l5839
 16073  0015A8                     __end_of_printf:
 16074                           	opt stack 0
 16075                           tblptru	equ	0xFF8
 16076                           tblptrh	equ	0xFF7
 16077                           tblptrl	equ	0xFF6
 16078                           tablat	equ	0xFF5
 16079                           prodh	equ	0xFF4
 16080                           prodl	equ	0xFF3
 16081                           intcon	equ	0xFF2
 16082                           intcon2	equ	0xFF1
 16083                           intcon3	equ	0xFF0
 16084                           indf0	equ	0xFEF
 16085                           postinc0	equ	0xFEE
 16086                           fsr0h	equ	0xFEA
 16087                           fsr0l	equ	0xFE9
 16088                           wreg	equ	0xFE8
 16089                           postdec1	equ	0xFE5
 16090                           fsr1l	equ	0xFE1
 16091                           indf2	equ	0xFDF
 16092                           postinc2	equ	0xFDE
 16093                           postdec2	equ	0xFDD
 16094                           fsr2h	equ	0xFDA
 16095                           fsr2l	equ	0xFD9
 16096                           status	equ	0xFD8
 16097                           
 16098 ;; *************** function _putch *****************
 16099 ;; Defined at:
 16100 ;;		line 20 in file "lcd.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  data            1    wreg     unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  data            1    2[BANK0 ] unsigned char 
 16105 ;; Return value:  Size  Location     Type
 16106 ;;                  1    wreg      void 
 16107 ;; Registers used:
 16108 ;;		wreg, status,2, status,0, cstack
 16109 ;; Tracked objects:
 16110 ;;		On entry : 0/0
 16111 ;;		On exit  : 0/0
 16112 ;;		Unchanged: 0/0
 16113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16117 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16118 ;;Total ram usage:        1 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; Hardware stack levels required when called:    8
 16121 ;; This function calls:
 16122 ;;		_lcdNibble
 16123 ;; This function is called by:
 16124 ;;		_printf
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           	psect	text52
 16129  004F04                     __ptext52:
 16130                           	opt stack 0
 16131  004F04                     _putch:
 16132                           	opt stack 18
 16133                           
 16134                           ;incstack = 0
 16135                           ;putch@data stored from wreg
 16136  004F04  0100               	movlb	0	; () banked
 16137  004F06  6F82               	movwf	putch@data& (0+255),b
 16138                           
 16139                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 16140  004F08  848C               	bsf	3980,2,c	;volatile
 16141                           
 16142                           ;lcd.c: 22: lcdNibble(data);
 16143  004F0A  0100               	movlb	0	; () banked
 16144  004F0C  5182               	movf	putch@data& (0+255),w,b
 16145  004F0E  EC93  F022         	call	_lcdNibble
 16146  004F12  0012               	return		;funcret
 16147  004F14                     __end_of_putch:
 16148                           	opt stack 0
 16149                           tblptru	equ	0xFF8
 16150                           tblptrh	equ	0xFF7
 16151                           tblptrl	equ	0xFF6
 16152                           tablat	equ	0xFF5
 16153                           prodh	equ	0xFF4
 16154                           prodl	equ	0xFF3
 16155                           intcon	equ	0xFF2
 16156                           intcon2	equ	0xFF1
 16157                           intcon3	equ	0xFF0
 16158                           indf0	equ	0xFEF
 16159                           postinc0	equ	0xFEE
 16160                           fsr0h	equ	0xFEA
 16161                           fsr0l	equ	0xFE9
 16162                           wreg	equ	0xFE8
 16163                           postdec1	equ	0xFE5
 16164                           fsr1l	equ	0xFE1
 16165                           indf2	equ	0xFDF
 16166                           postinc2	equ	0xFDE
 16167                           postdec2	equ	0xFDD
 16168                           fsr2h	equ	0xFDA
 16169                           fsr2l	equ	0xFD9
 16170                           status	equ	0xFD8
 16171                           
 16172 ;; *************** function _isdigit *****************
 16173 ;; Defined at:
 16174 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;  c               1    wreg     unsigned char 
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;  c               1    2[BANK0 ] unsigned char 
 16179 ;; Return value:  Size  Location     Type
 16180 ;;		None               void
 16181 ;; Registers used:
 16182 ;;		wreg, status,2, status,0
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16189 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16191 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16192 ;;Total ram usage:        3 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    7
 16195 ;; This function calls:
 16196 ;;		Nothing
 16197 ;; This function is called by:
 16198 ;;		_printf
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           	psect	text53
 16203  004D4A                     __ptext53:
 16204                           	opt stack 0
 16205  004D4A                     _isdigit:
 16206                           	opt stack 19
 16207                           
 16208                           ;incstack = 0
 16209                           ;isdigit@c stored from wreg
 16210  004D4A  0100               	movlb	0	; () banked
 16211  004D4C  6F82               	movwf	isdigit@c& (0+255),b
 16212  004D4E  0E00               	movlw	0
 16213  004D50  0100               	movlb	0	; () banked
 16214  004D52  6F81               	movwf	_isdigit$1976& (0+255),b
 16215                           
 16216                           ; BSR set to: 0
 16217  004D54  0E3A               	movlw	58
 16218  004D56  0100               	movlb	0	; () banked
 16219  004D58  6182               	cpfslt	isdigit@c& (0+255),b
 16220  004D5A  D007               	goto	l5687
 16221                           
 16222                           ; BSR set to: 0
 16223  004D5C  0E2F               	movlw	47
 16224  004D5E  0100               	movlb	0	; () banked
 16225  004D60  6582               	cpfsgt	isdigit@c& (0+255),b
 16226  004D62  D003               	goto	l5687
 16227                           
 16228                           ; BSR set to: 0
 16229  004D64  0E01               	movlw	1
 16230  004D66  0100               	movlb	0	; () banked
 16231  004D68  6F81               	movwf	_isdigit$1976& (0+255),b
 16232  004D6A                     l5687:
 16233                           
 16234                           ; BSR set to: 0
 16235  004D6A  C081  F080         	movff	_isdigit$1976,??_isdigit
 16236  004D6E  0100               	movlb	0	; () banked
 16237  004D70  3180               	rrcf	??_isdigit& (0+255),w,b
 16238  004D72  0012               	return	
 16239  004D74                     __end_of_isdigit:
 16240                           	opt stack 0
 16241                           tblptru	equ	0xFF8
 16242                           tblptrh	equ	0xFF7
 16243                           tblptrl	equ	0xFF6
 16244                           tablat	equ	0xFF5
 16245                           prodh	equ	0xFF4
 16246                           prodl	equ	0xFF3
 16247                           intcon	equ	0xFF2
 16248                           intcon2	equ	0xFF1
 16249                           intcon3	equ	0xFF0
 16250                           indf0	equ	0xFEF
 16251                           postinc0	equ	0xFEE
 16252                           fsr0h	equ	0xFEA
 16253                           fsr0l	equ	0xFE9
 16254                           wreg	equ	0xFE8
 16255                           postdec1	equ	0xFE5
 16256                           fsr1l	equ	0xFE1
 16257                           indf2	equ	0xFDF
 16258                           postinc2	equ	0xFDE
 16259                           postdec2	equ	0xFDD
 16260                           fsr2h	equ	0xFDA
 16261                           fsr2l	equ	0xFD9
 16262                           status	equ	0xFD8
 16263                           
 16264 ;; *************** function ___wmul *****************
 16265 ;; Defined at:
 16266 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 16267 ;; Parameters:    Size  Location     Type
 16268 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16269 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16270 ;; Auto vars:     Size  Location     Type
 16271 ;;  product         2    4[BANK0 ] unsigned int 
 16272 ;; Return value:  Size  Location     Type
 16273 ;;                  2    0[BANK0 ] unsigned int 
 16274 ;; Registers used:
 16275 ;;		wreg, status,2, status,0, prodl, prodh
 16276 ;; Tracked objects:
 16277 ;;		On entry : 0/0
 16278 ;;		On exit  : 0/0
 16279 ;;		Unchanged: 0/0
 16280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16281 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16285 ;;Total ram usage:        6 bytes
 16286 ;; Hardware stack levels used:    1
 16287 ;; Hardware stack levels required when called:    7
 16288 ;; This function calls:
 16289 ;;		Nothing
 16290 ;; This function is called by:
 16291 ;;		_printf
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           	psect	text54
 16296  004A1E                     __ptext54:
 16297                           	opt stack 0
 16298  004A1E                     ___wmul:
 16299                           	opt stack 19
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;incstack = 0
 16303  004A1E  0100               	movlb	0	; () banked
 16304  004A20  5180               	movf	___wmul@multiplier& (0+255),w,b
 16305  004A22  0100               	movlb	0	; () banked
 16306  004A24  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16307  004A26  CFF3 F084          	movff	prodl,___wmul@product
 16308  004A2A  CFF4 F085          	movff	prodh,___wmul@product+1
 16309  004A2E  0100               	movlb	0	; () banked
 16310  004A30  5180               	movf	___wmul@multiplier& (0+255),w,b
 16311  004A32  0100               	movlb	0	; () banked
 16312  004A34  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16313  004A36  50F3               	movf	prodl,w,c
 16314  004A38  0100               	movlb	0	; () banked
 16315  004A3A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16316  004A3C  0100               	movlb	0	; () banked
 16317  004A3E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16318  004A40  0100               	movlb	0	; () banked
 16319  004A42  0382               	mulwf	___wmul@multiplicand& (0+255),b
 16320  004A44  50F3               	movf	prodl,w,c
 16321  004A46  0100               	movlb	0	; () banked
 16322  004A48  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 16323                           
 16324                           ; BSR set to: 0
 16325  004A4A  C084  F080         	movff	___wmul@product,?___wmul
 16326  004A4E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 16327  004A52  0012               	return	
 16328  004A54                     __end_of___wmul:
 16329                           	opt stack 0
 16330                           tblptru	equ	0xFF8
 16331                           tblptrh	equ	0xFF7
 16332                           tblptrl	equ	0xFF6
 16333                           tablat	equ	0xFF5
 16334                           prodh	equ	0xFF4
 16335                           prodl	equ	0xFF3
 16336                           intcon	equ	0xFF2
 16337                           intcon2	equ	0xFF1
 16338                           intcon3	equ	0xFF0
 16339                           indf0	equ	0xFEF
 16340                           postinc0	equ	0xFEE
 16341                           fsr0h	equ	0xFEA
 16342                           fsr0l	equ	0xFE9
 16343                           wreg	equ	0xFE8
 16344                           postdec1	equ	0xFE5
 16345                           fsr1l	equ	0xFE1
 16346                           indf2	equ	0xFDF
 16347                           postinc2	equ	0xFDE
 16348                           postdec2	equ	0xFDD
 16349                           fsr2h	equ	0xFDA
 16350                           fsr2l	equ	0xFD9
 16351                           status	equ	0xFD8
 16352                           
 16353 ;; *************** function ___lwmod *****************
 16354 ;; Defined at:
 16355 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;  dividend        2    7[BANK0 ] unsigned int 
 16358 ;;  divisor         2    9[BANK0 ] unsigned int 
 16359 ;; Auto vars:     Size  Location     Type
 16360 ;;  counter         1   11[BANK0 ] unsigned char 
 16361 ;; Return value:  Size  Location     Type
 16362 ;;                  2    7[BANK0 ] unsigned int 
 16363 ;; Registers used:
 16364 ;;		wreg, status,2, status,0
 16365 ;; Tracked objects:
 16366 ;;		On entry : 0/0
 16367 ;;		On exit  : 0/0
 16368 ;;		Unchanged: 0/0
 16369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16370 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16373 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;Total ram usage:        5 bytes
 16375 ;; Hardware stack levels used:    1
 16376 ;; Hardware stack levels required when called:    7
 16377 ;; This function calls:
 16378 ;;		Nothing
 16379 ;; This function is called by:
 16380 ;;		_printf
 16381 ;; This function uses a non-reentrant model
 16382 ;;
 16383                           
 16384                           	psect	text55
 16385  00458E                     __ptext55:
 16386                           	opt stack 0
 16387  00458E                     ___lwmod:
 16388                           	opt stack 19
 16389                           
 16390                           ; BSR set to: 0
 16391                           ;incstack = 0
 16392  00458E  0100               	movlb	0	; () banked
 16393  004590  5189               	movf	___lwmod@divisor& (0+255),w,b
 16394  004592  0100               	movlb	0	; () banked
 16395  004594  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16396  004596  B4D8               	btfsc	status,2,c
 16397  004598  D026               	goto	l1810
 16398                           
 16399                           ; BSR set to: 0
 16400  00459A  0E01               	movlw	1
 16401  00459C  0100               	movlb	0	; () banked
 16402  00459E  6F8B               	movwf	___lwmod@counter& (0+255),b
 16403  0045A0  D006               	goto	l5725
 16404  0045A2                     l5723:
 16405                           
 16406                           ; BSR set to: 0
 16407  0045A2  0100               	movlb	0	; () banked
 16408  0045A4  90D8               	bcf	status,0,c
 16409  0045A6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 16410  0045A8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16411  0045AA  0100               	movlb	0	; () banked
 16412  0045AC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 16413  0045AE                     l5725:
 16414                           
 16415                           ; BSR set to: 0
 16416  0045AE  0100               	movlb	0	; () banked
 16417  0045B0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 16418  0045B2  D7F7               	goto	l5723
 16419  0045B4                     l5727:
 16420                           
 16421                           ; BSR set to: 0
 16422  0045B4  0100               	movlb	0	; () banked
 16423  0045B6  5189               	movf	___lwmod@divisor& (0+255),w,b
 16424  0045B8  0100               	movlb	0	; () banked
 16425  0045BA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 16426  0045BC  0100               	movlb	0	; () banked
 16427  0045BE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16428  0045C0  0100               	movlb	0	; () banked
 16429  0045C2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16430  0045C4  A0D8               	btfss	status,0,c
 16431  0045C6  D008               	goto	l5731
 16432                           
 16433                           ; BSR set to: 0
 16434  0045C8  0100               	movlb	0	; () banked
 16435  0045CA  5189               	movf	___lwmod@divisor& (0+255),w,b
 16436  0045CC  0100               	movlb	0	; () banked
 16437  0045CE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 16438  0045D0  0100               	movlb	0	; () banked
 16439  0045D2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16440  0045D4  0100               	movlb	0	; () banked
 16441  0045D6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16442  0045D8                     l5731:
 16443                           
 16444                           ; BSR set to: 0
 16445  0045D8  0100               	movlb	0	; () banked
 16446  0045DA  90D8               	bcf	status,0,c
 16447  0045DC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16448  0045DE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 16449                           
 16450                           ; BSR set to: 0
 16451  0045E0  0100               	movlb	0	; () banked
 16452  0045E2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 16453  0045E4  D7E7               	goto	l5727
 16454  0045E6                     l1810:
 16455                           
 16456                           ; BSR set to: 0
 16457  0045E6  C087  F087         	movff	___lwmod@dividend,?___lwmod
 16458  0045EA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 16459                           
 16460                           ; BSR set to: 0
 16461  0045EE  0012               	return		;funcret
 16462  0045F0                     __end_of___lwmod:
 16463                           	opt stack 0
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           intcon2	equ	0xFF1
 16472                           intcon3	equ	0xFF0
 16473                           indf0	equ	0xFEF
 16474                           postinc0	equ	0xFEE
 16475                           fsr0h	equ	0xFEA
 16476                           fsr0l	equ	0xFE9
 16477                           wreg	equ	0xFE8
 16478                           postdec1	equ	0xFE5
 16479                           fsr1l	equ	0xFE1
 16480                           indf2	equ	0xFDF
 16481                           postinc2	equ	0xFDE
 16482                           postdec2	equ	0xFDD
 16483                           fsr2h	equ	0xFDA
 16484                           fsr2l	equ	0xFD9
 16485                           status	equ	0xFD8
 16486                           
 16487 ;; *************** function ___lwdiv *****************
 16488 ;; Defined at:
 16489 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 16490 ;; Parameters:    Size  Location     Type
 16491 ;;  dividend        2    0[BANK0 ] unsigned int 
 16492 ;;  divisor         2    2[BANK0 ] unsigned int 
 16493 ;; Auto vars:     Size  Location     Type
 16494 ;;  quotient        2    4[BANK0 ] unsigned int 
 16495 ;;  counter         1    6[BANK0 ] unsigned char 
 16496 ;; Return value:  Size  Location     Type
 16497 ;;                  2    0[BANK0 ] unsigned int 
 16498 ;; Registers used:
 16499 ;;		wreg, status,2, status,0
 16500 ;; Tracked objects:
 16501 ;;		On entry : 0/0
 16502 ;;		On exit  : 0/0
 16503 ;;		Unchanged: 0/0
 16504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16506 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16509 ;;Total ram usage:        7 bytes
 16510 ;; Hardware stack levels used:    1
 16511 ;; Hardware stack levels required when called:    7
 16512 ;; This function calls:
 16513 ;;		Nothing
 16514 ;; This function is called by:
 16515 ;;		_printf
 16516 ;; This function uses a non-reentrant model
 16517 ;;
 16518                           
 16519                           	psect	text56
 16520  004354                     __ptext56:
 16521                           	opt stack 0
 16522  004354                     ___lwdiv:
 16523                           	opt stack 19
 16524                           
 16525                           ; BSR set to: 0
 16526                           ;incstack = 0
 16527  004354  0E00               	movlw	0
 16528  004356  0100               	movlb	0	; () banked
 16529  004358  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16530  00435A  0E00               	movlw	0
 16531  00435C  6F84               	movwf	___lwdiv@quotient& (0+255),b
 16532                           
 16533                           ; BSR set to: 0
 16534  00435E  0100               	movlb	0	; () banked
 16535  004360  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16536  004362  0100               	movlb	0	; () banked
 16537  004364  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16538  004366  B4D8               	btfsc	status,2,c
 16539  004368  D02C               	goto	l1800
 16540                           
 16541                           ; BSR set to: 0
 16542  00436A  0E01               	movlw	1
 16543  00436C  0100               	movlb	0	; () banked
 16544  00436E  6F86               	movwf	___lwdiv@counter& (0+255),b
 16545  004370  D006               	goto	l5705
 16546  004372                     l5703:
 16547                           
 16548                           ; BSR set to: 0
 16549  004372  0100               	movlb	0	; () banked
 16550  004374  90D8               	bcf	status,0,c
 16551  004376  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 16552  004378  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16553  00437A  0100               	movlb	0	; () banked
 16554  00437C  2B86               	incf	___lwdiv@counter& (0+255),f,b
 16555  00437E                     l5705:
 16556                           
 16557                           ; BSR set to: 0
 16558  00437E  0100               	movlb	0	; () banked
 16559  004380  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 16560  004382  D7F7               	goto	l5703
 16561  004384                     l5707:
 16562                           
 16563                           ; BSR set to: 0
 16564  004384  0100               	movlb	0	; () banked
 16565  004386  90D8               	bcf	status,0,c
 16566  004388  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 16567  00438A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16568                           
 16569                           ; BSR set to: 0
 16570  00438C  0100               	movlb	0	; () banked
 16571  00438E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16572  004390  0100               	movlb	0	; () banked
 16573  004392  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 16574  004394  0100               	movlb	0	; () banked
 16575  004396  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16576  004398  0100               	movlb	0	; () banked
 16577  00439A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16578  00439C  A0D8               	btfss	status,0,c
 16579  00439E  D00A               	goto	l5715
 16580                           
 16581                           ; BSR set to: 0
 16582  0043A0  0100               	movlb	0	; () banked
 16583  0043A2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 16584  0043A4  0100               	movlb	0	; () banked
 16585  0043A6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 16586  0043A8  0100               	movlb	0	; () banked
 16587  0043AA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16588  0043AC  0100               	movlb	0	; () banked
 16589  0043AE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16590                           
 16591                           ; BSR set to: 0
 16592  0043B0  0100               	movlb	0	; () banked
 16593  0043B2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 16594  0043B4                     l5715:
 16595                           
 16596                           ; BSR set to: 0
 16597  0043B4  0100               	movlb	0	; () banked
 16598  0043B6  90D8               	bcf	status,0,c
 16599  0043B8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16600  0043BA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 16601                           
 16602                           ; BSR set to: 0
 16603  0043BC  0100               	movlb	0	; () banked
 16604  0043BE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 16605  0043C0  D7E1               	goto	l5707
 16606  0043C2                     l1800:
 16607                           
 16608                           ; BSR set to: 0
 16609  0043C2  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 16610  0043C6  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16611                           
 16612                           ; BSR set to: 0
 16613  0043CA  0012               	return		;funcret
 16614  0043CC                     __end_of___lwdiv:
 16615                           	opt stack 0
 16616                           tblptru	equ	0xFF8
 16617                           tblptrh	equ	0xFF7
 16618                           tblptrl	equ	0xFF6
 16619                           tablat	equ	0xFF5
 16620                           prodh	equ	0xFF4
 16621                           prodl	equ	0xFF3
 16622                           intcon	equ	0xFF2
 16623                           intcon2	equ	0xFF1
 16624                           intcon3	equ	0xFF0
 16625                           indf0	equ	0xFEF
 16626                           postinc0	equ	0xFEE
 16627                           fsr0h	equ	0xFEA
 16628                           fsr0l	equ	0xFE9
 16629                           wreg	equ	0xFE8
 16630                           postdec1	equ	0xFE5
 16631                           fsr1l	equ	0xFE1
 16632                           indf2	equ	0xFDF
 16633                           postinc2	equ	0xFDE
 16634                           postdec2	equ	0xFDD
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           
 16639 ;; *************** function _lcdInst *****************
 16640 ;; Defined at:
 16641 ;;		line 15 in file "lcd.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  data            1    wreg     unsigned char 
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;  data            1    2[BANK0 ] unsigned char 
 16646 ;; Return value:  Size  Location     Type
 16647 ;;                  1    wreg      void 
 16648 ;; Registers used:
 16649 ;;		wreg, status,2, status,0, cstack
 16650 ;; Tracked objects:
 16651 ;;		On entry : 0/0
 16652 ;;		On exit  : 0/0
 16653 ;;		Unchanged: 0/0
 16654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16658 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;Total ram usage:        1 bytes
 16660 ;; Hardware stack levels used:    1
 16661 ;; Hardware stack levels required when called:    8
 16662 ;; This function calls:
 16663 ;;		_lcdNibble
 16664 ;; This function is called by:
 16665 ;;		_UI
 16666 ;;		_change_state_to_menu_start
 16667 ;;		_change_state_to_menu_12
 16668 ;;		_change_state_to_menu_22
 16669 ;;		_initLCD
 16670 ;;		_printRTC
 16671 ;;		_Loading
 16672 ;;		_EEPROM_write
 16673 ;;		_Test
 16674 ;;		_algorithmTest
 16675 ;;		_sensorTest
 16676 ;;		_actuatorTest
 16677 ;;		_BothServos
 16678 ;;		_PortTestA5
 16679 ;;		_PusherTest
 16680 ;;		_SpeedTest
 16681 ;;		_BlockerTest
 16682 ;;		_ToggleTestA5
 16683 ;; This function uses a non-reentrant model
 16684 ;;
 16685                           
 16686                           	psect	text57
 16687  004F14                     __ptext57:
 16688                           	opt stack 0
 16689  004F14                     _lcdInst:
 16690                           	opt stack 20
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;incstack = 0
 16694                           ;lcdInst@data stored from wreg
 16695  004F14  0100               	movlb	0	; () banked
 16696  004F16  6F82               	movwf	lcdInst@data& (0+255),b
 16697                           
 16698                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16699  004F18  948C               	bcf	3980,2,c	;volatile
 16700                           
 16701                           ;lcd.c: 17: lcdNibble(data);
 16702  004F1A  0100               	movlb	0	; () banked
 16703  004F1C  5182               	movf	lcdInst@data& (0+255),w,b
 16704  004F1E  EC93  F022         	call	_lcdNibble
 16705  004F22  0012               	return		;funcret
 16706  004F24                     __end_of_lcdInst:
 16707                           	opt stack 0
 16708                           tblptru	equ	0xFF8
 16709                           tblptrh	equ	0xFF7
 16710                           tblptrl	equ	0xFF6
 16711                           tablat	equ	0xFF5
 16712                           prodh	equ	0xFF4
 16713                           prodl	equ	0xFF3
 16714                           intcon	equ	0xFF2
 16715                           intcon2	equ	0xFF1
 16716                           intcon3	equ	0xFF0
 16717                           indf0	equ	0xFEF
 16718                           postinc0	equ	0xFEE
 16719                           fsr0h	equ	0xFEA
 16720                           fsr0l	equ	0xFE9
 16721                           wreg	equ	0xFE8
 16722                           postdec1	equ	0xFE5
 16723                           fsr1l	equ	0xFE1
 16724                           indf2	equ	0xFDF
 16725                           postinc2	equ	0xFDE
 16726                           postdec2	equ	0xFDD
 16727                           fsr2h	equ	0xFDA
 16728                           fsr2l	equ	0xFD9
 16729                           status	equ	0xFD8
 16730                           
 16731 ;; *************** function _lcdNibble *****************
 16732 ;; Defined at:
 16733 ;;		line 25 in file "lcd.c"
 16734 ;; Parameters:    Size  Location     Type
 16735 ;;  data            1    wreg     unsigned char 
 16736 ;; Auto vars:     Size  Location     Type
 16737 ;;  data            1    1[BANK0 ] unsigned char 
 16738 ;;  temp            1    0[BANK0 ] unsigned char 
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  1    wreg      void 
 16741 ;; Registers used:
 16742 ;;		wreg, status,2, status,0
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16752 ;;Total ram usage:        2 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    7
 16755 ;; This function calls:
 16756 ;;		Nothing
 16757 ;; This function is called by:
 16758 ;;		_lcdInst
 16759 ;;		_putch
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           	psect	text58
 16764  004526                     __ptext58:
 16765                           	opt stack 0
 16766  004526                     _lcdNibble:
 16767                           	opt stack 20
 16768                           
 16769                           ;incstack = 0
 16770                           ;lcdNibble@data stored from wreg
 16771  004526  0100               	movlb	0	; () banked
 16772  004528  6F81               	movwf	lcdNibble@data& (0+255),b
 16773                           
 16774                           ;lcd.c: 27: char temp = data & 0xF0;
 16775  00452A  0100               	movlb	0	; () banked
 16776  00452C  5181               	movf	lcdNibble@data& (0+255),w,b
 16777  00452E  0BF0               	andlw	240
 16778  004530  0100               	movlb	0	; () banked
 16779  004532  6F80               	movwf	lcdNibble@temp& (0+255),b
 16780                           
 16781                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16782  004534  508C               	movf	3980,w,c	;volatile
 16783  004536  0B0F               	andlw	15
 16784  004538  6E8C               	movwf	3980,c	;volatile
 16785                           
 16786                           ;lcd.c: 29: LATD = temp | LATD;
 16787  00453A  0100               	movlb	0	; () banked
 16788  00453C  5180               	movf	lcdNibble@temp& (0+255),w,b
 16789  00453E  108C               	iorwf	3980,w,c	;volatile
 16790  004540  6E8C               	movwf	3980,c	;volatile
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 16794  004542  868C               	bsf	3980,3,c	;volatile
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16798  004544  0E42               	movlw	66
 16799  004546                     u9547:
 16800  004546  2EE8               	decfsz	wreg,f,c
 16801  004548  D7FE               	bra	u9547
 16802  00454A  D000               	nop2	
 16803                           
 16804                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 16805  00454C  968C               	bcf	3980,3,c	;volatile
 16806                           
 16807                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16808  00454E  0E42               	movlw	66
 16809  004550                     u9557:
 16810  004550  2EE8               	decfsz	wreg,f,c
 16811  004552  D7FE               	bra	u9557
 16812  004554  D000               	nop2	
 16813                           
 16814                           ;lcd.c: 36: data = data << 4;
 16815  004556  0100               	movlb	0	; () banked
 16816  004558  3981               	swapf	lcdNibble@data& (0+255),w,b
 16817  00455A  0BF0               	andlw	240
 16818  00455C  0100               	movlb	0	; () banked
 16819  00455E  6F81               	movwf	lcdNibble@data& (0+255),b
 16820                           
 16821                           ;lcd.c: 38: temp = data & 0xF0;
 16822  004560  0100               	movlb	0	; () banked
 16823  004562  5181               	movf	lcdNibble@data& (0+255),w,b
 16824  004564  0BF0               	andlw	240
 16825  004566  0100               	movlb	0	; () banked
 16826  004568  6F80               	movwf	lcdNibble@temp& (0+255),b
 16827                           
 16828                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16829  00456A  508C               	movf	3980,w,c	;volatile
 16830  00456C  0B0F               	andlw	15
 16831  00456E  6E8C               	movwf	3980,c	;volatile
 16832                           
 16833                           ;lcd.c: 40: LATD = temp | LATD;
 16834  004570  0100               	movlb	0	; () banked
 16835  004572  5180               	movf	lcdNibble@temp& (0+255),w,b
 16836  004574  108C               	iorwf	3980,w,c	;volatile
 16837  004576  6E8C               	movwf	3980,c	;volatile
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16841  004578  868C               	bsf	3980,3,c	;volatile
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16845  00457A  0E42               	movlw	66
 16846  00457C                     u9567:
 16847  00457C  2EE8               	decfsz	wreg,f,c
 16848  00457E  D7FE               	bra	u9567
 16849  004580  D000               	nop2	
 16850                           
 16851                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16852  004582  968C               	bcf	3980,3,c	;volatile
 16853                           
 16854                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16855  004584  0E42               	movlw	66
 16856  004586                     u9577:
 16857  004586  2EE8               	decfsz	wreg,f,c
 16858  004588  D7FE               	bra	u9577
 16859  00458A  D000               	nop2	
 16860  00458C  0012               	return		;funcret
 16861  00458E                     __end_of_lcdNibble:
 16862                           	opt stack 0
 16863                           tblptru	equ	0xFF8
 16864                           tblptrh	equ	0xFF7
 16865                           tblptrl	equ	0xFF6
 16866                           tablat	equ	0xFF5
 16867                           prodh	equ	0xFF4
 16868                           prodl	equ	0xFF3
 16869                           intcon	equ	0xFF2
 16870                           intcon2	equ	0xFF1
 16871                           intcon3	equ	0xFF0
 16872                           indf0	equ	0xFEF
 16873                           postinc0	equ	0xFEE
 16874                           fsr0h	equ	0xFEA
 16875                           fsr0l	equ	0xFE9
 16876                           wreg	equ	0xFE8
 16877                           postdec1	equ	0xFE5
 16878                           fsr1l	equ	0xFE1
 16879                           indf2	equ	0xFDF
 16880                           postinc2	equ	0xFDE
 16881                           postdec2	equ	0xFDD
 16882                           fsr2h	equ	0xFDA
 16883                           fsr2l	equ	0xFD9
 16884                           status	equ	0xFD8
 16885                           
 16886 ;; *************** function _handler *****************
 16887 ;; Defined at:
 16888 ;;		line 16 in file "interruptHandler.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;		None
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;		None
 16893 ;; Return value:  Size  Location     Type
 16894 ;;                  1    wreg      void 
 16895 ;; Registers used:
 16896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16897 ;; Tracked objects:
 16898 ;;		On entry : 0/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16906 ;;Total ram usage:       16 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:    6
 16909 ;; This function calls:
 16910 ;;		_printSortTimer
 16911 ;;		_updateMenu
 16912 ;; This function is called by:
 16913 ;;		Interrupt level 2
 16914 ;; This function uses a non-reentrant model
 16915 ;;
 16916                           
 16917                           	psect	intcode
 16918  000008                     __pintcode:
 16919                           	opt stack 0
 16920  000008                     _handler:
 16921                           	opt stack 18
 16922                           
 16923                           ;incstack = 0
 16924  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16925  00000A  ED41  F01B         	call	int_func,f	;refresh shadow registers
 16926                           tblptru	equ	0xFF8
 16927                           tblptrh	equ	0xFF7
 16928                           tblptrl	equ	0xFF6
 16929                           tablat	equ	0xFF5
 16930                           prodh	equ	0xFF4
 16931                           prodl	equ	0xFF3
 16932                           intcon	equ	0xFF2
 16933                           intcon2	equ	0xFF1
 16934                           intcon3	equ	0xFF0
 16935                           indf0	equ	0xFEF
 16936                           postinc0	equ	0xFEE
 16937                           fsr0h	equ	0xFEA
 16938                           fsr0l	equ	0xFE9
 16939                           wreg	equ	0xFE8
 16940                           postdec1	equ	0xFE5
 16941                           fsr1l	equ	0xFE1
 16942                           indf2	equ	0xFDF
 16943                           postinc2	equ	0xFDE
 16944                           postdec2	equ	0xFDD
 16945                           fsr2h	equ	0xFDA
 16946                           fsr2l	equ	0xFD9
 16947                           status	equ	0xFD8
 16948                           
 16949                           	psect	intcode_body
 16950  003682                     __pintcode_body:
 16951                           	opt stack 18
 16952  003682                     int_func:
 16953                           	opt stack 18
 16954  003682  0006               	pop		; remove dummy address from shadow register refresh
 16955  003684  CFFA F04B          	movff	pclath,??_handler+2
 16956  003688  CFFB F04C          	movff	pclatu,??_handler+3
 16957  00368C  CFE9 F04D          	movff	fsr0l,??_handler+4
 16958  003690  CFEA F04E          	movff	fsr0h,??_handler+5
 16959  003694  CFE1 F04F          	movff	fsr1l,??_handler+6
 16960  003698  CFE2 F050          	movff	fsr1h,??_handler+7
 16961  00369C  CFD9 F051          	movff	fsr2l,??_handler+8
 16962  0036A0  CFDA F052          	movff	fsr2h,??_handler+9
 16963  0036A4  CFF3 F053          	movff	prodl,??_handler+10
 16964  0036A8  CFF4 F054          	movff	prodh,??_handler+11
 16965  0036AC  CFF6 F055          	movff	tblptrl,??_handler+12
 16966  0036B0  CFF7 F056          	movff	tblptrh,??_handler+13
 16967  0036B4  CFF8 F057          	movff	tblptru,??_handler+14
 16968  0036B8  CFF5 F058          	movff	tablat,??_handler+15
 16969                           
 16970                           ;interruptHandler.c: 18: if(INT1IF){
 16971  0036BC  A0F0               	btfss	intcon3,0,c	;volatile
 16972  0036BE  D02B               	goto	i2l8817
 16973                           
 16974                           ;interruptHandler.c: 19: INT1IF = 0;
 16975  0036C0  90F0               	bcf	intcon3,0,c	;volatile
 16976                           
 16977                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16978  0036C2  0100               	movlb	0	; () banked
 16979  0036C4  51FC               	movf	_machine_state& (0+255),w,b
 16980  0036C6  A4D8               	btfss	status,2,c
 16981  0036C8  D01B               	goto	i2l8811
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16985  0036CA  3881               	swapf	3969,w,c	;volatile
 16986  0036CC  0B0F               	andlw	15
 16987  0036CE  0B0F               	andlw	15
 16988  0036D0  6E49               	movwf	??_handler& (0+255),c
 16989  0036D2  6A4A               	clrf	(??_handler+1)& (0+255),c
 16990  0036D4  0EEF               	movlw	low _keys
 16991  0036D6  2449               	addwf	??_handler,w,c
 16992  0036D8  6EF6               	movwf	tblptrl,c
 16993  0036DA  0EFA               	movlw	high _keys
 16994  0036DC  204A               	addwfc	??_handler+1,w,c
 16995  0036DE  6EF7               	movwf	tblptrh,c
 16996  0036E0                     	if	1	;There are 3 active tblptr bytes
 16997  0036E0  6AF8               	clrf	tblptru,c
 16998  0036E2  0E00               	movlw	low (__mediumconst shr (0+16))
 16999  0036E4  22F8               	addwfc	tblptru,f,c
 17000  0036E6                     	endif
 17001  0036E6  0008               	tblrd		*
 17002  0036E8  CFF5 F07D          	movff	tablat,_input	;volatile
 17003                           
 17004                           ; BSR set to: 0
 17005                           ;interruptHandler.c: 23: if(input == '*'){
 17006  0036EC  0E2A               	movlw	42
 17007  0036EE  187D               	xorwf	_input,w,c	;volatile
 17008  0036F0  A4D8               	btfss	status,2,c
 17009  0036F2  D004               	goto	i2l8809
 17010                           
 17011                           ; BSR set to: 0
 17012                           ;interruptHandler.c: 24: machine_state = Testing_state;
 17013  0036F4  0E03               	movlw	3
 17014  0036F6  0100               	movlb	0	; () banked
 17015  0036F8  6FFC               	movwf	_machine_state& (0+255),b
 17016                           
 17017                           ;interruptHandler.c: 25: }
 17018  0036FA  D002               	goto	i2l8811
 17019  0036FC                     i2l8809:
 17020                           
 17021                           ; BSR set to: 0
 17022                           ;interruptHandler.c: 26: else{
 17023                           ;interruptHandler.c: 27: updateMenu();
 17024  0036FC  ECF3  F012         	call	_updateMenu	;wreg free
 17025  003700                     i2l8811:
 17026                           
 17027                           ;interruptHandler.c: 28: }
 17028                           ;interruptHandler.c: 29: }
 17029                           ;interruptHandler.c: 30: if(machine_state == Sorting_state){
 17030  003700  0100               	movlb	0	; () banked
 17031  003702  05FC               	decf	_machine_state& (0+255),w,b
 17032  003704  A4D8               	btfss	status,2,c
 17033  003706  D007               	goto	i2l8817
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;interruptHandler.c: 31: if(input == '*'){
 17037  003708  0E2A               	movlw	42
 17038  00370A  187D               	xorwf	_input,w,c	;volatile
 17039  00370C  A4D8               	btfss	status,2,c
 17040  00370E  D003               	goto	i2l8817
 17041                           
 17042                           ; BSR set to: 0
 17043                           ;interruptHandler.c: 32: machine_state = DoneSorting_state;
 17044  003710  0E02               	movlw	2
 17045  003712  0100               	movlb	0	; () banked
 17046  003714  6FFC               	movwf	_machine_state& (0+255),b
 17047  003716                     i2l8817:
 17048                           
 17049                           ;interruptHandler.c: 33: }
 17050                           ;interruptHandler.c: 34: }
 17051                           ;interruptHandler.c: 35: }
 17052                           ;interruptHandler.c: 38: if(TMR0IF){
 17053  003716  A4F2               	btfss	intcon,2,c	;volatile
 17054  003718  D00C               	goto	i2l8831
 17055                           
 17056                           ;interruptHandler.c: 39: TMR0IF = 0;
 17057  00371A  94F2               	bcf	intcon,2,c	;volatile
 17058                           
 17059                           ;interruptHandler.c: 40: if(machine_state == Sorting_state){
 17060  00371C  0100               	movlb	0	; () banked
 17061  00371E  05FC               	decf	_machine_state& (0+255),w,b
 17062  003720  A4D8               	btfss	status,2,c
 17063  003722  D007               	goto	i2l8831
 17064                           
 17065                           ; BSR set to: 0
 17066                           ;interruptHandler.c: 41: printSortTimer();
 17067  003724  EC9E  F017         	call	_printSortTimer	;wreg free
 17068                           
 17069                           ;interruptHandler.c: 43: TMR0H = 0b10000101;
 17070  003728  0E85               	movlw	133
 17071  00372A  6ED7               	movwf	4055,c	;volatile
 17072                           
 17073                           ;interruptHandler.c: 44: TMR0L = 0b11101110;
 17074  00372C  0EEE               	movlw	238
 17075  00372E  6ED6               	movwf	4054,c	;volatile
 17076                           
 17077                           ;interruptHandler.c: 45: TMR0ON = 1;
 17078  003730  8ED5               	bsf	4053,7,c	;volatile
 17079  003732                     i2l8831:
 17080                           
 17081                           ;interruptHandler.c: 46: }
 17082                           ;interruptHandler.c: 47: }
 17083                           ;interruptHandler.c: 50: if(TMR1IF){
 17084  003732  A09E               	btfss	3998,0,c	;volatile
 17085  003734  D024               	goto	i2l8855
 17086                           
 17087                           ;interruptHandler.c: 51: TMR1IF = 0;
 17088  003736  909E               	bcf	3998,0,c	;volatile
 17089                           
 17090                           ;interruptHandler.c: 52: TMR1ON = 0;
 17091  003738  90CD               	bcf	4045,0,c	;volatile
 17092                           
 17093                           ;interruptHandler.c: 53: if(machine_state == Sorting_state){
 17094  00373A  0100               	movlb	0	; () banked
 17095  00373C  05FC               	decf	_machine_state& (0+255),w,b
 17096  00373E  A4D8               	btfss	status,2,c
 17097  003740  D01E               	goto	i2l8855
 17098                           
 17099                           ; BSR set to: 0
 17100                           ;interruptHandler.c: 54: if(was_low_1){
 17101  003742  5079               	movf	_was_low_1,w,c	;volatile
 17102  003744  107A               	iorwf	_was_low_1+1,w,c	;volatile
 17103  003746  B4D8               	btfsc	status,2,c
 17104  003748  D00A               	goto	i2l906
 17105                           
 17106                           ; BSR set to: 0
 17107                           ;interruptHandler.c: 55: LATCbits.LATC1 = 1;
 17108  00374A  828B               	bsf	3979,1,c	;volatile
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;interruptHandler.c: 56: was_low_1 = 0;
 17112  00374C  0E00               	movlw	0
 17113  00374E  6E7A               	movwf	_was_low_1+1,c	;volatile
 17114  003750  0E00               	movlw	0
 17115  003752  6E79               	movwf	_was_low_1,c	;volatile
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;interruptHandler.c: 57: TMR1H = servoTimes[0];
 17119  003754  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;interruptHandler.c: 58: TMR1L = servoTimes[1];
 17123  003758  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 17124                           
 17125                           ;interruptHandler.c: 59: }
 17126  00375C  D00F               	goto	i2l8853
 17127  00375E                     i2l906:
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;interruptHandler.c: 60: else{
 17131                           ;interruptHandler.c: 61: LATCbits.LATC1 = 0;
 17132  00375E  928B               	bcf	3979,1,c	;volatile
 17133                           
 17134                           ; BSR set to: 0
 17135                           ;interruptHandler.c: 62: was_low_1 = 1;
 17136  003760  0E00               	movlw	0
 17137  003762  6E7A               	movwf	_was_low_1+1,c	;volatile
 17138  003764  0E01               	movlw	1
 17139  003766  6E79               	movwf	_was_low_1,c	;volatile
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;interruptHandler.c: 63: TMR1H = 20000 - servoTimes[0];
 17143  003768  0101               	movlb	1	; () banked
 17144  00376A  511C               	movf	_servoTimes& (0+255),w,b
 17145  00376C  0800               	sublw	0
 17146  00376E  0F20               	addlw	32
 17147  003770  6ECF               	movwf	4047,c	;volatile
 17148                           
 17149                           ; BSR set to: 1
 17150                           ;interruptHandler.c: 64: TMR1L = 20000 - servoTimes[1];
 17151  003772  0101               	movlb	1	; () banked
 17152  003774  511E               	movf	(_servoTimes+2)& (0+255),w,b
 17153  003776  0800               	sublw	0
 17154  003778  0F20               	addlw	32
 17155  00377A  6ECE               	movwf	4046,c	;volatile
 17156  00377C                     i2l8853:
 17157                           
 17158                           ;interruptHandler.c: 65: }
 17159                           ;interruptHandler.c: 66: TMR1ON = 1;
 17160  00377C  80CD               	bsf	4045,0,c	;volatile
 17161  00377E                     i2l8855:
 17162                           
 17163                           ;interruptHandler.c: 67: }
 17164                           ;interruptHandler.c: 68: }
 17165                           ;interruptHandler.c: 70: if(TMR3IF){
 17166  00377E  A2A1               	btfss	4001,1,c	;volatile
 17167  003780  D024               	goto	i2l912
 17168                           
 17169                           ;interruptHandler.c: 71: TMR3IF = 0;
 17170  003782  92A1               	bcf	4001,1,c	;volatile
 17171                           
 17172                           ;interruptHandler.c: 72: TMR3ON = 0;
 17173  003784  90B1               	bcf	4017,0,c	;volatile
 17174                           
 17175                           ;interruptHandler.c: 73: if(machine_state == Sorting_state){
 17176  003786  0100               	movlb	0	; () banked
 17177  003788  05FC               	decf	_machine_state& (0+255),w,b
 17178  00378A  A4D8               	btfss	status,2,c
 17179  00378C  D01E               	goto	i2l912
 17180                           
 17181                           ; BSR set to: 0
 17182                           ;interruptHandler.c: 74: if(was_low_3){
 17183  00378E  507B               	movf	_was_low_3,w,c	;volatile
 17184  003790  107C               	iorwf	_was_low_3+1,w,c	;volatile
 17185  003792  B4D8               	btfsc	status,2,c
 17186  003794  D00A               	goto	i2l910
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;interruptHandler.c: 75: LATCbits.LATC2 = 1;
 17190  003796  848B               	bsf	3979,2,c	;volatile
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;interruptHandler.c: 76: was_low_3 = 0;
 17194  003798  0E00               	movlw	0
 17195  00379A  6E7C               	movwf	_was_low_3+1,c	;volatile
 17196  00379C  0E00               	movlw	0
 17197  00379E  6E7B               	movwf	_was_low_3,c	;volatile
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;interruptHandler.c: 77: TMR3H = servoTimes[2];
 17201  0037A0  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 17202                           
 17203                           ; BSR set to: 0
 17204                           ;interruptHandler.c: 78: TMR3L = servoTimes[3];
 17205  0037A4  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 17206                           
 17207                           ;interruptHandler.c: 79: }
 17208  0037A8  D00F               	goto	i2l8877
 17209  0037AA                     i2l910:
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;interruptHandler.c: 80: else{
 17213                           ;interruptHandler.c: 81: LATCbits.LATC2 = 0;
 17214  0037AA  948B               	bcf	3979,2,c	;volatile
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;interruptHandler.c: 82: was_low_3 = 1;
 17218  0037AC  0E00               	movlw	0
 17219  0037AE  6E7C               	movwf	_was_low_3+1,c	;volatile
 17220  0037B0  0E01               	movlw	1
 17221  0037B2  6E7B               	movwf	_was_low_3,c	;volatile
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;interruptHandler.c: 83: TMR3H = 20000 - servoTimes[2];
 17225  0037B4  0101               	movlb	1	; () banked
 17226  0037B6  5120               	movf	(_servoTimes+4)& (0+255),w,b
 17227  0037B8  0800               	sublw	0
 17228  0037BA  0F20               	addlw	32
 17229  0037BC  6EB3               	movwf	4019,c	;volatile
 17230                           
 17231                           ; BSR set to: 1
 17232                           ;interruptHandler.c: 84: TMR3L = 20000 - servoTimes[3];
 17233  0037BE  0101               	movlb	1	; () banked
 17234  0037C0  5122               	movf	(_servoTimes+6)& (0+255),w,b
 17235  0037C2  0800               	sublw	0
 17236  0037C4  0F20               	addlw	32
 17237  0037C6  6EB2               	movwf	4018,c	;volatile
 17238  0037C8                     i2l8877:
 17239                           
 17240                           ;interruptHandler.c: 85: }
 17241                           ;interruptHandler.c: 86: TMR3ON = 1;
 17242  0037C8  80B1               	bsf	4017,0,c	;volatile
 17243  0037CA                     i2l912:
 17244  0037CA  C058  FFF5         	movff	??_handler+15,tablat
 17245  0037CE  C057  FFF8         	movff	??_handler+14,tblptru
 17246  0037D2  C056  FFF7         	movff	??_handler+13,tblptrh
 17247  0037D6  C055  FFF6         	movff	??_handler+12,tblptrl
 17248  0037DA  C054  FFF4         	movff	??_handler+11,prodh
 17249  0037DE  C053  FFF3         	movff	??_handler+10,prodl
 17250  0037E2  C052  FFDA         	movff	??_handler+9,fsr2h
 17251  0037E6  C051  FFD9         	movff	??_handler+8,fsr2l
 17252  0037EA  C050  FFE2         	movff	??_handler+7,fsr1h
 17253  0037EE  C04F  FFE1         	movff	??_handler+6,fsr1l
 17254  0037F2  C04E  FFEA         	movff	??_handler+5,fsr0h
 17255  0037F6  C04D  FFE9         	movff	??_handler+4,fsr0l
 17256  0037FA  C04C  FFFB         	movff	??_handler+3,pclatu
 17257  0037FE  C04B  FFFA         	movff	??_handler+2,pclath
 17258  003802  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17259  003804  0011               	retfie		f
 17260  003806                     __end_of_handler:
 17261                           	opt stack 0
 17262                           pclatu	equ	0xFFB
 17263                           pclath	equ	0xFFA
 17264                           tblptru	equ	0xFF8
 17265                           tblptrh	equ	0xFF7
 17266                           tblptrl	equ	0xFF6
 17267                           tablat	equ	0xFF5
 17268                           prodh	equ	0xFF4
 17269                           prodl	equ	0xFF3
 17270                           intcon	equ	0xFF2
 17271                           intcon2	equ	0xFF1
 17272                           intcon3	equ	0xFF0
 17273                           indf0	equ	0xFEF
 17274                           postinc0	equ	0xFEE
 17275                           fsr0h	equ	0xFEA
 17276                           fsr0l	equ	0xFE9
 17277                           wreg	equ	0xFE8
 17278                           postdec1	equ	0xFE5
 17279                           fsr1h	equ	0xFE2
 17280                           fsr1l	equ	0xFE1
 17281                           indf2	equ	0xFDF
 17282                           postinc2	equ	0xFDE
 17283                           postdec2	equ	0xFDD
 17284                           fsr2h	equ	0xFDA
 17285                           fsr2l	equ	0xFD9
 17286                           status	equ	0xFD8
 17287                           
 17288 ;; *************** function _updateMenu *****************
 17289 ;; Defined at:
 17290 ;;		line 213 in file "UI.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;		None
 17293 ;; Auto vars:     Size  Location     Type
 17294 ;;		None
 17295 ;; Return value:  Size  Location     Type
 17296 ;;                  1    wreg      void 
 17297 ;; Registers used:
 17298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17299 ;; Tracked objects:
 17300 ;;		On entry : 0/0
 17301 ;;		On exit  : 0/0
 17302 ;;		Unchanged: 0/0
 17303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;Total ram usage:        2 bytes
 17309 ;; Hardware stack levels used:    1
 17310 ;; Hardware stack levels required when called:    5
 17311 ;; This function calls:
 17312 ;;		_change_state_to_logs_11
 17313 ;;		_change_state_to_logs_12
 17314 ;;		_change_state_to_logs_22
 17315 ;;		_change_state_to_logs_23
 17316 ;;		_change_state_to_logs_33
 17317 ;;		_change_state_to_logs_34
 17318 ;;		_change_state_to_menu_11
 17319 ;;		_change_state_to_menu_23
 17320 ;;		_dispLogs
 17321 ;;		_inputHandler
 17322 ;;		i2_change_state_to_menu_12
 17323 ;;		i2_change_state_to_menu_22
 17324 ;;		i2_change_state_to_menu_start
 17325 ;; This function is called by:
 17326 ;;		_handler
 17327 ;; This function uses a non-reentrant model
 17328 ;;
 17329                           
 17330                           	psect	text60
 17331  0025E6                     __ptext60:
 17332                           	opt stack 0
 17333  0025E6                     _updateMenu:
 17334                           	opt stack 18
 17335                           
 17336                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 17337                           
 17338                           ;incstack = 0
 17339  0025E6  0E00               	movlw	0
 17340  0025E8  6E78               	movwf	_up+1,c
 17341  0025EA  0E00               	movlw	0
 17342  0025EC  6E77               	movwf	_up,c
 17343  0025EE  0E00               	movlw	0
 17344  0025F0  6E62               	movwf	_down+1,c
 17345  0025F2  0E00               	movlw	0
 17346  0025F4  6E61               	movwf	_down,c
 17347  0025F6  0E00               	movlw	0
 17348  0025F8  6E64               	movwf	_enter+1,c
 17349  0025FA  0E00               	movlw	0
 17350  0025FC  6E63               	movwf	_enter,c
 17351  0025FE  0E00               	movlw	0
 17352  002600  6E5A               	movwf	_back+1,c
 17353  002602  0E00               	movlw	0
 17354  002604  6E59               	movwf	_back,c
 17355                           
 17356                           ;UI.c: 215: (INTCONbits.GIE = 0);
 17357  002606  9EF2               	bcf	intcon,7,c	;volatile
 17358                           
 17359                           ;UI.c: 217: if (inputHandler()
 17360                           ;UI.c: 220: ){
 17361  002608  ECA9  F018         	call	_inputHandler	;wreg free
 17362  00260C  502A               	movf	?_inputHandler,w,c
 17363  00260E  102B               	iorwf	?_inputHandler+1,w,c
 17364  002610  A4D8               	btfss	status,2,c
 17365  002612  D112               	goto	i2l8535
 17366  002614  D146               	goto	i2l257
 17367  002616                     i2l8387:
 17368                           
 17369                           ;UI.c: 224: change_state_to_menu_11();
 17370  002616  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 17371                           
 17372                           ;UI.c: 225: break;
 17373  00261A  D143               	goto	i2l257
 17374  00261C                     i2l8389:
 17375                           
 17376                           ;UI.c: 228: if(up){
 17377  00261C  5077               	movf	_up,w,c
 17378  00261E  1078               	iorwf	_up+1,w,c
 17379  002620  B4D8               	btfsc	status,2,c
 17380  002622  D003               	goto	i2l8393
 17381                           
 17382                           ;UI.c: 229: change_state_to_menu_23();
 17383  002624  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17384                           
 17385                           ;UI.c: 230: }
 17386  002628  D13C               	goto	i2l257
 17387  00262A                     i2l8393:
 17388                           
 17389                           ;UI.c: 231: else if(down){
 17390  00262A  5061               	movf	_down,w,c
 17391  00262C  1062               	iorwf	_down+1,w,c
 17392  00262E  B4D8               	btfsc	status,2,c
 17393  002630  D003               	goto	i2l8397
 17394                           
 17395                           ;UI.c: 232: change_state_to_menu_12();
 17396  002632  EC74  F025         	call	i2_change_state_to_menu_12	;wreg free
 17397                           
 17398                           ;UI.c: 233: }
 17399  002636  D135               	goto	i2l257
 17400  002638                     i2l8397:
 17401                           
 17402                           ;UI.c: 234: else if(enter){
 17403  002638  5063               	movf	_enter,w,c
 17404  00263A  1064               	iorwf	_enter+1,w,c
 17405  00263C  B4D8               	btfsc	status,2,c
 17406  00263E  D131               	goto	i2l257
 17407                           
 17408                           ;UI.c: 235: change_state_to_menu_start();
 17409  002640  ECCE  F026         	call	i2_change_state_to_menu_start	;wreg free
 17410                           
 17411                           ;UI.c: 236: }
 17412                           ;UI.c: 237: break;
 17413  002644  D12E               	goto	i2l257
 17414  002646                     i2l8401:
 17415                           
 17416                           ;UI.c: 240: if(up){
 17417  002646  5077               	movf	_up,w,c
 17418  002648  1078               	iorwf	_up+1,w,c
 17419  00264A  B4D8               	btfsc	status,2,c
 17420  00264C  D003               	goto	i2l8405
 17421                           
 17422                           ;UI.c: 241: change_state_to_menu_11();
 17423  00264E  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 17424                           
 17425                           ;UI.c: 242: }
 17426  002652  D127               	goto	i2l257
 17427  002654                     i2l8405:
 17428                           
 17429                           ;UI.c: 243: else if(down){
 17430  002654  5061               	movf	_down,w,c
 17431  002656  1062               	iorwf	_down+1,w,c
 17432  002658  B4D8               	btfsc	status,2,c
 17433  00265A  D011               	goto	i2l8421
 17434                           
 17435                           ;UI.c: 244: change_state_to_menu_23();
 17436  00265C  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17437                           
 17438                           ;UI.c: 245: }
 17439  002660  D120               	goto	i2l257
 17440  002662                     i2l8413:
 17441                           
 17442                           ;UI.c: 252: if(up){
 17443  002662  5077               	movf	_up,w,c
 17444  002664  1078               	iorwf	_up+1,w,c
 17445  002666  B4D8               	btfsc	status,2,c
 17446  002668  D003               	goto	i2l8417
 17447                           
 17448                           ;UI.c: 253: change_state_to_menu_11();
 17449  00266A  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 17450                           
 17451                           ;UI.c: 254: }
 17452  00266E  D119               	goto	i2l257
 17453  002670                     i2l8417:
 17454                           
 17455                           ;UI.c: 255: else if(down){
 17456  002670  5061               	movf	_down,w,c
 17457  002672  1062               	iorwf	_down+1,w,c
 17458  002674  B4D8               	btfsc	status,2,c
 17459  002676  D003               	goto	i2l8421
 17460                           
 17461                           ;UI.c: 256: change_state_to_menu_23();
 17462  002678  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17463                           
 17464                           ;UI.c: 257: }
 17465  00267C  D112               	goto	i2l257
 17466  00267E                     i2l8421:
 17467                           
 17468                           ;UI.c: 258: else if(enter){
 17469  00267E  5063               	movf	_enter,w,c
 17470  002680  1064               	iorwf	_enter+1,w,c
 17471  002682  B4D8               	btfsc	status,2,c
 17472  002684  D10E               	goto	i2l257
 17473                           
 17474                           ;UI.c: 259: machine_state = Sorting_state;
 17475  002686  0E01               	movlw	1
 17476  002688  0100               	movlb	0	; () banked
 17477  00268A  6FFC               	movwf	_machine_state& (0+255),b
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;UI.c: 260: }
 17481                           ;UI.c: 261: break;
 17482                           
 17483                           ; BSR set to: 0
 17484                           
 17485                           ; BSR set to: 0
 17486  00268C  D10A               	goto	i2l257
 17487  00268E                     i2l8425:
 17488                           
 17489                           ;UI.c: 264: if(up){
 17490  00268E  5077               	movf	_up,w,c
 17491  002690  1078               	iorwf	_up+1,w,c
 17492  002692  B4D8               	btfsc	status,2,c
 17493  002694  D003               	goto	i2l8429
 17494                           
 17495                           ;UI.c: 265: change_state_to_menu_22();
 17496  002696  EC5C  F025         	call	i2_change_state_to_menu_22	;wreg free
 17497                           
 17498                           ;UI.c: 266: }
 17499  00269A  D103               	goto	i2l257
 17500  00269C                     i2l8429:
 17501                           
 17502                           ;UI.c: 267: else if(down){
 17503  00269C  5061               	movf	_down,w,c
 17504  00269E  1062               	iorwf	_down+1,w,c
 17505  0026A0  B4D8               	btfsc	status,2,c
 17506  0026A2  D003               	goto	i2l8433
 17507                           
 17508                           ;UI.c: 268: change_state_to_menu_11();
 17509  0026A4  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 17510                           
 17511                           ;UI.c: 269: }
 17512  0026A8  D0FC               	goto	i2l257
 17513  0026AA                     i2l8433:
 17514                           
 17515                           ;UI.c: 270: else if(enter){
 17516  0026AA  5063               	movf	_enter,w,c
 17517  0026AC  1064               	iorwf	_enter+1,w,c
 17518  0026AE  B4D8               	btfsc	status,2,c
 17519  0026B0  D0F8               	goto	i2l257
 17520                           
 17521                           ;UI.c: 271: change_state_to_logs_11();
 17522  0026B2  EC1C  F026         	call	_change_state_to_logs_11	;wreg free
 17523                           
 17524                           ;UI.c: 272: }
 17525                           ;UI.c: 273: break;
 17526  0026B6  D0F5               	goto	i2l257
 17527  0026B8                     i2l8437:
 17528                           
 17529                           ;UI.c: 276: if(up){
 17530  0026B8  5077               	movf	_up,w,c
 17531  0026BA  1078               	iorwf	_up+1,w,c
 17532  0026BC  B4D8               	btfsc	status,2,c
 17533  0026BE  D003               	goto	i2l8441
 17534                           
 17535                           ;UI.c: 277: change_state_to_logs_34();
 17536  0026C0  ECBC  F025         	call	_change_state_to_logs_34	;wreg free
 17537                           
 17538                           ;UI.c: 278: }
 17539  0026C4  D0EE               	goto	i2l257
 17540  0026C6                     i2l8441:
 17541                           
 17542                           ;UI.c: 279: else if(down){
 17543  0026C6  5061               	movf	_down,w,c
 17544  0026C8  1062               	iorwf	_down+1,w,c
 17545  0026CA  B4D8               	btfsc	status,2,c
 17546  0026CC  D003               	goto	i2l8445
 17547                           
 17548                           ;UI.c: 280: change_state_to_logs_12();
 17549  0026CE  EC04  F026         	call	_change_state_to_logs_12	;wreg free
 17550                           
 17551                           ;UI.c: 281: }
 17552  0026D2  D0E7               	goto	i2l257
 17553  0026D4                     i2l8445:
 17554                           
 17555                           ;UI.c: 282: else if(enter){
 17556  0026D4  5063               	movf	_enter,w,c
 17557  0026D6  1064               	iorwf	_enter+1,w,c
 17558  0026D8  B4D8               	btfsc	status,2,c
 17559  0026DA  D007               	goto	i2l8449
 17560                           
 17561                           ;UI.c: 283: dispLogs(1);
 17562  0026DC  0E00               	movlw	0
 17563  0026DE  6E13               	movwf	dispLogs@myLog+1,c
 17564  0026E0  0E01               	movlw	1
 17565  0026E2  6E12               	movwf	dispLogs@myLog,c
 17566  0026E4  EC08  F027         	call	_dispLogs	;wreg free
 17567                           
 17568                           ;UI.c: 284: }
 17569  0026E8  D0DC               	goto	i2l257
 17570  0026EA                     i2l8449:
 17571                           
 17572                           ;UI.c: 285: else if(back){
 17573  0026EA  5059               	movf	_back,w,c
 17574  0026EC  105A               	iorwf	_back+1,w,c
 17575  0026EE  B4D8               	btfsc	status,2,c
 17576  0026F0  D0D8               	goto	i2l257
 17577                           
 17578                           ;UI.c: 286: change_state_to_menu_23();
 17579  0026F2  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17580                           
 17581                           ;UI.c: 287: }
 17582                           ;UI.c: 288: break;
 17583  0026F6  D0D5               	goto	i2l257
 17584  0026F8                     i2l8453:
 17585                           
 17586                           ;UI.c: 291: if(up){
 17587  0026F8  5077               	movf	_up,w,c
 17588  0026FA  1078               	iorwf	_up+1,w,c
 17589  0026FC  B4D8               	btfsc	status,2,c
 17590  0026FE  D003               	goto	i2l8457
 17591                           
 17592                           ;UI.c: 292: change_state_to_logs_11();
 17593  002700  EC1C  F026         	call	_change_state_to_logs_11	;wreg free
 17594                           
 17595                           ;UI.c: 293: }
 17596  002704  D0CE               	goto	i2l257
 17597  002706                     i2l8457:
 17598                           
 17599                           ;UI.c: 294: else if(down){
 17600  002706  5061               	movf	_down,w,c
 17601  002708  1062               	iorwf	_down+1,w,c
 17602  00270A  B4D8               	btfsc	status,2,c
 17603  00270C  D003               	goto	i2l8461
 17604                           
 17605                           ;UI.c: 295: change_state_to_logs_23();
 17606  00270E  EC62  F026         	call	_change_state_to_logs_23	;wreg free
 17607                           
 17608                           ;UI.c: 296: }
 17609  002712  D0C7               	goto	i2l257
 17610  002714                     i2l8461:
 17611                           
 17612                           ;UI.c: 297: else if(enter){
 17613  002714  5063               	movf	_enter,w,c
 17614  002716  1064               	iorwf	_enter+1,w,c
 17615  002718  B4D8               	btfsc	status,2,c
 17616  00271A  D007               	goto	i2l8465
 17617                           
 17618                           ;UI.c: 298: dispLogs(2);
 17619  00271C  0E00               	movlw	0
 17620  00271E  6E13               	movwf	dispLogs@myLog+1,c
 17621  002720  0E02               	movlw	2
 17622  002722  6E12               	movwf	dispLogs@myLog,c
 17623  002724  EC08  F027         	call	_dispLogs	;wreg free
 17624                           
 17625                           ;UI.c: 299: }
 17626  002728  D0BC               	goto	i2l257
 17627  00272A                     i2l8465:
 17628                           
 17629                           ;UI.c: 300: else if(back){
 17630  00272A  5059               	movf	_back,w,c
 17631  00272C  105A               	iorwf	_back+1,w,c
 17632  00272E  B4D8               	btfsc	status,2,c
 17633  002730  D0B8               	goto	i2l257
 17634                           
 17635                           ;UI.c: 301: change_state_to_menu_23();
 17636  002732  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17637                           
 17638                           ;UI.c: 302: }
 17639                           ;UI.c: 303: break;
 17640  002736  D0B5               	goto	i2l257
 17641  002738                     i2l8469:
 17642                           
 17643                           ;UI.c: 306: if(up){
 17644  002738  5077               	movf	_up,w,c
 17645  00273A  1078               	iorwf	_up+1,w,c
 17646  00273C  B4D8               	btfsc	status,2,c
 17647  00273E  D003               	goto	i2l8473
 17648                           
 17649                           ;UI.c: 307: change_state_to_logs_11();
 17650  002740  EC1C  F026         	call	_change_state_to_logs_11	;wreg free
 17651                           
 17652                           ;UI.c: 308: }
 17653  002744  D0AE               	goto	i2l257
 17654  002746                     i2l8473:
 17655                           
 17656                           ;UI.c: 309: else if(down){
 17657  002746  5061               	movf	_down,w,c
 17658  002748  1062               	iorwf	_down+1,w,c
 17659  00274A  B4D8               	btfsc	status,2,c
 17660  00274C  D003               	goto	i2l8477
 17661                           
 17662                           ;UI.c: 310: change_state_to_logs_23();
 17663  00274E  EC62  F026         	call	_change_state_to_logs_23	;wreg free
 17664                           
 17665                           ;UI.c: 311: }
 17666  002752  D0A7               	goto	i2l257
 17667  002754                     i2l8477:
 17668                           
 17669                           ;UI.c: 312: else if(enter){
 17670  002754  5063               	movf	_enter,w,c
 17671  002756  1064               	iorwf	_enter+1,w,c
 17672  002758  B4D8               	btfsc	status,2,c
 17673  00275A  D007               	goto	i2l8481
 17674                           
 17675                           ;UI.c: 313: dispLogs(2);
 17676  00275C  0E00               	movlw	0
 17677  00275E  6E13               	movwf	dispLogs@myLog+1,c
 17678  002760  0E02               	movlw	2
 17679  002762  6E12               	movwf	dispLogs@myLog,c
 17680  002764  EC08  F027         	call	_dispLogs	;wreg free
 17681                           
 17682                           ;UI.c: 314: }
 17683  002768  D09C               	goto	i2l257
 17684  00276A                     i2l8481:
 17685                           
 17686                           ;UI.c: 315: else if(back){
 17687  00276A  5059               	movf	_back,w,c
 17688  00276C  105A               	iorwf	_back+1,w,c
 17689  00276E  B4D8               	btfsc	status,2,c
 17690  002770  D098               	goto	i2l257
 17691                           
 17692                           ;UI.c: 316: change_state_to_menu_23();
 17693  002772  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17694                           
 17695                           ;UI.c: 317: }
 17696                           ;UI.c: 318: break;
 17697  002776  D095               	goto	i2l257
 17698  002778                     i2l8485:
 17699                           
 17700                           ;UI.c: 321: if(up){
 17701  002778  5077               	movf	_up,w,c
 17702  00277A  1078               	iorwf	_up+1,w,c
 17703  00277C  B4D8               	btfsc	status,2,c
 17704  00277E  D003               	goto	i2l8489
 17705                           
 17706                           ;UI.c: 322: change_state_to_logs_22();
 17707  002780  ECEC  F025         	call	_change_state_to_logs_22	;wreg free
 17708                           
 17709                           ;UI.c: 323: }
 17710  002784  D08E               	goto	i2l257
 17711  002786                     i2l8489:
 17712                           
 17713                           ;UI.c: 324: else if(down){
 17714  002786  5061               	movf	_down,w,c
 17715  002788  1062               	iorwf	_down+1,w,c
 17716  00278A  B4D8               	btfsc	status,2,c
 17717  00278C  D003               	goto	i2l8493
 17718                           
 17719                           ;UI.c: 325: change_state_to_logs_34();
 17720  00278E  ECBC  F025         	call	_change_state_to_logs_34	;wreg free
 17721                           
 17722                           ;UI.c: 326: }
 17723  002792  D087               	goto	i2l257
 17724  002794                     i2l8493:
 17725                           
 17726                           ;UI.c: 327: else if(enter){
 17727  002794  5063               	movf	_enter,w,c
 17728  002796  1064               	iorwf	_enter+1,w,c
 17729  002798  B4D8               	btfsc	status,2,c
 17730  00279A  D007               	goto	i2l8497
 17731                           
 17732                           ;UI.c: 328: dispLogs(3);
 17733  00279C  0E00               	movlw	0
 17734  00279E  6E13               	movwf	dispLogs@myLog+1,c
 17735  0027A0  0E03               	movlw	3
 17736  0027A2  6E12               	movwf	dispLogs@myLog,c
 17737  0027A4  EC08  F027         	call	_dispLogs	;wreg free
 17738                           
 17739                           ;UI.c: 329: }
 17740  0027A8  D07C               	goto	i2l257
 17741  0027AA                     i2l8497:
 17742                           
 17743                           ;UI.c: 330: else if(back){
 17744  0027AA  5059               	movf	_back,w,c
 17745  0027AC  105A               	iorwf	_back+1,w,c
 17746  0027AE  B4D8               	btfsc	status,2,c
 17747  0027B0  D078               	goto	i2l257
 17748                           
 17749                           ;UI.c: 331: change_state_to_menu_23();
 17750  0027B2  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17751                           
 17752                           ;UI.c: 332: }
 17753                           ;UI.c: 333: break;
 17754  0027B6  D075               	goto	i2l257
 17755  0027B8                     i2l8501:
 17756                           
 17757                           ;UI.c: 336: if(up){
 17758  0027B8  5077               	movf	_up,w,c
 17759  0027BA  1078               	iorwf	_up+1,w,c
 17760  0027BC  B4D8               	btfsc	status,2,c
 17761  0027BE  D003               	goto	i2l8505
 17762                           
 17763                           ;UI.c: 337: change_state_to_logs_22();
 17764  0027C0  ECEC  F025         	call	_change_state_to_logs_22	;wreg free
 17765                           
 17766                           ;UI.c: 338: }
 17767  0027C4  D06E               	goto	i2l257
 17768  0027C6                     i2l8505:
 17769                           
 17770                           ;UI.c: 339: else if(down){
 17771  0027C6  5061               	movf	_down,w,c
 17772  0027C8  1062               	iorwf	_down+1,w,c
 17773  0027CA  B4D8               	btfsc	status,2,c
 17774  0027CC  D003               	goto	i2l8509
 17775                           
 17776                           ;UI.c: 340: change_state_to_logs_34();
 17777  0027CE  ECBC  F025         	call	_change_state_to_logs_34	;wreg free
 17778                           
 17779                           ;UI.c: 341: }
 17780  0027D2  D067               	goto	i2l257
 17781  0027D4                     i2l8509:
 17782                           
 17783                           ;UI.c: 342: else if(enter){
 17784  0027D4  5063               	movf	_enter,w,c
 17785  0027D6  1064               	iorwf	_enter+1,w,c
 17786  0027D8  B4D8               	btfsc	status,2,c
 17787  0027DA  D007               	goto	i2l8513
 17788                           
 17789                           ;UI.c: 343: dispLogs(3);
 17790  0027DC  0E00               	movlw	0
 17791  0027DE  6E13               	movwf	dispLogs@myLog+1,c
 17792  0027E0  0E03               	movlw	3
 17793  0027E2  6E12               	movwf	dispLogs@myLog,c
 17794  0027E4  EC08  F027         	call	_dispLogs	;wreg free
 17795                           
 17796                           ;UI.c: 344: }
 17797  0027E8  D05C               	goto	i2l257
 17798  0027EA                     i2l8513:
 17799                           
 17800                           ;UI.c: 345: else if(back){
 17801  0027EA  5059               	movf	_back,w,c
 17802  0027EC  105A               	iorwf	_back+1,w,c
 17803  0027EE  B4D8               	btfsc	status,2,c
 17804  0027F0  D058               	goto	i2l257
 17805                           
 17806                           ;UI.c: 346: change_state_to_menu_23();
 17807  0027F2  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17808                           
 17809                           ;UI.c: 347: }
 17810                           ;UI.c: 348: break;
 17811  0027F6  D055               	goto	i2l257
 17812  0027F8                     i2l8517:
 17813                           
 17814                           ;UI.c: 351: if(up){
 17815  0027F8  5077               	movf	_up,w,c
 17816  0027FA  1078               	iorwf	_up+1,w,c
 17817  0027FC  B4D8               	btfsc	status,2,c
 17818  0027FE  D003               	goto	i2l8521
 17819                           
 17820                           ;UI.c: 352: change_state_to_logs_33();
 17821  002800  ECD4  F025         	call	_change_state_to_logs_33	;wreg free
 17822                           
 17823                           ;UI.c: 353: }
 17824  002804  D04E               	goto	i2l257
 17825  002806                     i2l8521:
 17826                           
 17827                           ;UI.c: 354: else if(down){
 17828  002806  5061               	movf	_down,w,c
 17829  002808  1062               	iorwf	_down+1,w,c
 17830  00280A  B4D8               	btfsc	status,2,c
 17831  00280C  D003               	goto	i2l8525
 17832                           
 17833                           ;UI.c: 355: change_state_to_logs_11();
 17834  00280E  EC1C  F026         	call	_change_state_to_logs_11	;wreg free
 17835                           
 17836                           ;UI.c: 356: }
 17837  002812  D047               	goto	i2l257
 17838  002814                     i2l8525:
 17839                           
 17840                           ;UI.c: 357: else if(enter){
 17841  002814  5063               	movf	_enter,w,c
 17842  002816  1064               	iorwf	_enter+1,w,c
 17843  002818  B4D8               	btfsc	status,2,c
 17844  00281A  D007               	goto	i2l8529
 17845                           
 17846                           ;UI.c: 358: dispLogs(4);
 17847  00281C  0E00               	movlw	0
 17848  00281E  6E13               	movwf	dispLogs@myLog+1,c
 17849  002820  0E04               	movlw	4
 17850  002822  6E12               	movwf	dispLogs@myLog,c
 17851  002824  EC08  F027         	call	_dispLogs	;wreg free
 17852                           
 17853                           ;UI.c: 359: }
 17854  002828  D03C               	goto	i2l257
 17855  00282A                     i2l8529:
 17856                           
 17857                           ;UI.c: 360: else if(back){
 17858  00282A  5059               	movf	_back,w,c
 17859  00282C  105A               	iorwf	_back+1,w,c
 17860  00282E  B4D8               	btfsc	status,2,c
 17861  002830  D038               	goto	i2l257
 17862                           
 17863                           ;UI.c: 361: change_state_to_menu_23();
 17864  002832  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 17865                           
 17866                           ;UI.c: 367: }
 17867                           
 17868                           ;UI.c: 366: break;
 17869                           
 17870                           ;UI.c: 365: default:
 17871                           
 17872                           ;UI.c: 362: }
 17873                           ;UI.c: 363: break;
 17874  002836  D035               	goto	i2l257
 17875  002838                     i2l8535:
 17876  002838  C0E6  F043         	movff	_cur_state,??_updateMenu
 17877  00283C  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17878                           
 17879                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17880                           ; Switch size 1, requested type "space"
 17881                           ; Number of cases is 3, Range of values is 0 to 4
 17882                           ; switch strategies available:
 17883                           ; Name         Instructions Cycles
 17884                           ; simple_byte           10     6 (average)
 17885                           ;	Chosen strategy is simple_byte
 17886  002840  5044               	movf	??_updateMenu+1,w,c
 17887  002842  0A00               	xorlw	0	; case 0
 17888  002844  B4D8               	btfsc	status,2,c
 17889  002846  D007               	goto	i2l9187
 17890  002848  0A03               	xorlw	3	; case 3
 17891  00284A  B4D8               	btfsc	status,2,c
 17892  00284C  D015               	goto	i2l9189
 17893  00284E  0A07               	xorlw	7	; case 4
 17894  002850  B4D8               	btfsc	status,2,c
 17895  002852  D020               	goto	i2l9191
 17896  002854  D026               	goto	i2l257
 17897  002856                     i2l9187:
 17898                           
 17899                           ; Switch size 1, requested type "space"
 17900                           ; Number of cases is 5, Range of values is 0 to 23
 17901                           ; switch strategies available:
 17902                           ; Name         Instructions Cycles
 17903                           ; simple_byte           16     9 (average)
 17904                           ;	Chosen strategy is simple_byte
 17905  002856  5043               	movf	??_updateMenu,w,c
 17906  002858  0A00               	xorlw	0	; case 0
 17907  00285A  B4D8               	btfsc	status,2,c
 17908  00285C  D6DC               	goto	i2l8387
 17909  00285E  0A0B               	xorlw	11	; case 11
 17910  002860  B4D8               	btfsc	status,2,c
 17911  002862  D6DC               	goto	i2l8389
 17912  002864  0A07               	xorlw	7	; case 12
 17913  002866  B4D8               	btfsc	status,2,c
 17914  002868  D6EE               	goto	i2l8401
 17915  00286A  0A1A               	xorlw	26	; case 22
 17916  00286C  B4D8               	btfsc	status,2,c
 17917  00286E  D6F9               	goto	i2l8413
 17918  002870  0A01               	xorlw	1	; case 23
 17919  002872  B4D8               	btfsc	status,2,c
 17920  002874  D70C               	goto	i2l8425
 17921  002876  D015               	goto	i2l257
 17922  002878                     i2l9189:
 17923                           
 17924                           ; Switch size 1, requested type "space"
 17925                           ; Number of cases is 4, Range of values is 243 to 255
 17926                           ; switch strategies available:
 17927                           ; Name         Instructions Cycles
 17928                           ; simple_byte           13     7 (average)
 17929                           ;	Chosen strategy is simple_byte
 17930  002878  5043               	movf	??_updateMenu,w,c
 17931  00287A  0AF3               	xorlw	243	; case 243
 17932  00287C  B4D8               	btfsc	status,2,c
 17933  00287E  D71C               	goto	i2l8437
 17934  002880  0A07               	xorlw	7	; case 244
 17935  002882  B4D8               	btfsc	status,2,c
 17936  002884  D739               	goto	i2l8453
 17937  002886  0A0A               	xorlw	10	; case 254
 17938  002888  B4D8               	btfsc	status,2,c
 17939  00288A  D756               	goto	i2l8469
 17940  00288C  0A01               	xorlw	1	; case 255
 17941  00288E  B4D8               	btfsc	status,2,c
 17942  002890  D773               	goto	i2l8485
 17943  002892  D007               	goto	i2l257
 17944  002894                     i2l9191:
 17945                           
 17946                           ; Switch size 1, requested type "space"
 17947                           ; Number of cases is 2, Range of values is 9 to 10
 17948                           ; switch strategies available:
 17949                           ; Name         Instructions Cycles
 17950                           ; simple_byte            7     4 (average)
 17951                           ;	Chosen strategy is simple_byte
 17952  002894  5043               	movf	??_updateMenu,w,c
 17953  002896  0A09               	xorlw	9	; case 9
 17954  002898  B4D8               	btfsc	status,2,c
 17955  00289A  D78E               	goto	i2l8501
 17956  00289C  0A03               	xorlw	3	; case 10
 17957  00289E  B4D8               	btfsc	status,2,c
 17958  0028A0  D7AB               	goto	i2l8517
 17959  0028A2                     i2l257:
 17960                           
 17961                           ;UI.c: 368: }
 17962                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17963  0028A2  8EF2               	bsf	intcon,7,c	;volatile
 17964  0028A4  0012               	return		;funcret
 17965  0028A6                     __end_of_updateMenu:
 17966                           	opt stack 0
 17967                           pclatu	equ	0xFFB
 17968                           pclath	equ	0xFFA
 17969                           tblptru	equ	0xFF8
 17970                           tblptrh	equ	0xFF7
 17971                           tblptrl	equ	0xFF6
 17972                           tablat	equ	0xFF5
 17973                           prodh	equ	0xFF4
 17974                           prodl	equ	0xFF3
 17975                           intcon	equ	0xFF2
 17976                           intcon2	equ	0xFF1
 17977                           intcon3	equ	0xFF0
 17978                           indf0	equ	0xFEF
 17979                           postinc0	equ	0xFEE
 17980                           fsr0h	equ	0xFEA
 17981                           fsr0l	equ	0xFE9
 17982                           wreg	equ	0xFE8
 17983                           postdec1	equ	0xFE5
 17984                           fsr1h	equ	0xFE2
 17985                           fsr1l	equ	0xFE1
 17986                           indf2	equ	0xFDF
 17987                           postinc2	equ	0xFDE
 17988                           postdec2	equ	0xFDD
 17989                           fsr2h	equ	0xFDA
 17990                           fsr2l	equ	0xFD9
 17991                           status	equ	0xFD8
 17992                           
 17993 ;; *************** function i2_change_state_to_menu_start *****************
 17994 ;; Defined at:
 17995 ;;		line 474 in file "UI.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;		None
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;		None
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  1    wreg      void 
 18002 ;; Registers used:
 18003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;Total ram usage:        0 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    4
 18016 ;; This function calls:
 18017 ;;		i2_lcdInst
 18018 ;;		i2_printRTC
 18019 ;;		i2_printf
 18020 ;; This function is called by:
 18021 ;;		_updateMenu
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           	psect	text61
 18026  004D9C                     __ptext61:
 18027                           	opt stack 0
 18028  004D9C                     i2_change_state_to_menu_start:
 18029                           	opt stack 18
 18030                           
 18031                           ;UI.c: 475: cur_state = 0;
 18032                           
 18033                           ;incstack = 0
 18034  004D9C  0E00               	movlw	0
 18035  004D9E  0100               	movlb	0	; () banked
 18036  004DA0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18037  004DA2  0E00               	movlw	0
 18038  004DA4  6FE6               	movwf	_cur_state& (0+255),b
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;UI.c: 477: lcdInst(0b10000000);;
 18042  004DA6  0E80               	movlw	128
 18043  004DA8  EC98  F027         	call	i2_lcdInst
 18044                           
 18045                           ;UI.c: 478: printRTC();
 18046  004DAC  EC77  F015         	call	i2_printRTC	;wreg free
 18047                           
 18048                           ;UI.c: 479: lcdInst(0b11000000);;
 18049  004DB0  0EC0               	movlw	192
 18050  004DB2  EC98  F027         	call	i2_lcdInst
 18051                           
 18052                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 18053  004DB6  0EF7               	movlw	low STR_30
 18054  004DB8  6E0D               	movwf	i2printf@f,c
 18055  004DBA  0EFD               	movlw	high STR_30
 18056  004DBC  6E0E               	movwf	i2printf@f+1,c
 18057  004DBE  EC58  F00E         	call	i2_printf	;wreg free
 18058  004DC2  0012               	return		;funcret
 18059  004DC4                     __end_ofi2_change_state_to_menu_start:
 18060                           	opt stack 0
 18061                           pclatu	equ	0xFFB
 18062                           pclath	equ	0xFFA
 18063                           tblptru	equ	0xFF8
 18064                           tblptrh	equ	0xFF7
 18065                           tblptrl	equ	0xFF6
 18066                           tablat	equ	0xFF5
 18067                           prodh	equ	0xFF4
 18068                           prodl	equ	0xFF3
 18069                           intcon	equ	0xFF2
 18070                           intcon2	equ	0xFF1
 18071                           intcon3	equ	0xFF0
 18072                           indf0	equ	0xFEF
 18073                           postinc0	equ	0xFEE
 18074                           fsr0h	equ	0xFEA
 18075                           fsr0l	equ	0xFE9
 18076                           wreg	equ	0xFE8
 18077                           postdec1	equ	0xFE5
 18078                           fsr1h	equ	0xFE2
 18079                           fsr1l	equ	0xFE1
 18080                           indf2	equ	0xFDF
 18081                           postinc2	equ	0xFDE
 18082                           postdec2	equ	0xFDD
 18083                           fsr2h	equ	0xFDA
 18084                           fsr2l	equ	0xFD9
 18085                           status	equ	0xFD8
 18086                           
 18087 ;; *************** function i2_printRTC *****************
 18088 ;; Defined at:
 18089 ;;		line 63 in file "RTC.c"
 18090 ;; Parameters:    Size  Location     Type
 18091 ;;		None
 18092 ;; Auto vars:     Size  Location     Type
 18093 ;;  printRTC       14   44[COMRAM] int [7]
 18094 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 18095 ;;  printRTC        2   64[COMRAM] int 
 18096 ;;  printRTC        2   58[COMRAM] int 
 18097 ;; Return value:  Size  Location     Type
 18098 ;;                  1    wreg      void 
 18099 ;; Registers used:
 18100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18101 ;; Tracked objects:
 18102 ;;		On entry : 0/0
 18103 ;;		On exit  : 0/0
 18104 ;;		Unchanged: 0/0
 18105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18107 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;Total ram usage:       25 bytes
 18111 ;; Hardware stack levels used:    1
 18112 ;; Hardware stack levels required when called:    3
 18113 ;; This function calls:
 18114 ;;		i2_getRTC
 18115 ;;		i2_lcdInst
 18116 ;;		i2_printf
 18117 ;;		i2_strcpy
 18118 ;; This function is called by:
 18119 ;;		i2_change_state_to_menu_start
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123                           	psect	text62
 18124  002AEE                     __ptext62:
 18125                           	opt stack 0
 18126  002AEE                     i2_printRTC:
 18127                           	opt stack 18
 18128                           
 18129                           ;RTC.c: 64: getRTC();
 18130                           
 18131                           ;incstack = 0
 18132  002AEE  EC5A  F022         	call	i2_getRTC	;wreg free
 18133                           
 18134                           ;RTC.c: 65: char month[] = "MMM";
 18135  002AF2  C139  F03D         	movff	printRTC@F3219,i2printRTC@month
 18136  002AF6  C13A  F03E         	movff	printRTC@F3219+1,i2printRTC@month+1
 18137  002AFA  C13B  F03F         	movff	printRTC@F3219+2,i2printRTC@month+2
 18138  002AFE  C13C  F040         	movff	printRTC@F3219+3,i2printRTC@month+3
 18139                           
 18140                           ;RTC.c: 66: int INT_time[7];
 18141                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 18142  002B02  0E00               	movlw	0
 18143  002B04  6E42               	movwf	i2printRTC@i+1,c
 18144  002B06  0E00               	movlw	0
 18145  002B08  6E41               	movwf	i2printRTC@i,c
 18146  002B0A  BE42               	btfsc	i2printRTC@i+1,7,c
 18147  002B0C  D006               	goto	i2l6589
 18148  002B0E  5042               	movf	i2printRTC@i+1,w,c
 18149  002B10  E135               	bnz	i2l606
 18150  002B12  0E07               	movlw	7
 18151  002B14  5C41               	subwf	i2printRTC@i,w,c
 18152  002B16  B0D8               	btfsc	status,0,c
 18153  002B18  D031               	goto	i2l606
 18154  002B1A                     i2l6589:
 18155                           
 18156                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18157  002B1A  0E24               	movlw	low _time
 18158  002B1C  2441               	addwf	i2printRTC@i,w,c
 18159  002B1E  6ED9               	movwf	fsr2l,c
 18160  002B20  0E01               	movlw	high _time
 18161  002B22  2042               	addwfc	i2printRTC@i+1,w,c
 18162  002B24  6EDA               	movwf	fsr2h,c
 18163  002B26  50DF               	movf	indf2,w,c
 18164  002B28  6E2A               	movwf	??i2_printRTC& (0+255),c
 18165  002B2A  3A2A               	swapf	??i2_printRTC,f,c
 18166  002B2C  0E0F               	movlw	15
 18167  002B2E  162A               	andwf	??i2_printRTC,f,c
 18168  002B30  0E0F               	movlw	15
 18169  002B32  162A               	andwf	??i2_printRTC,f,c
 18170  002B34  502A               	movf	??i2_printRTC,w,c
 18171  002B36  0D0A               	mullw	10
 18172  002B38  0E24               	movlw	low _time
 18173  002B3A  2441               	addwf	i2printRTC@i,w,c
 18174  002B3C  6ED9               	movwf	fsr2l,c
 18175  002B3E  0E01               	movlw	high _time
 18176  002B40  2042               	addwfc	i2printRTC@i+1,w,c
 18177  002B42  6EDA               	movwf	fsr2h,c
 18178  002B44  50DF               	movf	indf2,w,c
 18179  002B46  0B0F               	andlw	15
 18180  002B48  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 18181  002B4A  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 18182  002B4C  50F3               	movf	prodl,w,c
 18183  002B4E  262B               	addwf	??i2_printRTC+1,f,c
 18184  002B50  50F4               	movf	prodh,w,c
 18185  002B52  222C               	addwfc	??i2_printRTC+2,f,c
 18186  002B54  90D8               	bcf	status,0,c
 18187  002B56  3441               	rlcf	i2printRTC@i,w,c
 18188  002B58  6ED9               	movwf	fsr2l,c
 18189  002B5A  3442               	rlcf	i2printRTC@i+1,w,c
 18190  002B5C  6EDA               	movwf	fsr2h,c
 18191  002B5E  0E2D               	movlw	low i2printRTC@INT_time
 18192  002B60  26D9               	addwf	fsr2l,f,c
 18193  002B62  0E00               	movlw	high i2printRTC@INT_time
 18194  002B64  22DA               	addwfc	fsr2h,f,c
 18195  002B66  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 18196  002B6A  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 18197  002B6E  4A41               	infsnz	i2printRTC@i,f,c
 18198  002B70  2A42               	incf	i2printRTC@i+1,f,c
 18199  002B72  BE42               	btfsc	i2printRTC@i+1,7,c
 18200  002B74  D7D2               	goto	i2l6589
 18201  002B76  5042               	movf	i2printRTC@i+1,w,c
 18202  002B78  E101               	bnz	i2u528_40
 18203  002B7A  D7CB               	goto	L11
 18204  002B7C                     i2u528_40:
 18205  002B7C                     i2l606:
 18206                           
 18207                           ;RTC.c: 69: }
 18208                           ;RTC.c: 70: int RTC_month = INT_time[5];
 18209  002B7C  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 18210  002B80  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 18211                           
 18212                           ;RTC.c: 71: switch(RTC_month){
 18213  002B84  D084               	goto	i2l6621
 18214  002B86                     i2l6595:
 18215                           
 18216                           ;RTC.c: 73: strcpy(month, "JAN");
 18217  002B86  0E3D               	movlw	low i2printRTC@month
 18218  002B88  6E01               	movwf	i2strcpy@to,c
 18219  002B8A  0E00               	movlw	high i2printRTC@month
 18220  002B8C  6E02               	movwf	i2strcpy@to+1,c
 18221  002B8E  0EDB               	movlw	low STR_8
 18222  002B90  6E03               	movwf	i2strcpy@from,c
 18223  002B92  0EFF               	movlw	high STR_8
 18224  002B94  6E04               	movwf	i2strcpy@from+1,c
 18225  002B96  EC43  F025         	call	i2_strcpy	;wreg free
 18226                           
 18227                           ;RTC.c: 74: break;
 18228  002B9A  D0A6               	goto	i2l6623
 18229  002B9C                     i2l6597:
 18230                           
 18231                           ;RTC.c: 76: strcpy(month, "FEB");
 18232  002B9C  0E3D               	movlw	low i2printRTC@month
 18233  002B9E  6E01               	movwf	i2strcpy@to,c
 18234  002BA0  0E00               	movlw	high i2printRTC@month
 18235  002BA2  6E02               	movwf	i2strcpy@to+1,c
 18236  002BA4  0ECB               	movlw	low STR_9
 18237  002BA6  6E03               	movwf	i2strcpy@from,c
 18238  002BA8  0EFF               	movlw	high STR_9
 18239  002BAA  6E04               	movwf	i2strcpy@from+1,c
 18240  002BAC  EC43  F025         	call	i2_strcpy	;wreg free
 18241                           
 18242                           ;RTC.c: 77: break;
 18243  002BB0  D09B               	goto	i2l6623
 18244  002BB2                     i2l6599:
 18245                           
 18246                           ;RTC.c: 79: strcpy(month, "MAR");
 18247  002BB2  0E3D               	movlw	low i2printRTC@month
 18248  002BB4  6E01               	movwf	i2strcpy@to,c
 18249  002BB6  0E00               	movlw	high i2printRTC@month
 18250  002BB8  6E02               	movwf	i2strcpy@to+1,c
 18251  002BBA  0EE7               	movlw	low STR_10
 18252  002BBC  6E03               	movwf	i2strcpy@from,c
 18253  002BBE  0EFF               	movlw	high STR_10
 18254  002BC0  6E04               	movwf	i2strcpy@from+1,c
 18255  002BC2  EC43  F025         	call	i2_strcpy	;wreg free
 18256                           
 18257                           ;RTC.c: 80: break;
 18258  002BC6  D090               	goto	i2l6623
 18259  002BC8                     i2l6601:
 18260                           
 18261                           ;RTC.c: 82: strcpy(month, "APR");
 18262  002BC8  0E3D               	movlw	low i2printRTC@month
 18263  002BCA  6E01               	movwf	i2strcpy@to,c
 18264  002BCC  0E00               	movlw	high i2printRTC@month
 18265  002BCE  6E02               	movwf	i2strcpy@to+1,c
 18266  002BD0  0EEB               	movlw	low STR_11
 18267  002BD2  6E03               	movwf	i2strcpy@from,c
 18268  002BD4  0EFF               	movlw	high STR_11
 18269  002BD6  6E04               	movwf	i2strcpy@from+1,c
 18270  002BD8  EC43  F025         	call	i2_strcpy	;wreg free
 18271                           
 18272                           ;RTC.c: 83: break;
 18273  002BDC  D085               	goto	i2l6623
 18274  002BDE                     i2l6603:
 18275                           
 18276                           ;RTC.c: 85: strcpy(month, "MAY");
 18277  002BDE  0E3D               	movlw	low i2printRTC@month
 18278  002BE0  6E01               	movwf	i2strcpy@to,c
 18279  002BE2  0E00               	movlw	high i2printRTC@month
 18280  002BE4  6E02               	movwf	i2strcpy@to+1,c
 18281  002BE6  0EFB               	movlw	low STR_12
 18282  002BE8  6E03               	movwf	i2strcpy@from,c
 18283  002BEA  0EFF               	movlw	high STR_12
 18284  002BEC  6E04               	movwf	i2strcpy@from+1,c
 18285  002BEE  EC43  F025         	call	i2_strcpy	;wreg free
 18286                           
 18287                           ;RTC.c: 86: break;
 18288  002BF2  D07A               	goto	i2l6623
 18289  002BF4                     i2l6605:
 18290                           
 18291                           ;RTC.c: 88: strcpy(month, "JUN");
 18292  002BF4  0E3D               	movlw	low i2printRTC@month
 18293  002BF6  6E01               	movwf	i2strcpy@to,c
 18294  002BF8  0E00               	movlw	high i2printRTC@month
 18295  002BFA  6E02               	movwf	i2strcpy@to+1,c
 18296  002BFC  0EDF               	movlw	low STR_13
 18297  002BFE  6E03               	movwf	i2strcpy@from,c
 18298  002C00  0EFF               	movlw	high STR_13
 18299  002C02  6E04               	movwf	i2strcpy@from+1,c
 18300  002C04  EC43  F025         	call	i2_strcpy	;wreg free
 18301                           
 18302                           ;RTC.c: 89: break;
 18303  002C08  D06F               	goto	i2l6623
 18304  002C0A                     i2l6607:
 18305                           
 18306                           ;RTC.c: 91: strcpy(month, "JUL");
 18307  002C0A  0E3D               	movlw	low i2printRTC@month
 18308  002C0C  6E01               	movwf	i2strcpy@to,c
 18309  002C0E  0E00               	movlw	high i2printRTC@month
 18310  002C10  6E02               	movwf	i2strcpy@to+1,c
 18311  002C12  0ED7               	movlw	low STR_14
 18312  002C14  6E03               	movwf	i2strcpy@from,c
 18313  002C16  0EFF               	movlw	high STR_14
 18314  002C18  6E04               	movwf	i2strcpy@from+1,c
 18315  002C1A  EC43  F025         	call	i2_strcpy	;wreg free
 18316                           
 18317                           ;RTC.c: 92: break;
 18318  002C1E  D064               	goto	i2l6623
 18319  002C20                     i2l6609:
 18320                           
 18321                           ;RTC.c: 94: strcpy(month, "AUG");
 18322  002C20  0E3D               	movlw	low i2printRTC@month
 18323  002C22  6E01               	movwf	i2strcpy@to,c
 18324  002C24  0E00               	movlw	high i2printRTC@month
 18325  002C26  6E02               	movwf	i2strcpy@to+1,c
 18326  002C28  0ED3               	movlw	low STR_15
 18327  002C2A  6E03               	movwf	i2strcpy@from,c
 18328  002C2C  0EFF               	movlw	high STR_15
 18329  002C2E  6E04               	movwf	i2strcpy@from+1,c
 18330  002C30  EC43  F025         	call	i2_strcpy	;wreg free
 18331                           
 18332                           ;RTC.c: 95: break;
 18333  002C34  D059               	goto	i2l6623
 18334  002C36                     i2l6611:
 18335                           
 18336                           ;RTC.c: 97: strcpy(month, "SEP");
 18337  002C36  0E3D               	movlw	low i2printRTC@month
 18338  002C38  6E01               	movwf	i2strcpy@to,c
 18339  002C3A  0E00               	movlw	high i2printRTC@month
 18340  002C3C  6E02               	movwf	i2strcpy@to+1,c
 18341  002C3E  0EE3               	movlw	low STR_16
 18342  002C40  6E03               	movwf	i2strcpy@from,c
 18343  002C42  0EFF               	movlw	high STR_16
 18344  002C44  6E04               	movwf	i2strcpy@from+1,c
 18345  002C46  EC43  F025         	call	i2_strcpy	;wreg free
 18346                           
 18347                           ;RTC.c: 98: break;
 18348  002C4A  D04E               	goto	i2l6623
 18349  002C4C                     i2l6613:
 18350                           
 18351                           ;RTC.c: 100: strcpy(month, "OCT");
 18352  002C4C  0E3D               	movlw	low i2printRTC@month
 18353  002C4E  6E01               	movwf	i2strcpy@to,c
 18354  002C50  0E00               	movlw	high i2printRTC@month
 18355  002C52  6E02               	movwf	i2strcpy@to+1,c
 18356  002C54  0EF3               	movlw	low STR_17
 18357  002C56  6E03               	movwf	i2strcpy@from,c
 18358  002C58  0EFF               	movlw	high STR_17
 18359  002C5A  6E04               	movwf	i2strcpy@from+1,c
 18360  002C5C  EC43  F025         	call	i2_strcpy	;wreg free
 18361                           
 18362                           ;RTC.c: 101: break;
 18363  002C60  D043               	goto	i2l6623
 18364  002C62                     i2l6615:
 18365                           
 18366                           ;RTC.c: 103: strcpy(month, "NOV");
 18367  002C62  0E3D               	movlw	low i2printRTC@month
 18368  002C64  6E01               	movwf	i2strcpy@to,c
 18369  002C66  0E00               	movlw	high i2printRTC@month
 18370  002C68  6E02               	movwf	i2strcpy@to+1,c
 18371  002C6A  0EF7               	movlw	low STR_18
 18372  002C6C  6E03               	movwf	i2strcpy@from,c
 18373  002C6E  0EFF               	movlw	high STR_18
 18374  002C70  6E04               	movwf	i2strcpy@from+1,c
 18375  002C72  EC43  F025         	call	i2_strcpy	;wreg free
 18376                           
 18377                           ;RTC.c: 104: break;
 18378  002C76  D038               	goto	i2l6623
 18379  002C78                     i2l6617:
 18380                           
 18381                           ;RTC.c: 106: strcpy(month, "DEC");
 18382  002C78  0E3D               	movlw	low i2printRTC@month
 18383  002C7A  6E01               	movwf	i2strcpy@to,c
 18384  002C7C  0E00               	movlw	high i2printRTC@month
 18385  002C7E  6E02               	movwf	i2strcpy@to+1,c
 18386  002C80  0ECF               	movlw	low STR_19
 18387  002C82  6E03               	movwf	i2strcpy@from,c
 18388  002C84  0EFF               	movlw	high STR_19
 18389  002C86  6E04               	movwf	i2strcpy@from+1,c
 18390  002C88  EC43  F025         	call	i2_strcpy	;wreg free
 18391                           
 18392                           ;RTC.c: 108: }
 18393                           
 18394                           ;RTC.c: 107: break;
 18395  002C8C  D02D               	goto	i2l6623
 18396  002C8E                     i2l6621:
 18397  002C8E  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 18398  002C92  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 18399                           
 18400                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18401                           ; Switch size 1, requested type "space"
 18402                           ; Number of cases is 1, Range of values is 0 to 0
 18403                           ; switch strategies available:
 18404                           ; Name         Instructions Cycles
 18405                           ; simple_byte            4     3 (average)
 18406                           ;	Chosen strategy is simple_byte
 18407  002C96  502B               	movf	??i2_printRTC+1,w,c
 18408  002C98  0A00               	xorlw	0	; case 0
 18409  002C9A  A4D8               	btfss	status,2,c
 18410  002C9C  D025               	goto	i2l6623
 18411                           
 18412                           ; Switch size 1, requested type "space"
 18413                           ; Number of cases is 12, Range of values is 1 to 12
 18414                           ; switch strategies available:
 18415                           ; Name         Instructions Cycles
 18416                           ; simple_byte           37    19 (average)
 18417                           ;	Chosen strategy is simple_byte
 18418  002C9E  502A               	movf	??i2_printRTC,w,c
 18419  002CA0  0A01               	xorlw	1	; case 1
 18420  002CA2  B4D8               	btfsc	status,2,c
 18421  002CA4  D770               	goto	i2l6595
 18422  002CA6  0A03               	xorlw	3	; case 2
 18423  002CA8  B4D8               	btfsc	status,2,c
 18424  002CAA  D778               	goto	i2l6597
 18425  002CAC  0A01               	xorlw	1	; case 3
 18426  002CAE  B4D8               	btfsc	status,2,c
 18427  002CB0  D780               	goto	i2l6599
 18428  002CB2  0A07               	xorlw	7	; case 4
 18429  002CB4  B4D8               	btfsc	status,2,c
 18430  002CB6  D788               	goto	i2l6601
 18431  002CB8  0A01               	xorlw	1	; case 5
 18432  002CBA  B4D8               	btfsc	status,2,c
 18433  002CBC  D790               	goto	i2l6603
 18434  002CBE  0A03               	xorlw	3	; case 6
 18435  002CC0  B4D8               	btfsc	status,2,c
 18436  002CC2  D798               	goto	i2l6605
 18437  002CC4  0A01               	xorlw	1	; case 7
 18438  002CC6  B4D8               	btfsc	status,2,c
 18439  002CC8  D7A0               	goto	i2l6607
 18440  002CCA  0A0F               	xorlw	15	; case 8
 18441  002CCC  B4D8               	btfsc	status,2,c
 18442  002CCE  D7A8               	goto	i2l6609
 18443  002CD0  0A01               	xorlw	1	; case 9
 18444  002CD2  B4D8               	btfsc	status,2,c
 18445  002CD4  D7B0               	goto	i2l6611
 18446  002CD6  0A03               	xorlw	3	; case 10
 18447  002CD8  B4D8               	btfsc	status,2,c
 18448  002CDA  D7B8               	goto	i2l6613
 18449  002CDC  0A01               	xorlw	1	; case 11
 18450  002CDE  B4D8               	btfsc	status,2,c
 18451  002CE0  D7C0               	goto	i2l6615
 18452  002CE2  0A07               	xorlw	7	; case 12
 18453  002CE4  B4D8               	btfsc	status,2,c
 18454  002CE6  D7C8               	goto	i2l6617
 18455  002CE8                     i2l6623:
 18456                           
 18457                           ;RTC.c: 109: lcdInst(0b10000000);;
 18458  002CE8  0E80               	movlw	128
 18459  002CEA  EC98  F027         	call	i2_lcdInst
 18460                           
 18461                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 18462  002CEE  0E0A               	movlw	low STR_21
 18463  002CF0  6E0D               	movwf	i2printf@f,c
 18464  002CF2  0EFB               	movlw	high STR_21
 18465  002CF4  6E0E               	movwf	i2printf@f+1,c
 18466  002CF6  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 18467  002CFA  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 18468  002CFE  0E3D               	movlw	low i2printRTC@month
 18469  002D00  6E11               	movwf	?i2_printf+4,c
 18470  002D02  0E00               	movlw	high i2printRTC@month
 18471  002D04  6E12               	movwf	?i2_printf+5,c
 18472  002D06  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 18473  002D0A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 18474  002D0E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 18475  002D12  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 18476  002D16  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 18477  002D1A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 18478  002D1E  EC58  F00E         	call	i2_printf	;wreg free
 18479  002D22  0012               	return		;funcret
 18480  002D24                     __end_ofi2_printRTC:
 18481                           	opt stack 0
 18482                           pclatu	equ	0xFFB
 18483                           pclath	equ	0xFFA
 18484                           tblptru	equ	0xFF8
 18485                           tblptrh	equ	0xFF7
 18486                           tblptrl	equ	0xFF6
 18487                           tablat	equ	0xFF5
 18488                           prodh	equ	0xFF4
 18489                           prodl	equ	0xFF3
 18490                           intcon	equ	0xFF2
 18491                           intcon2	equ	0xFF1
 18492                           intcon3	equ	0xFF0
 18493                           indf0	equ	0xFEF
 18494                           postinc0	equ	0xFEE
 18495                           fsr0h	equ	0xFEA
 18496                           fsr0l	equ	0xFE9
 18497                           wreg	equ	0xFE8
 18498                           postdec1	equ	0xFE5
 18499                           fsr1h	equ	0xFE2
 18500                           fsr1l	equ	0xFE1
 18501                           indf2	equ	0xFDF
 18502                           postinc2	equ	0xFDE
 18503                           postdec2	equ	0xFDD
 18504                           fsr2h	equ	0xFDA
 18505                           fsr2l	equ	0xFD9
 18506                           status	equ	0xFD8
 18507                           
 18508 ;; *************** function i2_strcpy *****************
 18509 ;; Defined at:
 18510 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 18511 ;; Parameters:    Size  Location     Type
 18512 ;;  to              2    0[COMRAM] PTR unsigned char 
 18513 ;;		 -> printRTC@month(4), UI@month(4), 
 18514 ;;  from            2    2[COMRAM] PTR const unsigned char 
 18515 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 18516 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 18517 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 18518 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 18519 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 18520 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 18521 ;;		 -> STR_8(4), 
 18522 ;; Auto vars:     Size  Location     Type
 18523 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 18524 ;;		 -> printRTC@month(4), UI@month(4), 
 18525 ;; Return value:  Size  Location     Type
 18526 ;;                  2    0[COMRAM] PTR unsigned char 
 18527 ;; Registers used:
 18528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18529 ;; Tracked objects:
 18530 ;;		On entry : 0/0
 18531 ;;		On exit  : 0/0
 18532 ;;		Unchanged: 0/0
 18533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18534 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18537 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18538 ;;Total ram usage:        6 bytes
 18539 ;; Hardware stack levels used:    1
 18540 ;; This function calls:
 18541 ;;		Nothing
 18542 ;; This function is called by:
 18543 ;;		i2_printRTC
 18544 ;; This function uses a non-reentrant model
 18545 ;;
 18546                           
 18547                           	psect	text63
 18548  004A86                     __ptext63:
 18549                           	opt stack 0
 18550  004A86                     i2_strcpy:
 18551                           	opt stack 20
 18552                           
 18553                           ;incstack = 0
 18554  004A86  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 18555  004A8A  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 18556  004A8E  D004               	goto	i2l6211
 18557  004A90                     i2l6209:
 18558  004A90  4A05               	infsnz	i2strcpy@cp,f,c
 18559  004A92  2A06               	incf	i2strcpy@cp+1,f,c
 18560  004A94  4A03               	infsnz	i2strcpy@from,f,c
 18561  004A96  2A04               	incf	i2strcpy@from+1,f,c
 18562  004A98                     i2l6211:
 18563  004A98  C003  FFF6         	movff	i2strcpy@from,tblptrl
 18564  004A9C  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 18565  004AA0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18566  004AA0  6AF8               	clrf	tblptru,c
 18567  004AA2                     	endif
 18568  004AA2                     	if	0	;tblptru may be non-zero
 18569  004AA2                     	endif
 18570  004AA2  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 18571  004AA6  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 18572  004AAA  0008               	tblrd		*
 18573  004AAC  CFF5 FFDF          	movff	tablat,indf2
 18574  004AB0  50DF               	movf	indf2,w,c
 18575  004AB2  B4D8               	btfsc	status,2,c
 18576  004AB4  0012               	return	
 18577  004AB6  D7EC               	goto	i2l6209
 18578  004AB8                     __end_ofi2_strcpy:
 18579                           	opt stack 0
 18580                           pclatu	equ	0xFFB
 18581                           pclath	equ	0xFFA
 18582                           tblptru	equ	0xFF8
 18583                           tblptrh	equ	0xFF7
 18584                           tblptrl	equ	0xFF6
 18585                           tablat	equ	0xFF5
 18586                           prodh	equ	0xFF4
 18587                           prodl	equ	0xFF3
 18588                           intcon	equ	0xFF2
 18589                           intcon2	equ	0xFF1
 18590                           intcon3	equ	0xFF0
 18591                           indf0	equ	0xFEF
 18592                           postinc0	equ	0xFEE
 18593                           fsr0h	equ	0xFEA
 18594                           fsr0l	equ	0xFE9
 18595                           wreg	equ	0xFE8
 18596                           postdec1	equ	0xFE5
 18597                           fsr1h	equ	0xFE2
 18598                           fsr1l	equ	0xFE1
 18599                           indf2	equ	0xFDF
 18600                           postinc2	equ	0xFDE
 18601                           postdec2	equ	0xFDD
 18602                           fsr2h	equ	0xFDA
 18603                           fsr2l	equ	0xFD9
 18604                           status	equ	0xFD8
 18605                           
 18606 ;; *************** function _inputHandler *****************
 18607 ;; Defined at:
 18608 ;;		line 372 in file "UI.c"
 18609 ;; Parameters:    Size  Location     Type
 18610 ;;		None
 18611 ;; Auto vars:     Size  Location     Type
 18612 ;;		None
 18613 ;; Return value:  Size  Location     Type
 18614 ;;                  2   41[COMRAM] int 
 18615 ;; Registers used:
 18616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18617 ;; Tracked objects:
 18618 ;;		On entry : 0/0
 18619 ;;		On exit  : 0/0
 18620 ;;		Unchanged: 0/0
 18621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18626 ;;Total ram usage:        4 bytes
 18627 ;; Hardware stack levels used:    1
 18628 ;; Hardware stack levels required when called:    4
 18629 ;; This function calls:
 18630 ;;		_change_state_to_logs_11
 18631 ;;		_change_state_to_logs_12
 18632 ;;		_change_state_to_logs_22
 18633 ;;		_change_state_to_logs_23
 18634 ;;		_change_state_to_logs_33
 18635 ;;		_change_state_to_logs_34
 18636 ;;		_change_state_to_menu_11
 18637 ;;		_change_state_to_menu_23
 18638 ;;		i2_change_state_to_menu_12
 18639 ;;		i2_change_state_to_menu_22
 18640 ;; This function is called by:
 18641 ;;		_updateMenu
 18642 ;; This function uses a non-reentrant model
 18643 ;;
 18644                           
 18645                           	psect	text64
 18646  003152                     __ptext64:
 18647                           	opt stack 0
 18648  003152                     _inputHandler:
 18649                           	opt stack 18
 18650                           
 18651                           ;UI.c: 377: if(firstboot){
 18652                           
 18653                           ;incstack = 0
 18654  003152  506F               	movf	_firstboot,w,c
 18655  003154  1070               	iorwf	_firstboot+1,w,c
 18656  003156  B4D8               	btfsc	status,2,c
 18657  003158  D00B               	goto	i2l6691
 18658                           
 18659                           ;UI.c: 378: change_state_to_menu_11();
 18660  00315A  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 18661                           
 18662                           ;UI.c: 379: firstboot = 0;
 18663  00315E  0E00               	movlw	0
 18664  003160  6E70               	movwf	_firstboot+1,c
 18665  003162  0E00               	movlw	0
 18666  003164  6E6F               	movwf	_firstboot,c
 18667                           
 18668                           ;UI.c: 380: return 0;
 18669  003166  0E00               	movlw	0
 18670  003168  6E2B               	movwf	?_inputHandler+1,c
 18671  00316A  0E00               	movlw	0
 18672  00316C  6E2A               	movwf	?_inputHandler,c
 18673  00316E  0012               	return	
 18674  003170                     i2l6691:
 18675                           
 18676                           ;UI.c: 381: }
 18677                           ;UI.c: 382: if (logstate){
 18678  003170  0100               	movlb	0	; () banked
 18679  003172  51F6               	movf	_logstate& (0+255),w,b
 18680  003174  0100               	movlb	0	; () banked
 18681  003176  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 18682  003178  B4D8               	btfsc	status,2,c
 18683  00317A  D0C7               	goto	i2l6809
 18684                           
 18685                           ; BSR set to: 0
 18686                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 18687  00317C  0E43               	movlw	67
 18688  00317E  187D               	xorwf	_input,w,c	;volatile
 18689  003180  A4D8               	btfss	status,2,c
 18690  003182  D012               	goto	i2l6709
 18691                           
 18692                           ; BSR set to: 0
 18693  003184  B281               	btfsc	3969,1,c	;volatile
 18694  003186  D009               	goto	i2l6701
 18695  003188  D00F               	goto	i2l6709
 18696  00318A                     i2l6699:
 18697                           
 18698                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 18699  00318A  0E68               	movlw	104
 18700  00318C  6E2C               	movwf	??_inputHandler& (0+255),c
 18701  00318E  0EE4               	movlw	228
 18702  003190                     i2u958_47:
 18703  003190  2EE8               	decfsz	wreg,f,c
 18704  003192  D7FE               	bra	i2u958_47
 18705  003194  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 18706  003196  D7FC               	bra	i2u958_47
 18707  003198  D000               	nop2	
 18708  00319A                     i2l6701:
 18709  00319A  B281               	btfsc	3969,1,c	;volatile
 18710  00319C  D7F6               	goto	i2l6699
 18711  00319E                     i2l6703:
 18712                           
 18713                           ;UI.c: 387: }
 18714                           ;UI.c: 388: return 0;
 18715  00319E  0E00               	movlw	0
 18716  0031A0  6E2B               	movwf	?_inputHandler+1,c
 18717  0031A2  0E00               	movlw	0
 18718  0031A4  6E2A               	movwf	?_inputHandler,c
 18719  0031A6  0012               	return	
 18720  0031A8                     i2l6709:
 18721                           
 18722                           ;UI.c: 390: else if (input == 'D'){
 18723  0031A8  0E44               	movlw	68
 18724  0031AA  187D               	xorwf	_input,w,c	;volatile
 18725  0031AC  A4D8               	btfss	status,2,c
 18726  0031AE  D7F7               	goto	i2l6703
 18727                           
 18728                           ;UI.c: 392: logstate = 0;
 18729  0031B0  0E00               	movlw	0
 18730  0031B2  0100               	movlb	0	; () banked
 18731  0031B4  6FF7               	movwf	(_logstate+1)& (0+255),b
 18732  0031B6  0E00               	movlw	0
 18733  0031B8  6FF6               	movwf	_logstate& (0+255),b
 18734                           
 18735                           ;UI.c: 393: switch(cur_state){
 18736  0031BA  D012               	goto	i2l6727
 18737  0031BC                     i2l6713:
 18738                           
 18739                           ;UI.c: 395: change_state_to_logs_11();
 18740  0031BC  EC1C  F026         	call	_change_state_to_logs_11	;wreg free
 18741                           
 18742                           ;UI.c: 396: break;
 18743  0031C0  D7EE               	goto	i2l6703
 18744  0031C2                     i2l6715:
 18745                           
 18746                           ;UI.c: 398: change_state_to_logs_12();
 18747  0031C2  EC04  F026         	call	_change_state_to_logs_12	;wreg free
 18748                           
 18749                           ;UI.c: 399: break;
 18750  0031C6  D7EB               	goto	i2l6703
 18751  0031C8                     i2l6717:
 18752                           
 18753                           ;UI.c: 401: change_state_to_logs_22();
 18754  0031C8  ECEC  F025         	call	_change_state_to_logs_22	;wreg free
 18755                           
 18756                           ;UI.c: 402: break;
 18757  0031CC  D7E8               	goto	i2l6703
 18758  0031CE                     i2l6719:
 18759                           
 18760                           ;UI.c: 404: change_state_to_logs_23();
 18761  0031CE  EC62  F026         	call	_change_state_to_logs_23	;wreg free
 18762                           
 18763                           ;UI.c: 405: break;
 18764  0031D2  D7E5               	goto	i2l6703
 18765  0031D4                     i2l6721:
 18766                           
 18767                           ;UI.c: 407: change_state_to_logs_33();
 18768  0031D4  ECD4  F025         	call	_change_state_to_logs_33	;wreg free
 18769                           
 18770                           ;UI.c: 408: break;
 18771  0031D8  D7E2               	goto	i2l6703
 18772  0031DA                     i2l6723:
 18773                           
 18774                           ;UI.c: 410: change_state_to_logs_34();
 18775  0031DA  ECBC  F025         	call	_change_state_to_logs_34	;wreg free
 18776                           
 18777                           ;UI.c: 412: }
 18778                           
 18779                           ;UI.c: 411: break;
 18780  0031DE  D7DF               	goto	i2l6703
 18781  0031E0                     i2l6727:
 18782  0031E0  C0E6  F02C         	movff	_cur_state,??_inputHandler
 18783  0031E4  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 18784                           
 18785                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18786                           ; Switch size 1, requested type "space"
 18787                           ; Number of cases is 2, Range of values is 3 to 4
 18788                           ; switch strategies available:
 18789                           ; Name         Instructions Cycles
 18790                           ; simple_byte            7     4 (average)
 18791                           ;	Chosen strategy is simple_byte
 18792  0031E8  502D               	movf	??_inputHandler+1,w,c
 18793  0031EA  0A03               	xorlw	3	; case 3
 18794  0031EC  B4D8               	btfsc	status,2,c
 18795  0031EE  D004               	goto	i2l9195
 18796  0031F0  0A07               	xorlw	7	; case 4
 18797  0031F2  B4D8               	btfsc	status,2,c
 18798  0031F4  D00F               	goto	i2l9197
 18799  0031F6  D7D3               	goto	i2l6703
 18800  0031F8                     i2l9195:
 18801                           
 18802                           ; Switch size 1, requested type "space"
 18803                           ; Number of cases is 4, Range of values is 243 to 255
 18804                           ; switch strategies available:
 18805                           ; Name         Instructions Cycles
 18806                           ; simple_byte           13     7 (average)
 18807                           ;	Chosen strategy is simple_byte
 18808  0031F8  502C               	movf	??_inputHandler,w,c
 18809  0031FA  0AF3               	xorlw	243	; case 243
 18810  0031FC  B4D8               	btfsc	status,2,c
 18811  0031FE  D7DE               	goto	i2l6713
 18812  003200  0A07               	xorlw	7	; case 244
 18813  003202  B4D8               	btfsc	status,2,c
 18814  003204  D7DE               	goto	i2l6715
 18815  003206  0A0A               	xorlw	10	; case 254
 18816  003208  B4D8               	btfsc	status,2,c
 18817  00320A  D7DE               	goto	i2l6717
 18818  00320C  0A01               	xorlw	1	; case 255
 18819  00320E  B4D8               	btfsc	status,2,c
 18820  003210  D7DE               	goto	i2l6719
 18821  003212  D7C5               	goto	i2l6703
 18822  003214                     i2l9197:
 18823                           
 18824                           ; Switch size 1, requested type "space"
 18825                           ; Number of cases is 2, Range of values is 9 to 10
 18826                           ; switch strategies available:
 18827                           ; Name         Instructions Cycles
 18828                           ; simple_byte            7     4 (average)
 18829                           ;	Chosen strategy is simple_byte
 18830  003214  502C               	movf	??_inputHandler,w,c
 18831  003216  0A09               	xorlw	9	; case 9
 18832  003218  B4D8               	btfsc	status,2,c
 18833  00321A  D7DC               	goto	i2l6721
 18834  00321C  0A03               	xorlw	3	; case 10
 18835  00321E  B4D8               	btfsc	status,2,c
 18836  003220  D7DC               	goto	i2l6723
 18837  003222  D7BD               	goto	i2l6703
 18838  003224                     i2l6739:
 18839                           
 18840                           ;UI.c: 422: if(cur_state == 11){
 18841  003224  0E0B               	movlw	11
 18842  003226  0100               	movlb	0	; () banked
 18843  003228  19E6               	xorwf	_cur_state& (0+255),w,b
 18844  00322A  0100               	movlb	0	; () banked
 18845  00322C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18846  00322E  A4D8               	btfss	status,2,c
 18847  003230  D005               	goto	i2l6747
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;UI.c: 423: return 0;
 18851  003232  0E00               	movlw	0
 18852  003234  6E2B               	movwf	?_inputHandler+1,c
 18853  003236  0E00               	movlw	0
 18854  003238  6E2A               	movwf	?_inputHandler,c
 18855                           
 18856                           ; BSR set to: 0
 18857  00323A  0012               	return	
 18858  00323C                     i2l6747:
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;UI.c: 425: else{
 18862                           ;UI.c: 426: change_state_to_menu_11();
 18863  00323C  ECA4  F025         	call	_change_state_to_menu_11	;wreg free
 18864                           
 18865                           ;UI.c: 427: }
 18866                           ;UI.c: 428: return 0;
 18867  003240  0E00               	movlw	0
 18868  003242  6E2B               	movwf	?_inputHandler+1,c
 18869  003244  0E00               	movlw	0
 18870  003246  6E2A               	movwf	?_inputHandler,c
 18871  003248  0012               	return	
 18872  00324A                     i2l6753:
 18873                           
 18874                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18875  00324A  0E16               	movlw	22
 18876  00324C  0100               	movlb	0	; () banked
 18877  00324E  19E6               	xorwf	_cur_state& (0+255),w,b
 18878  003250  0100               	movlb	0	; () banked
 18879  003252  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18880  003254  B4D8               	btfsc	status,2,c
 18881  003256  D007               	goto	i2l6757
 18882                           
 18883                           ; BSR set to: 0
 18884  003258  0E0C               	movlw	12
 18885  00325A  0100               	movlb	0	; () banked
 18886  00325C  19E6               	xorwf	_cur_state& (0+255),w,b
 18887  00325E  0100               	movlb	0	; () banked
 18888  003260  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18889  003262  A4D8               	btfss	status,2,c
 18890  003264  D005               	goto	i2l6763
 18891  003266                     i2l6757:
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;UI.c: 431: return 0;
 18895  003266  0E00               	movlw	0
 18896  003268  6E2B               	movwf	?_inputHandler+1,c
 18897  00326A  0E00               	movlw	0
 18898  00326C  6E2A               	movwf	?_inputHandler,c
 18899                           
 18900                           ; BSR set to: 0
 18901  00326E  0012               	return	
 18902  003270                     i2l6763:
 18903                           
 18904                           ; BSR set to: 0
 18905                           ;UI.c: 433: else if(cur_state == 23){
 18906  003270  0E17               	movlw	23
 18907  003272  0100               	movlb	0	; () banked
 18908  003274  19E6               	xorwf	_cur_state& (0+255),w,b
 18909  003276  0100               	movlb	0	; () banked
 18910  003278  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18911  00327A  A4D8               	btfss	status,2,c
 18912  00327C  D003               	goto	i2l6767
 18913                           
 18914                           ; BSR set to: 0
 18915                           ;UI.c: 434: change_state_to_menu_22();
 18916  00327E  EC5C  F025         	call	i2_change_state_to_menu_22	;wreg free
 18917                           
 18918                           ;UI.c: 435: }
 18919  003282  D002               	goto	i2l6769
 18920  003284                     i2l6767:
 18921                           
 18922                           ;UI.c: 436: else{
 18923                           ;UI.c: 437: change_state_to_menu_12();
 18924  003284  EC74  F025         	call	i2_change_state_to_menu_12	;wreg free
 18925  003288                     i2l6769:
 18926                           
 18927                           ;UI.c: 438: }
 18928                           ;UI.c: 439: return 0;
 18929  003288  0E00               	movlw	0
 18930  00328A  6E2B               	movwf	?_inputHandler+1,c
 18931  00328C  0E00               	movlw	0
 18932  00328E  6E2A               	movwf	?_inputHandler,c
 18933  003290  0012               	return	
 18934  003292                     i2l6773:
 18935                           
 18936                           ;UI.c: 441: if(cur_state == 23){
 18937  003292  0E17               	movlw	23
 18938  003294  0100               	movlb	0	; () banked
 18939  003296  19E6               	xorwf	_cur_state& (0+255),w,b
 18940  003298  0100               	movlb	0	; () banked
 18941  00329A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18942  00329C  A4D8               	btfss	status,2,c
 18943  00329E  D005               	goto	i2l6781
 18944                           
 18945                           ; BSR set to: 0
 18946                           ;UI.c: 442: return 0;
 18947  0032A0  0E00               	movlw	0
 18948  0032A2  6E2B               	movwf	?_inputHandler+1,c
 18949  0032A4  0E00               	movlw	0
 18950  0032A6  6E2A               	movwf	?_inputHandler,c
 18951                           
 18952                           ; BSR set to: 0
 18953  0032A8  0012               	return	
 18954  0032AA                     i2l6781:
 18955                           
 18956                           ; BSR set to: 0
 18957                           ;UI.c: 444: else{
 18958                           ;UI.c: 445: change_state_to_menu_23();
 18959  0032AA  EC8C  F025         	call	_change_state_to_menu_23	;wreg free
 18960                           
 18961                           ;UI.c: 446: }
 18962                           ;UI.c: 447: return 0;
 18963  0032AE  0E00               	movlw	0
 18964  0032B0  6E2B               	movwf	?_inputHandler+1,c
 18965  0032B2  0E00               	movlw	0
 18966  0032B4  6E2A               	movwf	?_inputHandler,c
 18967  0032B6  0012               	return	
 18968  0032B8                     i2l6787:
 18969                           
 18970                           ;UI.c: 450: up = 1;
 18971  0032B8  0E00               	movlw	0
 18972  0032BA  6E78               	movwf	_up+1,c
 18973  0032BC  0E01               	movlw	1
 18974  0032BE  6E77               	movwf	_up,c
 18975                           
 18976                           ;UI.c: 451: return 1;
 18977  0032C0  0E00               	movlw	0
 18978  0032C2  6E2B               	movwf	?_inputHandler+1,c
 18979  0032C4  0E01               	movlw	1
 18980  0032C6  6E2A               	movwf	?_inputHandler,c
 18981  0032C8  0012               	return	
 18982  0032CA                     i2l6791:
 18983                           
 18984                           ;UI.c: 453: down = 1;
 18985  0032CA  0E00               	movlw	0
 18986  0032CC  6E62               	movwf	_down+1,c
 18987  0032CE  0E01               	movlw	1
 18988  0032D0  6E61               	movwf	_down,c
 18989                           
 18990                           ;UI.c: 454: return 1;
 18991  0032D2  0E00               	movlw	0
 18992  0032D4  6E2B               	movwf	?_inputHandler+1,c
 18993  0032D6  0E01               	movlw	1
 18994  0032D8  6E2A               	movwf	?_inputHandler,c
 18995  0032DA  0012               	return	
 18996  0032DC                     i2l6795:
 18997                           
 18998                           ;UI.c: 456: enter = 1;
 18999  0032DC  0E00               	movlw	0
 19000  0032DE  6E64               	movwf	_enter+1,c
 19001  0032E0  0E01               	movlw	1
 19002  0032E2  6E63               	movwf	_enter,c
 19003                           
 19004                           ;UI.c: 457: return 1;
 19005  0032E4  0E00               	movlw	0
 19006  0032E6  6E2B               	movwf	?_inputHandler+1,c
 19007  0032E8  0E01               	movlw	1
 19008  0032EA  6E2A               	movwf	?_inputHandler,c
 19009  0032EC  0012               	return	
 19010  0032EE                     i2l6799:
 19011                           
 19012                           ;UI.c: 459: back = 1;
 19013  0032EE  0E00               	movlw	0
 19014  0032F0  6E5A               	movwf	_back+1,c
 19015  0032F2  0E01               	movlw	1
 19016  0032F4  6E59               	movwf	_back,c
 19017                           
 19018                           ;UI.c: 460: return 1;
 19019  0032F6  0E00               	movlw	0
 19020  0032F8  6E2B               	movwf	?_inputHandler+1,c
 19021  0032FA  0E01               	movlw	1
 19022  0032FC  6E2A               	movwf	?_inputHandler,c
 19023  0032FE  0012               	return	
 19024  003300                     i2l6803:
 19025                           
 19026                           ;UI.c: 463: return 1;
 19027  003300  0E00               	movlw	0
 19028  003302  6E2B               	movwf	?_inputHandler+1,c
 19029  003304  0E01               	movlw	1
 19030  003306  6E2A               	movwf	?_inputHandler,c
 19031                           
 19032                           ;UI.c: 464: }
 19033  003308  0012               	return	
 19034  00330A                     i2l6809:
 19035  00330A  507D               	movf	_input,w,c	;volatile
 19036                           
 19037                           ; Switch size 1, requested type "space"
 19038                           ; Number of cases is 7, Range of values is 49 to 68
 19039                           ; switch strategies available:
 19040                           ; Name         Instructions Cycles
 19041                           ; simple_byte           22    12 (average)
 19042                           ;	Chosen strategy is simple_byte
 19043  00330C  0A31               	xorlw	49	; case 49
 19044  00330E  B4D8               	btfsc	status,2,c
 19045  003310  D789               	goto	i2l6739
 19046  003312  0A03               	xorlw	3	; case 50
 19047  003314  B4D8               	btfsc	status,2,c
 19048  003316  D799               	goto	i2l6753
 19049  003318  0A01               	xorlw	1	; case 51
 19050  00331A  B4D8               	btfsc	status,2,c
 19051  00331C  D7BA               	goto	i2l6773
 19052  00331E  0A72               	xorlw	114	; case 65
 19053  003320  B4D8               	btfsc	status,2,c
 19054  003322  D7CA               	goto	i2l6787
 19055  003324  0A03               	xorlw	3	; case 66
 19056  003326  B4D8               	btfsc	status,2,c
 19057  003328  D7D0               	goto	i2l6791
 19058  00332A  0A01               	xorlw	1	; case 67
 19059  00332C  B4D8               	btfsc	status,2,c
 19060  00332E  D7D6               	goto	i2l6795
 19061  003330  0A07               	xorlw	7	; case 68
 19062  003332  B4D8               	btfsc	status,2,c
 19063  003334  D7DC               	goto	i2l6799
 19064  003336  D7E4               	goto	i2l6803
 19065  003338                     __end_of_inputHandler:
 19066                           	opt stack 0
 19067                           pclatu	equ	0xFFB
 19068                           pclath	equ	0xFFA
 19069                           tblptru	equ	0xFF8
 19070                           tblptrh	equ	0xFF7
 19071                           tblptrl	equ	0xFF6
 19072                           tablat	equ	0xFF5
 19073                           prodh	equ	0xFF4
 19074                           prodl	equ	0xFF3
 19075                           intcon	equ	0xFF2
 19076                           intcon2	equ	0xFF1
 19077                           intcon3	equ	0xFF0
 19078                           indf0	equ	0xFEF
 19079                           postinc0	equ	0xFEE
 19080                           fsr0h	equ	0xFEA
 19081                           fsr0l	equ	0xFE9
 19082                           wreg	equ	0xFE8
 19083                           postdec1	equ	0xFE5
 19084                           fsr1h	equ	0xFE2
 19085                           fsr1l	equ	0xFE1
 19086                           indf2	equ	0xFDF
 19087                           postinc2	equ	0xFDE
 19088                           postdec2	equ	0xFDD
 19089                           fsr2h	equ	0xFDA
 19090                           fsr2l	equ	0xFD9
 19091                           status	equ	0xFD8
 19092                           
 19093 ;; *************** function i2_change_state_to_menu_22 *****************
 19094 ;; Defined at:
 19095 ;;		line 498 in file "UI.c"
 19096 ;; Parameters:    Size  Location     Type
 19097 ;;		None
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;		None
 19100 ;; Return value:  Size  Location     Type
 19101 ;;                  1    wreg      void 
 19102 ;; Registers used:
 19103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19104 ;; Tracked objects:
 19105 ;;		On entry : 0/0
 19106 ;;		On exit  : 0/0
 19107 ;;		Unchanged: 0/0
 19108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19113 ;;Total ram usage:        0 bytes
 19114 ;; Hardware stack levels used:    1
 19115 ;; Hardware stack levels required when called:    3
 19116 ;; This function calls:
 19117 ;;		i2_lcdInst
 19118 ;;		i2_printf
 19119 ;; This function is called by:
 19120 ;;		_updateMenu
 19121 ;;		_inputHandler
 19122 ;; This function uses a non-reentrant model
 19123 ;;
 19124                           
 19125                           	psect	text65
 19126  004AB8                     __ptext65:
 19127                           	opt stack 0
 19128  004AB8                     i2_change_state_to_menu_22:
 19129                           	opt stack 19
 19130                           
 19131                           ;UI.c: 499: cur_state = 22;
 19132                           
 19133                           ;incstack = 0
 19134  004AB8  0E00               	movlw	0
 19135  004ABA  0100               	movlb	0	; () banked
 19136  004ABC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19137  004ABE  0E16               	movlw	22
 19138  004AC0  6FE6               	movwf	_cur_state& (0+255),b
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;UI.c: 501: lcdInst(0b10000000);;
 19142  004AC2  0E80               	movlw	128
 19143  004AC4  EC98  F027         	call	i2_lcdInst
 19144                           
 19145                           ;UI.c: 502: printf("2. SORT        <");
 19146  004AC8  0EC4               	movlw	low STR_34
 19147  004ACA  6E0D               	movwf	i2printf@f,c
 19148  004ACC  0EFD               	movlw	high STR_34
 19149  004ACE  6E0E               	movwf	i2printf@f+1,c
 19150  004AD0  EC58  F00E         	call	i2_printf	;wreg free
 19151                           
 19152                           ;UI.c: 503: lcdInst(0b11000000);;
 19153  004AD4  0EC0               	movlw	192
 19154  004AD6  EC98  F027         	call	i2_lcdInst
 19155                           
 19156                           ;UI.c: 504: printf("3. LOGS         ");
 19157  004ADA  0E09               	movlw	low STR_36
 19158  004ADC  6E0D               	movwf	i2printf@f,c
 19159  004ADE  0EFD               	movlw	high STR_36
 19160  004AE0  6E0E               	movwf	i2printf@f+1,c
 19161  004AE2  EC58  F00E         	call	i2_printf	;wreg free
 19162  004AE6  0012               	return		;funcret
 19163  004AE8                     __end_ofi2_change_state_to_menu_22:
 19164                           	opt stack 0
 19165                           pclatu	equ	0xFFB
 19166                           pclath	equ	0xFFA
 19167                           tblptru	equ	0xFF8
 19168                           tblptrh	equ	0xFF7
 19169                           tblptrl	equ	0xFF6
 19170                           tablat	equ	0xFF5
 19171                           prodh	equ	0xFF4
 19172                           prodl	equ	0xFF3
 19173                           intcon	equ	0xFF2
 19174                           intcon2	equ	0xFF1
 19175                           intcon3	equ	0xFF0
 19176                           indf0	equ	0xFEF
 19177                           postinc0	equ	0xFEE
 19178                           fsr0h	equ	0xFEA
 19179                           fsr0l	equ	0xFE9
 19180                           wreg	equ	0xFE8
 19181                           postdec1	equ	0xFE5
 19182                           fsr1h	equ	0xFE2
 19183                           fsr1l	equ	0xFE1
 19184                           indf2	equ	0xFDF
 19185                           postinc2	equ	0xFDE
 19186                           postdec2	equ	0xFDD
 19187                           fsr2h	equ	0xFDA
 19188                           fsr2l	equ	0xFD9
 19189                           status	equ	0xFD8
 19190                           
 19191 ;; *************** function i2_change_state_to_menu_12 *****************
 19192 ;; Defined at:
 19193 ;;		line 490 in file "UI.c"
 19194 ;; Parameters:    Size  Location     Type
 19195 ;;		None
 19196 ;; Auto vars:     Size  Location     Type
 19197 ;;		None
 19198 ;; Return value:  Size  Location     Type
 19199 ;;                  1    wreg      void 
 19200 ;; Registers used:
 19201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19202 ;; Tracked objects:
 19203 ;;		On entry : 0/0
 19204 ;;		On exit  : 0/0
 19205 ;;		Unchanged: 0/0
 19206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19211 ;;Total ram usage:        0 bytes
 19212 ;; Hardware stack levels used:    1
 19213 ;; Hardware stack levels required when called:    3
 19214 ;; This function calls:
 19215 ;;		i2_lcdInst
 19216 ;;		i2_printf
 19217 ;; This function is called by:
 19218 ;;		_updateMenu
 19219 ;;		_inputHandler
 19220 ;; This function uses a non-reentrant model
 19221 ;;
 19222                           
 19223                           	psect	text66
 19224  004AE8                     __ptext66:
 19225                           	opt stack 0
 19226  004AE8                     i2_change_state_to_menu_12:
 19227                           	opt stack 19
 19228                           
 19229                           ;UI.c: 491: cur_state = 12;
 19230                           
 19231                           ;incstack = 0
 19232  004AE8  0E00               	movlw	0
 19233  004AEA  0100               	movlb	0	; () banked
 19234  004AEC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19235  004AEE  0E0C               	movlw	12
 19236  004AF0  6FE6               	movwf	_cur_state& (0+255),b
 19237                           
 19238                           ; BSR set to: 0
 19239                           ;UI.c: 493: lcdInst(0b10000000);;
 19240  004AF2  0E80               	movlw	128
 19241  004AF4  EC98  F027         	call	i2_lcdInst
 19242                           
 19243                           ;UI.c: 494: printf("1. DATE/TIME    ");
 19244  004AF8  0E2B               	movlw	low STR_33
 19245  004AFA  6E0D               	movwf	i2printf@f,c
 19246  004AFC  0EFD               	movlw	high STR_33
 19247  004AFE  6E0E               	movwf	i2printf@f+1,c
 19248  004B00  EC58  F00E         	call	i2_printf	;wreg free
 19249                           
 19250                           ;UI.c: 495: lcdInst(0b11000000);;
 19251  004B04  0EC0               	movlw	192
 19252  004B06  EC98  F027         	call	i2_lcdInst
 19253                           
 19254                           ;UI.c: 496: printf("2. SORT        <");
 19255  004B0A  0EC4               	movlw	low STR_34
 19256  004B0C  6E0D               	movwf	i2printf@f,c
 19257  004B0E  0EFD               	movlw	high STR_34
 19258  004B10  6E0E               	movwf	i2printf@f+1,c
 19259  004B12  EC58  F00E         	call	i2_printf	;wreg free
 19260  004B16  0012               	return		;funcret
 19261  004B18                     __end_ofi2_change_state_to_menu_12:
 19262                           	opt stack 0
 19263                           pclatu	equ	0xFFB
 19264                           pclath	equ	0xFFA
 19265                           tblptru	equ	0xFF8
 19266                           tblptrh	equ	0xFF7
 19267                           tblptrl	equ	0xFF6
 19268                           tablat	equ	0xFF5
 19269                           prodh	equ	0xFF4
 19270                           prodl	equ	0xFF3
 19271                           intcon	equ	0xFF2
 19272                           intcon2	equ	0xFF1
 19273                           intcon3	equ	0xFF0
 19274                           indf0	equ	0xFEF
 19275                           postinc0	equ	0xFEE
 19276                           fsr0h	equ	0xFEA
 19277                           fsr0l	equ	0xFE9
 19278                           wreg	equ	0xFE8
 19279                           postdec1	equ	0xFE5
 19280                           fsr1h	equ	0xFE2
 19281                           fsr1l	equ	0xFE1
 19282                           indf2	equ	0xFDF
 19283                           postinc2	equ	0xFDE
 19284                           postdec2	equ	0xFDD
 19285                           fsr2h	equ	0xFDA
 19286                           fsr2l	equ	0xFD9
 19287                           status	equ	0xFD8
 19288                           
 19289 ;; *************** function _change_state_to_menu_23 *****************
 19290 ;; Defined at:
 19291 ;;		line 506 in file "UI.c"
 19292 ;; Parameters:    Size  Location     Type
 19293 ;;		None
 19294 ;; Auto vars:     Size  Location     Type
 19295 ;;		None
 19296 ;; Return value:  Size  Location     Type
 19297 ;;                  1    wreg      void 
 19298 ;; Registers used:
 19299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19300 ;; Tracked objects:
 19301 ;;		On entry : 0/0
 19302 ;;		On exit  : 0/0
 19303 ;;		Unchanged: 0/0
 19304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19309 ;;Total ram usage:        0 bytes
 19310 ;; Hardware stack levels used:    1
 19311 ;; Hardware stack levels required when called:    3
 19312 ;; This function calls:
 19313 ;;		i2_lcdInst
 19314 ;;		i2_printf
 19315 ;; This function is called by:
 19316 ;;		_updateMenu
 19317 ;;		_inputHandler
 19318 ;; This function uses a non-reentrant model
 19319 ;;
 19320                           
 19321                           	psect	text67
 19322  004B18                     __ptext67:
 19323                           	opt stack 0
 19324  004B18                     _change_state_to_menu_23:
 19325                           	opt stack 18
 19326                           
 19327                           ;UI.c: 507: cur_state = 23;
 19328                           
 19329                           ;incstack = 0
 19330  004B18  0E00               	movlw	0
 19331  004B1A  0100               	movlb	0	; () banked
 19332  004B1C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19333  004B1E  0E17               	movlw	23
 19334  004B20  6FE6               	movwf	_cur_state& (0+255),b
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;UI.c: 509: lcdInst(0b10000000);;
 19338  004B22  0E80               	movlw	128
 19339  004B24  EC98  F027         	call	i2_lcdInst
 19340                           
 19341                           ;UI.c: 510: printf("2. SORT         ");
 19342  004B28  0E1A               	movlw	low STR_32
 19343  004B2A  6E0D               	movwf	i2printf@f,c
 19344  004B2C  0EFD               	movlw	high STR_32
 19345  004B2E  6E0E               	movwf	i2printf@f+1,c
 19346  004B30  EC58  F00E         	call	i2_printf	;wreg free
 19347                           
 19348                           ;UI.c: 511: lcdInst(0b11000000);;
 19349  004B34  0EC0               	movlw	192
 19350  004B36  EC98  F027         	call	i2_lcdInst
 19351                           
 19352                           ;UI.c: 512: printf("3. LOGS        <");
 19353  004B3A  0EB3               	movlw	low STR_38
 19354  004B3C  6E0D               	movwf	i2printf@f,c
 19355  004B3E  0EFD               	movlw	high STR_38
 19356  004B40  6E0E               	movwf	i2printf@f+1,c
 19357  004B42  EC58  F00E         	call	i2_printf	;wreg free
 19358  004B46  0012               	return		;funcret
 19359  004B48                     __end_of_change_state_to_menu_23:
 19360                           	opt stack 0
 19361                           pclatu	equ	0xFFB
 19362                           pclath	equ	0xFFA
 19363                           tblptru	equ	0xFF8
 19364                           tblptrh	equ	0xFF7
 19365                           tblptrl	equ	0xFF6
 19366                           tablat	equ	0xFF5
 19367                           prodh	equ	0xFF4
 19368                           prodl	equ	0xFF3
 19369                           intcon	equ	0xFF2
 19370                           intcon2	equ	0xFF1
 19371                           intcon3	equ	0xFF0
 19372                           indf0	equ	0xFEF
 19373                           postinc0	equ	0xFEE
 19374                           fsr0h	equ	0xFEA
 19375                           fsr0l	equ	0xFE9
 19376                           wreg	equ	0xFE8
 19377                           postdec1	equ	0xFE5
 19378                           fsr1h	equ	0xFE2
 19379                           fsr1l	equ	0xFE1
 19380                           indf2	equ	0xFDF
 19381                           postinc2	equ	0xFDE
 19382                           postdec2	equ	0xFDD
 19383                           fsr2h	equ	0xFDA
 19384                           fsr2l	equ	0xFD9
 19385                           status	equ	0xFD8
 19386                           
 19387 ;; *************** function _change_state_to_menu_11 *****************
 19388 ;; Defined at:
 19389 ;;		line 482 in file "UI.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;		None
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;		None
 19394 ;; Return value:  Size  Location     Type
 19395 ;;                  1    wreg      void 
 19396 ;; Registers used:
 19397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19398 ;; Tracked objects:
 19399 ;;		On entry : 0/0
 19400 ;;		On exit  : 0/0
 19401 ;;		Unchanged: 0/0
 19402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19407 ;;Total ram usage:        0 bytes
 19408 ;; Hardware stack levels used:    1
 19409 ;; Hardware stack levels required when called:    3
 19410 ;; This function calls:
 19411 ;;		i2_lcdInst
 19412 ;;		i2_printf
 19413 ;; This function is called by:
 19414 ;;		_updateMenu
 19415 ;;		_inputHandler
 19416 ;; This function uses a non-reentrant model
 19417 ;;
 19418                           
 19419                           	psect	text68
 19420  004B48                     __ptext68:
 19421                           	opt stack 0
 19422  004B48                     _change_state_to_menu_11:
 19423                           	opt stack 18
 19424                           
 19425                           ;UI.c: 483: cur_state = 11;
 19426                           
 19427                           ;incstack = 0
 19428  004B48  0E00               	movlw	0
 19429  004B4A  0100               	movlb	0	; () banked
 19430  004B4C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19431  004B4E  0E0B               	movlw	11
 19432  004B50  6FE6               	movwf	_cur_state& (0+255),b
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;UI.c: 485: lcdInst(0b10000000);;
 19436  004B52  0E80               	movlw	128
 19437  004B54  EC98  F027         	call	i2_lcdInst
 19438                           
 19439                           ;UI.c: 486: printf("1. DATE/TIME   <");
 19440  004B58  0ED5               	movlw	low STR_31
 19441  004B5A  6E0D               	movwf	i2printf@f,c
 19442  004B5C  0EFD               	movlw	high STR_31
 19443  004B5E  6E0E               	movwf	i2printf@f+1,c
 19444  004B60  EC58  F00E         	call	i2_printf	;wreg free
 19445                           
 19446                           ;UI.c: 487: lcdInst(0b11000000);;
 19447  004B64  0EC0               	movlw	192
 19448  004B66  EC98  F027         	call	i2_lcdInst
 19449                           
 19450                           ;UI.c: 488: printf("2. SORT         ");
 19451  004B6A  0E1A               	movlw	low STR_32
 19452  004B6C  6E0D               	movwf	i2printf@f,c
 19453  004B6E  0EFD               	movlw	high STR_32
 19454  004B70  6E0E               	movwf	i2printf@f+1,c
 19455  004B72  EC58  F00E         	call	i2_printf	;wreg free
 19456  004B76  0012               	return		;funcret
 19457  004B78                     __end_of_change_state_to_menu_11:
 19458                           	opt stack 0
 19459                           pclatu	equ	0xFFB
 19460                           pclath	equ	0xFFA
 19461                           tblptru	equ	0xFF8
 19462                           tblptrh	equ	0xFF7
 19463                           tblptrl	equ	0xFF6
 19464                           tablat	equ	0xFF5
 19465                           prodh	equ	0xFF4
 19466                           prodl	equ	0xFF3
 19467                           intcon	equ	0xFF2
 19468                           intcon2	equ	0xFF1
 19469                           intcon3	equ	0xFF0
 19470                           indf0	equ	0xFEF
 19471                           postinc0	equ	0xFEE
 19472                           fsr0h	equ	0xFEA
 19473                           fsr0l	equ	0xFE9
 19474                           wreg	equ	0xFE8
 19475                           postdec1	equ	0xFE5
 19476                           fsr1h	equ	0xFE2
 19477                           fsr1l	equ	0xFE1
 19478                           indf2	equ	0xFDF
 19479                           postinc2	equ	0xFDE
 19480                           postdec2	equ	0xFDD
 19481                           fsr2h	equ	0xFDA
 19482                           fsr2l	equ	0xFD9
 19483                           status	equ	0xFD8
 19484                           
 19485 ;; *************** function _change_state_to_logs_34 *****************
 19486 ;; Defined at:
 19487 ;;		line 549 in file "UI.c"
 19488 ;; Parameters:    Size  Location     Type
 19489 ;;		None
 19490 ;; Auto vars:     Size  Location     Type
 19491 ;;		None
 19492 ;; Return value:  Size  Location     Type
 19493 ;;                  1    wreg      void 
 19494 ;; Registers used:
 19495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19496 ;; Tracked objects:
 19497 ;;		On entry : 0/0
 19498 ;;		On exit  : 0/0
 19499 ;;		Unchanged: 0/0
 19500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19505 ;;Total ram usage:        0 bytes
 19506 ;; Hardware stack levels used:    1
 19507 ;; Hardware stack levels required when called:    3
 19508 ;; This function calls:
 19509 ;;		i2_lcdInst
 19510 ;;		i2_printf
 19511 ;; This function is called by:
 19512 ;;		_updateMenu
 19513 ;;		_inputHandler
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           	psect	text69
 19518  004B78                     __ptext69:
 19519                           	opt stack 0
 19520  004B78                     _change_state_to_logs_34:
 19521                           	opt stack 18
 19522                           
 19523                           ;UI.c: 550: cur_state = 1034;
 19524                           
 19525                           ;incstack = 0
 19526  004B78  0E04               	movlw	4
 19527  004B7A  0100               	movlb	0	; () banked
 19528  004B7C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19529  004B7E  0E0A               	movlw	10
 19530  004B80  6FE6               	movwf	_cur_state& (0+255),b
 19531                           
 19532                           ; BSR set to: 0
 19533                           ;UI.c: 551: lcdInst(0b10000000);;
 19534  004B82  0E80               	movlw	128
 19535  004B84  EC98  F027         	call	i2_lcdInst
 19536                           
 19537                           ;UI.c: 552: printf("LOG 3           ");
 19538  004B88  0EE7               	movlw	low STR_44
 19539  004B8A  6E0D               	movwf	i2printf@f,c
 19540  004B8C  0EFC               	movlw	high STR_44
 19541  004B8E  6E0E               	movwf	i2printf@f+1,c
 19542  004B90  EC58  F00E         	call	i2_printf	;wreg free
 19543                           
 19544                           ;UI.c: 553: lcdInst(0b11000000);;
 19545  004B94  0EC0               	movlw	192
 19546  004B96  EC98  F027         	call	i2_lcdInst
 19547                           
 19548                           ;UI.c: 554: printf("LOG 4          <");
 19549  004B9A  0EA2               	movlw	low STR_50
 19550  004B9C  6E0D               	movwf	i2printf@f,c
 19551  004B9E  0EFD               	movlw	high STR_50
 19552  004BA0  6E0E               	movwf	i2printf@f+1,c
 19553  004BA2  EC58  F00E         	call	i2_printf	;wreg free
 19554  004BA6  0012               	return		;funcret
 19555  004BA8                     __end_of_change_state_to_logs_34:
 19556                           	opt stack 0
 19557                           pclatu	equ	0xFFB
 19558                           pclath	equ	0xFFA
 19559                           tblptru	equ	0xFF8
 19560                           tblptrh	equ	0xFF7
 19561                           tblptrl	equ	0xFF6
 19562                           tablat	equ	0xFF5
 19563                           prodh	equ	0xFF4
 19564                           prodl	equ	0xFF3
 19565                           intcon	equ	0xFF2
 19566                           intcon2	equ	0xFF1
 19567                           intcon3	equ	0xFF0
 19568                           indf0	equ	0xFEF
 19569                           postinc0	equ	0xFEE
 19570                           fsr0h	equ	0xFEA
 19571                           fsr0l	equ	0xFE9
 19572                           wreg	equ	0xFE8
 19573                           postdec1	equ	0xFE5
 19574                           fsr1h	equ	0xFE2
 19575                           fsr1l	equ	0xFE1
 19576                           indf2	equ	0xFDF
 19577                           postinc2	equ	0xFDE
 19578                           postdec2	equ	0xFDD
 19579                           fsr2h	equ	0xFDA
 19580                           fsr2l	equ	0xFD9
 19581                           status	equ	0xFD8
 19582                           
 19583 ;; *************** function _change_state_to_logs_33 *****************
 19584 ;; Defined at:
 19585 ;;		line 542 in file "UI.c"
 19586 ;; Parameters:    Size  Location     Type
 19587 ;;		None
 19588 ;; Auto vars:     Size  Location     Type
 19589 ;;		None
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      void 
 19592 ;; Registers used:
 19593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:        0 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    3
 19606 ;; This function calls:
 19607 ;;		i2_lcdInst
 19608 ;;		i2_printf
 19609 ;; This function is called by:
 19610 ;;		_updateMenu
 19611 ;;		_inputHandler
 19612 ;; This function uses a non-reentrant model
 19613 ;;
 19614                           
 19615                           	psect	text70
 19616  004BA8                     __ptext70:
 19617                           	opt stack 0
 19618  004BA8                     _change_state_to_logs_33:
 19619                           	opt stack 18
 19620                           
 19621                           ;UI.c: 543: cur_state = 1033;
 19622                           
 19623                           ;incstack = 0
 19624  004BA8  0E04               	movlw	4
 19625  004BAA  0100               	movlb	0	; () banked
 19626  004BAC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19627  004BAE  0E09               	movlw	9
 19628  004BB0  6FE6               	movwf	_cur_state& (0+255),b
 19629                           
 19630                           ; BSR set to: 0
 19631                           ;UI.c: 544: lcdInst(0b10000000);;
 19632  004BB2  0E80               	movlw	128
 19633  004BB4  EC98  F027         	call	i2_lcdInst
 19634                           
 19635                           ;UI.c: 545: printf("LOG 3          <");
 19636  004BB8  0E91               	movlw	low STR_46
 19637  004BBA  6E0D               	movwf	i2printf@f,c
 19638  004BBC  0EFD               	movlw	high STR_46
 19639  004BBE  6E0E               	movwf	i2printf@f+1,c
 19640  004BC0  EC58  F00E         	call	i2_printf	;wreg free
 19641                           
 19642                           ;UI.c: 546: lcdInst(0b11000000);;
 19643  004BC4  0EC0               	movlw	192
 19644  004BC6  EC98  F027         	call	i2_lcdInst
 19645                           
 19646                           ;UI.c: 547: printf("LOG 4           ");
 19647  004BCA  0EF8               	movlw	low STR_48
 19648  004BCC  6E0D               	movwf	i2printf@f,c
 19649  004BCE  0EFC               	movlw	high STR_48
 19650  004BD0  6E0E               	movwf	i2printf@f+1,c
 19651  004BD2  EC58  F00E         	call	i2_printf	;wreg free
 19652  004BD6  0012               	return		;funcret
 19653  004BD8                     __end_of_change_state_to_logs_33:
 19654                           	opt stack 0
 19655                           pclatu	equ	0xFFB
 19656                           pclath	equ	0xFFA
 19657                           tblptru	equ	0xFF8
 19658                           tblptrh	equ	0xFF7
 19659                           tblptrl	equ	0xFF6
 19660                           tablat	equ	0xFF5
 19661                           prodh	equ	0xFF4
 19662                           prodl	equ	0xFF3
 19663                           intcon	equ	0xFF2
 19664                           intcon2	equ	0xFF1
 19665                           intcon3	equ	0xFF0
 19666                           indf0	equ	0xFEF
 19667                           postinc0	equ	0xFEE
 19668                           fsr0h	equ	0xFEA
 19669                           fsr0l	equ	0xFE9
 19670                           wreg	equ	0xFE8
 19671                           postdec1	equ	0xFE5
 19672                           fsr1h	equ	0xFE2
 19673                           fsr1l	equ	0xFE1
 19674                           indf2	equ	0xFDF
 19675                           postinc2	equ	0xFDE
 19676                           postdec2	equ	0xFDD
 19677                           fsr2h	equ	0xFDA
 19678                           fsr2l	equ	0xFD9
 19679                           status	equ	0xFD8
 19680                           
 19681 ;; *************** function _change_state_to_logs_23 *****************
 19682 ;; Defined at:
 19683 ;;		line 535 in file "UI.c"
 19684 ;; Parameters:    Size  Location     Type
 19685 ;;		None
 19686 ;; Auto vars:     Size  Location     Type
 19687 ;;		None
 19688 ;; Return value:  Size  Location     Type
 19689 ;;                  1    wreg      void 
 19690 ;; Registers used:
 19691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19692 ;; Tracked objects:
 19693 ;;		On entry : 0/0
 19694 ;;		On exit  : 0/0
 19695 ;;		Unchanged: 0/0
 19696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19701 ;;Total ram usage:        0 bytes
 19702 ;; Hardware stack levels used:    1
 19703 ;; Hardware stack levels required when called:    3
 19704 ;; This function calls:
 19705 ;;		i2_lcdInst
 19706 ;;		i2_printf
 19707 ;; This function is called by:
 19708 ;;		_updateMenu
 19709 ;;		_inputHandler
 19710 ;; This function uses a non-reentrant model
 19711 ;;
 19712                           
 19713                           	psect	text71
 19714  004CC4                     __ptext71:
 19715                           	opt stack 0
 19716  004CC4                     _change_state_to_logs_23:
 19717                           	opt stack 18
 19718                           
 19719                           ;UI.c: 536: cur_state = 1023;
 19720                           
 19721                           ;incstack = 0
 19722  004CC4  0E03               	movlw	3
 19723  004CC6  0100               	movlb	0	; () banked
 19724  004CC8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19725  004CCA  69E6               	setf	_cur_state& (0+255),b
 19726                           
 19727                           ; BSR set to: 0
 19728                           ;UI.c: 537: lcdInst(0b10000000);;
 19729  004CCC  0E80               	movlw	128
 19730  004CCE  EC98  F027         	call	i2_lcdInst
 19731                           
 19732                           ;UI.c: 538: printf("LOG 2           ");
 19733  004CD2  0ED6               	movlw	low STR_40
 19734  004CD4  6E0D               	movwf	i2printf@f,c
 19735  004CD6  0EFC               	movlw	high STR_40
 19736  004CD8  6E0E               	movwf	i2printf@f+1,c
 19737  004CDA  EC58  F00E         	call	i2_printf	;wreg free
 19738                           
 19739                           ;UI.c: 539: lcdInst(0b11000000);;
 19740  004CDE  0EC0               	movlw	192
 19741  004CE0  EC98  F027         	call	i2_lcdInst
 19742                           
 19743                           ;UI.c: 540: printf("LOG 3          <");
 19744  004CE4  0E91               	movlw	low STR_46
 19745  004CE6  6E0D               	movwf	i2printf@f,c
 19746  004CE8  0EFD               	movlw	high STR_46
 19747  004CEA  6E0E               	movwf	i2printf@f+1,c
 19748  004CEC  EC58  F00E         	call	i2_printf	;wreg free
 19749  004CF0  0012               	return		;funcret
 19750  004CF2                     __end_of_change_state_to_logs_23:
 19751                           	opt stack 0
 19752                           pclatu	equ	0xFFB
 19753                           pclath	equ	0xFFA
 19754                           tblptru	equ	0xFF8
 19755                           tblptrh	equ	0xFF7
 19756                           tblptrl	equ	0xFF6
 19757                           tablat	equ	0xFF5
 19758                           prodh	equ	0xFF4
 19759                           prodl	equ	0xFF3
 19760                           intcon	equ	0xFF2
 19761                           intcon2	equ	0xFF1
 19762                           intcon3	equ	0xFF0
 19763                           indf0	equ	0xFEF
 19764                           postinc0	equ	0xFEE
 19765                           fsr0h	equ	0xFEA
 19766                           fsr0l	equ	0xFE9
 19767                           wreg	equ	0xFE8
 19768                           postdec1	equ	0xFE5
 19769                           fsr1h	equ	0xFE2
 19770                           fsr1l	equ	0xFE1
 19771                           indf2	equ	0xFDF
 19772                           postinc2	equ	0xFDE
 19773                           postdec2	equ	0xFDD
 19774                           fsr2h	equ	0xFDA
 19775                           fsr2l	equ	0xFD9
 19776                           status	equ	0xFD8
 19777                           
 19778 ;; *************** function _change_state_to_logs_22 *****************
 19779 ;; Defined at:
 19780 ;;		line 528 in file "UI.c"
 19781 ;; Parameters:    Size  Location     Type
 19782 ;;		None
 19783 ;; Auto vars:     Size  Location     Type
 19784 ;;		None
 19785 ;; Return value:  Size  Location     Type
 19786 ;;                  1    wreg      void 
 19787 ;; Registers used:
 19788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19789 ;; Tracked objects:
 19790 ;;		On entry : 0/0
 19791 ;;		On exit  : 0/0
 19792 ;;		Unchanged: 0/0
 19793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19798 ;;Total ram usage:        0 bytes
 19799 ;; Hardware stack levels used:    1
 19800 ;; Hardware stack levels required when called:    3
 19801 ;; This function calls:
 19802 ;;		i2_lcdInst
 19803 ;;		i2_printf
 19804 ;; This function is called by:
 19805 ;;		_updateMenu
 19806 ;;		_inputHandler
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           	psect	text72
 19811  004BD8                     __ptext72:
 19812                           	opt stack 0
 19813  004BD8                     _change_state_to_logs_22:
 19814                           	opt stack 18
 19815                           
 19816                           ;UI.c: 529: cur_state = 1022;
 19817                           
 19818                           ;incstack = 0
 19819  004BD8  0E03               	movlw	3
 19820  004BDA  0100               	movlb	0	; () banked
 19821  004BDC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19822  004BDE  0EFE               	movlw	254
 19823  004BE0  6FE6               	movwf	_cur_state& (0+255),b
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;UI.c: 530: lcdInst(0b10000000);;
 19827  004BE2  0E80               	movlw	128
 19828  004BE4  EC98  F027         	call	i2_lcdInst
 19829                           
 19830                           ;UI.c: 531: printf("LOG 2          <");
 19831  004BE8  0E80               	movlw	low STR_42
 19832  004BEA  6E0D               	movwf	i2printf@f,c
 19833  004BEC  0EFD               	movlw	high STR_42
 19834  004BEE  6E0E               	movwf	i2printf@f+1,c
 19835  004BF0  EC58  F00E         	call	i2_printf	;wreg free
 19836                           
 19837                           ;UI.c: 532: lcdInst(0b11000000);;
 19838  004BF4  0EC0               	movlw	192
 19839  004BF6  EC98  F027         	call	i2_lcdInst
 19840                           
 19841                           ;UI.c: 533: printf("LOG 3           ");
 19842  004BFA  0EE7               	movlw	low STR_44
 19843  004BFC  6E0D               	movwf	i2printf@f,c
 19844  004BFE  0EFC               	movlw	high STR_44
 19845  004C00  6E0E               	movwf	i2printf@f+1,c
 19846  004C02  EC58  F00E         	call	i2_printf	;wreg free
 19847  004C06  0012               	return		;funcret
 19848  004C08                     __end_of_change_state_to_logs_22:
 19849                           	opt stack 0
 19850                           pclatu	equ	0xFFB
 19851                           pclath	equ	0xFFA
 19852                           tblptru	equ	0xFF8
 19853                           tblptrh	equ	0xFF7
 19854                           tblptrl	equ	0xFF6
 19855                           tablat	equ	0xFF5
 19856                           prodh	equ	0xFF4
 19857                           prodl	equ	0xFF3
 19858                           intcon	equ	0xFF2
 19859                           intcon2	equ	0xFF1
 19860                           intcon3	equ	0xFF0
 19861                           indf0	equ	0xFEF
 19862                           postinc0	equ	0xFEE
 19863                           fsr0h	equ	0xFEA
 19864                           fsr0l	equ	0xFE9
 19865                           wreg	equ	0xFE8
 19866                           postdec1	equ	0xFE5
 19867                           fsr1h	equ	0xFE2
 19868                           fsr1l	equ	0xFE1
 19869                           indf2	equ	0xFDF
 19870                           postinc2	equ	0xFDE
 19871                           postdec2	equ	0xFDD
 19872                           fsr2h	equ	0xFDA
 19873                           fsr2l	equ	0xFD9
 19874                           status	equ	0xFD8
 19875                           
 19876 ;; *************** function _change_state_to_logs_12 *****************
 19877 ;; Defined at:
 19878 ;;		line 521 in file "UI.c"
 19879 ;; Parameters:    Size  Location     Type
 19880 ;;		None
 19881 ;; Auto vars:     Size  Location     Type
 19882 ;;		None
 19883 ;; Return value:  Size  Location     Type
 19884 ;;                  1    wreg      void 
 19885 ;; Registers used:
 19886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19887 ;; Tracked objects:
 19888 ;;		On entry : 0/0
 19889 ;;		On exit  : 0/0
 19890 ;;		Unchanged: 0/0
 19891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19896 ;;Total ram usage:        0 bytes
 19897 ;; Hardware stack levels used:    1
 19898 ;; Hardware stack levels required when called:    3
 19899 ;; This function calls:
 19900 ;;		i2_lcdInst
 19901 ;;		i2_printf
 19902 ;; This function is called by:
 19903 ;;		_updateMenu
 19904 ;;		_inputHandler
 19905 ;; This function uses a non-reentrant model
 19906 ;;
 19907                           
 19908                           	psect	text73
 19909  004C08                     __ptext73:
 19910                           	opt stack 0
 19911  004C08                     _change_state_to_logs_12:
 19912                           	opt stack 18
 19913                           
 19914                           ;UI.c: 522: cur_state = 1012;
 19915                           
 19916                           ;incstack = 0
 19917  004C08  0E03               	movlw	3
 19918  004C0A  0100               	movlb	0	; () banked
 19919  004C0C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19920  004C0E  0EF4               	movlw	244
 19921  004C10  6FE6               	movwf	_cur_state& (0+255),b
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;UI.c: 523: lcdInst(0b10000000);;
 19925  004C12  0E80               	movlw	128
 19926  004C14  EC98  F027         	call	i2_lcdInst
 19927                           
 19928                           ;UI.c: 524: printf("LOG 1           ");
 19929  004C18  0EC5               	movlw	low STR_41
 19930  004C1A  6E0D               	movwf	i2printf@f,c
 19931  004C1C  0EFC               	movlw	high STR_41
 19932  004C1E  6E0E               	movwf	i2printf@f+1,c
 19933  004C20  EC58  F00E         	call	i2_printf	;wreg free
 19934                           
 19935                           ;UI.c: 525: lcdInst(0b11000000);;
 19936  004C24  0EC0               	movlw	192
 19937  004C26  EC98  F027         	call	i2_lcdInst
 19938                           
 19939                           ;UI.c: 526: printf("LOG 2          <");
 19940  004C2A  0E80               	movlw	low STR_42
 19941  004C2C  6E0D               	movwf	i2printf@f,c
 19942  004C2E  0EFD               	movlw	high STR_42
 19943  004C30  6E0E               	movwf	i2printf@f+1,c
 19944  004C32  EC58  F00E         	call	i2_printf	;wreg free
 19945  004C36  0012               	return		;funcret
 19946  004C38                     __end_of_change_state_to_logs_12:
 19947                           	opt stack 0
 19948                           pclatu	equ	0xFFB
 19949                           pclath	equ	0xFFA
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           intcon2	equ	0xFF1
 19958                           intcon3	equ	0xFF0
 19959                           indf0	equ	0xFEF
 19960                           postinc0	equ	0xFEE
 19961                           fsr0h	equ	0xFEA
 19962                           fsr0l	equ	0xFE9
 19963                           wreg	equ	0xFE8
 19964                           postdec1	equ	0xFE5
 19965                           fsr1h	equ	0xFE2
 19966                           fsr1l	equ	0xFE1
 19967                           indf2	equ	0xFDF
 19968                           postinc2	equ	0xFDE
 19969                           postdec2	equ	0xFDD
 19970                           fsr2h	equ	0xFDA
 19971                           fsr2l	equ	0xFD9
 19972                           status	equ	0xFD8
 19973                           
 19974 ;; *************** function _change_state_to_logs_11 *****************
 19975 ;; Defined at:
 19976 ;;		line 514 in file "UI.c"
 19977 ;; Parameters:    Size  Location     Type
 19978 ;;		None
 19979 ;; Auto vars:     Size  Location     Type
 19980 ;;		None
 19981 ;; Return value:  Size  Location     Type
 19982 ;;                  1    wreg      void 
 19983 ;; Registers used:
 19984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19985 ;; Tracked objects:
 19986 ;;		On entry : 0/0
 19987 ;;		On exit  : 0/0
 19988 ;;		Unchanged: 0/0
 19989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;Total ram usage:        0 bytes
 19995 ;; Hardware stack levels used:    1
 19996 ;; Hardware stack levels required when called:    3
 19997 ;; This function calls:
 19998 ;;		i2_lcdInst
 19999 ;;		i2_printf
 20000 ;; This function is called by:
 20001 ;;		_updateMenu
 20002 ;;		_inputHandler
 20003 ;; This function uses a non-reentrant model
 20004 ;;
 20005                           
 20006                           	psect	text74
 20007  004C38                     __ptext74:
 20008                           	opt stack 0
 20009  004C38                     _change_state_to_logs_11:
 20010                           	opt stack 18
 20011                           
 20012                           ;UI.c: 515: cur_state = 1011;
 20013                           
 20014                           ;incstack = 0
 20015  004C38  0E03               	movlw	3
 20016  004C3A  0100               	movlb	0	; () banked
 20017  004C3C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20018  004C3E  0EF3               	movlw	243
 20019  004C40  6FE6               	movwf	_cur_state& (0+255),b
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;UI.c: 516: lcdInst(0b10000000);;
 20023  004C42  0E80               	movlw	128
 20024  004C44  EC98  F027         	call	i2_lcdInst
 20025                           
 20026                           ;UI.c: 517: printf("LOG 1          <");
 20027  004C48  0E6F               	movlw	low STR_39
 20028  004C4A  6E0D               	movwf	i2printf@f,c
 20029  004C4C  0EFD               	movlw	high STR_39
 20030  004C4E  6E0E               	movwf	i2printf@f+1,c
 20031  004C50  EC58  F00E         	call	i2_printf	;wreg free
 20032                           
 20033                           ;UI.c: 518: lcdInst(0b11000000);;
 20034  004C54  0EC0               	movlw	192
 20035  004C56  EC98  F027         	call	i2_lcdInst
 20036                           
 20037                           ;UI.c: 519: printf("LOG 2           ");
 20038  004C5A  0ED6               	movlw	low STR_40
 20039  004C5C  6E0D               	movwf	i2printf@f,c
 20040  004C5E  0EFC               	movlw	high STR_40
 20041  004C60  6E0E               	movwf	i2printf@f+1,c
 20042  004C62  EC58  F00E         	call	i2_printf	;wreg free
 20043  004C66  0012               	return		;funcret
 20044  004C68                     __end_of_change_state_to_logs_11:
 20045                           	opt stack 0
 20046                           pclatu	equ	0xFFB
 20047                           pclath	equ	0xFFA
 20048                           tblptru	equ	0xFF8
 20049                           tblptrh	equ	0xFF7
 20050                           tblptrl	equ	0xFF6
 20051                           tablat	equ	0xFF5
 20052                           prodh	equ	0xFF4
 20053                           prodl	equ	0xFF3
 20054                           intcon	equ	0xFF2
 20055                           intcon2	equ	0xFF1
 20056                           intcon3	equ	0xFF0
 20057                           indf0	equ	0xFEF
 20058                           postinc0	equ	0xFEE
 20059                           fsr0h	equ	0xFEA
 20060                           fsr0l	equ	0xFE9
 20061                           wreg	equ	0xFE8
 20062                           postdec1	equ	0xFE5
 20063                           fsr1h	equ	0xFE2
 20064                           fsr1l	equ	0xFE1
 20065                           indf2	equ	0xFDF
 20066                           postinc2	equ	0xFDE
 20067                           postdec2	equ	0xFDD
 20068                           fsr2h	equ	0xFDA
 20069                           fsr2l	equ	0xFD9
 20070                           status	equ	0xFD8
 20071                           
 20072 ;; *************** function _dispLogs *****************
 20073 ;; Defined at:
 20074 ;;		line 467 in file "UI.c"
 20075 ;; Parameters:    Size  Location     Type
 20076 ;;  myLog           2   17[COMRAM] int 
 20077 ;; Auto vars:     Size  Location     Type
 20078 ;;		None
 20079 ;; Return value:  Size  Location     Type
 20080 ;;                  1    wreg      void 
 20081 ;; Registers used:
 20082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20083 ;; Tracked objects:
 20084 ;;		On entry : 0/0
 20085 ;;		On exit  : 0/0
 20086 ;;		Unchanged: 0/0
 20087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20088 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20091 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20092 ;;Total ram usage:        2 bytes
 20093 ;; Hardware stack levels used:    1
 20094 ;; Hardware stack levels required when called:    2
 20095 ;; This function calls:
 20096 ;;		_retrieveLog
 20097 ;; This function is called by:
 20098 ;;		_updateMenu
 20099 ;; This function uses a non-reentrant model
 20100 ;;
 20101                           
 20102                           	psect	text75
 20103  004E10                     __ptext75:
 20104                           	opt stack 0
 20105  004E10                     _dispLogs:
 20106                           	opt stack 20
 20107                           
 20108                           ;UI.c: 468: logstate = 1;
 20109                           
 20110                           ;incstack = 0
 20111  004E10  0E00               	movlw	0
 20112  004E12  0100               	movlb	0	; () banked
 20113  004E14  6FF7               	movwf	(_logstate+1)& (0+255),b
 20114  004E16  0E01               	movlw	1
 20115  004E18  6FF6               	movwf	_logstate& (0+255),b
 20116                           
 20117                           ; BSR set to: 0
 20118                           ;UI.c: 469: log = myLog;
 20119  004E1A  C012  F0EC         	movff	dispLogs@myLog,_log
 20120  004E1E  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;UI.c: 470: retrieveLog(myLog - 1);
 20124  004E22  0EFF               	movlw	255
 20125  004E24  2412               	addwf	dispLogs@myLog,w,c
 20126  004E26  6E07               	movwf	retrieveLog@logNum,c
 20127  004E28  0EFF               	movlw	255
 20128  004E2A  2013               	addwfc	dispLogs@myLog+1,w,c
 20129  004E2C  6E08               	movwf	retrieveLog@logNum+1,c
 20130  004E2E  ECA3  F01C         	call	_retrieveLog	;wreg free
 20131  004E32  0012               	return		;funcret
 20132  004E34                     __end_of_dispLogs:
 20133                           	opt stack 0
 20134                           pclatu	equ	0xFFB
 20135                           pclath	equ	0xFFA
 20136                           tblptru	equ	0xFF8
 20137                           tblptrh	equ	0xFF7
 20138                           tblptrl	equ	0xFF6
 20139                           tablat	equ	0xFF5
 20140                           prodh	equ	0xFF4
 20141                           prodl	equ	0xFF3
 20142                           intcon	equ	0xFF2
 20143                           intcon2	equ	0xFF1
 20144                           intcon3	equ	0xFF0
 20145                           indf0	equ	0xFEF
 20146                           postinc0	equ	0xFEE
 20147                           fsr0h	equ	0xFEA
 20148                           fsr0l	equ	0xFE9
 20149                           wreg	equ	0xFE8
 20150                           postdec1	equ	0xFE5
 20151                           fsr1h	equ	0xFE2
 20152                           fsr1l	equ	0xFE1
 20153                           indf2	equ	0xFDF
 20154                           postinc2	equ	0xFDE
 20155                           postdec2	equ	0xFDD
 20156                           fsr2h	equ	0xFDA
 20157                           fsr2l	equ	0xFD9
 20158                           status	equ	0xFD8
 20159                           
 20160 ;; *************** function _retrieveLog *****************
 20161 ;; Defined at:
 20162 ;;		line 134 in file "EEPROM.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;  logNum          2    6[COMRAM] int 
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;  i               2   13[COMRAM] int 
 20167 ;;  addr            2   15[COMRAM] unsigned short 
 20168 ;;  byte3           1   12[COMRAM] unsigned char 
 20169 ;;  byte2           1   11[COMRAM] unsigned char 
 20170 ;;  byte1           1   10[COMRAM] unsigned char 
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  1    wreg      void 
 20173 ;; Registers used:
 20174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20175 ;; Tracked objects:
 20176 ;;		On entry : 0/0
 20177 ;;		On exit  : 0/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20181 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20183 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;Total ram usage:       11 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; Hardware stack levels required when called:    1
 20187 ;; This function calls:
 20188 ;;		i2_EEPROM_read
 20189 ;;		i2___wmul
 20190 ;; This function is called by:
 20191 ;;		_dispLogs
 20192 ;; This function uses a non-reentrant model
 20193 ;;
 20194                           
 20195                           	psect	text76
 20196  003946                     __ptext76:
 20197                           	opt stack 0
 20198  003946                     _retrieveLog:
 20199                           	opt stack 20
 20200                           
 20201                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 20202                           
 20203                           ;incstack = 0
 20204  003946  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 20205  00394A  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 20206  00394E  0E00               	movlw	0
 20207  003950  6E04               	movwf	i2___wmul@multiplicand+1,c
 20208  003952  0E0B               	movlw	11
 20209  003954  6E03               	movwf	i2___wmul@multiplicand,c
 20210  003956  ECE2  F026         	call	i2___wmul	;wreg free
 20211  00395A  0E01               	movlw	1
 20212  00395C  2401               	addwf	?i2___wmul,w,c
 20213  00395E  6E10               	movwf	retrieveLog@addr,c
 20214  003960  0E00               	movlw	0
 20215  003962  2002               	addwfc	?i2___wmul+1,w,c
 20216  003964  6E11               	movwf	retrieveLog@addr+1,c
 20217                           
 20218                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 20219  003966  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20220  00396A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20221  00396E  EC64  F027         	call	i2_EEPROM_read	;wreg free
 20222  003972  6E0B               	movwf	retrieveLog@byte1,c
 20223                           
 20224                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 20225  003974  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20226  003978  0E80               	movlw	128
 20227  00397A  1609               	andwf	??_retrieveLog,f,c
 20228  00397C  5009               	movf	??_retrieveLog,w,c
 20229  00397E  0100               	movlb	0	; () banked
 20230  003980  6FEE               	movwf	_log_completion& (0+255),b
 20231  003982  6BEF               	clrf	(_log_completion+1)& (0+255),b
 20232                           
 20233                           ; BSR set to: 0
 20234                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 20235  003984  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 20236  003988  0E0F               	movlw	15
 20237  00398A  1609               	andwf	??_retrieveLog,f,c
 20238  00398C  5009               	movf	??_retrieveLog,w,c
 20239  00398E  6E75               	movwf	_log_count_total,c
 20240  003990  6A76               	clrf	_log_count_total+1,c
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;EEPROM.c: 146: addr++;
 20244  003992  4A10               	infsnz	retrieveLog@addr,f,c
 20245  003994  2A11               	incf	retrieveLog@addr+1,f,c
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 20249  003996  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20250  00399A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20251  00399E  EC64  F027         	call	i2_EEPROM_read	;wreg free
 20252  0039A2  6E0C               	movwf	retrieveLog@byte2,c
 20253                           
 20254                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 20255  0039A4  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20256  0039A8  3A09               	swapf	??_retrieveLog,f,c
 20257  0039AA  0E0F               	movlw	15
 20258  0039AC  1609               	andwf	??_retrieveLog,f,c
 20259  0039AE  0E0F               	movlw	15
 20260  0039B0  1609               	andwf	??_retrieveLog,f,c
 20261  0039B2  5009               	movf	??_retrieveLog,w,c
 20262  0039B4  0100               	movlb	0	; () banked
 20263  0039B6  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 20264  0039B8  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 20265                           
 20266                           ; BSR set to: 0
 20267                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 20268  0039BA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 20269  0039BE  0E0F               	movlw	15
 20270  0039C0  1609               	andwf	??_retrieveLog,f,c
 20271  0039C2  5009               	movf	??_retrieveLog,w,c
 20272  0039C4  0100               	movlb	0	; () banked
 20273  0039C6  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 20274  0039C8  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;EEPROM.c: 152: addr++;
 20278  0039CA  4A10               	infsnz	retrieveLog@addr,f,c
 20279  0039CC  2A11               	incf	retrieveLog@addr+1,f,c
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 20283  0039CE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20284  0039D2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20285  0039D6  EC64  F027         	call	i2_EEPROM_read	;wreg free
 20286  0039DA  6E0D               	movwf	retrieveLog@byte3,c
 20287                           
 20288                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 20289  0039DC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20290  0039E0  3A09               	swapf	??_retrieveLog,f,c
 20291  0039E2  0E0F               	movlw	15
 20292  0039E4  1609               	andwf	??_retrieveLog,f,c
 20293  0039E6  0E0F               	movlw	15
 20294  0039E8  1609               	andwf	??_retrieveLog,f,c
 20295  0039EA  5009               	movf	??_retrieveLog,w,c
 20296  0039EC  6E73               	movwf	_log_count_can_w_lab,c
 20297  0039EE  6A74               	clrf	_log_count_can_w_lab+1,c
 20298                           
 20299                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 20300  0039F0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 20301  0039F4  0E0F               	movlw	15
 20302  0039F6  1609               	andwf	??_retrieveLog,f,c
 20303  0039F8  5009               	movf	??_retrieveLog,w,c
 20304  0039FA  6E71               	movwf	_log_count_can_no_lab,c
 20305  0039FC  6A72               	clrf	_log_count_can_no_lab+1,c
 20306                           
 20307                           ;EEPROM.c: 156: addr++;
 20308  0039FE  4A10               	infsnz	retrieveLog@addr,f,c
 20309  003A00  2A11               	incf	retrieveLog@addr+1,f,c
 20310                           
 20311                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 20312  003A02  0E00               	movlw	0
 20313  003A04  6E0F               	movwf	retrieveLog@i+1,c
 20314  003A06  0E00               	movlw	0
 20315  003A08  6E0E               	movwf	retrieveLog@i,c
 20316  003A0A                     i2l6381:
 20317  003A0A  BE0F               	btfsc	retrieveLog@i+1,7,c
 20318  003A0C  D006               	goto	i2l6385
 20319  003A0E  500F               	movf	retrieveLog@i+1,w,c
 20320  003A10  E11E               	bnz	i2l6393
 20321  003A12  0E07               	movlw	7
 20322  003A14  5C0E               	subwf	retrieveLog@i,w,c
 20323  003A16  B0D8               	btfsc	status,0,c
 20324  003A18  D01A               	goto	i2l6393
 20325  003A1A                     i2l6385:
 20326                           
 20327                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 20328  003A1A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20329  003A1E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20330  003A22  EC64  F027         	call	i2_EEPROM_read	;wreg free
 20331  003A26  6E09               	movwf	??_retrieveLog& (0+255),c
 20332  003A28  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 20333  003A2A  90D8               	bcf	status,0,c
 20334  003A2C  340E               	rlcf	retrieveLog@i,w,c
 20335  003A2E  6ED9               	movwf	fsr2l,c
 20336  003A30  340F               	rlcf	retrieveLog@i+1,w,c
 20337  003A32  6EDA               	movwf	fsr2h,c
 20338  003A34  0E00               	movlw	low _log_startTime
 20339  003A36  26D9               	addwf	fsr2l,f,c
 20340  003A38  0E01               	movlw	high _log_startTime
 20341  003A3A  22DA               	addwfc	fsr2h,f,c
 20342  003A3C  C009  FFDE         	movff	??_retrieveLog,postinc2
 20343  003A40  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 20344                           
 20345                           ;EEPROM.c: 161: addr++;
 20346  003A44  4A10               	infsnz	retrieveLog@addr,f,c
 20347  003A46  2A11               	incf	retrieveLog@addr+1,f,c
 20348  003A48  4A0E               	infsnz	retrieveLog@i,f,c
 20349  003A4A  2A0F               	incf	retrieveLog@i+1,f,c
 20350  003A4C  D7DE               	goto	i2l6381
 20351  003A4E                     i2l6393:
 20352                           
 20353                           ;EEPROM.c: 162: }
 20354                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 20355  003A4E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 20356  003A52  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 20357  003A56  EC64  F027         	call	i2_EEPROM_read	;wreg free
 20358  003A5A  6E09               	movwf	??_retrieveLog& (0+255),c
 20359  003A5C  5009               	movf	??_retrieveLog,w,c
 20360  003A5E  0100               	movlb	0	; () banked
 20361  003A60  6FF4               	movwf	_log_total_time& (0+255),b
 20362  003A62  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 20363                           
 20364                           ; BSR set to: 0
 20365  003A64  0012               	return		;funcret
 20366  003A66                     __end_of_retrieveLog:
 20367                           	opt stack 0
 20368                           pclatu	equ	0xFFB
 20369                           pclath	equ	0xFFA
 20370                           tblptru	equ	0xFF8
 20371                           tblptrh	equ	0xFF7
 20372                           tblptrl	equ	0xFF6
 20373                           tablat	equ	0xFF5
 20374                           prodh	equ	0xFF4
 20375                           prodl	equ	0xFF3
 20376                           intcon	equ	0xFF2
 20377                           intcon2	equ	0xFF1
 20378                           intcon3	equ	0xFF0
 20379                           indf0	equ	0xFEF
 20380                           postinc0	equ	0xFEE
 20381                           fsr0h	equ	0xFEA
 20382                           fsr0l	equ	0xFE9
 20383                           wreg	equ	0xFE8
 20384                           postdec1	equ	0xFE5
 20385                           fsr1h	equ	0xFE2
 20386                           fsr1l	equ	0xFE1
 20387                           indf2	equ	0xFDF
 20388                           postinc2	equ	0xFDE
 20389                           postdec2	equ	0xFDD
 20390                           fsr2h	equ	0xFDA
 20391                           fsr2l	equ	0xFD9
 20392                           status	equ	0xFD8
 20393                           
 20394 ;; *************** function i2_EEPROM_read *****************
 20395 ;; Defined at:
 20396 ;;		line 68 in file "EEPROM.c"
 20397 ;; Parameters:    Size  Location     Type
 20398 ;;  address         2    0[COMRAM] unsigned short 
 20399 ;; Auto vars:     Size  Location     Type
 20400 ;;		None
 20401 ;; Return value:  Size  Location     Type
 20402 ;;                  1    wreg      unsigned char 
 20403 ;; Registers used:
 20404 ;;		wreg, status,2
 20405 ;; Tracked objects:
 20406 ;;		On entry : 0/0
 20407 ;;		On exit  : 0/0
 20408 ;;		Unchanged: 0/0
 20409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20414 ;;Total ram usage:        2 bytes
 20415 ;; Hardware stack levels used:    1
 20416 ;; This function calls:
 20417 ;;		Nothing
 20418 ;; This function is called by:
 20419 ;;		_retrieveLog
 20420 ;; This function uses a non-reentrant model
 20421 ;;
 20422                           
 20423                           	psect	text77
 20424  004EC8                     __ptext77:
 20425                           	opt stack 0
 20426  004EC8                     i2_EEPROM_read:
 20427                           	opt stack 20
 20428                           
 20429                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 20430                           
 20431                           ; BSR set to: 0
 20432                           ;incstack = 0
 20433  004EC8  5002               	movf	i2EEPROM_read@address+1,w,c
 20434  004ECA  6EAA               	movwf	4010,c	;volatile
 20435                           
 20436                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 20437  004ECC  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 20438                           
 20439                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 20440  004ED0  9EA6               	bcf	4006,7,c	;volatile
 20441                           
 20442                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 20443  004ED2  9CA6               	bcf	4006,6,c	;volatile
 20444                           
 20445                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 20446  004ED4  80A6               	bsf	4006,0,c	;volatile
 20447  004ED6                     i2l988:
 20448  004ED6  B0A6               	btfsc	4006,0,c	;volatile
 20449  004ED8  D7FE               	goto	i2l988
 20450                           
 20451                           ;EEPROM.c: 81: return EEDATA;
 20452  004EDA  50A8               	movf	4008,w,c	;volatile
 20453  004EDC  0012               	return	
 20454  004EDE                     __end_ofi2_EEPROM_read:
 20455                           	opt stack 0
 20456                           pclatu	equ	0xFFB
 20457                           pclath	equ	0xFFA
 20458                           tblptru	equ	0xFF8
 20459                           tblptrh	equ	0xFF7
 20460                           tblptrl	equ	0xFF6
 20461                           tablat	equ	0xFF5
 20462                           prodh	equ	0xFF4
 20463                           prodl	equ	0xFF3
 20464                           intcon	equ	0xFF2
 20465                           intcon2	equ	0xFF1
 20466                           intcon3	equ	0xFF0
 20467                           indf0	equ	0xFEF
 20468                           postinc0	equ	0xFEE
 20469                           fsr0h	equ	0xFEA
 20470                           fsr0l	equ	0xFE9
 20471                           wreg	equ	0xFE8
 20472                           postdec1	equ	0xFE5
 20473                           fsr1h	equ	0xFE2
 20474                           fsr1l	equ	0xFE1
 20475                           indf2	equ	0xFDF
 20476                           postinc2	equ	0xFDE
 20477                           postdec2	equ	0xFDD
 20478                           fsr2h	equ	0xFDA
 20479                           fsr2l	equ	0xFD9
 20480                           status	equ	0xFD8
 20481                           
 20482 ;; *************** function _printSortTimer *****************
 20483 ;; Defined at:
 20484 ;;		line 385 in file "sort.c"
 20485 ;; Parameters:    Size  Location     Type
 20486 ;;		None
 20487 ;; Auto vars:     Size  Location     Type
 20488 ;;  i               2   70[COMRAM] int 
 20489 ;;  curTime        14   44[COMRAM] int [7]
 20490 ;;  timeDiff        2   68[COMRAM] unsigned int 
 20491 ;;  sec             2   64[COMRAM] int 
 20492 ;;  min             2   62[COMRAM] int 
 20493 ;;  cur_sec         2   60[COMRAM] unsigned int 
 20494 ;;  start_sec       2   58[COMRAM] unsigned int 
 20495 ;; Return value:  Size  Location     Type
 20496 ;;                  1    wreg      void 
 20497 ;; Registers used:
 20498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20499 ;; Tracked objects:
 20500 ;;		On entry : 0/0
 20501 ;;		On exit  : 0/0
 20502 ;;		Unchanged: 0/0
 20503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20505 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20507 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20508 ;;Total ram usage:       31 bytes
 20509 ;; Hardware stack levels used:    1
 20510 ;; Hardware stack levels required when called:    3
 20511 ;; This function calls:
 20512 ;;		i2___lwdiv
 20513 ;;		i2___lwmod
 20514 ;;		i2___wmul
 20515 ;;		i2_getRTC
 20516 ;;		i2_lcdInst
 20517 ;;		i2_printf
 20518 ;; This function is called by:
 20519 ;;		_handler
 20520 ;; This function uses a non-reentrant model
 20521 ;;
 20522                           
 20523                           	psect	text78
 20524  002F3C                     __ptext78:
 20525                           	opt stack 0
 20526  002F3C                     _printSortTimer:
 20527                           	opt stack 20
 20528                           
 20529                           ;sort.c: 386: getRTC();
 20530                           
 20531                           ;incstack = 0
 20532  002F3C  EC5A  F022         	call	i2_getRTC	;wreg free
 20533                           
 20534                           ;sort.c: 387: int curTime[7];
 20535                           ;sort.c: 388: for(int i = 0; i < 7; i++){
 20536  002F40  0E00               	movlw	0
 20537  002F42  6E48               	movwf	printSortTimer@i+1,c
 20538  002F44  0E00               	movlw	0
 20539  002F46  6E47               	movwf	printSortTimer@i,c
 20540  002F48                     i2l8717:
 20541  002F48  BE48               	btfsc	printSortTimer@i+1,7,c
 20542  002F4A  D006               	goto	i2l8721
 20543  002F4C  5048               	movf	printSortTimer@i+1,w,c
 20544  002F4E  E131               	bnz	i2l8727
 20545  002F50  0E07               	movlw	7
 20546  002F52  5C47               	subwf	printSortTimer@i,w,c
 20547  002F54  B0D8               	btfsc	status,0,c
 20548  002F56  D02D               	goto	i2l8727
 20549  002F58                     i2l8721:
 20550                           
 20551                           ;sort.c: 389: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20552  002F58  0E24               	movlw	low _time
 20553  002F5A  2447               	addwf	printSortTimer@i,w,c
 20554  002F5C  6ED9               	movwf	fsr2l,c
 20555  002F5E  0E01               	movlw	high _time
 20556  002F60  2048               	addwfc	printSortTimer@i+1,w,c
 20557  002F62  6EDA               	movwf	fsr2h,c
 20558  002F64  50DF               	movf	indf2,w,c
 20559  002F66  6E2A               	movwf	??_printSortTimer& (0+255),c
 20560  002F68  3A2A               	swapf	??_printSortTimer,f,c
 20561  002F6A  0E0F               	movlw	15
 20562  002F6C  162A               	andwf	??_printSortTimer,f,c
 20563  002F6E  0E0F               	movlw	15
 20564  002F70  162A               	andwf	??_printSortTimer,f,c
 20565  002F72  502A               	movf	??_printSortTimer,w,c
 20566  002F74  0D0A               	mullw	10
 20567  002F76  0E24               	movlw	low _time
 20568  002F78  2447               	addwf	printSortTimer@i,w,c
 20569  002F7A  6ED9               	movwf	fsr2l,c
 20570  002F7C  0E01               	movlw	high _time
 20571  002F7E  2048               	addwfc	printSortTimer@i+1,w,c
 20572  002F80  6EDA               	movwf	fsr2h,c
 20573  002F82  50DF               	movf	indf2,w,c
 20574  002F84  0B0F               	andlw	15
 20575  002F86  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 20576  002F88  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 20577  002F8A  50F3               	movf	prodl,w,c
 20578  002F8C  262B               	addwf	??_printSortTimer+1,f,c
 20579  002F8E  50F4               	movf	prodh,w,c
 20580  002F90  222C               	addwfc	??_printSortTimer+2,f,c
 20581  002F92  90D8               	bcf	status,0,c
 20582  002F94  3447               	rlcf	printSortTimer@i,w,c
 20583  002F96  6ED9               	movwf	fsr2l,c
 20584  002F98  3448               	rlcf	printSortTimer@i+1,w,c
 20585  002F9A  6EDA               	movwf	fsr2h,c
 20586  002F9C  0E2D               	movlw	low printSortTimer@curTime
 20587  002F9E  26D9               	addwf	fsr2l,f,c
 20588  002FA0  0E00               	movlw	high printSortTimer@curTime
 20589  002FA2  22DA               	addwfc	fsr2h,f,c
 20590  002FA4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 20591  002FA8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 20592  002FAC  4A47               	infsnz	printSortTimer@i,f,c
 20593  002FAE  2A48               	incf	printSortTimer@i+1,f,c
 20594  002FB0  D7CB               	goto	i2l8717
 20595  002FB2                     i2l8727:
 20596                           
 20597                           ;sort.c: 390: }
 20598                           ;sort.c: 391: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 20599  002FB2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 20600  002FB6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 20601  002FBA  0E00               	movlw	0
 20602  002FBC  6E04               	movwf	i2___wmul@multiplicand+1,c
 20603  002FBE  0E3C               	movlw	60
 20604  002FC0  6E03               	movwf	i2___wmul@multiplicand,c
 20605  002FC2  ECE2  F026         	call	i2___wmul	;wreg free
 20606  002FC6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20607  002FCA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20608  002FCE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 20609  002FD2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 20610  002FD6  0E0E               	movlw	14
 20611  002FD8  6E04               	movwf	i2___wmul@multiplicand+1,c
 20612  002FDA  0E10               	movlw	16
 20613  002FDC  6E03               	movwf	i2___wmul@multiplicand,c
 20614  002FDE  ECE2  F026         	call	i2___wmul	;wreg free
 20615  002FE2  5001               	movf	?i2___wmul,w,c
 20616  002FE4  262A               	addwf	??_printSortTimer,f,c
 20617  002FE6  5002               	movf	?i2___wmul+1,w,c
 20618  002FE8  222B               	addwfc	??_printSortTimer+1,f,c
 20619  002FEA  0101               	movlb	1	; () banked
 20620  002FEC  510E               	movf	_startTime& (0+255),w,b
 20621  002FEE  242A               	addwf	??_printSortTimer,w,c
 20622  002FF0  6E3B               	movwf	printSortTimer@start_sec,c
 20623  002FF2  0101               	movlb	1	; () banked
 20624  002FF4  510F               	movf	(_startTime+1)& (0+255),w,b
 20625  002FF6  202B               	addwfc	??_printSortTimer+1,w,c
 20626  002FF8  6E3C               	movwf	printSortTimer@start_sec+1,c
 20627                           
 20628                           ;sort.c: 392: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 20629  002FFA  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 20630  002FFE  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 20631  003002  0E00               	movlw	0
 20632  003004  6E04               	movwf	i2___wmul@multiplicand+1,c
 20633  003006  0E3C               	movlw	60
 20634  003008  6E03               	movwf	i2___wmul@multiplicand,c
 20635  00300A  ECE2  F026         	call	i2___wmul	;wreg free
 20636  00300E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 20637  003012  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 20638  003016  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 20639  00301A  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 20640  00301E  0E0E               	movlw	14
 20641  003020  6E04               	movwf	i2___wmul@multiplicand+1,c
 20642  003022  0E10               	movlw	16
 20643  003024  6E03               	movwf	i2___wmul@multiplicand,c
 20644  003026  ECE2  F026         	call	i2___wmul	;wreg free
 20645  00302A  5001               	movf	?i2___wmul,w,c
 20646  00302C  262A               	addwf	??_printSortTimer,f,c
 20647  00302E  5002               	movf	?i2___wmul+1,w,c
 20648  003030  222B               	addwfc	??_printSortTimer+1,f,c
 20649  003032  502D               	movf	printSortTimer@curTime,w,c
 20650  003034  242A               	addwf	??_printSortTimer,w,c
 20651  003036  6E3D               	movwf	printSortTimer@cur_sec,c
 20652  003038  502E               	movf	printSortTimer@curTime+1,w,c
 20653  00303A  202B               	addwfc	??_printSortTimer+1,w,c
 20654  00303C  6E3E               	movwf	printSortTimer@cur_sec+1,c
 20655                           
 20656                           ;sort.c: 393: unsigned int timeDiff = cur_sec - start_sec;
 20657  00303E  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 20658  003042  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 20659  003046  1E2A               	comf	??_printSortTimer,f,c
 20660  003048  1E2B               	comf	??_printSortTimer+1,f,c
 20661  00304A  4A2A               	infsnz	??_printSortTimer,f,c
 20662  00304C  2A2B               	incf	??_printSortTimer+1,f,c
 20663  00304E  503D               	movf	printSortTimer@cur_sec,w,c
 20664  003050  242A               	addwf	??_printSortTimer,w,c
 20665  003052  6E45               	movwf	printSortTimer@timeDiff,c
 20666  003054  503E               	movf	printSortTimer@cur_sec+1,w,c
 20667  003056  202B               	addwfc	??_printSortTimer+1,w,c
 20668  003058  6E46               	movwf	printSortTimer@timeDiff+1,c
 20669                           
 20670                           ;sort.c: 395: total_time = timeDiff;
 20671  00305A  C045  F0F8         	movff	printSortTimer@timeDiff,_total_time
 20672  00305E  C046  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 20673                           
 20674                           ;sort.c: 397: if(f_most_recent_sort_time){
 20675  003062  506B               	movf	_f_most_recent_sort_time,w,c
 20676  003064  106C               	iorwf	_f_most_recent_sort_time+1,w,c
 20677  003066  B4D8               	btfsc	status,2,c
 20678  003068  D008               	goto	i2l8739
 20679                           
 20680                           ;sort.c: 398: most_recent_sort_time = total_time;
 20681  00306A  C0F8  F133         	movff	_total_time,_most_recent_sort_time
 20682  00306E  C0F9  F134         	movff	_total_time+1,_most_recent_sort_time+1
 20683                           
 20684                           ;sort.c: 399: f_most_recent_sort_time = 0;
 20685  003072  0E00               	movlw	0
 20686  003074  6E6C               	movwf	_f_most_recent_sort_time+1,c
 20687  003076  0E00               	movlw	0
 20688  003078  6E6B               	movwf	_f_most_recent_sort_time,c
 20689  00307A                     i2l8739:
 20690                           
 20691                           ;sort.c: 400: }
 20692                           ;sort.c: 403: if((total_time - most_recent_sort_time == 179) | (total_time == 179)){
 20693  00307A  C133  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 20694  00307E  C134  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 20695  003082  1E2A               	comf	??_printSortTimer,f,c
 20696  003084  1E2B               	comf	??_printSortTimer+1,f,c
 20697  003086  4A2A               	infsnz	??_printSortTimer,f,c
 20698  003088  2A2B               	incf	??_printSortTimer+1,f,c
 20699  00308A  0100               	movlb	0	; () banked
 20700  00308C  51F8               	movf	_total_time& (0+255),w,b
 20701  00308E  262A               	addwf	??_printSortTimer,f,c
 20702  003090  0100               	movlb	0	; () banked
 20703  003092  51F9               	movf	(_total_time+1)& (0+255),w,b
 20704  003094  222B               	addwfc	??_printSortTimer+1,f,c
 20705  003096  0EB3               	movlw	179
 20706  003098  182A               	xorwf	??_printSortTimer,w,c
 20707  00309A  102B               	iorwf	??_printSortTimer+1,w,c
 20708  00309C  B4D8               	btfsc	status,2,c
 20709  00309E  D007               	goto	i2l8743
 20710                           
 20711                           ; BSR set to: 0
 20712  0030A0  0EB3               	movlw	179
 20713  0030A2  0100               	movlb	0	; () banked
 20714  0030A4  19F8               	xorwf	_total_time& (0+255),w,b
 20715  0030A6  0100               	movlb	0	; () banked
 20716  0030A8  11F9               	iorwf	(_total_time+1)& (0+255),w,b
 20717  0030AA  A4D8               	btfss	status,2,c
 20718  0030AC  D003               	goto	i2l8745
 20719  0030AE                     i2l8743:
 20720                           
 20721                           ; BSR set to: 0
 20722                           ;sort.c: 404: machine_state = DoneSorting_state;
 20723  0030AE  0E02               	movlw	2
 20724  0030B0  0100               	movlb	0	; () banked
 20725  0030B2  6FFC               	movwf	_machine_state& (0+255),b
 20726  0030B4                     i2l8745:
 20727                           
 20728                           ; BSR set to: 0
 20729                           ;sort.c: 406: }
 20730                           ;sort.c: 408: int min = (timeDiff % 3600) / 60;
 20731  0030B4  0E0E               	movlw	14
 20732  0030B6  6E04               	movwf	i2___lwmod@divisor+1,c
 20733  0030B8  0E10               	movlw	16
 20734  0030BA  6E03               	movwf	i2___lwmod@divisor,c
 20735  0030BC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20736  0030C0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20737  0030C4  EC9B  F024         	call	i2___lwmod	;wreg free
 20738  0030C8  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20739  0030CC  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20740  0030D0  0E00               	movlw	0
 20741  0030D2  6E09               	movwf	i2___lwdiv@divisor+1,c
 20742  0030D4  0E3C               	movlw	60
 20743  0030D6  6E08               	movwf	i2___lwdiv@divisor,c
 20744  0030D8  ECDC  F023         	call	i2___lwdiv	;wreg free
 20745  0030DC  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 20746  0030E0  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20747                           
 20748                           ;sort.c: 409: int sec = (timeDiff % 3600) % 60;
 20749  0030E4  0E0E               	movlw	14
 20750  0030E6  6E04               	movwf	i2___lwmod@divisor+1,c
 20751  0030E8  0E10               	movlw	16
 20752  0030EA  6E03               	movwf	i2___lwmod@divisor,c
 20753  0030EC  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20754  0030F0  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20755  0030F4  EC9B  F024         	call	i2___lwmod	;wreg free
 20756  0030F8  C001  F043         	movff	?i2___lwmod,_printSortTimer$2452
 20757  0030FC  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2452+1
 20758                           
 20759                           ;sort.c: 409: int sec = (timeDiff % 3600) % 60;
 20760  003100  C043  F001         	movff	_printSortTimer$2452,i2___lwmod@dividend
 20761  003104  C044  F002         	movff	_printSortTimer$2452+1,i2___lwmod@dividend+1
 20762  003108  0E00               	movlw	0
 20763  00310A  6E04               	movwf	i2___lwmod@divisor+1,c
 20764  00310C  0E3C               	movlw	60
 20765  00310E  6E03               	movwf	i2___lwmod@divisor,c
 20766  003110  EC9B  F024         	call	i2___lwmod	;wreg free
 20767  003114  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 20768  003118  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 20769                           
 20770                           ;sort.c: 411: lcdInst(0b10000000);;
 20771  00311C  0E80               	movlw	128
 20772  00311E  EC98  F027         	call	i2_lcdInst
 20773                           
 20774                           ;sort.c: 412: printf("SORTING...");
 20775  003122  0E7C               	movlw	low STR_64
 20776  003124  6E0D               	movwf	i2printf@f,c
 20777  003126  0EFF               	movlw	high STR_64
 20778  003128  6E0E               	movwf	i2printf@f+1,c
 20779  00312A  EC58  F00E         	call	i2_printf	;wreg free
 20780                           
 20781                           ;sort.c: 413: lcdInst(0b11000000);;
 20782  00312E  0EC0               	movlw	192
 20783  003130  EC98  F027         	call	i2_lcdInst
 20784                           
 20785                           ;sort.c: 414: printf("TIME %d:%02d", min, sec);
 20786  003134  0E42               	movlw	low STR_65
 20787  003136  6E0D               	movwf	i2printf@f,c
 20788  003138  0EFF               	movlw	high STR_65
 20789  00313A  6E0E               	movwf	i2printf@f+1,c
 20790  00313C  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 20791  003140  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 20792  003144  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 20793  003148  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 20794  00314C  EC58  F00E         	call	i2_printf	;wreg free
 20795  003150  0012               	return		;funcret
 20796  003152                     __end_of_printSortTimer:
 20797                           	opt stack 0
 20798                           pclatu	equ	0xFFB
 20799                           pclath	equ	0xFFA
 20800                           tblptru	equ	0xFF8
 20801                           tblptrh	equ	0xFF7
 20802                           tblptrl	equ	0xFF6
 20803                           tablat	equ	0xFF5
 20804                           prodh	equ	0xFF4
 20805                           prodl	equ	0xFF3
 20806                           intcon	equ	0xFF2
 20807                           intcon2	equ	0xFF1
 20808                           intcon3	equ	0xFF0
 20809                           indf0	equ	0xFEF
 20810                           postinc0	equ	0xFEE
 20811                           fsr0h	equ	0xFEA
 20812                           fsr0l	equ	0xFE9
 20813                           wreg	equ	0xFE8
 20814                           postdec1	equ	0xFE5
 20815                           fsr1h	equ	0xFE2
 20816                           fsr1l	equ	0xFE1
 20817                           indf2	equ	0xFDF
 20818                           postinc2	equ	0xFDE
 20819                           postdec2	equ	0xFDD
 20820                           fsr2h	equ	0xFDA
 20821                           fsr2l	equ	0xFD9
 20822                           status	equ	0xFD8
 20823                           
 20824 ;; *************** function i2_printf *****************
 20825 ;; Defined at:
 20826 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 20827 ;; Parameters:    Size  Location     Type
 20828 ;;  f               2   12[COMRAM] PTR const unsigned char 
 20829 ;;		 -> STR_125(18), STR_124(18), STR_123(18), STR_122(18), 
 20830 ;;		 -> STR_121(18), STR_120(18), STR_119(17), STR_118(17), 
 20831 ;;		 -> STR_117(3), STR_116(15), STR_115(3), STR_114(15), 
 20832 ;;		 -> STR_113(11), STR_112(18), STR_111(18), STR_110(17), 
 20833 ;;		 -> STR_109(15), STR_108(15), STR_107(15), STR_106(17), 
 20834 ;;		 -> STR_105(17), STR_104(17), STR_103(16), STR_102(17), 
 20835 ;;		 -> STR_101(17), STR_100(17), STR_99(17), STR_98(17), 
 20836 ;;		 -> STR_97(17), STR_96(15), STR_95(11), STR_94(17), 
 20837 ;;		 -> STR_93(11), STR_92(17), STR_91(14), STR_90(15), 
 20838 ;;		 -> STR_89(14), STR_88(10), STR_87(9), STR_86(9), 
 20839 ;;		 -> STR_85(10), STR_84(10), STR_83(16), STR_82(15), 
 20840 ;;		 -> STR_81(3), STR_80(15), STR_79(13), STR_78(14), 
 20841 ;;		 -> STR_77(8), STR_76(14), STR_75(15), STR_74(12), 
 20842 ;;		 -> STR_73(14), STR_72(17), STR_71(14), STR_70(15), 
 20843 ;;		 -> STR_69(17), STR_68(17), STR_67(7), STR_66(21), 
 20844 ;;		 -> STR_65(13), STR_64(11), STR_63(24), STR_50(17), 
 20845 ;;		 -> STR_49(17), STR_48(17), STR_47(17), STR_46(17), 
 20846 ;;		 -> STR_45(17), STR_44(17), STR_43(17), STR_42(17), 
 20847 ;;		 -> STR_41(17), STR_40(17), STR_39(17), STR_38(17), 
 20848 ;;		 -> STR_37(17), STR_36(17), STR_35(17), STR_34(17), 
 20849 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
 20850 ;;		 -> STR_29(3), STR_28(17), STR_27(17), STR_26(17), 
 20851 ;;		 -> STR_25(17), STR_24(17), STR_23(14), STR_22(10), 
 20852 ;;		 -> STR_21(24), STR_7(7), STR_6(17), STR_5(18), 
 20853 ;;		 -> STR_4(16), STR_3(18), STR_2(14), STR_1(18), 
 20854 ;; Auto vars:     Size  Location     Type
 20855 ;;  printf          4    0        struct .
 20856 ;;  printf          2   39[COMRAM] int 
 20857 ;;  printf          2   35[COMRAM] unsigned int 
 20858 ;;  printf          2   33[COMRAM] unsigned int 
 20859 ;;  printf          2   31[COMRAM] PTR void [1]
 20860 ;;		 -> ?i2_printf(2), ?_printf(2), 
 20861 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 20862 ;;		 -> STR_126(7), count_total(2), printRTC@month(4), UI@month(4), 
 20863 ;;  printf          1   38[COMRAM] char 
 20864 ;;  printf          1   37[COMRAM] unsigned char 
 20865 ;;  printf          1   28[COMRAM] char 
 20866 ;; Return value:  Size  Location     Type
 20867 ;;                  2   12[COMRAM] int 
 20868 ;; Registers used:
 20869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20870 ;; Tracked objects:
 20871 ;;		On entry : 0/0
 20872 ;;		On exit  : 0/0
 20873 ;;		Unchanged: 0/0
 20874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20875 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20876 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20877 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20878 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20879 ;;Total ram usage:       29 bytes
 20880 ;; Hardware stack levels used:    1
 20881 ;; Hardware stack levels required when called:    2
 20882 ;; This function calls:
 20883 ;;		i2___lwdiv
 20884 ;;		i2___lwmod
 20885 ;;		i2___wmul
 20886 ;;		i2_isdigit
 20887 ;;		i2_putch
 20888 ;; This function is called by:
 20889 ;;		_change_state_to_menu_11
 20890 ;;		_change_state_to_menu_23
 20891 ;;		_change_state_to_logs_11
 20892 ;;		_change_state_to_logs_12
 20893 ;;		_change_state_to_logs_22
 20894 ;;		_change_state_to_logs_23
 20895 ;;		_change_state_to_logs_33
 20896 ;;		_change_state_to_logs_34
 20897 ;;		_printSortTimer
 20898 ;;		i2_change_state_to_menu_start
 20899 ;;		i2_change_state_to_menu_12
 20900 ;;		i2_change_state_to_menu_22
 20901 ;;		i2_printRTC
 20902 ;; This function uses a non-reentrant model
 20903 ;;
 20904                           
 20905                           	psect	text79
 20906  001CB0                     __ptext79:
 20907                           	opt stack 0
 20908  001CB0                     i2_printf:
 20909                           	opt stack 19
 20910                           
 20911                           ;doprnt.c: 466: va_list ap;
 20912                           ;doprnt.c: 499: signed char c;
 20913                           ;doprnt.c: 501: int width;
 20914                           ;doprnt.c: 506: signed char prec;
 20915                           ;doprnt.c: 508: unsigned char flag;
 20916                           ;doprnt.c: 523: union {
 20917                           ;doprnt.c: 524: unsigned long vd;
 20918                           ;doprnt.c: 525: double integ;
 20919                           ;doprnt.c: 526: } tmpval;
 20920                           ;doprnt.c: 528: unsigned int val;
 20921                           ;doprnt.c: 529: unsigned len;
 20922                           ;doprnt.c: 530: const char * cp;
 20923                           ;doprnt.c: 533: *ap = __va_start();
 20924                           
 20925                           ;incstack = 0
 20926  001CB0  0E0F               	movlw	low (?i2_printf+2)
 20927  001CB2  6E20               	movwf	i2printf@ap,c
 20928  001CB4  0E00               	movlw	high (?i2_printf+2)
 20929  001CB6  6E21               	movwf	i2printf@ap+1,c
 20930                           
 20931                           ;doprnt.c: 536: while(c = *f++) {
 20932  001CB8  D1A4               	goto	i2l6205
 20933  001CBA                     i2l6075:
 20934                           
 20935                           ;doprnt.c: 538: if(c != '%')
 20936  001CBA  0E25               	movlw	37
 20937  001CBC  1827               	xorwf	i2printf@c,w,c
 20938  001CBE  B4D8               	btfsc	status,2,c
 20939  001CC0  D004               	goto	i2l6079
 20940                           
 20941                           ;doprnt.c: 540: {
 20942                           ;doprnt.c: 541: (putch(c) );
 20943  001CC2  5027               	movf	i2printf@c,w,c
 20944  001CC4  EC92  F027         	call	i2_putch
 20945                           
 20946                           ;doprnt.c: 542: continue;
 20947  001CC8  D19C               	goto	i2l6205
 20948  001CCA                     i2l6079:
 20949                           
 20950                           ;doprnt.c: 543: }
 20951                           ;doprnt.c: 546: width = 0;
 20952  001CCA  0E00               	movlw	0
 20953  001CCC  6E29               	movwf	i2printf@width+1,c
 20954  001CCE  0E00               	movlw	0
 20955  001CD0  6E28               	movwf	i2printf@width,c
 20956                           
 20957                           ;doprnt.c: 548: flag = 0;
 20958  001CD2  0E00               	movlw	0
 20959  001CD4  6E26               	movwf	i2printf@flag,c
 20960                           
 20961                           ;doprnt.c: 551: switch(*f) {
 20962                           
 20963                           ;doprnt.c: 550: for(;;) {
 20964  001CD6  D003               	goto	i2l6085
 20965  001CD8                     i2l6081:
 20966                           
 20967                           ;doprnt.c: 580: flag |= 0x04;
 20968  001CD8  8426               	bsf	i2printf@flag,2,c
 20969                           
 20970                           ;doprnt.c: 581: f++;
 20971  001CDA  4A0D               	infsnz	i2printf@f,f,c
 20972  001CDC  2A0E               	incf	i2printf@f+1,f,c
 20973  001CDE                     i2l6085:
 20974  001CDE  C00D  FFF6         	movff	i2printf@f,tblptrl
 20975  001CE2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20976  001CE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20977  001CE6  6AF8               	clrf	tblptru,c
 20978  001CE8                     	endif
 20979  001CE8                     	if	0	;tblptru may be non-zero
 20980  001CE8                     	endif
 20981  001CE8  0008               	tblrd		*
 20982  001CEA  50F5               	movf	tablat,w,c
 20983                           
 20984                           ; Switch size 1, requested type "space"
 20985                           ; Number of cases is 1, Range of values is 48 to 48
 20986                           ; switch strategies available:
 20987                           ; Name         Instructions Cycles
 20988                           ; simple_byte            4     3 (average)
 20989                           ;	Chosen strategy is simple_byte
 20990  001CEC  0A30               	xorlw	48	; case 48
 20991  001CEE  B4D8               	btfsc	status,2,c
 20992  001CF0  D7F3               	goto	i2l6081
 20993                           
 20994                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20995                           
 20996                           ;doprnt.c: 586: }
 20997                           
 20998                           ;doprnt.c: 585: break;
 20999  001CF2  C00D  FFF6         	movff	i2printf@f,tblptrl
 21000  001CF6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21001  001CFA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21002  001CFA  6AF8               	clrf	tblptru,c
 21003  001CFC                     	endif
 21004  001CFC                     	if	0	;tblptru may be non-zero
 21005  001CFC                     	endif
 21006  001CFC  0008               	tblrd		*
 21007  001CFE  50F5               	movf	tablat,w,c
 21008  001D00  EC3C  F027         	call	i2_isdigit
 21009  001D04  A0D8               	btfss	status,0,c
 21010  001D06  D0A6               	goto	i2l6133
 21011                           
 21012                           ;doprnt.c: 598: width = 0;
 21013  001D08  0E00               	movlw	0
 21014  001D0A  6E29               	movwf	i2printf@width+1,c
 21015  001D0C  0E00               	movlw	0
 21016  001D0E  6E28               	movwf	i2printf@width,c
 21017  001D10                     i2l6091:
 21018                           
 21019                           ;doprnt.c: 600: width *= 10;
 21020  001D10  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 21021  001D14  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21022  001D18  0E00               	movlw	0
 21023  001D1A  6E04               	movwf	i2___wmul@multiplicand+1,c
 21024  001D1C  0E0A               	movlw	10
 21025  001D1E  6E03               	movwf	i2___wmul@multiplicand,c
 21026  001D20  ECE2  F026         	call	i2___wmul	;wreg free
 21027  001D24  C001  F028         	movff	?i2___wmul,i2printf@width
 21028  001D28  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 21029                           
 21030                           ;doprnt.c: 601: width += *f++ - '0';
 21031  001D2C  0ED0               	movlw	208
 21032  001D2E  6E19               	movwf	??i2_printf& (0+255),c
 21033  001D30  0EFF               	movlw	255
 21034  001D32  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21035  001D34  C00D  FFF6         	movff	i2printf@f,tblptrl
 21036  001D38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21037  001D3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21038  001D3C  6AF8               	clrf	tblptru,c
 21039  001D3E                     	endif
 21040  001D3E                     	if	0	;tblptru may be non-zero
 21041  001D3E                     	endif
 21042  001D3E  0008               	tblrd		*
 21043  001D40  50F5               	movf	tablat,w,c
 21044  001D42  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 21045  001D44  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 21046  001D46  5019               	movf	??i2_printf,w,c
 21047  001D48  261B               	addwf	??i2_printf+2,f,c
 21048  001D4A  501A               	movf	??i2_printf+1,w,c
 21049  001D4C  221C               	addwfc	??i2_printf+3,f,c
 21050  001D4E  501B               	movf	??i2_printf+2,w,c
 21051  001D50  2628               	addwf	i2printf@width,f,c
 21052  001D52  501C               	movf	??i2_printf+3,w,c
 21053  001D54  2229               	addwfc	i2printf@width+1,f,c
 21054  001D56  4A0D               	infsnz	i2printf@f,f,c
 21055  001D58  2A0E               	incf	i2printf@f+1,f,c
 21056                           
 21057                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21058  001D5A  C00D  FFF6         	movff	i2printf@f,tblptrl
 21059  001D5E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21060  001D62                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21061  001D62  6AF8               	clrf	tblptru,c
 21062  001D64                     	endif
 21063  001D64                     	if	0	;tblptru may be non-zero
 21064  001D64                     	endif
 21065  001D64  0008               	tblrd		*
 21066  001D66  50F5               	movf	tablat,w,c
 21067  001D68  EC3C  F027         	call	i2_isdigit
 21068  001D6C  A0D8               	btfss	status,0,c
 21069  001D6E  D072               	goto	i2l6133
 21070  001D70  D7CF               	goto	i2l6091
 21071  001D72                     i2l6099:
 21072                           
 21073                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 21074  001D72  C020  FFD9         	movff	i2printf@ap,fsr2l
 21075  001D76  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21076  001D7A  CFDE F01E          	movff	postinc2,i2printf@cp
 21077  001D7E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 21078  001D82  0E02               	movlw	2
 21079  001D84  2620               	addwf	i2printf@ap,f,c
 21080  001D86  0E00               	movlw	0
 21081  001D88  2221               	addwfc	i2printf@ap+1,f,c
 21082                           
 21083                           ;doprnt.c: 740: if(!cp)
 21084  001D8A  501E               	movf	i2printf@cp,w,c
 21085  001D8C  101F               	iorwf	i2printf@cp+1,w,c
 21086  001D8E  A4D8               	btfss	status,2,c
 21087  001D90  D004               	goto	i2l6107
 21088                           
 21089                           ;doprnt.c: 741: cp = "(null)";
 21090  001D92  0EB6               	movlw	low STR_126
 21091  001D94  6E1E               	movwf	i2printf@cp,c
 21092  001D96  0EFF               	movlw	high STR_126
 21093  001D98  6E1F               	movwf	i2printf@cp+1,c
 21094  001D9A                     i2l6107:
 21095                           
 21096                           ;doprnt.c: 745: len = 0;
 21097  001D9A  0E00               	movlw	0
 21098  001D9C  6E23               	movwf	i2printf@len+1,c
 21099  001D9E  0E00               	movlw	0
 21100  001DA0  6E22               	movwf	i2printf@len,c
 21101                           
 21102                           ;doprnt.c: 746: while(cp[len])
 21103  001DA2  D002               	goto	i2l6111
 21104  001DA4                     i2l6109:
 21105                           
 21106                           ;doprnt.c: 747: len++;
 21107  001DA4  4A22               	infsnz	i2printf@len,f,c
 21108  001DA6  2A23               	incf	i2printf@len+1,f,c
 21109  001DA8                     i2l6111:
 21110  001DA8  5022               	movf	i2printf@len,w,c
 21111  001DAA  241E               	addwf	i2printf@cp,w,c
 21112  001DAC  6E19               	movwf	??i2_printf& (0+255),c
 21113  001DAE  5023               	movf	i2printf@len+1,w,c
 21114  001DB0  201F               	addwfc	i2printf@cp+1,w,c
 21115  001DB2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 21116  001DB4  C019  FFF6         	movff	??i2_printf,tblptrl
 21117  001DB8  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 21118  001DBC  0E00               	movlw	low (__mediumconst shr (0+16))
 21119  001DBE  6EF8               	movwf	tblptru,c
 21120  001DC0  0E0F               	movlw	(high __ramtop+-1)
 21121  001DC2  64F7               	cpfsgt	tblptrh,c
 21122  001DC4  D003               	bra	i2u477_47
 21123  001DC6  0008               	tblrd		*
 21124  001DC8  50F5               	movf	tablat,w,c
 21125  001DCA  D005               	bra	i2u477_40
 21126  001DCC                     i2u477_47:
 21127  001DCC  CFF6 FFE9          	movff	tblptrl,fsr0l
 21128  001DD0  CFF7 FFEA          	movff	tblptrh,fsr0h
 21129  001DD4  50EF               	movf	indf0,w,c
 21130  001DD6                     i2u477_40:
 21131  001DD6  0900               	iorlw	0
 21132  001DD8  A4D8               	btfss	status,2,c
 21133  001DDA  D7E4               	goto	i2l6109
 21134                           
 21135                           ;doprnt.c: 757: if(width > len)
 21136  001DDC  5028               	movf	i2printf@width,w,c
 21137  001DDE  5C22               	subwf	i2printf@len,w,c
 21138  001DE0  5029               	movf	i2printf@width+1,w,c
 21139  001DE2  5823               	subwfb	i2printf@len+1,w,c
 21140  001DE4  B0D8               	btfsc	status,0,c
 21141  001DE6  D005               	goto	i2l6117
 21142                           
 21143                           ;doprnt.c: 758: width -= len;
 21144  001DE8  5022               	movf	i2printf@len,w,c
 21145  001DEA  5E28               	subwf	i2printf@width,f,c
 21146  001DEC  5023               	movf	i2printf@len+1,w,c
 21147  001DEE  5A29               	subwfb	i2printf@width+1,f,c
 21148  001DF0  D008               	goto	i2l6121
 21149  001DF2                     i2l6117:
 21150                           
 21151                           ;doprnt.c: 759: else
 21152                           ;doprnt.c: 760: width = 0;
 21153  001DF2  0E00               	movlw	0
 21154  001DF4  6E29               	movwf	i2printf@width+1,c
 21155  001DF6  0E00               	movlw	0
 21156  001DF8  6E28               	movwf	i2printf@width,c
 21157                           
 21158                           ;doprnt.c: 764: while(width--)
 21159  001DFA  D003               	goto	i2l6121
 21160  001DFC                     i2l6119:
 21161                           
 21162                           ;doprnt.c: 765: (putch(' ') );
 21163  001DFC  0E20               	movlw	32
 21164  001DFE  EC92  F027         	call	i2_putch
 21165  001E02                     i2l6121:
 21166  001E02  0628               	decf	i2printf@width,f,c
 21167  001E04  A0D8               	btfss	status,0,c
 21168  001E06  0629               	decf	i2printf@width+1,f,c
 21169  001E08  2828               	incf	i2printf@width,w,c
 21170  001E0A  E1F8               	bnz	i2l6119
 21171  001E0C  2829               	incf	i2printf@width+1,w,c
 21172  001E0E  B4D8               	btfsc	status,2,c
 21173  001E10  D016               	goto	i2l6127
 21174  001E12  D7F4               	goto	i2l6119
 21175  001E14                     i2l6123:
 21176                           
 21177                           ;doprnt.c: 768: (putch(*cp++) );
 21178  001E14  C01E  FFF6         	movff	i2printf@cp,tblptrl
 21179  001E18  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 21180  001E1C  0E00               	movlw	low (__mediumconst shr (0+16))
 21181  001E1E  6EF8               	movwf	tblptru,c
 21182  001E20  0E0F               	movlw	(high __ramtop+-1)
 21183  001E22  64F7               	cpfsgt	tblptrh,c
 21184  001E24  D003               	bra	i2u481_47
 21185  001E26  0008               	tblrd		*
 21186  001E28  50F5               	movf	tablat,w,c
 21187  001E2A  D005               	bra	i2u481_40
 21188  001E2C                     i2u481_47:
 21189  001E2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 21190  001E30  CFF7 FFEA          	movff	tblptrh,fsr0h
 21191  001E34  50EF               	movf	indf0,w,c
 21192  001E36                     i2u481_40:
 21193  001E36  EC92  F027         	call	i2_putch
 21194  001E3A  4A1E               	infsnz	i2printf@cp,f,c
 21195  001E3C  2A1F               	incf	i2printf@cp+1,f,c
 21196  001E3E                     i2l6127:
 21197  001E3E  0622               	decf	i2printf@len,f,c
 21198  001E40  A0D8               	btfss	status,0,c
 21199  001E42  0623               	decf	i2printf@len+1,f,c
 21200  001E44  2822               	incf	i2printf@len,w,c
 21201  001E46  E1E6               	bnz	i2l6123
 21202  001E48  2823               	incf	i2printf@len+1,w,c
 21203  001E4A  B4D8               	btfsc	status,2,c
 21204  001E4C  D0DA               	goto	i2l6205
 21205  001E4E  D7E2               	goto	i2l6123
 21206  001E50                     i2l6129:
 21207                           
 21208                           ;doprnt.c: 818: flag |= 0x40;
 21209  001E50  8C26               	bsf	i2printf@flag,6,c
 21210                           
 21211                           ;doprnt.c: 822: }
 21212                           
 21213                           ;doprnt.c: 819: break;
 21214  001E52  D01B               	goto	i2l1353
 21215  001E54                     i2l6133:
 21216  001E54  C00D  FFF6         	movff	i2printf@f,tblptrl
 21217  001E58  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21218  001E5C  4A0D               	infsnz	i2printf@f,f,c
 21219  001E5E  2A0E               	incf	i2printf@f+1,f,c
 21220  001E60                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21221  001E60  6AF8               	clrf	tblptru,c
 21222  001E62                     	endif
 21223  001E62                     	if	0	;tblptru may be non-zero
 21224  001E62                     	endif
 21225  001E62  0008               	tblrd		*
 21226  001E64  CFF5 F027          	movff	tablat,i2printf@c
 21227  001E68  5027               	movf	i2printf@c,w,c
 21228                           
 21229                           ; Switch size 1, requested type "space"
 21230                           ; Number of cases is 5, Range of values is 0 to 117
 21231                           ; switch strategies available:
 21232                           ; Name         Instructions Cycles
 21233                           ; simple_byte           16     9 (average)
 21234                           ;	Chosen strategy is simple_byte
 21235  001E6A  0A00               	xorlw	0	; case 0
 21236  001E6C  B4D8               	btfsc	status,2,c
 21237  001E6E  0012               	return	
 21238  001E70  0A64               	xorlw	100	; case 100
 21239  001E72  B4D8               	btfsc	status,2,c
 21240  001E74  D00A               	goto	i2l1353
 21241  001E76  0A0D               	xorlw	13	; case 105
 21242  001E78  B4D8               	btfsc	status,2,c
 21243  001E7A  D007               	goto	i2l1353
 21244  001E7C  0A1A               	xorlw	26	; case 115
 21245  001E7E  B4D8               	btfsc	status,2,c
 21246  001E80  D778               	goto	i2l6099
 21247  001E82  0A06               	xorlw	6	; case 117
 21248  001E84  B4D8               	btfsc	status,2,c
 21249  001E86  D7E4               	goto	i2l6129
 21250  001E88  D0BC               	goto	i2l6205
 21251  001E8A                     i2l1353:
 21252                           
 21253                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 21254  001E8A  BC26               	btfsc	i2printf@flag,6,c
 21255  001E8C  D015               	goto	i2l6145
 21256                           
 21257                           ;doprnt.c: 1253: {
 21258                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21259  001E8E  C020  FFD9         	movff	i2printf@ap,fsr2l
 21260  001E92  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21261  001E96  CFDE F024          	movff	postinc2,i2printf@val
 21262  001E9A  CFDD F025          	movff	postdec2,i2printf@val+1
 21263  001E9E  0E02               	movlw	2
 21264  001EA0  2620               	addwf	i2printf@ap,f,c
 21265  001EA2  0E00               	movlw	0
 21266  001EA4  2221               	addwfc	i2printf@ap+1,f,c
 21267                           
 21268                           ;doprnt.c: 1261: if((int)val < 0) {
 21269  001EA6  AE25               	btfss	i2printf@val+1,7,c
 21270  001EA8  D013               	goto	i2l6149
 21271                           
 21272                           ;doprnt.c: 1262: flag |= 0x03;
 21273  001EAA  0E03               	movlw	3
 21274  001EAC  1226               	iorwf	i2printf@flag,f,c
 21275                           
 21276                           ;doprnt.c: 1263: val = -val;
 21277  001EAE  6C24               	negf	i2printf@val,c
 21278  001EB0  1E25               	comf	i2printf@val+1,f,c
 21279  001EB2  B0D8               	btfsc	status,0,c
 21280  001EB4  2A25               	incf	i2printf@val+1,f,c
 21281                           
 21282                           ;doprnt.c: 1264: }
 21283                           ;doprnt.c: 1266: }
 21284  001EB6  D00C               	goto	i2l6149
 21285  001EB8                     i2l6145:
 21286                           
 21287                           ;doprnt.c: 1268: else
 21288                           ;doprnt.c: 1273: {
 21289                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21290  001EB8  C020  FFD9         	movff	i2printf@ap,fsr2l
 21291  001EBC  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 21292  001EC0  CFDE F024          	movff	postinc2,i2printf@val
 21293  001EC4  CFDD F025          	movff	postdec2,i2printf@val+1
 21294  001EC8  0E02               	movlw	2
 21295  001ECA  2620               	addwf	i2printf@ap,f,c
 21296  001ECC  0E00               	movlw	0
 21297  001ECE  2221               	addwfc	i2printf@ap+1,f,c
 21298  001ED0                     i2l6149:
 21299                           
 21300                           ;doprnt.c: 1287: }
 21301                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21302  001ED0  0E01               	movlw	1
 21303  001ED2  6E27               	movwf	i2printf@c,c
 21304  001ED4                     i2l6151:
 21305  001ED4  0E05               	movlw	5
 21306  001ED6  1827               	xorwf	i2printf@c,w,c
 21307  001ED8  B4D8               	btfsc	status,2,c
 21308  001EDA  D015               	goto	i2l6163
 21309                           
 21310                           ;doprnt.c: 1306: if(val < dpowers[c])
 21311  001EDC  5027               	movf	i2printf@c,w,c
 21312  001EDE  0D02               	mullw	2
 21313  001EE0  0E00               	movlw	low _dpowers
 21314  001EE2  24F3               	addwf	prodl,w,c
 21315  001EE4  6EF6               	movwf	tblptrl,c
 21316  001EE6  0EFB               	movlw	high _dpowers
 21317  001EE8  20F4               	addwfc	prodh,w,c
 21318  001EEA  6EF7               	movwf	tblptrh,c
 21319  001EEC                     	if	1	;There are 3 active tblptr bytes
 21320  001EEC  6AF8               	clrf	tblptru,c
 21321  001EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 21322  001EF0  22F8               	addwfc	tblptru,f,c
 21323  001EF2                     	endif
 21324  001EF2  0009               	tblrd		*+
 21325  001EF4  50F5               	movf	tablat,w,c
 21326  001EF6  5C24               	subwf	i2printf@val,w,c
 21327  001EF8  0009               	tblrd		*+
 21328  001EFA  50F5               	movf	tablat,w,c
 21329  001EFC  5825               	subwfb	i2printf@val+1,w,c
 21330  001EFE  A0D8               	btfss	status,0,c
 21331  001F00  D002               	goto	i2l6163
 21332                           
 21333                           ;doprnt.c: 1307: break;
 21334  001F02  2A27               	incf	i2printf@c,f,c
 21335  001F04  D7E7               	goto	i2l6151
 21336  001F06                     i2l6163:
 21337                           
 21338                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21339  001F06  5028               	movf	i2printf@width,w,c
 21340  001F08  1029               	iorwf	i2printf@width+1,w,c
 21341  001F0A  B4D8               	btfsc	status,2,c
 21342  001F0C  D009               	goto	i2l6169
 21343  001F0E  C026  F019         	movff	i2printf@flag,??i2_printf
 21344  001F12  0E03               	movlw	3
 21345  001F14  1619               	andwf	??i2_printf,f,c
 21346  001F16  B4D8               	btfsc	status,2,c
 21347  001F18  D003               	goto	i2l6169
 21348                           
 21349                           ;doprnt.c: 1346: width--;
 21350  001F1A  0628               	decf	i2printf@width,f,c
 21351  001F1C  A0D8               	btfss	status,0,c
 21352  001F1E  0629               	decf	i2printf@width+1,f,c
 21353  001F20                     i2l6169:
 21354                           
 21355                           ;doprnt.c: 1381: if(width > c)
 21356  001F20  0E80               	movlw	128
 21357  001F22  BE27               	btfsc	i2printf@c,7,c
 21358  001F24  0E7F               	movlw	127
 21359  001F26  6E19               	movwf	??i2_printf& (0+255),c
 21360  001F28  5028               	movf	i2printf@width,w,c
 21361  001F2A  5C27               	subwf	i2printf@c,w,c
 21362  001F2C  5029               	movf	i2printf@width+1,w,c
 21363  001F2E  0A80               	xorlw	128
 21364  001F30  5819               	subwfb	??i2_printf& (0+255),w,c
 21365  001F32  B0D8               	btfsc	status,0,c
 21366  001F34  D007               	goto	i2l6173
 21367                           
 21368                           ;doprnt.c: 1382: width -= c;
 21369  001F36  5027               	movf	i2printf@c,w,c
 21370  001F38  5E28               	subwf	i2printf@width,f,c
 21371  001F3A  0E00               	movlw	0
 21372  001F3C  BE27               	btfsc	i2printf@c,7,c
 21373  001F3E  0EFF               	movlw	255
 21374  001F40  5A29               	subwfb	i2printf@width+1,f,c
 21375  001F42  D004               	goto	i2l6175
 21376  001F44                     i2l6173:
 21377                           
 21378                           ;doprnt.c: 1383: else
 21379                           ;doprnt.c: 1384: width = 0;
 21380  001F44  0E00               	movlw	0
 21381  001F46  6E29               	movwf	i2printf@width+1,c
 21382  001F48  0E00               	movlw	0
 21383  001F4A  6E28               	movwf	i2printf@width,c
 21384  001F4C                     i2l6175:
 21385                           
 21386                           ;doprnt.c: 1387: if(flag & 0x04) {
 21387  001F4C  A426               	btfss	i2printf@flag,2,c
 21388  001F4E  D014               	goto	i2l6187
 21389                           
 21390                           ;doprnt.c: 1392: if(flag & 0x03)
 21391  001F50  C026  F019         	movff	i2printf@flag,??i2_printf
 21392  001F54  0E03               	movlw	3
 21393  001F56  1619               	andwf	??i2_printf,f,c
 21394  001F58  B4D8               	btfsc	status,2,c
 21395  001F5A  D003               	goto	i2l6181
 21396                           
 21397                           ;doprnt.c: 1393: (putch('-') );
 21398  001F5C  0E2D               	movlw	45
 21399  001F5E  EC92  F027         	call	i2_putch
 21400  001F62                     i2l6181:
 21401                           
 21402                           ;doprnt.c: 1415: if(width)
 21403  001F62  5028               	movf	i2printf@width,w,c
 21404  001F64  1029               	iorwf	i2printf@width+1,w,c
 21405  001F66  B4D8               	btfsc	status,2,c
 21406  001F68  D01E               	goto	i2l6197
 21407                           
 21408                           ;doprnt.c: 1417: (putch('0') );
 21409                           
 21410                           ;doprnt.c: 1416: do
 21411  001F6A  0E30               	movlw	48
 21412  001F6C  EC92  F027         	call	i2_putch
 21413                           
 21414                           ;doprnt.c: 1418: while(--width);
 21415  001F70  0628               	decf	i2printf@width,f,c
 21416  001F72  A0D8               	btfss	status,0,c
 21417  001F74  0629               	decf	i2printf@width+1,f,c
 21418  001F76  D7F5               	goto	i2l6181
 21419  001F78                     i2l6187:
 21420                           
 21421                           ;doprnt.c: 1422: {
 21422                           ;doprnt.c: 1424: if(width
 21423                           ;doprnt.c: 1428: )
 21424  001F78  5028               	movf	i2printf@width,w,c
 21425  001F7A  1029               	iorwf	i2printf@width+1,w,c
 21426  001F7C  B4D8               	btfsc	status,2,c
 21427  001F7E  D00A               	goto	i2l6193
 21428  001F80                     i2l6189:
 21429                           
 21430                           ;doprnt.c: 1430: (putch(' ') );
 21431  001F80  0E20               	movlw	32
 21432  001F82  EC92  F027         	call	i2_putch
 21433                           
 21434                           ;doprnt.c: 1431: while(--width);
 21435  001F86  0628               	decf	i2printf@width,f,c
 21436  001F88  A0D8               	btfss	status,0,c
 21437  001F8A  0629               	decf	i2printf@width+1,f,c
 21438  001F8C  5028               	movf	i2printf@width,w,c
 21439  001F8E  1029               	iorwf	i2printf@width+1,w,c
 21440  001F90  A4D8               	btfss	status,2,c
 21441  001F92  D7F6               	goto	i2l6189
 21442  001F94                     i2l6193:
 21443                           
 21444                           ;doprnt.c: 1438: if(flag & 0x03)
 21445  001F94  C026  F019         	movff	i2printf@flag,??i2_printf
 21446  001F98  0E03               	movlw	3
 21447  001F9A  1619               	andwf	??i2_printf,f,c
 21448  001F9C  B4D8               	btfsc	status,2,c
 21449  001F9E  D003               	goto	i2l6197
 21450                           
 21451                           ;doprnt.c: 1439: (putch('-') );
 21452  001FA0  0E2D               	movlw	45
 21453  001FA2  EC92  F027         	call	i2_putch
 21454  001FA6                     i2l6197:
 21455                           
 21456                           ;doprnt.c: 1469: }
 21457                           ;doprnt.c: 1472: prec = c;
 21458  001FA6  C027  F01D         	movff	i2printf@c,i2printf@prec
 21459                           
 21460                           ;doprnt.c: 1474: while(prec--) {
 21461  001FAA  D027               	goto	i2l6203
 21462  001FAC                     i2l6199:
 21463                           
 21464                           ;doprnt.c: 1478: {
 21465                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21466  001FAC  501D               	movf	i2printf@prec,w,c
 21467  001FAE  0D02               	mullw	2
 21468  001FB0  0E00               	movlw	low _dpowers
 21469  001FB2  24F3               	addwf	prodl,w,c
 21470  001FB4  6EF6               	movwf	tblptrl,c
 21471  001FB6  0EFB               	movlw	high _dpowers
 21472  001FB8  20F4               	addwfc	prodh,w,c
 21473  001FBA  6EF7               	movwf	tblptrh,c
 21474  001FBC                     	if	1	;There are 3 active tblptr bytes
 21475  001FBC  6AF8               	clrf	tblptru,c
 21476  001FBE  0E00               	movlw	low (__mediumconst shr (0+16))
 21477  001FC0  22F8               	addwfc	tblptru,f,c
 21478  001FC2                     	endif
 21479  001FC2  0009               	tblrd		*+
 21480  001FC4  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 21481  001FC8  000A               	tblrd		*-
 21482  001FCA  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 21483  001FCE  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 21484  001FD2  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 21485  001FD6  ECDC  F023         	call	i2___lwdiv	;wreg free
 21486  001FDA  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 21487  001FDE  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 21488  001FE2  0E00               	movlw	0
 21489  001FE4  6E04               	movwf	i2___lwmod@divisor+1,c
 21490  001FE6  0E0A               	movlw	10
 21491  001FE8  6E03               	movwf	i2___lwmod@divisor,c
 21492  001FEA  EC9B  F024         	call	i2___lwmod	;wreg free
 21493  001FEE  5001               	movf	?i2___lwmod,w,c
 21494  001FF0  0F30               	addlw	48
 21495  001FF2  6E27               	movwf	i2printf@c,c
 21496                           
 21497                           ;doprnt.c: 1523: }
 21498                           ;doprnt.c: 1524: (putch(c) );
 21499  001FF4  5027               	movf	i2printf@c,w,c
 21500  001FF6  EC92  F027         	call	i2_putch
 21501  001FFA                     i2l6203:
 21502  001FFA  061D               	decf	i2printf@prec,f,c
 21503  001FFC  281D               	incf	i2printf@prec,w,c
 21504  001FFE  A4D8               	btfss	status,2,c
 21505  002000  D7D5               	goto	i2l6199
 21506  002002                     i2l6205:
 21507  002002  C00D  FFF6         	movff	i2printf@f,tblptrl
 21508  002006  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21509  00200A  4A0D               	infsnz	i2printf@f,f,c
 21510  00200C  2A0E               	incf	i2printf@f+1,f,c
 21511  00200E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21512  00200E  6AF8               	clrf	tblptru,c
 21513  002010                     	endif
 21514  002010                     	if	0	;tblptru may be non-zero
 21515  002010                     	endif
 21516  002010  0008               	tblrd		*
 21517  002012  CFF5 F027          	movff	tablat,i2printf@c
 21518  002016  5027               	movf	i2printf@c,w,c
 21519  002018  B4D8               	btfsc	status,2,c
 21520  00201A  0012               	return	
 21521  00201C  D64E               	goto	i2l6075
 21522  00201E                     __end_ofi2_printf:
 21523                           	opt stack 0
 21524                           pclatu	equ	0xFFB
 21525                           pclath	equ	0xFFA
 21526                           tblptru	equ	0xFF8
 21527                           tblptrh	equ	0xFF7
 21528                           tblptrl	equ	0xFF6
 21529                           tablat	equ	0xFF5
 21530                           prodh	equ	0xFF4
 21531                           prodl	equ	0xFF3
 21532                           intcon	equ	0xFF2
 21533                           intcon2	equ	0xFF1
 21534                           intcon3	equ	0xFF0
 21535                           indf0	equ	0xFEF
 21536                           postinc0	equ	0xFEE
 21537                           fsr0h	equ	0xFEA
 21538                           fsr0l	equ	0xFE9
 21539                           wreg	equ	0xFE8
 21540                           postdec1	equ	0xFE5
 21541                           fsr1h	equ	0xFE2
 21542                           fsr1l	equ	0xFE1
 21543                           indf2	equ	0xFDF
 21544                           postinc2	equ	0xFDE
 21545                           postdec2	equ	0xFDD
 21546                           fsr2h	equ	0xFDA
 21547                           fsr2l	equ	0xFD9
 21548                           status	equ	0xFD8
 21549                           
 21550 ;; *************** function i2_putch *****************
 21551 ;; Defined at:
 21552 ;;		line 20 in file "lcd.c"
 21553 ;; Parameters:    Size  Location     Type
 21554 ;;  data            1    wreg     unsigned char 
 21555 ;; Auto vars:     Size  Location     Type
 21556 ;;  data            1    2[COMRAM] unsigned char 
 21557 ;; Return value:  Size  Location     Type
 21558 ;;                  1    wreg      void 
 21559 ;; Registers used:
 21560 ;;		wreg, status,2, status,0, cstack
 21561 ;; Tracked objects:
 21562 ;;		On entry : 0/0
 21563 ;;		On exit  : 0/0
 21564 ;;		Unchanged: 0/0
 21565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21570 ;;Total ram usage:        1 bytes
 21571 ;; Hardware stack levels used:    1
 21572 ;; Hardware stack levels required when called:    1
 21573 ;; This function calls:
 21574 ;;		i2_lcdNibble
 21575 ;; This function is called by:
 21576 ;;		i2_printf
 21577 ;; This function uses a non-reentrant model
 21578 ;;
 21579                           
 21580                           	psect	text80
 21581  004F24                     __ptext80:
 21582                           	opt stack 0
 21583  004F24                     i2_putch:
 21584                           	opt stack 19
 21585                           
 21586                           ;incstack = 0
 21587                           ;i2putch@data stored from wreg
 21588  004F24  6E03               	movwf	i2putch@data,c
 21589                           
 21590                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 21591  004F26  848C               	bsf	3980,2,c	;volatile
 21592                           
 21593                           ;lcd.c: 22: lcdNibble(data);
 21594  004F28  5003               	movf	i2putch@data,w,c
 21595  004F2A  ECB1  F023         	call	i2_lcdNibble
 21596  004F2E  0012               	return		;funcret
 21597  004F30                     __end_ofi2_putch:
 21598                           	opt stack 0
 21599                           pclatu	equ	0xFFB
 21600                           pclath	equ	0xFFA
 21601                           tblptru	equ	0xFF8
 21602                           tblptrh	equ	0xFF7
 21603                           tblptrl	equ	0xFF6
 21604                           tablat	equ	0xFF5
 21605                           prodh	equ	0xFF4
 21606                           prodl	equ	0xFF3
 21607                           intcon	equ	0xFF2
 21608                           intcon2	equ	0xFF1
 21609                           intcon3	equ	0xFF0
 21610                           indf0	equ	0xFEF
 21611                           postinc0	equ	0xFEE
 21612                           fsr0h	equ	0xFEA
 21613                           fsr0l	equ	0xFE9
 21614                           wreg	equ	0xFE8
 21615                           postdec1	equ	0xFE5
 21616                           fsr1h	equ	0xFE2
 21617                           fsr1l	equ	0xFE1
 21618                           indf2	equ	0xFDF
 21619                           postinc2	equ	0xFDE
 21620                           postdec2	equ	0xFDD
 21621                           fsr2h	equ	0xFDA
 21622                           fsr2l	equ	0xFD9
 21623                           status	equ	0xFD8
 21624                           
 21625 ;; *************** function i2_isdigit *****************
 21626 ;; Defined at:
 21627 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 21628 ;; Parameters:    Size  Location     Type
 21629 ;;  c               1    wreg     unsigned char 
 21630 ;; Auto vars:     Size  Location     Type
 21631 ;;  c               1    2[COMRAM] unsigned char 
 21632 ;; Return value:  Size  Location     Type
 21633 ;;		None               void
 21634 ;; Registers used:
 21635 ;;		wreg, status,2, status,0
 21636 ;; Tracked objects:
 21637 ;;		On entry : 0/0
 21638 ;;		On exit  : 0/0
 21639 ;;		Unchanged: 0/0
 21640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21644 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21645 ;;Total ram usage:        3 bytes
 21646 ;; Hardware stack levels used:    1
 21647 ;; This function calls:
 21648 ;;		Nothing
 21649 ;; This function is called by:
 21650 ;;		i2_printf
 21651 ;; This function uses a non-reentrant model
 21652 ;;
 21653                           
 21654                           	psect	text81
 21655  004E78                     __ptext81:
 21656                           	opt stack 0
 21657  004E78                     i2_isdigit:
 21658                           	opt stack 20
 21659                           
 21660                           ;incstack = 0
 21661                           ;i2isdigit@c stored from wreg
 21662  004E78  6E03               	movwf	i2isdigit@c,c
 21663  004E7A  0E00               	movlw	0
 21664  004E7C  6E02               	movwf	i2_isdigit$1976,c
 21665  004E7E  0E3A               	movlw	58
 21666  004E80  6003               	cpfslt	i2isdigit@c,c
 21667  004E82  D005               	goto	i2l5779
 21668  004E84  0E2F               	movlw	47
 21669  004E86  6403               	cpfsgt	i2isdigit@c,c
 21670  004E88  D002               	goto	i2l5779
 21671  004E8A  0E01               	movlw	1
 21672  004E8C  6E02               	movwf	i2_isdigit$1976,c
 21673  004E8E                     i2l5779:
 21674  004E8E  C002  F001         	movff	i2_isdigit$1976,??i2_isdigit
 21675  004E92  3001               	rrcf	??i2_isdigit,w,c
 21676  004E94  0012               	return	
 21677  004E96                     __end_ofi2_isdigit:
 21678                           	opt stack 0
 21679                           pclatu	equ	0xFFB
 21680                           pclath	equ	0xFFA
 21681                           tblptru	equ	0xFF8
 21682                           tblptrh	equ	0xFF7
 21683                           tblptrl	equ	0xFF6
 21684                           tablat	equ	0xFF5
 21685                           prodh	equ	0xFF4
 21686                           prodl	equ	0xFF3
 21687                           intcon	equ	0xFF2
 21688                           intcon2	equ	0xFF1
 21689                           intcon3	equ	0xFF0
 21690                           indf0	equ	0xFEF
 21691                           postinc0	equ	0xFEE
 21692                           fsr0h	equ	0xFEA
 21693                           fsr0l	equ	0xFE9
 21694                           wreg	equ	0xFE8
 21695                           postdec1	equ	0xFE5
 21696                           fsr1h	equ	0xFE2
 21697                           fsr1l	equ	0xFE1
 21698                           indf2	equ	0xFDF
 21699                           postinc2	equ	0xFDE
 21700                           postdec2	equ	0xFDD
 21701                           fsr2h	equ	0xFDA
 21702                           fsr2l	equ	0xFD9
 21703                           status	equ	0xFD8
 21704                           
 21705 ;; *************** function i2___wmul *****************
 21706 ;; Defined at:
 21707 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 21708 ;; Parameters:    Size  Location     Type
 21709 ;;  multiplier      2    0[COMRAM] unsigned int 
 21710 ;;  multiplicand    2    2[COMRAM] unsigned int 
 21711 ;; Auto vars:     Size  Location     Type
 21712 ;;  __wmul          2    4[COMRAM] unsigned int 
 21713 ;; Return value:  Size  Location     Type
 21714 ;;                  2    0[COMRAM] unsigned int 
 21715 ;; Registers used:
 21716 ;;		wreg, status,2, status,0, prodl, prodh
 21717 ;; Tracked objects:
 21718 ;;		On entry : 0/0
 21719 ;;		On exit  : 0/0
 21720 ;;		Unchanged: 0/0
 21721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21726 ;;Total ram usage:        6 bytes
 21727 ;; Hardware stack levels used:    1
 21728 ;; This function calls:
 21729 ;;		Nothing
 21730 ;; This function is called by:
 21731 ;;		_printSortTimer
 21732 ;;		_retrieveLog
 21733 ;;		i2_printf
 21734 ;; This function uses a non-reentrant model
 21735 ;;
 21736                           
 21737                           	psect	text82
 21738  004DC4                     __ptext82:
 21739                           	opt stack 0
 21740  004DC4                     i2___wmul:
 21741                           	opt stack 20
 21742                           
 21743                           ;incstack = 0
 21744  004DC4  5001               	movf	i2___wmul@multiplier,w,c
 21745  004DC6  0203               	mulwf	i2___wmul@multiplicand,c
 21746  004DC8  CFF3 F005          	movff	prodl,i2___wmul@product
 21747  004DCC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21748  004DD0  5001               	movf	i2___wmul@multiplier,w,c
 21749  004DD2  0204               	mulwf	i2___wmul@multiplicand+1,c
 21750  004DD4  50F3               	movf	prodl,w,c
 21751  004DD6  2606               	addwf	i2___wmul@product+1,f,c
 21752  004DD8  5002               	movf	i2___wmul@multiplier+1,w,c
 21753  004DDA  0203               	mulwf	i2___wmul@multiplicand,c
 21754  004DDC  50F3               	movf	prodl,w,c
 21755  004DDE  2606               	addwf	i2___wmul@product+1,f,c
 21756  004DE0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 21757  004DE4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 21758  004DE8  0012               	return	
 21759  004DEA                     __end_ofi2___wmul:
 21760                           	opt stack 0
 21761                           pclatu	equ	0xFFB
 21762                           pclath	equ	0xFFA
 21763                           tblptru	equ	0xFF8
 21764                           tblptrh	equ	0xFF7
 21765                           tblptrl	equ	0xFF6
 21766                           tablat	equ	0xFF5
 21767                           prodh	equ	0xFF4
 21768                           prodl	equ	0xFF3
 21769                           intcon	equ	0xFF2
 21770                           intcon2	equ	0xFF1
 21771                           intcon3	equ	0xFF0
 21772                           indf0	equ	0xFEF
 21773                           postinc0	equ	0xFEE
 21774                           fsr0h	equ	0xFEA
 21775                           fsr0l	equ	0xFE9
 21776                           wreg	equ	0xFE8
 21777                           postdec1	equ	0xFE5
 21778                           fsr1h	equ	0xFE2
 21779                           fsr1l	equ	0xFE1
 21780                           indf2	equ	0xFDF
 21781                           postinc2	equ	0xFDE
 21782                           postdec2	equ	0xFDD
 21783                           fsr2h	equ	0xFDA
 21784                           fsr2l	equ	0xFD9
 21785                           status	equ	0xFD8
 21786                           
 21787 ;; *************** function i2___lwmod *****************
 21788 ;; Defined at:
 21789 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 21790 ;; Parameters:    Size  Location     Type
 21791 ;;  dividend        2    0[COMRAM] unsigned int 
 21792 ;;  divisor         2    2[COMRAM] unsigned int 
 21793 ;; Auto vars:     Size  Location     Type
 21794 ;;  __lwmod         1    4[COMRAM] unsigned char 
 21795 ;; Return value:  Size  Location     Type
 21796 ;;                  2    0[COMRAM] unsigned int 
 21797 ;; Registers used:
 21798 ;;		wreg, status,2, status,0
 21799 ;; Tracked objects:
 21800 ;;		On entry : 0/0
 21801 ;;		On exit  : 0/0
 21802 ;;		Unchanged: 0/0
 21803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21807 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21808 ;;Total ram usage:        5 bytes
 21809 ;; Hardware stack levels used:    1
 21810 ;; This function calls:
 21811 ;;		Nothing
 21812 ;; This function is called by:
 21813 ;;		_printSortTimer
 21814 ;;		i2_printf
 21815 ;; This function uses a non-reentrant model
 21816 ;;
 21817                           
 21818                           	psect	text83
 21819  004936                     __ptext83:
 21820                           	opt stack 0
 21821  004936                     i2___lwmod:
 21822                           	opt stack 20
 21823                           
 21824                           ;incstack = 0
 21825  004936  5003               	movf	i2___lwmod@divisor,w,c
 21826  004938  1004               	iorwf	i2___lwmod@divisor+1,w,c
 21827  00493A  B4D8               	btfsc	status,2,c
 21828  00493C  D018               	goto	i2l1810
 21829  00493E  0E01               	movlw	1
 21830  004940  6E05               	movwf	i2___lwmod@counter,c
 21831  004942  D004               	goto	i2l5811
 21832  004944                     i2l5809:
 21833  004944  90D8               	bcf	status,0,c
 21834  004946  3603               	rlcf	i2___lwmod@divisor,f,c
 21835  004948  3604               	rlcf	i2___lwmod@divisor+1,f,c
 21836  00494A  2A05               	incf	i2___lwmod@counter,f,c
 21837  00494C                     i2l5811:
 21838  00494C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 21839  00494E  D7FA               	goto	i2l5809
 21840  004950                     i2l5813:
 21841  004950  5003               	movf	i2___lwmod@divisor,w,c
 21842  004952  5C01               	subwf	i2___lwmod@dividend,w,c
 21843  004954  5004               	movf	i2___lwmod@divisor+1,w,c
 21844  004956  5802               	subwfb	i2___lwmod@dividend+1,w,c
 21845  004958  A0D8               	btfss	status,0,c
 21846  00495A  D004               	goto	i2l5817
 21847  00495C  5003               	movf	i2___lwmod@divisor,w,c
 21848  00495E  5E01               	subwf	i2___lwmod@dividend,f,c
 21849  004960  5004               	movf	i2___lwmod@divisor+1,w,c
 21850  004962  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 21851  004964                     i2l5817:
 21852  004964  90D8               	bcf	status,0,c
 21853  004966  3204               	rrcf	i2___lwmod@divisor+1,f,c
 21854  004968  3203               	rrcf	i2___lwmod@divisor,f,c
 21855  00496A  2E05               	decfsz	i2___lwmod@counter,f,c
 21856  00496C  D7F1               	goto	i2l5813
 21857  00496E                     i2l1810:
 21858  00496E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 21859  004972  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 21860  004976  0012               	return		;funcret
 21861  004978                     __end_ofi2___lwmod:
 21862                           	opt stack 0
 21863                           pclatu	equ	0xFFB
 21864                           pclath	equ	0xFFA
 21865                           tblptru	equ	0xFF8
 21866                           tblptrh	equ	0xFF7
 21867                           tblptrl	equ	0xFF6
 21868                           tablat	equ	0xFF5
 21869                           prodh	equ	0xFF4
 21870                           prodl	equ	0xFF3
 21871                           intcon	equ	0xFF2
 21872                           intcon2	equ	0xFF1
 21873                           intcon3	equ	0xFF0
 21874                           indf0	equ	0xFEF
 21875                           postinc0	equ	0xFEE
 21876                           fsr0h	equ	0xFEA
 21877                           fsr0l	equ	0xFE9
 21878                           wreg	equ	0xFE8
 21879                           postdec1	equ	0xFE5
 21880                           fsr1h	equ	0xFE2
 21881                           fsr1l	equ	0xFE1
 21882                           indf2	equ	0xFDF
 21883                           postinc2	equ	0xFDE
 21884                           postdec2	equ	0xFDD
 21885                           fsr2h	equ	0xFDA
 21886                           fsr2l	equ	0xFD9
 21887                           status	equ	0xFD8
 21888                           
 21889 ;; *************** function i2___lwdiv *****************
 21890 ;; Defined at:
 21891 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21892 ;; Parameters:    Size  Location     Type
 21893 ;;  dividend        2    5[COMRAM] unsigned int 
 21894 ;;  divisor         2    7[COMRAM] unsigned int 
 21895 ;; Auto vars:     Size  Location     Type
 21896 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21897 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21898 ;; Return value:  Size  Location     Type
 21899 ;;                  2    5[COMRAM] unsigned int 
 21900 ;; Registers used:
 21901 ;;		wreg, status,2, status,0
 21902 ;; Tracked objects:
 21903 ;;		On entry : 0/0
 21904 ;;		On exit  : 0/0
 21905 ;;		Unchanged: 0/0
 21906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21908 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21910 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21911 ;;Total ram usage:        7 bytes
 21912 ;; Hardware stack levels used:    1
 21913 ;; This function calls:
 21914 ;;		Nothing
 21915 ;; This function is called by:
 21916 ;;		_printSortTimer
 21917 ;;		i2_printf
 21918 ;; This function uses a non-reentrant model
 21919 ;;
 21920                           
 21921                           	psect	text84
 21922  0047B8                     __ptext84:
 21923                           	opt stack 0
 21924  0047B8                     i2___lwdiv:
 21925                           	opt stack 20
 21926                           
 21927                           ;incstack = 0
 21928  0047B8  0E00               	movlw	0
 21929  0047BA  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21930  0047BC  0E00               	movlw	0
 21931  0047BE  6E0A               	movwf	i2___lwdiv@quotient,c
 21932  0047C0  5008               	movf	i2___lwdiv@divisor,w,c
 21933  0047C2  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21934  0047C4  B4D8               	btfsc	status,2,c
 21935  0047C6  D01C               	goto	i2l1800
 21936  0047C8  0E01               	movlw	1
 21937  0047CA  6E0C               	movwf	i2___lwdiv@counter,c
 21938  0047CC  D004               	goto	i2l5791
 21939  0047CE                     i2l5789:
 21940  0047CE  90D8               	bcf	status,0,c
 21941  0047D0  3608               	rlcf	i2___lwdiv@divisor,f,c
 21942  0047D2  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21943  0047D4  2A0C               	incf	i2___lwdiv@counter,f,c
 21944  0047D6                     i2l5791:
 21945  0047D6  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21946  0047D8  D7FA               	goto	i2l5789
 21947  0047DA                     i2l5793:
 21948  0047DA  90D8               	bcf	status,0,c
 21949  0047DC  360A               	rlcf	i2___lwdiv@quotient,f,c
 21950  0047DE  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21951  0047E0  5008               	movf	i2___lwdiv@divisor,w,c
 21952  0047E2  5C06               	subwf	i2___lwdiv@dividend,w,c
 21953  0047E4  5009               	movf	i2___lwdiv@divisor+1,w,c
 21954  0047E6  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21955  0047E8  A0D8               	btfss	status,0,c
 21956  0047EA  D005               	goto	i2l5801
 21957  0047EC  5008               	movf	i2___lwdiv@divisor,w,c
 21958  0047EE  5E06               	subwf	i2___lwdiv@dividend,f,c
 21959  0047F0  5009               	movf	i2___lwdiv@divisor+1,w,c
 21960  0047F2  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21961  0047F4  800A               	bsf	i2___lwdiv@quotient,0,c
 21962  0047F6                     i2l5801:
 21963  0047F6  90D8               	bcf	status,0,c
 21964  0047F8  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21965  0047FA  3208               	rrcf	i2___lwdiv@divisor,f,c
 21966  0047FC  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21967  0047FE  D7ED               	goto	i2l5793
 21968  004800                     i2l1800:
 21969  004800  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21970  004804  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21971  004808  0012               	return		;funcret
 21972  00480A                     __end_ofi2___lwdiv:
 21973                           	opt stack 0
 21974                           pclatu	equ	0xFFB
 21975                           pclath	equ	0xFFA
 21976                           tblptru	equ	0xFF8
 21977                           tblptrh	equ	0xFF7
 21978                           tblptrl	equ	0xFF6
 21979                           tablat	equ	0xFF5
 21980                           prodh	equ	0xFF4
 21981                           prodl	equ	0xFF3
 21982                           intcon	equ	0xFF2
 21983                           intcon2	equ	0xFF1
 21984                           intcon3	equ	0xFF0
 21985                           indf0	equ	0xFEF
 21986                           postinc0	equ	0xFEE
 21987                           fsr0h	equ	0xFEA
 21988                           fsr0l	equ	0xFE9
 21989                           wreg	equ	0xFE8
 21990                           postdec1	equ	0xFE5
 21991                           fsr1h	equ	0xFE2
 21992                           fsr1l	equ	0xFE1
 21993                           indf2	equ	0xFDF
 21994                           postinc2	equ	0xFDE
 21995                           postdec2	equ	0xFDD
 21996                           fsr2h	equ	0xFDA
 21997                           fsr2l	equ	0xFD9
 21998                           status	equ	0xFD8
 21999                           
 22000 ;; *************** function i2_lcdInst *****************
 22001 ;; Defined at:
 22002 ;;		line 15 in file "lcd.c"
 22003 ;; Parameters:    Size  Location     Type
 22004 ;;  data            1    wreg     unsigned char 
 22005 ;; Auto vars:     Size  Location     Type
 22006 ;;  data            1    2[COMRAM] unsigned char 
 22007 ;; Return value:  Size  Location     Type
 22008 ;;                  1    wreg      void 
 22009 ;; Registers used:
 22010 ;;		wreg, status,2, status,0, cstack
 22011 ;; Tracked objects:
 22012 ;;		On entry : 0/0
 22013 ;;		On exit  : 0/0
 22014 ;;		Unchanged: 0/0
 22015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22019 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22020 ;;Total ram usage:        1 bytes
 22021 ;; Hardware stack levels used:    1
 22022 ;; Hardware stack levels required when called:    1
 22023 ;; This function calls:
 22024 ;;		i2_lcdNibble
 22025 ;; This function is called by:
 22026 ;;		_change_state_to_menu_11
 22027 ;;		_change_state_to_menu_23
 22028 ;;		_change_state_to_logs_11
 22029 ;;		_change_state_to_logs_12
 22030 ;;		_change_state_to_logs_22
 22031 ;;		_change_state_to_logs_23
 22032 ;;		_change_state_to_logs_33
 22033 ;;		_change_state_to_logs_34
 22034 ;;		_printSortTimer
 22035 ;;		i2_change_state_to_menu_start
 22036 ;;		i2_change_state_to_menu_12
 22037 ;;		i2_change_state_to_menu_22
 22038 ;;		i2_printRTC
 22039 ;; This function uses a non-reentrant model
 22040 ;;
 22041                           
 22042                           	psect	text85
 22043  004F30                     __ptext85:
 22044                           	opt stack 0
 22045  004F30                     i2_lcdInst:
 22046                           	opt stack 19
 22047                           
 22048                           ;incstack = 0
 22049                           ;i2lcdInst@data stored from wreg
 22050  004F30  6E03               	movwf	i2lcdInst@data,c
 22051                           
 22052                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 22053  004F32  948C               	bcf	3980,2,c	;volatile
 22054                           
 22055                           ;lcd.c: 17: lcdNibble(data);
 22056  004F34  5003               	movf	i2lcdInst@data,w,c
 22057  004F36  ECB1  F023         	call	i2_lcdNibble
 22058  004F3A  0012               	return		;funcret
 22059  004F3C                     __end_ofi2_lcdInst:
 22060                           	opt stack 0
 22061                           pclatu	equ	0xFFB
 22062                           pclath	equ	0xFFA
 22063                           tblptru	equ	0xFF8
 22064                           tblptrh	equ	0xFF7
 22065                           tblptrl	equ	0xFF6
 22066                           tablat	equ	0xFF5
 22067                           prodh	equ	0xFF4
 22068                           prodl	equ	0xFF3
 22069                           intcon	equ	0xFF2
 22070                           intcon2	equ	0xFF1
 22071                           intcon3	equ	0xFF0
 22072                           indf0	equ	0xFEF
 22073                           postinc0	equ	0xFEE
 22074                           fsr0h	equ	0xFEA
 22075                           fsr0l	equ	0xFE9
 22076                           wreg	equ	0xFE8
 22077                           postdec1	equ	0xFE5
 22078                           fsr1h	equ	0xFE2
 22079                           fsr1l	equ	0xFE1
 22080                           indf2	equ	0xFDF
 22081                           postinc2	equ	0xFDE
 22082                           postdec2	equ	0xFDD
 22083                           fsr2h	equ	0xFDA
 22084                           fsr2l	equ	0xFD9
 22085                           status	equ	0xFD8
 22086                           
 22087 ;; *************** function i2_lcdNibble *****************
 22088 ;; Defined at:
 22089 ;;		line 25 in file "lcd.c"
 22090 ;; Parameters:    Size  Location     Type
 22091 ;;  data            1    wreg     unsigned char 
 22092 ;; Auto vars:     Size  Location     Type
 22093 ;;  data            1    1[COMRAM] unsigned char 
 22094 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 22095 ;; Return value:  Size  Location     Type
 22096 ;;                  1    wreg      void 
 22097 ;; Registers used:
 22098 ;;		wreg, status,2, status,0
 22099 ;; Tracked objects:
 22100 ;;		On entry : 0/0
 22101 ;;		On exit  : 0/0
 22102 ;;		Unchanged: 0/0
 22103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22108 ;;Total ram usage:        2 bytes
 22109 ;; Hardware stack levels used:    1
 22110 ;; This function calls:
 22111 ;;		Nothing
 22112 ;; This function is called by:
 22113 ;;		i2_lcdInst
 22114 ;;		i2_putch
 22115 ;; This function uses a non-reentrant model
 22116 ;;
 22117                           
 22118                           	psect	text86
 22119  004762                     __ptext86:
 22120                           	opt stack 0
 22121  004762                     i2_lcdNibble:
 22122                           	opt stack 19
 22123                           
 22124                           ;incstack = 0
 22125                           ;i2lcdNibble@data stored from wreg
 22126  004762  6E02               	movwf	i2lcdNibble@data,c
 22127                           
 22128                           ;lcd.c: 27: char temp = data & 0xF0;
 22129  004764  5002               	movf	i2lcdNibble@data,w,c
 22130  004766  0BF0               	andlw	240
 22131  004768  6E01               	movwf	i2lcdNibble@temp,c
 22132                           
 22133                           ;lcd.c: 28: LATD = LATD & 0x0F;
 22134  00476A  508C               	movf	3980,w,c	;volatile
 22135  00476C  0B0F               	andlw	15
 22136  00476E  6E8C               	movwf	3980,c	;volatile
 22137                           
 22138                           ;lcd.c: 29: LATD = temp | LATD;
 22139  004770  5001               	movf	i2lcdNibble@temp,w,c
 22140  004772  108C               	iorwf	3980,w,c	;volatile
 22141  004774  6E8C               	movwf	3980,c	;volatile
 22142                           
 22143                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 22144  004776  868C               	bsf	3980,3,c	;volatile
 22145                           
 22146                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22147  004778  0E42               	movlw	66
 22148  00477A                     i2u959_47:
 22149  00477A  2EE8               	decfsz	wreg,f,c
 22150  00477C  D7FE               	bra	i2u959_47
 22151  00477E  D000               	nop2	
 22152                           
 22153                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 22154  004780  968C               	bcf	3980,3,c	;volatile
 22155                           
 22156                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22157  004782  0E42               	movlw	66
 22158  004784                     i2u960_47:
 22159  004784  2EE8               	decfsz	wreg,f,c
 22160  004786  D7FE               	bra	i2u960_47
 22161  004788  D000               	nop2	
 22162                           
 22163                           ;lcd.c: 36: data = data << 4;
 22164  00478A  3802               	swapf	i2lcdNibble@data,w,c
 22165  00478C  0BF0               	andlw	240
 22166  00478E  6E02               	movwf	i2lcdNibble@data,c
 22167                           
 22168                           ;lcd.c: 38: temp = data & 0xF0;
 22169  004790  5002               	movf	i2lcdNibble@data,w,c
 22170  004792  0BF0               	andlw	240
 22171  004794  6E01               	movwf	i2lcdNibble@temp,c
 22172                           
 22173                           ;lcd.c: 39: LATD = LATD & 0x0F;
 22174  004796  508C               	movf	3980,w,c	;volatile
 22175  004798  0B0F               	andlw	15
 22176  00479A  6E8C               	movwf	3980,c	;volatile
 22177                           
 22178                           ;lcd.c: 40: LATD = temp | LATD;
 22179  00479C  5001               	movf	i2lcdNibble@temp,w,c
 22180  00479E  108C               	iorwf	3980,w,c	;volatile
 22181  0047A0  6E8C               	movwf	3980,c	;volatile
 22182                           
 22183                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 22184  0047A2  868C               	bsf	3980,3,c	;volatile
 22185                           
 22186                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22187  0047A4  0E42               	movlw	66
 22188  0047A6                     i2u961_47:
 22189  0047A6  2EE8               	decfsz	wreg,f,c
 22190  0047A8  D7FE               	bra	i2u961_47
 22191  0047AA  D000               	nop2	
 22192                           
 22193                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 22194  0047AC  968C               	bcf	3980,3,c	;volatile
 22195                           
 22196                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 22197  0047AE  0E42               	movlw	66
 22198  0047B0                     i2u962_47:
 22199  0047B0  2EE8               	decfsz	wreg,f,c
 22200  0047B2  D7FE               	bra	i2u962_47
 22201  0047B4  D000               	nop2	
 22202  0047B6  0012               	return		;funcret
 22203  0047B8                     __end_ofi2_lcdNibble:
 22204                           	opt stack 0
 22205                           pclatu	equ	0xFFB
 22206                           pclath	equ	0xFFA
 22207                           tblptru	equ	0xFF8
 22208                           tblptrh	equ	0xFF7
 22209                           tblptrl	equ	0xFF6
 22210                           tablat	equ	0xFF5
 22211                           prodh	equ	0xFF4
 22212                           prodl	equ	0xFF3
 22213                           intcon	equ	0xFF2
 22214                           intcon2	equ	0xFF1
 22215                           intcon3	equ	0xFF0
 22216                           indf0	equ	0xFEF
 22217                           postinc0	equ	0xFEE
 22218                           fsr0h	equ	0xFEA
 22219                           fsr0l	equ	0xFE9
 22220                           wreg	equ	0xFE8
 22221                           postdec1	equ	0xFE5
 22222                           fsr1h	equ	0xFE2
 22223                           fsr1l	equ	0xFE1
 22224                           indf2	equ	0xFDF
 22225                           postinc2	equ	0xFDE
 22226                           postdec2	equ	0xFDD
 22227                           fsr2h	equ	0xFDA
 22228                           fsr2l	equ	0xFD9
 22229                           status	equ	0xFD8
 22230                           
 22231 ;; *************** function i2_getRTC *****************
 22232 ;; Defined at:
 22233 ;;		line 44 in file "RTC.c"
 22234 ;; Parameters:    Size  Location     Type
 22235 ;;		None
 22236 ;; Auto vars:     Size  Location     Type
 22237 ;;  getRTC          2    3[COMRAM] int 
 22238 ;; Return value:  Size  Location     Type
 22239 ;;                  1    wreg      void 
 22240 ;; Registers used:
 22241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22242 ;; Tracked objects:
 22243 ;;		On entry : 0/0
 22244 ;;		On exit  : 0/0
 22245 ;;		Unchanged: 0/0
 22246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22250 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22251 ;;Total ram usage:        2 bytes
 22252 ;; Hardware stack levels used:    1
 22253 ;; Hardware stack levels required when called:    2
 22254 ;; This function calls:
 22255 ;;		i2_I2C_Master_Read
 22256 ;;		i2_I2C_Master_Start
 22257 ;;		i2_I2C_Master_Stop
 22258 ;;		i2_I2C_Master_Write
 22259 ;; This function is called by:
 22260 ;;		_printSortTimer
 22261 ;;		i2_printRTC
 22262 ;; This function uses a non-reentrant model
 22263 ;;
 22264                           
 22265                           	psect	text87
 22266  0044B4                     __ptext87:
 22267                           	opt stack 0
 22268  0044B4                     i2_getRTC:
 22269                           	opt stack 18
 22270                           
 22271                           ;RTC.c: 48: I2C_Master_Start();
 22272                           
 22273                           ;incstack = 0
 22274  0044B4  ECB8  F027         	call	i2_I2C_Master_Start	;wreg free
 22275                           
 22276                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 22277  0044B8  0E00               	movlw	0
 22278  0044BA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22279  0044BC  0ED0               	movlw	208
 22280  0044BE  6E02               	movwf	i2I2C_Master_Write@d,c
 22281  0044C0  ECA3  F027         	call	i2_I2C_Master_Write	;wreg free
 22282                           
 22283                           ;RTC.c: 50: I2C_Master_Write(0x00);
 22284  0044C4  0E00               	movlw	0
 22285  0044C6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22286  0044C8  0E00               	movlw	0
 22287  0044CA  6E02               	movwf	i2I2C_Master_Write@d,c
 22288  0044CC  ECA3  F027         	call	i2_I2C_Master_Write	;wreg free
 22289                           
 22290                           ;RTC.c: 51: I2C_Master_Stop();
 22291  0044D0  ECB4  F027         	call	i2_I2C_Master_Stop	;wreg free
 22292                           
 22293                           ;RTC.c: 54: I2C_Master_Start();
 22294  0044D4  ECB8  F027         	call	i2_I2C_Master_Start	;wreg free
 22295                           
 22296                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 22297  0044D8  0E00               	movlw	0
 22298  0044DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 22299  0044DC  0ED1               	movlw	209
 22300  0044DE  6E02               	movwf	i2I2C_Master_Write@d,c
 22301  0044E0  ECA3  F027         	call	i2_I2C_Master_Write	;wreg free
 22302                           
 22303                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 22304  0044E4  0E00               	movlw	0
 22305  0044E6  6E05               	movwf	i2getRTC@i+1,c
 22306  0044E8  0E00               	movlw	0
 22307  0044EA  6E04               	movwf	i2getRTC@i,c
 22308  0044EC                     i2l6047:
 22309  0044EC  BE05               	btfsc	i2getRTC@i+1,7,c
 22310  0044EE  D006               	goto	i2l6051
 22311  0044F0  5005               	movf	i2getRTC@i+1,w,c
 22312  0044F2  E111               	bnz	i2l6057
 22313  0044F4  0E06               	movlw	6
 22314  0044F6  5C04               	subwf	i2getRTC@i,w,c
 22315  0044F8  B0D8               	btfsc	status,0,c
 22316  0044FA  D00D               	goto	i2l6057
 22317  0044FC                     i2l6051:
 22318                           
 22319                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 22320  0044FC  0E24               	movlw	low _time
 22321  0044FE  2404               	addwf	i2getRTC@i,w,c
 22322  004500  6ED9               	movwf	fsr2l,c
 22323  004502  0E01               	movlw	high _time
 22324  004504  2005               	addwfc	i2getRTC@i+1,w,c
 22325  004506  6EDA               	movwf	fsr2h,c
 22326  004508  0E01               	movlw	1
 22327  00450A  ECF5  F026         	call	i2_I2C_Master_Read
 22328  00450E  6EDF               	movwf	indf2,c
 22329  004510  4A04               	infsnz	i2getRTC@i,f,c
 22330  004512  2A05               	incf	i2getRTC@i+1,f,c
 22331  004514  D7EB               	goto	i2l6047
 22332  004516                     i2l6057:
 22333                           
 22334                           ;RTC.c: 58: }
 22335                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 22336  004516  0E00               	movlw	0
 22337  004518  ECF5  F026         	call	i2_I2C_Master_Read
 22338  00451C  0101               	movlb	1	; () banked
 22339  00451E  6F2A               	movwf	(_time+6)& (0+255),b
 22340                           
 22341                           ;RTC.c: 60: I2C_Master_Stop();
 22342  004520  ECB4  F027         	call	i2_I2C_Master_Stop	;wreg free
 22343  004524  0012               	return		;funcret
 22344  004526                     __end_ofi2_getRTC:
 22345                           	opt stack 0
 22346                           pclatu	equ	0xFFB
 22347                           pclath	equ	0xFFA
 22348                           tblptru	equ	0xFF8
 22349                           tblptrh	equ	0xFF7
 22350                           tblptrl	equ	0xFF6
 22351                           tablat	equ	0xFF5
 22352                           prodh	equ	0xFF4
 22353                           prodl	equ	0xFF3
 22354                           intcon	equ	0xFF2
 22355                           intcon2	equ	0xFF1
 22356                           intcon3	equ	0xFF0
 22357                           indf0	equ	0xFEF
 22358                           postinc0	equ	0xFEE
 22359                           fsr0h	equ	0xFEA
 22360                           fsr0l	equ	0xFE9
 22361                           wreg	equ	0xFE8
 22362                           postdec1	equ	0xFE5
 22363                           fsr1h	equ	0xFE2
 22364                           fsr1l	equ	0xFE1
 22365                           indf2	equ	0xFDF
 22366                           postinc2	equ	0xFDE
 22367                           postdec2	equ	0xFDD
 22368                           fsr2h	equ	0xFDA
 22369                           fsr2l	equ	0xFD9
 22370                           status	equ	0xFD8
 22371                           
 22372 ;; *************** function i2_I2C_Master_Write *****************
 22373 ;; Defined at:
 22374 ;;		line 49 in file "I2C.c"
 22375 ;; Parameters:    Size  Location     Type
 22376 ;;  d               2    1[COMRAM] unsigned int 
 22377 ;; Auto vars:     Size  Location     Type
 22378 ;;		None
 22379 ;; Return value:  Size  Location     Type
 22380 ;;                  1    wreg      void 
 22381 ;; Registers used:
 22382 ;;		wreg, status,2, status,0, cstack
 22383 ;; Tracked objects:
 22384 ;;		On entry : 0/0
 22385 ;;		On exit  : 0/0
 22386 ;;		Unchanged: 0/0
 22387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22388 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;Total ram usage:        2 bytes
 22393 ;; Hardware stack levels used:    1
 22394 ;; Hardware stack levels required when called:    1
 22395 ;; This function calls:
 22396 ;;		i2_I2C_Master_Wait
 22397 ;; This function is called by:
 22398 ;;		i2_getRTC
 22399 ;; This function uses a non-reentrant model
 22400 ;;
 22401                           
 22402                           	psect	text88
 22403  004F46                     __ptext88:
 22404                           	opt stack 0
 22405  004F46                     i2_I2C_Master_Write:
 22406                           	opt stack 18
 22407                           
 22408                           ;I2C.c: 51: I2C_Master_Wait();
 22409                           
 22410                           ;incstack = 0
 22411  004F46  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22412                           
 22413                           ;I2C.c: 52: SSPBUF = d;
 22414  004F4A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 22415  004F4E  0012               	return		;funcret
 22416  004F50                     __end_ofi2_I2C_Master_Write:
 22417                           	opt stack 0
 22418                           pclatu	equ	0xFFB
 22419                           pclath	equ	0xFFA
 22420                           tblptru	equ	0xFF8
 22421                           tblptrh	equ	0xFF7
 22422                           tblptrl	equ	0xFF6
 22423                           tablat	equ	0xFF5
 22424                           prodh	equ	0xFF4
 22425                           prodl	equ	0xFF3
 22426                           intcon	equ	0xFF2
 22427                           intcon2	equ	0xFF1
 22428                           intcon3	equ	0xFF0
 22429                           indf0	equ	0xFEF
 22430                           postinc0	equ	0xFEE
 22431                           fsr0h	equ	0xFEA
 22432                           fsr0l	equ	0xFE9
 22433                           wreg	equ	0xFE8
 22434                           postdec1	equ	0xFE5
 22435                           fsr1h	equ	0xFE2
 22436                           fsr1l	equ	0xFE1
 22437                           indf2	equ	0xFDF
 22438                           postinc2	equ	0xFDE
 22439                           postdec2	equ	0xFDD
 22440                           fsr2h	equ	0xFDA
 22441                           fsr2l	equ	0xFD9
 22442                           status	equ	0xFD8
 22443                           
 22444 ;; *************** function i2_I2C_Master_Stop *****************
 22445 ;; Defined at:
 22446 ;;		line 43 in file "I2C.c"
 22447 ;; Parameters:    Size  Location     Type
 22448 ;;		None
 22449 ;; Auto vars:     Size  Location     Type
 22450 ;;		None
 22451 ;; Return value:  Size  Location     Type
 22452 ;;                  1    wreg      void 
 22453 ;; Registers used:
 22454 ;;		wreg, status,2, status,0, cstack
 22455 ;; Tracked objects:
 22456 ;;		On entry : 0/0
 22457 ;;		On exit  : 0/0
 22458 ;;		Unchanged: 0/0
 22459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22464 ;;Total ram usage:        0 bytes
 22465 ;; Hardware stack levels used:    1
 22466 ;; Hardware stack levels required when called:    1
 22467 ;; This function calls:
 22468 ;;		i2_I2C_Master_Wait
 22469 ;; This function is called by:
 22470 ;;		i2_getRTC
 22471 ;; This function uses a non-reentrant model
 22472 ;;
 22473                           
 22474                           	psect	text89
 22475  004F68                     __ptext89:
 22476                           	opt stack 0
 22477  004F68                     i2_I2C_Master_Stop:
 22478                           	opt stack 18
 22479                           
 22480                           ;I2C.c: 45: I2C_Master_Wait();
 22481                           
 22482                           ;incstack = 0
 22483  004F68  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22484                           
 22485                           ;I2C.c: 46: PEN = 1;
 22486  004F6C  84C5               	bsf	4037,2,c	;volatile
 22487  004F6E  0012               	return		;funcret
 22488  004F70                     __end_ofi2_I2C_Master_Stop:
 22489                           	opt stack 0
 22490                           pclatu	equ	0xFFB
 22491                           pclath	equ	0xFFA
 22492                           tblptru	equ	0xFF8
 22493                           tblptrh	equ	0xFF7
 22494                           tblptrl	equ	0xFF6
 22495                           tablat	equ	0xFF5
 22496                           prodh	equ	0xFF4
 22497                           prodl	equ	0xFF3
 22498                           intcon	equ	0xFF2
 22499                           intcon2	equ	0xFF1
 22500                           intcon3	equ	0xFF0
 22501                           indf0	equ	0xFEF
 22502                           postinc0	equ	0xFEE
 22503                           fsr0h	equ	0xFEA
 22504                           fsr0l	equ	0xFE9
 22505                           wreg	equ	0xFE8
 22506                           postdec1	equ	0xFE5
 22507                           fsr1h	equ	0xFE2
 22508                           fsr1l	equ	0xFE1
 22509                           indf2	equ	0xFDF
 22510                           postinc2	equ	0xFDE
 22511                           postdec2	equ	0xFDD
 22512                           fsr2h	equ	0xFDA
 22513                           fsr2l	equ	0xFD9
 22514                           status	equ	0xFD8
 22515                           
 22516 ;; *************** function i2_I2C_Master_Start *****************
 22517 ;; Defined at:
 22518 ;;		line 31 in file "I2C.c"
 22519 ;; Parameters:    Size  Location     Type
 22520 ;;		None
 22521 ;; Auto vars:     Size  Location     Type
 22522 ;;		None
 22523 ;; Return value:  Size  Location     Type
 22524 ;;                  1    wreg      void 
 22525 ;; Registers used:
 22526 ;;		wreg, status,2, status,0, cstack
 22527 ;; Tracked objects:
 22528 ;;		On entry : 0/0
 22529 ;;		On exit  : 0/0
 22530 ;;		Unchanged: 0/0
 22531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22536 ;;Total ram usage:        0 bytes
 22537 ;; Hardware stack levels used:    1
 22538 ;; Hardware stack levels required when called:    1
 22539 ;; This function calls:
 22540 ;;		i2_I2C_Master_Wait
 22541 ;; This function is called by:
 22542 ;;		i2_getRTC
 22543 ;; This function uses a non-reentrant model
 22544 ;;
 22545                           
 22546                           	psect	text90
 22547  004F70                     __ptext90:
 22548                           	opt stack 0
 22549  004F70                     i2_I2C_Master_Start:
 22550                           	opt stack 18
 22551                           
 22552                           ;I2C.c: 33: I2C_Master_Wait();
 22553                           
 22554                           ;incstack = 0
 22555  004F70  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22556                           
 22557                           ;I2C.c: 34: SEN = 1;
 22558  004F74  80C5               	bsf	4037,0,c	;volatile
 22559  004F76  0012               	return		;funcret
 22560  004F78                     __end_ofi2_I2C_Master_Start:
 22561                           	opt stack 0
 22562                           pclatu	equ	0xFFB
 22563                           pclath	equ	0xFFA
 22564                           tblptru	equ	0xFF8
 22565                           tblptrh	equ	0xFF7
 22566                           tblptrl	equ	0xFF6
 22567                           tablat	equ	0xFF5
 22568                           prodh	equ	0xFF4
 22569                           prodl	equ	0xFF3
 22570                           intcon	equ	0xFF2
 22571                           intcon2	equ	0xFF1
 22572                           intcon3	equ	0xFF0
 22573                           indf0	equ	0xFEF
 22574                           postinc0	equ	0xFEE
 22575                           fsr0h	equ	0xFEA
 22576                           fsr0l	equ	0xFE9
 22577                           wreg	equ	0xFE8
 22578                           postdec1	equ	0xFE5
 22579                           fsr1h	equ	0xFE2
 22580                           fsr1l	equ	0xFE1
 22581                           indf2	equ	0xFDF
 22582                           postinc2	equ	0xFDE
 22583                           postdec2	equ	0xFDD
 22584                           fsr2h	equ	0xFDA
 22585                           fsr2l	equ	0xFD9
 22586                           status	equ	0xFD8
 22587                           
 22588 ;; *************** function i2_I2C_Master_Read *****************
 22589 ;; Defined at:
 22590 ;;		line 55 in file "I2C.c"
 22591 ;; Parameters:    Size  Location     Type
 22592 ;;  a               1    wreg     unsigned char 
 22593 ;; Auto vars:     Size  Location     Type
 22594 ;;  a               1    1[COMRAM] unsigned char 
 22595 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 22596 ;; Return value:  Size  Location     Type
 22597 ;;                  1    wreg      unsigned char 
 22598 ;; Registers used:
 22599 ;;		wreg, status,2, status,0, cstack
 22600 ;; Tracked objects:
 22601 ;;		On entry : 0/0
 22602 ;;		On exit  : 0/0
 22603 ;;		Unchanged: 0/0
 22604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22608 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22609 ;;Total ram usage:        2 bytes
 22610 ;; Hardware stack levels used:    1
 22611 ;; Hardware stack levels required when called:    1
 22612 ;; This function calls:
 22613 ;;		i2_I2C_Master_Wait
 22614 ;; This function is called by:
 22615 ;;		i2_getRTC
 22616 ;; This function uses a non-reentrant model
 22617 ;;
 22618                           
 22619                           	psect	text91
 22620  004DEA                     __ptext91:
 22621                           	opt stack 0
 22622  004DEA                     i2_I2C_Master_Read:
 22623                           	opt stack 18
 22624                           
 22625                           ;incstack = 0
 22626                           ;i2I2C_Master_Read@a stored from wreg
 22627  004DEA  6E02               	movwf	i2I2C_Master_Read@a,c
 22628                           
 22629                           ;I2C.c: 57: unsigned char temp;
 22630                           ;I2C.c: 58: I2C_Master_Wait();
 22631  004DEC  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22632                           
 22633                           ;I2C.c: 59: RCEN = 1;
 22634  004DF0  86C5               	bsf	4037,3,c	;volatile
 22635                           
 22636                           ;I2C.c: 60: I2C_Master_Wait();
 22637  004DF2  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22638                           
 22639                           ;I2C.c: 61: temp = SSPBUF;
 22640  004DF6  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 22641                           
 22642                           ;I2C.c: 62: I2C_Master_Wait();
 22643  004DFA  EC79  F027         	call	i2_I2C_Master_Wait	;wreg free
 22644                           
 22645                           ;I2C.c: 63: ACKDT = (a)?0:1;
 22646  004DFE  5002               	movf	i2I2C_Master_Read@a,w,c
 22647  004E00  A4D8               	btfss	status,2,c
 22648  004E02  D002               	goto	i2u422_40
 22649  004E04  8AC5               	bsf	4037,5,c	;volatile
 22650  004E06  D001               	goto	i2l5755
 22651  004E08                     i2u422_40:
 22652  004E08  9AC5               	bcf	4037,5,c	;volatile
 22653  004E0A                     i2l5755:
 22654                           
 22655                           ;I2C.c: 64: ACKEN = 1;
 22656  004E0A  88C5               	bsf	4037,4,c	;volatile
 22657                           
 22658                           ;I2C.c: 65: return temp;
 22659  004E0C  5003               	movf	i2I2C_Master_Read@temp,w,c
 22660  004E0E  0012               	return	
 22661  004E10                     __end_ofi2_I2C_Master_Read:
 22662                           	opt stack 0
 22663                           pclatu	equ	0xFFB
 22664                           pclath	equ	0xFFA
 22665                           tblptru	equ	0xFF8
 22666                           tblptrh	equ	0xFF7
 22667                           tblptrl	equ	0xFF6
 22668                           tablat	equ	0xFF5
 22669                           prodh	equ	0xFF4
 22670                           prodl	equ	0xFF3
 22671                           intcon	equ	0xFF2
 22672                           intcon2	equ	0xFF1
 22673                           intcon3	equ	0xFF0
 22674                           indf0	equ	0xFEF
 22675                           postinc0	equ	0xFEE
 22676                           fsr0h	equ	0xFEA
 22677                           fsr0l	equ	0xFE9
 22678                           wreg	equ	0xFE8
 22679                           postdec1	equ	0xFE5
 22680                           fsr1h	equ	0xFE2
 22681                           fsr1l	equ	0xFE1
 22682                           indf2	equ	0xFDF
 22683                           postinc2	equ	0xFDE
 22684                           postdec2	equ	0xFDD
 22685                           fsr2h	equ	0xFDA
 22686                           fsr2l	equ	0xFD9
 22687                           status	equ	0xFD8
 22688                           
 22689 ;; *************** function i2_I2C_Master_Wait *****************
 22690 ;; Defined at:
 22691 ;;		line 26 in file "I2C.c"
 22692 ;; Parameters:    Size  Location     Type
 22693 ;;		None
 22694 ;; Auto vars:     Size  Location     Type
 22695 ;;		None
 22696 ;; Return value:  Size  Location     Type
 22697 ;;                  1    wreg      void 
 22698 ;; Registers used:
 22699 ;;		wreg, status,2, status,0
 22700 ;; Tracked objects:
 22701 ;;		On entry : 0/0
 22702 ;;		On exit  : 0/0
 22703 ;;		Unchanged: 0/0
 22704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22709 ;;Total ram usage:        1 bytes
 22710 ;; Hardware stack levels used:    1
 22711 ;; This function calls:
 22712 ;;		Nothing
 22713 ;; This function is called by:
 22714 ;;		i2_I2C_Master_Start
 22715 ;;		i2_I2C_Master_Stop
 22716 ;;		i2_I2C_Master_Write
 22717 ;;		i2_I2C_Master_Read
 22718 ;; This function uses a non-reentrant model
 22719 ;;
 22720                           
 22721                           	psect	text92
 22722  004EF2                     __ptext92:
 22723                           	opt stack 0
 22724  004EF2                     i2_I2C_Master_Wait:
 22725                           	opt stack 18
 22726  004EF2                     i2l66:
 22727  004EF2  B4C7               	btfsc	4039,2,c	;volatile
 22728  004EF4  D7FE               	goto	i2l66
 22729  004EF6  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 22730  004EFA  0E1F               	movlw	31
 22731  004EFC  1601               	andwf	??i2_I2C_Master_Wait,f,c
 22732  004EFE  B4D8               	btfsc	status,2,c
 22733  004F00  0012               	return	
 22734  004F02  D7F7               	goto	i2l66
 22735  004F04                     __end_ofi2_I2C_Master_Wait:
 22736                           	opt stack 0
 22737                           pclatu	equ	0xFFB
 22738                           pclath	equ	0xFFA
 22739                           tblptru	equ	0xFF8
 22740                           tblptrh	equ	0xFF7
 22741                           tblptrl	equ	0xFF6
 22742                           tablat	equ	0xFF5
 22743                           prodh	equ	0xFF4
 22744                           prodl	equ	0xFF3
 22745                           intcon	equ	0xFF2
 22746                           intcon2	equ	0xFF1
 22747                           intcon3	equ	0xFF0
 22748                           indf0	equ	0xFEF
 22749                           postinc0	equ	0xFEE
 22750                           fsr0h	equ	0xFEA
 22751                           fsr0l	equ	0xFE9
 22752                           wreg	equ	0xFE8
 22753                           postdec1	equ	0xFE5
 22754                           fsr1h	equ	0xFE2
 22755                           fsr1l	equ	0xFE1
 22756                           indf2	equ	0xFDF
 22757                           postinc2	equ	0xFDE
 22758                           postdec2	equ	0xFDD
 22759                           fsr2h	equ	0xFDA
 22760                           fsr2l	equ	0xFD9
 22761                           status	equ	0xFD8
 22762                           pclatu	equ	0xFFB
 22763                           pclath	equ	0xFFA
 22764                           tblptru	equ	0xFF8
 22765                           tblptrh	equ	0xFF7
 22766                           tblptrl	equ	0xFF6
 22767                           tablat	equ	0xFF5
 22768                           prodh	equ	0xFF4
 22769                           prodl	equ	0xFF3
 22770                           intcon	equ	0xFF2
 22771                           intcon2	equ	0xFF1
 22772                           intcon3	equ	0xFF0
 22773                           indf0	equ	0xFEF
 22774                           postinc0	equ	0xFEE
 22775                           fsr0h	equ	0xFEA
 22776                           fsr0l	equ	0xFE9
 22777                           wreg	equ	0xFE8
 22778                           postdec1	equ	0xFE5
 22779                           fsr1h	equ	0xFE2
 22780                           fsr1l	equ	0xFE1
 22781                           indf2	equ	0xFDF
 22782                           postinc2	equ	0xFDE
 22783                           postdec2	equ	0xFDD
 22784                           fsr2h	equ	0xFDA
 22785                           fsr2l	equ	0xFD9
 22786                           status	equ	0xFD8
 22787                           
 22788                           	psect	rparam
 22789  0000                     pclatu	equ	0xFFB
 22790                           pclath	equ	0xFFA
 22791                           tblptru	equ	0xFF8
 22792                           tblptrh	equ	0xFF7
 22793                           tblptrl	equ	0xFF6
 22794                           tablat	equ	0xFF5
 22795                           prodh	equ	0xFF4
 22796                           prodl	equ	0xFF3
 22797                           intcon	equ	0xFF2
 22798                           intcon2	equ	0xFF1
 22799                           intcon3	equ	0xFF0
 22800                           indf0	equ	0xFEF
 22801                           postinc0	equ	0xFEE
 22802                           fsr0h	equ	0xFEA
 22803                           fsr0l	equ	0xFE9
 22804                           wreg	equ	0xFE8
 22805                           postdec1	equ	0xFE5
 22806                           fsr1h	equ	0xFE2
 22807                           fsr1l	equ	0xFE1
 22808                           indf2	equ	0xFDF
 22809                           postinc2	equ	0xFDE
 22810                           postdec2	equ	0xFDD
 22811                           fsr2h	equ	0xFDA
 22812                           fsr2l	equ	0xFD9
 22813                           status	equ	0xFD8
 22814                           
 22815                           	psect	temp
 22816  00007E                     btemp:
 22817                           	opt stack 0
 22818  00007E                     	ds	1
 22819  0000                     int$flags	set	btemp
 22820                           pclatu	equ	0xFFB
 22821                           pclath	equ	0xFFA
 22822                           tblptru	equ	0xFF8
 22823                           tblptrh	equ	0xFF7
 22824                           tblptrl	equ	0xFF6
 22825                           tablat	equ	0xFF5
 22826                           prodh	equ	0xFF4
 22827                           prodl	equ	0xFF3
 22828                           intcon	equ	0xFF2
 22829                           intcon2	equ	0xFF1
 22830                           intcon3	equ	0xFF0
 22831                           indf0	equ	0xFEF
 22832                           postinc0	equ	0xFEE
 22833                           fsr0h	equ	0xFEA
 22834                           fsr0l	equ	0xFE9
 22835                           wreg	equ	0xFE8
 22836                           postdec1	equ	0xFE5
 22837                           fsr1h	equ	0xFE2
 22838                           fsr1l	equ	0xFE1
 22839                           indf2	equ	0xFDF
 22840                           postinc2	equ	0xFDE
 22841                           postdec2	equ	0xFDD
 22842                           fsr2h	equ	0xFDA
 22843                           fsr2l	equ	0xFD9
 22844                           status	equ	0xFD8


Data Sizes:
    Strings     1269
    Constant    27
    Data        8
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88     125
    BANK0           128     90     128
    BANK1           256      0      61
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_126(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_125(CODE[18]), STR_124(CODE[18]), STR_123(CODE[18]), STR_122(CODE[18]), 
		 -> STR_121(CODE[18]), STR_120(CODE[18]), STR_119(CODE[17]), STR_118(CODE[17]), 
		 -> STR_117(CODE[3]), STR_116(CODE[15]), STR_115(CODE[3]), STR_114(CODE[15]), 
		 -> STR_113(CODE[11]), STR_112(CODE[18]), STR_111(CODE[18]), STR_110(CODE[17]), 
		 -> STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[15]), STR_106(CODE[17]), 
		 -> STR_105(CODE[17]), STR_104(CODE[17]), STR_103(CODE[16]), STR_102(CODE[17]), 
		 -> STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[17]), 
		 -> STR_97(CODE[17]), STR_96(CODE[15]), STR_95(CODE[11]), STR_94(CODE[17]), 
		 -> STR_93(CODE[11]), STR_92(CODE[17]), STR_91(CODE[14]), STR_90(CODE[15]), 
		 -> STR_89(CODE[14]), STR_88(CODE[10]), STR_87(CODE[9]), STR_86(CODE[9]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), 
		 -> STR_81(CODE[3]), STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), 
		 -> STR_77(CODE[8]), STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), 
		 -> STR_73(CODE[14]), STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), 
		 -> STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), 
		 -> STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), 
		 -> STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), 
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), 
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), 
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), 
		 -> STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), 
		 -> STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  203004
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   24348
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             17    17      0   18830
                                             49 BANK0     17    17      0
                        _EEPROM_read
                       _EEPROM_write
                            ___awmod
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11286
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10539
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22968
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22054
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   45816
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13211
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8843
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1192
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   97473
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8955
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8843
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15467
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                          10    10      0    9047
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8843
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19605
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          7     7      0    9027
                                             43 BANK0      7     7      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8708
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   75643
                                             72 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      31    31      0    4788
                                             41 COMRAM    31    31      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       ___awmod
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3D       7       23.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 11:07:07 2017

                                    _i 0131                     i2_I2C_Master_Start 4F70  
                   i2_I2C_Master_Write 4F46                                     l66 4EDE  
                                   _ID 3338                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l606 23D2                                    l491 3DCE  
                                  l740 1674                                    l750 1720  
                                  l761 1830                                    l753 175A  
                                  l763 1916                                    l782 34F2  
                                  l758 17F6                                    l839 4408  
                                  l778 3440                                    l779 345A  
                                  l975 3B9C                                    l988 4EC0  
                                  l997 3930                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EC  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3682  
                  _log_count_can_w_lab 0073        __end_of_change_state_to_menu_11 4B78  
      __end_of_change_state_to_menu_12 49E8        __end_of_change_state_to_menu_22 49B0  
      __end_of_change_state_to_menu_23 4B48           _f_can_coming_to_distribution 0069  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 4C68  
      __end_of_change_state_to_logs_12 4C38        __end_of_change_state_to_logs_22 4C08  
      __end_of_change_state_to_logs_23 4CF2        __end_of_change_state_to_logs_33 4BD8  
      __end_of_change_state_to_logs_34 4BA8                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1113 3CBC  
                                 l1202 0858                                   l1122 207C  
                                 l1116 3CC0                                   l1221 4270  
                                 l1125 2080                                   l1222 4274  
                                 l1223 4278                                   l1215 4250  
                                 l1151 0080                                   l1312 35D4  
                                 l1224 427C                                   l1160 0240  
                                 l1225 4280                                   l1161 028E  
                                 l1242 4700                                   l1227 42BE  
                                 l1219 426C                                   l1155 0126  
                                 l1236 46F0                                   l1260 2A86  
                                 l1148 007C                                   l1092 3AE4  
                                 l1317 3620                                   l1318 363A  
                                 l1158 018C                                   l1159 01DA  
                                 l1264 2ACA                                   l1353 13B6  
                                 l1257 2AEA                                   l1185 05E8  
                                 l1089 3AC4                                   l1266 2AE4  
                                 l1197 0782                                   l1295 4220  
                                 l1800 43C2                                   l1288 4210  
                                 l1810 45E6                                   l6011 441E  
                                 l1747 3F5C                                   l6023 3EE0  
                                 l6009 43F4                                   l6025 3EF0  
                                 l6035 3F4A                                   l6027 3EF6  
                                 l7003 33BA                                   l6231 2350  
                                 l7015 33F0                                   l7007 33C8  
                                 l7201 21D8                                   l6241 2418  
                                 l6401 3F7C                                   l8003 3EA8  
                                 l6251 24AE                                   l6243 2436  
                                 l7019 3400                                   l6411 4008  
                                 l6253 24CC                                   l6245 2454  
                                 l6237 23DC                                   l6405 3F92  
                                 l5703 4372                                   l7231 22CC  
                                 l7207 221A                                   l6255 24EA  
                                 l6247 2472                                   l6239 23FA  
                                 l6263 2544                                   l7063 2D2E  
                                 l5705 437E                                   l6257 2508  
                                 l6249 2490                                   l6265 25A2  
                                 l8121 0B06                                   l8113 0AE4  
                                 l7081 2E14                                   l7065 2D48  
                                 l7073 2D96                                   l7049 34B0  
                                 l7057 34F4                                   l6513 44A8  
                                 l5715 43B4                                   l5707 4384  
                                 l5731 45D8                                   l5723 45A2  
                                 l7403 03B0                                   l7243 2314  
                                 l7227 2296                                   l7219 2266  
                                 l7171 20D0                                   l6531 4034  
                                 l6259 2526                                   l8203 0DF6  
                                 l8131 0B22                                   l8051 09B8  
                                 l6451 3C0E                                   l7083 2E2E  
                                 l7091 2E90                                   l7067 2D62  
                                 l7075 2DC4                                   l5725 45AE  
                                 l5645 4D32                                   l7421 0412  
                                 l7413 03D8                                   l7405 03B6  
                                 l6541 4064                                   l8117 0AEE  
                                 l8061 09DA                                   l8053 09BE  
                                 l7085 2E48                                   l7069 2D7C  
                                 l6509 4490                                   l5727 45B4  
                                 l5647 4D44                                   l7503 05A8  
                                 l7431 043A                                   l7239 22DE  
                                 l6543 406A                                   l6551 409C  
                                 l6535 4044                                   l8311 1056  
                                 l8231 0EDE                                   l8207 0E0E  
                                 l8151 0B8C                                   l8135 0B3A  
                                 l8127 0B18                                   l6463 3C46  
                                 l6447 3C04                                   l6455 3C26  
                                 l7079 2DFA                                   _ADIE 007CEE  
                                 l5913 1408                                   l7513 05D0  
                                 l7425 041C                                   l7409 03C0  
                                 l8321 1080                                   l8241 0F08  
                                 l8161 0C22                                   l8153 0BAA  
                                 l8065 09F2                                   l8057 09D0  
                                 l6641 4112                                   l7089 2E62  
                                 l6473 4D90                                   l5915 140E  
                                 l5843 1192                                   l7531 063A  
                                 l7507 05C0                                   l7451 04A0  
                                 l7435 0444                                   l7283 00EA  
                                 l6555 40B0                                   l6547 408E  
                                 l6539 4058                                   l8315 106E  
                                 l8307 104C                                   l8235 0EF6  
                                 l8227 0ED4                                   l8171 0CB8  
                                 l8163 0C40                                   l8155 0BC8  
                                 l8083 0A5C                                   l6459 3C3C  
                                 l5933 146C                                   l5909 13EE  
                                 l5845 11A4                                   l7621 07F4  
                                 l7613 07D2                                   l7541 0662  
                                 l7509 05C6                                   l7461 04C8  
                                 l7429 0434                                   l7373 0314  
                                 l7293 0112                                   l7285 00F0  
                                 l7189 2188                                   l5669 4CBC  
                                 l8325 108A                                   l8245 0F12  
                                 l8173 0CD6                                   l8165 0C5E  
                                 l8157 0BE6                                   l8181 0D76  
                                 l8093 0A84                                   l8085 0A62  
                                 l8069 0A04                                   l6637 40FC  
                                 l6469 4D7A                                   l6493 4450  
                                 l5687 4D6A                                   l5951 14E4  
                                 l5927 144A                                   l5871 1290  
                                 l5863 125E                                   l5855 11E2  
                                 l5839 117E                                   l7631 081C  
                                 l7623 07FA                                   l7535 0652  
                                 l7527 0630                                   l7455 04B8  
                                 l7447 0496                                   l7439 045C  
                                 l7383 033C                                   l8351 110A  
                                 l8271 0F9A                                   l8175 0CF4  
                                 l8167 0C7C                                   l8159 0C04  
                                 l6647 413E                                   l5953 14F0  
                                 l5961 151E                                   l5945 14C8  
                                 l5937 14A4                                   l5881 1308  
                                 l5873 129C                                   l5849 11AE  
                                 l7721 28D8                                   l7617 07DC  
                                 l7561 06D6                                   l7553 06B4  
                                 l7545 067A                                   l7537 0658  
                                 l7481 053C                                   l7473 051A  
                                 l7465 04E0                                   l7457 04BE  
                                 l7377 032C                                   l7369 030A  
                                 l7289 00FA                                   l8361 1134  
                                 l8329 10A2                                   l8281 0FC4  
                                 l8249 0F2A                                   l8193 0DDA  
                                 l8185 0DB8                                   l8169 0C9A  
                                 l8089 0A6C                                   l6497 4466  
                                 l6905 173A                                   l5963 1524  
                                 l5939 14AE                                   l5891 135E  
                                 l5883 1314                                   l5875 12A2  
                                 l7627 0804                                   l7571 06FE  
                                 l7563 06DC                                   l7491 0564  
                                 l7483 0542                                   l7395 038E  
                                 l7387 0354                                   l7379 0332  
                                 l8355 1122                                   l8347 1100  
                                 l8275 0FB2                                   l8267 0F90  
                                 l8179 0D12                                   l8099 0A92  
                                 l6907 1744                                   l5957 150A  
                                 l5893 1376                                   l5885 131A  
                                 l7741 2996                                   l7709 4248  
                                 l7653 0882                                   l7637 0842  
                                 l7557 06BE                                   l7477 0524  
                                 l8701 3B1A                                   l5981 4186  
                                 l5973 49F2                                   l8365 113E  
                                 l8285 0FCE                                   l8189 0DC2  
                                 l8373 1162                                   l6933 17E0  
                                 l6917 1774                                   l6853 1632  
                                 l5967 157C                                   l5887 1332  
                                 l7663 08AA                                   l7647 0872  
                                 l7583 0742                                   l7567 06E6  
                                 l7487 054C                                   l7399 0398  
                                 l8703 3B20                                   l5991 41BC  
                                 l5975 49FE                                   l8199 0DEC  
                                 l8631 3866                                   l6943 1810  
                                 l6863 167C                                   l5897 137C  
                                 l5969 1588                                   l7657 089A  
                                 l7649 0878                                   l7593 076A  
                                 l5985 419C                                   l8369 1156  
                                 l8289 0FE6                                   l6945 181A  
                                 l7915 3572                                   l7771 2A70  
                                 l7739 2990                                   l7667 08C2  
                                 l7659 08A0                                   l7587 075A  
                                 l7579 0738                                   l7499 059E  
                                 l8707 3B26                                   l6955 184A  
                                 l7781 2AA0                                   l7589 0760  
                                 l8629 3852                                   l7943 3600  
                                 l7935 35D6                                   l7919 35A2  
                                 l7759 2A4E                                   l8655 38EA  
                                 l6983 1910                                   l6975 18CE  
                                 l6959 1872                                   l6895 170A  
                                 l6879 16B8                                   l7945 360A  
                                 l7937 35E6                                   l7961 367C  
                                 l7785 2AB4                                   l6985 1922  
                                 l7955 363C                                   l8691 3AFC  
                                 l8667 3A66                                   l7971 3E10  
                                 l8771 3D7E                                   l7957 364C  
                                 l8693 3B02                                   l8685 3AEA  
                                 l8781 3DAE                                   l8773 3D94  
                                 l7799 4284                                   l8695 3B08  
                                 l8687 3AF0                                   l7983 3E44  
                                 l8791 3DCA                                   l8697 3B0E  
                                 l8689 3AF6                                   l7985 3E50  
                                 l7977 3E26                                   l8777 3DA2  
                                 l8699 3B14                                   l7995 3E86  
                                 l7987 3E56                                   l8779 3DA8  
                                 l8795 3DD0                                   l8789 3DC4  
                                 l7999 3E94                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4120 4CBA  
                                 u5030 23D2                                   u5015 4620  
                                 u4400 12DC                                   u6000 0126  
                                 u4320 489A                                   u4330 489C  
                                 u6020 01DA                                   u4340 48E6  
                                 u4341 48E2                                   u4350 48E8  
                                 u4407 12D2                                   u4440 1354  
                                 u6040 028E                                   _PEIE 007F96  
                                 u4447 134A                                   u5440 163E  
                                 u5460 1674                                   _RCEN 007E2B  
                                 u6600 29D8                                   u6610 29DA  
                                 u5458 1642                                   u5900 22BA  
                                 u9007 0424                                   u8207 17AE  
                                 u6800 35CC                                   u5680 3386  
                                 u9017 044C                                   u8217 17FA  
                                 u8137 15C2                                   i2l66 4EF2  
                                 u6730 3534                                   u6570 291A  
                                 u5930 2302                                   u5770 34BC  
                                 u9107 06C6                                   u9027 04A8  
                                 u8307 446E                                   u8227 1802  
                                 u8147 16D8                                   u6900 366A  
                                 u6740 3590                                   u6580 291C  
                                 u5908 22BE                                   u5860 2112  
                                 u9117 06EE                                   u9037 04D0  
                                 u8317 334E                                   u8237 1834  
                                 u8157 1724                                   u5870 2114  
                                 u5790 34F2                                   u9207 08B2  
                                 u9127 074A                                   u9047 052C  
                                 u8407 2ED0                                   u8327 336C  
                                 u8247 183E                                   u8167 172C  
                                 u5688 338A                                   u6841 35F6  
                                 u9217 41DA                                   u9137 0772  
                                 u9057 0554                                   u8417 3BBA  
                                 u8337 3410                                   u8257 1858  
                                 u8177 175E                                   u6850 35F8  
                                 u6738 3538                                   u5938 2306  
                                 u9307 2A92                                   u9227 422A  
                                 u9147 0794                                   u9067 05B0  
                                 u8507 0AA0                                   u8427 3C16  
                                 u8347 3444                                   u8267 1890  
                                 u8187 1768                                   u6908 366E  
                                 u6748 3594                                   u5788 34C0  
                                 u9317 2ACE                                   u9237 423E  
                                 u9157 07E4                                   u9077 05D8  
                                 u8517 0AF6                                   u8437 3C4E  
                                 u8357 344E                                   u8277 18BE  
                                 u8197 1782                                   u6791 35CA  
                                 u9407 1A84                                   u9327 2AD8  
                                 u9247 28B4                                   u9167 080C  
                                 u9087 0642                                   u8607 0FA2  
                                 u8527 0B2A                                   u8447 48F8  
                                 u8367 3474                                   u8287 1900  
                                 u9417 1AB8                                   u9337 4D3A  
                                 u9257 2930                                   u9177 085C  
                                 u9097 066A                                   u8617 0FD6  
                                 u8537 0B54                                   u8457 492C  
                                 u8377 4D86                                   u8297 4A72  
                                 u9507 474A                                   u9427 1AEA  
                                 u9347 46BA                                   u9267 2984  
                                 u9187 0866                                   u8707 202C  
                                 u8627 1000                                   u8547 0DCA  
                                 u8467 08E2                                   u8387 2DEA  
                                 u9517 350C                                   u9437 1B36  
                                 u9357 193A                                   u9277 29EE  
                                 u9197 088A                                   u8717 2070  
                                 u8637 105E                                   u8557 0DFE  
                                 u8477 09E2                                   u8397 2E9E  
                                 u9527 3624                                   u9447 1B82  
                                 u9367 1986                                   u9287 2A42  
                                 u8807 225A                                   u8727 2092  
                                 u8647 1092                                   u8567 0E28  
                                 u8487 0A1E                                   u9537 362E  
                                 u9457 1BB6                                   u9377 19D2  
                                 u9297 2A8A                                   u8817 2274  
                                 u8737 20C0                                   u8657 10BC  
                                 u8577 0EE6                                   u8497 0A74  
                                 u7890 3930                                   u9547 4546  
                                 u9467 1BE8                                   u9387 1A06  
                                 u8907 019C                                   u8827 3C6C  
                                 u8747 2128                                   u8667 1112  
                                 u8587 0F1A                                   u9557 4550  
                                 u9477 1C34                                   u9397 1A38  
                                 u8917 01BA                                   u8837 3CB0  
                                 u8757 217C                                   u8677 1146  
                                 u8597 0F44                                   u9567 457C  
                                 u9487 1C68                                   u8927 01EA  
                                 u8847 3CD2                                   u8767 219C  
                                 u8687 3A74                                   u9577 4586  
                                 u9497 1C9A                                   u8937 0250  
                                 u8857 002C                                   u8777 21CA  
                                 u8697 3AB8                                   u8947 026E  
                                 u8867 0070                                   u8787 220E  
                                 u8957 029E                                   u8877 0092  
                                 u8797 222C                                   u8967 031C  
                                 u8887 0102                                   u8977 0344  
                                 u8897 0136                                   u8987 03A0  
                                 u8997 03C8                                   _RSEN 007E29  
                          _stopSignals 4E96                                   _Test 3A66  
                                 _back 0059                                   _main 3D34  
                                 _down 0061                                   _keys FAEF  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4E34                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0071                        __end_ofi2_putch 4F30  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2AEE  
                          i2_lcdNibble 4762                        __end_of_Loading 192C  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3C5E                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3EB2                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB0A  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 40BA  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB0A                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB22  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_68 FC92  
                                STR_92 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC81  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3F6E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 43CC  
                      __end_of___lwmod 45F0                                  i2l257 28A2  
                                i2l606 2B7C                                  i2l910 37AA  
                                i2l912 37CA                                  i2l906 375E  
                      ___awdiv@counter 008A                                  i2l988 4ED6  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 192C                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4F24                        __end_of_handler 3806  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4D4A  
                      __end_of_initLCD 4936                         __CFG_EBTRB$OFF 000000  
                                _debug 005F                             i2isdigit@c 0003  
                                _getIR 4442                        __end_of_loadRTC 4146  
                      __end_of_readMAG 48F0                        __end_of_dpowers FB0A  
                                _first 006D                                  _enter 0063  
                      __end_of_isdigit 4D74                                  _input 007D  
                                _putch 4F04                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4DEA  
                     __end_ofi2_getRTC 4526                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 201E  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4AB8                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 480A                           __end_of_Test 3B7A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3DF4  
                         __end_of_keys FB00                           __end_of_sort 4E56  
                           i2printf@ap 0020                             i2printf@cp 001E  
                        PusherTest@res 00AD                       PusherTest@i_1711 00B3  
                   __size_ofi2_isdigit 001E                            _BlockerTest 34FE  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C2                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB37  
                               STR_104 FBE8                                 STR_120 FB5B  
                               STR_112 FB49                                 STR_121 FB49  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FE5A  
                               STR_122 FB7F                                 _ADRESH 000FC4  
                               STR_115 FE16                                 STR_107 FE96  
                               STR_123 FB6D                                 STR_116 FE5A  
                               STR_124 FB7F                                 STR_108 FE78  
                               _EEADRH 000FAA                                 STR_117 FE16  
                               STR_125 FB7F                                 STR_109 FE69  
                               STR_126 FFB6                                 STR_118 FC1B  
                               _ADRESL 000FC3                                 STR_119 FC4E  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4AE8  
            i2_change_state_to_menu_22 4AB8                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1353 1E8A                                 i2l1800 4800  
                               i2l1810 496E                                 i2l6111 1DA8  
                               i2l6121 1E02                                 i2l6051 44FC  
                               i2l6203 1FFA                                 i2l6123 1E14  
                               i2l6107 1D9A                                 i2l6211 4A98  
                               i2l6117 1DF2                                 i2l6109 1DA4  
                               i2l6133 1E54                                 i2l6205 2002  
                               i2l6047 44EC                                 i2l6151 1ED4  
                               i2l6127 1E3E                                 i2l6119 1DFC  
                               i2l6057 4516                                 i2l6145 1EB8  
                               i2l6129 1E50                                 i2l6081 1CD8  
                               i2l6209 4A90                                 i2l6163 1F06  
                               i2l6091 1D10                                 i2l6075 1CBA  
                               i2l6181 1F62                                 i2l6173 1F44  
                               i2l6149 1ED0                                 i2l6085 1CDE  
                               i2l6175 1F4C                                 i2l6079 1CCA  
                               i2l5801 47F6                                 i2l6193 1F94  
                               i2l6169 1F20                                 i2l6601 2BC8  
                               i2l5811 494C                                 i2l6187 1F78  
                               i2l6099 1D72                                 i2l6611 2C36  
                               i2l6603 2BDE                                 i2l5813 4950  
                               i2l6189 1F80                                 i2l6197 1FA6  
                               i2l6381 3A0A                                 i2l6701 319A  
                               i2l6613 2C4C                                 i2l6605 2BF4  
                               i2l6621 2C8E                                 i2l6199 1FAC  
                               i2l6703 319E                                 i2l6615 2C62  
                               i2l6607 2C0A                                 i2l6623 2CE8  
                               i2l5817 4964                                 i2l5809 4944  
                               i2l6393 3A4E                                 i2l6385 3A1A  
                               i2l6721 31D4                                 i2l6713 31BC  
                               i2l6617 2C78                                 i2l6609 2C20  
                               i2l8401 2646                                 i2l5755 4E0A  
                               i2l6803 3300                                 i2l6723 31DA  
                               i2l6715 31C2                                 i2l6717 31C8  
                               i2l6709 31A8                                 i2l8501 27B8  
                               i2l8421 267E                                 i2l8413 2662  
                               i2l8405 2654                                 i2l5791 47D6  
                               i2l6719 31CE                                 i2l6727 31E0  
                               i2l5793 47DA                                 i2l6753 324A  
                               i2l6809 330A                                 i2l8521 2806  
                               i2l8513 27EA                                 i2l8505 27C6  
                               i2l8441 26C6                                 i2l8433 26AA  
                               i2l8425 268E                                 i2l8417 2670  
                               i2l5779 4E8E                                 i2l6763 3270  
                               i2l6747 323C                                 i2l6739 3224  
                               i2l6691 3170                                 i2l6595 2B86  
                               i2l5789 47CE                                 i2l6781 32AA  
                               i2l6773 3292                                 i2l6757 3266  
                               i2l6597 2B9C                                 i2l6589 2B1A  
                               i2l8525 2814                                 i2l8517 27F8  
                               i2l8509 27D4                                 i2l8461 2714  
                               i2l8453 26F8                                 i2l8445 26D4  
                               i2l8437 26B8                                 i2l8429 269C  
                               i2l6791 32CA                                 i2l6767 3284  
                               i2l6599 2BB2                                 i2l9191 2894  
                               i2l8535 2838                                 i2l8721 2F58  
                               i2l6769 3288                                 i2l8529 282A  
                               i2l8481 276A                                 i2l8473 2746  
                               i2l8465 272A                                 i2l8457 2706  
                               i2l8449 26EA                                 i2l8393 262A  
                               i2l6795 32DC                                 i2l6787 32B8  
                               i2l9195 31F8                                 i2l6699 318A  
                               i2l9187 2856                                 i2l8387 2616  
                               i2l8811 3700                                 i2l8717 2F48  
                               i2l9197 3214                                 i2l9189 2878  
                               i2l8493 2794                                 i2l8485 2778  
                               i2l8477 2754                                 i2l8469 2738  
                               i2l8397 2638                                 i2l8389 261C  
                               i2l8743 30AE                                 i2l8727 2FB2  
                               i2l6799 32EE                                 i2l8831 3732  
                               i2l8745 30B4                                 i2l8497 27AA  
                               i2l8489 2786                                 i2l8809 36FC  
                               i2l8817 3716                                 i2l8739 307A  
                               i2l8853 377C                                 i2l8855 377E  
                               i2l8877 37C8                _f_most_recent_sort_time 006B  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4D9C  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 4E34                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2F3C  
                               ___wmul 4A1E                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 4A54  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 4146                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4E78  
                               _initUI 4C68                                 _readIR 4858  
                               _logRun 3806                                 getIR@i 0087  
                               clear_0 4830                                 clear_1 483C  
                               clear_2 4848                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 46AC  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 0049  
              __size_of_initGlobalVars 0080                           ?_retrieveLog 0007  
                               _strcpy 49E8                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 4DC4  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4D9C                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 480A  
                     __end_of_printRTC 25E6                           __mediumconst FAEE  
                    __end_ofi2___lwmod 4978                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                  __end_of_algorithmTest 3D34  
                    __end_ofi2_lcdInst 4F3C                             _PusherTest 28A6  
                    __end_ofi2_isdigit 4E96                             __accesstop 0080  
              __end_of__initialization 484E                          ?_inputHandler 002A  
                _most_recent_sort_time 0133                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4EC8                           Loading@byte1 00B7  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4F7A  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4F50                    BlockerTest@cam_flag 00AE  
                        __end_of_getIR 44B4                            i2printRTC@i 0041  
                        _initSortTimer 3F6E            __end_of_updateServoPosition 4442  
                        __end_of_putch 4F14                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 34FE  
                           __end_of_UI 1170                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 4D1E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4CF2                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005B  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3B7A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                              UI@F3228 0135                      __end_of_SpeedTest 4250  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 42D4                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2332 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 4F24                              ?_initTime 0080  
                      _f_loadingNewCan 00EA                        i2printRTC@month 003D  
                __size_of_Distribution 0218            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 458E                                _Loading 15A8  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3DF4  
                              ___awmod 4018                             _initServos 4708  
                              ___lldiv 3EB2                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4354  
                              ___lwmod 458E                        __size_of_getRTC 0086  
                      printSortTimer@i 0047                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 480A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0140  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 42D4                                _lcdInst 4F14  
                              _handler 0008                                __ptext0 3D34  
                              __ptext1 4E96                                __ptext2 4E34  
                              __ptext3 15A8                                __ptext4 3F6E  
                              __ptext5 42D4                                __ptext6 4A54  
                              __ptext7 4442                                __ptext8 4858  
                              __ptext9 3338                        __size_of_printf 0438  
                              _readADC 4D1E                        __size_of_strcpy 0036  
                              _initLCD 48F0                                _cur_can 00E4  
                              _loadRTC 40BA                                _readMAG 48A4  
                              _dpowers FB00                     actuatorTest@i_1660 00AF  
                   actuatorTest@i_1652 00AD                     actuatorTest@i_1662 00B0  
                   actuatorTest@i_1671 00B6                     actuatorTest@i_1663 00B1  
                   actuatorTest@i_1672 00B7                     actuatorTest@i_1681 00BC  
                   actuatorTest@i_1665 00B2                     actuatorTest@i_1682 00BD  
                   actuatorTest@i_1674 00B8                     actuatorTest@i_1666 00B3  
                   actuatorTest@i_1691 00C2                     actuatorTest@i_1675 00B9  
                   actuatorTest@i_1659 00AE                     actuatorTest@i_1692 00C3  
                   actuatorTest@i_1684 00BE                     actuatorTest@i_1668 00B4  
                   actuatorTest@i_1685 00BF                     actuatorTest@i_1669 00B5  
                   actuatorTest@i_1678 00BA                     actuatorTest@i_1679 00BB  
                   actuatorTest@i_1688 00C0                     actuatorTest@i_1689 00C1  
                              _isdigit 4D4A                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2D24  
                       __pintcode_body 3682                   end_of_initialization 484E  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3682  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 4354                             _sensorTest 201E  
                  __size_of_PusherTest 0248                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 3338                           ??_BothServos 00AB  
                __end_of_machineConfig 46AC                             _updateMenu 25E6  
                    i2_I2C_Master_Read 4DEA                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 4EF2                      i2_I2C_Master_Stop 4F68  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 47B8                              i2___lwmod 4936  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2D24  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4F30  
                        Loading@i_1103 00B8                          Loading@i_1104 00BA  
                        Loading@i_1106 00BC                          Loading@i_1107 00BE  
                        Loading@i_1108 00B5                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 001A  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4E78  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1CB0  
                          PusherTest@i 00B1                    __end_of_EEPROM_read 4EC8  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 4A54                         __end_of_getMAG 4A86  
                       __end_of_getRTC 41CC                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4C96                         __end_of_readIR 48A4  
                       __end_of_logRun 3946                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 4A1E              __end_ofi2_I2C_Master_Read 4E10  
            __end_ofi2_I2C_Master_Wait 4F04                           i2printf@prec 001D  
                  start_initialization 480A              __end_ofi2_I2C_Master_Stop 4F70  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1338 00B0  
                i2I2C_Master_Read@temp 0003                   BlockerTest@cond_flag 00B0  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 41CC                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 4250  
                          ?_sensorTest 0001                            __pdataBANK1 0135  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1119 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0045       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2452 0043  
                 __size_of_BlockerTest 0184                            __pbssCOMRAM 0059  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 0216  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1976 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                     PusherTest@res_1707 00AF  
                      _count_pop_w_tab 005D                            _EEPROM_read 4EB0  
                   __end_of_PortTestA5 4708                       _I2C_Master_Start 4F60  
                            _f_lastCan 00E8                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4F3C  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FAEE  
                            _lcdNibble 4526                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 2AEE                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 006F  
                            _cur_state 00E6                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0072                          _algorithmTest 3C5E  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 01C6  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 4F78             __end_ofi2_I2C_Master_Write 4F50  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 3152                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u422_40 4E08  
                             _PIR2bits 000FA1                               i2u528_40 2B7C  
                             i2u481_40 1E36                               i2u481_47 1E2C  
                             i2u477_40 1DD6                               i2u477_47 1DCC  
                             i2u960_47 4784                               i2u961_47 47A6  
                             i2u962_47 47B0                               i2u958_47 3190  
                             i2u959_47 477A                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 4DC4  
                        lcdNibble@data 0081                               i2_getRTC 44B4  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00C0  
                             i2_printf 1CB0                               i2_strcpy 4A86  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 481E                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4EDE                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0384                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4018  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4B48             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 49B0             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4978                _change_state_to_menu_23 4B18  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4C38  
              _change_state_to_logs_12 4C08                _change_state_to_logs_22 4BD8  
              _change_state_to_logs_23 4CC4                _change_state_to_logs_33 4BA8  
              _change_state_to_logs_34 4B78                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 37FE  
                           _EEPROMTest 4F78                        _I2C_Master_Init 45F0  
                     __size_of_readADC 002C                        _I2C_Master_Read 4C96  
                     __size_of_initLCD 0046                           _f_ID_receive 0065  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4EDE                        _I2C_Master_Stop 4F58  
                     __size_of_isdigit 002A                               _delay_ms 4D74  
                       _printSortTimer 2F3C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3A66  
                             __ptext10 4D74                               __ptext11 2D24  
                             __ptext20 4CF2                               __ptext12 4650  
                             __ptext21 4E56                               __ptext13 3806  
                             __ptext30 4C96                               __ptext22 48F0  
                             __ptext14 3B7A                               __ptext31 4EDE  
                             __ptext23 08CA                               __ptext15 4EB0  
                             __ptext40 0012                               __ptext32 4978  
                             __ptext24 231C                               __ptext16 4C68  
                             __ptext41 41CC                               __ptext33 49B0  
                             __ptext25 49E8                               __ptext17 40BA  
                             __ptext50 34FE                               __ptext42 28A6  
                             __ptext34 4018                               __ptext26 4146  
                             __ptext18 45F0                               __ptext51 1170  
                             __ptext43 4D1E                               __ptext35 3DF4  
                             __ptext27 4F3C                               __ptext19 3EB2  
                             __ptext60 25E6                               __ptext52 4F04  
                             __ptext44 4250                               __ptext36 3A66  
                             __ptext28 4F58                               __ptext61 4D9C  
                             __ptext53 4D4A                               __ptext45 46AC  
                             __ptext37 201E                               __ptext29 4F60  
                             __ptext70 4BA8                               __ptext62 2AEE  
                             __ptext54 4A1E                               __ptext46 4F78  
                             __ptext38 48A4                               __ptext71 4CC4  
                             __ptext63 4A86                               __ptext55 458E  
                             __ptext47 192C                               __ptext39 3C5E  
                             __ptext80 4F24                               __ptext72 4BD8  
                             __ptext64 3152                               __ptext56 4354  
                             __ptext48 4708                               __ptext81 4E78  
                             __ptext73 4C08                               __ptext65 4AB8  
                             __ptext57 4F14                               __ptext49 43CC  
                             __ptext90 4F70                               __ptext82 4DC4  
                             __ptext74 4C38                               __ptext66 4AE8  
                             __ptext58 4526                               __ptext91 4DEA  
                             __ptext83 4936                               __ptext75 4E10  
                             __ptext67 4B18                               __ptext92 4EF2  
                             __ptext84 47B8                               __ptext76 3946  
                             __ptext68 4B48                               __ptext85 4F30  
                             __ptext77 4EC8                               __ptext69 4B78  
                             __ptext86 4762                               __ptext78 2F3C  
                             __ptext87 44B4                               __ptext79 1CB0  
                             __ptext88 4F46                               __ptext89 4F68  
                             _dispLogs 4E10                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1976 0002                     __end_of_initServos 4762  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 4E56                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 43CC  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 231C                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 0067                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 4B18  
    __end_ofi2_change_state_to_menu_22 4AE8                               loadRTC@i 0096  
               __end_of_printSortTimer 3152                              putch@data 0082  
             __end_of_I2C_Master_Start 4F68                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 4F46                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00E0  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 231C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 4EB0  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 28A6                __end_of_I2C_Master_Init 4650  
              __end_of_I2C_Master_Read 4CC4                __end_of_I2C_Master_Wait 4EF2  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 4F60  
                          lcdInst@data 0082                          printRTC@F3219 0139  
                         retrieveLog@i 000E                            _retrieveLog 3946  
                  __end_ofi2_lcdNibble 47B8                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012F  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 4650                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
