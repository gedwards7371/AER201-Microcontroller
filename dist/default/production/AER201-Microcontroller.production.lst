

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 16:23:30 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F4620 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002C0A                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _THIR
   137  002C0A  00FF               	dw	255
   138                           
   139                           	psect	idataBANK0
   140  002C00                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _THMAG
   144  002C00  00FF               	dw	255
   145                           
   146                           ;initializer for _f_ID_receive
   147  002C02  0001               	dw	1
   148                           
   149                           ;initializer for _first
   150  002C04  0001               	dw	1
   151                           
   152                           	psect	idataBANK1
   153  002C06                     __pidataBANK1:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printRTC@F3193
   157  002C06  4D                 	db	77
   158  002C07  4D                 	db	77
   159  002C08  4D                 	db	77
   160  002C09  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FDB4                     __pmediumconst:
   164                           	opt stack 0
   165  00FDB4  00                 	db	0
   166  00FDB5                     _keys:
   167                           	opt stack 0
   168  00FDB5  31                 	db	49
   169  00FDB6  32                 	db	50
   170  00FDB7  33                 	db	51
   171  00FDB8  41                 	db	65
   172  00FDB9  34                 	db	52
   173  00FDBA  35                 	db	53
   174  00FDBB  36                 	db	54
   175  00FDBC  42                 	db	66
   176  00FDBD  37                 	db	55
   177  00FDBE  38                 	db	56
   178  00FDBF  39                 	db	57
   179  00FDC0  43                 	db	67
   180  00FDC1  2A                 	db	42
   181  00FDC2  30                 	db	48
   182  00FDC3  23                 	db	35
   183  00FDC4  44                 	db	68
   184  00FDC5  00                 	db	0
   185  00FDC6                     __end_of_keys:
   186                           	opt stack 0
   187  00FDC6                     _dpowers:
   188                           	opt stack 0
   189  00FDC6  0001               	dw	1
   190  00FDC8  000A               	dw	10
   191  00FDCA  0064               	dw	100
   192  00FDCC  03E8               	dw	1000
   193  00FDCE  2710               	dw	10000
   194  00FDD0                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _INTCONbits	set	4082
   204  0000                     _LATA	set	3977
   205  0000                     _LATAbits	set	3977
   206  0000                     _LATB	set	3978
   207  0000                     _LATC	set	3979
   208  0000                     _LATCbits	set	3979
   209  0000                     _LATD	set	3980
   210  0000                     _LATDbits	set	3980
   211  0000                     _LATE	set	3981
   212  0000                     _OSCCON	set	4051
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _PORTAbits	set	3968
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTBbits	set	3969
   217  0000                     _SSPADD	set	4040
   218  0000                     _SSPBUF	set	4041
   219  0000                     _SSPCON1	set	4038
   220  0000                     _SSPCON2	set	4037
   221  0000                     _SSPSTAT	set	4039
   222  0000                     _T0CON	set	4053
   223  0000                     _T1CON	set	4045
   224  0000                     _TMR0H	set	4055
   225  0000                     _TMR0L	set	4054
   226  0000                     _TMR1H	set	4047
   227  0000                     _TMR1L	set	4046
   228  0000                     _TMR3H	set	4019
   229  0000                     _TMR3L	set	4018
   230  0000                     _TRISA	set	3986
   231  0000                     _TRISB	set	3987
   232  0000                     _TRISC	set	3988
   233  0000                     _TRISD	set	3989
   234  0000                     _TRISE	set	3990
   235  0000                     _ACKDT	set	32301
   236  0000                     _ACKEN	set	32300
   237  0000                     _ADFM	set	32263
   238  0000                     _ADIE	set	31982
   239  0000                     _ADON	set	32272
   240  0000                     _INT1IE	set	32643
   241  0000                     _INT1IF	set	32640
   242  0000                     _PEIE	set	32662
   243  0000                     _PEN	set	32298
   244  0000                     _RCEN	set	32299
   245  0000                     _RSEN	set	32297
   246  0000                     _SEN	set	32296
   247  0000                     _TMR0IE	set	32661
   248  0000                     _TMR0IF	set	32658
   249  0000                     _TMR0ON	set	32431
   250  0000                     _TMR1IE	set	31976
   251  0000                     _TMR1IF	set	31984
   252  0000                     _TMR1ON	set	32360
   253  0000                     _TMR2IE	set	31977
   254  0000                     _TMR3IE	set	32001
   255  0000                     _TMR3IF	set	32009
   256  0000                     _TMR3ON	set	32136
   257  0000                     _TRISC3	set	31907
   258  0000                     _TRISC4	set	31908
   259  0000                     _VCFG0	set	32268
   260  0000                     _VCFG1	set	32269
   261  0000                     _nRBPU	set	32655
   262  00FDD0                     STR_48:
   263  00FDD0  25                 	db	37
   264  00FDD1  30                 	db	48	;'0'
   265  00FDD2  32                 	db	50	;'2'
   266  00FDD3  64                 	db	100	;'d'
   267  00FDD4  25                 	db	37
   268  00FDD5  73                 	db	115	;'s'
   269  00FDD6  20                 	db	32
   270  00FDD7  7C                 	db	124
   271  00FDD8  20                 	db	32
   272  00FDD9  25                 	db	37
   273  00FDDA  30                 	db	48	;'0'
   274  00FDDB  32                 	db	50	;'2'
   275  00FDDC  64                 	db	100	;'d'
   276  00FDDD  3A                 	db	58	;':'
   277  00FDDE  25                 	db	37
   278  00FDDF  30                 	db	48	;'0'
   279  00FDE0  32                 	db	50	;'2'
   280  00FDE1  64                 	db	100	;'d'
   281  00FDE2  3A                 	db	58	;':'
   282  00FDE3  25                 	db	37
   283  00FDE4  30                 	db	48	;'0'
   284  00FDE5  32                 	db	50	;'2'
   285  00FDE6  64                 	db	100	;'d'
   286  00FDE7  00                 	db	0
   287  00FDE8                     STR_2:
   288  00FDE8  54                 	db	84	;'T'
   289  00FDE9  69                 	db	105	;'i'
   290  00FDEA  6D                 	db	109	;'m'
   291  00FDEB  65                 	db	101	;'e'
   292  00FDEC  3A                 	db	58	;':'
   293  00FDED  20                 	db	32
   294  00FDEE  25                 	db	37
   295  00FDEF  30                 	db	48	;'0'
   296  00FDF0  32                 	db	50	;'2'
   297  00FDF1  64                 	db	100	;'d'
   298  00FDF2  3A                 	db	58	;':'
   299  00FDF3  25                 	db	37
   300  00FDF4  30                 	db	48	;'0'
   301  00FDF5  32                 	db	50	;'2'
   302  00FDF6  64                 	db	100	;'d'
   303  00FDF7  3A                 	db	58	;':'
   304  00FDF8  25                 	db	37
   305  00FDF9  30                 	db	48	;'0'
   306  00FDFA  32                 	db	50	;'2'
   307  00FDFB  64                 	db	100	;'d'
   308  00FDFC  00                 	db	0
   309  00FDFD                     STR_3:
   310  00FDFD  2D                 	db	45
   311  00FDFE  2D                 	db	45
   312  00FDFF  20                 	db	32
   313  00FE00  4C                 	db	76	;'L'
   314  00FE01  6F                 	db	111	;'o'
   315  00FE02  67                 	db	103	;'g'
   316  00FE03  20                 	db	32
   317  00FE04  25                 	db	37
   318  00FE05  32                 	db	50	;'2'
   319  00FE06  64                 	db	100	;'d'
   320  00FE07  20                 	db	32
   321  00FE08  68                 	db	104	;'h'
   322  00FE09  65                 	db	101	;'e'
   323  00FE0A  72                 	db	114	;'r'
   324  00FE0B  65                 	db	101	;'e'
   325  00FE0C  2D                 	db	45
   326  00FE0D  2D                 	db	45
   327  00FE0E  00                 	db	0
   328  00FE0F                     STR_8:
   329  00FE0F  25                 	db	37
   330  00FE10  64                 	db	100	;'d'
   331  00FE11  20                 	db	32
   332  00FE12  6D                 	db	109	;'m'
   333  00FE13  69                 	db	105	;'i'
   334  00FE14  6E                 	db	110	;'n'
   335  00FE15  28                 	db	40
   336  00FE16  73                 	db	115	;'s'
   337  00FE17  29                 	db	41
   338  00FE18  20                 	db	32
   339  00FE19  25                 	db	37
   340  00FE1A  64                 	db	100	;'d'
   341  00FE1B  20                 	db	32
   342  00FE1C  73                 	db	115	;'s'
   343  00FE1D  65                 	db	101	;'e'
   344  00FE1E  63                 	db	99	;'c'
   345  00FE1F  73                 	db	115	;'s'
   346  00FE20  00                 	db	0
   347  00FE21                     STR_26:
   348  00FE21  4C                 	db	76	;'L'
   349  00FE22  4F                 	db	79	;'O'
   350  00FE23  47                 	db	71	;'G'
   351  00FE24  20                 	db	32
   352  00FE25  31                 	db	49	;'1'
   353  00FE26  20                 	db	32
   354  00FE27  20                 	db	32
   355  00FE28  20                 	db	32
   356  00FE29  20                 	db	32
   357  00FE2A  20                 	db	32
   358  00FE2B  20                 	db	32
   359  00FE2C  20                 	db	32
   360  00FE2D  20                 	db	32
   361  00FE2E  20                 	db	32
   362  00FE2F  20                 	db	32
   363  00FE30  20                 	db	32
   364  00FE31  00                 	db	0
   365  00FE32                     STR_25:
   366  00FE32  4C                 	db	76	;'L'
   367  00FE33  4F                 	db	79	;'O'
   368  00FE34  47                 	db	71	;'G'
   369  00FE35  20                 	db	32
   370  00FE36  32                 	db	50	;'2'
   371  00FE37  20                 	db	32
   372  00FE38  20                 	db	32
   373  00FE39  20                 	db	32
   374  00FE3A  20                 	db	32
   375  00FE3B  20                 	db	32
   376  00FE3C  20                 	db	32
   377  00FE3D  20                 	db	32
   378  00FE3E  20                 	db	32
   379  00FE3F  20                 	db	32
   380  00FE40  20                 	db	32
   381  00FE41  20                 	db	32
   382  00FE42  00                 	db	0
   383  00FE43                     STR_29:
   384  00FE43  4C                 	db	76	;'L'
   385  00FE44  4F                 	db	79	;'O'
   386  00FE45  47                 	db	71	;'G'
   387  00FE46  20                 	db	32
   388  00FE47  33                 	db	51	;'3'
   389  00FE48  20                 	db	32
   390  00FE49  20                 	db	32
   391  00FE4A  20                 	db	32
   392  00FE4B  20                 	db	32
   393  00FE4C  20                 	db	32
   394  00FE4D  20                 	db	32
   395  00FE4E  20                 	db	32
   396  00FE4F  20                 	db	32
   397  00FE50  20                 	db	32
   398  00FE51  20                 	db	32
   399  00FE52  20                 	db	32
   400  00FE53  00                 	db	0
   401  00FE54                     STR_33:
   402  00FE54  4C                 	db	76	;'L'
   403  00FE55  4F                 	db	79	;'O'
   404  00FE56  47                 	db	71	;'G'
   405  00FE57  20                 	db	32
   406  00FE58  34                 	db	52	;'4'
   407  00FE59  20                 	db	32
   408  00FE5A  20                 	db	32
   409  00FE5B  20                 	db	32
   410  00FE5C  20                 	db	32
   411  00FE5D  20                 	db	32
   412  00FE5E  20                 	db	32
   413  00FE5F  20                 	db	32
   414  00FE60  20                 	db	32
   415  00FE61  20                 	db	32
   416  00FE62  20                 	db	32
   417  00FE63  20                 	db	32
   418  00FE64  00                 	db	0
   419  00FE65                     STR_21:
   420  00FE65  33                 	db	51	;'3'
   421  00FE66  2E                 	db	46
   422  00FE67  20                 	db	32
   423  00FE68  4C                 	db	76	;'L'
   424  00FE69  4F                 	db	79	;'O'
   425  00FE6A  47                 	db	71	;'G'
   426  00FE6B  53                 	db	83	;'S'
   427  00FE6C  20                 	db	32
   428  00FE6D  20                 	db	32
   429  00FE6E  20                 	db	32
   430  00FE6F  20                 	db	32
   431  00FE70  20                 	db	32
   432  00FE71  20                 	db	32
   433  00FE72  20                 	db	32
   434  00FE73  20                 	db	32
   435  00FE74  20                 	db	32
   436  00FE75  00                 	db	0
   437  00FE76                     STR_17:
   438  00FE76  32                 	db	50	;'2'
   439  00FE77  2E                 	db	46
   440  00FE78  20                 	db	32
   441  00FE79  53                 	db	83	;'S'
   442  00FE7A  4F                 	db	79	;'O'
   443  00FE7B  52                 	db	82	;'R'
   444  00FE7C  54                 	db	84	;'T'
   445  00FE7D  20                 	db	32
   446  00FE7E  20                 	db	32
   447  00FE7F  20                 	db	32
   448  00FE80  20                 	db	32
   449  00FE81  20                 	db	32
   450  00FE82  20                 	db	32
   451  00FE83  20                 	db	32
   452  00FE84  20                 	db	32
   453  00FE85  20                 	db	32
   454  00FE86  00                 	db	0
   455  00FE87                     STR_18:
   456  00FE87  31                 	db	49	;'1'
   457  00FE88  2E                 	db	46
   458  00FE89  20                 	db	32
   459  00FE8A  44                 	db	68	;'D'
   460  00FE8B  41                 	db	65	;'A'
   461  00FE8C  54                 	db	84	;'T'
   462  00FE8D  45                 	db	69	;'E'
   463  00FE8E  2F                 	db	47
   464  00FE8F  54                 	db	84	;'T'
   465  00FE90  49                 	db	73	;'I'
   466  00FE91  4D                 	db	77	;'M'
   467  00FE92  45                 	db	69	;'E'
   468  00FE93  20                 	db	32
   469  00FE94  20                 	db	32
   470  00FE95  20                 	db	32
   471  00FE96  20                 	db	32
   472  00FE97  00                 	db	0
   473  00FE98                     STR_9:
   474  00FE98  20                 	db	32
   475  00FE99  2D                 	db	45
   476  00FE9A  2D                 	db	45
   477  00FE9B  20                 	db	32
   478  00FE9C  50                 	db	80	;'P'
   479  00FE9D  6F                 	db	111	;'o'
   480  00FE9E  70                 	db	112	;'p'
   481  00FE9F  20                 	db	32
   482  00FEA0  20                 	db	32
   483  00FEA1  63                 	db	99	;'c'
   484  00FEA2  61                 	db	97	;'a'
   485  00FEA3  6E                 	db	110	;'n'
   486  00FEA4  20                 	db	32
   487  00FEA5  2D                 	db	45
   488  00FEA6  2D                 	db	45
   489  00FEA7  20                 	db	32
   490  00FEA8  00                 	db	0
   491  00FEA9                     STR_11:
   492  00FEA9  20                 	db	32
   493  00FEAA  2D                 	db	45
   494  00FEAB  2D                 	db	45
   495  00FEAC  20                 	db	32
   496  00FEAD  53                 	db	83	;'S'
   497  00FEAE  6F                 	db	111	;'o'
   498  00FEAF  75                 	db	117	;'u'
   499  00FEB0  70                 	db	112	;'p'
   500  00FEB1  20                 	db	32
   501  00FEB2  63                 	db	99	;'c'
   502  00FEB3  61                 	db	97	;'a'
   503  00FEB4  6E                 	db	110	;'n'
   504  00FEB5  20                 	db	32
   505  00FEB6  2D                 	db	45
   506  00FEB7  2D                 	db	45
   507  00FEB8  20                 	db	32
   508  00FEB9  00                 	db	0
   509  00FEBA                     STR_1:
   510  00FEBA  21                 	db	33
   511  00FEBB  53                 	db	83	;'S'
   512  00FEBC  4F                 	db	79	;'O'
   513  00FEBD  52                 	db	82	;'R'
   514  00FEBE  54                 	db	84	;'T'
   515  00FEBF  20                 	db	32
   516  00FEC0  43                 	db	67	;'C'
   517  00FEC1  4F                 	db	79	;'O'
   518  00FEC2  4E                 	db	78	;'N'
   519  00FEC3  43                 	db	67	;'C'
   520  00FEC4  4C                 	db	76	;'L'
   521  00FEC5  55                 	db	85	;'U'
   522  00FEC6  44                 	db	68	;'D'
   523  00FEC7  45                 	db	69	;'E'
   524  00FEC8  44                 	db	68	;'D'
   525  00FEC9  21                 	db	33
   526  00FECA  00                 	db	0
   527  00FECB                     STR_13:
   528  00FECB  2D                 	db	45
   529  00FECC  2D                 	db	45
   530  00FECD  20                 	db	32
   531  00FECE  54                 	db	84	;'T'
   532  00FECF  6F                 	db	111	;'o'
   533  00FED0  74                 	db	116	;'t'
   534  00FED1  61                 	db	97	;'a'
   535  00FED2  6C                 	db	108	;'l'
   536  00FED3  20                 	db	32
   537  00FED4  63                 	db	99	;'c'
   538  00FED5  61                 	db	97	;'a'
   539  00FED6  6E                 	db	110	;'n'
   540  00FED7  73                 	db	115	;'s'
   541  00FED8  20                 	db	32
   542  00FED9  2D                 	db	45
   543  00FEDA  2D                 	db	45
   544  00FEDB  00                 	db	0
   545  00FEDC                     STR_10:
   546  00FEDC  4E                 	db	78	;'N'
   547  00FEDD  6F                 	db	111	;'o'
   548  00FEDE  20                 	db	32
   549  00FEDF  74                 	db	116	;'t'
   550  00FEE0  61                 	db	97	;'a'
   551  00FEE1  62                 	db	98	;'b'
   552  00FEE2  3A                 	db	58	;':'
   553  00FEE3  20                 	db	32
   554  00FEE4  39                 	db	57	;'9'
   555  00FEE5  7C                 	db	124
   556  00FEE6  54                 	db	84	;'T'
   557  00FEE7  61                 	db	97	;'a'
   558  00FEE8  62                 	db	98	;'b'
   559  00FEE9  3A                 	db	58	;':'
   560  00FEEA  20                 	db	32
   561  00FEEB  31                 	db	49	;'1'
   562  00FEEC  00                 	db	0
   563  00FEED                     STR_12:
   564  00FEED  4E                 	db	78	;'N'
   565  00FEEE  6F                 	db	111	;'o'
   566  00FEEF  20                 	db	32
   567  00FEF0  6C                 	db	108	;'l'
   568  00FEF1  62                 	db	98	;'b'
   569  00FEF2  6C                 	db	108	;'l'
   570  00FEF3  3A                 	db	58	;':'
   571  00FEF4  20                 	db	32
   572  00FEF5  31                 	db	49	;'1'
   573  00FEF6  7C                 	db	124
   574  00FEF7  6C                 	db	108	;'l'
   575  00FEF8  62                 	db	98	;'b'
   576  00FEF9  6C                 	db	108	;'l'
   577  00FEFA  3A                 	db	58	;':'
   578  00FEFB  20                 	db	32
   579  00FEFC  31                 	db	49	;'1'
   580  00FEFD  00                 	db	0
   581  00FEFE                     STR_6:
   582  00FEFE  30                 	db	48	;'0'
   583  00FEFF  36                 	db	54	;'6'
   584  00FF00  46                 	db	70	;'F'
   585  00FF01  65                 	db	101	;'e'
   586  00FF02  62                 	db	98	;'b'
   587  00FF03  20                 	db	32
   588  00FF04  7C                 	db	124
   589  00FF05  20                 	db	32
   590  00FF06  30                 	db	48	;'0'
   591  00FF07  31                 	db	49	;'1'
   592  00FF08  3A                 	db	58	;':'
   593  00FF09  30                 	db	48	;'0'
   594  00FF0A  38                 	db	56	;'8'
   595  00FF0B  3A                 	db	58	;':'
   596  00FF0C  35                 	db	53	;'5'
   597  00FF0D  36                 	db	54	;'6'
   598  00FF0E  00                 	db	0
   599  00FF0F                     STR_24:
   600  00FF0F  4C                 	db	76	;'L'
   601  00FF10  4F                 	db	79	;'O'
   602  00FF11  47                 	db	71	;'G'
   603  00FF12  20                 	db	32
   604  00FF13  31                 	db	49	;'1'
   605  00FF14  20                 	db	32
   606  00FF15  20                 	db	32
   607  00FF16  20                 	db	32
   608  00FF17  20                 	db	32
   609  00FF18  20                 	db	32
   610  00FF19  20                 	db	32
   611  00FF1A  20                 	db	32
   612  00FF1B  20                 	db	32
   613  00FF1C  20                 	db	32
   614  00FF1D  20                 	db	32
   615  00FF1E  3C                 	db	60	;'<'
   616  00FF1F  00                 	db	0
   617  00FF20                     STR_27:
   618  00FF20  4C                 	db	76	;'L'
   619  00FF21  4F                 	db	79	;'O'
   620  00FF22  47                 	db	71	;'G'
   621  00FF23  20                 	db	32
   622  00FF24  32                 	db	50	;'2'
   623  00FF25  20                 	db	32
   624  00FF26  20                 	db	32
   625  00FF27  20                 	db	32
   626  00FF28  20                 	db	32
   627  00FF29  20                 	db	32
   628  00FF2A  20                 	db	32
   629  00FF2B  20                 	db	32
   630  00FF2C  20                 	db	32
   631  00FF2D  20                 	db	32
   632  00FF2E  20                 	db	32
   633  00FF2F  3C                 	db	60	;'<'
   634  00FF30  00                 	db	0
   635  00FF31                     STR_31:
   636  00FF31  4C                 	db	76	;'L'
   637  00FF32  4F                 	db	79	;'O'
   638  00FF33  47                 	db	71	;'G'
   639  00FF34  20                 	db	32
   640  00FF35  33                 	db	51	;'3'
   641  00FF36  20                 	db	32
   642  00FF37  20                 	db	32
   643  00FF38  20                 	db	32
   644  00FF39  20                 	db	32
   645  00FF3A  20                 	db	32
   646  00FF3B  20                 	db	32
   647  00FF3C  20                 	db	32
   648  00FF3D  20                 	db	32
   649  00FF3E  20                 	db	32
   650  00FF3F  20                 	db	32
   651  00FF40  3C                 	db	60	;'<'
   652  00FF41  00                 	db	0
   653  00FF42                     STR_35:
   654  00FF42  4C                 	db	76	;'L'
   655  00FF43  4F                 	db	79	;'O'
   656  00FF44  47                 	db	71	;'G'
   657  00FF45  20                 	db	32
   658  00FF46  34                 	db	52	;'4'
   659  00FF47  20                 	db	32
   660  00FF48  20                 	db	32
   661  00FF49  20                 	db	32
   662  00FF4A  20                 	db	32
   663  00FF4B  20                 	db	32
   664  00FF4C  20                 	db	32
   665  00FF4D  20                 	db	32
   666  00FF4E  20                 	db	32
   667  00FF4F  20                 	db	32
   668  00FF50  20                 	db	32
   669  00FF51  3C                 	db	60	;'<'
   670  00FF52  00                 	db	0
   671  00FF53                     STR_23:
   672  00FF53  33                 	db	51	;'3'
   673  00FF54  2E                 	db	46
   674  00FF55  20                 	db	32
   675  00FF56  4C                 	db	76	;'L'
   676  00FF57  4F                 	db	79	;'O'
   677  00FF58  47                 	db	71	;'G'
   678  00FF59  53                 	db	83	;'S'
   679  00FF5A  20                 	db	32
   680  00FF5B  20                 	db	32
   681  00FF5C  20                 	db	32
   682  00FF5D  20                 	db	32
   683  00FF5E  20                 	db	32
   684  00FF5F  20                 	db	32
   685  00FF60  20                 	db	32
   686  00FF61  20                 	db	32
   687  00FF62  3C                 	db	60	;'<'
   688  00FF63  00                 	db	0
   689  00FF64                     STR_19:
   690  00FF64  32                 	db	50	;'2'
   691  00FF65  2E                 	db	46
   692  00FF66  20                 	db	32
   693  00FF67  53                 	db	83	;'S'
   694  00FF68  4F                 	db	79	;'O'
   695  00FF69  52                 	db	82	;'R'
   696  00FF6A  54                 	db	84	;'T'
   697  00FF6B  20                 	db	32
   698  00FF6C  20                 	db	32
   699  00FF6D  20                 	db	32
   700  00FF6E  20                 	db	32
   701  00FF6F  20                 	db	32
   702  00FF70  20                 	db	32
   703  00FF71  20                 	db	32
   704  00FF72  20                 	db	32
   705  00FF73  3C                 	db	60	;'<'
   706  00FF74  00                 	db	0
   707  00FF75                     STR_16:
   708  00FF75  31                 	db	49	;'1'
   709  00FF76  2E                 	db	46
   710  00FF77  20                 	db	32
   711  00FF78  44                 	db	68	;'D'
   712  00FF79  41                 	db	65	;'A'
   713  00FF7A  54                 	db	84	;'T'
   714  00FF7B  45                 	db	69	;'E'
   715  00FF7C  2F                 	db	47
   716  00FF7D  54                 	db	84	;'T'
   717  00FF7E  49                 	db	73	;'I'
   718  00FF7F  4D                 	db	77	;'M'
   719  00FF80  45                 	db	69	;'E'
   720  00FF81  20                 	db	32
   721  00FF82  20                 	db	32
   722  00FF83  20                 	db	32
   723  00FF84  3C                 	db	60	;'<'
   724  00FF85  00                 	db	0
   725  00FF86                     STR_4:
   726  00FF86  50                 	db	80	;'P'
   727  00FF87  61                 	db	97	;'a'
   728  00FF88  75                 	db	117	;'u'
   729  00FF89  73                 	db	115	;'s'
   730  00FF8A  65                 	db	101	;'e'
   731  00FF8B  3A                 	db	58	;':'
   732  00FF8C  3C                 	db	60	;'<'
   733  00FF8D  20                 	db	32
   734  00FF8E  7C                 	db	124
   735  00FF8F  20                 	db	32
   736  00FF90  42                 	db	66	;'B'
   737  00FF91  61                 	db	97	;'a'
   738  00FF92  63                 	db	99	;'c'
   739  00FF93  6B                 	db	107	;'k'
   740  00FF94  3A                 	db	58	;':'
   741  00FF95  3E                 	db	62	;'>'
   742  00FF96  00                 	db	0
   743  00FF97                     STR_15:
   744  00FF97  50                 	db	80	;'P'
   745  00FF98  55                 	db	85	;'U'
   746  00FF99  53                 	db	83	;'S'
   747  00FF9A  48                 	db	72	;'H'
   748  00FF9B  20                 	db	32
   749  00FF9C  54                 	db	84	;'T'
   750  00FF9D  4F                 	db	79	;'O'
   751  00FF9E  20                 	db	32
   752  00FF9F  43                 	db	67	;'C'
   753  00FFA0  4F                 	db	79	;'O'
   754  00FFA1  4E                 	db	78	;'N'
   755  00FFA2  54                 	db	84	;'T'
   756  00FFA3  49                 	db	73	;'I'
   757  00FFA4  4E                 	db	78	;'N'
   758  00FFA5  55                 	db	85	;'U'
   759  00FFA6  45                 	db	69	;'E'
   760  00FFA7  00                 	db	0
   761  00FFA8                     STR_49:
   762  00FFA8  53                 	db	83	;'S'
   763  00FFA9  6F                 	db	111	;'o'
   764  00FFAA  72                 	db	114	;'r'
   765  00FFAB  74                 	db	116	;'t'
   766  00FFAC  69                 	db	105	;'i'
   767  00FFAD  6E                 	db	110	;'n'
   768  00FFAE  67                 	db	103	;'g'
   769  00FFAF  2E                 	db	46
   770  00FFB0  2E                 	db	46
   771  00FFB1  2E                 	db	46
   772  00FFB2  00                 	db	0
   773  00FFB3                     STR_7:
   774  00FFB3  44                 	db	68	;'D'
   775  00FFB4  75                 	db	117	;'u'
   776  00FFB5  72                 	db	114	;'r'
   777  00FFB6  61                 	db	97	;'a'
   778  00FFB7  74                 	db	116	;'t'
   779  00FFB8  69                 	db	105	;'i'
   780  00FFB9  6F                 	db	111	;'o'
   781  00FFBA  6E                 	db	110	;'n'
   782  00FFBB  3A                 	db	58	;':'
   783  00FFBC  00                 	db	0
   784  00FFBD                     STR_51:
   785  00FFBD  28                 	db	40
   786  00FFBE  6E                 	db	110	;'n'
   787  00FFBF  75                 	db	117	;'u'
   788  00FFC0  6C                 	db	108	;'l'
   789  00FFC1  6C                 	db	108	;'l'
   790  00FFC2  29                 	db	41
   791  00FFC3  00                 	db	0
   792  00FFC4                     STR_5:
   793  00FFC4  53                 	db	83	;'S'
   794  00FFC5  74                 	db	116	;'t'
   795  00FFC6  61                 	db	97	;'a'
   796  00FFC7  72                 	db	114	;'r'
   797  00FFC8  74                 	db	116	;'t'
   798  00FFC9  3A                 	db	58	;':'
   799  00FFCA  00                 	db	0
   800  00FFCB                     STR_37:
   801  00FFCB  46                 	db	70	;'F'
   802  00FFCC  65                 	db	101	;'e'
   803  00FFCD  62                 	db	98	;'b'
   804  00FFCE  00                 	db	0
   805  00FFCF                     STR_47:
   806  00FFCF  44                 	db	68	;'D'
   807  00FFD0  65                 	db	101	;'e'
   808  00FFD1  63                 	db	99	;'c'
   809  00FFD2  00                 	db	0
   810  00FFD3                     STR_43:
   811  00FFD3  41                 	db	65	;'A'
   812  00FFD4  75                 	db	117	;'u'
   813  00FFD5  67                 	db	103	;'g'
   814  00FFD6  00                 	db	0
   815  00FFD7                     STR_42:
   816  00FFD7  4A                 	db	74	;'J'
   817  00FFD8  75                 	db	117	;'u'
   818  00FFD9  6C                 	db	108	;'l'
   819  00FFDA  00                 	db	0
   820  00FFDB                     STR_36:
   821  00FFDB  4A                 	db	74	;'J'
   822  00FFDC  61                 	db	97	;'a'
   823  00FFDD  6E                 	db	110	;'n'
   824  00FFDE  00                 	db	0
   825  00FFDF                     STR_41:
   826  00FFDF  4A                 	db	74	;'J'
   827  00FFE0  75                 	db	117	;'u'
   828  00FFE1  6E                 	db	110	;'n'
   829  00FFE2  00                 	db	0
   830  00FFE3                     STR_44:
   831  00FFE3  53                 	db	83	;'S'
   832  00FFE4  65                 	db	101	;'e'
   833  00FFE5  70                 	db	112	;'p'
   834  00FFE6  00                 	db	0
   835  00FFE7                     STR_38:
   836  00FFE7  4D                 	db	77	;'M'
   837  00FFE8  61                 	db	97	;'a'
   838  00FFE9  72                 	db	114	;'r'
   839  00FFEA  00                 	db	0
   840  00FFEB                     STR_39:
   841  00FFEB  41                 	db	65	;'A'
   842  00FFEC  70                 	db	112	;'p'
   843  00FFED  72                 	db	114	;'r'
   844  00FFEE  00                 	db	0
   845  00FFEF                     STR_45:
   846  00FFEF  4F                 	db	79	;'O'
   847  00FFF0  63                 	db	99	;'c'
   848  00FFF1  74                 	db	116	;'t'
   849  00FFF2  00                 	db	0
   850  00FFF3                     STR_46:
   851  00FFF3  4E                 	db	78	;'N'
   852  00FFF4  6F                 	db	111	;'o'
   853  00FFF5  76                 	db	118	;'v'
   854  00FFF6  00                 	db	0
   855  00FFF7                     STR_40:
   856  00FFF7  4D                 	db	77	;'M'
   857  00FFF8  61                 	db	97	;'a'
   858  00FFF9  79                 	db	121	;'y'
   859  00FFFA  00                 	db	0
   860  00FFFB                     STR_14:
   861  00FFFB  31                 	db	49	;'1'
   862  00FFFC  32                 	db	50	;'2'
   863  00FFFD  00                 	db	0
   864  0000                     
   865                           ; #config settings
   866  00FFFE  00                 	db	0	; dummy byte at the end
   867  0000                     
   868                           	psect	cinit
   869  0020BC                     __pcinit:
   870                           	opt stack 0
   871  0020BC                     start_initialization:
   872                           	opt stack 0
   873  0020BC                     __initialization:
   874                           	opt stack 0
   875                           
   876                           ; Initialize objects allocated to BANK1 (4 bytes)
   877                           ; load TBLPTR registers with __pidataBANK1
   878  0020BC  0E06               	movlw	low __pidataBANK1
   879  0020BE  6EF6               	movwf	tblptrl,c
   880  0020C0  0E2C               	movlw	high __pidataBANK1
   881  0020C2  6EF7               	movwf	tblptrh,c
   882  0020C4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   883  0020C6  6EF8               	movwf	tblptru,c
   884  0020C8  EE01  F00E         	lfsr	0,__pdataBANK1
   885  0020CC  EE10 F004          	lfsr	1,4
   886  0020D0                     copy_data0:
   887  0020D0  0009               	tblrd		*+
   888  0020D2  CFF5 FFEE          	movff	tablat,postinc0
   889  0020D6  50E5               	movf	postdec1,w,c
   890  0020D8  50E1               	movf	fsr1l,w,c
   891  0020DA  E1FA               	bnz	copy_data0
   892                           
   893                           ; Initialize objects allocated to BANK0 (6 bytes)
   894                           ; load TBLPTR registers with __pidataBANK0
   895  0020DC  0E00               	movlw	low __pidataBANK0
   896  0020DE  6EF6               	movwf	tblptrl,c
   897  0020E0  0E2C               	movlw	high __pidataBANK0
   898  0020E2  6EF7               	movwf	tblptrh,c
   899  0020E4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   900  0020E6  6EF8               	movwf	tblptru,c
   901  0020E8  EE00  F0FA         	lfsr	0,__pdataBANK0
   902  0020EC  EE10 F006          	lfsr	1,6
   903  0020F0                     copy_data1:
   904  0020F0  0009               	tblrd		*+
   905  0020F2  CFF5 FFEE          	movff	tablat,postinc0
   906  0020F6  50E5               	movf	postdec1,w,c
   907  0020F8  50E1               	movf	fsr1l,w,c
   908  0020FA  E1FA               	bnz	copy_data1
   909                           
   910                           ; Initialize objects allocated to COMRAM (2 bytes)
   911                           ; load TBLPTR registers with __pidataCOMRAM
   912  0020FC  0E0A               	movlw	low __pidataCOMRAM
   913  0020FE  6EF6               	movwf	tblptrl,c
   914  002100  0E2C               	movlw	high __pidataCOMRAM
   915  002102  6EF7               	movwf	tblptrh,c
   916  002104  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   917  002106  6EF8               	movwf	tblptru,c
   918  002108  0009               	tblrd		*+	;fetch initializer
   919  00210A  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   920  00210E  0009               	tblrd		*+	;fetch initializer
   921  002110  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
   922                           
   923                           ; Clear objects allocated to BANK1 (14 bytes)
   924  002114  EE01  F000         	lfsr	0,__pbssBANK1
   925  002118  0E0E               	movlw	14
   926  00211A                     clear_0:
   927  00211A  6AEE               	clrf	postinc0,c
   928  00211C  06E8               	decf	wreg,f,c
   929  00211E  E1FD               	bnz	clear_0
   930                           
   931                           ; Clear objects allocated to BANK0 (38 bytes)
   932  002120  EE00  F0D4         	lfsr	0,__pbssBANK0
   933  002124  0E26               	movlw	38
   934  002126                     clear_1:
   935  002126  6AEE               	clrf	postinc0,c
   936  002128  06E8               	decf	wreg,f,c
   937  00212A  E1FD               	bnz	clear_1
   938                           
   939                           ; Clear objects allocated to COMRAM (31 bytes)
   940  00212C  EE00  F05B         	lfsr	0,__pbssCOMRAM
   941  002130  0E1F               	movlw	31
   942  002132                     clear_2:
   943  002132  6AEE               	clrf	postinc0,c
   944  002134  06E8               	decf	wreg,f,c
   945  002136  E1FD               	bnz	clear_2
   946  002138                     end_of_initialization:
   947                           	opt stack 0
   948  002138                     __end_of__initialization:
   949                           	opt stack 0
   950  002138  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   951  00213A  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   952  00213C  0100               	movlb	0
   953  00213E  EF1A  F010         	goto	_main	;jump to C main() function
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           
   963                           	psect	bssCOMRAM
   964  00005B                     __pbssCOMRAM:
   965                           	opt stack 0
   966  00005B                     _IR_signal:
   967                           	opt stack 0
   968  00005B                     	ds	2
   969  00005D                     _TMR3CF:
   970                           	opt stack 0
   971  00005D                     	ds	2
   972  00005F                     _TMR3counter:
   973                           	opt stack 0
   974  00005F                     	ds	2
   975  000061                     _UIenabled:
   976                           	opt stack 0
   977  000061                     	ds	2
   978  000063                     _back:
   979                           	opt stack 0
   980  000063                     	ds	2
   981  000065                     _count_can_no_lab:
   982                           	opt stack 0
   983  000065                     	ds	2
   984  000067                     _count_can_w_lab:
   985                           	opt stack 0
   986  000067                     	ds	2
   987  000069                     _count_pop_no_tab:
   988                           	opt stack 0
   989  000069                     	ds	2
   990  00006B                     _count_pop_w_tab:
   991                           	opt stack 0
   992  00006B                     	ds	2
   993  00006D                     _down:
   994                           	opt stack 0
   995  00006D                     	ds	2
   996  00006F                     _enter:
   997                           	opt stack 0
   998  00006F                     	ds	2
   999  000071                     _f_can_distributed:
  1000                           	opt stack 0
  1001  000071                     	ds	2
  1002  000073                     _firstboot:
  1003                           	opt stack 0
  1004  000073                     	ds	2
  1005  000075                     _up:
  1006                           	opt stack 0
  1007  000075                     	ds	2
  1008  000077                     _was_low:
  1009                           	opt stack 0
  1010  000077                     	ds	2
  1011  000079                     _input:
  1012                           	opt stack 0
  1013  000079                     	ds	1
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           postdec1	equ	0xFE5
  1021                           fsr1l	equ	0xFE1
  1022                           
  1023                           	psect	dataCOMRAM
  1024  00007A                     __pdataCOMRAM:
  1025                           	opt stack 0
  1026  00007A                     _THIR:
  1027                           	opt stack 0
  1028  00007A                     	ds	2
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	bssBANK0
  1039  0000D4                     __pbssBANK0:
  1040                           	opt stack 0
  1041  0000D4                     _servoTimes:
  1042                           	opt stack 0
  1043  0000D4                     	ds	8
  1044  0000DC                     _time:
  1045                           	opt stack 0
  1046  0000DC                     	ds	7
  1047  0000E3                     _MAG_signal:
  1048                           	opt stack 0
  1049  0000E3                     	ds	2
  1050  0000E5                     _count_total:
  1051                           	opt stack 0
  1052  0000E5                     	ds	2
  1053  0000E7                     _cur_can:
  1054                           	opt stack 0
  1055  0000E7                     	ds	2
  1056  0000E9                     _cur_state:
  1057                           	opt stack 0
  1058  0000E9                     	ds	2
  1059  0000EB                     _f_can_coming_to_ID:
  1060                           	opt stack 0
  1061  0000EB                     	ds	2
  1062  0000ED                     _f_can_coming_to_distribution:
  1063                           	opt stack 0
  1064  0000ED                     	ds	2
  1065  0000EF                     _f_lastCan:
  1066                           	opt stack 0
  1067  0000EF                     	ds	2
  1068  0000F1                     _f_loadingNewCan:
  1069                           	opt stack 0
  1070  0000F1                     	ds	2
  1071  0000F3                     _log:
  1072                           	opt stack 0
  1073  0000F3                     	ds	2
  1074  0000F5                     _logstate:
  1075                           	opt stack 0
  1076  0000F5                     	ds	2
  1077  0000F7                     _total_time:
  1078                           	opt stack 0
  1079  0000F7                     	ds	2
  1080  0000F9                     _machine_state:
  1081                           	opt stack 0
  1082  0000F9                     	ds	1
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092                           	psect	dataBANK0
  1093  0000FA                     __pdataBANK0:
  1094                           	opt stack 0
  1095  0000FA                     _THMAG:
  1096                           	opt stack 0
  1097  0000FA                     	ds	2
  1098  0000FC                     _f_ID_receive:
  1099                           	opt stack 0
  1100  0000FC                     	ds	2
  1101  0000FE                     _first:
  1102                           	opt stack 0
  1103  0000FE                     	ds	2
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1l	equ	0xFE1
  1112                           
  1113                           	psect	bssBANK1
  1114  000100                     __pbssBANK1:
  1115                           	opt stack 0
  1116  000100                     _startTime:
  1117                           	opt stack 0
  1118  000100                     	ds	14
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postdec1	equ	0xFE5
  1126                           fsr1l	equ	0xFE1
  1127                           
  1128                           	psect	dataBANK1
  1129  00010E                     __pdataBANK1:
  1130                           	opt stack 0
  1131  00010E                     printRTC@F3193:
  1132                           	opt stack 0
  1133  00010E                     	ds	4
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postdec1	equ	0xFE5
  1141                           fsr1l	equ	0xFE1
  1142                           
  1143                           	psect	cstackBANK0
  1144  000080                     __pcstackBANK0:
  1145                           	opt stack 0
  1146  000080                     ??_isdigit:
  1147  000080                     ??_readADC:
  1148  000080                     ??_I2C_Master_Wait:
  1149  000080                     ?___wmul:
  1150                           	opt stack 0
  1151  000080                     ?___awmod:
  1152                           	opt stack 0
  1153  000080                     ?___lwdiv:
  1154                           	opt stack 0
  1155  000080                     ?___lldiv:
  1156                           	opt stack 0
  1157  000080                     lcdNibble@temp:
  1158                           	opt stack 0
  1159  000080                     initTime@m:
  1160                           	opt stack 0
  1161  000080                     updateServoPosition@time_us:
  1162                           	opt stack 0
  1163  000080                     ___wmul@multiplier:
  1164                           	opt stack 0
  1165  000080                     ___awmod@dividend:
  1166                           	opt stack 0
  1167  000080                     ___lwdiv@dividend:
  1168                           	opt stack 0
  1169  000080                     strcpy@to:
  1170                           	opt stack 0
  1171  000080                     ___lldiv@dividend:
  1172                           	opt stack 0
  1173                           
  1174                           ; 4 bytes @ 0x0
  1175  000080                     	ds	1
  1176  000081                     readADC@channel:
  1177                           	opt stack 0
  1178  000081                     I2C_Master_Read@a:
  1179                           	opt stack 0
  1180  000081                     lcdNibble@data:
  1181                           	opt stack 0
  1182  000081                     initTime@h:
  1183                           	opt stack 0
  1184  000081                     _isdigit$1670:
  1185                           	opt stack 0
  1186  000081                     I2C_Master_Write@d:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1
  1190  000081                     	ds	1
  1191  000082                     ??_readMAG:
  1192  000082                     I2C_Master_Read@temp:
  1193                           	opt stack 0
  1194  000082                     lcdInst@data:
  1195                           	opt stack 0
  1196  000082                     putch@data:
  1197                           	opt stack 0
  1198  000082                     initTime@w:
  1199                           	opt stack 0
  1200  000082                     isdigit@c:
  1201                           	opt stack 0
  1202  000082                     updateServoPosition@timer:
  1203                           	opt stack 0
  1204  000082                     ___wmul@multiplicand:
  1205                           	opt stack 0
  1206  000082                     ___awmod@divisor:
  1207                           	opt stack 0
  1208  000082                     ___lwdiv@divisor:
  1209                           	opt stack 0
  1210  000082                     strcpy@from:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x2
  1214  000082                     	ds	1
  1215  000083                     ??_initLCD:
  1216  000083                     initTime@DD:
  1217                           	opt stack 0
  1218  000083                     getRTC@i:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x3
  1222  000083                     	ds	1
  1223  000084                     ??_updateServoPosition:
  1224  000084                     initTime@MM:
  1225                           	opt stack 0
  1226  000084                     ___awmod@counter:
  1227                           	opt stack 0
  1228  000084                     readMAG@res:
  1229                           	opt stack 0
  1230  000084                     ___wmul@product:
  1231                           	opt stack 0
  1232  000084                     ___lwdiv@quotient:
  1233                           	opt stack 0
  1234  000084                     strcpy@cp:
  1235                           	opt stack 0
  1236  000084                     ___lldiv@divisor:
  1237                           	opt stack 0
  1238                           
  1239                           ; 4 bytes @ 0x4
  1240  000084                     	ds	1
  1241  000085                     ??_initSortTimer:
  1242  000085                     initTime@YY:
  1243                           	opt stack 0
  1244  000085                     ___awmod@sign:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x5
  1248  000085                     	ds	1
  1249  000086                     ??_ID:
  1250  000086                     ?___awdiv:
  1251                           	opt stack 0
  1252  000086                     initTime@s:
  1253                           	opt stack 0
  1254  000086                     ___lwdiv@counter:
  1255                           	opt stack 0
  1256  000086                     updateServoPosition@my_time:
  1257                           	opt stack 0
  1258  000086                     ___awdiv@dividend:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x6
  1262  000086                     	ds	1
  1263  000087                     ?___lwmod:
  1264                           	opt stack 0
  1265  000087                     ___lwmod@dividend:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x7
  1269  000087                     	ds	1
  1270  000088                     ??_Distribution:
  1271  000088                     initSortTimer@i:
  1272                           	opt stack 0
  1273  000088                     ___awdiv@divisor:
  1274                           	opt stack 0
  1275  000088                     ___lldiv@quotient:
  1276                           	opt stack 0
  1277  000088                     ID@sensor_outputs:
  1278                           	opt stack 0
  1279                           
  1280                           ; 6 bytes @ 0x8
  1281  000088                     	ds	1
  1282  000089                     ___lwmod@divisor:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x9
  1286  000089                     	ds	1
  1287  00008A                     ??_Loading:
  1288  00008A                     ___awdiv@counter:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0xA
  1292  00008A                     	ds	1
  1293  00008B                     ___awdiv@sign:
  1294                           	opt stack 0
  1295  00008B                     ___lwmod@counter:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0xB
  1299  00008B                     	ds	1
  1300  00008C                     ___lldiv@counter:
  1301                           	opt stack 0
  1302  00008C                     ___awdiv@quotient:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0xC
  1306  00008C                     	ds	1
  1307  00008D                     I2C_Master_Init@c:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0xD
  1311  00008D                     	ds	1
  1312  00008E                     ?_printf:
  1313                           	opt stack 0
  1314  00008E                     printf@f:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0xE
  1318  00008E                     	ds	3
  1319  000091                     ??_I2C_Master_Init:
  1320                           
  1321                           ; 1 bytes @ 0x11
  1322  000091                     	ds	4
  1323  000095                     ??_loadRTC:
  1324                           
  1325                           ; 1 bytes @ 0x15
  1326  000095                     	ds	1
  1327  000096                     loadRTC@i:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x16
  1331  000096                     	ds	4
  1332  00009A                     ??_printf:
  1333                           
  1334                           ; 1 bytes @ 0x1A
  1335  00009A                     	ds	4
  1336  00009E                     printf@prec:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x1E
  1340  00009E                     	ds	1
  1341  00009F                     printf@ap:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x1F
  1345  00009F                     	ds	2
  1346  0000A1                     printf@cp:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x21
  1350  0000A1                     	ds	2
  1351  0000A3                     printf@val:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x23
  1355  0000A3                     	ds	2
  1356  0000A5                     printf@len:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x25
  1360  0000A5                     	ds	2
  1361  0000A7                     printf@flag:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x27
  1365  0000A7                     	ds	1
  1366  0000A8                     printf@c:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x28
  1370  0000A8                     	ds	1
  1371  0000A9                     printf@width:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x29
  1375  0000A9                     	ds	2
  1376  0000AB                     ??_printRTC:
  1377                           
  1378                           ; 1 bytes @ 0x2B
  1379  0000AB                     	ds	3
  1380  0000AE                     printRTC@INT_time:
  1381                           	opt stack 0
  1382                           
  1383                           ; 14 bytes @ 0x2E
  1384  0000AE                     	ds	14
  1385  0000BC                     printRTC@RTC_month:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x3C
  1389  0000BC                     	ds	2
  1390  0000BE                     printRTC@month:
  1391                           	opt stack 0
  1392                           
  1393                           ; 4 bytes @ 0x3E
  1394  0000BE                     	ds	4
  1395  0000C2                     printRTC@i:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x42
  1399  0000C2                     	ds	2
  1400  0000C4                     ??_UI:
  1401                           
  1402                           ; 1 bytes @ 0x44
  1403  0000C4                     	ds	1
  1404  0000C5                     _UI$2028:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x45
  1408  0000C5                     	ds	2
  1409  0000C7                     UI@i:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x47
  1413  0000C7                     	ds	1
  1414  0000C8                     UI@i_586:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x48
  1418  0000C8                     	ds	1
  1419  0000C9                     UI@i_587:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x49
  1423  0000C9                     	ds	1
  1424  0000CA                     UI@i_590:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x4A
  1428  0000CA                     	ds	1
  1429  0000CB                     UI@i_591:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x4B
  1433  0000CB                     	ds	1
  1434  0000CC                     UI@i_594:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x4C
  1438  0000CC                     	ds	1
  1439  0000CD                     UI@i_595:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x4D
  1443  0000CD                     	ds	1
  1444  0000CE                     UI@i_598:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x4E
  1448  0000CE                     	ds	1
  1449  0000CF                     UI@i_599:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x4F
  1453  0000CF                     	ds	1
  1454  0000D0                     UI@i_602:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x50
  1458  0000D0                     	ds	1
  1459  0000D1                     UI@i_603:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x51
  1463  0000D1                     	ds	1
  1464  0000D2                     UI@i_606:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x52
  1468  0000D2                     	ds	1
  1469  0000D3                     UI@i_607:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x53
  1473  0000D3                     	ds	1
  1474  0000D4                     tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1l	equ	0xFE1
  1482                           
  1483                           ; 1 bytes @ 0x54
  1484                           
  1485                           	psect	cstackCOMRAM
  1486  000001                     __pcstackCOMRAM:
  1487                           	opt stack 0
  1488  000001                     ??i2_I2C_Master_Wait:
  1489  000001                     ??i2_isdigit:
  1490  000001                     ?i2___wmul:
  1491                           	opt stack 0
  1492  000001                     ?i2___lwmod:
  1493                           	opt stack 0
  1494  000001                     i2lcdNibble@temp:
  1495                           	opt stack 0
  1496  000001                     dispLogs@myLog:
  1497                           	opt stack 0
  1498  000001                     i2___wmul@multiplier:
  1499                           	opt stack 0
  1500  000001                     i2___lwmod@dividend:
  1501                           	opt stack 0
  1502  000001                     i2strcpy@to:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x0
  1506  000001                     	ds	1
  1507  000002                     i2I2C_Master_Read@a:
  1508                           	opt stack 0
  1509  000002                     i2lcdNibble@data:
  1510                           	opt stack 0
  1511  000002                     i2_isdigit$1670:
  1512                           	opt stack 0
  1513  000002                     i2I2C_Master_Write@d:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x1
  1517  000002                     	ds	1
  1518  000003                     i2I2C_Master_Read@temp:
  1519                           	opt stack 0
  1520  000003                     i2lcdInst@data:
  1521                           	opt stack 0
  1522  000003                     i2putch@data:
  1523                           	opt stack 0
  1524  000003                     i2isdigit@c:
  1525                           	opt stack 0
  1526  000003                     i2___wmul@multiplicand:
  1527                           	opt stack 0
  1528  000003                     i2___lwmod@divisor:
  1529                           	opt stack 0
  1530  000003                     i2strcpy@from:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x2
  1534  000003                     	ds	1
  1535  000004                     i2getRTC@i:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x3
  1539  000004                     	ds	1
  1540  000005                     i2___lwmod@counter:
  1541                           	opt stack 0
  1542  000005                     i2___wmul@product:
  1543                           	opt stack 0
  1544  000005                     i2strcpy@cp:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x4
  1548  000005                     	ds	1
  1549  000006                     ?i2___lwdiv:
  1550                           	opt stack 0
  1551  000006                     i2___lwdiv@dividend:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x5
  1555  000006                     	ds	2
  1556  000008                     i2___lwdiv@divisor:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x7
  1560  000008                     	ds	2
  1561  00000A                     i2___lwdiv@quotient:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x9
  1565  00000A                     	ds	2
  1566  00000C                     i2___lwdiv@counter:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0xB
  1570  00000C                     	ds	1
  1571  00000D                     ?i2_printf:
  1572                           	opt stack 0
  1573  00000D                     i2printf@f:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0xC
  1577  00000D                     	ds	12
  1578  000019                     ??i2_printf:
  1579                           
  1580                           ; 1 bytes @ 0x18
  1581  000019                     	ds	4
  1582  00001D                     i2printf@prec:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x1C
  1586  00001D                     	ds	1
  1587  00001E                     i2printf@ap:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x1D
  1591  00001E                     	ds	2
  1592  000020                     i2printf@cp:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x1F
  1596  000020                     	ds	2
  1597  000022                     i2printf@val:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x21
  1601  000022                     	ds	2
  1602  000024                     i2printf@len:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x23
  1606  000024                     	ds	2
  1607  000026                     i2printf@flag:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x25
  1611  000026                     	ds	1
  1612  000027                     i2printf@c:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x26
  1616  000027                     	ds	1
  1617  000028                     i2printf@width:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x27
  1621  000028                     	ds	2
  1622  00002A                     ??_printSortTimer:
  1623  00002A                     ??i2_printRTC:
  1624  00002A                     ?_inputHandler:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x29
  1628  00002A                     	ds	2
  1629  00002C                     ??_inputHandler:
  1630                           
  1631                           ; 1 bytes @ 0x2B
  1632  00002C                     	ds	1
  1633  00002D                     printSortTimer@curTime:
  1634                           	opt stack 0
  1635  00002D                     i2printRTC@INT_time:
  1636                           	opt stack 0
  1637                           
  1638                           ; 14 bytes @ 0x2C
  1639  00002D                     	ds	14
  1640  00003B                     printSortTimer@start_sec:
  1641                           	opt stack 0
  1642  00003B                     i2printRTC@RTC_month:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x3A
  1646  00003B                     	ds	2
  1647  00003D                     printSortTimer@cur_sec:
  1648                           	opt stack 0
  1649  00003D                     i2printRTC@month:
  1650                           	opt stack 0
  1651                           
  1652                           ; 4 bytes @ 0x3C
  1653  00003D                     	ds	2
  1654  00003F                     printSortTimer@hour:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x3E
  1658  00003F                     	ds	2
  1659  000041                     printSortTimer@min:
  1660                           	opt stack 0
  1661  000041                     i2printRTC@i:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x40
  1665  000041                     	ds	2
  1666  000043                     ??_updateMenu:
  1667  000043                     printSortTimer@sec:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x42
  1671  000043                     	ds	2
  1672  000045                     _printSortTimer$2143:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x44
  1676  000045                     	ds	2
  1677  000047                     printSortTimer@timeDiff:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x46
  1681  000047                     	ds	2
  1682  000049                     printSortTimer@i:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x48
  1686  000049                     	ds	2
  1687  00004B                     ??_handler:
  1688                           
  1689                           ; 1 bytes @ 0x4A
  1690  00004B                     	ds	16
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           
  1700 ;;
  1701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1702 ;;
  1703 ;; *************** function _main *****************
  1704 ;; Defined at:
  1705 ;;		line 16 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels required when called:   13
  1725 ;; This function calls:
  1726 ;;		_PortTestA5
  1727 ;;		_UI
  1728 ;;		_initLCD
  1729 ;;		_initTime
  1730 ;;		_initUI
  1731 ;;		_machineConfig
  1732 ;;		_sort
  1733 ;;		_stopSignals
  1734 ;; This function is called by:
  1735 ;;		Startup code after reset
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text0
  1740  002034                     __ptext0:
  1741                           	opt stack 0
  1742  002034                     _main:
  1743                           	opt stack 18
  1744                           
  1745                           ;main.c: 17: machineConfig();
  1746                           
  1747                           ;incstack = 0
  1748  002034  EC29  F012         	call	_machineConfig	;wreg free
  1749                           
  1750                           ;main.c: 18: initLCD();
  1751  002038  ECD5  F012         	call	_initLCD	;wreg free
  1752                           
  1753                           ;main.c: 19: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1754  00203C  0E44               	movlw	68
  1755  00203E  0100               	movlb	0	; () banked
  1756  002040  6F80               	movwf	initTime@m& (0+255),b
  1757  002042  0E19               	movlw	25
  1758  002044  0100               	movlb	0	; () banked
  1759  002046  6F81               	movwf	initTime@h& (0+255),b
  1760  002048  0E06               	movlw	6
  1761  00204A  0100               	movlb	0	; () banked
  1762  00204C  6F82               	movwf	initTime@w& (0+255),b
  1763  00204E  0E24               	movlw	36
  1764  002050  0100               	movlb	0	; () banked
  1765  002052  6F83               	movwf	initTime@DD& (0+255),b
  1766  002054  0E02               	movlw	2
  1767  002056  0100               	movlb	0	; () banked
  1768  002058  6F84               	movwf	initTime@MM& (0+255),b
  1769  00205A  0E17               	movlw	23
  1770  00205C  0100               	movlb	0	; () banked
  1771  00205E  6F85               	movwf	initTime@YY& (0+255),b
  1772  002060  0E42               	movlw	66
  1773  002062  EC6C  F015         	call	_initTime
  1774                           
  1775                           ;main.c: 20: initUI();
  1776  002066  EC8C  F015         	call	_initUI	;wreg free
  1777                           
  1778                           ;main.c: 24: switch(machine_state){
  1779                           
  1780                           ;main.c: 23: while(1){
  1781  00206A  D016               	goto	l5890
  1782  00206C                     l5874:
  1783                           
  1784                           ;main.c: 26: UI();
  1785  00206C  EC09  F000         	call	_UI	;wreg free
  1786                           
  1787                           ;main.c: 27: break;
  1788  002070  D013               	goto	l5890
  1789  002072                     l5876:
  1790                           
  1791                           ;main.c: 29: sort();
  1792  002072  EC5B  F015         	call	_sort	;wreg free
  1793                           
  1794                           ;main.c: 30: break;
  1795  002076  D010               	goto	l5890
  1796  002078                     l5878:
  1797                           
  1798                           ;main.c: 32: stopSignals();
  1799  002078  EC99  F015         	call	_stopSignals	;wreg free
  1800                           
  1801                           ;main.c: 33: first = 1;
  1802  00207C  0E00               	movlw	0
  1803  00207E  0100               	movlb	0	; () banked
  1804  002080  6FFF               	movwf	(_first+1)& (0+255),b
  1805  002082  0E01               	movlw	1
  1806  002084  6FFE               	movwf	_first& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 34: UI();
  1810  002086  EC09  F000         	call	_UI	;wreg free
  1811                           
  1812                           ;main.c: 35: break;
  1813  00208A  D006               	goto	l5890
  1814  00208C                     l5884:
  1815                           
  1816                           ;main.c: 37: PortTestA5();
  1817  00208C  ECB8  F015         	call	_PortTestA5	;wreg free
  1818                           
  1819                           ;main.c: 38: break;
  1820  002090  D003               	goto	l5890
  1821  002092                     l5886:
  1822                           
  1823                           ;main.c: 40: stopSignals();
  1824  002092  EC99  F015         	call	_stopSignals	;wreg free
  1825  002096                     l760:
  1826  002096  D7FF               	goto	l760
  1827  002098                     l5890:
  1828  002098  0100               	movlb	0	; () banked
  1829  00209A  51F9               	movf	_machine_state& (0+255),w,b
  1830                           
  1831                           ; Switch size 1, requested type "space"
  1832                           ; Number of cases is 5, Range of values is 0 to 4
  1833                           ; switch strategies available:
  1834                           ; Name         Instructions Cycles
  1835                           ; simple_byte           16     9 (average)
  1836                           ;	Chosen strategy is simple_byte
  1837  00209C  0A00               	xorlw	0	; case 0
  1838  00209E  B4D8               	btfsc	status,2,c
  1839  0020A0  D7E5               	goto	l5874
  1840  0020A2  0A01               	xorlw	1	; case 1
  1841  0020A4  B4D8               	btfsc	status,2,c
  1842  0020A6  D7E5               	goto	l5876
  1843  0020A8  0A03               	xorlw	3	; case 2
  1844  0020AA  B4D8               	btfsc	status,2,c
  1845  0020AC  D7E5               	goto	l5878
  1846  0020AE  0A01               	xorlw	1	; case 3
  1847  0020B0  B4D8               	btfsc	status,2,c
  1848  0020B2  D7EC               	goto	l5884
  1849  0020B4  0A07               	xorlw	7	; case 4
  1850  0020B6  B4D8               	btfsc	status,2,c
  1851  0020B8  D7EC               	goto	l5886
  1852                           
  1853                           ; BSR set to: 0
  1854                           
  1855                           ; BSR set to: 0
  1856  0020BA  D7EE               	goto	l5890
  1857  0020BC                     __end_of_main:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           postdec1	equ	0xFE5
  1866                           fsr1l	equ	0xFE1
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _stopSignals *****************
  1870 ;; Defined at:
  1871 ;;		line 49 in file "main.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    7
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text1
  1900  002B32                     __ptext1:
  1901                           	opt stack 0
  1902  002B32                     _stopSignals:
  1903                           	opt stack 23
  1904                           
  1905                           ;main.c: 50: LATA = 0x00;
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;incstack = 0
  1909  002B32  0E00               	movlw	0
  1910  002B34  6E89               	movwf	3977,c	;volatile
  1911                           
  1912                           ;main.c: 51: LATB = 0x00;
  1913  002B36  0E00               	movlw	0
  1914  002B38  6E8A               	movwf	3978,c	;volatile
  1915                           
  1916                           ;main.c: 52: LATC = 0x00;
  1917  002B3A  0E00               	movlw	0
  1918  002B3C  6E8B               	movwf	3979,c	;volatile
  1919                           
  1920                           ;main.c: 53: LATD = 0x00;
  1921  002B3E  0E00               	movlw	0
  1922  002B40  6E8C               	movwf	3980,c	;volatile
  1923                           
  1924                           ;main.c: 54: LATE = 0x00;
  1925  002B42  0E00               	movlw	0
  1926  002B44  6E8D               	movwf	3981,c	;volatile
  1927  002B46  0012               	return		;funcret
  1928  002B48                     __end_of_stopSignals:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1l	equ	0xFE1
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _sort *****************
  1941 ;; Defined at:
  1942 ;;		line 14 in file "sort.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;Total ram usage:        0 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:   12
  1963 ;; This function calls:
  1964 ;;		_Distribution
  1965 ;;		_ID
  1966 ;;		_Loading
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text2
  1973  002AB6                     __ptext2:
  1974                           	opt stack 0
  1975  002AB6                     _sort:
  1976                           	opt stack 18
  1977                           
  1978                           ;sort.c: 15: if(machine_state == Sorting_state){
  1979                           
  1980                           ;incstack = 0
  1981  002AB6  0100               	movlb	0	; () banked
  1982  002AB8  05F9               	decf	_machine_state& (0+255),w,b
  1983  002ABA  B4D8               	btfsc	status,2,c
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;sort.c: 16: Loading();
  1987  002ABC  ECD3  F00E         	call	_Loading	;wreg free
  1988                           
  1989                           ;sort.c: 17: }
  1990                           ;sort.c: 18: if(machine_state == Sorting_state){
  1991  002AC0  0100               	movlb	0	; () banked
  1992  002AC2  05F9               	decf	_machine_state& (0+255),w,b
  1993  002AC4  B4D8               	btfsc	status,2,c
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;sort.c: 19: ID();
  1997  002AC6  EC7E  F00D         	call	_ID	;wreg free
  1998                           
  1999                           ;sort.c: 20: }
  2000                           ;sort.c: 21: if(machine_state == Sorting_state){
  2001  002ACA  0100               	movlb	0	; () banked
  2002  002ACC  05F9               	decf	_machine_state& (0+255),w,b
  2003  002ACE  A4D8               	btfss	status,2,c
  2004  002AD0  0012               	return	
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;sort.c: 22: Distribution();
  2008  002AD2  ECE2  F00C         	call	_Distribution	;wreg free
  2009  002AD6  0012               	return	
  2010  002AD8                     __end_of_sort:
  2011                           	opt stack 0
  2012                           tblptru	equ	0xFF8
  2013                           tblptrh	equ	0xFF7
  2014                           tblptrl	equ	0xFF6
  2015                           tablat	equ	0xFF5
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _Loading *****************
  2023 ;; Defined at:
  2024 ;;		line 26 in file "sort.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;Total ram usage:        2 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:   11
  2045 ;; This function calls:
  2046 ;;		_initFlags
  2047 ;;		_initServos
  2048 ;;		_initSortTimer
  2049 ;;		_lcdInst
  2050 ;; This function is called by:
  2051 ;;		_sort
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text3
  2056  001DA6                     __ptext3:
  2057                           	opt stack 0
  2058  001DA6                     _Loading:
  2059                           	opt stack 18
  2060                           
  2061                           ;sort.c: 27: if(first){
  2062                           
  2063                           ;incstack = 0
  2064  001DA6  0100               	movlb	0	; () banked
  2065  001DA8  51FE               	movf	_first& (0+255),w,b
  2066  001DAA  0100               	movlb	0	; () banked
  2067  001DAC  11FF               	iorwf	(_first+1)& (0+255),w,b
  2068  001DAE  B4D8               	btfsc	status,2,c
  2069  001DB0  D019               	goto	l5082
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;sort.c: 28: first = 0;
  2073  001DB2  0E00               	movlw	0
  2074  001DB4  0100               	movlb	0	; () banked
  2075  001DB6  6FFF               	movwf	(_first+1)& (0+255),b
  2076  001DB8  0E00               	movlw	0
  2077  001DBA  6FFE               	movwf	_first& (0+255),b
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;sort.c: 29: initFlags();
  2081  001DBC  EC19  F013         	call	_initFlags	;wreg free
  2082                           
  2083                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2084  001DC0  0E01               	movlw	1
  2085  001DC2  ECD2  F015         	call	_lcdInst
  2086  001DC6  0E68               	movlw	104
  2087  001DC8  0100               	movlb	0	; () banked
  2088  001DCA  6F8A               	movwf	??_Loading& (0+255),b
  2089  001DCC  0EE4               	movlw	228
  2090  001DCE                     u4757:
  2091  001DCE  2EE8               	decfsz	wreg,f,c
  2092  001DD0  D7FE               	bra	u4757
  2093  001DD2  2F8A               	decfsz	??_Loading& (0+255),f,b
  2094  001DD4  D7FC               	bra	u4757
  2095  001DD6  F000               	nop	
  2096                           
  2097                           ;sort.c: 31: initSortTimer();
  2098  001DD8  EC2E  F00F         	call	_initSortTimer	;wreg free
  2099                           
  2100                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2101  001DDC  8A89               	bsf	3977,5,c	;volatile
  2102                           
  2103                           ;sort.c: 37: initServos();
  2104  001DDE  EC37  F013         	call	_initServos	;wreg free
  2105                           
  2106                           ;sort.c: 38: }
  2107  001DE2  0012               	return	
  2108  001DE4                     l5082:
  2109                           
  2110                           ;sort.c: 39: else{
  2111                           ;sort.c: 42: if(!f_loadingNewCan){
  2112  001DE4  0100               	movlb	0	; () banked
  2113  001DE6  51F1               	movf	_f_loadingNewCan& (0+255),w,b
  2114  001DE8  0100               	movlb	0	; () banked
  2115  001DEA  11F2               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2116  001DEC  A4D8               	btfss	status,2,c
  2117  001DEE  D016               	goto	l5096
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;sort.c: 46: if(!f_loadingNewCan){
  2121  001DF0  0100               	movlb	0	; () banked
  2122  001DF2  51F1               	movf	_f_loadingNewCan& (0+255),w,b
  2123  001DF4  0100               	movlb	0	; () banked
  2124  001DF6  11F2               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2125  001DF8  B4D8               	btfsc	status,2,c
  2126  001DFA  0012               	return	
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;sort.c: 50: else{
  2130                           ;sort.c: 51: count_total++;
  2131                           
  2132                           ; BSR set to: 0
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;sort.c: 48: }
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;sort.c: 47: return;
  2139  001DFC  0100               	movlb	0	; () banked
  2140  001DFE  4BE5               	infsnz	_count_total& (0+255),f,b
  2141  001E00  2BE6               	incf	(_count_total+1)& (0+255),f,b
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;sort.c: 52: if(count_total == 12){
  2145  001E02  0E0C               	movlw	12
  2146  001E04  0100               	movlb	0	; () banked
  2147  001E06  19E5               	xorwf	_count_total& (0+255),w,b
  2148  001E08  0100               	movlb	0	; () banked
  2149  001E0A  11E6               	iorwf	(_count_total+1)& (0+255),w,b
  2150  001E0C  A4D8               	btfss	status,2,c
  2151  001E0E  0012               	return	
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;sort.c: 53: f_lastCan = 1;
  2155  001E10  0E00               	movlw	0
  2156  001E12  0100               	movlb	0	; () banked
  2157  001E14  6FF0               	movwf	(_f_lastCan+1)& (0+255),b
  2158  001E16  0E01               	movlw	1
  2159  001E18  6FEF               	movwf	_f_lastCan& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;sort.c: 54: }
  2163                           ;sort.c: 55: }
  2164                           ;sort.c: 56: }
  2165                           
  2166                           ; BSR set to: 0
  2167  001E1A  0012               	return	
  2168  001E1C                     l5096:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;sort.c: 59: else if(f_ID_receive){
  2172  001E1C  0100               	movlb	0	; () banked
  2173  001E1E  51FC               	movf	_f_ID_receive& (0+255),w,b
  2174  001E20  0100               	movlb	0	; () banked
  2175  001E22  11FD               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2176  001E24  B4D8               	btfsc	status,2,c
  2177  001E26  0012               	return	
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;sort.c: 60: f_loadingNewCan = 0;
  2181  001E28  0E00               	movlw	0
  2182  001E2A  0100               	movlb	0	; () banked
  2183  001E2C  6FF2               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2184  001E2E  0E00               	movlw	0
  2185  001E30  6FF1               	movwf	_f_loadingNewCan& (0+255),b
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;sort.c: 61: LATAbits.LATA4 = 1;
  2189  001E32  8889               	bsf	3977,4,c	;volatile
  2190                           
  2191                           ;sort.c: 62: f_can_coming_to_ID = 1;
  2192  001E34  0E00               	movlw	0
  2193  001E36  0100               	movlb	0	; () banked
  2194  001E38  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2195  001E3A  0E01               	movlw	1
  2196  001E3C  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;sort.c: 63: _delay((unsigned long)((100)*(32000000/4000.0)));
  2200  001E3E  0E05               	movlw	5
  2201  001E40  0100               	movlb	0	; () banked
  2202  001E42  6F8B               	movwf	(??_Loading+1)& (0+255),b
  2203  001E44  0E0F               	movlw	15
  2204  001E46  0100               	movlb	0	; () banked
  2205  001E48  6F8A               	movwf	??_Loading& (0+255),b
  2206  001E4A  0EF1               	movlw	241
  2207  001E4C                     u4767:
  2208  001E4C  2EE8               	decfsz	wreg,f,c
  2209  001E4E  D7FE               	bra	u4767
  2210  001E50  2F8A               	decfsz	??_Loading& (0+255),f,b
  2211  001E52  D7FC               	bra	u4767
  2212  001E54  2F8B               	decfsz	(??_Loading+1)& (0+255),f,b
  2213  001E56  D7FA               	bra	u4767
  2214                           
  2215                           ;sort.c: 64: LATAbits.LATA4 = 0;
  2216  001E58  9889               	bcf	3977,4,c	;volatile
  2217  001E5A  0012               	return	
  2218  001E5C                     __end_of_Loading:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postdec1	equ	0xFE5
  2227                           fsr1l	equ	0xFE1
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _initSortTimer *****************
  2231 ;; Defined at:
  2232 ;;		line 166 in file "sort.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  i               2    8[BANK0 ] int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;Total ram usage:        5 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:   10
  2253 ;; This function calls:
  2254 ;;		_getRTC
  2255 ;; This function is called by:
  2256 ;;		_Loading
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text4
  2261  001E5C                     __ptext4:
  2262                           	opt stack 0
  2263  001E5C                     _initSortTimer:
  2264                           	opt stack 18
  2265                           
  2266                           ;sort.c: 168: getRTC();
  2267                           
  2268                           ;incstack = 0
  2269  001E5C  ECA1  F010         	call	_getRTC	;wreg free
  2270                           
  2271                           ;sort.c: 169: for(int i = 0; i < 7; i++){
  2272  001E60  0E00               	movlw	0
  2273  001E62  0100               	movlb	0	; () banked
  2274  001E64  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2275  001E66  0E00               	movlw	0
  2276  001E68  6F88               	movwf	initSortTimer@i& (0+255),b
  2277  001E6A                     l4780:
  2278                           
  2279                           ; BSR set to: 0
  2280  001E6A  0100               	movlb	0	; () banked
  2281  001E6C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2282  001E6E  D008               	goto	l4784
  2283  001E70  0100               	movlb	0	; () banked
  2284  001E72  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2285  001E74  E140               	bnz	l4790
  2286  001E76  0E07               	movlw	7
  2287  001E78  0100               	movlb	0	; () banked
  2288  001E7A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2289  001E7C  B0D8               	btfsc	status,0,c
  2290  001E7E  D03B               	goto	l4790
  2291  001E80                     l4784:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;sort.c: 170: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2295  001E80  0EDC               	movlw	low _time
  2296  001E82  0100               	movlb	0	; () banked
  2297  001E84  2588               	addwf	initSortTimer@i& (0+255),w,b
  2298  001E86  6ED9               	movwf	fsr2l,c
  2299  001E88  0E00               	movlw	high _time
  2300  001E8A  0100               	movlb	0	; () banked
  2301  001E8C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2302  001E8E  6EDA               	movwf	fsr2h,c
  2303  001E90  50DF               	movf	indf2,w,c
  2304  001E92  0100               	movlb	0	; () banked
  2305  001E94  6F85               	movwf	??_initSortTimer& (0+255),b
  2306  001E96  0100               	movlb	0	; () banked
  2307  001E98  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2308  001E9A  0E0F               	movlw	15
  2309  001E9C  1785               	andwf	??_initSortTimer& (0+255),f,b
  2310  001E9E  0E0F               	movlw	15
  2311  001EA0  0100               	movlb	0	; () banked
  2312  001EA2  1785               	andwf	??_initSortTimer& (0+255),f,b
  2313  001EA4  0100               	movlb	0	; () banked
  2314  001EA6  5185               	movf	??_initSortTimer& (0+255),w,b
  2315  001EA8  0D0A               	mullw	10
  2316  001EAA  0EDC               	movlw	low _time
  2317  001EAC  0100               	movlb	0	; () banked
  2318  001EAE  2588               	addwf	initSortTimer@i& (0+255),w,b
  2319  001EB0  6ED9               	movwf	fsr2l,c
  2320  001EB2  0E00               	movlw	high _time
  2321  001EB4  0100               	movlb	0	; () banked
  2322  001EB6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2323  001EB8  6EDA               	movwf	fsr2h,c
  2324  001EBA  50DF               	movf	indf2,w,c
  2325  001EBC  0B0F               	andlw	15
  2326  001EBE  0100               	movlb	0	; () banked
  2327  001EC0  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2328  001EC2  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2329  001EC4  50F3               	movf	prodl,w,c
  2330  001EC6  0100               	movlb	0	; () banked
  2331  001EC8  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2332  001ECA  50F4               	movf	prodh,w,c
  2333  001ECC  0100               	movlb	0	; () banked
  2334  001ECE  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2335  001ED0  90D8               	bcf	status,0,c
  2336  001ED2  0100               	movlb	0	; () banked
  2337  001ED4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2338  001ED6  6ED9               	movwf	fsr2l,c
  2339  001ED8  0100               	movlb	0	; () banked
  2340  001EDA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2341  001EDC  6EDA               	movwf	fsr2h,c
  2342  001EDE  0E00               	movlw	low _startTime
  2343  001EE0  26D9               	addwf	fsr2l,f,c
  2344  001EE2  0E01               	movlw	high _startTime
  2345  001EE4  22DA               	addwfc	fsr2h,f,c
  2346  001EE6  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2347  001EEA  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2348                           
  2349                           ; BSR set to: 0
  2350  001EEE  0100               	movlb	0	; () banked
  2351  001EF0  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2352  001EF2  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2353  001EF4  D7BA               	goto	l4780
  2354  001EF6                     l4790:
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;sort.c: 171: }
  2358                           ;sort.c: 173: T0CON = 0b00010111;
  2359  001EF6  0E17               	movlw	23
  2360  001EF8  6ED5               	movwf	4053,c	;volatile
  2361                           
  2362                           ;sort.c: 182: TMR0H = 0b10000101;
  2363  001EFA  0E85               	movlw	133
  2364  001EFC  6ED7               	movwf	4055,c	;volatile
  2365                           
  2366                           ;sort.c: 183: TMR0L = 0b11101110;
  2367  001EFE  0EEE               	movlw	238
  2368  001F00  6ED6               	movwf	4054,c	;volatile
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;sort.c: 184: TMR0ON = 1;
  2372  001F02  8ED5               	bsf	4053,7,c	;volatile
  2373                           
  2374                           ; BSR set to: 0
  2375  001F04  0012               	return		;funcret
  2376  001F06                     __end_of_initSortTimer:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodh	equ	0xFF4
  2383                           prodl	equ	0xFF3
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _initServos *****************
  2396 ;; Defined at:
  2397 ;;		line 186 in file "sort.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    8
  2418 ;; This function calls:
  2419 ;;		_updateServoPosition
  2420 ;; This function is called by:
  2421 ;;		_Loading
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text5
  2426  00266E                     __ptext5:
  2427                           	opt stack 0
  2428  00266E                     _initServos:
  2429                           	opt stack 20
  2430                           
  2431                           ;sort.c: 187: updateServoPosition(1500, 1);
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;incstack = 0
  2435  00266E  0E05               	movlw	5
  2436  002670  0100               	movlb	0	; () banked
  2437  002672  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2438  002674  0EDC               	movlw	220
  2439  002676  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2440  002678  0E00               	movlw	0
  2441  00267A  0100               	movlb	0	; () banked
  2442  00267C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2443  00267E  0E01               	movlw	1
  2444  002680  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2445  002682  EC20  F011         	call	_updateServoPosition	;wreg free
  2446                           
  2447                           ;sort.c: 188: updateServoPosition(1000, 3);
  2448  002686  0E03               	movlw	3
  2449  002688  0100               	movlb	0	; () banked
  2450  00268A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2451  00268C  0EE8               	movlw	232
  2452  00268E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2453  002690  0E00               	movlw	0
  2454  002692  0100               	movlb	0	; () banked
  2455  002694  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2456  002696  0E03               	movlw	3
  2457  002698  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2458  00269A  EC20  F011         	call	_updateServoPosition	;wreg free
  2459                           
  2460                           ;sort.c: 189: TMR1ON = 1;
  2461  00269E  80CD               	bsf	4045,0,c	;volatile
  2462                           
  2463                           ;sort.c: 190: TMR3ON = 1;
  2464  0026A0  80B1               	bsf	4017,0,c	;volatile
  2465                           
  2466                           ;sort.c: 191: LATCbits.LATC0 = 1;
  2467  0026A2  808B               	bsf	3979,0,c	;volatile
  2468  0026A4  0012               	return		;funcret
  2469  0026A6                     __end_of_initServos:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           postdec1	equ	0xFE5
  2480                           fsr1l	equ	0xFE1
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _initFlags *****************
  2489 ;; Defined at:
  2490 ;;		line 158 in file "sort.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    7
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_Loading
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text6
  2519  002632                     __ptext6:
  2520                           	opt stack 0
  2521  002632                     _initFlags:
  2522                           	opt stack 21
  2523                           
  2524                           ;sort.c: 159: f_loadingNewCan = 0;
  2525                           
  2526                           ;incstack = 0
  2527  002632  0E00               	movlw	0
  2528  002634  0100               	movlb	0	; () banked
  2529  002636  6FF2               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2530  002638  0E00               	movlw	0
  2531  00263A  6FF1               	movwf	_f_loadingNewCan& (0+255),b
  2532                           
  2533                           ;sort.c: 160: f_lastCan = 0;
  2534  00263C  0E00               	movlw	0
  2535  00263E  0100               	movlb	0	; () banked
  2536  002640  6FF0               	movwf	(_f_lastCan+1)& (0+255),b
  2537  002642  0E00               	movlw	0
  2538  002644  6FEF               	movwf	_f_lastCan& (0+255),b
  2539                           
  2540                           ;sort.c: 161: f_ID_receive = 1;
  2541  002646  0E00               	movlw	0
  2542  002648  0100               	movlb	0	; () banked
  2543  00264A  6FFD               	movwf	(_f_ID_receive+1)& (0+255),b
  2544  00264C  0E01               	movlw	1
  2545  00264E  6FFC               	movwf	_f_ID_receive& (0+255),b
  2546                           
  2547                           ;sort.c: 162: f_can_coming_to_ID = 0;
  2548  002650  0E00               	movlw	0
  2549  002652  0100               	movlb	0	; () banked
  2550  002654  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2551  002656  0E00               	movlw	0
  2552  002658  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2553                           
  2554                           ;sort.c: 163: f_can_coming_to_distribution = 0;
  2555  00265A  0E00               	movlw	0
  2556  00265C  0100               	movlb	0	; () banked
  2557  00265E  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2558  002660  0E00               	movlw	0
  2559  002662  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  2560                           
  2561                           ;sort.c: 164: f_can_distributed = 0;
  2562  002664  0E00               	movlw	0
  2563  002666  6E72               	movwf	_f_can_distributed+1,c
  2564  002668  0E00               	movlw	0
  2565  00266A  6E71               	movwf	_f_can_distributed,c
  2566                           
  2567                           ; BSR set to: 0
  2568  00266C  0012               	return		;funcret
  2569  00266E                     __end_of_initFlags:
  2570                           	opt stack 0
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           prodh	equ	0xFF4
  2576                           prodl	equ	0xFF3
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _ID *****************
  2589 ;; Defined at:
  2590 ;;		line 68 in file "sort.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, status,2, status,0, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;Total ram usage:        8 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    9
  2611 ;; This function calls:
  2612 ;;		_readMAG
  2613 ;; This function is called by:
  2614 ;;		_sort
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text7
  2619  001AFC                     __ptext7:
  2620                           	opt stack 0
  2621  001AFC                     _ID:
  2622                           	opt stack 20
  2623                           
  2624                           ;sort.c: 69: if(f_can_coming_to_ID){
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;incstack = 0
  2628  001AFC  0100               	movlb	0	; () banked
  2629  001AFE  51EB               	movf	_f_can_coming_to_ID& (0+255),w,b
  2630  001B00  0100               	movlb	0	; () banked
  2631  001B02  11EC               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2632  001B04  B4D8               	btfsc	status,2,c
  2633  001B06  0012               	return	
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;sort.c: 71: _delay((unsigned long)((500)*(32000000/4000.0)));
  2637  001B08  0E15               	movlw	21
  2638  001B0A  0100               	movlb	0	; () banked
  2639  001B0C  6F87               	movwf	(??_ID+1)& (0+255),b
  2640  001B0E  0E4B               	movlw	75
  2641  001B10  0100               	movlb	0	; () banked
  2642  001B12  6F86               	movwf	??_ID& (0+255),b
  2643  001B14  0EBE               	movlw	190
  2644  001B16                     u4777:
  2645  001B16  2EE8               	decfsz	wreg,f,c
  2646  001B18  D7FE               	bra	u4777
  2647  001B1A  2F86               	decfsz	??_ID& (0+255),f,b
  2648  001B1C  D7FC               	bra	u4777
  2649  001B1E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2650  001B20  D7FA               	bra	u4777
  2651  001B22  F000               	nop	
  2652                           
  2653                           ;sort.c: 76: int sensor_outputs[3];
  2654                           ;sort.c: 80: sensor_outputs[0] = PORTAbits.RA2;
  2655  001B24  A480               	btfss	3968,2,c	;volatile
  2656  001B26  D004               	goto	u3520
  2657  001B28  0100               	movlb	0	; () banked
  2658  001B2A  6B86               	clrf	??_ID& (0+255),b
  2659  001B2C  2B86               	incf	??_ID& (0+255),f,b
  2660  001B2E  D002               	goto	u3528
  2661  001B30                     u3520:
  2662  001B30  0100               	movlb	0	; () banked
  2663  001B32  6B86               	clrf	??_ID& (0+255),b
  2664  001B34                     u3528:
  2665  001B34  0100               	movlb	0	; () banked
  2666  001B36  5186               	movf	??_ID& (0+255),w,b
  2667  001B38  0100               	movlb	0	; () banked
  2668  001B3A  6F88               	movwf	ID@sensor_outputs& (0+255),b
  2669  001B3C  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;sort.c: 82: if(!sensor_outputs[0]){
  2673  001B3E  0100               	movlb	0	; () banked
  2674  001B40  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2675  001B42  0100               	movlb	0	; () banked
  2676  001B44  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2677  001B46  A4D8               	btfss	status,2,c
  2678  001B48  D028               	goto	l5128
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;sort.c: 83: readMAG();
  2682  001B4A  EC56  F012         	call	_readMAG	;wreg free
  2683                           
  2684                           ;sort.c: 84: sensor_outputs[1] = MAG_signal;
  2685  001B4E  C0E3  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  2686  001B52  C0E4  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  2687                           
  2688                           ;sort.c: 85: if(!sensor_outputs[1]){
  2689  001B56  0100               	movlb	0	; () banked
  2690  001B58  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2691  001B5A  0100               	movlb	0	; () banked
  2692  001B5C  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2693  001B5E  A4D8               	btfss	status,2,c
  2694  001B60  D01C               	goto	l5128
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;sort.c: 86: LATAbits.LATA3 = 1;
  2698  001B62  8689               	bsf	3977,3,c	;volatile
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;sort.c: 88: _delay((unsigned long)((100)*(32000000/4000.0)));
  2702  001B64  0E05               	movlw	5
  2703  001B66  0100               	movlb	0	; () banked
  2704  001B68  6F87               	movwf	(??_ID+1)& (0+255),b
  2705  001B6A  0E0F               	movlw	15
  2706  001B6C  0100               	movlb	0	; () banked
  2707  001B6E  6F86               	movwf	??_ID& (0+255),b
  2708  001B70  0EF1               	movlw	241
  2709  001B72                     u4787:
  2710  001B72  2EE8               	decfsz	wreg,f,c
  2711  001B74  D7FE               	bra	u4787
  2712  001B76  2F86               	decfsz	??_ID& (0+255),f,b
  2713  001B78  D7FC               	bra	u4787
  2714  001B7A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2715  001B7C  D7FA               	bra	u4787
  2716                           
  2717                           ;sort.c: 89: sensor_outputs[2] = PORTAbits.RA2;
  2718  001B7E  A480               	btfss	3968,2,c	;volatile
  2719  001B80  D004               	goto	u3550
  2720  001B82  0100               	movlb	0	; () banked
  2721  001B84  6B86               	clrf	??_ID& (0+255),b
  2722  001B86  2B86               	incf	??_ID& (0+255),f,b
  2723  001B88  D002               	goto	u3558
  2724  001B8A                     u3550:
  2725  001B8A  0100               	movlb	0	; () banked
  2726  001B8C  6B86               	clrf	??_ID& (0+255),b
  2727  001B8E                     u3558:
  2728  001B8E  0100               	movlb	0	; () banked
  2729  001B90  5186               	movf	??_ID& (0+255),w,b
  2730  001B92  0100               	movlb	0	; () banked
  2731  001B94  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  2732  001B96  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;sort.c: 90: LATAbits.LATA3 = 0;
  2736  001B98  9689               	bcf	3977,3,c	;volatile
  2737  001B9A                     l5128:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;sort.c: 91: }
  2741                           ;sort.c: 92: }
  2742                           ;sort.c: 95: if(!sensor_outputs[0]){
  2743  001B9A  0100               	movlb	0	; () banked
  2744  001B9C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  2745  001B9E  0100               	movlb	0	; () banked
  2746  001BA0  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  2747  001BA2  A4D8               	btfss	status,2,c
  2748  001BA4  D021               	goto	l5146
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;sort.c: 96: if(!sensor_outputs[1]){
  2752  001BA6  0100               	movlb	0	; () banked
  2753  001BA8  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  2754  001BAA  0100               	movlb	0	; () banked
  2755  001BAC  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  2756  001BAE  A4D8               	btfss	status,2,c
  2757  001BB0  D014               	goto	l5142
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;sort.c: 97: if(!sensor_outputs[2]){
  2761  001BB2  0100               	movlb	0	; () banked
  2762  001BB4  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  2763  001BB6  0100               	movlb	0	; () banked
  2764  001BB8  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  2765  001BBA  A4D8               	btfss	status,2,c
  2766  001BBC  D007               	goto	l5138
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;sort.c: 98: count_pop_no_tab++;
  2770  001BBE  4A69               	infsnz	_count_pop_no_tab,f,c
  2771  001BC0  2A6A               	incf	_count_pop_no_tab+1,f,c
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;sort.c: 99: cur_can = 0;
  2775  001BC2  0E00               	movlw	0
  2776  001BC4  0100               	movlb	0	; () banked
  2777  001BC6  6FE8               	movwf	(_cur_can+1)& (0+255),b
  2778  001BC8  0E00               	movlw	0
  2779  001BCA  D014               	goto	L3
  2780  001BCC                     l5138:
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;sort.c: 101: else{
  2784                           ;sort.c: 102: count_pop_w_tab++;
  2785  001BCC  4A6B               	infsnz	_count_pop_w_tab,f,c
  2786  001BCE  2A6C               	incf	_count_pop_w_tab+1,f,c
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;sort.c: 103: cur_can = 1;
  2790  001BD0  0E00               	movlw	0
  2791  001BD2  0100               	movlb	0	; () banked
  2792  001BD4  6FE8               	movwf	(_cur_can+1)& (0+255),b
  2793  001BD6  0E01               	movlw	1
  2794  001BD8  D00D               	goto	L3
  2795  001BDA                     l5142:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;sort.c: 106: else{
  2799                           ;sort.c: 107: count_can_w_lab++;
  2800  001BDA  4A67               	infsnz	_count_can_w_lab,f,c
  2801  001BDC  2A68               	incf	_count_can_w_lab+1,f,c
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;sort.c: 108: cur_can = 2;
  2805  001BDE  0E00               	movlw	0
  2806  001BE0  0100               	movlb	0	; () banked
  2807  001BE2  6FE8               	movwf	(_cur_can+1)& (0+255),b
  2808  001BE4  0E02               	movlw	2
  2809  001BE6  D006               	goto	L3
  2810  001BE8                     l5146:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;sort.c: 111: else{
  2814                           ;sort.c: 112: count_can_no_lab++;
  2815  001BE8  4A65               	infsnz	_count_can_no_lab,f,c
  2816  001BEA  2A66               	incf	_count_can_no_lab+1,f,c
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;sort.c: 113: cur_can = 3;
  2820  001BEC  0E00               	movlw	0
  2821  001BEE  0100               	movlb	0	; () banked
  2822  001BF0  6FE8               	movwf	(_cur_can+1)& (0+255),b
  2823  001BF2  0E03               	movlw	3
  2824  001BF4                     L3:
  2825  001BF4  6FE7               	movwf	_cur_can& (0+255),b
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;sort.c: 114: }
  2829                           ;sort.c: 116: LATCbits.LATC0 = 0;
  2830                           
  2831                           ; BSR set to: 0
  2832  001BF6  908B               	bcf	3979,0,c	;volatile
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;sort.c: 117: f_can_coming_to_distribution = 1;
  2836  001BF8  0E00               	movlw	0
  2837  001BFA  0100               	movlb	0	; () banked
  2838  001BFC  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2839  001BFE  0E01               	movlw	1
  2840  001C00  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;sort.c: 118: _delay((unsigned long)((500)*(32000000/4000.0)));
  2844  001C02  0E15               	movlw	21
  2845  001C04  0100               	movlb	0	; () banked
  2846  001C06  6F87               	movwf	(??_ID+1)& (0+255),b
  2847  001C08  0E4B               	movlw	75
  2848  001C0A  0100               	movlb	0	; () banked
  2849  001C0C  6F86               	movwf	??_ID& (0+255),b
  2850  001C0E  0EBE               	movlw	190
  2851  001C10                     u4797:
  2852  001C10  2EE8               	decfsz	wreg,f,c
  2853  001C12  D7FE               	bra	u4797
  2854  001C14  2F86               	decfsz	??_ID& (0+255),f,b
  2855  001C16  D7FC               	bra	u4797
  2856  001C18  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  2857  001C1A  D7FA               	bra	u4797
  2858  001C1C  F000               	nop	
  2859                           
  2860                           ;sort.c: 119: LATCbits.LATC0 = 1;
  2861  001C1E  808B               	bsf	3979,0,c	;volatile
  2862                           
  2863                           ;sort.c: 121: f_can_coming_to_ID = 0;
  2864  001C20  0E00               	movlw	0
  2865  001C22  0100               	movlb	0	; () banked
  2866  001C24  6FEC               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2867  001C26  0E00               	movlw	0
  2868  001C28  6FEB               	movwf	_f_can_coming_to_ID& (0+255),b
  2869  001C2A  0012               	return	
  2870  001C2C                     __end_of_ID:
  2871                           	opt stack 0
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           prodh	equ	0xFF4
  2877                           prodl	equ	0xFF3
  2878                           postinc0	equ	0xFEE
  2879                           wreg	equ	0xFE8
  2880                           postdec1	equ	0xFE5
  2881                           fsr1l	equ	0xFE1
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _readMAG *****************
  2890 ;; Defined at:
  2891 ;;		line 28 in file "ADCFunctionality.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  res             2    4[BANK0 ] int 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        4 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    8
  2912 ;; This function calls:
  2913 ;;		_readADC
  2914 ;; This function is called by:
  2915 ;;		_ID
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text8
  2920  0024AC                     __ptext8:
  2921                           	opt stack 0
  2922  0024AC                     _readMAG:
  2923                           	opt stack 20
  2924                           
  2925                           ;ADCFunctionality.c: 29: readADC(1);
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;incstack = 0
  2929  0024AC  0E01               	movlw	1
  2930  0024AE  ECE0  F014         	call	_readADC
  2931                           
  2932                           ;ADCFunctionality.c: 30: int res = ADRESH<<8 | ADRESL;
  2933  0024B2  50C3               	movf	4035,w,c	;volatile
  2934  0024B4  CFC4 F082          	movff	4036,??_readMAG	;volatile
  2935  0024B8  0100               	movlb	0	; () banked
  2936  0024BA  6B83               	clrf	(??_readMAG+1)& (0+255),b
  2937  0024BC  C082  F083         	movff	??_readMAG,??_readMAG+1
  2938  0024C0  0100               	movlb	0	; () banked
  2939  0024C2  6B82               	clrf	??_readMAG& (0+255),b
  2940  0024C4  0100               	movlb	0	; () banked
  2941  0024C6  1182               	iorwf	??_readMAG& (0+255),w,b
  2942  0024C8  0100               	movlb	0	; () banked
  2943  0024CA  6F84               	movwf	readMAG@res& (0+255),b
  2944  0024CC  0100               	movlb	0	; () banked
  2945  0024CE  5183               	movf	(??_readMAG+1)& (0+255),w,b
  2946  0024D0  0100               	movlb	0	; () banked
  2947  0024D2  6F85               	movwf	(readMAG@res+1)& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;ADCFunctionality.c: 31: MAG_signal = (res < THMAG) ? 1 : 0;
  2951  0024D4  0100               	movlb	0	; () banked
  2952  0024D6  51FA               	movf	_THMAG& (0+255),w,b
  2953  0024D8  0100               	movlb	0	; () banked
  2954  0024DA  5D84               	subwf	readMAG@res& (0+255),w,b
  2955  0024DC  0100               	movlb	0	; () banked
  2956  0024DE  5185               	movf	(readMAG@res+1)& (0+255),w,b
  2957  0024E0  0A80               	xorlw	128
  2958  0024E2  0100               	movlb	0	; () banked
  2959  0024E4  6F82               	movwf	??_readMAG& (0+255),b
  2960  0024E6  0100               	movlb	0	; () banked
  2961  0024E8  51FB               	movf	(_THMAG+1)& (0+255),w,b
  2962  0024EA  0A80               	xorlw	128
  2963  0024EC  0100               	movlb	0	; () banked
  2964  0024EE  5982               	subwfb	??_readMAG& (0+255),w,b
  2965  0024F0  B0D8               	btfsc	status,0,c
  2966  0024F2  D002               	goto	u3240
  2967  0024F4  0E01               	movlw	1
  2968  0024F6  D001               	goto	u3250
  2969  0024F8                     u3240:
  2970  0024F8  0E00               	movlw	0
  2971  0024FA                     u3250:
  2972  0024FA  0100               	movlb	0	; () banked
  2973  0024FC  6FE3               	movwf	_MAG_signal& (0+255),b
  2974  0024FE  6BE4               	clrf	(_MAG_signal+1)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977  002500  0012               	return		;funcret
  2978  002502                     __end_of_readMAG:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           prodh	equ	0xFF4
  2985                           prodl	equ	0xFF3
  2986                           postinc0	equ	0xFEE
  2987                           wreg	equ	0xFE8
  2988                           postdec1	equ	0xFE5
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           fsr2h	equ	0xFDA
  2994                           fsr2l	equ	0xFD9
  2995                           status	equ	0xFD8
  2996                           
  2997 ;; *************** function _readADC *****************
  2998 ;; Defined at:
  2999 ;;		line 14 in file "ADCFunctionality.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  channel         1    wreg     unsigned char 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  channel         1    1[BANK0 ] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;Total ram usage:        2 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    7
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_readMAG
  3024 ;;		_readIR
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text9
  3029  0029C0                     __ptext9:
  3030                           	opt stack 0
  3031  0029C0                     _readADC:
  3032                           	opt stack 20
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;incstack = 0
  3036                           ;readADC@channel stored from wreg
  3037  0029C0  0100               	movlb	0	; () banked
  3038  0029C2  6F81               	movwf	readADC@channel& (0+255),b
  3039                           
  3040                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  3041  0029C4  0100               	movlb	0	; () banked
  3042  0029C6  4581               	rlncf	readADC@channel& (0+255),w,b
  3043  0029C8  46E8               	rlncf	wreg,f,c
  3044  0029CA  0BFC               	andlw	252
  3045  0029CC  6EC2               	movwf	4034,c	;volatile
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;ADCFunctionality.c: 17: ADON = 1;
  3049  0029CE  80C2               	bsf	4034,0,c	;volatile
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  3053  0029D0  82C2               	bsf	4034,1,c	;volatile
  3054                           
  3055                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3056  0029D2  D009               	goto	l4286
  3057  0029D4                     l4284:
  3058  0029D4  0E34               	movlw	52
  3059  0029D6  0100               	movlb	0	; () banked
  3060  0029D8  6F80               	movwf	??_readADC& (0+255),b
  3061  0029DA  0EF1               	movlw	241
  3062  0029DC                     u4807:
  3063  0029DC  2EE8               	decfsz	wreg,f,c
  3064  0029DE  D7FE               	bra	u4807
  3065  0029E0  2F80               	decfsz	??_readADC& (0+255),f,b
  3066  0029E2  D7FC               	bra	u4807
  3067  0029E4  D000               	nop2	
  3068  0029E6                     l4286:
  3069  0029E6  A2C2               	btfss	4034,1,c	;volatile
  3070  0029E8  0012               	return	
  3071  0029EA  D7F4               	goto	l4284
  3072  0029EC                     __end_of_readADC:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           postdec1	equ	0xFE5
  3083                           fsr1l	equ	0xFE1
  3084                           indf2	equ	0xFDF
  3085                           postinc2	equ	0xFDE
  3086                           postdec2	equ	0xFDD
  3087                           fsr2h	equ	0xFDA
  3088                           fsr2l	equ	0xFD9
  3089                           status	equ	0xFD8
  3090                           
  3091 ;; *************** function _Distribution *****************
  3092 ;; Defined at:
  3093 ;;		line 124 in file "sort.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;		None
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      void 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;Total ram usage:        2 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    8
  3114 ;; This function calls:
  3115 ;;		_updateServoPosition
  3116 ;; This function is called by:
  3117 ;;		_sort
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text10
  3122  0019C4                     __ptext10:
  3123                           	opt stack 0
  3124  0019C4                     _Distribution:
  3125                           	opt stack 21
  3126                           
  3127                           ;sort.c: 125: if(f_can_coming_to_distribution){
  3128                           
  3129                           ;incstack = 0
  3130  0019C4  0100               	movlb	0	; () banked
  3131  0019C6  51ED               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3132  0019C8  0100               	movlb	0	; () banked
  3133  0019CA  11EE               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3134  0019CC  B4D8               	btfsc	status,2,c
  3135  0019CE  0012               	return	
  3136  0019D0  D034               	goto	l5174
  3137  0019D2                     l5164:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;sort.c: 130: updateServoPosition(1000, 1);
  3141  0019D2  0E03               	movlw	3
  3142  0019D4  0100               	movlb	0	; () banked
  3143  0019D6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3144  0019D8  0EE8               	movlw	232
  3145  0019DA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3146  0019DC  0E00               	movlw	0
  3147  0019DE  0100               	movlb	0	; () banked
  3148  0019E0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3149  0019E2  0E01               	movlw	1
  3150  0019E4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3151  0019E6  EC20  F011         	call	_updateServoPosition	;wreg free
  3152                           
  3153                           ;sort.c: 131: break;
  3154  0019EA  D03E               	goto	l5176
  3155  0019EC                     l5166:
  3156                           
  3157                           ;sort.c: 133: updateServoPosition(1333, 1);
  3158  0019EC  0E05               	movlw	5
  3159  0019EE  0100               	movlb	0	; () banked
  3160  0019F0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3161  0019F2  0E35               	movlw	53
  3162  0019F4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3163  0019F6  0E00               	movlw	0
  3164  0019F8  0100               	movlb	0	; () banked
  3165  0019FA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3166  0019FC  0E01               	movlw	1
  3167  0019FE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3168  001A00  EC20  F011         	call	_updateServoPosition	;wreg free
  3169                           
  3170                           ;sort.c: 134: break;
  3171  001A04  D031               	goto	l5176
  3172  001A06                     l5168:
  3173                           
  3174                           ;sort.c: 136: updateServoPosition(1666, 1);
  3175  001A06  0E06               	movlw	6
  3176  001A08  0100               	movlb	0	; () banked
  3177  001A0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3178  001A0C  0E82               	movlw	130
  3179  001A0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3180  001A10  0E00               	movlw	0
  3181  001A12  0100               	movlb	0	; () banked
  3182  001A14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3183  001A16  0E01               	movlw	1
  3184  001A18  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3185  001A1A  EC20  F011         	call	_updateServoPosition	;wreg free
  3186                           
  3187                           ;sort.c: 137: break;
  3188  001A1E  D024               	goto	l5176
  3189  001A20                     l5170:
  3190                           
  3191                           ;sort.c: 139: updateServoPosition(2000, 1);
  3192  001A20  0E07               	movlw	7
  3193  001A22  0100               	movlb	0	; () banked
  3194  001A24  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3195  001A26  0ED0               	movlw	208
  3196  001A28  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3197  001A2A  0E00               	movlw	0
  3198  001A2C  0100               	movlb	0	; () banked
  3199  001A2E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3200  001A30  0E01               	movlw	1
  3201  001A32  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3202  001A34  EC20  F011         	call	_updateServoPosition	;wreg free
  3203                           
  3204                           ;sort.c: 143: }
  3205                           
  3206                           ;sort.c: 142: break;
  3207                           
  3208                           ;sort.c: 141: default:
  3209                           
  3210                           ;sort.c: 140: break;
  3211  001A38  D017               	goto	l5176
  3212  001A3A                     l5174:
  3213  001A3A  C0E7  F088         	movff	_cur_can,??_Distribution
  3214  001A3E  C0E8  F089         	movff	_cur_can+1,??_Distribution+1
  3215                           
  3216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3217                           ; Switch size 1, requested type "space"
  3218                           ; Number of cases is 1, Range of values is 0 to 0
  3219                           ; switch strategies available:
  3220                           ; Name         Instructions Cycles
  3221                           ; simple_byte            4     3 (average)
  3222                           ;	Chosen strategy is simple_byte
  3223  001A42  0100               	movlb	0	; () banked
  3224  001A44  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3225  001A46  0A00               	xorlw	0	; case 0
  3226  001A48  A4D8               	btfss	status,2,c
  3227  001A4A  D00E               	goto	l5176
  3228                           
  3229                           ; BSR set to: 0
  3230                           ; Switch size 1, requested type "space"
  3231                           ; Number of cases is 4, Range of values is 0 to 3
  3232                           ; switch strategies available:
  3233                           ; Name         Instructions Cycles
  3234                           ; simple_byte           13     7 (average)
  3235                           ;	Chosen strategy is simple_byte
  3236  001A4C  0100               	movlb	0	; () banked
  3237  001A4E  5188               	movf	??_Distribution& (0+255),w,b
  3238  001A50  0A00               	xorlw	0	; case 0
  3239  001A52  B4D8               	btfsc	status,2,c
  3240  001A54  D7BE               	goto	l5164
  3241  001A56  0A01               	xorlw	1	; case 1
  3242  001A58  B4D8               	btfsc	status,2,c
  3243  001A5A  D7C8               	goto	l5166
  3244  001A5C  0A03               	xorlw	3	; case 2
  3245  001A5E  B4D8               	btfsc	status,2,c
  3246  001A60  D7D2               	goto	l5168
  3247  001A62  0A01               	xorlw	1	; case 3
  3248  001A64  B4D8               	btfsc	status,2,c
  3249  001A66  D7DC               	goto	l5170
  3250  001A68                     l5176:
  3251                           
  3252                           ;sort.c: 144: _delay((unsigned long)((500)*(32000000/4000.0)));
  3253  001A68  0E15               	movlw	21
  3254  001A6A  0100               	movlb	0	; () banked
  3255  001A6C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3256  001A6E  0E4B               	movlw	75
  3257  001A70  0100               	movlb	0	; () banked
  3258  001A72  6F88               	movwf	??_Distribution& (0+255),b
  3259  001A74  0EBE               	movlw	190
  3260  001A76                     u4817:
  3261  001A76  2EE8               	decfsz	wreg,f,c
  3262  001A78  D7FE               	bra	u4817
  3263  001A7A  2F88               	decfsz	??_Distribution& (0+255),f,b
  3264  001A7C  D7FC               	bra	u4817
  3265  001A7E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3266  001A80  D7FA               	bra	u4817
  3267  001A82  F000               	nop	
  3268                           
  3269                           ;sort.c: 147: updateServoPosition(1500, 3);
  3270  001A84  0E05               	movlw	5
  3271  001A86  0100               	movlb	0	; () banked
  3272  001A88  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3273  001A8A  0EDC               	movlw	220
  3274  001A8C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3275  001A8E  0E00               	movlw	0
  3276  001A90  0100               	movlb	0	; () banked
  3277  001A92  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3278  001A94  0E03               	movlw	3
  3279  001A96  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3280  001A98  EC20  F011         	call	_updateServoPosition	;wreg free
  3281                           
  3282                           ;sort.c: 148: _delay((unsigned long)((500)*(32000000/4000.0)));
  3283  001A9C  0E15               	movlw	21
  3284  001A9E  0100               	movlb	0	; () banked
  3285  001AA0  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3286  001AA2  0E4B               	movlw	75
  3287  001AA4  0100               	movlb	0	; () banked
  3288  001AA6  6F88               	movwf	??_Distribution& (0+255),b
  3289  001AA8  0EBE               	movlw	190
  3290  001AAA                     u4827:
  3291  001AAA  2EE8               	decfsz	wreg,f,c
  3292  001AAC  D7FE               	bra	u4827
  3293  001AAE  2F88               	decfsz	??_Distribution& (0+255),f,b
  3294  001AB0  D7FC               	bra	u4827
  3295  001AB2  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  3296  001AB4  D7FA               	bra	u4827
  3297  001AB6  F000               	nop	
  3298                           
  3299                           ;sort.c: 151: updateServoPosition(1500, 1);
  3300  001AB8  0E05               	movlw	5
  3301  001ABA  0100               	movlb	0	; () banked
  3302  001ABC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3303  001ABE  0EDC               	movlw	220
  3304  001AC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3305  001AC2  0E00               	movlw	0
  3306  001AC4  0100               	movlb	0	; () banked
  3307  001AC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3308  001AC8  0E01               	movlw	1
  3309  001ACA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3310  001ACC  EC20  F011         	call	_updateServoPosition	;wreg free
  3311                           
  3312                           ;sort.c: 152: updateServoPosition(1000, 3);
  3313  001AD0  0E03               	movlw	3
  3314  001AD2  0100               	movlb	0	; () banked
  3315  001AD4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3316  001AD6  0EE8               	movlw	232
  3317  001AD8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3318  001ADA  0E00               	movlw	0
  3319  001ADC  0100               	movlb	0	; () banked
  3320  001ADE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3321  001AE0  0E03               	movlw	3
  3322  001AE2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3323  001AE4  EC20  F011         	call	_updateServoPosition	;wreg free
  3324                           
  3325                           ;sort.c: 153: f_can_coming_to_distribution = 0;
  3326  001AE8  0E00               	movlw	0
  3327  001AEA  0100               	movlb	0	; () banked
  3328  001AEC  6FEE               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3329  001AEE  0E00               	movlw	0
  3330  001AF0  6FED               	movwf	_f_can_coming_to_distribution& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;sort.c: 154: f_can_distributed = 1;
  3334  001AF2  0E00               	movlw	0
  3335  001AF4  6E72               	movwf	_f_can_distributed+1,c
  3336  001AF6  0E01               	movlw	1
  3337  001AF8  6E71               	movwf	_f_can_distributed,c
  3338  001AFA  0012               	return	
  3339  001AFC                     __end_of_Distribution:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           prodh	equ	0xFF4
  3346                           prodl	equ	0xFF3
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _updateServoPosition *****************
  3359 ;; Defined at:
  3360 ;;		line 233 in file "sort.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  time_us         2    0[BANK0 ] int 
  3363 ;;  timer           2    2[BANK0 ] int 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  my_time         2    6[BANK0 ] unsigned int 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, status,2, status,0
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:        8 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    7
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_Distribution
  3386 ;;		_initServos
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text11
  3391  002240                     __ptext11:
  3392                           	opt stack 0
  3393  002240                     _updateServoPosition:
  3394                           	opt stack 20
  3395                           
  3396                           ;sort.c: 234: unsigned int my_time = 65535 - time_us;
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;incstack = 0
  3400  002240  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  3401  002244  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  3402  002248  0100               	movlb	0	; () banked
  3403  00224A  1F84               	comf	??_updateServoPosition& (0+255),f,b
  3404  00224C  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  3405  00224E  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  3406  002250  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  3407  002252  0EFF               	movlw	255
  3408  002254  0100               	movlb	0	; () banked
  3409  002256  2584               	addwf	??_updateServoPosition& (0+255),w,b
  3410  002258  0100               	movlb	0	; () banked
  3411  00225A  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  3412  00225C  0EFF               	movlw	255
  3413  00225E  0100               	movlb	0	; () banked
  3414  002260  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  3415  002262  0100               	movlb	0	; () banked
  3416  002264  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  3417                           
  3418                           ;sort.c: 235: switch(timer){
  3419  002266  D015               	goto	l4446
  3420  002268                     l4444:
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;sort.c: 237: servoTimes[0] = my_time >> 8;
  3424  002268  0100               	movlb	0	; () banked
  3425  00226A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3426  00226C  0100               	movlb	0	; () banked
  3427  00226E  6FD4               	movwf	_servoTimes& (0+255),b
  3428  002270  6BD5               	clrf	(_servoTimes+1)& (0+255),b
  3429                           
  3430                           ;sort.c: 238: servoTimes[1] = my_time & 0xFF;
  3431  002272  0100               	movlb	0	; () banked
  3432  002274  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3433  002276  0100               	movlb	0	; () banked
  3434  002278  6FD6               	movwf	(_servoTimes+2)& (0+255),b
  3435  00227A  6BD7               	clrf	(_servoTimes+3)& (0+255),b
  3436  00227C                     l1168:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;sort.c: 240: servoTimes[2] = my_time >> 8;
  3440  00227C  0100               	movlb	0	; () banked
  3441  00227E  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  3442  002280  0100               	movlb	0	; () banked
  3443  002282  6FD8               	movwf	(_servoTimes+4)& (0+255),b
  3444  002284  6BD9               	clrf	(_servoTimes+5)& (0+255),b
  3445                           
  3446                           ;sort.c: 241: servoTimes[3] = my_time & 0xFF;
  3447  002286  0100               	movlb	0	; () banked
  3448  002288  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  3449  00228A  0100               	movlb	0	; () banked
  3450  00228C  6FDA               	movwf	(_servoTimes+6)& (0+255),b
  3451  00228E  6BDB               	clrf	(_servoTimes+7)& (0+255),b
  3452                           
  3453                           ;sort.c: 242: }
  3454  002290  0012               	return	
  3455  002292                     l4446:
  3456                           
  3457                           ; BSR set to: 0
  3458  002292  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  3459  002296  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  3460                           
  3461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3462                           ; Switch size 1, requested type "space"
  3463                           ; Number of cases is 1, Range of values is 0 to 0
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte            4     3 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  00229A  0100               	movlb	0	; () banked
  3469  00229C  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  3470  00229E  0A00               	xorlw	0	; case 0
  3471  0022A0  A4D8               	btfss	status,2,c
  3472  0022A2  0012               	return	
  3473                           
  3474                           ; BSR set to: 0
  3475                           ; Switch size 1, requested type "space"
  3476                           ; Number of cases is 2, Range of values is 1 to 3
  3477                           ; switch strategies available:
  3478                           ; Name         Instructions Cycles
  3479                           ; simple_byte            7     4 (average)
  3480                           ;	Chosen strategy is simple_byte
  3481  0022A4  0100               	movlb	0	; () banked
  3482  0022A6  5184               	movf	??_updateServoPosition& (0+255),w,b
  3483  0022A8  0A01               	xorlw	1	; case 1
  3484  0022AA  B4D8               	btfsc	status,2,c
  3485  0022AC  D7DD               	goto	l4444
  3486  0022AE  0A02               	xorlw	2	; case 3
  3487  0022B0  A4D8               	btfss	status,2,c
  3488  0022B2  0012               	return	
  3489  0022B4  D7E3               	goto	l1168
  3490  0022B6                     __end_of_updateServoPosition:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postdec1	equ	0xFE5
  3501                           fsr1l	equ	0xFE1
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           fsr2h	equ	0xFDA
  3506                           fsr2l	equ	0xFD9
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function _machineConfig *****************
  3510 ;; Defined at:
  3511 ;;		line 14 in file "MachineConfig.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;		None
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        0 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    7
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		_main
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text12
  3540  002452                     __ptext12:
  3541                           	opt stack 0
  3542  002452                     _machineConfig:
  3543                           	opt stack 23
  3544                           
  3545                           ;MachineConfig.c: 16: OSCCON = 0xF0;
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;incstack = 0
  3549  002452  0EF0               	movlw	240
  3550  002454  6ED3               	movwf	4051,c	;volatile
  3551                           
  3552                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3553  002456  8C9B               	bsf	3995,6,c	;volatile
  3554                           
  3555                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3556  002458  0E47               	movlw	71
  3557  00245A  6E92               	movwf	3986,c	;volatile
  3558                           
  3559                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3560  00245C  0EF2               	movlw	242
  3561  00245E  6E93               	movwf	3987,c	;volatile
  3562                           
  3563                           ;MachineConfig.c: 26: TRISC = 0x00;
  3564  002460  0E00               	movlw	0
  3565  002462  6E94               	movwf	3988,c	;volatile
  3566                           
  3567                           ;MachineConfig.c: 30: TRISD = 0x00;
  3568  002464  0E00               	movlw	0
  3569  002466  6E95               	movwf	3989,c	;volatile
  3570                           
  3571                           ;MachineConfig.c: 33: TRISE = 0x00;
  3572  002468  0E00               	movlw	0
  3573  00246A  6E96               	movwf	3990,c	;volatile
  3574                           
  3575                           ;MachineConfig.c: 36: LATA = 0x00;
  3576  00246C  0E00               	movlw	0
  3577  00246E  6E89               	movwf	3977,c	;volatile
  3578                           
  3579                           ;MachineConfig.c: 37: LATB = 0x00;
  3580  002470  0E00               	movlw	0
  3581  002472  6E8A               	movwf	3978,c	;volatile
  3582                           
  3583                           ;MachineConfig.c: 38: LATC = 0x00;
  3584  002474  0E00               	movlw	0
  3585  002476  6E8B               	movwf	3979,c	;volatile
  3586                           
  3587                           ;MachineConfig.c: 39: LATD = 0x00;
  3588  002478  0E00               	movlw	0
  3589  00247A  6E8C               	movwf	3980,c	;volatile
  3590                           
  3591                           ;MachineConfig.c: 40: LATE = 0x00;
  3592  00247C  0E00               	movlw	0
  3593  00247E  6E8D               	movwf	3981,c	;volatile
  3594                           
  3595                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3596  002480  0E00               	movlw	0
  3597  002482  6EC2               	movwf	4034,c	;volatile
  3598                           
  3599                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3600  002484  0E0D               	movlw	13
  3601  002486  6EC1               	movwf	4033,c	;volatile
  3602                           
  3603                           ;MachineConfig.c: 47: VCFG1 = 0;
  3604  002488  9AC1               	bcf	4033,5,c	;volatile
  3605                           
  3606                           ;MachineConfig.c: 48: VCFG0 = 0;
  3607  00248A  98C1               	bcf	4033,4,c	;volatile
  3608                           
  3609                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3610  00248C  0E00               	movlw	0
  3611  00248E  6EB5               	movwf	4021,c	;volatile
  3612                           
  3613                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3614  002490  96B4               	bcf	4020,3,c	;volatile
  3615                           
  3616                           ;MachineConfig.c: 51: ADFM = 1;
  3617  002492  8EC0               	bsf	4032,7,c	;volatile
  3618                           
  3619                           ;MachineConfig.c: 52: nRBPU = 0;
  3620  002494  9EF1               	bcf	intcon2,7,c	;volatile
  3621                           
  3622                           ;MachineConfig.c: 55: INT1IE = 1;
  3623  002496  86F0               	bsf	intcon3,3,c	;volatile
  3624                           
  3625                           ;MachineConfig.c: 57: TMR0IE = 1;
  3626  002498  8AF2               	bsf	intcon,5,c	;volatile
  3627                           
  3628                           ;MachineConfig.c: 58: TMR1IE = 1;
  3629  00249A  809D               	bsf	3997,0,c	;volatile
  3630                           
  3631                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  3632  00249C  0EB0               	movlw	176
  3633  00249E  6ECD               	movwf	4045,c	;volatile
  3634                           
  3635                           ;MachineConfig.c: 60: TMR2IE = 1;
  3636  0024A0  829D               	bsf	3997,1,c	;volatile
  3637                           
  3638                           ;MachineConfig.c: 61: TMR3IE = 1;
  3639  0024A2  82A0               	bsf	4000,1,c	;volatile
  3640                           
  3641                           ;MachineConfig.c: 62: PEIE = 1;
  3642  0024A4  8CF2               	bsf	intcon,6,c	;volatile
  3643                           
  3644                           ;MachineConfig.c: 64: ADIE = 1;
  3645  0024A6  8C9D               	bsf	3997,6,c	;volatile
  3646                           
  3647                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  3648  0024A8  9EF2               	bcf	intcon,7,c	;volatile
  3649  0024AA  0012               	return		;funcret
  3650  0024AC                     __end_of_machineConfig:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           intcon2	equ	0xFF1
  3660                           intcon3	equ	0xFF0
  3661                           postinc0	equ	0xFEE
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _initUI *****************
  3673 ;; Defined at:
  3674 ;;		line 61 in file "UI.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      void 
  3681 ;; Registers used:
  3682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;Total ram usage:        0 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:   12
  3695 ;; This function calls:
  3696 ;;		_change_state_to_menu_start
  3697 ;;		_loadRTC
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text13
  3704  002B18                     __ptext13:
  3705                           	opt stack 0
  3706  002B18                     _initUI:
  3707                           	opt stack 18
  3708                           
  3709                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3710                           
  3711                           ;incstack = 0
  3712  002B18  8EF2               	bsf	intcon,7,c	;volatile
  3713                           
  3714                           ;UI.c: 63: machine_state = UI_state;
  3715  002B1A  0E00               	movlw	0
  3716  002B1C  0100               	movlb	0	; () banked
  3717  002B1E  6FF9               	movwf	_machine_state& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;UI.c: 65: loadRTC();
  3721  002B20  ECD4  F00F         	call	_loadRTC	;wreg free
  3722                           
  3723                           ;UI.c: 67: change_state_to_menu_start();
  3724  002B24  ECF6  F014         	call	_change_state_to_menu_start	;wreg free
  3725                           
  3726                           ;UI.c: 68: firstboot = 1;
  3727  002B28  0E00               	movlw	0
  3728  002B2A  6E74               	movwf	_firstboot+1,c
  3729  002B2C  0E01               	movlw	1
  3730  002B2E  6E73               	movwf	_firstboot,c
  3731  002B30  0012               	return		;funcret
  3732  002B32                     __end_of_initUI:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           intcon2	equ	0xFF1
  3742                           intcon3	equ	0xFF0
  3743                           postinc0	equ	0xFEE
  3744                           wreg	equ	0xFE8
  3745                           postdec1	equ	0xFE5
  3746                           fsr1l	equ	0xFE1
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _loadRTC *****************
  3755 ;; Defined at:
  3756 ;;		line 27 in file "RTC.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  i               2   22[BANK0 ] int 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        3 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    9
  3777 ;; This function calls:
  3778 ;;		_I2C_Master_Init
  3779 ;;		_I2C_Master_Start
  3780 ;;		_I2C_Master_Stop
  3781 ;;		_I2C_Master_Write
  3782 ;; This function is called by:
  3783 ;;		_initUI
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text14
  3788  001FA8                     __ptext14:
  3789                           	opt stack 0
  3790  001FA8                     _loadRTC:
  3791                           	opt stack 20
  3792                           
  3793                           ;RTC.c: 29: I2C_Master_Init(10000);
  3794                           
  3795                           ;incstack = 0
  3796  001FA8  0E10               	movlw	16
  3797  001FAA  0100               	movlb	0	; () banked
  3798  001FAC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3799  001FAE  0E27               	movlw	39
  3800  001FB0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3801  001FB2  0E00               	movlw	0
  3802  001FB4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3803  001FB6  0E00               	movlw	0
  3804  001FB8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3805  001FBA  ECF9  F011         	call	_I2C_Master_Init	;wreg free
  3806                           
  3807                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3808  001FBE  9EF2               	bcf	intcon,7,c	;volatile
  3809                           
  3810                           ;RTC.c: 33: I2C_Master_Start();
  3811  001FC0  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  3812                           
  3813                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3814  001FC4  0E00               	movlw	0
  3815  001FC6  0100               	movlb	0	; () banked
  3816  001FC8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3817  001FCA  0ED0               	movlw	208
  3818  001FCC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3819  001FCE  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  3820                           
  3821                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3822  001FD2  0E00               	movlw	0
  3823  001FD4  0100               	movlb	0	; () banked
  3824  001FD6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3825  001FD8  0E00               	movlw	0
  3826  001FDA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3827  001FDC  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  3828                           
  3829                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3830  001FE0  0E00               	movlw	0
  3831  001FE2  0100               	movlb	0	; () banked
  3832  001FE4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3833  001FE6  0E00               	movlw	0
  3834  001FE8  6F96               	movwf	loadRTC@i& (0+255),b
  3835  001FEA                     l4880:
  3836                           
  3837                           ; BSR set to: 0
  3838  001FEA  0100               	movlb	0	; () banked
  3839  001FEC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3840  001FEE  D008               	goto	l4884
  3841  001FF0  0100               	movlb	0	; () banked
  3842  001FF2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3843  001FF4  E11B               	bnz	l4890
  3844  001FF6  0E07               	movlw	7
  3845  001FF8  0100               	movlb	0	; () banked
  3846  001FFA  5D96               	subwf	loadRTC@i& (0+255),w,b
  3847  001FFC  B0D8               	btfsc	status,0,c
  3848  001FFE  D016               	goto	l4890
  3849  002000                     l4884:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3853  002000  0EDC               	movlw	low _time
  3854  002002  0100               	movlb	0	; () banked
  3855  002004  2596               	addwf	loadRTC@i& (0+255),w,b
  3856  002006  6ED9               	movwf	fsr2l,c
  3857  002008  0E00               	movlw	high _time
  3858  00200A  0100               	movlb	0	; () banked
  3859  00200C  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3860  00200E  6EDA               	movwf	fsr2h,c
  3861  002010  50DF               	movf	indf2,w,c
  3862  002012  0100               	movlb	0	; () banked
  3863  002014  6F95               	movwf	??_loadRTC& (0+255),b
  3864  002016  0100               	movlb	0	; () banked
  3865  002018  5195               	movf	??_loadRTC& (0+255),w,b
  3866  00201A  0100               	movlb	0	; () banked
  3867  00201C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3868  00201E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3869  002020  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  3870  002024  0100               	movlb	0	; () banked
  3871  002026  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3872  002028  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3873  00202A  D7DF               	goto	l4880
  3874  00202C                     l4890:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;RTC.c: 38: }
  3878                           ;RTC.c: 39: I2C_Master_Stop();
  3879  00202C  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  3880                           
  3881                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3882  002030  8EF2               	bsf	intcon,7,c	;volatile
  3883  002032  0012               	return		;funcret
  3884  002034                     __end_of_loadRTC:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           prodh	equ	0xFF4
  3891                           prodl	equ	0xFF3
  3892                           intcon	equ	0xFF2
  3893                           intcon2	equ	0xFF1
  3894                           intcon3	equ	0xFF0
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           postdec1	equ	0xFE5
  3898                           fsr1l	equ	0xFE1
  3899                           indf2	equ	0xFDF
  3900                           postinc2	equ	0xFDE
  3901                           postdec2	equ	0xFDD
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _I2C_Master_Init *****************
  3907 ;; Defined at:
  3908 ;;		line 14 in file "I2C.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  c               4   13[BANK0 ] const unsigned long 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3922 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;Total ram usage:        8 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    8
  3929 ;; This function calls:
  3930 ;;		___lldiv
  3931 ;; This function is called by:
  3932 ;;		_loadRTC
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text15
  3937  0023F2                     __ptext15:
  3938                           	opt stack 0
  3939  0023F2                     _I2C_Master_Init:
  3940                           	opt stack 20
  3941                           
  3942                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  3943                           
  3944                           ;incstack = 0
  3945  0023F2  0E00               	movlw	0
  3946  0023F4  6EC7               	movwf	4039,c	;volatile
  3947                           
  3948                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  3949  0023F6  0E28               	movlw	40
  3950  0023F8  6EC6               	movwf	4038,c	;volatile
  3951                           
  3952                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  3953  0023FA  0E00               	movlw	0
  3954  0023FC  6EC5               	movwf	4037,c	;volatile
  3955                           
  3956                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  3957  0023FE  0E00               	movlw	0
  3958  002400  0100               	movlb	0	; () banked
  3959  002402  6F80               	movwf	___lldiv@dividend& (0+255),b
  3960  002404  0E48               	movlw	72
  3961  002406  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3962  002408  0EE8               	movlw	232
  3963  00240A  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3964  00240C  0E01               	movlw	1
  3965  00240E  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3966  002410  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3967  002414  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3968  002418  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3969  00241C  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3970  002420  0E02               	movlw	2
  3971  002422                     u3265:
  3972  002422  90D8               	bcf	status,0,c
  3973  002424  0100               	movlb	0	; () banked
  3974  002426  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3975  002428  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3976  00242A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3977  00242C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3978  00242E  2EE8               	decfsz	wreg,f,c
  3979  002430  D7F8               	goto	u3265
  3980  002432  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3981  002436  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3982  00243A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3983  00243E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3984  002442  EC75  F00E         	call	___lldiv	;wreg free
  3985  002446  0100               	movlb	0	; () banked
  3986  002448  0580               	decf	?___lldiv& (0+255),w,b
  3987  00244A  6EC8               	movwf	4040,c	;volatile
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;I2C.c: 21: TRISC3 = 1;
  3991  00244C  8694               	bsf	3988,3,c	;volatile
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;I2C.c: 22: TRISC4 = 1;
  3995  00244E  8894               	bsf	3988,4,c	;volatile
  3996                           
  3997                           ; BSR set to: 0
  3998  002450  0012               	return		;funcret
  3999  002452                     __end_of_I2C_Master_Init:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           intcon2	equ	0xFF1
  4009                           intcon3	equ	0xFF0
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           postdec1	equ	0xFE5
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           postdec2	equ	0xFDD
  4017                           fsr2h	equ	0xFDA
  4018                           fsr2l	equ	0xFD9
  4019                           status	equ	0xFD8
  4020                           
  4021 ;; *************** function ___lldiv *****************
  4022 ;; Defined at:
  4023 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  dividend        4    0[BANK0 ] unsigned long 
  4026 ;;  divisor         4    4[BANK0 ] unsigned long 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  quotient        4    8[BANK0 ] unsigned long 
  4029 ;;  counter         1   12[BANK0 ] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  4    0[BANK0 ] unsigned long 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4039 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;Total ram usage:       13 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    7
  4046 ;; This function calls:
  4047 ;;		Nothing
  4048 ;; This function is called by:
  4049 ;;		_I2C_Master_Init
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text16
  4054  001CEA                     __ptext16:
  4055                           	opt stack 0
  4056  001CEA                     ___lldiv:
  4057                           	opt stack 20
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;incstack = 0
  4061  001CEA  0E00               	movlw	0
  4062  001CEC  0100               	movlb	0	; () banked
  4063  001CEE  6F88               	movwf	___lldiv@quotient& (0+255),b
  4064  001CF0  0E00               	movlw	0
  4065  001CF2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4066  001CF4  0E00               	movlw	0
  4067  001CF6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4068  001CF8  0E00               	movlw	0
  4069  001CFA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072  001CFC  0100               	movlb	0	; () banked
  4073  001CFE  5184               	movf	___lldiv@divisor& (0+255),w,b
  4074  001D00  0100               	movlb	0	; () banked
  4075  001D02  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4076  001D04  0100               	movlb	0	; () banked
  4077  001D06  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4078  001D08  0100               	movlb	0	; () banked
  4079  001D0A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4080  001D0C  B4D8               	btfsc	status,2,c
  4081  001D0E  D042               	goto	l1698
  4082                           
  4083                           ; BSR set to: 0
  4084  001D10  0E01               	movlw	1
  4085  001D12  0100               	movlb	0	; () banked
  4086  001D14  6F8C               	movwf	___lldiv@counter& (0+255),b
  4087  001D16  D008               	goto	l4460
  4088  001D18                     l4458:
  4089                           
  4090                           ; BSR set to: 0
  4091  001D18  0100               	movlb	0	; () banked
  4092  001D1A  90D8               	bcf	status,0,c
  4093  001D1C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4094  001D1E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4095  001D20  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4096  001D22  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4097  001D24  0100               	movlb	0	; () banked
  4098  001D26  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4099  001D28                     l4460:
  4100                           
  4101                           ; BSR set to: 0
  4102  001D28  0100               	movlb	0	; () banked
  4103  001D2A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4104  001D2C  D7F5               	goto	l4458
  4105  001D2E                     l4462:
  4106                           
  4107                           ; BSR set to: 0
  4108  001D2E  0100               	movlb	0	; () banked
  4109  001D30  90D8               	bcf	status,0,c
  4110  001D32  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4111  001D34  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4112  001D36  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4113  001D38  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4114                           
  4115                           ; BSR set to: 0
  4116  001D3A  0100               	movlb	0	; () banked
  4117  001D3C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4118  001D3E  0100               	movlb	0	; () banked
  4119  001D40  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4120  001D42  0100               	movlb	0	; () banked
  4121  001D44  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4122  001D46  0100               	movlb	0	; () banked
  4123  001D48  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4124  001D4A  0100               	movlb	0	; () banked
  4125  001D4C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4126  001D4E  0100               	movlb	0	; () banked
  4127  001D50  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4128  001D52  0100               	movlb	0	; () banked
  4129  001D54  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4130  001D56  0100               	movlb	0	; () banked
  4131  001D58  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4132  001D5A  A0D8               	btfss	status,0,c
  4133  001D5C  D012               	goto	l4470
  4134                           
  4135                           ; BSR set to: 0
  4136  001D5E  0100               	movlb	0	; () banked
  4137  001D60  5184               	movf	___lldiv@divisor& (0+255),w,b
  4138  001D62  0100               	movlb	0	; () banked
  4139  001D64  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4140  001D66  0100               	movlb	0	; () banked
  4141  001D68  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4142  001D6A  0100               	movlb	0	; () banked
  4143  001D6C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4144  001D6E  0100               	movlb	0	; () banked
  4145  001D70  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4146  001D72  0100               	movlb	0	; () banked
  4147  001D74  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4148  001D76  0100               	movlb	0	; () banked
  4149  001D78  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4150  001D7A  0100               	movlb	0	; () banked
  4151  001D7C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4152                           
  4153                           ; BSR set to: 0
  4154  001D7E  0100               	movlb	0	; () banked
  4155  001D80  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4156  001D82                     l4470:
  4157                           
  4158                           ; BSR set to: 0
  4159  001D82  0100               	movlb	0	; () banked
  4160  001D84  90D8               	bcf	status,0,c
  4161  001D86  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4162  001D88  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4163  001D8A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4164  001D8C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4165                           
  4166                           ; BSR set to: 0
  4167  001D8E  0100               	movlb	0	; () banked
  4168  001D90  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4169  001D92  D7CD               	goto	l4462
  4170  001D94                     l1698:
  4171                           
  4172                           ; BSR set to: 0
  4173  001D94  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4174  001D98  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4175  001D9C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4176  001DA0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4177                           
  4178                           ; BSR set to: 0
  4179  001DA4  0012               	return		;funcret
  4180  001DA6                     __end_of___lldiv:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           intcon2	equ	0xFF1
  4190                           intcon3	equ	0xFF0
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _change_state_to_menu_start *****************
  4203 ;; Defined at:
  4204 ;;		line 416 in file "UI.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:   11
  4225 ;; This function calls:
  4226 ;;		_lcdInst
  4227 ;;		_printRTC
  4228 ;;		_printf
  4229 ;; This function is called by:
  4230 ;;		_initUI
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text17
  4235  0029EC                     __ptext17:
  4236                           	opt stack 0
  4237  0029EC                     _change_state_to_menu_start:
  4238                           	opt stack 18
  4239                           
  4240                           ;UI.c: 417: cur_state = 0;
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;incstack = 0
  4244  0029EC  0E00               	movlw	0
  4245  0029EE  0100               	movlb	0	; () banked
  4246  0029F0  6FEA               	movwf	(_cur_state+1)& (0+255),b
  4247  0029F2  0E00               	movlw	0
  4248  0029F4  6FE9               	movwf	_cur_state& (0+255),b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;UI.c: 419: lcdInst(0b10000000);;
  4252  0029F6  0E80               	movlw	128
  4253  0029F8  ECD2  F015         	call	_lcdInst
  4254                           
  4255                           ;UI.c: 420: printRTC();
  4256  0029FC  EC63  F006         	call	_printRTC	;wreg free
  4257                           
  4258                           ;UI.c: 421: lcdInst(0b11000000);;
  4259  002A00  0EC0               	movlw	192
  4260  002A02  ECD2  F015         	call	_lcdInst
  4261                           
  4262                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4263  002A06  0E97               	movlw	low STR_15
  4264  002A08  0100               	movlb	0	; () banked
  4265  002A0A  6F8E               	movwf	printf@f& (0+255),b
  4266  002A0C  0EFF               	movlw	high STR_15
  4267  002A0E  0100               	movlb	0	; () banked
  4268  002A10  6F8F               	movwf	(printf@f+1)& (0+255),b
  4269  002A12  ECBB  F002         	call	_printf	;wreg free
  4270  002A16  0012               	return		;funcret
  4271  002A18                     __end_of_change_state_to_menu_start:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           prodh	equ	0xFF4
  4278                           prodl	equ	0xFF3
  4279                           intcon	equ	0xFF2
  4280                           intcon2	equ	0xFF1
  4281                           intcon3	equ	0xFF0
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postdec1	equ	0xFE5
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           postdec2	equ	0xFDD
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _initTime *****************
  4294 ;; Defined at:
  4295 ;;		line 16 in file "RTC.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  s               1    wreg     unsigned char 
  4298 ;;  m               1    0[BANK0 ] unsigned char 
  4299 ;;  h               1    1[BANK0 ] unsigned char 
  4300 ;;  w               1    2[BANK0 ] unsigned char 
  4301 ;;  DD              1    3[BANK0 ] unsigned char 
  4302 ;;  MM              1    4[BANK0 ] unsigned char 
  4303 ;;  YY              1    5[BANK0 ] unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  s               1    6[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        7 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    7
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text18
  4330  002AD8                     __ptext18:
  4331                           	opt stack 0
  4332  002AD8                     _initTime:
  4333                           	opt stack 23
  4334                           
  4335                           ;incstack = 0
  4336                           ;initTime@s stored from wreg
  4337  002AD8  0100               	movlb	0	; () banked
  4338  002ADA  6F86               	movwf	initTime@s& (0+255),b
  4339                           
  4340                           ;RTC.c: 18: time[0] = s;
  4341  002ADC  C086  F0DC         	movff	initTime@s,_time
  4342                           
  4343                           ;RTC.c: 19: time[1] = m;
  4344  002AE0  C080  F0DD         	movff	initTime@m,_time+1
  4345                           
  4346                           ;RTC.c: 20: time[2] = h;
  4347  002AE4  C081  F0DE         	movff	initTime@h,_time+2
  4348                           
  4349                           ;RTC.c: 21: time[3] = w;
  4350  002AE8  C082  F0DF         	movff	initTime@w,_time+3
  4351                           
  4352                           ;RTC.c: 22: time[4] = DD;
  4353  002AEC  C083  F0E0         	movff	initTime@DD,_time+4
  4354                           
  4355                           ;RTC.c: 23: time[5] = MM;
  4356  002AF0  C084  F0E1         	movff	initTime@MM,_time+5
  4357                           
  4358                           ;RTC.c: 24: time[6] = YY;
  4359  002AF4  C085  F0E2         	movff	initTime@YY,_time+6
  4360  002AF8  0012               	return		;funcret
  4361  002AFA                     __end_of_initTime:
  4362                           	opt stack 0
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           intcon	equ	0xFF2
  4370                           intcon2	equ	0xFF1
  4371                           intcon3	equ	0xFF0
  4372                           postinc0	equ	0xFEE
  4373                           wreg	equ	0xFE8
  4374                           postdec1	equ	0xFE5
  4375                           fsr1l	equ	0xFE1
  4376                           indf2	equ	0xFDF
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function _initLCD *****************
  4384 ;; Defined at:
  4385 ;;		line 47 in file "lcd.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        1 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    9
  4406 ;; This function calls:
  4407 ;;		_lcdInst
  4408 ;; This function is called by:
  4409 ;;		_main
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text19
  4414  0025AA                     __ptext19:
  4415                           	opt stack 0
  4416  0025AA                     _initLCD:
  4417                           	opt stack 21
  4418                           
  4419                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4420                           
  4421                           ;incstack = 0
  4422  0025AA  0E9C               	movlw	156
  4423  0025AC  0100               	movlb	0	; () banked
  4424  0025AE  6F83               	movwf	??_initLCD& (0+255),b
  4425  0025B0  0ED7               	movlw	215
  4426  0025B2                     u4837:
  4427  0025B2  2EE8               	decfsz	wreg,f,c
  4428  0025B4  D7FE               	bra	u4837
  4429  0025B6  2F83               	decfsz	??_initLCD& (0+255),f,b
  4430  0025B8  D7FC               	bra	u4837
  4431                           
  4432                           ;lcd.c: 49: lcdInst(0b00110011);
  4433  0025BA  0E33               	movlw	51
  4434  0025BC  ECD2  F015         	call	_lcdInst
  4435                           
  4436                           ;lcd.c: 50: lcdInst(0b00110010);
  4437  0025C0  0E32               	movlw	50
  4438  0025C2  ECD2  F015         	call	_lcdInst
  4439                           
  4440                           ;lcd.c: 52: lcdInst(0b00101000);
  4441  0025C6  0E28               	movlw	40
  4442  0025C8  ECD2  F015         	call	_lcdInst
  4443                           
  4444                           ;lcd.c: 53: lcdInst(0b00001100);
  4445  0025CC  0E0C               	movlw	12
  4446  0025CE  ECD2  F015         	call	_lcdInst
  4447                           
  4448                           ;lcd.c: 54: lcdInst(0b00000110);
  4449  0025D2  0E06               	movlw	6
  4450  0025D4  ECD2  F015         	call	_lcdInst
  4451                           
  4452                           ;lcd.c: 55: lcdInst(0b00000001);
  4453  0025D8  0E01               	movlw	1
  4454  0025DA  ECD2  F015         	call	_lcdInst
  4455                           
  4456                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4457  0025DE  0E9C               	movlw	156
  4458  0025E0  0100               	movlb	0	; () banked
  4459  0025E2  6F83               	movwf	??_initLCD& (0+255),b
  4460  0025E4  0ED7               	movlw	215
  4461  0025E6                     u4847:
  4462  0025E6  2EE8               	decfsz	wreg,f,c
  4463  0025E8  D7FE               	bra	u4847
  4464  0025EA  2F83               	decfsz	??_initLCD& (0+255),f,b
  4465  0025EC  D7FC               	bra	u4847
  4466  0025EE  0012               	return		;funcret
  4467  0025F0                     __end_of_initLCD:
  4468                           	opt stack 0
  4469                           tblptru	equ	0xFF8
  4470                           tblptrh	equ	0xFF7
  4471                           tblptrl	equ	0xFF6
  4472                           tablat	equ	0xFF5
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           intcon	equ	0xFF2
  4476                           intcon2	equ	0xFF1
  4477                           intcon3	equ	0xFF0
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           postdec1	equ	0xFE5
  4481                           fsr1l	equ	0xFE1
  4482                           indf2	equ	0xFDF
  4483                           postinc2	equ	0xFDE
  4484                           postdec2	equ	0xFDD
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _UI *****************
  4490 ;; Defined at:
  4491 ;;		line 72 in file "UI.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  i               1   83[BANK0 ] unsigned char 
  4496 ;;  i               1   82[BANK0 ] unsigned char 
  4497 ;;  i               1   81[BANK0 ] unsigned char 
  4498 ;;  i               1   80[BANK0 ] unsigned char 
  4499 ;;  i               1   79[BANK0 ] unsigned char 
  4500 ;;  i               1   78[BANK0 ] unsigned char 
  4501 ;;  i               1   77[BANK0 ] unsigned char 
  4502 ;;  i               1   76[BANK0 ] unsigned char 
  4503 ;;  i               1   75[BANK0 ] unsigned char 
  4504 ;;  i               1   74[BANK0 ] unsigned char 
  4505 ;;  i               1   73[BANK0 ] unsigned char 
  4506 ;;  i               1   72[BANK0 ] unsigned char 
  4507 ;;  i               1   71[BANK0 ] unsigned char 
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:       16 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; Hardware stack levels required when called:   11
  4524 ;; This function calls:
  4525 ;;		___awdiv
  4526 ;;		___awmod
  4527 ;;		_change_state_to_menu_12
  4528 ;;		_change_state_to_menu_22
  4529 ;;		_lcdInst
  4530 ;;		_printRTC
  4531 ;;		_printf
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text20
  4538  000012                     __ptext20:
  4539                           	opt stack 0
  4540  000012                     _UI:
  4541                           	opt stack 19
  4542                           
  4543                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4544                           
  4545                           ;incstack = 0
  4546  000012  0E02               	movlw	2
  4547  000014  0100               	movlb	0	; () banked
  4548  000016  19F9               	xorwf	_machine_state& (0+255),w,b
  4549  000018  A4D8               	btfss	status,2,c
  4550  00001A  D071               	goto	l5322
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4554  00001C  0E01               	movlw	1
  4555  00001E  ECD2  F015         	call	_lcdInst
  4556  000022  0E68               	movlw	104
  4557  000024  0100               	movlb	0	; () banked
  4558  000026  6FC4               	movwf	??_UI& (0+255),b
  4559  000028  0EE4               	movlw	228
  4560  00002A                     u4857:
  4561  00002A  2EE8               	decfsz	wreg,f,c
  4562  00002C  D7FE               	bra	u4857
  4563  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4564  000030  D7FC               	bra	u4857
  4565  000032  F000               	nop	
  4566                           
  4567                           ;UI.c: 75: lcdInst(0b10000000);;
  4568  000034  0E80               	movlw	128
  4569  000036  ECD2  F015         	call	_lcdInst
  4570                           
  4571                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4572  00003A  0EBA               	movlw	low STR_1
  4573  00003C  0100               	movlb	0	; () banked
  4574  00003E  6F8E               	movwf	printf@f& (0+255),b
  4575  000040  0EFE               	movlw	high STR_1
  4576  000042  0100               	movlb	0	; () banked
  4577  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4578  000046  ECBB  F002         	call	_printf	;wreg free
  4579                           
  4580                           ;UI.c: 77: lcdInst(0b11000000);;
  4581  00004A  0EC0               	movlw	192
  4582  00004C  ECD2  F015         	call	_lcdInst
  4583                           
  4584                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4585  000050  0E0E               	movlw	14
  4586  000052  0100               	movlb	0	; () banked
  4587  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4588  000056  0E10               	movlw	16
  4589  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4590  00005A  C0F7  F080         	movff	_total_time,___awmod@dividend
  4591  00005E  C0F8  F081         	movff	_total_time+1,___awmod@dividend+1
  4592  000062  EC83  F00F         	call	___awmod	;wreg free
  4593  000066  C080  F0C5         	movff	?___awmod,_UI$2028
  4594  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2028+1
  4595                           
  4596                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4597  00006E  0EE8               	movlw	low STR_2
  4598  000070  0100               	movlb	0	; () banked
  4599  000072  6F8E               	movwf	printf@f& (0+255),b
  4600  000074  0EFD               	movlw	high STR_2
  4601  000076  0100               	movlb	0	; () banked
  4602  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4603  00007A  0E00               	movlw	0
  4604  00007C  0100               	movlb	0	; () banked
  4605  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4606  000080  0E00               	movlw	0
  4607  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4608  000084  0E0E               	movlw	14
  4609  000086  0100               	movlb	0	; () banked
  4610  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4611  00008A  0E10               	movlw	16
  4612  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4613  00008E  C0F7  F080         	movff	_total_time,___awmod@dividend
  4614  000092  C0F8  F081         	movff	_total_time+1,___awmod@dividend+1
  4615  000096  EC83  F00F         	call	___awmod	;wreg free
  4616  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4617  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4618  0000A2  0E00               	movlw	0
  4619  0000A4  0100               	movlb	0	; () banked
  4620  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4621  0000A8  0E3C               	movlw	60
  4622  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4623  0000AC  EC16  F00E         	call	___awdiv	;wreg free
  4624  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4625  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4626  0000B8  C0C5  F080         	movff	_UI$2028,___awmod@dividend
  4627  0000BC  C0C6  F081         	movff	_UI$2028+1,___awmod@dividend+1
  4628  0000C0  0E00               	movlw	0
  4629  0000C2  0100               	movlb	0	; () banked
  4630  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4631  0000C6  0E3C               	movlw	60
  4632  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4633  0000CA  EC83  F00F         	call	___awmod	;wreg free
  4634  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4635  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4636  0000D6  ECBB  F002         	call	_printf	;wreg free
  4637                           
  4638                           ;UI.c: 79: machine_state = UI_state;
  4639  0000DA  0E00               	movlw	0
  4640  0000DC  0100               	movlb	0	; () banked
  4641  0000DE  6FF9               	movwf	_machine_state& (0+255),b
  4642  0000E0                     l382:
  4643  0000E0  A281               	btfss	3969,1,c	;volatile
  4644  0000E2  D7FE               	goto	l382
  4645                           
  4646                           ;UI.c: 82: }
  4647                           ;UI.c: 83: if(cur_state==12){
  4648  0000E4  0E0C               	movlw	12
  4649  0000E6  0100               	movlb	0	; () banked
  4650  0000E8  19E9               	xorwf	_cur_state& (0+255),w,b
  4651  0000EA  0100               	movlb	0	; () banked
  4652  0000EC  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
  4653  0000EE  A4D8               	btfss	status,2,c
  4654  0000F0  D003               	goto	l5320
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;UI.c: 84: change_state_to_menu_12();
  4658  0000F2  EC6F  F013         	call	_change_state_to_menu_12	;wreg free
  4659                           
  4660                           ;UI.c: 85: }
  4661  0000F6  D238               	goto	l5578
  4662  0000F8                     l5320:
  4663                           
  4664                           ;UI.c: 86: else{
  4665                           ;UI.c: 87: change_state_to_menu_22();
  4666  0000F8  EC53  F013         	call	_change_state_to_menu_22	;wreg free
  4667                           
  4668                           ;UI.c: 88: }
  4669                           ;UI.c: 89: }
  4670  0000FC  D235               	goto	l5578
  4671  0000FE                     l5322:
  4672                           
  4673                           ;UI.c: 90: else if(cur_state == 0){
  4674  0000FE  0100               	movlb	0	; () banked
  4675  000100  51E9               	movf	_cur_state& (0+255),w,b
  4676  000102  0100               	movlb	0	; () banked
  4677  000104  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
  4678  000106  A4D8               	btfss	status,2,c
  4679  000108  D22F               	goto	l5578
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4683  00010A  0E00               	movlw	0
  4684  00010C  0100               	movlb	0	; () banked
  4685  00010E  6FC7               	movwf	UI@i& (0+255),b
  4686  000110                     l5326:
  4687                           
  4688                           ; BSR set to: 0
  4689  000110  0E63               	movlw	99
  4690  000112  0100               	movlb	0	; () banked
  4691  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4692  000116  D001               	goto	l5330
  4693  000118  D00C               	goto	l5334
  4694  00011A                     l5330:
  4695                           
  4696                           ; BSR set to: 0
  4697  00011A  0E68               	movlw	104
  4698  00011C  0100               	movlb	0	; () banked
  4699  00011E  6FC4               	movwf	??_UI& (0+255),b
  4700  000120  0EE4               	movlw	228
  4701  000122                     u4867:
  4702  000122  2EE8               	decfsz	wreg,f,c
  4703  000124  D7FE               	bra	u4867
  4704  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4705  000128  D7FC               	bra	u4867
  4706  00012A  F000               	nop	
  4707  00012C  0100               	movlb	0	; () banked
  4708  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4709  000130  D7EF               	goto	l5326
  4710  000132                     l5334:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;UI.c: 92: if(cur_state == 0){
  4714  000132  0100               	movlb	0	; () banked
  4715  000134  51E9               	movf	_cur_state& (0+255),w,b
  4716  000136  0100               	movlb	0	; () banked
  4717  000138  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
  4718  00013A  A4D8               	btfss	status,2,c
  4719  00013C  D215               	goto	l5578
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;UI.c: 93: printRTC();
  4723  00013E  EC63  F006         	call	_printRTC	;wreg free
  4724                           
  4725                           ;UI.c: 94: }
  4726                           ;UI.c: 95: }
  4727                           ;UI.c: 96: while(logstate){
  4728  000142  D212               	goto	l5578
  4729  000144                     l5338:
  4730                           
  4731                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4732  000144  0E01               	movlw	1
  4733  000146  ECD2  F015         	call	_lcdInst
  4734  00014A  0E68               	movlw	104
  4735  00014C  0100               	movlb	0	; () banked
  4736  00014E  6FC4               	movwf	??_UI& (0+255),b
  4737  000150  0EE4               	movlw	228
  4738  000152                     u4877:
  4739  000152  2EE8               	decfsz	wreg,f,c
  4740  000154  D7FE               	bra	u4877
  4741  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4742  000158  D7FC               	bra	u4877
  4743  00015A  F000               	nop	
  4744                           
  4745                           ;UI.c: 99: lcdInst(0b10000000);;
  4746  00015C  0E80               	movlw	128
  4747  00015E  ECD2  F015         	call	_lcdInst
  4748                           
  4749                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4750  000162  0EFD               	movlw	low STR_3
  4751  000164  0100               	movlb	0	; () banked
  4752  000166  6F8E               	movwf	printf@f& (0+255),b
  4753  000168  0EFD               	movlw	high STR_3
  4754  00016A  0100               	movlb	0	; () banked
  4755  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4756  00016E  C0F3  F090         	movff	_log,?_printf+2
  4757  000172  C0F4  F091         	movff	_log+1,?_printf+3
  4758  000176  ECBB  F002         	call	_printf	;wreg free
  4759                           
  4760                           ;UI.c: 101: lcdInst(0b11000000);;
  4761  00017A  0EC0               	movlw	192
  4762  00017C  ECD2  F015         	call	_lcdInst
  4763                           
  4764                           ;UI.c: 102: printf("Pause:< | Back:>");
  4765  000180  0E86               	movlw	low STR_4
  4766  000182  0100               	movlb	0	; () banked
  4767  000184  6F8E               	movwf	printf@f& (0+255),b
  4768  000186  0EFF               	movlw	high STR_4
  4769  000188  0100               	movlb	0	; () banked
  4770  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4771  00018C  ECBB  F002         	call	_printf	;wreg free
  4772                           
  4773                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4774  000190  0E00               	movlw	0
  4775  000192  0100               	movlb	0	; () banked
  4776  000194  6FC8               	movwf	UI@i_586& (0+255),b
  4777  000196                     l5352:
  4778                           
  4779                           ; BSR set to: 0
  4780  000196  0E63               	movlw	99
  4781  000198  0100               	movlb	0	; () banked
  4782  00019A  65C8               	cpfsgt	UI@i_586& (0+255),b
  4783  00019C  D001               	goto	l5356
  4784  00019E  D00C               	goto	l5360
  4785  0001A0                     l5356:
  4786                           
  4787                           ; BSR set to: 0
  4788  0001A0  0E68               	movlw	104
  4789  0001A2  0100               	movlb	0	; () banked
  4790  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4791  0001A6  0EE4               	movlw	228
  4792  0001A8                     u4887:
  4793  0001A8  2EE8               	decfsz	wreg,f,c
  4794  0001AA  D7FE               	bra	u4887
  4795  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4796  0001AE  D7FC               	bra	u4887
  4797  0001B0  F000               	nop	
  4798  0001B2  0100               	movlb	0	; () banked
  4799  0001B4  2BC8               	incf	UI@i_586& (0+255),f,b
  4800  0001B6  D7EF               	goto	l5352
  4801  0001B8                     l5360:
  4802                           
  4803                           ; BSR set to: 0
  4804  0001B8  0100               	movlb	0	; () banked
  4805  0001BA  51F5               	movf	_logstate& (0+255),w,b
  4806  0001BC  0100               	movlb	0	; () banked
  4807  0001BE  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  4808  0001C0  B4D8               	btfsc	status,2,c
  4809  0001C2  0012               	return	
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4813                           
  4814                           ; BSR set to: 0
  4815                           
  4816                           ; BSR set to: 0
  4817  0001C4  0E00               	movlw	0
  4818  0001C6  0100               	movlb	0	; () banked
  4819  0001C8  6FC9               	movwf	UI@i_587& (0+255),b
  4820  0001CA                     l5366:
  4821                           
  4822                           ; BSR set to: 0
  4823  0001CA  0E63               	movlw	99
  4824  0001CC  0100               	movlb	0	; () banked
  4825  0001CE  65C9               	cpfsgt	UI@i_587& (0+255),b
  4826  0001D0  D001               	goto	l5370
  4827  0001D2  D00C               	goto	l5374
  4828  0001D4                     l5370:
  4829                           
  4830                           ; BSR set to: 0
  4831  0001D4  0E68               	movlw	104
  4832  0001D6  0100               	movlb	0	; () banked
  4833  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4834  0001DA  0EE4               	movlw	228
  4835  0001DC                     u4897:
  4836  0001DC  2EE8               	decfsz	wreg,f,c
  4837  0001DE  D7FE               	bra	u4897
  4838  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4839  0001E2  D7FC               	bra	u4897
  4840  0001E4  F000               	nop	
  4841  0001E6  0100               	movlb	0	; () banked
  4842  0001E8  2BC9               	incf	UI@i_587& (0+255),f,b
  4843  0001EA  D7EF               	goto	l5366
  4844  0001EC                     l5374:
  4845                           
  4846                           ; BSR set to: 0
  4847  0001EC  0100               	movlb	0	; () banked
  4848  0001EE  51F5               	movf	_logstate& (0+255),w,b
  4849  0001F0  0100               	movlb	0	; () banked
  4850  0001F2  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  4851  0001F4  B4D8               	btfsc	status,2,c
  4852  0001F6  0012               	return	
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4856                           
  4857                           ; BSR set to: 0
  4858                           
  4859                           ; BSR set to: 0
  4860  0001F8  0E01               	movlw	1
  4861  0001FA  ECD2  F015         	call	_lcdInst
  4862  0001FE  0E68               	movlw	104
  4863  000200  0100               	movlb	0	; () banked
  4864  000202  6FC4               	movwf	??_UI& (0+255),b
  4865  000204  0EE4               	movlw	228
  4866  000206                     u4907:
  4867  000206  2EE8               	decfsz	wreg,f,c
  4868  000208  D7FE               	bra	u4907
  4869  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4870  00020C  D7FC               	bra	u4907
  4871  00020E  F000               	nop	
  4872                           
  4873                           ;UI.c: 108: lcdInst(0b10000000);;
  4874  000210  0E80               	movlw	128
  4875  000212  ECD2  F015         	call	_lcdInst
  4876                           
  4877                           ;UI.c: 109: printf("Start:");
  4878  000216  0EC4               	movlw	low STR_5
  4879  000218  0100               	movlb	0	; () banked
  4880  00021A  6F8E               	movwf	printf@f& (0+255),b
  4881  00021C  0EFF               	movlw	high STR_5
  4882  00021E  0100               	movlb	0	; () banked
  4883  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4884  000222  ECBB  F002         	call	_printf	;wreg free
  4885                           
  4886                           ;UI.c: 110: lcdInst(0b11000000);;
  4887  000226  0EC0               	movlw	192
  4888  000228  ECD2  F015         	call	_lcdInst
  4889                           
  4890                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4891  00022C  0EFE               	movlw	low STR_6
  4892  00022E  0100               	movlb	0	; () banked
  4893  000230  6F8E               	movwf	printf@f& (0+255),b
  4894  000232  0EFE               	movlw	high STR_6
  4895  000234  0100               	movlb	0	; () banked
  4896  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4897  000238  ECBB  F002         	call	_printf	;wreg free
  4898                           
  4899                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4900  00023C  0E00               	movlw	0
  4901  00023E  0100               	movlb	0	; () banked
  4902  000240  6FCA               	movwf	UI@i_590& (0+255),b
  4903  000242                     l5392:
  4904                           
  4905                           ; BSR set to: 0
  4906  000242  0E63               	movlw	99
  4907  000244  0100               	movlb	0	; () banked
  4908  000246  65CA               	cpfsgt	UI@i_590& (0+255),b
  4909  000248  D001               	goto	l5396
  4910  00024A  D00C               	goto	l5400
  4911  00024C                     l5396:
  4912                           
  4913                           ; BSR set to: 0
  4914  00024C  0E68               	movlw	104
  4915  00024E  0100               	movlb	0	; () banked
  4916  000250  6FC4               	movwf	??_UI& (0+255),b
  4917  000252  0EE4               	movlw	228
  4918  000254                     u4917:
  4919  000254  2EE8               	decfsz	wreg,f,c
  4920  000256  D7FE               	bra	u4917
  4921  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4922  00025A  D7FC               	bra	u4917
  4923  00025C  F000               	nop	
  4924  00025E  0100               	movlb	0	; () banked
  4925  000260  2BCA               	incf	UI@i_590& (0+255),f,b
  4926  000262  D7EF               	goto	l5392
  4927  000264                     l5400:
  4928                           
  4929                           ; BSR set to: 0
  4930  000264  0100               	movlb	0	; () banked
  4931  000266  51F5               	movf	_logstate& (0+255),w,b
  4932  000268  0100               	movlb	0	; () banked
  4933  00026A  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  4934  00026C  B4D8               	btfsc	status,2,c
  4935  00026E  0012               	return	
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943  000270  0E00               	movlw	0
  4944  000272  0100               	movlb	0	; () banked
  4945  000274  6FCB               	movwf	UI@i_591& (0+255),b
  4946  000276                     l5406:
  4947                           
  4948                           ; BSR set to: 0
  4949  000276  0E63               	movlw	99
  4950  000278  0100               	movlb	0	; () banked
  4951  00027A  65CB               	cpfsgt	UI@i_591& (0+255),b
  4952  00027C  D001               	goto	l5410
  4953  00027E  D00C               	goto	l5414
  4954  000280                     l5410:
  4955                           
  4956                           ; BSR set to: 0
  4957  000280  0E68               	movlw	104
  4958  000282  0100               	movlb	0	; () banked
  4959  000284  6FC4               	movwf	??_UI& (0+255),b
  4960  000286  0EE4               	movlw	228
  4961  000288                     u4927:
  4962  000288  2EE8               	decfsz	wreg,f,c
  4963  00028A  D7FE               	bra	u4927
  4964  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4965  00028E  D7FC               	bra	u4927
  4966  000290  F000               	nop	
  4967  000292  0100               	movlb	0	; () banked
  4968  000294  2BCB               	incf	UI@i_591& (0+255),f,b
  4969  000296  D7EF               	goto	l5406
  4970  000298                     l5414:
  4971                           
  4972                           ; BSR set to: 0
  4973  000298  0100               	movlb	0	; () banked
  4974  00029A  51F5               	movf	_logstate& (0+255),w,b
  4975  00029C  0100               	movlb	0	; () banked
  4976  00029E  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  4977  0002A0  B4D8               	btfsc	status,2,c
  4978  0002A2  0012               	return	
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4982                           
  4983                           ; BSR set to: 0
  4984                           
  4985                           ; BSR set to: 0
  4986  0002A4  0E01               	movlw	1
  4987  0002A6  ECD2  F015         	call	_lcdInst
  4988  0002AA  0E68               	movlw	104
  4989  0002AC  0100               	movlb	0	; () banked
  4990  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4991  0002B0  0EE4               	movlw	228
  4992  0002B2                     u4937:
  4993  0002B2  2EE8               	decfsz	wreg,f,c
  4994  0002B4  D7FE               	bra	u4937
  4995  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4996  0002B8  D7FC               	bra	u4937
  4997  0002BA  F000               	nop	
  4998                           
  4999                           ;UI.c: 117: lcdInst(0b10000000);;
  5000  0002BC  0E80               	movlw	128
  5001  0002BE  ECD2  F015         	call	_lcdInst
  5002                           
  5003                           ;UI.c: 118: printf("Duration:");
  5004  0002C2  0EB3               	movlw	low STR_7
  5005  0002C4  0100               	movlb	0	; () banked
  5006  0002C6  6F8E               	movwf	printf@f& (0+255),b
  5007  0002C8  0EFF               	movlw	high STR_7
  5008  0002CA  0100               	movlb	0	; () banked
  5009  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5010  0002CE  ECBB  F002         	call	_printf	;wreg free
  5011                           
  5012                           ;UI.c: 119: lcdInst(0b11000000);;
  5013  0002D2  0EC0               	movlw	192
  5014  0002D4  ECD2  F015         	call	_lcdInst
  5015                           
  5016                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  5017  0002D8  0E0F               	movlw	low STR_8
  5018  0002DA  0100               	movlb	0	; () banked
  5019  0002DC  6F8E               	movwf	printf@f& (0+255),b
  5020  0002DE  0EFE               	movlw	high STR_8
  5021  0002E0  0100               	movlb	0	; () banked
  5022  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5023  0002E4  0E00               	movlw	0
  5024  0002E6  0100               	movlb	0	; () banked
  5025  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  5026  0002EA  0E02               	movlw	2
  5027  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  5028  0002EE  0E00               	movlw	0
  5029  0002F0  0100               	movlb	0	; () banked
  5030  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  5031  0002F4  0E2A               	movlw	42
  5032  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  5033  0002F8  ECBB  F002         	call	_printf	;wreg free
  5034                           
  5035                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5036  0002FC  0E00               	movlw	0
  5037  0002FE  0100               	movlb	0	; () banked
  5038  000300  6FCC               	movwf	UI@i_594& (0+255),b
  5039  000302                     l5432:
  5040                           
  5041                           ; BSR set to: 0
  5042  000302  0E63               	movlw	99
  5043  000304  0100               	movlb	0	; () banked
  5044  000306  65CC               	cpfsgt	UI@i_594& (0+255),b
  5045  000308  D001               	goto	l5436
  5046  00030A  D00C               	goto	l5440
  5047  00030C                     l5436:
  5048                           
  5049                           ; BSR set to: 0
  5050  00030C  0E68               	movlw	104
  5051  00030E  0100               	movlb	0	; () banked
  5052  000310  6FC4               	movwf	??_UI& (0+255),b
  5053  000312  0EE4               	movlw	228
  5054  000314                     u4947:
  5055  000314  2EE8               	decfsz	wreg,f,c
  5056  000316  D7FE               	bra	u4947
  5057  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  5058  00031A  D7FC               	bra	u4947
  5059  00031C  F000               	nop	
  5060  00031E  0100               	movlb	0	; () banked
  5061  000320  2BCC               	incf	UI@i_594& (0+255),f,b
  5062  000322  D7EF               	goto	l5432
  5063  000324                     l5440:
  5064                           
  5065                           ; BSR set to: 0
  5066  000324  0100               	movlb	0	; () banked
  5067  000326  51F5               	movf	_logstate& (0+255),w,b
  5068  000328  0100               	movlb	0	; () banked
  5069  00032A  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5070  00032C  B4D8               	btfsc	status,2,c
  5071  00032E  0012               	return	
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5075                           
  5076                           ; BSR set to: 0
  5077                           
  5078                           ; BSR set to: 0
  5079  000330  0E00               	movlw	0
  5080  000332  0100               	movlb	0	; () banked
  5081  000334  6FCD               	movwf	UI@i_595& (0+255),b
  5082  000336                     l5446:
  5083                           
  5084                           ; BSR set to: 0
  5085  000336  0E63               	movlw	99
  5086  000338  0100               	movlb	0	; () banked
  5087  00033A  65CD               	cpfsgt	UI@i_595& (0+255),b
  5088  00033C  D001               	goto	l5450
  5089  00033E  D00C               	goto	l5454
  5090  000340                     l5450:
  5091                           
  5092                           ; BSR set to: 0
  5093  000340  0E68               	movlw	104
  5094  000342  0100               	movlb	0	; () banked
  5095  000344  6FC4               	movwf	??_UI& (0+255),b
  5096  000346  0EE4               	movlw	228
  5097  000348                     u4957:
  5098  000348  2EE8               	decfsz	wreg,f,c
  5099  00034A  D7FE               	bra	u4957
  5100  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5101  00034E  D7FC               	bra	u4957
  5102  000350  F000               	nop	
  5103  000352  0100               	movlb	0	; () banked
  5104  000354  2BCD               	incf	UI@i_595& (0+255),f,b
  5105  000356  D7EF               	goto	l5446
  5106  000358                     l5454:
  5107                           
  5108                           ; BSR set to: 0
  5109  000358  0100               	movlb	0	; () banked
  5110  00035A  51F5               	movf	_logstate& (0+255),w,b
  5111  00035C  0100               	movlb	0	; () banked
  5112  00035E  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5113  000360  B4D8               	btfsc	status,2,c
  5114  000362  0012               	return	
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5118                           
  5119                           ; BSR set to: 0
  5120                           
  5121                           ; BSR set to: 0
  5122  000364  0E01               	movlw	1
  5123  000366  ECD2  F015         	call	_lcdInst
  5124  00036A  0E68               	movlw	104
  5125  00036C  0100               	movlb	0	; () banked
  5126  00036E  6FC4               	movwf	??_UI& (0+255),b
  5127  000370  0EE4               	movlw	228
  5128  000372                     u4967:
  5129  000372  2EE8               	decfsz	wreg,f,c
  5130  000374  D7FE               	bra	u4967
  5131  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5132  000378  D7FC               	bra	u4967
  5133  00037A  F000               	nop	
  5134                           
  5135                           ;UI.c: 126: lcdInst(0b10000000);;
  5136  00037C  0E80               	movlw	128
  5137  00037E  ECD2  F015         	call	_lcdInst
  5138                           
  5139                           ;UI.c: 127: printf(" -- Pop  can -- ");
  5140  000382  0E98               	movlw	low STR_9
  5141  000384  0100               	movlb	0	; () banked
  5142  000386  6F8E               	movwf	printf@f& (0+255),b
  5143  000388  0EFE               	movlw	high STR_9
  5144  00038A  0100               	movlb	0	; () banked
  5145  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5146  00038E  ECBB  F002         	call	_printf	;wreg free
  5147                           
  5148                           ;UI.c: 128: lcdInst(0b11000000);;
  5149  000392  0EC0               	movlw	192
  5150  000394  ECD2  F015         	call	_lcdInst
  5151                           
  5152                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5153  000398  0EDC               	movlw	low STR_10
  5154  00039A  0100               	movlb	0	; () banked
  5155  00039C  6F8E               	movwf	printf@f& (0+255),b
  5156  00039E  0EFE               	movlw	high STR_10
  5157  0003A0  0100               	movlb	0	; () banked
  5158  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5159  0003A4  ECBB  F002         	call	_printf	;wreg free
  5160                           
  5161                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5162  0003A8  0E00               	movlw	0
  5163  0003AA  0100               	movlb	0	; () banked
  5164  0003AC  6FCE               	movwf	UI@i_598& (0+255),b
  5165  0003AE                     l5472:
  5166                           
  5167                           ; BSR set to: 0
  5168  0003AE  0E63               	movlw	99
  5169  0003B0  0100               	movlb	0	; () banked
  5170  0003B2  65CE               	cpfsgt	UI@i_598& (0+255),b
  5171  0003B4  D001               	goto	l5476
  5172  0003B6  D00C               	goto	l5480
  5173  0003B8                     l5476:
  5174                           
  5175                           ; BSR set to: 0
  5176  0003B8  0E68               	movlw	104
  5177  0003BA  0100               	movlb	0	; () banked
  5178  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5179  0003BE  0EE4               	movlw	228
  5180  0003C0                     u4977:
  5181  0003C0  2EE8               	decfsz	wreg,f,c
  5182  0003C2  D7FE               	bra	u4977
  5183  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5184  0003C6  D7FC               	bra	u4977
  5185  0003C8  F000               	nop	
  5186  0003CA  0100               	movlb	0	; () banked
  5187  0003CC  2BCE               	incf	UI@i_598& (0+255),f,b
  5188  0003CE  D7EF               	goto	l5472
  5189  0003D0                     l5480:
  5190                           
  5191                           ; BSR set to: 0
  5192  0003D0  0100               	movlb	0	; () banked
  5193  0003D2  51F5               	movf	_logstate& (0+255),w,b
  5194  0003D4  0100               	movlb	0	; () banked
  5195  0003D6  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5196  0003D8  B4D8               	btfsc	status,2,c
  5197  0003DA  0012               	return	
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205  0003DC  0E00               	movlw	0
  5206  0003DE  0100               	movlb	0	; () banked
  5207  0003E0  6FCF               	movwf	UI@i_599& (0+255),b
  5208  0003E2                     l5486:
  5209                           
  5210                           ; BSR set to: 0
  5211  0003E2  0E63               	movlw	99
  5212  0003E4  0100               	movlb	0	; () banked
  5213  0003E6  65CF               	cpfsgt	UI@i_599& (0+255),b
  5214  0003E8  D001               	goto	l5490
  5215  0003EA  D00C               	goto	l5494
  5216  0003EC                     l5490:
  5217                           
  5218                           ; BSR set to: 0
  5219  0003EC  0E68               	movlw	104
  5220  0003EE  0100               	movlb	0	; () banked
  5221  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5222  0003F2  0EE4               	movlw	228
  5223  0003F4                     u4987:
  5224  0003F4  2EE8               	decfsz	wreg,f,c
  5225  0003F6  D7FE               	bra	u4987
  5226  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5227  0003FA  D7FC               	bra	u4987
  5228  0003FC  F000               	nop	
  5229  0003FE  0100               	movlb	0	; () banked
  5230  000400  2BCF               	incf	UI@i_599& (0+255),f,b
  5231  000402  D7EF               	goto	l5486
  5232  000404                     l5494:
  5233                           
  5234                           ; BSR set to: 0
  5235  000404  0100               	movlb	0	; () banked
  5236  000406  51F5               	movf	_logstate& (0+255),w,b
  5237  000408  0100               	movlb	0	; () banked
  5238  00040A  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5239  00040C  B4D8               	btfsc	status,2,c
  5240  00040E  0012               	return	
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5244                           
  5245                           ; BSR set to: 0
  5246                           
  5247                           ; BSR set to: 0
  5248  000410  0E01               	movlw	1
  5249  000412  ECD2  F015         	call	_lcdInst
  5250  000416  0E68               	movlw	104
  5251  000418  0100               	movlb	0	; () banked
  5252  00041A  6FC4               	movwf	??_UI& (0+255),b
  5253  00041C  0EE4               	movlw	228
  5254  00041E                     u4997:
  5255  00041E  2EE8               	decfsz	wreg,f,c
  5256  000420  D7FE               	bra	u4997
  5257  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5258  000424  D7FC               	bra	u4997
  5259  000426  F000               	nop	
  5260                           
  5261                           ;UI.c: 135: lcdInst(0b10000000);;
  5262  000428  0E80               	movlw	128
  5263  00042A  ECD2  F015         	call	_lcdInst
  5264                           
  5265                           ;UI.c: 136: printf(" -- Soup can -- ");
  5266  00042E  0EA9               	movlw	low STR_11
  5267  000430  0100               	movlb	0	; () banked
  5268  000432  6F8E               	movwf	printf@f& (0+255),b
  5269  000434  0EFE               	movlw	high STR_11
  5270  000436  0100               	movlb	0	; () banked
  5271  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5272  00043A  ECBB  F002         	call	_printf	;wreg free
  5273                           
  5274                           ;UI.c: 137: lcdInst(0b11000000);;
  5275  00043E  0EC0               	movlw	192
  5276  000440  ECD2  F015         	call	_lcdInst
  5277                           
  5278                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5279  000444  0EED               	movlw	low STR_12
  5280  000446  0100               	movlb	0	; () banked
  5281  000448  6F8E               	movwf	printf@f& (0+255),b
  5282  00044A  0EFE               	movlw	high STR_12
  5283  00044C  0100               	movlb	0	; () banked
  5284  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5285  000450  ECBB  F002         	call	_printf	;wreg free
  5286                           
  5287                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5288  000454  0E00               	movlw	0
  5289  000456  0100               	movlb	0	; () banked
  5290  000458  6FD0               	movwf	UI@i_602& (0+255),b
  5291  00045A                     l5512:
  5292                           
  5293                           ; BSR set to: 0
  5294  00045A  0E63               	movlw	99
  5295  00045C  0100               	movlb	0	; () banked
  5296  00045E  65D0               	cpfsgt	UI@i_602& (0+255),b
  5297  000460  D001               	goto	l5516
  5298  000462  D00C               	goto	l5520
  5299  000464                     l5516:
  5300                           
  5301                           ; BSR set to: 0
  5302  000464  0E68               	movlw	104
  5303  000466  0100               	movlb	0	; () banked
  5304  000468  6FC4               	movwf	??_UI& (0+255),b
  5305  00046A  0EE4               	movlw	228
  5306  00046C                     u5007:
  5307  00046C  2EE8               	decfsz	wreg,f,c
  5308  00046E  D7FE               	bra	u5007
  5309  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5310  000472  D7FC               	bra	u5007
  5311  000474  F000               	nop	
  5312  000476  0100               	movlb	0	; () banked
  5313  000478  2BD0               	incf	UI@i_602& (0+255),f,b
  5314  00047A  D7EF               	goto	l5512
  5315  00047C                     l5520:
  5316                           
  5317                           ; BSR set to: 0
  5318  00047C  0100               	movlb	0	; () banked
  5319  00047E  51F5               	movf	_logstate& (0+255),w,b
  5320  000480  0100               	movlb	0	; () banked
  5321  000482  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5322  000484  B4D8               	btfsc	status,2,c
  5323  000486  0012               	return	
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ; BSR set to: 0
  5331  000488  0E00               	movlw	0
  5332  00048A  0100               	movlb	0	; () banked
  5333  00048C  6FD1               	movwf	UI@i_603& (0+255),b
  5334  00048E                     l5526:
  5335                           
  5336                           ; BSR set to: 0
  5337  00048E  0E63               	movlw	99
  5338  000490  0100               	movlb	0	; () banked
  5339  000492  65D1               	cpfsgt	UI@i_603& (0+255),b
  5340  000494  D001               	goto	l5530
  5341  000496  D00C               	goto	l5534
  5342  000498                     l5530:
  5343                           
  5344                           ; BSR set to: 0
  5345  000498  0E68               	movlw	104
  5346  00049A  0100               	movlb	0	; () banked
  5347  00049C  6FC4               	movwf	??_UI& (0+255),b
  5348  00049E  0EE4               	movlw	228
  5349  0004A0                     u5017:
  5350  0004A0  2EE8               	decfsz	wreg,f,c
  5351  0004A2  D7FE               	bra	u5017
  5352  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5353  0004A6  D7FC               	bra	u5017
  5354  0004A8  F000               	nop	
  5355  0004AA  0100               	movlb	0	; () banked
  5356  0004AC  2BD1               	incf	UI@i_603& (0+255),f,b
  5357  0004AE  D7EF               	goto	l5526
  5358  0004B0                     l5534:
  5359                           
  5360                           ; BSR set to: 0
  5361  0004B0  0100               	movlb	0	; () banked
  5362  0004B2  51F5               	movf	_logstate& (0+255),w,b
  5363  0004B4  0100               	movlb	0	; () banked
  5364  0004B6  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5365  0004B8  B4D8               	btfsc	status,2,c
  5366  0004BA  0012               	return	
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5370                           
  5371                           ; BSR set to: 0
  5372                           
  5373                           ; BSR set to: 0
  5374  0004BC  0E01               	movlw	1
  5375  0004BE  ECD2  F015         	call	_lcdInst
  5376  0004C2  0E68               	movlw	104
  5377  0004C4  0100               	movlb	0	; () banked
  5378  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5379  0004C8  0EE4               	movlw	228
  5380  0004CA                     u5027:
  5381  0004CA  2EE8               	decfsz	wreg,f,c
  5382  0004CC  D7FE               	bra	u5027
  5383  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5384  0004D0  D7FC               	bra	u5027
  5385  0004D2  F000               	nop	
  5386                           
  5387                           ;UI.c: 144: lcdInst(0b10000000);;
  5388  0004D4  0E80               	movlw	128
  5389  0004D6  ECD2  F015         	call	_lcdInst
  5390                           
  5391                           ;UI.c: 145: printf("-- Total cans --");
  5392  0004DA  0ECB               	movlw	low STR_13
  5393  0004DC  0100               	movlb	0	; () banked
  5394  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5395  0004E0  0EFE               	movlw	high STR_13
  5396  0004E2  0100               	movlb	0	; () banked
  5397  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5398  0004E6  ECBB  F002         	call	_printf	;wreg free
  5399                           
  5400                           ;UI.c: 146: lcdInst(0b11000000);;
  5401  0004EA  0EC0               	movlw	192
  5402  0004EC  ECD2  F015         	call	_lcdInst
  5403                           
  5404                           ;UI.c: 147: printf("12");
  5405  0004F0  0EFB               	movlw	low STR_14
  5406  0004F2  0100               	movlb	0	; () banked
  5407  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5408  0004F6  0EFF               	movlw	high STR_14
  5409  0004F8  0100               	movlb	0	; () banked
  5410  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5411  0004FC  ECBB  F002         	call	_printf	;wreg free
  5412                           
  5413                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5414  000500  0E00               	movlw	0
  5415  000502  0100               	movlb	0	; () banked
  5416  000504  6FD2               	movwf	UI@i_606& (0+255),b
  5417  000506                     l5552:
  5418                           
  5419                           ; BSR set to: 0
  5420  000506  0E63               	movlw	99
  5421  000508  0100               	movlb	0	; () banked
  5422  00050A  65D2               	cpfsgt	UI@i_606& (0+255),b
  5423  00050C  D001               	goto	l5556
  5424  00050E  D00C               	goto	l5560
  5425  000510                     l5556:
  5426                           
  5427                           ; BSR set to: 0
  5428  000510  0E68               	movlw	104
  5429  000512  0100               	movlb	0	; () banked
  5430  000514  6FC4               	movwf	??_UI& (0+255),b
  5431  000516  0EE4               	movlw	228
  5432  000518                     u5037:
  5433  000518  2EE8               	decfsz	wreg,f,c
  5434  00051A  D7FE               	bra	u5037
  5435  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5436  00051E  D7FC               	bra	u5037
  5437  000520  F000               	nop	
  5438  000522  0100               	movlb	0	; () banked
  5439  000524  2BD2               	incf	UI@i_606& (0+255),f,b
  5440  000526  D7EF               	goto	l5552
  5441  000528                     l5560:
  5442                           
  5443                           ; BSR set to: 0
  5444  000528  0100               	movlb	0	; () banked
  5445  00052A  51F5               	movf	_logstate& (0+255),w,b
  5446  00052C  0100               	movlb	0	; () banked
  5447  00052E  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5448  000530  B4D8               	btfsc	status,2,c
  5449  000532  0012               	return	
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5453                           
  5454                           ; BSR set to: 0
  5455                           
  5456                           ; BSR set to: 0
  5457  000534  0E00               	movlw	0
  5458  000536  0100               	movlb	0	; () banked
  5459  000538  6FD3               	movwf	UI@i_607& (0+255),b
  5460  00053A                     l5566:
  5461                           
  5462                           ; BSR set to: 0
  5463  00053A  0E63               	movlw	99
  5464  00053C  0100               	movlb	0	; () banked
  5465  00053E  65D3               	cpfsgt	UI@i_607& (0+255),b
  5466  000540  D001               	goto	l5570
  5467  000542  D00C               	goto	l5574
  5468  000544                     l5570:
  5469                           
  5470                           ; BSR set to: 0
  5471  000544  0E68               	movlw	104
  5472  000546  0100               	movlb	0	; () banked
  5473  000548  6FC4               	movwf	??_UI& (0+255),b
  5474  00054A  0EE4               	movlw	228
  5475  00054C                     u5047:
  5476  00054C  2EE8               	decfsz	wreg,f,c
  5477  00054E  D7FE               	bra	u5047
  5478  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5479  000552  D7FC               	bra	u5047
  5480  000554  F000               	nop	
  5481  000556  0100               	movlb	0	; () banked
  5482  000558  2BD3               	incf	UI@i_607& (0+255),f,b
  5483  00055A  D7EF               	goto	l5566
  5484  00055C                     l5574:
  5485                           
  5486                           ; BSR set to: 0
  5487  00055C  0100               	movlb	0	; () banked
  5488  00055E  51F5               	movf	_logstate& (0+255),w,b
  5489  000560  0100               	movlb	0	; () banked
  5490  000562  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5491  000564  B4D8               	btfsc	status,2,c
  5492  000566  0012               	return	
  5493  000568                     l5578:
  5494  000568  0100               	movlb	0	; () banked
  5495  00056A  51F5               	movf	_logstate& (0+255),w,b
  5496  00056C  0100               	movlb	0	; () banked
  5497  00056E  11F6               	iorwf	(_logstate+1)& (0+255),w,b
  5498  000570  B4D8               	btfsc	status,2,c
  5499  000572  0012               	return	
  5500  000574  D5E7               	goto	l5338
  5501  000576                     __end_of_UI:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           intcon	equ	0xFF2
  5510                           intcon2	equ	0xFF1
  5511                           intcon3	equ	0xFF0
  5512                           postinc0	equ	0xFEE
  5513                           wreg	equ	0xFE8
  5514                           postdec1	equ	0xFE5
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function _printRTC *****************
  5524 ;; Defined at:
  5525 ;;		line 62 in file "RTC.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;		None
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  i               2   66[BANK0 ] int 
  5530 ;;  INT_time       14   46[BANK0 ] int [7]
  5531 ;;  month           4   62[BANK0 ] unsigned char [4]
  5532 ;;  RTC_month       2   60[BANK0 ] int 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:       25 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:   10
  5549 ;; This function calls:
  5550 ;;		_getRTC
  5551 ;;		_lcdInst
  5552 ;;		_printf
  5553 ;;		_strcpy
  5554 ;; This function is called by:
  5555 ;;		_UI
  5556 ;;		_change_state_to_menu_start
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text21
  5561  000CC6                     __ptext21:
  5562                           	opt stack 0
  5563  000CC6                     _printRTC:
  5564                           	opt stack 18
  5565                           
  5566                           ;RTC.c: 63: getRTC();
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;incstack = 0
  5570  000CC6  ECA1  F010         	call	_getRTC	;wreg free
  5571                           
  5572                           ;RTC.c: 64: char month[] = "MMM";
  5573  000CCA  C10E  F0BE         	movff	printRTC@F3193,printRTC@month
  5574  000CCE  C10F  F0BF         	movff	printRTC@F3193+1,printRTC@month+1
  5575  000CD2  C110  F0C0         	movff	printRTC@F3193+2,printRTC@month+2
  5576  000CD6  C111  F0C1         	movff	printRTC@F3193+3,printRTC@month+3
  5577                           
  5578                           ;RTC.c: 65: int INT_time[7];
  5579                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5580  000CDA  0E00               	movlw	0
  5581  000CDC  0100               	movlb	0	; () banked
  5582  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5583  000CE0  0E00               	movlw	0
  5584  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5585                           
  5586                           ; BSR set to: 0
  5587  000CE4  0100               	movlb	0	; () banked
  5588  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5589  000CE8  D008               	goto	l4652
  5590  000CEA  0100               	movlb	0	; () banked
  5591  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5592  000CEE  E146               	bnz	l983
  5593  000CF0  0E07               	movlw	7
  5594  000CF2  0100               	movlb	0	; () banked
  5595  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5596  000CF6  B0D8               	btfsc	status,0,c
  5597  000CF8  D041               	goto	l983
  5598  000CFA                     l4652:
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5602  000CFA  0EDC               	movlw	low _time
  5603  000CFC  0100               	movlb	0	; () banked
  5604  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5605  000D00  6ED9               	movwf	fsr2l,c
  5606  000D02  0E00               	movlw	high _time
  5607  000D04  0100               	movlb	0	; () banked
  5608  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5609  000D08  6EDA               	movwf	fsr2h,c
  5610  000D0A  50DF               	movf	indf2,w,c
  5611  000D0C  0100               	movlb	0	; () banked
  5612  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5613  000D10  0100               	movlb	0	; () banked
  5614  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5615  000D14  0E0F               	movlw	15
  5616  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5617  000D18  0E0F               	movlw	15
  5618  000D1A  0100               	movlb	0	; () banked
  5619  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5620  000D1E  0100               	movlb	0	; () banked
  5621  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5622  000D22  0D0A               	mullw	10
  5623  000D24  0EDC               	movlw	low _time
  5624  000D26  0100               	movlb	0	; () banked
  5625  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5626  000D2A  6ED9               	movwf	fsr2l,c
  5627  000D2C  0E00               	movlw	high _time
  5628  000D2E  0100               	movlb	0	; () banked
  5629  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5630  000D32  6EDA               	movwf	fsr2h,c
  5631  000D34  50DF               	movf	indf2,w,c
  5632  000D36  0B0F               	andlw	15
  5633  000D38  0100               	movlb	0	; () banked
  5634  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5635  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5636  000D3E  50F3               	movf	prodl,w,c
  5637  000D40  0100               	movlb	0	; () banked
  5638  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5639  000D44  50F4               	movf	prodh,w,c
  5640  000D46  0100               	movlb	0	; () banked
  5641  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5642  000D4A  90D8               	bcf	status,0,c
  5643  000D4C  0100               	movlb	0	; () banked
  5644  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5645  000D50  6ED9               	movwf	fsr2l,c
  5646  000D52  0100               	movlb	0	; () banked
  5647  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5648  000D56  6EDA               	movwf	fsr2h,c
  5649  000D58  0EAE               	movlw	low printRTC@INT_time
  5650  000D5A  26D9               	addwf	fsr2l,f,c
  5651  000D5C  0E00               	movlw	high printRTC@INT_time
  5652  000D5E  22DA               	addwfc	fsr2h,f,c
  5653  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5654  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5655                           
  5656                           ; BSR set to: 0
  5657  000D68  0100               	movlb	0	; () banked
  5658  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5659  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5660                           
  5661                           ; BSR set to: 0
  5662  000D6E  0100               	movlb	0	; () banked
  5663  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5664  000D72  D7C3               	goto	l4652
  5665  000D74  0100               	movlb	0	; () banked
  5666  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5667  000D78  E101               	bnz	u3280
  5668  000D7A  D7BA               	goto	L4
  5669  000D7C                     u3280:
  5670  000D7C                     l983:
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;RTC.c: 68: }
  5674                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5675  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5676  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5677                           
  5678                           ;RTC.c: 70: switch(RTC_month){
  5679  000D84  D0B4               	goto	l4684
  5680  000D86                     l4658:
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;RTC.c: 72: strcpy(month, "Jan");
  5684  000D86  0EBE               	movlw	low printRTC@month
  5685  000D88  0100               	movlb	0	; () banked
  5686  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5687  000D8C  0E00               	movlw	high printRTC@month
  5688  000D8E  0100               	movlb	0	; () banked
  5689  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5690  000D92  0EDB               	movlw	low STR_36
  5691  000D94  0100               	movlb	0	; () banked
  5692  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5693  000D98  0EFF               	movlw	high STR_36
  5694  000D9A  0100               	movlb	0	; () banked
  5695  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5696  000D9E  EC8B  F013         	call	_strcpy	;wreg free
  5697                           
  5698                           ;RTC.c: 73: break;
  5699  000DA2  D0D4               	goto	l4686
  5700  000DA4                     l4660:
  5701                           
  5702                           ;RTC.c: 75: strcpy(month, "Feb");
  5703  000DA4  0EBE               	movlw	low printRTC@month
  5704  000DA6  0100               	movlb	0	; () banked
  5705  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5706  000DAA  0E00               	movlw	high printRTC@month
  5707  000DAC  0100               	movlb	0	; () banked
  5708  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5709  000DB0  0ECB               	movlw	low STR_37
  5710  000DB2  0100               	movlb	0	; () banked
  5711  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5712  000DB6  0EFF               	movlw	high STR_37
  5713  000DB8  0100               	movlb	0	; () banked
  5714  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5715  000DBC  EC8B  F013         	call	_strcpy	;wreg free
  5716                           
  5717                           ;RTC.c: 76: break;
  5718  000DC0  D0C5               	goto	l4686
  5719  000DC2                     l4662:
  5720                           
  5721                           ;RTC.c: 78: strcpy(month, "Mar");
  5722  000DC2  0EBE               	movlw	low printRTC@month
  5723  000DC4  0100               	movlb	0	; () banked
  5724  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5725  000DC8  0E00               	movlw	high printRTC@month
  5726  000DCA  0100               	movlb	0	; () banked
  5727  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5728  000DCE  0EE7               	movlw	low STR_38
  5729  000DD0  0100               	movlb	0	; () banked
  5730  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5731  000DD4  0EFF               	movlw	high STR_38
  5732  000DD6  0100               	movlb	0	; () banked
  5733  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5734  000DDA  EC8B  F013         	call	_strcpy	;wreg free
  5735                           
  5736                           ;RTC.c: 79: break;
  5737  000DDE  D0B6               	goto	l4686
  5738  000DE0                     l4664:
  5739                           
  5740                           ;RTC.c: 81: strcpy(month, "Apr");
  5741  000DE0  0EBE               	movlw	low printRTC@month
  5742  000DE2  0100               	movlb	0	; () banked
  5743  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5744  000DE6  0E00               	movlw	high printRTC@month
  5745  000DE8  0100               	movlb	0	; () banked
  5746  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5747  000DEC  0EEB               	movlw	low STR_39
  5748  000DEE  0100               	movlb	0	; () banked
  5749  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5750  000DF2  0EFF               	movlw	high STR_39
  5751  000DF4  0100               	movlb	0	; () banked
  5752  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5753  000DF8  EC8B  F013         	call	_strcpy	;wreg free
  5754                           
  5755                           ;RTC.c: 82: break;
  5756  000DFC  D0A7               	goto	l4686
  5757  000DFE                     l4666:
  5758                           
  5759                           ;RTC.c: 84: strcpy(month, "May");
  5760  000DFE  0EBE               	movlw	low printRTC@month
  5761  000E00  0100               	movlb	0	; () banked
  5762  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5763  000E04  0E00               	movlw	high printRTC@month
  5764  000E06  0100               	movlb	0	; () banked
  5765  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5766  000E0A  0EF7               	movlw	low STR_40
  5767  000E0C  0100               	movlb	0	; () banked
  5768  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5769  000E10  0EFF               	movlw	high STR_40
  5770  000E12  0100               	movlb	0	; () banked
  5771  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5772  000E16  EC8B  F013         	call	_strcpy	;wreg free
  5773                           
  5774                           ;RTC.c: 85: break;
  5775  000E1A  D098               	goto	l4686
  5776  000E1C                     l4668:
  5777                           
  5778                           ;RTC.c: 87: strcpy(month, "Jun");
  5779  000E1C  0EBE               	movlw	low printRTC@month
  5780  000E1E  0100               	movlb	0	; () banked
  5781  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5782  000E22  0E00               	movlw	high printRTC@month
  5783  000E24  0100               	movlb	0	; () banked
  5784  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5785  000E28  0EDF               	movlw	low STR_41
  5786  000E2A  0100               	movlb	0	; () banked
  5787  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5788  000E2E  0EFF               	movlw	high STR_41
  5789  000E30  0100               	movlb	0	; () banked
  5790  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5791  000E34  EC8B  F013         	call	_strcpy	;wreg free
  5792                           
  5793                           ;RTC.c: 88: break;
  5794  000E38  D089               	goto	l4686
  5795  000E3A                     l4670:
  5796                           
  5797                           ;RTC.c: 90: strcpy(month, "Jul");
  5798  000E3A  0EBE               	movlw	low printRTC@month
  5799  000E3C  0100               	movlb	0	; () banked
  5800  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5801  000E40  0E00               	movlw	high printRTC@month
  5802  000E42  0100               	movlb	0	; () banked
  5803  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5804  000E46  0ED7               	movlw	low STR_42
  5805  000E48  0100               	movlb	0	; () banked
  5806  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5807  000E4C  0EFF               	movlw	high STR_42
  5808  000E4E  0100               	movlb	0	; () banked
  5809  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5810  000E52  EC8B  F013         	call	_strcpy	;wreg free
  5811                           
  5812                           ;RTC.c: 91: break;
  5813  000E56  D07A               	goto	l4686
  5814  000E58                     l4672:
  5815                           
  5816                           ;RTC.c: 93: strcpy(month, "Aug");
  5817  000E58  0EBE               	movlw	low printRTC@month
  5818  000E5A  0100               	movlb	0	; () banked
  5819  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5820  000E5E  0E00               	movlw	high printRTC@month
  5821  000E60  0100               	movlb	0	; () banked
  5822  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5823  000E64  0ED3               	movlw	low STR_43
  5824  000E66  0100               	movlb	0	; () banked
  5825  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5826  000E6A  0EFF               	movlw	high STR_43
  5827  000E6C  0100               	movlb	0	; () banked
  5828  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5829  000E70  EC8B  F013         	call	_strcpy	;wreg free
  5830                           
  5831                           ;RTC.c: 94: break;
  5832  000E74  D06B               	goto	l4686
  5833  000E76                     l4674:
  5834                           
  5835                           ;RTC.c: 96: strcpy(month, "Sep");
  5836  000E76  0EBE               	movlw	low printRTC@month
  5837  000E78  0100               	movlb	0	; () banked
  5838  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5839  000E7C  0E00               	movlw	high printRTC@month
  5840  000E7E  0100               	movlb	0	; () banked
  5841  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5842  000E82  0EE3               	movlw	low STR_44
  5843  000E84  0100               	movlb	0	; () banked
  5844  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5845  000E88  0EFF               	movlw	high STR_44
  5846  000E8A  0100               	movlb	0	; () banked
  5847  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5848  000E8E  EC8B  F013         	call	_strcpy	;wreg free
  5849                           
  5850                           ;RTC.c: 97: break;
  5851  000E92  D05C               	goto	l4686
  5852  000E94                     l4676:
  5853                           
  5854                           ;RTC.c: 99: strcpy(month, "Oct");
  5855  000E94  0EBE               	movlw	low printRTC@month
  5856  000E96  0100               	movlb	0	; () banked
  5857  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5858  000E9A  0E00               	movlw	high printRTC@month
  5859  000E9C  0100               	movlb	0	; () banked
  5860  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5861  000EA0  0EEF               	movlw	low STR_45
  5862  000EA2  0100               	movlb	0	; () banked
  5863  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5864  000EA6  0EFF               	movlw	high STR_45
  5865  000EA8  0100               	movlb	0	; () banked
  5866  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5867  000EAC  EC8B  F013         	call	_strcpy	;wreg free
  5868                           
  5869                           ;RTC.c: 100: break;
  5870  000EB0  D04D               	goto	l4686
  5871  000EB2                     l4678:
  5872                           
  5873                           ;RTC.c: 102: strcpy(month, "Nov");
  5874  000EB2  0EBE               	movlw	low printRTC@month
  5875  000EB4  0100               	movlb	0	; () banked
  5876  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5877  000EB8  0E00               	movlw	high printRTC@month
  5878  000EBA  0100               	movlb	0	; () banked
  5879  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5880  000EBE  0EF3               	movlw	low STR_46
  5881  000EC0  0100               	movlb	0	; () banked
  5882  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5883  000EC4  0EFF               	movlw	high STR_46
  5884  000EC6  0100               	movlb	0	; () banked
  5885  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5886  000ECA  EC8B  F013         	call	_strcpy	;wreg free
  5887                           
  5888                           ;RTC.c: 103: break;
  5889  000ECE  D03E               	goto	l4686
  5890  000ED0                     l4680:
  5891                           
  5892                           ;RTC.c: 105: strcpy(month, "Dec");
  5893  000ED0  0EBE               	movlw	low printRTC@month
  5894  000ED2  0100               	movlb	0	; () banked
  5895  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5896  000ED6  0E00               	movlw	high printRTC@month
  5897  000ED8  0100               	movlb	0	; () banked
  5898  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5899  000EDC  0ECF               	movlw	low STR_47
  5900  000EDE  0100               	movlb	0	; () banked
  5901  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5902  000EE2  0EFF               	movlw	high STR_47
  5903  000EE4  0100               	movlb	0	; () banked
  5904  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5905  000EE8  EC8B  F013         	call	_strcpy	;wreg free
  5906                           
  5907                           ;RTC.c: 107: }
  5908                           
  5909                           ;RTC.c: 106: break;
  5910  000EEC  D02F               	goto	l4686
  5911  000EEE                     l4684:
  5912  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5913  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5914                           
  5915                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5916                           ; Switch size 1, requested type "space"
  5917                           ; Number of cases is 1, Range of values is 0 to 0
  5918                           ; switch strategies available:
  5919                           ; Name         Instructions Cycles
  5920                           ; simple_byte            4     3 (average)
  5921                           ;	Chosen strategy is simple_byte
  5922  000EF6  0100               	movlb	0	; () banked
  5923  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5924  000EFA  0A00               	xorlw	0	; case 0
  5925  000EFC  A4D8               	btfss	status,2,c
  5926  000EFE  D026               	goto	l4686
  5927                           
  5928                           ; BSR set to: 0
  5929                           ; Switch size 1, requested type "space"
  5930                           ; Number of cases is 12, Range of values is 1 to 12
  5931                           ; switch strategies available:
  5932                           ; Name         Instructions Cycles
  5933                           ; simple_byte           37    19 (average)
  5934                           ;	Chosen strategy is simple_byte
  5935  000F00  0100               	movlb	0	; () banked
  5936  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5937  000F04  0A01               	xorlw	1	; case 1
  5938  000F06  B4D8               	btfsc	status,2,c
  5939  000F08  D73E               	goto	l4658
  5940  000F0A  0A03               	xorlw	3	; case 2
  5941  000F0C  B4D8               	btfsc	status,2,c
  5942  000F0E  D74A               	goto	l4660
  5943  000F10  0A01               	xorlw	1	; case 3
  5944  000F12  B4D8               	btfsc	status,2,c
  5945  000F14  D756               	goto	l4662
  5946  000F16  0A07               	xorlw	7	; case 4
  5947  000F18  B4D8               	btfsc	status,2,c
  5948  000F1A  D762               	goto	l4664
  5949  000F1C  0A01               	xorlw	1	; case 5
  5950  000F1E  B4D8               	btfsc	status,2,c
  5951  000F20  D76E               	goto	l4666
  5952  000F22  0A03               	xorlw	3	; case 6
  5953  000F24  B4D8               	btfsc	status,2,c
  5954  000F26  D77A               	goto	l4668
  5955  000F28  0A01               	xorlw	1	; case 7
  5956  000F2A  B4D8               	btfsc	status,2,c
  5957  000F2C  D786               	goto	l4670
  5958  000F2E  0A0F               	xorlw	15	; case 8
  5959  000F30  B4D8               	btfsc	status,2,c
  5960  000F32  D792               	goto	l4672
  5961  000F34  0A01               	xorlw	1	; case 9
  5962  000F36  B4D8               	btfsc	status,2,c
  5963  000F38  D79E               	goto	l4674
  5964  000F3A  0A03               	xorlw	3	; case 10
  5965  000F3C  B4D8               	btfsc	status,2,c
  5966  000F3E  D7AA               	goto	l4676
  5967  000F40  0A01               	xorlw	1	; case 11
  5968  000F42  B4D8               	btfsc	status,2,c
  5969  000F44  D7B6               	goto	l4678
  5970  000F46  0A07               	xorlw	7	; case 12
  5971  000F48  B4D8               	btfsc	status,2,c
  5972  000F4A  D7C2               	goto	l4680
  5973  000F4C                     l4686:
  5974                           
  5975                           ;RTC.c: 108: lcdInst(0b10000000);;
  5976  000F4C  0E80               	movlw	128
  5977  000F4E  ECD2  F015         	call	_lcdInst
  5978                           
  5979                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5980  000F52  0ED0               	movlw	low STR_48
  5981  000F54  0100               	movlb	0	; () banked
  5982  000F56  6F8E               	movwf	printf@f& (0+255),b
  5983  000F58  0EFD               	movlw	high STR_48
  5984  000F5A  0100               	movlb	0	; () banked
  5985  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5986  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5987  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5988  000F66  0EBE               	movlw	low printRTC@month
  5989  000F68  0100               	movlb	0	; () banked
  5990  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5991  000F6C  0E00               	movlw	high printRTC@month
  5992  000F6E  0100               	movlb	0	; () banked
  5993  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5994  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5995  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5996  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5997  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5998  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5999  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  6000  000F8A  ECBB  F002         	call	_printf	;wreg free
  6001  000F8E  0012               	return		;funcret
  6002  000F90                     __end_of_printRTC:
  6003                           	opt stack 0
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           intcon2	equ	0xFF1
  6012                           intcon3	equ	0xFF0
  6013                           postinc0	equ	0xFEE
  6014                           wreg	equ	0xFE8
  6015                           postdec1	equ	0xFE5
  6016                           fsr1l	equ	0xFE1
  6017                           indf2	equ	0xFDF
  6018                           postinc2	equ	0xFDE
  6019                           postdec2	equ	0xFDD
  6020                           fsr2h	equ	0xFDA
  6021                           fsr2l	equ	0xFD9
  6022                           status	equ	0xFD8
  6023                           
  6024 ;; *************** function _strcpy *****************
  6025 ;; Defined at:
  6026 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  to              2    0[BANK0 ] PTR unsigned char 
  6029 ;;		 -> printRTC@month(4), 
  6030 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  6031 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  6032 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  6033 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  6036 ;;		 -> printRTC@month(4), 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  2    0[BANK0 ] PTR unsigned char 
  6039 ;; Registers used:
  6040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6041 ;; Tracked objects:
  6042 ;;		On entry : 0/0
  6043 ;;		On exit  : 0/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6046 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;Total ram usage:        6 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:    7
  6053 ;; This function calls:
  6054 ;;		Nothing
  6055 ;; This function is called by:
  6056 ;;		_printRTC
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text22
  6061  002716                     __ptext22:
  6062                           	opt stack 0
  6063  002716                     _strcpy:
  6064                           	opt stack 20
  6065                           
  6066                           ;incstack = 0
  6067  002716  C080  F084         	movff	strcpy@to,strcpy@cp
  6068  00271A  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  6069  00271E  D006               	goto	l4440
  6070  002720                     l4438:
  6071  002720  0100               	movlb	0	; () banked
  6072  002722  4B84               	infsnz	strcpy@cp& (0+255),f,b
  6073  002724  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  6074  002726  0100               	movlb	0	; () banked
  6075  002728  4B82               	infsnz	strcpy@from& (0+255),f,b
  6076  00272A  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6077  00272C                     l4440:
  6078  00272C  C082  FFF6         	movff	strcpy@from,tblptrl
  6079  002730  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6080  002734                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6081  002734  6AF8               	clrf	tblptru,c
  6082  002736                     	endif
  6083  002736                     	if	0	;tblptru may be non-zero
  6084  002736                     	endif
  6085  002736  C084  FFD9         	movff	strcpy@cp,fsr2l
  6086  00273A  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6087  00273E  0008               	tblrd		*
  6088  002740  CFF5 FFDF          	movff	tablat,indf2
  6089  002744  50DF               	movf	indf2,w,c
  6090  002746  B4D8               	btfsc	status,2,c
  6091  002748  0012               	return	
  6092  00274A  D7EA               	goto	l4438
  6093  00274C                     __end_of_strcpy:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           intcon2	equ	0xFF1
  6103                           intcon3	equ	0xFF0
  6104                           postinc0	equ	0xFEE
  6105                           wreg	equ	0xFE8
  6106                           postdec1	equ	0xFE5
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _getRTC *****************
  6116 ;; Defined at:
  6117 ;;		line 43 in file "RTC.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  i               2    3[BANK0 ] int 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;Total ram usage:        2 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    9
  6138 ;; This function calls:
  6139 ;;		_I2C_Master_Read
  6140 ;;		_I2C_Master_Start
  6141 ;;		_I2C_Master_Stop
  6142 ;;		_I2C_Master_Write
  6143 ;; This function is called by:
  6144 ;;		_printRTC
  6145 ;;		_initSortTimer
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text23
  6150  002142                     __ptext23:
  6151                           	opt stack 0
  6152  002142                     _getRTC:
  6153                           	opt stack 18
  6154                           
  6155                           ;RTC.c: 47: I2C_Master_Start();
  6156                           
  6157                           ;incstack = 0
  6158  002142  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  6159                           
  6160                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6161  002146  0E00               	movlw	0
  6162  002148  0100               	movlb	0	; () banked
  6163  00214A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6164  00214C  0ED0               	movlw	208
  6165  00214E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6166  002150  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  6167                           
  6168                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6169  002154  0E00               	movlw	0
  6170  002156  0100               	movlb	0	; () banked
  6171  002158  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6172  00215A  0E00               	movlw	0
  6173  00215C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6174  00215E  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  6175                           
  6176                           ;RTC.c: 50: I2C_Master_Stop();
  6177  002162  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  6178                           
  6179                           ;RTC.c: 53: I2C_Master_Start();
  6180  002166  ECF4  F015         	call	_I2C_Master_Start	;wreg free
  6181                           
  6182                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6183  00216A  0E00               	movlw	0
  6184  00216C  0100               	movlb	0	; () banked
  6185  00216E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6186  002170  0ED1               	movlw	209
  6187  002172  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6188  002174  ECE6  F015         	call	_I2C_Master_Write	;wreg free
  6189                           
  6190                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6191  002178  0E00               	movlw	0
  6192  00217A  0100               	movlb	0	; () banked
  6193  00217C  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6194  00217E  0E00               	movlw	0
  6195  002180  6F83               	movwf	getRTC@i& (0+255),b
  6196  002182                     l4424:
  6197                           
  6198                           ; BSR set to: 0
  6199  002182  0100               	movlb	0	; () banked
  6200  002184  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6201  002186  D008               	goto	l4428
  6202  002188  0100               	movlb	0	; () banked
  6203  00218A  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6204  00218C  E115               	bnz	l4434
  6205  00218E  0E06               	movlw	6
  6206  002190  0100               	movlb	0	; () banked
  6207  002192  5D83               	subwf	getRTC@i& (0+255),w,b
  6208  002194  B0D8               	btfsc	status,0,c
  6209  002196  D010               	goto	l4434
  6210  002198                     l4428:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6214  002198  0EDC               	movlw	low _time
  6215  00219A  0100               	movlb	0	; () banked
  6216  00219C  2583               	addwf	getRTC@i& (0+255),w,b
  6217  00219E  6ED9               	movwf	fsr2l,c
  6218  0021A0  0E00               	movlw	high _time
  6219  0021A2  0100               	movlb	0	; () banked
  6220  0021A4  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6221  0021A6  6EDA               	movwf	fsr2h,c
  6222  0021A8  0E01               	movlw	1
  6223  0021AA  ECB2  F014         	call	_I2C_Master_Read
  6224  0021AE  6EDF               	movwf	indf2,c
  6225  0021B0  0100               	movlb	0	; () banked
  6226  0021B2  4B83               	infsnz	getRTC@i& (0+255),f,b
  6227  0021B4  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6228  0021B6  D7E5               	goto	l4424
  6229  0021B8                     l4434:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;RTC.c: 57: }
  6233                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6234  0021B8  0E00               	movlw	0
  6235  0021BA  ECB2  F014         	call	_I2C_Master_Read
  6236  0021BE  0100               	movlb	0	; () banked
  6237  0021C0  6FE2               	movwf	(_time+6)& (0+255),b
  6238                           
  6239                           ;RTC.c: 59: I2C_Master_Stop();
  6240  0021C2  ECF0  F015         	call	_I2C_Master_Stop	;wreg free
  6241  0021C6  0012               	return		;funcret
  6242  0021C8                     __end_of_getRTC:
  6243                           	opt stack 0
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           intcon	equ	0xFF2
  6251                           intcon2	equ	0xFF1
  6252                           intcon3	equ	0xFF0
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postdec1	equ	0xFE5
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _I2C_Master_Write *****************
  6265 ;; Defined at:
  6266 ;;		line 48 in file "I2C.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  d               2    1[BANK0 ] unsigned int 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:        2 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    8
  6287 ;; This function calls:
  6288 ;;		_I2C_Master_Wait
  6289 ;; This function is called by:
  6290 ;;		_loadRTC
  6291 ;;		_getRTC
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text24
  6296  002BCC                     __ptext24:
  6297                           	opt stack 0
  6298  002BCC                     _I2C_Master_Write:
  6299                           	opt stack 18
  6300                           
  6301                           ;I2C.c: 50: I2C_Master_Wait();
  6302                           
  6303                           ;incstack = 0
  6304  002BCC  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6305                           
  6306                           ;I2C.c: 51: SSPBUF = d;
  6307  002BD0  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6308  002BD4  0012               	return		;funcret
  6309  002BD6                     __end_of_I2C_Master_Write:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           intcon2	equ	0xFF1
  6319                           intcon3	equ	0xFF0
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           postdec1	equ	0xFE5
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _I2C_Master_Stop *****************
  6332 ;; Defined at:
  6333 ;;		line 42 in file "I2C.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;Total ram usage:        0 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    8
  6354 ;; This function calls:
  6355 ;;		_I2C_Master_Wait
  6356 ;; This function is called by:
  6357 ;;		_loadRTC
  6358 ;;		_getRTC
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text25
  6363  002BE0                     __ptext25:
  6364                           	opt stack 0
  6365  002BE0                     _I2C_Master_Stop:
  6366                           	opt stack 18
  6367                           
  6368                           ;I2C.c: 44: I2C_Master_Wait();
  6369                           
  6370                           ;incstack = 0
  6371  002BE0  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6372                           
  6373                           ;I2C.c: 45: PEN = 1;
  6374  002BE4  84C5               	bsf	4037,2,c	;volatile
  6375  002BE6  0012               	return		;funcret
  6376  002BE8                     __end_of_I2C_Master_Stop:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           intcon	equ	0xFF2
  6385                           intcon2	equ	0xFF1
  6386                           intcon3	equ	0xFF0
  6387                           postinc0	equ	0xFEE
  6388                           wreg	equ	0xFE8
  6389                           postdec1	equ	0xFE5
  6390                           fsr1l	equ	0xFE1
  6391                           indf2	equ	0xFDF
  6392                           postinc2	equ	0xFDE
  6393                           postdec2	equ	0xFDD
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function _I2C_Master_Start *****************
  6399 ;; Defined at:
  6400 ;;		line 30 in file "I2C.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;		None
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;		None
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, status,2, status,0, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;Total ram usage:        0 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; Hardware stack levels required when called:    8
  6421 ;; This function calls:
  6422 ;;		_I2C_Master_Wait
  6423 ;; This function is called by:
  6424 ;;		_loadRTC
  6425 ;;		_getRTC
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text26
  6430  002BE8                     __ptext26:
  6431                           	opt stack 0
  6432  002BE8                     _I2C_Master_Start:
  6433                           	opt stack 18
  6434                           
  6435                           ;I2C.c: 32: I2C_Master_Wait();
  6436                           
  6437                           ;incstack = 0
  6438  002BE8  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6439                           
  6440                           ;I2C.c: 33: SEN = 1;
  6441  002BEC  80C5               	bsf	4037,0,c	;volatile
  6442  002BEE  0012               	return		;funcret
  6443  002BF0                     __end_of_I2C_Master_Start:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           intcon2	equ	0xFF1
  6453                           intcon3	equ	0xFF0
  6454                           postinc0	equ	0xFEE
  6455                           wreg	equ	0xFE8
  6456                           postdec1	equ	0xFE5
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _I2C_Master_Read *****************
  6466 ;; Defined at:
  6467 ;;		line 54 in file "I2C.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  a               1    wreg     unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  a               1    1[BANK0 ] unsigned char 
  6472 ;;  temp            1    2[BANK0 ] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      unsigned char 
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    8
  6489 ;; This function calls:
  6490 ;;		_I2C_Master_Wait
  6491 ;; This function is called by:
  6492 ;;		_getRTC
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text27
  6497  002964                     __ptext27:
  6498                           	opt stack 0
  6499  002964                     _I2C_Master_Read:
  6500                           	opt stack 18
  6501                           
  6502                           ;incstack = 0
  6503                           ;I2C_Master_Read@a stored from wreg
  6504  002964  0100               	movlb	0	; () banked
  6505  002966  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6506                           
  6507                           ;I2C.c: 56: unsigned char temp;
  6508                           ;I2C.c: 57: I2C_Master_Wait();
  6509  002968  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6510                           
  6511                           ;I2C.c: 58: RCEN = 1;
  6512  00296C  86C5               	bsf	4037,3,c	;volatile
  6513                           
  6514                           ;I2C.c: 59: I2C_Master_Wait();
  6515  00296E  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6516                           
  6517                           ;I2C.c: 60: temp = SSPBUF;
  6518  002972  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6519                           
  6520                           ;I2C.c: 61: I2C_Master_Wait();
  6521  002976  ECA4  F015         	call	_I2C_Master_Wait	;wreg free
  6522                           
  6523                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6524  00297A  0100               	movlb	0	; () banked
  6525  00297C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6526  00297E  0100               	movlb	0	; () banked
  6527  002980  A4D8               	btfss	status,2,c
  6528  002982  D002               	goto	u2420
  6529  002984  8AC5               	bsf	4037,5,c	;volatile
  6530  002986  D001               	goto	l4126
  6531  002988                     u2420:
  6532  002988  9AC5               	bcf	4037,5,c	;volatile
  6533  00298A                     l4126:
  6534                           
  6535                           ;I2C.c: 63: ACKEN = 1;
  6536  00298A  88C5               	bsf	4037,4,c	;volatile
  6537                           
  6538                           ;I2C.c: 64: return temp;
  6539  00298C  0100               	movlb	0	; () banked
  6540  00298E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6541  002990  0012               	return	
  6542  002992                     __end_of_I2C_Master_Read:
  6543                           	opt stack 0
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           intcon	equ	0xFF2
  6551                           intcon2	equ	0xFF1
  6552                           intcon3	equ	0xFF0
  6553                           postinc0	equ	0xFEE
  6554                           wreg	equ	0xFE8
  6555                           postdec1	equ	0xFE5
  6556                           fsr1l	equ	0xFE1
  6557                           indf2	equ	0xFDF
  6558                           postinc2	equ	0xFDE
  6559                           postdec2	equ	0xFDD
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _I2C_Master_Wait *****************
  6565 ;; Defined at:
  6566 ;;		line 25 in file "I2C.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;		None
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;		None
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, status,0
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;Total ram usage:        1 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    7
  6587 ;; This function calls:
  6588 ;;		Nothing
  6589 ;; This function is called by:
  6590 ;;		_I2C_Master_Start
  6591 ;;		_I2C_Master_Stop
  6592 ;;		_I2C_Master_Write
  6593 ;;		_I2C_Master_Read
  6594 ;;		_I2C_Master_RepeatedStart
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text28
  6599  002B48                     __ptext28:
  6600                           	opt stack 0
  6601  002B48                     _I2C_Master_Wait:
  6602                           	opt stack 18
  6603  002B48                     l172:
  6604  002B48  B4C7               	btfsc	4039,2,c	;volatile
  6605  002B4A  D7FE               	goto	l172
  6606  002B4C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6607  002B50  0E1F               	movlw	31
  6608  002B52  0100               	movlb	0	; () banked
  6609  002B54  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6610  002B56  B4D8               	btfsc	status,2,c
  6611  002B58  0012               	return	
  6612  002B5A  D7F6               	goto	l172
  6613  002B5C                     __end_of_I2C_Master_Wait:
  6614                           	opt stack 0
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           intcon	equ	0xFF2
  6622                           intcon2	equ	0xFF1
  6623                           intcon3	equ	0xFF0
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           fsr1l	equ	0xFE1
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _change_state_to_menu_22 *****************
  6636 ;; Defined at:
  6637 ;;		line 440 in file "UI.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        0 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:   10
  6658 ;; This function calls:
  6659 ;;		_lcdInst
  6660 ;;		_printf
  6661 ;; This function is called by:
  6662 ;;		_UI
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text29
  6667  0026A6                     __ptext29:
  6668                           	opt stack 0
  6669  0026A6                     _change_state_to_menu_22:
  6670                           	opt stack 19
  6671                           
  6672                           ;UI.c: 441: cur_state = 22;
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;incstack = 0
  6676  0026A6  0E00               	movlw	0
  6677  0026A8  0100               	movlb	0	; () banked
  6678  0026AA  6FEA               	movwf	(_cur_state+1)& (0+255),b
  6679  0026AC  0E16               	movlw	22
  6680  0026AE  6FE9               	movwf	_cur_state& (0+255),b
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;UI.c: 443: lcdInst(0b10000000);;
  6684  0026B0  0E80               	movlw	128
  6685  0026B2  ECD2  F015         	call	_lcdInst
  6686                           
  6687                           ;UI.c: 444: printf("2. SORT        <");
  6688  0026B6  0E64               	movlw	low STR_19
  6689  0026B8  0100               	movlb	0	; () banked
  6690  0026BA  6F8E               	movwf	printf@f& (0+255),b
  6691  0026BC  0EFF               	movlw	high STR_19
  6692  0026BE  0100               	movlb	0	; () banked
  6693  0026C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  6694  0026C2  ECBB  F002         	call	_printf	;wreg free
  6695                           
  6696                           ;UI.c: 445: lcdInst(0b11000000);;
  6697  0026C6  0EC0               	movlw	192
  6698  0026C8  ECD2  F015         	call	_lcdInst
  6699                           
  6700                           ;UI.c: 446: printf("3. LOGS         ");
  6701  0026CC  0E65               	movlw	low STR_21
  6702  0026CE  0100               	movlb	0	; () banked
  6703  0026D0  6F8E               	movwf	printf@f& (0+255),b
  6704  0026D2  0EFE               	movlw	high STR_21
  6705  0026D4  0100               	movlb	0	; () banked
  6706  0026D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6707  0026D8  ECBB  F002         	call	_printf	;wreg free
  6708  0026DC  0012               	return		;funcret
  6709  0026DE                     __end_of_change_state_to_menu_22:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           intcon2	equ	0xFF1
  6719                           intcon3	equ	0xFF0
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _change_state_to_menu_12 *****************
  6732 ;; Defined at:
  6733 ;;		line 432 in file "UI.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:   10
  6754 ;; This function calls:
  6755 ;;		_lcdInst
  6756 ;;		_printf
  6757 ;; This function is called by:
  6758 ;;		_UI
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text30
  6763  0026DE                     __ptext30:
  6764                           	opt stack 0
  6765  0026DE                     _change_state_to_menu_12:
  6766                           	opt stack 19
  6767                           
  6768                           ;UI.c: 433: cur_state = 12;
  6769                           
  6770                           ;incstack = 0
  6771  0026DE  0E00               	movlw	0
  6772  0026E0  0100               	movlb	0	; () banked
  6773  0026E2  6FEA               	movwf	(_cur_state+1)& (0+255),b
  6774  0026E4  0E0C               	movlw	12
  6775  0026E6  6FE9               	movwf	_cur_state& (0+255),b
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;UI.c: 435: lcdInst(0b10000000);;
  6779  0026E8  0E80               	movlw	128
  6780  0026EA  ECD2  F015         	call	_lcdInst
  6781                           
  6782                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6783  0026EE  0E87               	movlw	low STR_18
  6784  0026F0  0100               	movlb	0	; () banked
  6785  0026F2  6F8E               	movwf	printf@f& (0+255),b
  6786  0026F4  0EFE               	movlw	high STR_18
  6787  0026F6  0100               	movlb	0	; () banked
  6788  0026F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6789  0026FA  ECBB  F002         	call	_printf	;wreg free
  6790                           
  6791                           ;UI.c: 437: lcdInst(0b11000000);;
  6792  0026FE  0EC0               	movlw	192
  6793  002700  ECD2  F015         	call	_lcdInst
  6794                           
  6795                           ;UI.c: 438: printf("2. SORT        <");
  6796  002704  0E64               	movlw	low STR_19
  6797  002706  0100               	movlb	0	; () banked
  6798  002708  6F8E               	movwf	printf@f& (0+255),b
  6799  00270A  0EFF               	movlw	high STR_19
  6800  00270C  0100               	movlb	0	; () banked
  6801  00270E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6802  002710  ECBB  F002         	call	_printf	;wreg free
  6803  002714  0012               	return		;funcret
  6804  002716                     __end_of_change_state_to_menu_12:
  6805                           	opt stack 0
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           intcon	equ	0xFF2
  6813                           intcon2	equ	0xFF1
  6814                           intcon3	equ	0xFF0
  6815                           postinc0	equ	0xFEE
  6816                           wreg	equ	0xFE8
  6817                           postdec1	equ	0xFE5
  6818                           fsr1l	equ	0xFE1
  6819                           indf2	equ	0xFDF
  6820                           postinc2	equ	0xFDE
  6821                           postdec2	equ	0xFDD
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function _printf *****************
  6827 ;; Defined at:
  6828 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6831 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6832 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6833 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6834 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6835 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6836 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6837 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6838 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6839 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6840 ;;		 -> STR_2(21), STR_1(17), 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  tmpval          4    0        struct .
  6843 ;;  width           2   41[BANK0 ] int 
  6844 ;;  len             2   37[BANK0 ] unsigned int 
  6845 ;;  val             2   35[BANK0 ] unsigned int 
  6846 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6847 ;;		 -> STR_51(7), printRTC@month(4), 
  6848 ;;  ap              2   31[BANK0 ] PTR void [1]
  6849 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6850 ;;  c               1   40[BANK0 ] char 
  6851 ;;  flag            1   39[BANK0 ] unsigned char 
  6852 ;;  prec            1   30[BANK0 ] char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  2   14[BANK0 ] int 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6862 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;Total ram usage:       29 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    9
  6869 ;; This function calls:
  6870 ;;		___lwdiv
  6871 ;;		___lwmod
  6872 ;;		___wmul
  6873 ;;		_isdigit
  6874 ;;		_putch
  6875 ;; This function is called by:
  6876 ;;		_UI
  6877 ;;		_change_state_to_menu_start
  6878 ;;		_change_state_to_menu_12
  6879 ;;		_change_state_to_menu_22
  6880 ;;		_printRTC
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text31
  6885  000576                     __ptext31:
  6886                           	opt stack 0
  6887  000576                     _printf:
  6888                           	opt stack 19
  6889                           
  6890                           ;doprnt.c: 466: va_list ap;
  6891                           ;doprnt.c: 499: signed char c;
  6892                           ;doprnt.c: 501: int width;
  6893                           ;doprnt.c: 506: signed char prec;
  6894                           ;doprnt.c: 508: unsigned char flag;
  6895                           ;doprnt.c: 523: union {
  6896                           ;doprnt.c: 524: unsigned long vd;
  6897                           ;doprnt.c: 525: double integ;
  6898                           ;doprnt.c: 526: } tmpval;
  6899                           ;doprnt.c: 528: unsigned int val;
  6900                           ;doprnt.c: 529: unsigned len;
  6901                           ;doprnt.c: 530: const char * cp;
  6902                           ;doprnt.c: 533: *ap = __va_start();
  6903                           
  6904                           ;incstack = 0
  6905  000576  0E90               	movlw	low (?_printf+2)
  6906  000578  0100               	movlb	0	; () banked
  6907  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6908  00057C  0E00               	movlw	high (?_printf+2)
  6909  00057E  0100               	movlb	0	; () banked
  6910  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6911                           
  6912                           ;doprnt.c: 536: while(c = *f++) {
  6913  000582  D1EE               	goto	l4418
  6914  000584                     l4294:
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;doprnt.c: 538: if(c != '%')
  6918  000584  0E25               	movlw	37
  6919  000586  0100               	movlb	0	; () banked
  6920  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6921  00058A  B4D8               	btfsc	status,2,c
  6922  00058C  D005               	goto	l4298
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;doprnt.c: 540: {
  6926                           ;doprnt.c: 541: (putch(c) );
  6927  00058E  0100               	movlb	0	; () banked
  6928  000590  51A8               	movf	printf@c& (0+255),w,b
  6929  000592  ECCA  F015         	call	_putch
  6930                           
  6931                           ;doprnt.c: 542: continue;
  6932  000596  D1E4               	goto	l4418
  6933  000598                     l4298:
  6934                           
  6935                           ;doprnt.c: 543: }
  6936                           ;doprnt.c: 546: width = 0;
  6937  000598  0E00               	movlw	0
  6938  00059A  0100               	movlb	0	; () banked
  6939  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6940  00059E  0E00               	movlw	0
  6941  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6942                           
  6943                           ;doprnt.c: 548: flag = 0;
  6944  0005A2  0E00               	movlw	0
  6945  0005A4  0100               	movlb	0	; () banked
  6946  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;doprnt.c: 551: switch(*f) {
  6950                           
  6951                           ;doprnt.c: 550: for(;;) {
  6952  0005A8  D005               	goto	l4304
  6953  0005AA                     l4300:
  6954                           
  6955                           ;doprnt.c: 580: flag |= 0x04;
  6956  0005AA  0100               	movlb	0	; () banked
  6957  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6958                           
  6959                           ;doprnt.c: 581: f++;
  6960  0005AE  0100               	movlb	0	; () banked
  6961  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6962  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6963  0005B4                     l4304:
  6964  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6965  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6966  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6967  0005BC  6AF8               	clrf	tblptru,c
  6968  0005BE                     	endif
  6969  0005BE                     	if	0	;tblptru may be non-zero
  6970  0005BE                     	endif
  6971  0005BE  0008               	tblrd		*
  6972  0005C0  50F5               	movf	tablat,w,c
  6973                           
  6974                           ; Switch size 1, requested type "space"
  6975                           ; Number of cases is 1, Range of values is 48 to 48
  6976                           ; switch strategies available:
  6977                           ; Name         Instructions Cycles
  6978                           ; simple_byte            4     3 (average)
  6979                           ;	Chosen strategy is simple_byte
  6980  0005C2  0A30               	xorlw	48	; case 48
  6981  0005C4  B4D8               	btfsc	status,2,c
  6982  0005C6  D7F1               	goto	l4300
  6983                           
  6984                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6985                           
  6986                           ;doprnt.c: 586: }
  6987                           
  6988                           ;doprnt.c: 585: break;
  6989  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6990  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6991  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6992  0005D0  6AF8               	clrf	tblptru,c
  6993  0005D2                     	endif
  6994  0005D2                     	if	0	;tblptru may be non-zero
  6995  0005D2                     	endif
  6996  0005D2  0008               	tblrd		*
  6997  0005D4  50F5               	movf	tablat,w,c
  6998  0005D6  EC0C  F015         	call	_isdigit
  6999  0005DA  A0D8               	btfss	status,0,c
  7000  0005DC  D0CF               	goto	l4350
  7001                           
  7002                           ;doprnt.c: 598: width = 0;
  7003  0005DE  0E00               	movlw	0
  7004  0005E0  0100               	movlb	0	; () banked
  7005  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  7006  0005E4  0E00               	movlw	0
  7007  0005E6  6FA9               	movwf	printf@width& (0+255),b
  7008  0005E8                     l4310:
  7009                           
  7010                           ;doprnt.c: 600: width *= 10;
  7011  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  7012  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  7013  0005F0  0E00               	movlw	0
  7014  0005F2  0100               	movlb	0	; () banked
  7015  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7016  0005F6  0E0A               	movlw	10
  7017  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7018  0005FA  ECA6  F013         	call	___wmul	;wreg free
  7019  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  7020  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  7021                           
  7022                           ;doprnt.c: 601: width += *f++ - '0';
  7023  000606  0ED0               	movlw	208
  7024  000608  0100               	movlb	0	; () banked
  7025  00060A  6F9A               	movwf	??_printf& (0+255),b
  7026  00060C  0EFF               	movlw	255
  7027  00060E  0100               	movlb	0	; () banked
  7028  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  7029  000612  C08E  FFF6         	movff	printf@f,tblptrl
  7030  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  7031  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7032  00061A  6AF8               	clrf	tblptru,c
  7033  00061C                     	endif
  7034  00061C                     	if	0	;tblptru may be non-zero
  7035  00061C                     	endif
  7036  00061C  0008               	tblrd		*
  7037  00061E  50F5               	movf	tablat,w,c
  7038  000620  0100               	movlb	0	; () banked
  7039  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  7040  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  7041  000626  0100               	movlb	0	; () banked
  7042  000628  519A               	movf	??_printf& (0+255),w,b
  7043  00062A  0100               	movlb	0	; () banked
  7044  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  7045  00062E  0100               	movlb	0	; () banked
  7046  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  7047  000632  0100               	movlb	0	; () banked
  7048  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  7049  000636  0100               	movlb	0	; () banked
  7050  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  7051  00063A  0100               	movlb	0	; () banked
  7052  00063C  27A9               	addwf	printf@width& (0+255),f,b
  7053  00063E  0100               	movlb	0	; () banked
  7054  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  7055  000642  0100               	movlb	0	; () banked
  7056  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  7057                           
  7058                           ; BSR set to: 0
  7059  000646  0100               	movlb	0	; () banked
  7060  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  7061  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7065  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  7066  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  7067  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7068  000654  6AF8               	clrf	tblptru,c
  7069  000656                     	endif
  7070  000656                     	if	0	;tblptru may be non-zero
  7071  000656                     	endif
  7072  000656  0008               	tblrd		*
  7073  000658  50F5               	movf	tablat,w,c
  7074  00065A  EC0C  F015         	call	_isdigit
  7075  00065E  A0D8               	btfss	status,0,c
  7076  000660  D08D               	goto	l4350
  7077  000662  D7C2               	goto	l4310
  7078  000664                     l4318:
  7079                           
  7080                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7081  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7082  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7083  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7084  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7085  000674  0E02               	movlw	2
  7086  000676  0100               	movlb	0	; () banked
  7087  000678  279F               	addwf	printf@ap& (0+255),f,b
  7088  00067A  0E00               	movlw	0
  7089  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;doprnt.c: 740: if(!cp)
  7093  00067E  0100               	movlb	0	; () banked
  7094  000680  51A1               	movf	printf@cp& (0+255),w,b
  7095  000682  0100               	movlb	0	; () banked
  7096  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7097  000686  A4D8               	btfss	status,2,c
  7098  000688  D006               	goto	l4326
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;doprnt.c: 741: cp = "(null)";
  7102  00068A  0EBD               	movlw	low STR_51
  7103  00068C  0100               	movlb	0	; () banked
  7104  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7105  000690  0EFF               	movlw	high STR_51
  7106  000692  0100               	movlb	0	; () banked
  7107  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7108  000696                     l4326:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;doprnt.c: 745: len = 0;
  7112  000696  0E00               	movlw	0
  7113  000698  0100               	movlb	0	; () banked
  7114  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7115  00069C  0E00               	movlw	0
  7116  00069E  6FA5               	movwf	printf@len& (0+255),b
  7117                           
  7118                           ;doprnt.c: 746: while(cp[len])
  7119  0006A0  D003               	goto	l4330
  7120  0006A2                     l4328:
  7121                           
  7122                           ;doprnt.c: 747: len++;
  7123  0006A2  0100               	movlb	0	; () banked
  7124  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7125  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7126  0006A8                     l4330:
  7127                           
  7128                           ; BSR set to: 0
  7129  0006A8  0100               	movlb	0	; () banked
  7130  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7131  0006AC  0100               	movlb	0	; () banked
  7132  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7133  0006B0  0100               	movlb	0	; () banked
  7134  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7135  0006B4  0100               	movlb	0	; () banked
  7136  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7137  0006B8  0100               	movlb	0	; () banked
  7138  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7139  0006BC  0100               	movlb	0	; () banked
  7140  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7141  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7142  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7143  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7144  0006CA  6EF8               	movwf	tblptru,c
  7145  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7146  0006CE  64F7               	cpfsgt	tblptrh,c
  7147  0006D0  D003               	bra	u2677
  7148  0006D2  0008               	tblrd		*
  7149  0006D4  50F5               	movf	tablat,w,c
  7150  0006D6  D005               	bra	u2670
  7151  0006D8                     u2677:
  7152  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7153  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7154  0006E0  50EF               	movf	indf0,w,c
  7155  0006E2                     u2670:
  7156  0006E2  0900               	iorlw	0
  7157  0006E4  A4D8               	btfss	status,2,c
  7158  0006E6  D7DD               	goto	l4328
  7159                           
  7160                           ;doprnt.c: 757: if(width > len)
  7161  0006E8  0100               	movlb	0	; () banked
  7162  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7163  0006EC  0100               	movlb	0	; () banked
  7164  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7165  0006F0  0100               	movlb	0	; () banked
  7166  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7167  0006F4  0100               	movlb	0	; () banked
  7168  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7169  0006F8  B0D8               	btfsc	status,0,c
  7170  0006FA  D009               	goto	l4336
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;doprnt.c: 758: width -= len;
  7174  0006FC  0100               	movlb	0	; () banked
  7175  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7176  000700  0100               	movlb	0	; () banked
  7177  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7178  000704  0100               	movlb	0	; () banked
  7179  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7180  000708  0100               	movlb	0	; () banked
  7181  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7182  00070C  D009               	goto	l4340
  7183  00070E                     l4336:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;doprnt.c: 759: else
  7187                           ;doprnt.c: 760: width = 0;
  7188  00070E  0E00               	movlw	0
  7189  000710  0100               	movlb	0	; () banked
  7190  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7191  000714  0E00               	movlw	0
  7192  000716  6FA9               	movwf	printf@width& (0+255),b
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;doprnt.c: 764: while(width--)
  7196  000718  D003               	goto	l4340
  7197  00071A                     l4338:
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;doprnt.c: 765: (putch(' ') );
  7201  00071A  0E20               	movlw	32
  7202  00071C  ECCA  F015         	call	_putch
  7203  000720                     l4340:
  7204  000720  0100               	movlb	0	; () banked
  7205  000722  07A9               	decf	printf@width& (0+255),f,b
  7206  000724  A0D8               	btfss	status,0,c
  7207  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7208  000728  0100               	movlb	0	; () banked
  7209  00072A  29A9               	incf	printf@width& (0+255),w,b
  7210  00072C  E1F6               	bnz	l4338
  7211  00072E  0100               	movlb	0	; () banked
  7212  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7213  000732  B4D8               	btfsc	status,2,c
  7214  000734  D017               	goto	l4346
  7215  000736  D7F1               	goto	l4338
  7216  000738                     l4342:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;doprnt.c: 768: (putch(*cp++) );
  7220  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7221  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7222  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7223  000742  6EF8               	movwf	tblptru,c
  7224  000744  0E0F               	movlw	(high __ramtop+-1)
  7225  000746  64F7               	cpfsgt	tblptrh,c
  7226  000748  D003               	bra	u2717
  7227  00074A  0008               	tblrd		*
  7228  00074C  50F5               	movf	tablat,w,c
  7229  00074E  D005               	bra	u2710
  7230  000750                     u2717:
  7231  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7232  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7233  000758  50EF               	movf	indf0,w,c
  7234  00075A                     u2710:
  7235  00075A  ECCA  F015         	call	_putch
  7236  00075E  0100               	movlb	0	; () banked
  7237  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7238  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7239  000764                     l4346:
  7240                           
  7241                           ; BSR set to: 0
  7242  000764  0100               	movlb	0	; () banked
  7243  000766  07A5               	decf	printf@len& (0+255),f,b
  7244  000768  A0D8               	btfss	status,0,c
  7245  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7246  00076C  0100               	movlb	0	; () banked
  7247  00076E  29A5               	incf	printf@len& (0+255),w,b
  7248  000770  E1E3               	bnz	l4342
  7249  000772  0100               	movlb	0	; () banked
  7250  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7251  000776  B4D8               	btfsc	status,2,c
  7252  000778  D0F3               	goto	l4418
  7253  00077A  D7DE               	goto	l4342
  7254  00077C                     l4350:
  7255  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7256  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7257  000784  0100               	movlb	0	; () banked
  7258  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7259  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7260  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7261  00078A  6AF8               	clrf	tblptru,c
  7262  00078C                     	endif
  7263  00078C                     	if	0	;tblptru may be non-zero
  7264  00078C                     	endif
  7265  00078C  0008               	tblrd		*
  7266  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7267  000792  0100               	movlb	0	; () banked
  7268  000794  51A8               	movf	printf@c& (0+255),w,b
  7269                           
  7270                           ; Switch size 1, requested type "space"
  7271                           ; Number of cases is 4, Range of values is 0 to 115
  7272                           ; switch strategies available:
  7273                           ; Name         Instructions Cycles
  7274                           ; simple_byte           13     7 (average)
  7275                           ;	Chosen strategy is simple_byte
  7276  000796  0A00               	xorlw	0	; case 0
  7277  000798  B4D8               	btfsc	status,2,c
  7278  00079A  0012               	return	
  7279  00079C  0A64               	xorlw	100	; case 100
  7280  00079E  B4D8               	btfsc	status,2,c
  7281  0007A0  D007               	goto	l4352
  7282  0007A2  0A0D               	xorlw	13	; case 105
  7283  0007A4  B4D8               	btfsc	status,2,c
  7284  0007A6  D004               	goto	l4352
  7285  0007A8  0A1A               	xorlw	26	; case 115
  7286  0007AA  B4D8               	btfsc	status,2,c
  7287  0007AC  D75B               	goto	l4318
  7288  0007AE  D0D8               	goto	l4418
  7289  0007B0                     l4352:
  7290                           
  7291                           ;doprnt.c: 1253: {
  7292                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7293  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7294  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7295  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7296  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7297  0007C0  0E02               	movlw	2
  7298  0007C2  0100               	movlb	0	; () banked
  7299  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7300  0007C6  0E00               	movlw	0
  7301  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;doprnt.c: 1261: if((int)val < 0) {
  7305  0007CA  0100               	movlb	0	; () banked
  7306  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7307  0007CE  D008               	goto	l4362
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;doprnt.c: 1262: flag |= 0x03;
  7311  0007D0  0E03               	movlw	3
  7312  0007D2  0100               	movlb	0	; () banked
  7313  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7314                           
  7315                           ; BSR set to: 0
  7316                           ;doprnt.c: 1263: val = -val;
  7317  0007D6  0100               	movlb	0	; () banked
  7318  0007D8  6DA3               	negf	printf@val& (0+255),b
  7319  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7320  0007DC  B0D8               	btfsc	status,0,c
  7321  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7322  0007E0                     l4362:
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;doprnt.c: 1264: }
  7326                           ;doprnt.c: 1266: }
  7327                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7328  0007E0  0E01               	movlw	1
  7329  0007E2  0100               	movlb	0	; () banked
  7330  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7331  0007E6                     l4364:
  7332                           
  7333                           ; BSR set to: 0
  7334  0007E6  0E05               	movlw	5
  7335  0007E8  0100               	movlb	0	; () banked
  7336  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7337  0007EC  B4D8               	btfsc	status,2,c
  7338  0007EE  D019               	goto	l4376
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;doprnt.c: 1306: if(val < dpowers[c])
  7342                           
  7343                           ; BSR set to: 0
  7344                           
  7345                           ; BSR set to: 0
  7346  0007F0  0100               	movlb	0	; () banked
  7347  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7348  0007F4  0D02               	mullw	2
  7349  0007F6  0EC6               	movlw	low _dpowers
  7350  0007F8  24F3               	addwf	prodl,w,c
  7351  0007FA  6EF6               	movwf	tblptrl,c
  7352  0007FC  0EFD               	movlw	high _dpowers
  7353  0007FE  20F4               	addwfc	prodh,w,c
  7354  000800  6EF7               	movwf	tblptrh,c
  7355  000802                     	if	1	;There are 3 active tblptr bytes
  7356  000802  6AF8               	clrf	tblptru,c
  7357  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7358  000806  22F8               	addwfc	tblptru,f,c
  7359  000808                     	endif
  7360  000808  0009               	tblrd		*+
  7361  00080A  50F5               	movf	tablat,w,c
  7362  00080C  0100               	movlb	0	; () banked
  7363  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7364  000810  0009               	tblrd		*+
  7365  000812  50F5               	movf	tablat,w,c
  7366  000814  0100               	movlb	0	; () banked
  7367  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7368  000818  A0D8               	btfss	status,0,c
  7369  00081A  D003               	goto	l4376
  7370                           
  7371                           ; BSR set to: 0
  7372                           
  7373                           ; BSR set to: 0
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;doprnt.c: 1307: break;
  7377  00081C  0100               	movlb	0	; () banked
  7378  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7379  000820  D7E2               	goto	l4364
  7380  000822                     l4376:
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7384  000822  0100               	movlb	0	; () banked
  7385  000824  51A9               	movf	printf@width& (0+255),w,b
  7386  000826  0100               	movlb	0	; () banked
  7387  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7388  00082A  B4D8               	btfsc	status,2,c
  7389  00082C  D00B               	goto	l4382
  7390                           
  7391                           ; BSR set to: 0
  7392  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7393  000832  0E03               	movlw	3
  7394  000834  0100               	movlb	0	; () banked
  7395  000836  179A               	andwf	??_printf& (0+255),f,b
  7396  000838  B4D8               	btfsc	status,2,c
  7397  00083A  D004               	goto	l4382
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;doprnt.c: 1346: width--;
  7401  00083C  0100               	movlb	0	; () banked
  7402  00083E  07A9               	decf	printf@width& (0+255),f,b
  7403  000840  A0D8               	btfss	status,0,c
  7404  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7405  000844                     l4382:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;doprnt.c: 1381: if(width > c)
  7409  000844  0E80               	movlw	128
  7410  000846  0100               	movlb	0	; () banked
  7411  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7412  00084A  0E7F               	movlw	127
  7413  00084C  0100               	movlb	0	; () banked
  7414  00084E  6F9A               	movwf	??_printf& (0+255),b
  7415  000850  0100               	movlb	0	; () banked
  7416  000852  51A9               	movf	printf@width& (0+255),w,b
  7417  000854  0100               	movlb	0	; () banked
  7418  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7419  000858  0100               	movlb	0	; () banked
  7420  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7421  00085C  0A80               	xorlw	128
  7422  00085E  0100               	movlb	0	; () banked
  7423  000860  599A               	subwfb	??_printf& (0+255),w,b
  7424  000862  B0D8               	btfsc	status,0,c
  7425  000864  D00B               	goto	l4386
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;doprnt.c: 1382: width -= c;
  7429  000866  0100               	movlb	0	; () banked
  7430  000868  51A8               	movf	printf@c& (0+255),w,b
  7431  00086A  0100               	movlb	0	; () banked
  7432  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7433  00086E  0E00               	movlw	0
  7434  000870  0100               	movlb	0	; () banked
  7435  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7436  000874  0EFF               	movlw	255
  7437  000876  0100               	movlb	0	; () banked
  7438  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7439  00087A  D005               	goto	l4388
  7440  00087C                     l4386:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;doprnt.c: 1383: else
  7444                           ;doprnt.c: 1384: width = 0;
  7445  00087C  0E00               	movlw	0
  7446  00087E  0100               	movlb	0	; () banked
  7447  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7448  000882  0E00               	movlw	0
  7449  000884  6FA9               	movwf	printf@width& (0+255),b
  7450  000886                     l4388:
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;doprnt.c: 1387: if(flag & 0x04) {
  7454  000886  0100               	movlb	0	; () banked
  7455  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7456  00088A  D018               	goto	l4400
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;doprnt.c: 1392: if(flag & 0x03)
  7460  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7461  000890  0E03               	movlw	3
  7462  000892  0100               	movlb	0	; () banked
  7463  000894  179A               	andwf	??_printf& (0+255),f,b
  7464  000896  B4D8               	btfsc	status,2,c
  7465  000898  D003               	goto	l4394
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;doprnt.c: 1393: (putch('-') );
  7469  00089A  0E2D               	movlw	45
  7470  00089C  ECCA  F015         	call	_putch
  7471  0008A0                     l4394:
  7472                           
  7473                           ;doprnt.c: 1415: if(width)
  7474  0008A0  0100               	movlb	0	; () banked
  7475  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7476  0008A4  0100               	movlb	0	; () banked
  7477  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7478  0008A8  B4D8               	btfsc	status,2,c
  7479  0008AA  D025               	goto	l4410
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;doprnt.c: 1417: (putch('0') );
  7483                           
  7484                           ; BSR set to: 0
  7485                           
  7486                           ;doprnt.c: 1416: do
  7487  0008AC  0E30               	movlw	48
  7488  0008AE  ECCA  F015         	call	_putch
  7489                           
  7490                           ;doprnt.c: 1418: while(--width);
  7491  0008B2  0100               	movlb	0	; () banked
  7492  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7493  0008B6  A0D8               	btfss	status,0,c
  7494  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7495  0008BA  D7F2               	goto	l4394
  7496  0008BC                     l4400:
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;doprnt.c: 1422: {
  7500                           ;doprnt.c: 1424: if(width
  7501                           ;doprnt.c: 1428: )
  7502  0008BC  0100               	movlb	0	; () banked
  7503  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7504  0008C0  0100               	movlb	0	; () banked
  7505  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7506  0008C4  B4D8               	btfsc	status,2,c
  7507  0008C6  D00D               	goto	l4406
  7508  0008C8                     l4402:
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;doprnt.c: 1430: (putch(' ') );
  7512  0008C8  0E20               	movlw	32
  7513  0008CA  ECCA  F015         	call	_putch
  7514                           
  7515                           ;doprnt.c: 1431: while(--width);
  7516  0008CE  0100               	movlb	0	; () banked
  7517  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7518  0008D2  A0D8               	btfss	status,0,c
  7519  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7520  0008D6  0100               	movlb	0	; () banked
  7521  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7522  0008DA  0100               	movlb	0	; () banked
  7523  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7524  0008DE  A4D8               	btfss	status,2,c
  7525  0008E0  D7F3               	goto	l4402
  7526  0008E2                     l4406:
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;doprnt.c: 1438: if(flag & 0x03)
  7530  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7531  0008E6  0E03               	movlw	3
  7532  0008E8  0100               	movlb	0	; () banked
  7533  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7534  0008EC  B4D8               	btfsc	status,2,c
  7535  0008EE  D003               	goto	l4410
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;doprnt.c: 1439: (putch('-') );
  7539  0008F0  0E2D               	movlw	45
  7540  0008F2  ECCA  F015         	call	_putch
  7541  0008F6                     l4410:
  7542                           
  7543                           ;doprnt.c: 1469: }
  7544                           ;doprnt.c: 1472: prec = c;
  7545  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7546                           
  7547                           ;doprnt.c: 1474: while(prec--) {
  7548  0008FA  D02C               	goto	l4416
  7549  0008FC                     l4412:
  7550                           
  7551                           ;doprnt.c: 1478: {
  7552                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7553  0008FC  0100               	movlb	0	; () banked
  7554  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7555  000900  0D02               	mullw	2
  7556  000902  0EC6               	movlw	low _dpowers
  7557  000904  24F3               	addwf	prodl,w,c
  7558  000906  6EF6               	movwf	tblptrl,c
  7559  000908  0EFD               	movlw	high _dpowers
  7560  00090A  20F4               	addwfc	prodh,w,c
  7561  00090C  6EF7               	movwf	tblptrh,c
  7562  00090E                     	if	1	;There are 3 active tblptr bytes
  7563  00090E  6AF8               	clrf	tblptru,c
  7564  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7565  000912  22F8               	addwfc	tblptru,f,c
  7566  000914                     	endif
  7567  000914  0009               	tblrd		*+
  7568  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7569  00091A  000A               	tblrd		*-
  7570  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7571  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7572  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7573  000928  ECE4  F010         	call	___lwdiv	;wreg free
  7574  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7575  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7576  000934  0E00               	movlw	0
  7577  000936  0100               	movlb	0	; () banked
  7578  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7579  00093A  0E0A               	movlw	10
  7580  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7581  00093E  ECC8  F011         	call	___lwmod	;wreg free
  7582  000942  0100               	movlb	0	; () banked
  7583  000944  5187               	movf	?___lwmod& (0+255),w,b
  7584  000946  0F30               	addlw	48
  7585  000948  0100               	movlb	0	; () banked
  7586  00094A  6FA8               	movwf	printf@c& (0+255),b
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;doprnt.c: 1523: }
  7590                           ;doprnt.c: 1524: (putch(c) );
  7591  00094C  0100               	movlb	0	; () banked
  7592  00094E  51A8               	movf	printf@c& (0+255),w,b
  7593  000950  ECCA  F015         	call	_putch
  7594  000954                     l4416:
  7595  000954  0100               	movlb	0	; () banked
  7596  000956  079E               	decf	printf@prec& (0+255),f,b
  7597  000958  0100               	movlb	0	; () banked
  7598  00095A  299E               	incf	printf@prec& (0+255),w,b
  7599  00095C  A4D8               	btfss	status,2,c
  7600  00095E  D7CE               	goto	l4412
  7601  000960                     l4418:
  7602  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7603  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7604  000968  0100               	movlb	0	; () banked
  7605  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7606  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7607  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7608  00096E  6AF8               	clrf	tblptru,c
  7609  000970                     	endif
  7610  000970                     	if	0	;tblptru may be non-zero
  7611  000970                     	endif
  7612  000970  0008               	tblrd		*
  7613  000972  CFF5 F0A8          	movff	tablat,printf@c
  7614  000976  0100               	movlb	0	; () banked
  7615  000978  51A8               	movf	printf@c& (0+255),w,b
  7616  00097A  B4D8               	btfsc	status,2,c
  7617  00097C  0012               	return	
  7618  00097E  D602               	goto	l4294
  7619  000980                     __end_of_printf:
  7620                           	opt stack 0
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           intcon2	equ	0xFF1
  7629                           intcon3	equ	0xFF0
  7630                           indf0	equ	0xFEF
  7631                           postinc0	equ	0xFEE
  7632                           fsr0h	equ	0xFEA
  7633                           fsr0l	equ	0xFE9
  7634                           wreg	equ	0xFE8
  7635                           postdec1	equ	0xFE5
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function _putch *****************
  7645 ;; Defined at:
  7646 ;;		line 19 in file "lcd.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  data            1    wreg     unsigned char 
  7649 ;; Auto vars:     Size  Location     Type
  7650 ;;  data            1    2[BANK0 ] unsigned char 
  7651 ;; Return value:  Size  Location     Type
  7652 ;;                  1    wreg      void 
  7653 ;; Registers used:
  7654 ;;		wreg, status,2, status,0, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 0/0
  7657 ;;		On exit  : 0/0
  7658 ;;		Unchanged: 0/0
  7659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;Total ram usage:        1 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    8
  7667 ;; This function calls:
  7668 ;;		_lcdNibble
  7669 ;; This function is called by:
  7670 ;;		_printf
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text32
  7675  002B94                     __ptext32:
  7676                           	opt stack 0
  7677  002B94                     _putch:
  7678                           	opt stack 19
  7679                           
  7680                           ;incstack = 0
  7681                           ;putch@data stored from wreg
  7682  002B94  0100               	movlb	0	; () banked
  7683  002B96  6F82               	movwf	putch@data& (0+255),b
  7684                           
  7685                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7686  002B98  848C               	bsf	3980,2,c	;volatile
  7687                           
  7688                           ;lcd.c: 21: lcdNibble(data);
  7689  002B9A  0100               	movlb	0	; () banked
  7690  002B9C  5182               	movf	putch@data& (0+255),w,b
  7691  002B9E  EC94  F011         	call	_lcdNibble
  7692  002BA2  0012               	return		;funcret
  7693  002BA4                     __end_of_putch:
  7694                           	opt stack 0
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           intcon2	equ	0xFF1
  7703                           intcon3	equ	0xFF0
  7704                           indf0	equ	0xFEF
  7705                           postinc0	equ	0xFEE
  7706                           fsr0h	equ	0xFEA
  7707                           fsr0l	equ	0xFE9
  7708                           wreg	equ	0xFE8
  7709                           postdec1	equ	0xFE5
  7710                           fsr1l	equ	0xFE1
  7711                           indf2	equ	0xFDF
  7712                           postinc2	equ	0xFDE
  7713                           postdec2	equ	0xFDD
  7714                           fsr2h	equ	0xFDA
  7715                           fsr2l	equ	0xFD9
  7716                           status	equ	0xFD8
  7717                           
  7718 ;; *************** function _isdigit *****************
  7719 ;; Defined at:
  7720 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  c               1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  c               1    2[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;Total ram usage:        3 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    7
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_printf
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text33
  7749  002A18                     __ptext33:
  7750                           	opt stack 0
  7751  002A18                     _isdigit:
  7752                           	opt stack 20
  7753                           
  7754                           ;incstack = 0
  7755                           ;isdigit@c stored from wreg
  7756  002A18  0100               	movlb	0	; () banked
  7757  002A1A  6F82               	movwf	isdigit@c& (0+255),b
  7758  002A1C  0E00               	movlw	0
  7759  002A1E  0100               	movlb	0	; () banked
  7760  002A20  6F81               	movwf	_isdigit$1670& (0+255),b
  7761                           
  7762                           ; BSR set to: 0
  7763  002A22  0E3A               	movlw	58
  7764  002A24  0100               	movlb	0	; () banked
  7765  002A26  6182               	cpfslt	isdigit@c& (0+255),b
  7766  002A28  D007               	goto	l4144
  7767                           
  7768                           ; BSR set to: 0
  7769  002A2A  0E2F               	movlw	47
  7770  002A2C  0100               	movlb	0	; () banked
  7771  002A2E  6582               	cpfsgt	isdigit@c& (0+255),b
  7772  002A30  D003               	goto	l4144
  7773                           
  7774                           ; BSR set to: 0
  7775  002A32  0E01               	movlw	1
  7776  002A34  0100               	movlb	0	; () banked
  7777  002A36  6F81               	movwf	_isdigit$1670& (0+255),b
  7778  002A38                     l4144:
  7779                           
  7780                           ; BSR set to: 0
  7781  002A38  C081  F080         	movff	_isdigit$1670,??_isdigit
  7782  002A3C  0100               	movlb	0	; () banked
  7783  002A3E  3180               	rrcf	??_isdigit& (0+255),w,b
  7784  002A40  0012               	return	
  7785  002A42                     __end_of_isdigit:
  7786                           	opt stack 0
  7787                           tblptru	equ	0xFF8
  7788                           tblptrh	equ	0xFF7
  7789                           tblptrl	equ	0xFF6
  7790                           tablat	equ	0xFF5
  7791                           prodh	equ	0xFF4
  7792                           prodl	equ	0xFF3
  7793                           intcon	equ	0xFF2
  7794                           intcon2	equ	0xFF1
  7795                           intcon3	equ	0xFF0
  7796                           indf0	equ	0xFEF
  7797                           postinc0	equ	0xFEE
  7798                           fsr0h	equ	0xFEA
  7799                           fsr0l	equ	0xFE9
  7800                           wreg	equ	0xFE8
  7801                           postdec1	equ	0xFE5
  7802                           fsr1l	equ	0xFE1
  7803                           indf2	equ	0xFDF
  7804                           postinc2	equ	0xFDE
  7805                           postdec2	equ	0xFDD
  7806                           fsr2h	equ	0xFDA
  7807                           fsr2l	equ	0xFD9
  7808                           status	equ	0xFD8
  7809                           
  7810 ;; *************** function ___wmul *****************
  7811 ;; Defined at:
  7812 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7815 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  product         2    4[BANK0 ] unsigned int 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  2    0[BANK0 ] unsigned int 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, prodl, prodh
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7827 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;Total ram usage:        6 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    7
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_printf
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text34
  7842  00274C                     __ptext34:
  7843                           	opt stack 0
  7844  00274C                     ___wmul:
  7845                           	opt stack 20
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;incstack = 0
  7849  00274C  0100               	movlb	0	; () banked
  7850  00274E  5180               	movf	___wmul@multiplier& (0+255),w,b
  7851  002750  0100               	movlb	0	; () banked
  7852  002752  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7853  002754  CFF3 F084          	movff	prodl,___wmul@product
  7854  002758  CFF4 F085          	movff	prodh,___wmul@product+1
  7855  00275C  0100               	movlb	0	; () banked
  7856  00275E  5180               	movf	___wmul@multiplier& (0+255),w,b
  7857  002760  0100               	movlb	0	; () banked
  7858  002762  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7859  002764  50F3               	movf	prodl,w,c
  7860  002766  0100               	movlb	0	; () banked
  7861  002768  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7862  00276A  0100               	movlb	0	; () banked
  7863  00276C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7864  00276E  0100               	movlb	0	; () banked
  7865  002770  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7866  002772  50F3               	movf	prodl,w,c
  7867  002774  0100               	movlb	0	; () banked
  7868  002776  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7869                           
  7870                           ; BSR set to: 0
  7871  002778  C084  F080         	movff	___wmul@product,?___wmul
  7872  00277C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7873  002780  0012               	return	
  7874  002782                     __end_of___wmul:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           intcon	equ	0xFF2
  7883                           intcon2	equ	0xFF1
  7884                           intcon3	equ	0xFF0
  7885                           indf0	equ	0xFEF
  7886                           postinc0	equ	0xFEE
  7887                           fsr0h	equ	0xFEA
  7888                           fsr0l	equ	0xFE9
  7889                           wreg	equ	0xFE8
  7890                           postdec1	equ	0xFE5
  7891                           fsr1l	equ	0xFE1
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function ___lwmod *****************
  7900 ;; Defined at:
  7901 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  dividend        2    7[BANK0 ] unsigned int 
  7904 ;;  divisor         2    9[BANK0 ] unsigned int 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  counter         1   11[BANK0 ] unsigned char 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  2    7[BANK0 ] unsigned int 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2, status,0
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;Total ram usage:        5 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    7
  7923 ;; This function calls:
  7924 ;;		Nothing
  7925 ;; This function is called by:
  7926 ;;		_printf
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text35
  7931  002390                     __ptext35:
  7932                           	opt stack 0
  7933  002390                     ___lwmod:
  7934                           	opt stack 20
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;incstack = 0
  7938  002390  0100               	movlb	0	; () banked
  7939  002392  5189               	movf	___lwmod@divisor& (0+255),w,b
  7940  002394  0100               	movlb	0	; () banked
  7941  002396  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7942  002398  B4D8               	btfsc	status,2,c
  7943  00239A  D026               	goto	l1761
  7944                           
  7945                           ; BSR set to: 0
  7946  00239C  0E01               	movlw	1
  7947  00239E  0100               	movlb	0	; () banked
  7948  0023A0  6F8B               	movwf	___lwmod@counter& (0+255),b
  7949  0023A2  D006               	goto	l4182
  7950  0023A4                     l4180:
  7951                           
  7952                           ; BSR set to: 0
  7953  0023A4  0100               	movlb	0	; () banked
  7954  0023A6  90D8               	bcf	status,0,c
  7955  0023A8  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7956  0023AA  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7957  0023AC  0100               	movlb	0	; () banked
  7958  0023AE  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7959  0023B0                     l4182:
  7960                           
  7961                           ; BSR set to: 0
  7962  0023B0  0100               	movlb	0	; () banked
  7963  0023B2  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7964  0023B4  D7F7               	goto	l4180
  7965  0023B6                     l4184:
  7966                           
  7967                           ; BSR set to: 0
  7968  0023B6  0100               	movlb	0	; () banked
  7969  0023B8  5189               	movf	___lwmod@divisor& (0+255),w,b
  7970  0023BA  0100               	movlb	0	; () banked
  7971  0023BC  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7972  0023BE  0100               	movlb	0	; () banked
  7973  0023C0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7974  0023C2  0100               	movlb	0	; () banked
  7975  0023C4  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7976  0023C6  A0D8               	btfss	status,0,c
  7977  0023C8  D008               	goto	l4188
  7978                           
  7979                           ; BSR set to: 0
  7980  0023CA  0100               	movlb	0	; () banked
  7981  0023CC  5189               	movf	___lwmod@divisor& (0+255),w,b
  7982  0023CE  0100               	movlb	0	; () banked
  7983  0023D0  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7984  0023D2  0100               	movlb	0	; () banked
  7985  0023D4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7986  0023D6  0100               	movlb	0	; () banked
  7987  0023D8  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7988  0023DA                     l4188:
  7989                           
  7990                           ; BSR set to: 0
  7991  0023DA  0100               	movlb	0	; () banked
  7992  0023DC  90D8               	bcf	status,0,c
  7993  0023DE  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7994  0023E0  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7995                           
  7996                           ; BSR set to: 0
  7997  0023E2  0100               	movlb	0	; () banked
  7998  0023E4  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7999  0023E6  D7E7               	goto	l4184
  8000  0023E8                     l1761:
  8001                           
  8002                           ; BSR set to: 0
  8003  0023E8  C087  F087         	movff	___lwmod@dividend,?___lwmod
  8004  0023EC  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  8005                           
  8006                           ; BSR set to: 0
  8007  0023F0  0012               	return		;funcret
  8008  0023F2                     __end_of___lwmod:
  8009                           	opt stack 0
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           intcon2	equ	0xFF1
  8018                           intcon3	equ	0xFF0
  8019                           indf0	equ	0xFEF
  8020                           postinc0	equ	0xFEE
  8021                           fsr0h	equ	0xFEA
  8022                           fsr0l	equ	0xFE9
  8023                           wreg	equ	0xFE8
  8024                           postdec1	equ	0xFE5
  8025                           fsr1l	equ	0xFE1
  8026                           indf2	equ	0xFDF
  8027                           postinc2	equ	0xFDE
  8028                           postdec2	equ	0xFDD
  8029                           fsr2h	equ	0xFDA
  8030                           fsr2l	equ	0xFD9
  8031                           status	equ	0xFD8
  8032                           
  8033 ;; *************** function ___lwdiv *****************
  8034 ;; Defined at:
  8035 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;  dividend        2    0[BANK0 ] unsigned int 
  8038 ;;  divisor         2    2[BANK0 ] unsigned int 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  quotient        2    4[BANK0 ] unsigned int 
  8041 ;;  counter         1    6[BANK0 ] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  2    0[BANK0 ] unsigned int 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:        7 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    7
  8058 ;; This function calls:
  8059 ;;		Nothing
  8060 ;; This function is called by:
  8061 ;;		_printf
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text36
  8066  0021C8                     __ptext36:
  8067                           	opt stack 0
  8068  0021C8                     ___lwdiv:
  8069                           	opt stack 20
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;incstack = 0
  8073  0021C8  0E00               	movlw	0
  8074  0021CA  0100               	movlb	0	; () banked
  8075  0021CC  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8076  0021CE  0E00               	movlw	0
  8077  0021D0  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8078                           
  8079                           ; BSR set to: 0
  8080  0021D2  0100               	movlb	0	; () banked
  8081  0021D4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8082  0021D6  0100               	movlb	0	; () banked
  8083  0021D8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8084  0021DA  B4D8               	btfsc	status,2,c
  8085  0021DC  D02C               	goto	l1751
  8086                           
  8087                           ; BSR set to: 0
  8088  0021DE  0E01               	movlw	1
  8089  0021E0  0100               	movlb	0	; () banked
  8090  0021E2  6F86               	movwf	___lwdiv@counter& (0+255),b
  8091  0021E4  D006               	goto	l4162
  8092  0021E6                     l4160:
  8093                           
  8094                           ; BSR set to: 0
  8095  0021E6  0100               	movlb	0	; () banked
  8096  0021E8  90D8               	bcf	status,0,c
  8097  0021EA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8098  0021EC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8099  0021EE  0100               	movlb	0	; () banked
  8100  0021F0  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8101  0021F2                     l4162:
  8102                           
  8103                           ; BSR set to: 0
  8104  0021F2  0100               	movlb	0	; () banked
  8105  0021F4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8106  0021F6  D7F7               	goto	l4160
  8107  0021F8                     l4164:
  8108                           
  8109                           ; BSR set to: 0
  8110  0021F8  0100               	movlb	0	; () banked
  8111  0021FA  90D8               	bcf	status,0,c
  8112  0021FC  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8113  0021FE  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8114                           
  8115                           ; BSR set to: 0
  8116  002200  0100               	movlb	0	; () banked
  8117  002202  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8118  002204  0100               	movlb	0	; () banked
  8119  002206  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8120  002208  0100               	movlb	0	; () banked
  8121  00220A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8122  00220C  0100               	movlb	0	; () banked
  8123  00220E  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8124  002210  A0D8               	btfss	status,0,c
  8125  002212  D00A               	goto	l4172
  8126                           
  8127                           ; BSR set to: 0
  8128  002214  0100               	movlb	0	; () banked
  8129  002216  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8130  002218  0100               	movlb	0	; () banked
  8131  00221A  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8132  00221C  0100               	movlb	0	; () banked
  8133  00221E  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8134  002220  0100               	movlb	0	; () banked
  8135  002222  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8136                           
  8137                           ; BSR set to: 0
  8138  002224  0100               	movlb	0	; () banked
  8139  002226  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8140  002228                     l4172:
  8141                           
  8142                           ; BSR set to: 0
  8143  002228  0100               	movlb	0	; () banked
  8144  00222A  90D8               	bcf	status,0,c
  8145  00222C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8146  00222E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8147                           
  8148                           ; BSR set to: 0
  8149  002230  0100               	movlb	0	; () banked
  8150  002232  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8151  002234  D7E1               	goto	l4164
  8152  002236                     l1751:
  8153                           
  8154                           ; BSR set to: 0
  8155  002236  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8156  00223A  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8157                           
  8158                           ; BSR set to: 0
  8159  00223E  0012               	return		;funcret
  8160  002240                     __end_of___lwdiv:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon2	equ	0xFF1
  8170                           intcon3	equ	0xFF0
  8171                           indf0	equ	0xFEF
  8172                           postinc0	equ	0xFEE
  8173                           fsr0h	equ	0xFEA
  8174                           fsr0l	equ	0xFE9
  8175                           wreg	equ	0xFE8
  8176                           postdec1	equ	0xFE5
  8177                           fsr1l	equ	0xFE1
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8
  8184                           
  8185 ;; *************** function _lcdInst *****************
  8186 ;; Defined at:
  8187 ;;		line 14 in file "lcd.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  data            1    wreg     unsigned char 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  data            1    2[BANK0 ] unsigned char 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, status,2, status,0, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        1 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    8
  8208 ;; This function calls:
  8209 ;;		_lcdNibble
  8210 ;; This function is called by:
  8211 ;;		_UI
  8212 ;;		_change_state_to_menu_start
  8213 ;;		_change_state_to_menu_12
  8214 ;;		_change_state_to_menu_22
  8215 ;;		_initLCD
  8216 ;;		_printRTC
  8217 ;;		_Loading
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text37
  8222  002BA4                     __ptext37:
  8223                           	opt stack 0
  8224  002BA4                     _lcdInst:
  8225                           	opt stack 20
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;incstack = 0
  8229                           ;lcdInst@data stored from wreg
  8230  002BA4  0100               	movlb	0	; () banked
  8231  002BA6  6F82               	movwf	lcdInst@data& (0+255),b
  8232                           
  8233                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8234  002BA8  948C               	bcf	3980,2,c	;volatile
  8235                           
  8236                           ;lcd.c: 16: lcdNibble(data);
  8237  002BAA  0100               	movlb	0	; () banked
  8238  002BAC  5182               	movf	lcdInst@data& (0+255),w,b
  8239  002BAE  EC94  F011         	call	_lcdNibble
  8240  002BB2  0012               	return		;funcret
  8241  002BB4                     __end_of_lcdInst:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           intcon2	equ	0xFF1
  8251                           intcon3	equ	0xFF0
  8252                           indf0	equ	0xFEF
  8253                           postinc0	equ	0xFEE
  8254                           fsr0h	equ	0xFEA
  8255                           fsr0l	equ	0xFE9
  8256                           wreg	equ	0xFE8
  8257                           postdec1	equ	0xFE5
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function _lcdNibble *****************
  8267 ;; Defined at:
  8268 ;;		line 24 in file "lcd.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  data            1    wreg     unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  data            1    1[BANK0 ] unsigned char 
  8273 ;;  temp            1    0[BANK0 ] unsigned char 
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;Total ram usage:        2 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    7
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_lcdInst
  8294 ;;		_putch
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text38
  8299  002328                     __ptext38:
  8300                           	opt stack 0
  8301  002328                     _lcdNibble:
  8302                           	opt stack 20
  8303                           
  8304                           ;incstack = 0
  8305                           ;lcdNibble@data stored from wreg
  8306  002328  0100               	movlb	0	; () banked
  8307  00232A  6F81               	movwf	lcdNibble@data& (0+255),b
  8308                           
  8309                           ;lcd.c: 26: char temp = data & 0xF0;
  8310  00232C  0100               	movlb	0	; () banked
  8311  00232E  5181               	movf	lcdNibble@data& (0+255),w,b
  8312  002330  0BF0               	andlw	240
  8313  002332  0100               	movlb	0	; () banked
  8314  002334  6F80               	movwf	lcdNibble@temp& (0+255),b
  8315                           
  8316                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8317  002336  508C               	movf	3980,w,c	;volatile
  8318  002338  0B0F               	andlw	15
  8319  00233A  6E8C               	movwf	3980,c	;volatile
  8320                           
  8321                           ;lcd.c: 28: LATD = temp | LATD;
  8322  00233C  0100               	movlb	0	; () banked
  8323  00233E  5180               	movf	lcdNibble@temp& (0+255),w,b
  8324  002340  108C               	iorwf	3980,w,c	;volatile
  8325  002342  6E8C               	movwf	3980,c	;volatile
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8329  002344  868C               	bsf	3980,3,c	;volatile
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8333  002346  0E42               	movlw	66
  8334  002348                     u5057:
  8335  002348  2EE8               	decfsz	wreg,f,c
  8336  00234A  D7FE               	bra	u5057
  8337  00234C  D000               	nop2	
  8338                           
  8339                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8340  00234E  968C               	bcf	3980,3,c	;volatile
  8341                           
  8342                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8343  002350  0E42               	movlw	66
  8344  002352                     u5067:
  8345  002352  2EE8               	decfsz	wreg,f,c
  8346  002354  D7FE               	bra	u5067
  8347  002356  D000               	nop2	
  8348                           
  8349                           ;lcd.c: 35: data = data << 4;
  8350  002358  0100               	movlb	0	; () banked
  8351  00235A  3981               	swapf	lcdNibble@data& (0+255),w,b
  8352  00235C  0BF0               	andlw	240
  8353  00235E  0100               	movlb	0	; () banked
  8354  002360  6F81               	movwf	lcdNibble@data& (0+255),b
  8355                           
  8356                           ;lcd.c: 37: temp = data & 0xF0;
  8357  002362  0100               	movlb	0	; () banked
  8358  002364  5181               	movf	lcdNibble@data& (0+255),w,b
  8359  002366  0BF0               	andlw	240
  8360  002368  0100               	movlb	0	; () banked
  8361  00236A  6F80               	movwf	lcdNibble@temp& (0+255),b
  8362                           
  8363                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8364  00236C  508C               	movf	3980,w,c	;volatile
  8365  00236E  0B0F               	andlw	15
  8366  002370  6E8C               	movwf	3980,c	;volatile
  8367                           
  8368                           ;lcd.c: 39: LATD = temp | LATD;
  8369  002372  0100               	movlb	0	; () banked
  8370  002374  5180               	movf	lcdNibble@temp& (0+255),w,b
  8371  002376  108C               	iorwf	3980,w,c	;volatile
  8372  002378  6E8C               	movwf	3980,c	;volatile
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8376  00237A  868C               	bsf	3980,3,c	;volatile
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8380  00237C  0E42               	movlw	66
  8381  00237E                     u5077:
  8382  00237E  2EE8               	decfsz	wreg,f,c
  8383  002380  D7FE               	bra	u5077
  8384  002382  D000               	nop2	
  8385                           
  8386                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8387  002384  968C               	bcf	3980,3,c	;volatile
  8388                           
  8389                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8390  002386  0E42               	movlw	66
  8391  002388                     u5087:
  8392  002388  2EE8               	decfsz	wreg,f,c
  8393  00238A  D7FE               	bra	u5087
  8394  00238C  D000               	nop2	
  8395  00238E  0012               	return		;funcret
  8396  002390                     __end_of_lcdNibble:
  8397                           	opt stack 0
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           prodh	equ	0xFF4
  8403                           prodl	equ	0xFF3
  8404                           intcon	equ	0xFF2
  8405                           intcon2	equ	0xFF1
  8406                           intcon3	equ	0xFF0
  8407                           indf0	equ	0xFEF
  8408                           postinc0	equ	0xFEE
  8409                           fsr0h	equ	0xFEA
  8410                           fsr0l	equ	0xFE9
  8411                           wreg	equ	0xFE8
  8412                           postdec1	equ	0xFE5
  8413                           fsr1l	equ	0xFE1
  8414                           indf2	equ	0xFDF
  8415                           postinc2	equ	0xFDE
  8416                           postdec2	equ	0xFDD
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function ___awmod *****************
  8422 ;; Defined at:
  8423 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;  dividend        2    0[BANK0 ] int 
  8426 ;;  divisor         2    2[BANK0 ] int 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  sign            1    5[BANK0 ] unsigned char 
  8429 ;;  counter         1    4[BANK0 ] unsigned char 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  2    0[BANK0 ] int 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2, status,0
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;Total ram usage:        6 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    7
  8446 ;; This function calls:
  8447 ;;		Nothing
  8448 ;; This function is called by:
  8449 ;;		_UI
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           	psect	text39
  8454  001F06                     __ptext39:
  8455                           	opt stack 0
  8456  001F06                     ___awmod:
  8457                           	opt stack 22
  8458                           
  8459                           ;incstack = 0
  8460  001F06  0E00               	movlw	0
  8461  001F08  0100               	movlb	0	; () banked
  8462  001F0A  6F85               	movwf	___awmod@sign& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465  001F0C  0100               	movlb	0	; () banked
  8466  001F0E  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8467  001F10  D008               	goto	l5242
  8468                           
  8469                           ; BSR set to: 0
  8470  001F12  0100               	movlb	0	; () banked
  8471  001F14  6D80               	negf	___awmod@dividend& (0+255),b
  8472  001F16  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8473  001F18  B0D8               	btfsc	status,0,c
  8474  001F1A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8475                           
  8476                           ; BSR set to: 0
  8477  001F1C  0E01               	movlw	1
  8478  001F1E  0100               	movlb	0	; () banked
  8479  001F20  6F85               	movwf	___awmod@sign& (0+255),b
  8480  001F22                     l5242:
  8481                           
  8482                           ; BSR set to: 0
  8483  001F22  0100               	movlb	0	; () banked
  8484  001F24  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8485  001F26  D005               	goto	l5246
  8486                           
  8487                           ; BSR set to: 0
  8488  001F28  0100               	movlb	0	; () banked
  8489  001F2A  6D82               	negf	___awmod@divisor& (0+255),b
  8490  001F2C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8491  001F2E  B0D8               	btfsc	status,0,c
  8492  001F30  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8493  001F32                     l5246:
  8494                           
  8495                           ; BSR set to: 0
  8496  001F32  0100               	movlb	0	; () banked
  8497  001F34  5182               	movf	___awmod@divisor& (0+255),w,b
  8498  001F36  0100               	movlb	0	; () banked
  8499  001F38  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8500  001F3A  B4D8               	btfsc	status,2,c
  8501  001F3C  D026               	goto	l5262
  8502                           
  8503                           ; BSR set to: 0
  8504  001F3E  0E01               	movlw	1
  8505  001F40  0100               	movlb	0	; () banked
  8506  001F42  6F84               	movwf	___awmod@counter& (0+255),b
  8507  001F44  D006               	goto	l5252
  8508  001F46                     l5250:
  8509                           
  8510                           ; BSR set to: 0
  8511  001F46  0100               	movlb	0	; () banked
  8512  001F48  90D8               	bcf	status,0,c
  8513  001F4A  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8514  001F4C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8515  001F4E  0100               	movlb	0	; () banked
  8516  001F50  2B84               	incf	___awmod@counter& (0+255),f,b
  8517  001F52                     l5252:
  8518                           
  8519                           ; BSR set to: 0
  8520  001F52  0100               	movlb	0	; () banked
  8521  001F54  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8522  001F56  D7F7               	goto	l5250
  8523  001F58                     l5254:
  8524                           
  8525                           ; BSR set to: 0
  8526  001F58  0100               	movlb	0	; () banked
  8527  001F5A  5182               	movf	___awmod@divisor& (0+255),w,b
  8528  001F5C  0100               	movlb	0	; () banked
  8529  001F5E  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8530  001F60  0100               	movlb	0	; () banked
  8531  001F62  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8532  001F64  0100               	movlb	0	; () banked
  8533  001F66  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8534  001F68  A0D8               	btfss	status,0,c
  8535  001F6A  D008               	goto	l5258
  8536                           
  8537                           ; BSR set to: 0
  8538  001F6C  0100               	movlb	0	; () banked
  8539  001F6E  5182               	movf	___awmod@divisor& (0+255),w,b
  8540  001F70  0100               	movlb	0	; () banked
  8541  001F72  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8542  001F74  0100               	movlb	0	; () banked
  8543  001F76  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8544  001F78  0100               	movlb	0	; () banked
  8545  001F7A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8546  001F7C                     l5258:
  8547                           
  8548                           ; BSR set to: 0
  8549  001F7C  0100               	movlb	0	; () banked
  8550  001F7E  90D8               	bcf	status,0,c
  8551  001F80  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8552  001F82  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8553                           
  8554                           ; BSR set to: 0
  8555  001F84  0100               	movlb	0	; () banked
  8556  001F86  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8557  001F88  D7E7               	goto	l5254
  8558  001F8A                     l5262:
  8559                           
  8560                           ; BSR set to: 0
  8561  001F8A  0100               	movlb	0	; () banked
  8562  001F8C  5185               	movf	___awmod@sign& (0+255),w,b
  8563  001F8E  0100               	movlb	0	; () banked
  8564  001F90  B4D8               	btfsc	status,2,c
  8565  001F92  D005               	goto	l5266
  8566                           
  8567                           ; BSR set to: 0
  8568  001F94  0100               	movlb	0	; () banked
  8569  001F96  6D80               	negf	___awmod@dividend& (0+255),b
  8570  001F98  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8571  001F9A  B0D8               	btfsc	status,0,c
  8572  001F9C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8573  001F9E                     l5266:
  8574                           
  8575                           ; BSR set to: 0
  8576  001F9E  C080  F080         	movff	___awmod@dividend,?___awmod
  8577  001FA2  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8578  001FA6  0012               	return	
  8579  001FA8                     __end_of___awmod:
  8580                           	opt stack 0
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           intcon3	equ	0xFF0
  8590                           indf0	equ	0xFEF
  8591                           postinc0	equ	0xFEE
  8592                           fsr0h	equ	0xFEA
  8593                           fsr0l	equ	0xFE9
  8594                           wreg	equ	0xFE8
  8595                           postdec1	equ	0xFE5
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function ___awdiv *****************
  8605 ;; Defined at:
  8606 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  dividend        2    6[BANK0 ] int 
  8609 ;;  divisor         2    8[BANK0 ] int 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  quotient        2   12[BANK0 ] int 
  8612 ;;  sign            1   11[BANK0 ] unsigned char 
  8613 ;;  counter         1   10[BANK0 ] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  2    6[BANK0 ] int 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:        8 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    7
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_UI
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text40
  8638  001C2C                     __ptext40:
  8639                           	opt stack 0
  8640  001C2C                     ___awdiv:
  8641                           	opt stack 22
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;incstack = 0
  8645  001C2C  0E00               	movlw	0
  8646  001C2E  0100               	movlb	0	; () banked
  8647  001C30  6F8B               	movwf	___awdiv@sign& (0+255),b
  8648                           
  8649                           ; BSR set to: 0
  8650  001C32  0100               	movlb	0	; () banked
  8651  001C34  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8652  001C36  D008               	goto	l5198
  8653                           
  8654                           ; BSR set to: 0
  8655  001C38  0100               	movlb	0	; () banked
  8656  001C3A  6D88               	negf	___awdiv@divisor& (0+255),b
  8657  001C3C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8658  001C3E  B0D8               	btfsc	status,0,c
  8659  001C40  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8660                           
  8661                           ; BSR set to: 0
  8662  001C42  0E01               	movlw	1
  8663  001C44  0100               	movlb	0	; () banked
  8664  001C46  6F8B               	movwf	___awdiv@sign& (0+255),b
  8665  001C48                     l5198:
  8666                           
  8667                           ; BSR set to: 0
  8668  001C48  0100               	movlb	0	; () banked
  8669  001C4A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8670  001C4C  D008               	goto	l5204
  8671                           
  8672                           ; BSR set to: 0
  8673  001C4E  0100               	movlb	0	; () banked
  8674  001C50  6D86               	negf	___awdiv@dividend& (0+255),b
  8675  001C52  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8676  001C54  B0D8               	btfsc	status,0,c
  8677  001C56  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8678                           
  8679                           ; BSR set to: 0
  8680  001C58  0E01               	movlw	1
  8681  001C5A  0100               	movlb	0	; () banked
  8682  001C5C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8683  001C5E                     l5204:
  8684                           
  8685                           ; BSR set to: 0
  8686  001C5E  0E00               	movlw	0
  8687  001C60  0100               	movlb	0	; () banked
  8688  001C62  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8689  001C64  0E00               	movlw	0
  8690  001C66  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693  001C68  0100               	movlb	0	; () banked
  8694  001C6A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8695  001C6C  0100               	movlb	0	; () banked
  8696  001C6E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8697  001C70  B4D8               	btfsc	status,2,c
  8698  001C72  D02C               	goto	l5226
  8699                           
  8700                           ; BSR set to: 0
  8701  001C74  0E01               	movlw	1
  8702  001C76  0100               	movlb	0	; () banked
  8703  001C78  6F8A               	movwf	___awdiv@counter& (0+255),b
  8704  001C7A  D006               	goto	l5212
  8705  001C7C                     l5210:
  8706                           
  8707                           ; BSR set to: 0
  8708  001C7C  0100               	movlb	0	; () banked
  8709  001C7E  90D8               	bcf	status,0,c
  8710  001C80  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8711  001C82  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8712  001C84  0100               	movlb	0	; () banked
  8713  001C86  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8714  001C88                     l5212:
  8715                           
  8716                           ; BSR set to: 0
  8717  001C88  0100               	movlb	0	; () banked
  8718  001C8A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8719  001C8C  D7F7               	goto	l5210
  8720  001C8E                     l5214:
  8721                           
  8722                           ; BSR set to: 0
  8723  001C8E  0100               	movlb	0	; () banked
  8724  001C90  90D8               	bcf	status,0,c
  8725  001C92  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8726  001C94  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8727                           
  8728                           ; BSR set to: 0
  8729  001C96  0100               	movlb	0	; () banked
  8730  001C98  5188               	movf	___awdiv@divisor& (0+255),w,b
  8731  001C9A  0100               	movlb	0	; () banked
  8732  001C9C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8733  001C9E  0100               	movlb	0	; () banked
  8734  001CA0  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8735  001CA2  0100               	movlb	0	; () banked
  8736  001CA4  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8737  001CA6  A0D8               	btfss	status,0,c
  8738  001CA8  D00A               	goto	l5222
  8739                           
  8740                           ; BSR set to: 0
  8741  001CAA  0100               	movlb	0	; () banked
  8742  001CAC  5188               	movf	___awdiv@divisor& (0+255),w,b
  8743  001CAE  0100               	movlb	0	; () banked
  8744  001CB0  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8745  001CB2  0100               	movlb	0	; () banked
  8746  001CB4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8747  001CB6  0100               	movlb	0	; () banked
  8748  001CB8  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8749                           
  8750                           ; BSR set to: 0
  8751  001CBA  0100               	movlb	0	; () banked
  8752  001CBC  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8753  001CBE                     l5222:
  8754                           
  8755                           ; BSR set to: 0
  8756  001CBE  0100               	movlb	0	; () banked
  8757  001CC0  90D8               	bcf	status,0,c
  8758  001CC2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8759  001CC4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8760                           
  8761                           ; BSR set to: 0
  8762  001CC6  0100               	movlb	0	; () banked
  8763  001CC8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8764  001CCA  D7E1               	goto	l5214
  8765  001CCC                     l5226:
  8766                           
  8767                           ; BSR set to: 0
  8768  001CCC  0100               	movlb	0	; () banked
  8769  001CCE  518B               	movf	___awdiv@sign& (0+255),w,b
  8770  001CD0  0100               	movlb	0	; () banked
  8771  001CD2  B4D8               	btfsc	status,2,c
  8772  001CD4  D005               	goto	l5230
  8773                           
  8774                           ; BSR set to: 0
  8775  001CD6  0100               	movlb	0	; () banked
  8776  001CD8  6D8C               	negf	___awdiv@quotient& (0+255),b
  8777  001CDA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8778  001CDC  B0D8               	btfsc	status,0,c
  8779  001CDE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8780  001CE0                     l5230:
  8781                           
  8782                           ; BSR set to: 0
  8783  001CE0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8784  001CE4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8785  001CE8  0012               	return	
  8786  001CEA                     __end_of___awdiv:
  8787                           	opt stack 0
  8788                           tblptru	equ	0xFF8
  8789                           tblptrh	equ	0xFF7
  8790                           tblptrl	equ	0xFF6
  8791                           tablat	equ	0xFF5
  8792                           prodh	equ	0xFF4
  8793                           prodl	equ	0xFF3
  8794                           intcon	equ	0xFF2
  8795                           intcon2	equ	0xFF1
  8796                           intcon3	equ	0xFF0
  8797                           indf0	equ	0xFEF
  8798                           postinc0	equ	0xFEE
  8799                           fsr0h	equ	0xFEA
  8800                           fsr0l	equ	0xFE9
  8801                           wreg	equ	0xFE8
  8802                           postdec1	equ	0xFE5
  8803                           fsr1l	equ	0xFE1
  8804                           indf2	equ	0xFDF
  8805                           postinc2	equ	0xFDE
  8806                           postdec2	equ	0xFDD
  8807                           fsr2h	equ	0xFDA
  8808                           fsr2l	equ	0xFD9
  8809                           status	equ	0xFD8
  8810                           
  8811 ;; *************** function _PortTestA5 *****************
  8812 ;; Defined at:
  8813 ;;		line 14 in file "PortHigh.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		None
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8831 ;;Total ram usage:        0 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    7
  8834 ;; This function calls:
  8835 ;;		Nothing
  8836 ;; This function is called by:
  8837 ;;		_main
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           	psect	text41
  8842  002B70                     __ptext41:
  8843                           	opt stack 0
  8844  002B70                     _PortTestA5:
  8845                           	opt stack 23
  8846  002B70                     l257:
  8847  002B70  A281               	btfss	3969,1,c	;volatile
  8848  002B72  D7FE               	goto	l257
  8849                           
  8850                           ;PortHigh.c: 18: }
  8851                           ;PortHigh.c: 19: LATAbits.LATA5 = 1;
  8852  002B74  8A89               	bsf	3977,5,c	;volatile
  8853  002B76                     l260:
  8854  002B76  B281               	btfsc	3969,1,c	;volatile
  8855  002B78  D7FE               	goto	l260
  8856                           
  8857                           ;PortHigh.c: 22: }
  8858                           ;PortHigh.c: 23: __nop();
  8859  002B7A  F000               	nop	
  8860                           
  8861                           ;PortHigh.c: 24: __nop();
  8862  002B7C  F000               	nop	
  8863                           
  8864                           ;PortHigh.c: 25: LATAbits.LATA5 = 0;
  8865  002B7E  9A89               	bcf	3977,5,c	;volatile
  8866  002B80  0012               	return		;funcret
  8867  002B82                     __end_of_PortTestA5:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           intcon2	equ	0xFF1
  8877                           intcon3	equ	0xFF0
  8878                           indf0	equ	0xFEF
  8879                           postinc0	equ	0xFEE
  8880                           fsr0h	equ	0xFEA
  8881                           fsr0l	equ	0xFE9
  8882                           wreg	equ	0xFE8
  8883                           postdec1	equ	0xFE5
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _handler *****************
  8893 ;; Defined at:
  8894 ;;		line 15 in file "interruptHandler.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;Total ram usage:       16 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    6
  8915 ;; This function calls:
  8916 ;;		_printSortTimer
  8917 ;;		_updateMenu
  8918 ;; This function is called by:
  8919 ;;		Interrupt level 2
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	intcode
  8924  000008                     __pintcode:
  8925                           	opt stack 0
  8926  000008                     _handler:
  8927                           	opt stack 18
  8928                           
  8929                           ;incstack = 0
  8930  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8931  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           intcon	equ	0xFF2
  8939                           intcon2	equ	0xFF1
  8940                           intcon3	equ	0xFF0
  8941                           indf0	equ	0xFEF
  8942                           postinc0	equ	0xFEE
  8943                           fsr0h	equ	0xFEA
  8944                           fsr0l	equ	0xFE9
  8945                           wreg	equ	0xFE8
  8946                           postdec1	equ	0xFE5
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955                           	psect	intcode_body
  8956  001866                     __pintcode_body:
  8957                           	opt stack 18
  8958  001866                     int_func:
  8959                           	opt stack 18
  8960  001866  0006               	pop		; remove dummy address from shadow register refresh
  8961  001868  CFFA F04D          	movff	pclath,??_handler+2
  8962  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8963  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8964  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8965  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8966  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8967  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8968  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8969  001888  CFF3 F055          	movff	prodl,??_handler+10
  8970  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8971  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8972  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8973  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8974  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8975                           
  8976                           ;interruptHandler.c: 17: if(INT1IF){
  8977  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8978  0018A2  D018               	goto	i2l5914
  8979                           
  8980                           ;interruptHandler.c: 18: INT1IF = 0;
  8981  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8982                           
  8983                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  8984  0018A6  0100               	movlb	0	; () banked
  8985  0018A8  51F9               	movf	_machine_state& (0+255),w,b
  8986  0018AA  A4D8               	btfss	status,2,c
  8987  0018AC  D013               	goto	i2l5914
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  8991  0018AE  3881               	swapf	3969,w,c	;volatile
  8992  0018B0  0B0F               	andlw	15
  8993  0018B2  0B0F               	andlw	15
  8994  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8995  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8996  0018B8  0EB5               	movlw	low _keys
  8997  0018BA  244B               	addwf	??_handler,w,c
  8998  0018BC  6EF6               	movwf	tblptrl,c
  8999  0018BE  0EFD               	movlw	high _keys
  9000  0018C0  204C               	addwfc	??_handler+1,w,c
  9001  0018C2  6EF7               	movwf	tblptrh,c
  9002  0018C4                     	if	1	;There are 3 active tblptr bytes
  9003  0018C4  6AF8               	clrf	tblptru,c
  9004  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  9005  0018C8  22F8               	addwfc	tblptru,f,c
  9006  0018CA                     	endif
  9007  0018CA  0008               	tblrd		*
  9008  0018CC  CFF5 F079          	movff	tablat,_input
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;interruptHandler.c: 21: updateMenu();
  9012  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  9013  0018D4                     i2l5914:
  9014                           
  9015                           ;interruptHandler.c: 22: }
  9016                           ;interruptHandler.c: 23: }
  9017                           ;interruptHandler.c: 26: if(TMR0IF){
  9018  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  9019  0018D6  D00C               	goto	i2l5928
  9020                           
  9021                           ;interruptHandler.c: 27: TMR0IF = 0;
  9022  0018D8  94F2               	bcf	intcon,2,c	;volatile
  9023                           
  9024                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  9025  0018DA  0100               	movlb	0	; () banked
  9026  0018DC  05F9               	decf	_machine_state& (0+255),w,b
  9027  0018DE  A4D8               	btfss	status,2,c
  9028  0018E0  D007               	goto	i2l5928
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;interruptHandler.c: 29: printSortTimer();
  9032  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  9033                           
  9034                           ;interruptHandler.c: 31: TMR0H = 0b10000101;
  9035  0018E6  0E85               	movlw	133
  9036  0018E8  6ED7               	movwf	4055,c	;volatile
  9037                           
  9038                           ;interruptHandler.c: 32: TMR0L = 0b11101110;
  9039  0018EA  0EEE               	movlw	238
  9040  0018EC  6ED6               	movwf	4054,c	;volatile
  9041                           
  9042                           ;interruptHandler.c: 33: TMR0ON = 1;
  9043  0018EE  8ED5               	bsf	4053,7,c	;volatile
  9044  0018F0                     i2l5928:
  9045                           
  9046                           ;interruptHandler.c: 34: }
  9047                           ;interruptHandler.c: 35: }
  9048                           ;interruptHandler.c: 38: if(TMR1IF){
  9049  0018F0  A09E               	btfss	3998,0,c	;volatile
  9050  0018F2  D024               	goto	i2l5952
  9051                           
  9052                           ;interruptHandler.c: 39: TMR1IF = 0;
  9053  0018F4  909E               	bcf	3998,0,c	;volatile
  9054                           
  9055                           ;interruptHandler.c: 40: TMR1ON = 0;
  9056  0018F6  90CD               	bcf	4045,0,c	;volatile
  9057                           
  9058                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  9059  0018F8  0100               	movlb	0	; () banked
  9060  0018FA  05F9               	decf	_machine_state& (0+255),w,b
  9061  0018FC  A4D8               	btfss	status,2,c
  9062  0018FE  D01E               	goto	i2l5952
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;interruptHandler.c: 42: if(was_low){
  9066  001900  5077               	movf	_was_low,w,c
  9067  001902  1078               	iorwf	_was_low+1,w,c
  9068  001904  B4D8               	btfsc	status,2,c
  9069  001906  D00A               	goto	i2l1271
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;interruptHandler.c: 43: LATCbits.LATC1 = 1;
  9073  001908  828B               	bsf	3979,1,c	;volatile
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;interruptHandler.c: 44: was_low = 0;
  9077  00190A  0E00               	movlw	0
  9078  00190C  6E78               	movwf	_was_low+1,c
  9079  00190E  0E00               	movlw	0
  9080  001910  6E77               	movwf	_was_low,c
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;interruptHandler.c: 45: TMR1H = servoTimes[0];
  9084  001912  C0D4  FFCF         	movff	_servoTimes,4047	;volatile
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;interruptHandler.c: 46: TMR1L = servoTimes[1];
  9088  001916  C0D6  FFCE         	movff	_servoTimes+2,4046	;volatile
  9089                           
  9090                           ;interruptHandler.c: 47: }
  9091  00191A  D00F               	goto	i2l5950
  9092  00191C                     i2l1271:
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;interruptHandler.c: 48: else{
  9096                           ;interruptHandler.c: 49: LATCbits.LATC1 = 0;
  9097  00191C  928B               	bcf	3979,1,c	;volatile
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;interruptHandler.c: 50: was_low = 1;
  9101  00191E  0E00               	movlw	0
  9102  001920  6E78               	movwf	_was_low+1,c
  9103  001922  0E01               	movlw	1
  9104  001924  6E77               	movwf	_was_low,c
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;interruptHandler.c: 51: TMR1H = 20000 - servoTimes[0];
  9108  001926  0100               	movlb	0	; () banked
  9109  001928  51D4               	movf	_servoTimes& (0+255),w,b
  9110  00192A  0800               	sublw	0
  9111  00192C  0F20               	addlw	32
  9112  00192E  6ECF               	movwf	4047,c	;volatile
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;interruptHandler.c: 52: TMR1L = 20000 - servoTimes[1];
  9116  001930  0100               	movlb	0	; () banked
  9117  001932  51D6               	movf	(_servoTimes+2)& (0+255),w,b
  9118  001934  0800               	sublw	0
  9119  001936  0F20               	addlw	32
  9120  001938  6ECE               	movwf	4046,c	;volatile
  9121  00193A                     i2l5950:
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;interruptHandler.c: 53: }
  9125                           ;interruptHandler.c: 54: TMR1ON = 1;
  9126  00193A  80CD               	bsf	4045,0,c	;volatile
  9127  00193C                     i2l5952:
  9128                           
  9129                           ;interruptHandler.c: 55: }
  9130                           ;interruptHandler.c: 56: }
  9131                           ;interruptHandler.c: 58: if(TMR3IF){
  9132  00193C  A2A1               	btfss	4001,1,c	;volatile
  9133  00193E  D024               	goto	i2l1277
  9134                           
  9135                           ;interruptHandler.c: 59: TMR3IF = 0;
  9136  001940  92A1               	bcf	4001,1,c	;volatile
  9137                           
  9138                           ;interruptHandler.c: 60: TMR3ON = 0;
  9139  001942  90B1               	bcf	4017,0,c	;volatile
  9140                           
  9141                           ;interruptHandler.c: 61: if(machine_state == Sorting_state){
  9142  001944  0100               	movlb	0	; () banked
  9143  001946  05F9               	decf	_machine_state& (0+255),w,b
  9144  001948  A4D8               	btfss	status,2,c
  9145  00194A  D01E               	goto	i2l1277
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;interruptHandler.c: 62: if(was_low){
  9149  00194C  5077               	movf	_was_low,w,c
  9150  00194E  1078               	iorwf	_was_low+1,w,c
  9151  001950  B4D8               	btfsc	status,2,c
  9152  001952  D00A               	goto	i2l1275
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;interruptHandler.c: 63: LATCbits.LATC2 = 1;
  9156  001954  848B               	bsf	3979,2,c	;volatile
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;interruptHandler.c: 64: was_low = 0;
  9160  001956  0E00               	movlw	0
  9161  001958  6E78               	movwf	_was_low+1,c
  9162  00195A  0E00               	movlw	0
  9163  00195C  6E77               	movwf	_was_low,c
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;interruptHandler.c: 65: TMR3H = servoTimes[2];
  9167  00195E  C0D8  FFB3         	movff	_servoTimes+4,4019	;volatile
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;interruptHandler.c: 66: TMR3L = servoTimes[3];
  9171  001962  C0DA  FFB2         	movff	_servoTimes+6,4018	;volatile
  9172                           
  9173                           ;interruptHandler.c: 67: }
  9174  001966  D00F               	goto	i2l5974
  9175  001968                     i2l1275:
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;interruptHandler.c: 68: else{
  9179                           ;interruptHandler.c: 69: LATCbits.LATC2 = 0;
  9180  001968  948B               	bcf	3979,2,c	;volatile
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;interruptHandler.c: 70: was_low = 1;
  9184  00196A  0E00               	movlw	0
  9185  00196C  6E78               	movwf	_was_low+1,c
  9186  00196E  0E01               	movlw	1
  9187  001970  6E77               	movwf	_was_low,c
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;interruptHandler.c: 71: TMR3H = 20000 - servoTimes[2];
  9191  001972  0100               	movlb	0	; () banked
  9192  001974  51D8               	movf	(_servoTimes+4)& (0+255),w,b
  9193  001976  0800               	sublw	0
  9194  001978  0F20               	addlw	32
  9195  00197A  6EB3               	movwf	4019,c	;volatile
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;interruptHandler.c: 72: TMR3L = 20000 - servoTimes[3];
  9199  00197C  0100               	movlb	0	; () banked
  9200  00197E  51DA               	movf	(_servoTimes+6)& (0+255),w,b
  9201  001980  0800               	sublw	0
  9202  001982  0F20               	addlw	32
  9203  001984  6EB2               	movwf	4018,c	;volatile
  9204  001986                     i2l5974:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;interruptHandler.c: 73: }
  9208                           ;interruptHandler.c: 74: TMR3ON = 1;
  9209  001986  80B1               	bsf	4017,0,c	;volatile
  9210  001988                     i2l1277:
  9211  001988  C05A  FFF5         	movff	??_handler+15,tablat
  9212  00198C  C059  FFF8         	movff	??_handler+14,tblptru
  9213  001990  C058  FFF7         	movff	??_handler+13,tblptrh
  9214  001994  C057  FFF6         	movff	??_handler+12,tblptrl
  9215  001998  C056  FFF4         	movff	??_handler+11,prodh
  9216  00199C  C055  FFF3         	movff	??_handler+10,prodl
  9217  0019A0  C054  FFDA         	movff	??_handler+9,fsr2h
  9218  0019A4  C053  FFD9         	movff	??_handler+8,fsr2l
  9219  0019A8  C052  FFE2         	movff	??_handler+7,fsr1h
  9220  0019AC  C051  FFE1         	movff	??_handler+6,fsr1l
  9221  0019B0  C050  FFEA         	movff	??_handler+5,fsr0h
  9222  0019B4  C04F  FFE9         	movff	??_handler+4,fsr0l
  9223  0019B8  C04E  FFFB         	movff	??_handler+3,pclatu
  9224  0019BC  C04D  FFFA         	movff	??_handler+2,pclath
  9225  0019C0  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9226  0019C2  0011               	retfie		f
  9227  0019C4                     __end_of_handler:
  9228                           	opt stack 0
  9229                           pclatu	equ	0xFFB
  9230                           pclath	equ	0xFFA
  9231                           tblptru	equ	0xFF8
  9232                           tblptrh	equ	0xFF7
  9233                           tblptrl	equ	0xFF6
  9234                           tablat	equ	0xFF5
  9235                           prodh	equ	0xFF4
  9236                           prodl	equ	0xFF3
  9237                           intcon	equ	0xFF2
  9238                           intcon2	equ	0xFF1
  9239                           intcon3	equ	0xFF0
  9240                           indf0	equ	0xFEF
  9241                           postinc0	equ	0xFEE
  9242                           fsr0h	equ	0xFEA
  9243                           fsr0l	equ	0xFE9
  9244                           wreg	equ	0xFE8
  9245                           postdec1	equ	0xFE5
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _updateMenu *****************
  9256 ;; Defined at:
  9257 ;;		line 156 in file "UI.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;Total ram usage:        2 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    5
  9278 ;; This function calls:
  9279 ;;		_change_state_to_logs_11
  9280 ;;		_change_state_to_logs_12
  9281 ;;		_change_state_to_logs_22
  9282 ;;		_change_state_to_logs_23
  9283 ;;		_change_state_to_logs_33
  9284 ;;		_change_state_to_logs_34
  9285 ;;		_change_state_to_menu_11
  9286 ;;		_change_state_to_menu_23
  9287 ;;		_dispLogs
  9288 ;;		_inputHandler
  9289 ;;		i2_change_state_to_menu_12
  9290 ;;		i2_change_state_to_menu_22
  9291 ;;		i2_change_state_to_menu_start
  9292 ;; This function is called by:
  9293 ;;		_handler
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text43
  9298  000F90                     __ptext43:
  9299                           	opt stack 0
  9300  000F90                     _updateMenu:
  9301                           	opt stack 18
  9302                           
  9303                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9304                           
  9305                           ;incstack = 0
  9306  000F90  0E00               	movlw	0
  9307  000F92  6E76               	movwf	_up+1,c
  9308  000F94  0E00               	movlw	0
  9309  000F96  6E75               	movwf	_up,c
  9310  000F98  0E00               	movlw	0
  9311  000F9A  6E6E               	movwf	_down+1,c
  9312  000F9C  0E00               	movlw	0
  9313  000F9E  6E6D               	movwf	_down,c
  9314  000FA0  0E00               	movlw	0
  9315  000FA2  6E70               	movwf	_enter+1,c
  9316  000FA4  0E00               	movlw	0
  9317  000FA6  6E6F               	movwf	_enter,c
  9318  000FA8  0E00               	movlw	0
  9319  000FAA  6E64               	movwf	_back+1,c
  9320  000FAC  0E00               	movlw	0
  9321  000FAE  6E63               	movwf	_back,c
  9322                           
  9323                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9324  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9325                           
  9326                           ;UI.c: 160: if (inputHandler()
  9327                           ;UI.c: 163: ){
  9328  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  9329  000FB6  502A               	movf	?_inputHandler,w,c
  9330  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9331  000FBA  A4D8               	btfss	status,2,c
  9332  000FBC  D112               	goto	i2l5736
  9333  000FBE  D146               	goto	i2l434
  9334  000FC0                     i2l5588:
  9335                           
  9336                           ;UI.c: 167: change_state_to_menu_11();
  9337  000FC0  EC22  F014         	call	_change_state_to_menu_11	;wreg free
  9338                           
  9339                           ;UI.c: 168: break;
  9340  000FC4  D143               	goto	i2l434
  9341  000FC6                     i2l5590:
  9342                           
  9343                           ;UI.c: 171: if(up){
  9344  000FC6  5075               	movf	_up,w,c
  9345  000FC8  1076               	iorwf	_up+1,w,c
  9346  000FCA  B4D8               	btfsc	status,2,c
  9347  000FCC  D003               	goto	i2l5594
  9348                           
  9349                           ;UI.c: 172: change_state_to_menu_23();
  9350  000FCE  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9351                           
  9352                           ;UI.c: 173: }
  9353  000FD2  D13C               	goto	i2l434
  9354  000FD4                     i2l5594:
  9355                           
  9356                           ;UI.c: 174: else if(down){
  9357  000FD4  506D               	movf	_down,w,c
  9358  000FD6  106E               	iorwf	_down+1,w,c
  9359  000FD8  B4D8               	btfsc	status,2,c
  9360  000FDA  D003               	goto	i2l5598
  9361                           
  9362                           ;UI.c: 175: change_state_to_menu_12();
  9363  000FDC  ECF2  F013         	call	i2_change_state_to_menu_12	;wreg free
  9364                           
  9365                           ;UI.c: 176: }
  9366  000FE0  D135               	goto	i2l434
  9367  000FE2                     i2l5598:
  9368                           
  9369                           ;UI.c: 177: else if(enter){
  9370  000FE2  506F               	movf	_enter,w,c
  9371  000FE4  1070               	iorwf	_enter+1,w,c
  9372  000FE6  B4D8               	btfsc	status,2,c
  9373  000FE8  D131               	goto	i2l434
  9374                           
  9375                           ;UI.c: 178: change_state_to_menu_start();
  9376  000FEA  EC21  F015         	call	i2_change_state_to_menu_start	;wreg free
  9377                           
  9378                           ;UI.c: 179: }
  9379                           ;UI.c: 180: break;
  9380  000FEE  D12E               	goto	i2l434
  9381  000FF0                     i2l5602:
  9382                           
  9383                           ;UI.c: 183: if(up){
  9384  000FF0  5075               	movf	_up,w,c
  9385  000FF2  1076               	iorwf	_up+1,w,c
  9386  000FF4  B4D8               	btfsc	status,2,c
  9387  000FF6  D003               	goto	i2l5606
  9388                           
  9389                           ;UI.c: 184: change_state_to_menu_11();
  9390  000FF8  EC22  F014         	call	_change_state_to_menu_11	;wreg free
  9391                           
  9392                           ;UI.c: 185: }
  9393  000FFC  D127               	goto	i2l434
  9394  000FFE                     i2l5606:
  9395                           
  9396                           ;UI.c: 186: else if(down){
  9397  000FFE  506D               	movf	_down,w,c
  9398  001000  106E               	iorwf	_down+1,w,c
  9399  001002  B4D8               	btfsc	status,2,c
  9400  001004  D011               	goto	i2l5622
  9401                           
  9402                           ;UI.c: 187: change_state_to_menu_23();
  9403  001006  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9404                           
  9405                           ;UI.c: 188: }
  9406  00100A  D120               	goto	i2l434
  9407  00100C                     i2l5614:
  9408                           
  9409                           ;UI.c: 195: if(up){
  9410  00100C  5075               	movf	_up,w,c
  9411  00100E  1076               	iorwf	_up+1,w,c
  9412  001010  B4D8               	btfsc	status,2,c
  9413  001012  D003               	goto	i2l5618
  9414                           
  9415                           ;UI.c: 196: change_state_to_menu_11();
  9416  001014  EC22  F014         	call	_change_state_to_menu_11	;wreg free
  9417                           
  9418                           ;UI.c: 197: }
  9419  001018  D119               	goto	i2l434
  9420  00101A                     i2l5618:
  9421                           
  9422                           ;UI.c: 198: else if(down){
  9423  00101A  506D               	movf	_down,w,c
  9424  00101C  106E               	iorwf	_down+1,w,c
  9425  00101E  B4D8               	btfsc	status,2,c
  9426  001020  D003               	goto	i2l5622
  9427                           
  9428                           ;UI.c: 199: change_state_to_menu_23();
  9429  001022  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9430                           
  9431                           ;UI.c: 200: }
  9432  001026  D112               	goto	i2l434
  9433  001028                     i2l5622:
  9434                           
  9435                           ;UI.c: 201: else if(enter){
  9436  001028  506F               	movf	_enter,w,c
  9437  00102A  1070               	iorwf	_enter+1,w,c
  9438  00102C  B4D8               	btfsc	status,2,c
  9439  00102E  D10E               	goto	i2l434
  9440                           
  9441                           ;UI.c: 202: machine_state = Sorting_state;
  9442  001030  0E01               	movlw	1
  9443  001032  0100               	movlb	0	; () banked
  9444  001034  6FF9               	movwf	_machine_state& (0+255),b
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;UI.c: 203: }
  9448                           ;UI.c: 204: break;
  9449                           
  9450                           ; BSR set to: 0
  9451                           
  9452                           ; BSR set to: 0
  9453  001036  D10A               	goto	i2l434
  9454  001038                     i2l5626:
  9455                           
  9456                           ;UI.c: 207: if(up){
  9457  001038  5075               	movf	_up,w,c
  9458  00103A  1076               	iorwf	_up+1,w,c
  9459  00103C  B4D8               	btfsc	status,2,c
  9460  00103E  D003               	goto	i2l5630
  9461                           
  9462                           ;UI.c: 208: change_state_to_menu_22();
  9463  001040  ECDA  F013         	call	i2_change_state_to_menu_22	;wreg free
  9464                           
  9465                           ;UI.c: 209: }
  9466  001044  D103               	goto	i2l434
  9467  001046                     i2l5630:
  9468                           
  9469                           ;UI.c: 210: else if(down){
  9470  001046  506D               	movf	_down,w,c
  9471  001048  106E               	iorwf	_down+1,w,c
  9472  00104A  B4D8               	btfsc	status,2,c
  9473  00104C  D003               	goto	i2l5634
  9474                           
  9475                           ;UI.c: 211: change_state_to_menu_11();
  9476  00104E  EC22  F014         	call	_change_state_to_menu_11	;wreg free
  9477                           
  9478                           ;UI.c: 212: }
  9479  001052  D0FC               	goto	i2l434
  9480  001054                     i2l5634:
  9481                           
  9482                           ;UI.c: 213: else if(enter){
  9483  001054  506F               	movf	_enter,w,c
  9484  001056  1070               	iorwf	_enter+1,w,c
  9485  001058  B4D8               	btfsc	status,2,c
  9486  00105A  D0F8               	goto	i2l434
  9487                           
  9488                           ;UI.c: 214: change_state_to_logs_11();
  9489  00105C  EC9A  F014         	call	_change_state_to_logs_11	;wreg free
  9490                           
  9491                           ;UI.c: 215: }
  9492                           ;UI.c: 216: break;
  9493  001060  D0F5               	goto	i2l434
  9494  001062                     i2l5638:
  9495                           
  9496                           ;UI.c: 219: if(up){
  9497  001062  5075               	movf	_up,w,c
  9498  001064  1076               	iorwf	_up+1,w,c
  9499  001066  B4D8               	btfsc	status,2,c
  9500  001068  D003               	goto	i2l5642
  9501                           
  9502                           ;UI.c: 220: change_state_to_logs_34();
  9503  00106A  EC3A  F014         	call	_change_state_to_logs_34	;wreg free
  9504                           
  9505                           ;UI.c: 221: }
  9506  00106E  D0EE               	goto	i2l434
  9507  001070                     i2l5642:
  9508                           
  9509                           ;UI.c: 222: else if(down){
  9510  001070  506D               	movf	_down,w,c
  9511  001072  106E               	iorwf	_down+1,w,c
  9512  001074  B4D8               	btfsc	status,2,c
  9513  001076  D003               	goto	i2l5646
  9514                           
  9515                           ;UI.c: 223: change_state_to_logs_12();
  9516  001078  EC82  F014         	call	_change_state_to_logs_12	;wreg free
  9517                           
  9518                           ;UI.c: 224: }
  9519  00107C  D0E7               	goto	i2l434
  9520  00107E                     i2l5646:
  9521                           
  9522                           ;UI.c: 225: else if(enter){
  9523  00107E  506F               	movf	_enter,w,c
  9524  001080  1070               	iorwf	_enter+1,w,c
  9525  001082  B4D8               	btfsc	status,2,c
  9526  001084  D007               	goto	i2l5650
  9527                           
  9528                           ;UI.c: 226: dispLogs(1);
  9529  001086  0E00               	movlw	0
  9530  001088  6E02               	movwf	dispLogs@myLog+1,c
  9531  00108A  0E01               	movlw	1
  9532  00108C  6E01               	movwf	dispLogs@myLog,c
  9533  00108E  ECAE  F015         	call	_dispLogs	;wreg free
  9534                           
  9535                           ;UI.c: 227: }
  9536  001092  D0DC               	goto	i2l434
  9537  001094                     i2l5650:
  9538                           
  9539                           ;UI.c: 228: else if(back){
  9540  001094  5063               	movf	_back,w,c
  9541  001096  1064               	iorwf	_back+1,w,c
  9542  001098  B4D8               	btfsc	status,2,c
  9543  00109A  D0D8               	goto	i2l434
  9544                           
  9545                           ;UI.c: 229: change_state_to_menu_23();
  9546  00109C  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9547                           
  9548                           ;UI.c: 230: }
  9549                           ;UI.c: 231: break;
  9550  0010A0  D0D5               	goto	i2l434
  9551  0010A2                     i2l5654:
  9552                           
  9553                           ;UI.c: 234: if(up){
  9554  0010A2  5075               	movf	_up,w,c
  9555  0010A4  1076               	iorwf	_up+1,w,c
  9556  0010A6  B4D8               	btfsc	status,2,c
  9557  0010A8  D003               	goto	i2l5658
  9558                           
  9559                           ;UI.c: 235: change_state_to_logs_11();
  9560  0010AA  EC9A  F014         	call	_change_state_to_logs_11	;wreg free
  9561                           
  9562                           ;UI.c: 236: }
  9563  0010AE  D0CE               	goto	i2l434
  9564  0010B0                     i2l5658:
  9565                           
  9566                           ;UI.c: 237: else if(down){
  9567  0010B0  506D               	movf	_down,w,c
  9568  0010B2  106E               	iorwf	_down+1,w,c
  9569  0010B4  B4D8               	btfsc	status,2,c
  9570  0010B6  D003               	goto	i2l5662
  9571                           
  9572                           ;UI.c: 238: change_state_to_logs_23();
  9573  0010B8  ECC9  F014         	call	_change_state_to_logs_23	;wreg free
  9574                           
  9575                           ;UI.c: 239: }
  9576  0010BC  D0C7               	goto	i2l434
  9577  0010BE                     i2l5662:
  9578                           
  9579                           ;UI.c: 240: else if(enter){
  9580  0010BE  506F               	movf	_enter,w,c
  9581  0010C0  1070               	iorwf	_enter+1,w,c
  9582  0010C2  B4D8               	btfsc	status,2,c
  9583  0010C4  D007               	goto	i2l5666
  9584                           
  9585                           ;UI.c: 241: dispLogs(2);
  9586  0010C6  0E00               	movlw	0
  9587  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9588  0010CA  0E02               	movlw	2
  9589  0010CC  6E01               	movwf	dispLogs@myLog,c
  9590  0010CE  ECAE  F015         	call	_dispLogs	;wreg free
  9591                           
  9592                           ;UI.c: 242: }
  9593  0010D2  D0BC               	goto	i2l434
  9594  0010D4                     i2l5666:
  9595                           
  9596                           ;UI.c: 243: else if(back){
  9597  0010D4  5063               	movf	_back,w,c
  9598  0010D6  1064               	iorwf	_back+1,w,c
  9599  0010D8  B4D8               	btfsc	status,2,c
  9600  0010DA  D0B8               	goto	i2l434
  9601                           
  9602                           ;UI.c: 244: change_state_to_menu_23();
  9603  0010DC  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9604                           
  9605                           ;UI.c: 245: }
  9606                           ;UI.c: 246: break;
  9607  0010E0  D0B5               	goto	i2l434
  9608  0010E2                     i2l5670:
  9609                           
  9610                           ;UI.c: 249: if(up){
  9611  0010E2  5075               	movf	_up,w,c
  9612  0010E4  1076               	iorwf	_up+1,w,c
  9613  0010E6  B4D8               	btfsc	status,2,c
  9614  0010E8  D003               	goto	i2l5674
  9615                           
  9616                           ;UI.c: 250: change_state_to_logs_11();
  9617  0010EA  EC9A  F014         	call	_change_state_to_logs_11	;wreg free
  9618                           
  9619                           ;UI.c: 251: }
  9620  0010EE  D0AE               	goto	i2l434
  9621  0010F0                     i2l5674:
  9622                           
  9623                           ;UI.c: 252: else if(down){
  9624  0010F0  506D               	movf	_down,w,c
  9625  0010F2  106E               	iorwf	_down+1,w,c
  9626  0010F4  B4D8               	btfsc	status,2,c
  9627  0010F6  D003               	goto	i2l5678
  9628                           
  9629                           ;UI.c: 253: change_state_to_logs_23();
  9630  0010F8  ECC9  F014         	call	_change_state_to_logs_23	;wreg free
  9631                           
  9632                           ;UI.c: 254: }
  9633  0010FC  D0A7               	goto	i2l434
  9634  0010FE                     i2l5678:
  9635                           
  9636                           ;UI.c: 255: else if(enter){
  9637  0010FE  506F               	movf	_enter,w,c
  9638  001100  1070               	iorwf	_enter+1,w,c
  9639  001102  B4D8               	btfsc	status,2,c
  9640  001104  D007               	goto	i2l5682
  9641                           
  9642                           ;UI.c: 256: dispLogs(2);
  9643  001106  0E00               	movlw	0
  9644  001108  6E02               	movwf	dispLogs@myLog+1,c
  9645  00110A  0E02               	movlw	2
  9646  00110C  6E01               	movwf	dispLogs@myLog,c
  9647  00110E  ECAE  F015         	call	_dispLogs	;wreg free
  9648                           
  9649                           ;UI.c: 257: }
  9650  001112  D09C               	goto	i2l434
  9651  001114                     i2l5682:
  9652                           
  9653                           ;UI.c: 258: else if(back){
  9654  001114  5063               	movf	_back,w,c
  9655  001116  1064               	iorwf	_back+1,w,c
  9656  001118  B4D8               	btfsc	status,2,c
  9657  00111A  D098               	goto	i2l434
  9658                           
  9659                           ;UI.c: 259: change_state_to_menu_23();
  9660  00111C  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9661                           
  9662                           ;UI.c: 260: }
  9663                           ;UI.c: 261: break;
  9664  001120  D095               	goto	i2l434
  9665  001122                     i2l5686:
  9666                           
  9667                           ;UI.c: 264: if(up){
  9668  001122  5075               	movf	_up,w,c
  9669  001124  1076               	iorwf	_up+1,w,c
  9670  001126  B4D8               	btfsc	status,2,c
  9671  001128  D003               	goto	i2l5690
  9672                           
  9673                           ;UI.c: 265: change_state_to_logs_22();
  9674  00112A  EC6A  F014         	call	_change_state_to_logs_22	;wreg free
  9675                           
  9676                           ;UI.c: 266: }
  9677  00112E  D08E               	goto	i2l434
  9678  001130                     i2l5690:
  9679                           
  9680                           ;UI.c: 267: else if(down){
  9681  001130  506D               	movf	_down,w,c
  9682  001132  106E               	iorwf	_down+1,w,c
  9683  001134  B4D8               	btfsc	status,2,c
  9684  001136  D003               	goto	i2l5694
  9685                           
  9686                           ;UI.c: 268: change_state_to_logs_34();
  9687  001138  EC3A  F014         	call	_change_state_to_logs_34	;wreg free
  9688                           
  9689                           ;UI.c: 269: }
  9690  00113C  D087               	goto	i2l434
  9691  00113E                     i2l5694:
  9692                           
  9693                           ;UI.c: 270: else if(enter){
  9694  00113E  506F               	movf	_enter,w,c
  9695  001140  1070               	iorwf	_enter+1,w,c
  9696  001142  B4D8               	btfsc	status,2,c
  9697  001144  D007               	goto	i2l5698
  9698                           
  9699                           ;UI.c: 271: dispLogs(3);
  9700  001146  0E00               	movlw	0
  9701  001148  6E02               	movwf	dispLogs@myLog+1,c
  9702  00114A  0E03               	movlw	3
  9703  00114C  6E01               	movwf	dispLogs@myLog,c
  9704  00114E  ECAE  F015         	call	_dispLogs	;wreg free
  9705                           
  9706                           ;UI.c: 272: }
  9707  001152  D07C               	goto	i2l434
  9708  001154                     i2l5698:
  9709                           
  9710                           ;UI.c: 273: else if(back){
  9711  001154  5063               	movf	_back,w,c
  9712  001156  1064               	iorwf	_back+1,w,c
  9713  001158  B4D8               	btfsc	status,2,c
  9714  00115A  D078               	goto	i2l434
  9715                           
  9716                           ;UI.c: 274: change_state_to_menu_23();
  9717  00115C  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9718                           
  9719                           ;UI.c: 275: }
  9720                           ;UI.c: 276: break;
  9721  001160  D075               	goto	i2l434
  9722  001162                     i2l5702:
  9723                           
  9724                           ;UI.c: 279: if(up){
  9725  001162  5075               	movf	_up,w,c
  9726  001164  1076               	iorwf	_up+1,w,c
  9727  001166  B4D8               	btfsc	status,2,c
  9728  001168  D003               	goto	i2l5706
  9729                           
  9730                           ;UI.c: 280: change_state_to_logs_22();
  9731  00116A  EC6A  F014         	call	_change_state_to_logs_22	;wreg free
  9732                           
  9733                           ;UI.c: 281: }
  9734  00116E  D06E               	goto	i2l434
  9735  001170                     i2l5706:
  9736                           
  9737                           ;UI.c: 282: else if(down){
  9738  001170  506D               	movf	_down,w,c
  9739  001172  106E               	iorwf	_down+1,w,c
  9740  001174  B4D8               	btfsc	status,2,c
  9741  001176  D003               	goto	i2l5710
  9742                           
  9743                           ;UI.c: 283: change_state_to_logs_34();
  9744  001178  EC3A  F014         	call	_change_state_to_logs_34	;wreg free
  9745                           
  9746                           ;UI.c: 284: }
  9747  00117C  D067               	goto	i2l434
  9748  00117E                     i2l5710:
  9749                           
  9750                           ;UI.c: 285: else if(enter){
  9751  00117E  506F               	movf	_enter,w,c
  9752  001180  1070               	iorwf	_enter+1,w,c
  9753  001182  B4D8               	btfsc	status,2,c
  9754  001184  D007               	goto	i2l5714
  9755                           
  9756                           ;UI.c: 286: dispLogs(3);
  9757  001186  0E00               	movlw	0
  9758  001188  6E02               	movwf	dispLogs@myLog+1,c
  9759  00118A  0E03               	movlw	3
  9760  00118C  6E01               	movwf	dispLogs@myLog,c
  9761  00118E  ECAE  F015         	call	_dispLogs	;wreg free
  9762                           
  9763                           ;UI.c: 287: }
  9764  001192  D05C               	goto	i2l434
  9765  001194                     i2l5714:
  9766                           
  9767                           ;UI.c: 288: else if(back){
  9768  001194  5063               	movf	_back,w,c
  9769  001196  1064               	iorwf	_back+1,w,c
  9770  001198  B4D8               	btfsc	status,2,c
  9771  00119A  D058               	goto	i2l434
  9772                           
  9773                           ;UI.c: 289: change_state_to_menu_23();
  9774  00119C  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9775                           
  9776                           ;UI.c: 290: }
  9777                           ;UI.c: 291: break;
  9778  0011A0  D055               	goto	i2l434
  9779  0011A2                     i2l5718:
  9780                           
  9781                           ;UI.c: 294: if(up){
  9782  0011A2  5075               	movf	_up,w,c
  9783  0011A4  1076               	iorwf	_up+1,w,c
  9784  0011A6  B4D8               	btfsc	status,2,c
  9785  0011A8  D003               	goto	i2l5722
  9786                           
  9787                           ;UI.c: 295: change_state_to_logs_33();
  9788  0011AA  EC52  F014         	call	_change_state_to_logs_33	;wreg free
  9789                           
  9790                           ;UI.c: 296: }
  9791  0011AE  D04E               	goto	i2l434
  9792  0011B0                     i2l5722:
  9793                           
  9794                           ;UI.c: 297: else if(down){
  9795  0011B0  506D               	movf	_down,w,c
  9796  0011B2  106E               	iorwf	_down+1,w,c
  9797  0011B4  B4D8               	btfsc	status,2,c
  9798  0011B6  D003               	goto	i2l5726
  9799                           
  9800                           ;UI.c: 298: change_state_to_logs_11();
  9801  0011B8  EC9A  F014         	call	_change_state_to_logs_11	;wreg free
  9802                           
  9803                           ;UI.c: 299: }
  9804  0011BC  D047               	goto	i2l434
  9805  0011BE                     i2l5726:
  9806                           
  9807                           ;UI.c: 300: else if(enter){
  9808  0011BE  506F               	movf	_enter,w,c
  9809  0011C0  1070               	iorwf	_enter+1,w,c
  9810  0011C2  B4D8               	btfsc	status,2,c
  9811  0011C4  D007               	goto	i2l5730
  9812                           
  9813                           ;UI.c: 301: dispLogs(4);
  9814  0011C6  0E00               	movlw	0
  9815  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9816  0011CA  0E04               	movlw	4
  9817  0011CC  6E01               	movwf	dispLogs@myLog,c
  9818  0011CE  ECAE  F015         	call	_dispLogs	;wreg free
  9819                           
  9820                           ;UI.c: 302: }
  9821  0011D2  D03C               	goto	i2l434
  9822  0011D4                     i2l5730:
  9823                           
  9824                           ;UI.c: 303: else if(back){
  9825  0011D4  5063               	movf	_back,w,c
  9826  0011D6  1064               	iorwf	_back+1,w,c
  9827  0011D8  B4D8               	btfsc	status,2,c
  9828  0011DA  D038               	goto	i2l434
  9829                           
  9830                           ;UI.c: 304: change_state_to_menu_23();
  9831  0011DC  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
  9832                           
  9833                           ;UI.c: 310: }
  9834                           
  9835                           ;UI.c: 309: break;
  9836                           
  9837                           ;UI.c: 308: default:
  9838                           
  9839                           ;UI.c: 305: }
  9840                           ;UI.c: 306: break;
  9841  0011E0  D035               	goto	i2l434
  9842  0011E2                     i2l5736:
  9843  0011E2  C0E9  F043         	movff	_cur_state,??_updateMenu
  9844  0011E6  C0EA  F044         	movff	_cur_state+1,??_updateMenu+1
  9845                           
  9846                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9847                           ; Switch size 1, requested type "space"
  9848                           ; Number of cases is 3, Range of values is 0 to 4
  9849                           ; switch strategies available:
  9850                           ; Name         Instructions Cycles
  9851                           ; simple_byte           10     6 (average)
  9852                           ;	Chosen strategy is simple_byte
  9853  0011EA  5044               	movf	??_updateMenu+1,w,c
  9854  0011EC  0A00               	xorlw	0	; case 0
  9855  0011EE  B4D8               	btfsc	status,2,c
  9856  0011F0  D007               	goto	i2l6162
  9857  0011F2  0A03               	xorlw	3	; case 3
  9858  0011F4  B4D8               	btfsc	status,2,c
  9859  0011F6  D015               	goto	i2l6164
  9860  0011F8  0A07               	xorlw	7	; case 4
  9861  0011FA  B4D8               	btfsc	status,2,c
  9862  0011FC  D020               	goto	i2l6166
  9863  0011FE  D026               	goto	i2l434
  9864  001200                     i2l6162:
  9865                           
  9866                           ; Switch size 1, requested type "space"
  9867                           ; Number of cases is 5, Range of values is 0 to 23
  9868                           ; switch strategies available:
  9869                           ; Name         Instructions Cycles
  9870                           ; simple_byte           16     9 (average)
  9871                           ;	Chosen strategy is simple_byte
  9872  001200  5043               	movf	??_updateMenu,w,c
  9873  001202  0A00               	xorlw	0	; case 0
  9874  001204  B4D8               	btfsc	status,2,c
  9875  001206  D6DC               	goto	i2l5588
  9876  001208  0A0B               	xorlw	11	; case 11
  9877  00120A  B4D8               	btfsc	status,2,c
  9878  00120C  D6DC               	goto	i2l5590
  9879  00120E  0A07               	xorlw	7	; case 12
  9880  001210  B4D8               	btfsc	status,2,c
  9881  001212  D6EE               	goto	i2l5602
  9882  001214  0A1A               	xorlw	26	; case 22
  9883  001216  B4D8               	btfsc	status,2,c
  9884  001218  D6F9               	goto	i2l5614
  9885  00121A  0A01               	xorlw	1	; case 23
  9886  00121C  B4D8               	btfsc	status,2,c
  9887  00121E  D70C               	goto	i2l5626
  9888  001220  D015               	goto	i2l434
  9889  001222                     i2l6164:
  9890                           
  9891                           ; Switch size 1, requested type "space"
  9892                           ; Number of cases is 4, Range of values is 243 to 255
  9893                           ; switch strategies available:
  9894                           ; Name         Instructions Cycles
  9895                           ; simple_byte           13     7 (average)
  9896                           ;	Chosen strategy is simple_byte
  9897  001222  5043               	movf	??_updateMenu,w,c
  9898  001224  0AF3               	xorlw	243	; case 243
  9899  001226  B4D8               	btfsc	status,2,c
  9900  001228  D71C               	goto	i2l5638
  9901  00122A  0A07               	xorlw	7	; case 244
  9902  00122C  B4D8               	btfsc	status,2,c
  9903  00122E  D739               	goto	i2l5654
  9904  001230  0A0A               	xorlw	10	; case 254
  9905  001232  B4D8               	btfsc	status,2,c
  9906  001234  D756               	goto	i2l5670
  9907  001236  0A01               	xorlw	1	; case 255
  9908  001238  B4D8               	btfsc	status,2,c
  9909  00123A  D773               	goto	i2l5686
  9910  00123C  D007               	goto	i2l434
  9911  00123E                     i2l6166:
  9912                           
  9913                           ; Switch size 1, requested type "space"
  9914                           ; Number of cases is 2, Range of values is 9 to 10
  9915                           ; switch strategies available:
  9916                           ; Name         Instructions Cycles
  9917                           ; simple_byte            7     4 (average)
  9918                           ;	Chosen strategy is simple_byte
  9919  00123E  5043               	movf	??_updateMenu,w,c
  9920  001240  0A09               	xorlw	9	; case 9
  9921  001242  B4D8               	btfsc	status,2,c
  9922  001244  D78E               	goto	i2l5702
  9923  001246  0A03               	xorlw	3	; case 10
  9924  001248  B4D8               	btfsc	status,2,c
  9925  00124A  D7AB               	goto	i2l5718
  9926  00124C                     i2l434:
  9927                           
  9928                           ;UI.c: 311: }
  9929                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9930  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9931  00124E  0012               	return		;funcret
  9932  001250                     __end_of_updateMenu:
  9933                           	opt stack 0
  9934                           pclatu	equ	0xFFB
  9935                           pclath	equ	0xFFA
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           intcon2	equ	0xFF1
  9944                           intcon3	equ	0xFF0
  9945                           indf0	equ	0xFEF
  9946                           postinc0	equ	0xFEE
  9947                           fsr0h	equ	0xFEA
  9948                           fsr0l	equ	0xFE9
  9949                           wreg	equ	0xFE8
  9950                           postdec1	equ	0xFE5
  9951                           fsr1h	equ	0xFE2
  9952                           fsr1l	equ	0xFE1
  9953                           indf2	equ	0xFDF
  9954                           postinc2	equ	0xFDE
  9955                           postdec2	equ	0xFDD
  9956                           fsr2h	equ	0xFDA
  9957                           fsr2l	equ	0xFD9
  9958                           status	equ	0xFD8
  9959                           
  9960 ;; *************** function i2_change_state_to_menu_start *****************
  9961 ;; Defined at:
  9962 ;;		line 416 in file "UI.c"
  9963 ;; Parameters:    Size  Location     Type
  9964 ;;		None
  9965 ;; Auto vars:     Size  Location     Type
  9966 ;;		None
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  1    wreg      void 
  9969 ;; Registers used:
  9970 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;Total ram usage:        0 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    4
  9983 ;; This function calls:
  9984 ;;		i2_lcdInst
  9985 ;;		i2_printRTC
  9986 ;;		i2_printf
  9987 ;; This function is called by:
  9988 ;;		_updateMenu
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text44
  9993  002A42                     __ptext44:
  9994                           	opt stack 0
  9995  002A42                     i2_change_state_to_menu_start:
  9996                           	opt stack 18
  9997                           
  9998                           ;UI.c: 417: cur_state = 0;
  9999                           
 10000                           ;incstack = 0
 10001  002A42  0E00               	movlw	0
 10002  002A44  0100               	movlb	0	; () banked
 10003  002A46  6FEA               	movwf	(_cur_state+1)& (0+255),b
 10004  002A48  0E00               	movlw	0
 10005  002A4A  6FE9               	movwf	_cur_state& (0+255),b
 10006                           
 10007                           ; BSR set to: 0
 10008                           ;UI.c: 419: lcdInst(0b10000000);;
 10009  002A4C  0E80               	movlw	128
 10010  002A4E  ECE0  F015         	call	i2_lcdInst
 10011                           
 10012                           ;UI.c: 420: printRTC();
 10013  002A52  EC28  F009         	call	i2_printRTC	;wreg free
 10014                           
 10015                           ;UI.c: 421: lcdInst(0b11000000);;
 10016  002A56  0EC0               	movlw	192
 10017  002A58  ECE0  F015         	call	i2_lcdInst
 10018                           
 10019                           ;UI.c: 422: printf("PUSH TO CONTINUE");
 10020  002A5C  0E97               	movlw	low STR_15
 10021  002A5E  6E0D               	movwf	i2printf@f,c
 10022  002A60  0EFF               	movlw	high STR_15
 10023  002A62  6E0E               	movwf	i2printf@f+1,c
 10024  002A64  ECC0  F004         	call	i2_printf	;wreg free
 10025  002A68  0012               	return		;funcret
 10026  002A6A                     __end_ofi2_change_state_to_menu_start:
 10027                           	opt stack 0
 10028                           pclatu	equ	0xFFB
 10029                           pclath	equ	0xFFA
 10030                           tblptru	equ	0xFF8
 10031                           tblptrh	equ	0xFF7
 10032                           tblptrl	equ	0xFF6
 10033                           tablat	equ	0xFF5
 10034                           prodh	equ	0xFF4
 10035                           prodl	equ	0xFF3
 10036                           intcon	equ	0xFF2
 10037                           intcon2	equ	0xFF1
 10038                           intcon3	equ	0xFF0
 10039                           indf0	equ	0xFEF
 10040                           postinc0	equ	0xFEE
 10041                           fsr0h	equ	0xFEA
 10042                           fsr0l	equ	0xFE9
 10043                           wreg	equ	0xFE8
 10044                           postdec1	equ	0xFE5
 10045                           fsr1h	equ	0xFE2
 10046                           fsr1l	equ	0xFE1
 10047                           indf2	equ	0xFDF
 10048                           postinc2	equ	0xFDE
 10049                           postdec2	equ	0xFDD
 10050                           fsr2h	equ	0xFDA
 10051                           fsr2l	equ	0xFD9
 10052                           status	equ	0xFD8
 10053                           
 10054 ;; *************** function i2_printRTC *****************
 10055 ;; Defined at:
 10056 ;;		line 62 in file "RTC.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;		None
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;  printRTC       14   44[COMRAM] int [7]
 10061 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 10062 ;;  printRTC        2   64[COMRAM] int 
 10063 ;;  printRTC        2   58[COMRAM] int 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  1    wreg      void 
 10066 ;; Registers used:
 10067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;Total ram usage:       25 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    3
 10080 ;; This function calls:
 10081 ;;		i2_getRTC
 10082 ;;		i2_lcdInst
 10083 ;;		i2_printf
 10084 ;;		i2_strcpy
 10085 ;; This function is called by:
 10086 ;;		i2_change_state_to_menu_start
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           	psect	text45
 10091  001250                     __ptext45:
 10092                           	opt stack 0
 10093  001250                     i2_printRTC:
 10094                           	opt stack 18
 10095                           
 10096                           ;RTC.c: 63: getRTC();
 10097                           
 10098                           ;incstack = 0
 10099  001250  EC5B  F011         	call	i2_getRTC	;wreg free
 10100                           
 10101                           ;RTC.c: 64: char month[] = "MMM";
 10102  001254  C10E  F03D         	movff	printRTC@F3193,i2printRTC@month
 10103  001258  C10F  F03E         	movff	printRTC@F3193+1,i2printRTC@month+1
 10104  00125C  C110  F03F         	movff	printRTC@F3193+2,i2printRTC@month+2
 10105  001260  C111  F040         	movff	printRTC@F3193+3,i2printRTC@month+3
 10106                           
 10107                           ;RTC.c: 65: int INT_time[7];
 10108                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
 10109  001264  0E00               	movlw	0
 10110  001266  6E42               	movwf	i2printRTC@i+1,c
 10111  001268  0E00               	movlw	0
 10112  00126A  6E41               	movwf	i2printRTC@i,c
 10113  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
 10114  00126E  D006               	goto	i2l4832
 10115  001270  5042               	movf	i2printRTC@i+1,w,c
 10116  001272  E135               	bnz	i2l983
 10117  001274  0E07               	movlw	7
 10118  001276  5C41               	subwf	i2printRTC@i,w,c
 10119  001278  B0D8               	btfsc	status,0,c
 10120  00127A  D031               	goto	i2l983
 10121  00127C                     i2l4832:
 10122                           
 10123                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10124  00127C  0EDC               	movlw	low _time
 10125  00127E  2441               	addwf	i2printRTC@i,w,c
 10126  001280  6ED9               	movwf	fsr2l,c
 10127  001282  0E00               	movlw	high _time
 10128  001284  2042               	addwfc	i2printRTC@i+1,w,c
 10129  001286  6EDA               	movwf	fsr2h,c
 10130  001288  50DF               	movf	indf2,w,c
 10131  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
 10132  00128C  3A2A               	swapf	??i2_printRTC,f,c
 10133  00128E  0E0F               	movlw	15
 10134  001290  162A               	andwf	??i2_printRTC,f,c
 10135  001292  0E0F               	movlw	15
 10136  001294  162A               	andwf	??i2_printRTC,f,c
 10137  001296  502A               	movf	??i2_printRTC,w,c
 10138  001298  0D0A               	mullw	10
 10139  00129A  0EDC               	movlw	low _time
 10140  00129C  2441               	addwf	i2printRTC@i,w,c
 10141  00129E  6ED9               	movwf	fsr2l,c
 10142  0012A0  0E00               	movlw	high _time
 10143  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
 10144  0012A4  6EDA               	movwf	fsr2h,c
 10145  0012A6  50DF               	movf	indf2,w,c
 10146  0012A8  0B0F               	andlw	15
 10147  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10148  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10149  0012AE  50F3               	movf	prodl,w,c
 10150  0012B0  262B               	addwf	??i2_printRTC+1,f,c
 10151  0012B2  50F4               	movf	prodh,w,c
 10152  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
 10153  0012B6  90D8               	bcf	status,0,c
 10154  0012B8  3441               	rlcf	i2printRTC@i,w,c
 10155  0012BA  6ED9               	movwf	fsr2l,c
 10156  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
 10157  0012BE  6EDA               	movwf	fsr2h,c
 10158  0012C0  0E2D               	movlw	low i2printRTC@INT_time
 10159  0012C2  26D9               	addwf	fsr2l,f,c
 10160  0012C4  0E00               	movlw	high i2printRTC@INT_time
 10161  0012C6  22DA               	addwfc	fsr2h,f,c
 10162  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10163  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10164  0012D0  4A41               	infsnz	i2printRTC@i,f,c
 10165  0012D2  2A42               	incf	i2printRTC@i+1,f,c
 10166  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
 10167  0012D6  D7D2               	goto	i2l4832
 10168  0012D8  5042               	movf	i2printRTC@i+1,w,c
 10169  0012DA  E101               	bnz	i2u332_40
 10170  0012DC  D7CB               	goto	L5
 10171  0012DE                     i2u332_40:
 10172  0012DE                     i2l983:
 10173                           
 10174                           ;RTC.c: 68: }
 10175                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10176  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10177  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10178                           
 10179                           ;RTC.c: 70: switch(RTC_month){
 10180  0012E6  D084               	goto	i2l4864
 10181  0012E8                     i2l4838:
 10182                           
 10183                           ;RTC.c: 72: strcpy(month, "Jan");
 10184  0012E8  0E3D               	movlw	low i2printRTC@month
 10185  0012EA  6E01               	movwf	i2strcpy@to,c
 10186  0012EC  0E00               	movlw	high i2printRTC@month
 10187  0012EE  6E02               	movwf	i2strcpy@to+1,c
 10188  0012F0  0EDB               	movlw	low STR_36
 10189  0012F2  6E03               	movwf	i2strcpy@from,c
 10190  0012F4  0EFF               	movlw	high STR_36
 10191  0012F6  6E04               	movwf	i2strcpy@from+1,c
 10192  0012F8  ECC1  F013         	call	i2_strcpy	;wreg free
 10193                           
 10194                           ;RTC.c: 73: break;
 10195  0012FC  D0A6               	goto	i2l4866
 10196  0012FE                     i2l4840:
 10197                           
 10198                           ;RTC.c: 75: strcpy(month, "Feb");
 10199  0012FE  0E3D               	movlw	low i2printRTC@month
 10200  001300  6E01               	movwf	i2strcpy@to,c
 10201  001302  0E00               	movlw	high i2printRTC@month
 10202  001304  6E02               	movwf	i2strcpy@to+1,c
 10203  001306  0ECB               	movlw	low STR_37
 10204  001308  6E03               	movwf	i2strcpy@from,c
 10205  00130A  0EFF               	movlw	high STR_37
 10206  00130C  6E04               	movwf	i2strcpy@from+1,c
 10207  00130E  ECC1  F013         	call	i2_strcpy	;wreg free
 10208                           
 10209                           ;RTC.c: 76: break;
 10210  001312  D09B               	goto	i2l4866
 10211  001314                     i2l4842:
 10212                           
 10213                           ;RTC.c: 78: strcpy(month, "Mar");
 10214  001314  0E3D               	movlw	low i2printRTC@month
 10215  001316  6E01               	movwf	i2strcpy@to,c
 10216  001318  0E00               	movlw	high i2printRTC@month
 10217  00131A  6E02               	movwf	i2strcpy@to+1,c
 10218  00131C  0EE7               	movlw	low STR_38
 10219  00131E  6E03               	movwf	i2strcpy@from,c
 10220  001320  0EFF               	movlw	high STR_38
 10221  001322  6E04               	movwf	i2strcpy@from+1,c
 10222  001324  ECC1  F013         	call	i2_strcpy	;wreg free
 10223                           
 10224                           ;RTC.c: 79: break;
 10225  001328  D090               	goto	i2l4866
 10226  00132A                     i2l4844:
 10227                           
 10228                           ;RTC.c: 81: strcpy(month, "Apr");
 10229  00132A  0E3D               	movlw	low i2printRTC@month
 10230  00132C  6E01               	movwf	i2strcpy@to,c
 10231  00132E  0E00               	movlw	high i2printRTC@month
 10232  001330  6E02               	movwf	i2strcpy@to+1,c
 10233  001332  0EEB               	movlw	low STR_39
 10234  001334  6E03               	movwf	i2strcpy@from,c
 10235  001336  0EFF               	movlw	high STR_39
 10236  001338  6E04               	movwf	i2strcpy@from+1,c
 10237  00133A  ECC1  F013         	call	i2_strcpy	;wreg free
 10238                           
 10239                           ;RTC.c: 82: break;
 10240  00133E  D085               	goto	i2l4866
 10241  001340                     i2l4846:
 10242                           
 10243                           ;RTC.c: 84: strcpy(month, "May");
 10244  001340  0E3D               	movlw	low i2printRTC@month
 10245  001342  6E01               	movwf	i2strcpy@to,c
 10246  001344  0E00               	movlw	high i2printRTC@month
 10247  001346  6E02               	movwf	i2strcpy@to+1,c
 10248  001348  0EF7               	movlw	low STR_40
 10249  00134A  6E03               	movwf	i2strcpy@from,c
 10250  00134C  0EFF               	movlw	high STR_40
 10251  00134E  6E04               	movwf	i2strcpy@from+1,c
 10252  001350  ECC1  F013         	call	i2_strcpy	;wreg free
 10253                           
 10254                           ;RTC.c: 85: break;
 10255  001354  D07A               	goto	i2l4866
 10256  001356                     i2l4848:
 10257                           
 10258                           ;RTC.c: 87: strcpy(month, "Jun");
 10259  001356  0E3D               	movlw	low i2printRTC@month
 10260  001358  6E01               	movwf	i2strcpy@to,c
 10261  00135A  0E00               	movlw	high i2printRTC@month
 10262  00135C  6E02               	movwf	i2strcpy@to+1,c
 10263  00135E  0EDF               	movlw	low STR_41
 10264  001360  6E03               	movwf	i2strcpy@from,c
 10265  001362  0EFF               	movlw	high STR_41
 10266  001364  6E04               	movwf	i2strcpy@from+1,c
 10267  001366  ECC1  F013         	call	i2_strcpy	;wreg free
 10268                           
 10269                           ;RTC.c: 88: break;
 10270  00136A  D06F               	goto	i2l4866
 10271  00136C                     i2l4850:
 10272                           
 10273                           ;RTC.c: 90: strcpy(month, "Jul");
 10274  00136C  0E3D               	movlw	low i2printRTC@month
 10275  00136E  6E01               	movwf	i2strcpy@to,c
 10276  001370  0E00               	movlw	high i2printRTC@month
 10277  001372  6E02               	movwf	i2strcpy@to+1,c
 10278  001374  0ED7               	movlw	low STR_42
 10279  001376  6E03               	movwf	i2strcpy@from,c
 10280  001378  0EFF               	movlw	high STR_42
 10281  00137A  6E04               	movwf	i2strcpy@from+1,c
 10282  00137C  ECC1  F013         	call	i2_strcpy	;wreg free
 10283                           
 10284                           ;RTC.c: 91: break;
 10285  001380  D064               	goto	i2l4866
 10286  001382                     i2l4852:
 10287                           
 10288                           ;RTC.c: 93: strcpy(month, "Aug");
 10289  001382  0E3D               	movlw	low i2printRTC@month
 10290  001384  6E01               	movwf	i2strcpy@to,c
 10291  001386  0E00               	movlw	high i2printRTC@month
 10292  001388  6E02               	movwf	i2strcpy@to+1,c
 10293  00138A  0ED3               	movlw	low STR_43
 10294  00138C  6E03               	movwf	i2strcpy@from,c
 10295  00138E  0EFF               	movlw	high STR_43
 10296  001390  6E04               	movwf	i2strcpy@from+1,c
 10297  001392  ECC1  F013         	call	i2_strcpy	;wreg free
 10298                           
 10299                           ;RTC.c: 94: break;
 10300  001396  D059               	goto	i2l4866
 10301  001398                     i2l4854:
 10302                           
 10303                           ;RTC.c: 96: strcpy(month, "Sep");
 10304  001398  0E3D               	movlw	low i2printRTC@month
 10305  00139A  6E01               	movwf	i2strcpy@to,c
 10306  00139C  0E00               	movlw	high i2printRTC@month
 10307  00139E  6E02               	movwf	i2strcpy@to+1,c
 10308  0013A0  0EE3               	movlw	low STR_44
 10309  0013A2  6E03               	movwf	i2strcpy@from,c
 10310  0013A4  0EFF               	movlw	high STR_44
 10311  0013A6  6E04               	movwf	i2strcpy@from+1,c
 10312  0013A8  ECC1  F013         	call	i2_strcpy	;wreg free
 10313                           
 10314                           ;RTC.c: 97: break;
 10315  0013AC  D04E               	goto	i2l4866
 10316  0013AE                     i2l4856:
 10317                           
 10318                           ;RTC.c: 99: strcpy(month, "Oct");
 10319  0013AE  0E3D               	movlw	low i2printRTC@month
 10320  0013B0  6E01               	movwf	i2strcpy@to,c
 10321  0013B2  0E00               	movlw	high i2printRTC@month
 10322  0013B4  6E02               	movwf	i2strcpy@to+1,c
 10323  0013B6  0EEF               	movlw	low STR_45
 10324  0013B8  6E03               	movwf	i2strcpy@from,c
 10325  0013BA  0EFF               	movlw	high STR_45
 10326  0013BC  6E04               	movwf	i2strcpy@from+1,c
 10327  0013BE  ECC1  F013         	call	i2_strcpy	;wreg free
 10328                           
 10329                           ;RTC.c: 100: break;
 10330  0013C2  D043               	goto	i2l4866
 10331  0013C4                     i2l4858:
 10332                           
 10333                           ;RTC.c: 102: strcpy(month, "Nov");
 10334  0013C4  0E3D               	movlw	low i2printRTC@month
 10335  0013C6  6E01               	movwf	i2strcpy@to,c
 10336  0013C8  0E00               	movlw	high i2printRTC@month
 10337  0013CA  6E02               	movwf	i2strcpy@to+1,c
 10338  0013CC  0EF3               	movlw	low STR_46
 10339  0013CE  6E03               	movwf	i2strcpy@from,c
 10340  0013D0  0EFF               	movlw	high STR_46
 10341  0013D2  6E04               	movwf	i2strcpy@from+1,c
 10342  0013D4  ECC1  F013         	call	i2_strcpy	;wreg free
 10343                           
 10344                           ;RTC.c: 103: break;
 10345  0013D8  D038               	goto	i2l4866
 10346  0013DA                     i2l4860:
 10347                           
 10348                           ;RTC.c: 105: strcpy(month, "Dec");
 10349  0013DA  0E3D               	movlw	low i2printRTC@month
 10350  0013DC  6E01               	movwf	i2strcpy@to,c
 10351  0013DE  0E00               	movlw	high i2printRTC@month
 10352  0013E0  6E02               	movwf	i2strcpy@to+1,c
 10353  0013E2  0ECF               	movlw	low STR_47
 10354  0013E4  6E03               	movwf	i2strcpy@from,c
 10355  0013E6  0EFF               	movlw	high STR_47
 10356  0013E8  6E04               	movwf	i2strcpy@from+1,c
 10357  0013EA  ECC1  F013         	call	i2_strcpy	;wreg free
 10358                           
 10359                           ;RTC.c: 107: }
 10360                           
 10361                           ;RTC.c: 106: break;
 10362  0013EE  D02D               	goto	i2l4866
 10363  0013F0                     i2l4864:
 10364  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10365  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10366                           
 10367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10368                           ; Switch size 1, requested type "space"
 10369                           ; Number of cases is 1, Range of values is 0 to 0
 10370                           ; switch strategies available:
 10371                           ; Name         Instructions Cycles
 10372                           ; simple_byte            4     3 (average)
 10373                           ;	Chosen strategy is simple_byte
 10374  0013F8  502B               	movf	??i2_printRTC+1,w,c
 10375  0013FA  0A00               	xorlw	0	; case 0
 10376  0013FC  A4D8               	btfss	status,2,c
 10377  0013FE  D025               	goto	i2l4866
 10378                           
 10379                           ; Switch size 1, requested type "space"
 10380                           ; Number of cases is 12, Range of values is 1 to 12
 10381                           ; switch strategies available:
 10382                           ; Name         Instructions Cycles
 10383                           ; simple_byte           37    19 (average)
 10384                           ;	Chosen strategy is simple_byte
 10385  001400  502A               	movf	??i2_printRTC,w,c
 10386  001402  0A01               	xorlw	1	; case 1
 10387  001404  B4D8               	btfsc	status,2,c
 10388  001406  D770               	goto	i2l4838
 10389  001408  0A03               	xorlw	3	; case 2
 10390  00140A  B4D8               	btfsc	status,2,c
 10391  00140C  D778               	goto	i2l4840
 10392  00140E  0A01               	xorlw	1	; case 3
 10393  001410  B4D8               	btfsc	status,2,c
 10394  001412  D780               	goto	i2l4842
 10395  001414  0A07               	xorlw	7	; case 4
 10396  001416  B4D8               	btfsc	status,2,c
 10397  001418  D788               	goto	i2l4844
 10398  00141A  0A01               	xorlw	1	; case 5
 10399  00141C  B4D8               	btfsc	status,2,c
 10400  00141E  D790               	goto	i2l4846
 10401  001420  0A03               	xorlw	3	; case 6
 10402  001422  B4D8               	btfsc	status,2,c
 10403  001424  D798               	goto	i2l4848
 10404  001426  0A01               	xorlw	1	; case 7
 10405  001428  B4D8               	btfsc	status,2,c
 10406  00142A  D7A0               	goto	i2l4850
 10407  00142C  0A0F               	xorlw	15	; case 8
 10408  00142E  B4D8               	btfsc	status,2,c
 10409  001430  D7A8               	goto	i2l4852
 10410  001432  0A01               	xorlw	1	; case 9
 10411  001434  B4D8               	btfsc	status,2,c
 10412  001436  D7B0               	goto	i2l4854
 10413  001438  0A03               	xorlw	3	; case 10
 10414  00143A  B4D8               	btfsc	status,2,c
 10415  00143C  D7B8               	goto	i2l4856
 10416  00143E  0A01               	xorlw	1	; case 11
 10417  001440  B4D8               	btfsc	status,2,c
 10418  001442  D7C0               	goto	i2l4858
 10419  001444  0A07               	xorlw	7	; case 12
 10420  001446  B4D8               	btfsc	status,2,c
 10421  001448  D7C8               	goto	i2l4860
 10422  00144A                     i2l4866:
 10423                           
 10424                           ;RTC.c: 108: lcdInst(0b10000000);;
 10425  00144A  0E80               	movlw	128
 10426  00144C  ECE0  F015         	call	i2_lcdInst
 10427                           
 10428                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10429  001450  0ED0               	movlw	low STR_48
 10430  001452  6E0D               	movwf	i2printf@f,c
 10431  001454  0EFD               	movlw	high STR_48
 10432  001456  6E0E               	movwf	i2printf@f+1,c
 10433  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10434  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10435  001460  0E3D               	movlw	low i2printRTC@month
 10436  001462  6E11               	movwf	?i2_printf+4,c
 10437  001464  0E00               	movlw	high i2printRTC@month
 10438  001466  6E12               	movwf	?i2_printf+5,c
 10439  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10440  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10441  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10442  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10443  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10444  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10445  001480  ECC0  F004         	call	i2_printf	;wreg free
 10446  001484  0012               	return		;funcret
 10447  001486                     __end_ofi2_printRTC:
 10448                           	opt stack 0
 10449                           pclatu	equ	0xFFB
 10450                           pclath	equ	0xFFA
 10451                           tblptru	equ	0xFF8
 10452                           tblptrh	equ	0xFF7
 10453                           tblptrl	equ	0xFF6
 10454                           tablat	equ	0xFF5
 10455                           prodh	equ	0xFF4
 10456                           prodl	equ	0xFF3
 10457                           intcon	equ	0xFF2
 10458                           intcon2	equ	0xFF1
 10459                           intcon3	equ	0xFF0
 10460                           indf0	equ	0xFEF
 10461                           postinc0	equ	0xFEE
 10462                           fsr0h	equ	0xFEA
 10463                           fsr0l	equ	0xFE9
 10464                           wreg	equ	0xFE8
 10465                           postdec1	equ	0xFE5
 10466                           fsr1h	equ	0xFE2
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           fsr2h	equ	0xFDA
 10472                           fsr2l	equ	0xFD9
 10473                           status	equ	0xFD8
 10474                           
 10475 ;; *************** function i2_strcpy *****************
 10476 ;; Defined at:
 10477 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;  to              2    0[COMRAM] PTR unsigned char 
 10480 ;;		 -> printRTC@month(4), 
 10481 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10482 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10483 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10484 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10487 ;;		 -> printRTC@month(4), 
 10488 ;; Return value:  Size  Location     Type
 10489 ;;                  2    0[COMRAM] PTR unsigned char 
 10490 ;; Registers used:
 10491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10492 ;; Tracked objects:
 10493 ;;		On entry : 0/0
 10494 ;;		On exit  : 0/0
 10495 ;;		Unchanged: 0/0
 10496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;Total ram usage:        6 bytes
 10502 ;; Hardware stack levels used:    1
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		i2_printRTC
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text46
 10511  002782                     __ptext46:
 10512                           	opt stack 0
 10513  002782                     i2_strcpy:
 10514                           	opt stack 20
 10515                           
 10516                           ;incstack = 0
 10517  002782  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10518  002786  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10519  00278A  D004               	goto	i2l4626
 10520  00278C                     i2l4624:
 10521  00278C  4A05               	infsnz	i2strcpy@cp,f,c
 10522  00278E  2A06               	incf	i2strcpy@cp+1,f,c
 10523  002790  4A03               	infsnz	i2strcpy@from,f,c
 10524  002792  2A04               	incf	i2strcpy@from+1,f,c
 10525  002794                     i2l4626:
 10526  002794  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10527  002798  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10528  00279C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10529  00279C  6AF8               	clrf	tblptru,c
 10530  00279E                     	endif
 10531  00279E                     	if	0	;tblptru may be non-zero
 10532  00279E                     	endif
 10533  00279E  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10534  0027A2  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10535  0027A6  0008               	tblrd		*
 10536  0027A8  CFF5 FFDF          	movff	tablat,indf2
 10537  0027AC  50DF               	movf	indf2,w,c
 10538  0027AE  B4D8               	btfsc	status,2,c
 10539  0027B0  0012               	return	
 10540  0027B2  D7EC               	goto	i2l4624
 10541  0027B4                     __end_ofi2_strcpy:
 10542                           	opt stack 0
 10543                           pclatu	equ	0xFFB
 10544                           pclath	equ	0xFFA
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           intcon2	equ	0xFF1
 10553                           intcon3	equ	0xFF0
 10554                           indf0	equ	0xFEF
 10555                           postinc0	equ	0xFEE
 10556                           fsr0h	equ	0xFEA
 10557                           fsr0l	equ	0xFE9
 10558                           wreg	equ	0xFE8
 10559                           postdec1	equ	0xFE5
 10560                           fsr1h	equ	0xFE2
 10561                           fsr1l	equ	0xFE1
 10562                           indf2	equ	0xFDF
 10563                           postinc2	equ	0xFDE
 10564                           postdec2	equ	0xFDD
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function _inputHandler *****************
 10570 ;; Defined at:
 10571 ;;		line 315 in file "UI.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  2   41[COMRAM] int 
 10578 ;; Registers used:
 10579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;Total ram usage:        4 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    4
 10592 ;; This function calls:
 10593 ;;		_change_state_to_logs_11
 10594 ;;		_change_state_to_logs_12
 10595 ;;		_change_state_to_logs_22
 10596 ;;		_change_state_to_logs_23
 10597 ;;		_change_state_to_logs_33
 10598 ;;		_change_state_to_logs_34
 10599 ;;		_change_state_to_menu_11
 10600 ;;		_change_state_to_menu_23
 10601 ;;		i2_change_state_to_menu_12
 10602 ;;		i2_change_state_to_menu_22
 10603 ;; This function is called by:
 10604 ;;		_updateMenu
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text47
 10609  001680                     __ptext47:
 10610                           	opt stack 0
 10611  001680                     _inputHandler:
 10612                           	opt stack 18
 10613                           
 10614                           ;UI.c: 320: if(firstboot){
 10615                           
 10616                           ;incstack = 0
 10617  001680  5073               	movf	_firstboot,w,c
 10618  001682  1074               	iorwf	_firstboot+1,w,c
 10619  001684  B4D8               	btfsc	status,2,c
 10620  001686  D00B               	goto	i2l4934
 10621                           
 10622                           ;UI.c: 321: change_state_to_menu_11();
 10623  001688  EC22  F014         	call	_change_state_to_menu_11	;wreg free
 10624                           
 10625                           ;UI.c: 322: firstboot = 0;
 10626  00168C  0E00               	movlw	0
 10627  00168E  6E74               	movwf	_firstboot+1,c
 10628  001690  0E00               	movlw	0
 10629  001692  6E73               	movwf	_firstboot,c
 10630                           
 10631                           ;UI.c: 323: return 0;
 10632  001694  0E00               	movlw	0
 10633  001696  6E2B               	movwf	?_inputHandler+1,c
 10634  001698  0E00               	movlw	0
 10635  00169A  6E2A               	movwf	?_inputHandler,c
 10636  00169C  0012               	return	
 10637  00169E                     i2l4934:
 10638                           
 10639                           ;UI.c: 324: }
 10640                           ;UI.c: 325: if (logstate){
 10641  00169E  0100               	movlb	0	; () banked
 10642  0016A0  51F5               	movf	_logstate& (0+255),w,b
 10643  0016A2  0100               	movlb	0	; () banked
 10644  0016A4  11F6               	iorwf	(_logstate+1)& (0+255),w,b
 10645  0016A6  B4D8               	btfsc	status,2,c
 10646  0016A8  D0C7               	goto	i2l5052
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10650  0016AA  0E43               	movlw	67
 10651  0016AC  1879               	xorwf	_input,w,c
 10652  0016AE  A4D8               	btfss	status,2,c
 10653  0016B0  D012               	goto	i2l4952
 10654                           
 10655                           ; BSR set to: 0
 10656  0016B2  B281               	btfsc	3969,1,c	;volatile
 10657  0016B4  D009               	goto	i2l4944
 10658  0016B6  D00F               	goto	i2l4952
 10659  0016B8                     i2l4942:
 10660                           
 10661                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10662  0016B8  0E68               	movlw	104
 10663  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10664  0016BC  0EE4               	movlw	228
 10665  0016BE                     i2u509_47:
 10666  0016BE  2EE8               	decfsz	wreg,f,c
 10667  0016C0  D7FE               	bra	i2u509_47
 10668  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10669  0016C4  D7FC               	bra	i2u509_47
 10670  0016C6  D000               	nop2	
 10671  0016C8                     i2l4944:
 10672  0016C8  B281               	btfsc	3969,1,c	;volatile
 10673  0016CA  D7F6               	goto	i2l4942
 10674  0016CC                     i2l4946:
 10675                           
 10676                           ;UI.c: 330: }
 10677                           ;UI.c: 331: return 0;
 10678  0016CC  0E00               	movlw	0
 10679  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10680  0016D0  0E00               	movlw	0
 10681  0016D2  6E2A               	movwf	?_inputHandler,c
 10682  0016D4  0012               	return	
 10683  0016D6                     i2l4952:
 10684                           
 10685                           ;UI.c: 333: else if (input == 'D'){
 10686  0016D6  0E44               	movlw	68
 10687  0016D8  1879               	xorwf	_input,w,c
 10688  0016DA  A4D8               	btfss	status,2,c
 10689  0016DC  D7F7               	goto	i2l4946
 10690                           
 10691                           ;UI.c: 335: logstate = 0;
 10692  0016DE  0E00               	movlw	0
 10693  0016E0  0100               	movlb	0	; () banked
 10694  0016E2  6FF6               	movwf	(_logstate+1)& (0+255),b
 10695  0016E4  0E00               	movlw	0
 10696  0016E6  6FF5               	movwf	_logstate& (0+255),b
 10697                           
 10698                           ;UI.c: 336: switch(cur_state){
 10699  0016E8  D012               	goto	i2l4970
 10700  0016EA                     i2l4956:
 10701                           
 10702                           ;UI.c: 338: change_state_to_logs_11();
 10703  0016EA  EC9A  F014         	call	_change_state_to_logs_11	;wreg free
 10704                           
 10705                           ;UI.c: 339: break;
 10706  0016EE  D7EE               	goto	i2l4946
 10707  0016F0                     i2l4958:
 10708                           
 10709                           ;UI.c: 341: change_state_to_logs_12();
 10710  0016F0  EC82  F014         	call	_change_state_to_logs_12	;wreg free
 10711                           
 10712                           ;UI.c: 342: break;
 10713  0016F4  D7EB               	goto	i2l4946
 10714  0016F6                     i2l4960:
 10715                           
 10716                           ;UI.c: 344: change_state_to_logs_22();
 10717  0016F6  EC6A  F014         	call	_change_state_to_logs_22	;wreg free
 10718                           
 10719                           ;UI.c: 345: break;
 10720  0016FA  D7E8               	goto	i2l4946
 10721  0016FC                     i2l4962:
 10722                           
 10723                           ;UI.c: 347: change_state_to_logs_23();
 10724  0016FC  ECC9  F014         	call	_change_state_to_logs_23	;wreg free
 10725                           
 10726                           ;UI.c: 348: break;
 10727  001700  D7E5               	goto	i2l4946
 10728  001702                     i2l4964:
 10729                           
 10730                           ;UI.c: 350: change_state_to_logs_33();
 10731  001702  EC52  F014         	call	_change_state_to_logs_33	;wreg free
 10732                           
 10733                           ;UI.c: 351: break;
 10734  001706  D7E2               	goto	i2l4946
 10735  001708                     i2l4966:
 10736                           
 10737                           ;UI.c: 353: change_state_to_logs_34();
 10738  001708  EC3A  F014         	call	_change_state_to_logs_34	;wreg free
 10739                           
 10740                           ;UI.c: 355: }
 10741                           
 10742                           ;UI.c: 354: break;
 10743  00170C  D7DF               	goto	i2l4946
 10744  00170E                     i2l4970:
 10745  00170E  C0E9  F02C         	movff	_cur_state,??_inputHandler
 10746  001712  C0EA  F02D         	movff	_cur_state+1,??_inputHandler+1
 10747                           
 10748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10749                           ; Switch size 1, requested type "space"
 10750                           ; Number of cases is 2, Range of values is 3 to 4
 10751                           ; switch strategies available:
 10752                           ; Name         Instructions Cycles
 10753                           ; simple_byte            7     4 (average)
 10754                           ;	Chosen strategy is simple_byte
 10755  001716  502D               	movf	??_inputHandler+1,w,c
 10756  001718  0A03               	xorlw	3	; case 3
 10757  00171A  B4D8               	btfsc	status,2,c
 10758  00171C  D004               	goto	i2l6170
 10759  00171E  0A07               	xorlw	7	; case 4
 10760  001720  B4D8               	btfsc	status,2,c
 10761  001722  D00F               	goto	i2l6172
 10762  001724  D7D3               	goto	i2l4946
 10763  001726                     i2l6170:
 10764                           
 10765                           ; Switch size 1, requested type "space"
 10766                           ; Number of cases is 4, Range of values is 243 to 255
 10767                           ; switch strategies available:
 10768                           ; Name         Instructions Cycles
 10769                           ; simple_byte           13     7 (average)
 10770                           ;	Chosen strategy is simple_byte
 10771  001726  502C               	movf	??_inputHandler,w,c
 10772  001728  0AF3               	xorlw	243	; case 243
 10773  00172A  B4D8               	btfsc	status,2,c
 10774  00172C  D7DE               	goto	i2l4956
 10775  00172E  0A07               	xorlw	7	; case 244
 10776  001730  B4D8               	btfsc	status,2,c
 10777  001732  D7DE               	goto	i2l4958
 10778  001734  0A0A               	xorlw	10	; case 254
 10779  001736  B4D8               	btfsc	status,2,c
 10780  001738  D7DE               	goto	i2l4960
 10781  00173A  0A01               	xorlw	1	; case 255
 10782  00173C  B4D8               	btfsc	status,2,c
 10783  00173E  D7DE               	goto	i2l4962
 10784  001740  D7C5               	goto	i2l4946
 10785  001742                     i2l6172:
 10786                           
 10787                           ; Switch size 1, requested type "space"
 10788                           ; Number of cases is 2, Range of values is 9 to 10
 10789                           ; switch strategies available:
 10790                           ; Name         Instructions Cycles
 10791                           ; simple_byte            7     4 (average)
 10792                           ;	Chosen strategy is simple_byte
 10793  001742  502C               	movf	??_inputHandler,w,c
 10794  001744  0A09               	xorlw	9	; case 9
 10795  001746  B4D8               	btfsc	status,2,c
 10796  001748  D7DC               	goto	i2l4964
 10797  00174A  0A03               	xorlw	3	; case 10
 10798  00174C  B4D8               	btfsc	status,2,c
 10799  00174E  D7DC               	goto	i2l4966
 10800  001750  D7BD               	goto	i2l4946
 10801  001752                     i2l4982:
 10802                           
 10803                           ;UI.c: 365: if(cur_state == 11){
 10804  001752  0E0B               	movlw	11
 10805  001754  0100               	movlb	0	; () banked
 10806  001756  19E9               	xorwf	_cur_state& (0+255),w,b
 10807  001758  0100               	movlb	0	; () banked
 10808  00175A  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
 10809  00175C  A4D8               	btfss	status,2,c
 10810  00175E  D005               	goto	i2l4990
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;UI.c: 366: return 0;
 10814  001760  0E00               	movlw	0
 10815  001762  6E2B               	movwf	?_inputHandler+1,c
 10816  001764  0E00               	movlw	0
 10817  001766  6E2A               	movwf	?_inputHandler,c
 10818                           
 10819                           ; BSR set to: 0
 10820  001768  0012               	return	
 10821  00176A                     i2l4990:
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;UI.c: 368: else{
 10825                           ;UI.c: 369: change_state_to_menu_11();
 10826  00176A  EC22  F014         	call	_change_state_to_menu_11	;wreg free
 10827                           
 10828                           ;UI.c: 370: }
 10829                           ;UI.c: 371: return 0;
 10830  00176E  0E00               	movlw	0
 10831  001770  6E2B               	movwf	?_inputHandler+1,c
 10832  001772  0E00               	movlw	0
 10833  001774  6E2A               	movwf	?_inputHandler,c
 10834  001776  0012               	return	
 10835  001778                     i2l4996:
 10836                           
 10837                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10838  001778  0E16               	movlw	22
 10839  00177A  0100               	movlb	0	; () banked
 10840  00177C  19E9               	xorwf	_cur_state& (0+255),w,b
 10841  00177E  0100               	movlb	0	; () banked
 10842  001780  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
 10843  001782  B4D8               	btfsc	status,2,c
 10844  001784  D007               	goto	i2l5000
 10845                           
 10846                           ; BSR set to: 0
 10847  001786  0E0C               	movlw	12
 10848  001788  0100               	movlb	0	; () banked
 10849  00178A  19E9               	xorwf	_cur_state& (0+255),w,b
 10850  00178C  0100               	movlb	0	; () banked
 10851  00178E  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
 10852  001790  A4D8               	btfss	status,2,c
 10853  001792  D005               	goto	i2l5006
 10854  001794                     i2l5000:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;UI.c: 374: return 0;
 10858  001794  0E00               	movlw	0
 10859  001796  6E2B               	movwf	?_inputHandler+1,c
 10860  001798  0E00               	movlw	0
 10861  00179A  6E2A               	movwf	?_inputHandler,c
 10862                           
 10863                           ; BSR set to: 0
 10864  00179C  0012               	return	
 10865  00179E                     i2l5006:
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;UI.c: 376: else if(cur_state == 23){
 10869  00179E  0E17               	movlw	23
 10870  0017A0  0100               	movlb	0	; () banked
 10871  0017A2  19E9               	xorwf	_cur_state& (0+255),w,b
 10872  0017A4  0100               	movlb	0	; () banked
 10873  0017A6  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
 10874  0017A8  A4D8               	btfss	status,2,c
 10875  0017AA  D003               	goto	i2l5010
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;UI.c: 377: change_state_to_menu_22();
 10879  0017AC  ECDA  F013         	call	i2_change_state_to_menu_22	;wreg free
 10880                           
 10881                           ;UI.c: 378: }
 10882  0017B0  D002               	goto	i2l5012
 10883  0017B2                     i2l5010:
 10884                           
 10885                           ;UI.c: 379: else{
 10886                           ;UI.c: 380: change_state_to_menu_12();
 10887  0017B2  ECF2  F013         	call	i2_change_state_to_menu_12	;wreg free
 10888  0017B6                     i2l5012:
 10889                           
 10890                           ;UI.c: 381: }
 10891                           ;UI.c: 382: return 0;
 10892  0017B6  0E00               	movlw	0
 10893  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10894  0017BA  0E00               	movlw	0
 10895  0017BC  6E2A               	movwf	?_inputHandler,c
 10896  0017BE  0012               	return	
 10897  0017C0                     i2l5016:
 10898                           
 10899                           ;UI.c: 384: if(cur_state == 23){
 10900  0017C0  0E17               	movlw	23
 10901  0017C2  0100               	movlb	0	; () banked
 10902  0017C4  19E9               	xorwf	_cur_state& (0+255),w,b
 10903  0017C6  0100               	movlb	0	; () banked
 10904  0017C8  11EA               	iorwf	(_cur_state+1)& (0+255),w,b
 10905  0017CA  A4D8               	btfss	status,2,c
 10906  0017CC  D005               	goto	i2l5024
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;UI.c: 385: return 0;
 10910  0017CE  0E00               	movlw	0
 10911  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10912  0017D2  0E00               	movlw	0
 10913  0017D4  6E2A               	movwf	?_inputHandler,c
 10914                           
 10915                           ; BSR set to: 0
 10916  0017D6  0012               	return	
 10917  0017D8                     i2l5024:
 10918                           
 10919                           ; BSR set to: 0
 10920                           ;UI.c: 387: else{
 10921                           ;UI.c: 388: change_state_to_menu_23();
 10922  0017D8  EC0A  F014         	call	_change_state_to_menu_23	;wreg free
 10923                           
 10924                           ;UI.c: 389: }
 10925                           ;UI.c: 390: return 0;
 10926  0017DC  0E00               	movlw	0
 10927  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10928  0017E0  0E00               	movlw	0
 10929  0017E2  6E2A               	movwf	?_inputHandler,c
 10930  0017E4  0012               	return	
 10931  0017E6                     i2l5030:
 10932                           
 10933                           ;UI.c: 393: up = 1;
 10934  0017E6  0E00               	movlw	0
 10935  0017E8  6E76               	movwf	_up+1,c
 10936  0017EA  0E01               	movlw	1
 10937  0017EC  6E75               	movwf	_up,c
 10938                           
 10939                           ;UI.c: 394: return 1;
 10940  0017EE  0E00               	movlw	0
 10941  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10942  0017F2  0E01               	movlw	1
 10943  0017F4  6E2A               	movwf	?_inputHandler,c
 10944  0017F6  0012               	return	
 10945  0017F8                     i2l5034:
 10946                           
 10947                           ;UI.c: 396: down = 1;
 10948  0017F8  0E00               	movlw	0
 10949  0017FA  6E6E               	movwf	_down+1,c
 10950  0017FC  0E01               	movlw	1
 10951  0017FE  6E6D               	movwf	_down,c
 10952                           
 10953                           ;UI.c: 397: return 1;
 10954  001800  0E00               	movlw	0
 10955  001802  6E2B               	movwf	?_inputHandler+1,c
 10956  001804  0E01               	movlw	1
 10957  001806  6E2A               	movwf	?_inputHandler,c
 10958  001808  0012               	return	
 10959  00180A                     i2l5038:
 10960                           
 10961                           ;UI.c: 399: enter = 1;
 10962  00180A  0E00               	movlw	0
 10963  00180C  6E70               	movwf	_enter+1,c
 10964  00180E  0E01               	movlw	1
 10965  001810  6E6F               	movwf	_enter,c
 10966                           
 10967                           ;UI.c: 400: return 1;
 10968  001812  0E00               	movlw	0
 10969  001814  6E2B               	movwf	?_inputHandler+1,c
 10970  001816  0E01               	movlw	1
 10971  001818  6E2A               	movwf	?_inputHandler,c
 10972  00181A  0012               	return	
 10973  00181C                     i2l5042:
 10974                           
 10975                           ;UI.c: 402: back = 1;
 10976  00181C  0E00               	movlw	0
 10977  00181E  6E64               	movwf	_back+1,c
 10978  001820  0E01               	movlw	1
 10979  001822  6E63               	movwf	_back,c
 10980                           
 10981                           ;UI.c: 403: return 1;
 10982  001824  0E00               	movlw	0
 10983  001826  6E2B               	movwf	?_inputHandler+1,c
 10984  001828  0E01               	movlw	1
 10985  00182A  6E2A               	movwf	?_inputHandler,c
 10986  00182C  0012               	return	
 10987  00182E                     i2l5046:
 10988                           
 10989                           ;UI.c: 406: return 1;
 10990  00182E  0E00               	movlw	0
 10991  001830  6E2B               	movwf	?_inputHandler+1,c
 10992  001832  0E01               	movlw	1
 10993  001834  6E2A               	movwf	?_inputHandler,c
 10994                           
 10995                           ;UI.c: 407: }
 10996  001836  0012               	return	
 10997  001838                     i2l5052:
 10998  001838  5079               	movf	_input,w,c
 10999                           
 11000                           ; Switch size 1, requested type "space"
 11001                           ; Number of cases is 7, Range of values is 49 to 68
 11002                           ; switch strategies available:
 11003                           ; Name         Instructions Cycles
 11004                           ; simple_byte           22    12 (average)
 11005                           ;	Chosen strategy is simple_byte
 11006  00183A  0A31               	xorlw	49	; case 49
 11007  00183C  B4D8               	btfsc	status,2,c
 11008  00183E  D789               	goto	i2l4982
 11009  001840  0A03               	xorlw	3	; case 50
 11010  001842  B4D8               	btfsc	status,2,c
 11011  001844  D799               	goto	i2l4996
 11012  001846  0A01               	xorlw	1	; case 51
 11013  001848  B4D8               	btfsc	status,2,c
 11014  00184A  D7BA               	goto	i2l5016
 11015  00184C  0A72               	xorlw	114	; case 65
 11016  00184E  B4D8               	btfsc	status,2,c
 11017  001850  D7CA               	goto	i2l5030
 11018  001852  0A03               	xorlw	3	; case 66
 11019  001854  B4D8               	btfsc	status,2,c
 11020  001856  D7D0               	goto	i2l5034
 11021  001858  0A01               	xorlw	1	; case 67
 11022  00185A  B4D8               	btfsc	status,2,c
 11023  00185C  D7D6               	goto	i2l5038
 11024  00185E  0A07               	xorlw	7	; case 68
 11025  001860  B4D8               	btfsc	status,2,c
 11026  001862  D7DC               	goto	i2l5042
 11027  001864  D7E4               	goto	i2l5046
 11028  001866                     __end_of_inputHandler:
 11029                           	opt stack 0
 11030                           pclatu	equ	0xFFB
 11031                           pclath	equ	0xFFA
 11032                           tblptru	equ	0xFF8
 11033                           tblptrh	equ	0xFF7
 11034                           tblptrl	equ	0xFF6
 11035                           tablat	equ	0xFF5
 11036                           prodh	equ	0xFF4
 11037                           prodl	equ	0xFF3
 11038                           intcon	equ	0xFF2
 11039                           intcon2	equ	0xFF1
 11040                           intcon3	equ	0xFF0
 11041                           indf0	equ	0xFEF
 11042                           postinc0	equ	0xFEE
 11043                           fsr0h	equ	0xFEA
 11044                           fsr0l	equ	0xFE9
 11045                           wreg	equ	0xFE8
 11046                           postdec1	equ	0xFE5
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function i2_change_state_to_menu_22 *****************
 11057 ;; Defined at:
 11058 ;;		line 440 in file "UI.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;		None
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;		None
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  1    wreg      void 
 11065 ;; Registers used:
 11066 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;Total ram usage:        0 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    3
 11079 ;; This function calls:
 11080 ;;		i2_lcdInst
 11081 ;;		i2_printf
 11082 ;; This function is called by:
 11083 ;;		_updateMenu
 11084 ;;		_inputHandler
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text48
 11089  0027B4                     __ptext48:
 11090                           	opt stack 0
 11091  0027B4                     i2_change_state_to_menu_22:
 11092                           	opt stack 19
 11093                           
 11094                           ;UI.c: 441: cur_state = 22;
 11095                           
 11096                           ;incstack = 0
 11097  0027B4  0E00               	movlw	0
 11098  0027B6  0100               	movlb	0	; () banked
 11099  0027B8  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11100  0027BA  0E16               	movlw	22
 11101  0027BC  6FE9               	movwf	_cur_state& (0+255),b
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;UI.c: 443: lcdInst(0b10000000);;
 11105  0027BE  0E80               	movlw	128
 11106  0027C0  ECE0  F015         	call	i2_lcdInst
 11107                           
 11108                           ;UI.c: 444: printf("2. SORT        <");
 11109  0027C4  0E64               	movlw	low STR_19
 11110  0027C6  6E0D               	movwf	i2printf@f,c
 11111  0027C8  0EFF               	movlw	high STR_19
 11112  0027CA  6E0E               	movwf	i2printf@f+1,c
 11113  0027CC  ECC0  F004         	call	i2_printf	;wreg free
 11114                           
 11115                           ;UI.c: 445: lcdInst(0b11000000);;
 11116  0027D0  0EC0               	movlw	192
 11117  0027D2  ECE0  F015         	call	i2_lcdInst
 11118                           
 11119                           ;UI.c: 446: printf("3. LOGS         ");
 11120  0027D6  0E65               	movlw	low STR_21
 11121  0027D8  6E0D               	movwf	i2printf@f,c
 11122  0027DA  0EFE               	movlw	high STR_21
 11123  0027DC  6E0E               	movwf	i2printf@f+1,c
 11124  0027DE  ECC0  F004         	call	i2_printf	;wreg free
 11125  0027E2  0012               	return		;funcret
 11126  0027E4                     __end_ofi2_change_state_to_menu_22:
 11127                           	opt stack 0
 11128                           pclatu	equ	0xFFB
 11129                           pclath	equ	0xFFA
 11130                           tblptru	equ	0xFF8
 11131                           tblptrh	equ	0xFF7
 11132                           tblptrl	equ	0xFF6
 11133                           tablat	equ	0xFF5
 11134                           prodh	equ	0xFF4
 11135                           prodl	equ	0xFF3
 11136                           intcon	equ	0xFF2
 11137                           intcon2	equ	0xFF1
 11138                           intcon3	equ	0xFF0
 11139                           indf0	equ	0xFEF
 11140                           postinc0	equ	0xFEE
 11141                           fsr0h	equ	0xFEA
 11142                           fsr0l	equ	0xFE9
 11143                           wreg	equ	0xFE8
 11144                           postdec1	equ	0xFE5
 11145                           fsr1h	equ	0xFE2
 11146                           fsr1l	equ	0xFE1
 11147                           indf2	equ	0xFDF
 11148                           postinc2	equ	0xFDE
 11149                           postdec2	equ	0xFDD
 11150                           fsr2h	equ	0xFDA
 11151                           fsr2l	equ	0xFD9
 11152                           status	equ	0xFD8
 11153                           
 11154 ;; *************** function i2_change_state_to_menu_12 *****************
 11155 ;; Defined at:
 11156 ;;		line 432 in file "UI.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      void 
 11163 ;; Registers used:
 11164 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    3
 11177 ;; This function calls:
 11178 ;;		i2_lcdInst
 11179 ;;		i2_printf
 11180 ;; This function is called by:
 11181 ;;		_updateMenu
 11182 ;;		_inputHandler
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           	psect	text49
 11187  0027E4                     __ptext49:
 11188                           	opt stack 0
 11189  0027E4                     i2_change_state_to_menu_12:
 11190                           	opt stack 19
 11191                           
 11192                           ;UI.c: 433: cur_state = 12;
 11193                           
 11194                           ;incstack = 0
 11195  0027E4  0E00               	movlw	0
 11196  0027E6  0100               	movlb	0	; () banked
 11197  0027E8  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11198  0027EA  0E0C               	movlw	12
 11199  0027EC  6FE9               	movwf	_cur_state& (0+255),b
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;UI.c: 435: lcdInst(0b10000000);;
 11203  0027EE  0E80               	movlw	128
 11204  0027F0  ECE0  F015         	call	i2_lcdInst
 11205                           
 11206                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11207  0027F4  0E87               	movlw	low STR_18
 11208  0027F6  6E0D               	movwf	i2printf@f,c
 11209  0027F8  0EFE               	movlw	high STR_18
 11210  0027FA  6E0E               	movwf	i2printf@f+1,c
 11211  0027FC  ECC0  F004         	call	i2_printf	;wreg free
 11212                           
 11213                           ;UI.c: 437: lcdInst(0b11000000);;
 11214  002800  0EC0               	movlw	192
 11215  002802  ECE0  F015         	call	i2_lcdInst
 11216                           
 11217                           ;UI.c: 438: printf("2. SORT        <");
 11218  002806  0E64               	movlw	low STR_19
 11219  002808  6E0D               	movwf	i2printf@f,c
 11220  00280A  0EFF               	movlw	high STR_19
 11221  00280C  6E0E               	movwf	i2printf@f+1,c
 11222  00280E  ECC0  F004         	call	i2_printf	;wreg free
 11223  002812  0012               	return		;funcret
 11224  002814                     __end_ofi2_change_state_to_menu_12:
 11225                           	opt stack 0
 11226                           pclatu	equ	0xFFB
 11227                           pclath	equ	0xFFA
 11228                           tblptru	equ	0xFF8
 11229                           tblptrh	equ	0xFF7
 11230                           tblptrl	equ	0xFF6
 11231                           tablat	equ	0xFF5
 11232                           prodh	equ	0xFF4
 11233                           prodl	equ	0xFF3
 11234                           intcon	equ	0xFF2
 11235                           intcon2	equ	0xFF1
 11236                           intcon3	equ	0xFF0
 11237                           indf0	equ	0xFEF
 11238                           postinc0	equ	0xFEE
 11239                           fsr0h	equ	0xFEA
 11240                           fsr0l	equ	0xFE9
 11241                           wreg	equ	0xFE8
 11242                           postdec1	equ	0xFE5
 11243                           fsr1h	equ	0xFE2
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           fsr2h	equ	0xFDA
 11249                           fsr2l	equ	0xFD9
 11250                           status	equ	0xFD8
 11251                           
 11252 ;; *************** function _change_state_to_menu_23 *****************
 11253 ;; Defined at:
 11254 ;;		line 448 in file "UI.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;		None
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      void 
 11261 ;; Registers used:
 11262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;Total ram usage:        0 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    3
 11275 ;; This function calls:
 11276 ;;		i2_lcdInst
 11277 ;;		i2_printf
 11278 ;; This function is called by:
 11279 ;;		_updateMenu
 11280 ;;		_inputHandler
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text50
 11285  002814                     __ptext50:
 11286                           	opt stack 0
 11287  002814                     _change_state_to_menu_23:
 11288                           	opt stack 18
 11289                           
 11290                           ;UI.c: 449: cur_state = 23;
 11291                           
 11292                           ;incstack = 0
 11293  002814  0E00               	movlw	0
 11294  002816  0100               	movlb	0	; () banked
 11295  002818  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11296  00281A  0E17               	movlw	23
 11297  00281C  6FE9               	movwf	_cur_state& (0+255),b
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;UI.c: 451: lcdInst(0b10000000);;
 11301  00281E  0E80               	movlw	128
 11302  002820  ECE0  F015         	call	i2_lcdInst
 11303                           
 11304                           ;UI.c: 452: printf("2. SORT         ");
 11305  002824  0E76               	movlw	low STR_17
 11306  002826  6E0D               	movwf	i2printf@f,c
 11307  002828  0EFE               	movlw	high STR_17
 11308  00282A  6E0E               	movwf	i2printf@f+1,c
 11309  00282C  ECC0  F004         	call	i2_printf	;wreg free
 11310                           
 11311                           ;UI.c: 453: lcdInst(0b11000000);;
 11312  002830  0EC0               	movlw	192
 11313  002832  ECE0  F015         	call	i2_lcdInst
 11314                           
 11315                           ;UI.c: 454: printf("3. LOGS        <");
 11316  002836  0E53               	movlw	low STR_23
 11317  002838  6E0D               	movwf	i2printf@f,c
 11318  00283A  0EFF               	movlw	high STR_23
 11319  00283C  6E0E               	movwf	i2printf@f+1,c
 11320  00283E  ECC0  F004         	call	i2_printf	;wreg free
 11321  002842  0012               	return		;funcret
 11322  002844                     __end_of_change_state_to_menu_23:
 11323                           	opt stack 0
 11324                           pclatu	equ	0xFFB
 11325                           pclath	equ	0xFFA
 11326                           tblptru	equ	0xFF8
 11327                           tblptrh	equ	0xFF7
 11328                           tblptrl	equ	0xFF6
 11329                           tablat	equ	0xFF5
 11330                           prodh	equ	0xFF4
 11331                           prodl	equ	0xFF3
 11332                           intcon	equ	0xFF2
 11333                           intcon2	equ	0xFF1
 11334                           intcon3	equ	0xFF0
 11335                           indf0	equ	0xFEF
 11336                           postinc0	equ	0xFEE
 11337                           fsr0h	equ	0xFEA
 11338                           fsr0l	equ	0xFE9
 11339                           wreg	equ	0xFE8
 11340                           postdec1	equ	0xFE5
 11341                           fsr1h	equ	0xFE2
 11342                           fsr1l	equ	0xFE1
 11343                           indf2	equ	0xFDF
 11344                           postinc2	equ	0xFDE
 11345                           postdec2	equ	0xFDD
 11346                           fsr2h	equ	0xFDA
 11347                           fsr2l	equ	0xFD9
 11348                           status	equ	0xFD8
 11349                           
 11350 ;; *************** function _change_state_to_menu_11 *****************
 11351 ;; Defined at:
 11352 ;;		line 424 in file "UI.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;		None
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;		None
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;Total ram usage:        0 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    3
 11373 ;; This function calls:
 11374 ;;		i2_lcdInst
 11375 ;;		i2_printf
 11376 ;; This function is called by:
 11377 ;;		_updateMenu
 11378 ;;		_inputHandler
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           	psect	text51
 11383  002844                     __ptext51:
 11384                           	opt stack 0
 11385  002844                     _change_state_to_menu_11:
 11386                           	opt stack 18
 11387                           
 11388                           ;UI.c: 425: cur_state = 11;
 11389                           
 11390                           ;incstack = 0
 11391  002844  0E00               	movlw	0
 11392  002846  0100               	movlb	0	; () banked
 11393  002848  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11394  00284A  0E0B               	movlw	11
 11395  00284C  6FE9               	movwf	_cur_state& (0+255),b
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;UI.c: 427: lcdInst(0b10000000);;
 11399  00284E  0E80               	movlw	128
 11400  002850  ECE0  F015         	call	i2_lcdInst
 11401                           
 11402                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11403  002854  0E75               	movlw	low STR_16
 11404  002856  6E0D               	movwf	i2printf@f,c
 11405  002858  0EFF               	movlw	high STR_16
 11406  00285A  6E0E               	movwf	i2printf@f+1,c
 11407  00285C  ECC0  F004         	call	i2_printf	;wreg free
 11408                           
 11409                           ;UI.c: 429: lcdInst(0b11000000);;
 11410  002860  0EC0               	movlw	192
 11411  002862  ECE0  F015         	call	i2_lcdInst
 11412                           
 11413                           ;UI.c: 430: printf("2. SORT         ");
 11414  002866  0E76               	movlw	low STR_17
 11415  002868  6E0D               	movwf	i2printf@f,c
 11416  00286A  0EFE               	movlw	high STR_17
 11417  00286C  6E0E               	movwf	i2printf@f+1,c
 11418  00286E  ECC0  F004         	call	i2_printf	;wreg free
 11419  002872  0012               	return		;funcret
 11420  002874                     __end_of_change_state_to_menu_11:
 11421                           	opt stack 0
 11422                           pclatu	equ	0xFFB
 11423                           pclath	equ	0xFFA
 11424                           tblptru	equ	0xFF8
 11425                           tblptrh	equ	0xFF7
 11426                           tblptrl	equ	0xFF6
 11427                           tablat	equ	0xFF5
 11428                           prodh	equ	0xFF4
 11429                           prodl	equ	0xFF3
 11430                           intcon	equ	0xFF2
 11431                           intcon2	equ	0xFF1
 11432                           intcon3	equ	0xFF0
 11433                           indf0	equ	0xFEF
 11434                           postinc0	equ	0xFEE
 11435                           fsr0h	equ	0xFEA
 11436                           fsr0l	equ	0xFE9
 11437                           wreg	equ	0xFE8
 11438                           postdec1	equ	0xFE5
 11439                           fsr1h	equ	0xFE2
 11440                           fsr1l	equ	0xFE1
 11441                           indf2	equ	0xFDF
 11442                           postinc2	equ	0xFDE
 11443                           postdec2	equ	0xFDD
 11444                           fsr2h	equ	0xFDA
 11445                           fsr2l	equ	0xFD9
 11446                           status	equ	0xFD8
 11447                           
 11448 ;; *************** function _change_state_to_logs_34 *****************
 11449 ;; Defined at:
 11450 ;;		line 491 in file "UI.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;Total ram usage:        0 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    3
 11471 ;; This function calls:
 11472 ;;		i2_lcdInst
 11473 ;;		i2_printf
 11474 ;; This function is called by:
 11475 ;;		_updateMenu
 11476 ;;		_inputHandler
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text52
 11481  002874                     __ptext52:
 11482                           	opt stack 0
 11483  002874                     _change_state_to_logs_34:
 11484                           	opt stack 18
 11485                           
 11486                           ;UI.c: 492: cur_state = 1034;
 11487                           
 11488                           ;incstack = 0
 11489  002874  0E04               	movlw	4
 11490  002876  0100               	movlb	0	; () banked
 11491  002878  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11492  00287A  0E0A               	movlw	10
 11493  00287C  6FE9               	movwf	_cur_state& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;UI.c: 493: lcdInst(0b10000000);;
 11497  00287E  0E80               	movlw	128
 11498  002880  ECE0  F015         	call	i2_lcdInst
 11499                           
 11500                           ;UI.c: 494: printf("LOG 3           ");
 11501  002884  0E43               	movlw	low STR_29
 11502  002886  6E0D               	movwf	i2printf@f,c
 11503  002888  0EFE               	movlw	high STR_29
 11504  00288A  6E0E               	movwf	i2printf@f+1,c
 11505  00288C  ECC0  F004         	call	i2_printf	;wreg free
 11506                           
 11507                           ;UI.c: 495: lcdInst(0b11000000);;
 11508  002890  0EC0               	movlw	192
 11509  002892  ECE0  F015         	call	i2_lcdInst
 11510                           
 11511                           ;UI.c: 496: printf("LOG 4          <");
 11512  002896  0E42               	movlw	low STR_35
 11513  002898  6E0D               	movwf	i2printf@f,c
 11514  00289A  0EFF               	movlw	high STR_35
 11515  00289C  6E0E               	movwf	i2printf@f+1,c
 11516  00289E  ECC0  F004         	call	i2_printf	;wreg free
 11517  0028A2  0012               	return		;funcret
 11518  0028A4                     __end_of_change_state_to_logs_34:
 11519                           	opt stack 0
 11520                           pclatu	equ	0xFFB
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           intcon2	equ	0xFF1
 11530                           intcon3	equ	0xFF0
 11531                           indf0	equ	0xFEF
 11532                           postinc0	equ	0xFEE
 11533                           fsr0h	equ	0xFEA
 11534                           fsr0l	equ	0xFE9
 11535                           wreg	equ	0xFE8
 11536                           postdec1	equ	0xFE5
 11537                           fsr1h	equ	0xFE2
 11538                           fsr1l	equ	0xFE1
 11539                           indf2	equ	0xFDF
 11540                           postinc2	equ	0xFDE
 11541                           postdec2	equ	0xFDD
 11542                           fsr2h	equ	0xFDA
 11543                           fsr2l	equ	0xFD9
 11544                           status	equ	0xFD8
 11545                           
 11546 ;; *************** function _change_state_to_logs_33 *****************
 11547 ;; Defined at:
 11548 ;;		line 484 in file "UI.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;		None
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;		None
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      void 
 11555 ;; Registers used:
 11556 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;Total ram usage:        0 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:    3
 11569 ;; This function calls:
 11570 ;;		i2_lcdInst
 11571 ;;		i2_printf
 11572 ;; This function is called by:
 11573 ;;		_updateMenu
 11574 ;;		_inputHandler
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text53
 11579  0028A4                     __ptext53:
 11580                           	opt stack 0
 11581  0028A4                     _change_state_to_logs_33:
 11582                           	opt stack 18
 11583                           
 11584                           ;UI.c: 485: cur_state = 1033;
 11585                           
 11586                           ;incstack = 0
 11587  0028A4  0E04               	movlw	4
 11588  0028A6  0100               	movlb	0	; () banked
 11589  0028A8  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11590  0028AA  0E09               	movlw	9
 11591  0028AC  6FE9               	movwf	_cur_state& (0+255),b
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;UI.c: 486: lcdInst(0b10000000);;
 11595  0028AE  0E80               	movlw	128
 11596  0028B0  ECE0  F015         	call	i2_lcdInst
 11597                           
 11598                           ;UI.c: 487: printf("LOG 3          <");
 11599  0028B4  0E31               	movlw	low STR_31
 11600  0028B6  6E0D               	movwf	i2printf@f,c
 11601  0028B8  0EFF               	movlw	high STR_31
 11602  0028BA  6E0E               	movwf	i2printf@f+1,c
 11603  0028BC  ECC0  F004         	call	i2_printf	;wreg free
 11604                           
 11605                           ;UI.c: 488: lcdInst(0b11000000);;
 11606  0028C0  0EC0               	movlw	192
 11607  0028C2  ECE0  F015         	call	i2_lcdInst
 11608                           
 11609                           ;UI.c: 489: printf("LOG 4           ");
 11610  0028C6  0E54               	movlw	low STR_33
 11611  0028C8  6E0D               	movwf	i2printf@f,c
 11612  0028CA  0EFE               	movlw	high STR_33
 11613  0028CC  6E0E               	movwf	i2printf@f+1,c
 11614  0028CE  ECC0  F004         	call	i2_printf	;wreg free
 11615  0028D2  0012               	return		;funcret
 11616  0028D4                     __end_of_change_state_to_logs_33:
 11617                           	opt stack 0
 11618                           pclatu	equ	0xFFB
 11619                           pclath	equ	0xFFA
 11620                           tblptru	equ	0xFF8
 11621                           tblptrh	equ	0xFF7
 11622                           tblptrl	equ	0xFF6
 11623                           tablat	equ	0xFF5
 11624                           prodh	equ	0xFF4
 11625                           prodl	equ	0xFF3
 11626                           intcon	equ	0xFF2
 11627                           intcon2	equ	0xFF1
 11628                           intcon3	equ	0xFF0
 11629                           indf0	equ	0xFEF
 11630                           postinc0	equ	0xFEE
 11631                           fsr0h	equ	0xFEA
 11632                           fsr0l	equ	0xFE9
 11633                           wreg	equ	0xFE8
 11634                           postdec1	equ	0xFE5
 11635                           fsr1h	equ	0xFE2
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _change_state_to_logs_23 *****************
 11645 ;; Defined at:
 11646 ;;		line 477 in file "UI.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1    wreg      void 
 11653 ;; Registers used:
 11654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;Total ram usage:        0 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    3
 11667 ;; This function calls:
 11668 ;;		i2_lcdInst
 11669 ;;		i2_printf
 11670 ;; This function is called by:
 11671 ;;		_updateMenu
 11672 ;;		_inputHandler
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text54
 11677  002992                     __ptext54:
 11678                           	opt stack 0
 11679  002992                     _change_state_to_logs_23:
 11680                           	opt stack 18
 11681                           
 11682                           ;UI.c: 478: cur_state = 1023;
 11683                           
 11684                           ;incstack = 0
 11685  002992  0E03               	movlw	3
 11686  002994  0100               	movlb	0	; () banked
 11687  002996  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11688  002998  69E9               	setf	_cur_state& (0+255),b
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;UI.c: 479: lcdInst(0b10000000);;
 11692  00299A  0E80               	movlw	128
 11693  00299C  ECE0  F015         	call	i2_lcdInst
 11694                           
 11695                           ;UI.c: 480: printf("LOG 2           ");
 11696  0029A0  0E32               	movlw	low STR_25
 11697  0029A2  6E0D               	movwf	i2printf@f,c
 11698  0029A4  0EFE               	movlw	high STR_25
 11699  0029A6  6E0E               	movwf	i2printf@f+1,c
 11700  0029A8  ECC0  F004         	call	i2_printf	;wreg free
 11701                           
 11702                           ;UI.c: 481: lcdInst(0b11000000);;
 11703  0029AC  0EC0               	movlw	192
 11704  0029AE  ECE0  F015         	call	i2_lcdInst
 11705                           
 11706                           ;UI.c: 482: printf("LOG 3          <");
 11707  0029B2  0E31               	movlw	low STR_31
 11708  0029B4  6E0D               	movwf	i2printf@f,c
 11709  0029B6  0EFF               	movlw	high STR_31
 11710  0029B8  6E0E               	movwf	i2printf@f+1,c
 11711  0029BA  ECC0  F004         	call	i2_printf	;wreg free
 11712  0029BE  0012               	return		;funcret
 11713  0029C0                     __end_of_change_state_to_logs_23:
 11714                           	opt stack 0
 11715                           pclatu	equ	0xFFB
 11716                           pclath	equ	0xFFA
 11717                           tblptru	equ	0xFF8
 11718                           tblptrh	equ	0xFF7
 11719                           tblptrl	equ	0xFF6
 11720                           tablat	equ	0xFF5
 11721                           prodh	equ	0xFF4
 11722                           prodl	equ	0xFF3
 11723                           intcon	equ	0xFF2
 11724                           intcon2	equ	0xFF1
 11725                           intcon3	equ	0xFF0
 11726                           indf0	equ	0xFEF
 11727                           postinc0	equ	0xFEE
 11728                           fsr0h	equ	0xFEA
 11729                           fsr0l	equ	0xFE9
 11730                           wreg	equ	0xFE8
 11731                           postdec1	equ	0xFE5
 11732                           fsr1h	equ	0xFE2
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           fsr2h	equ	0xFDA
 11738                           fsr2l	equ	0xFD9
 11739                           status	equ	0xFD8
 11740                           
 11741 ;; *************** function _change_state_to_logs_22 *****************
 11742 ;; Defined at:
 11743 ;;		line 470 in file "UI.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      void 
 11750 ;; Registers used:
 11751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:        0 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		i2_lcdInst
 11766 ;;		i2_printf
 11767 ;; This function is called by:
 11768 ;;		_updateMenu
 11769 ;;		_inputHandler
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text55
 11774  0028D4                     __ptext55:
 11775                           	opt stack 0
 11776  0028D4                     _change_state_to_logs_22:
 11777                           	opt stack 18
 11778                           
 11779                           ;UI.c: 471: cur_state = 1022;
 11780                           
 11781                           ;incstack = 0
 11782  0028D4  0E03               	movlw	3
 11783  0028D6  0100               	movlb	0	; () banked
 11784  0028D8  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11785  0028DA  0EFE               	movlw	254
 11786  0028DC  6FE9               	movwf	_cur_state& (0+255),b
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;UI.c: 472: lcdInst(0b10000000);;
 11790  0028DE  0E80               	movlw	128
 11791  0028E0  ECE0  F015         	call	i2_lcdInst
 11792                           
 11793                           ;UI.c: 473: printf("LOG 2          <");
 11794  0028E4  0E20               	movlw	low STR_27
 11795  0028E6  6E0D               	movwf	i2printf@f,c
 11796  0028E8  0EFF               	movlw	high STR_27
 11797  0028EA  6E0E               	movwf	i2printf@f+1,c
 11798  0028EC  ECC0  F004         	call	i2_printf	;wreg free
 11799                           
 11800                           ;UI.c: 474: lcdInst(0b11000000);;
 11801  0028F0  0EC0               	movlw	192
 11802  0028F2  ECE0  F015         	call	i2_lcdInst
 11803                           
 11804                           ;UI.c: 475: printf("LOG 3           ");
 11805  0028F6  0E43               	movlw	low STR_29
 11806  0028F8  6E0D               	movwf	i2printf@f,c
 11807  0028FA  0EFE               	movlw	high STR_29
 11808  0028FC  6E0E               	movwf	i2printf@f+1,c
 11809  0028FE  ECC0  F004         	call	i2_printf	;wreg free
 11810  002902  0012               	return		;funcret
 11811  002904                     __end_of_change_state_to_logs_22:
 11812                           	opt stack 0
 11813                           pclatu	equ	0xFFB
 11814                           pclath	equ	0xFFA
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           intcon2	equ	0xFF1
 11823                           intcon3	equ	0xFF0
 11824                           indf0	equ	0xFEF
 11825                           postinc0	equ	0xFEE
 11826                           fsr0h	equ	0xFEA
 11827                           fsr0l	equ	0xFE9
 11828                           wreg	equ	0xFE8
 11829                           postdec1	equ	0xFE5
 11830                           fsr1h	equ	0xFE2
 11831                           fsr1l	equ	0xFE1
 11832                           indf2	equ	0xFDF
 11833                           postinc2	equ	0xFDE
 11834                           postdec2	equ	0xFDD
 11835                           fsr2h	equ	0xFDA
 11836                           fsr2l	equ	0xFD9
 11837                           status	equ	0xFD8
 11838                           
 11839 ;; *************** function _change_state_to_logs_12 *****************
 11840 ;; Defined at:
 11841 ;;		line 463 in file "UI.c"
 11842 ;; Parameters:    Size  Location     Type
 11843 ;;		None
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;		None
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      void 
 11848 ;; Registers used:
 11849 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11850 ;; Tracked objects:
 11851 ;;		On entry : 0/0
 11852 ;;		On exit  : 0/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11859 ;;Total ram usage:        0 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    3
 11862 ;; This function calls:
 11863 ;;		i2_lcdInst
 11864 ;;		i2_printf
 11865 ;; This function is called by:
 11866 ;;		_updateMenu
 11867 ;;		_inputHandler
 11868 ;; This function uses a non-reentrant model
 11869 ;;
 11870                           
 11871                           	psect	text56
 11872  002904                     __ptext56:
 11873                           	opt stack 0
 11874  002904                     _change_state_to_logs_12:
 11875                           	opt stack 18
 11876                           
 11877                           ;UI.c: 464: cur_state = 1012;
 11878                           
 11879                           ;incstack = 0
 11880  002904  0E03               	movlw	3
 11881  002906  0100               	movlb	0	; () banked
 11882  002908  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11883  00290A  0EF4               	movlw	244
 11884  00290C  6FE9               	movwf	_cur_state& (0+255),b
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;UI.c: 465: lcdInst(0b10000000);;
 11888  00290E  0E80               	movlw	128
 11889  002910  ECE0  F015         	call	i2_lcdInst
 11890                           
 11891                           ;UI.c: 466: printf("LOG 1           ");
 11892  002914  0E21               	movlw	low STR_26
 11893  002916  6E0D               	movwf	i2printf@f,c
 11894  002918  0EFE               	movlw	high STR_26
 11895  00291A  6E0E               	movwf	i2printf@f+1,c
 11896  00291C  ECC0  F004         	call	i2_printf	;wreg free
 11897                           
 11898                           ;UI.c: 467: lcdInst(0b11000000);;
 11899  002920  0EC0               	movlw	192
 11900  002922  ECE0  F015         	call	i2_lcdInst
 11901                           
 11902                           ;UI.c: 468: printf("LOG 2          <");
 11903  002926  0E20               	movlw	low STR_27
 11904  002928  6E0D               	movwf	i2printf@f,c
 11905  00292A  0EFF               	movlw	high STR_27
 11906  00292C  6E0E               	movwf	i2printf@f+1,c
 11907  00292E  ECC0  F004         	call	i2_printf	;wreg free
 11908  002932  0012               	return		;funcret
 11909  002934                     __end_of_change_state_to_logs_12:
 11910                           	opt stack 0
 11911                           pclatu	equ	0xFFB
 11912                           pclath	equ	0xFFA
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           intcon	equ	0xFF2
 11920                           intcon2	equ	0xFF1
 11921                           intcon3	equ	0xFF0
 11922                           indf0	equ	0xFEF
 11923                           postinc0	equ	0xFEE
 11924                           fsr0h	equ	0xFEA
 11925                           fsr0l	equ	0xFE9
 11926                           wreg	equ	0xFE8
 11927                           postdec1	equ	0xFE5
 11928                           fsr1h	equ	0xFE2
 11929                           fsr1l	equ	0xFE1
 11930                           indf2	equ	0xFDF
 11931                           postinc2	equ	0xFDE
 11932                           postdec2	equ	0xFDD
 11933                           fsr2h	equ	0xFDA
 11934                           fsr2l	equ	0xFD9
 11935                           status	equ	0xFD8
 11936                           
 11937 ;; *************** function _change_state_to_logs_11 *****************
 11938 ;; Defined at:
 11939 ;;		line 456 in file "UI.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;		None
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;		None
 11944 ;; Return value:  Size  Location     Type
 11945 ;;                  1    wreg      void 
 11946 ;; Registers used:
 11947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;Total ram usage:        0 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    3
 11960 ;; This function calls:
 11961 ;;		i2_lcdInst
 11962 ;;		i2_printf
 11963 ;; This function is called by:
 11964 ;;		_updateMenu
 11965 ;;		_inputHandler
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           	psect	text57
 11970  002934                     __ptext57:
 11971                           	opt stack 0
 11972  002934                     _change_state_to_logs_11:
 11973                           	opt stack 18
 11974                           
 11975                           ;UI.c: 457: cur_state = 1011;
 11976                           
 11977                           ;incstack = 0
 11978  002934  0E03               	movlw	3
 11979  002936  0100               	movlb	0	; () banked
 11980  002938  6FEA               	movwf	(_cur_state+1)& (0+255),b
 11981  00293A  0EF3               	movlw	243
 11982  00293C  6FE9               	movwf	_cur_state& (0+255),b
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;UI.c: 458: lcdInst(0b10000000);;
 11986  00293E  0E80               	movlw	128
 11987  002940  ECE0  F015         	call	i2_lcdInst
 11988                           
 11989                           ;UI.c: 459: printf("LOG 1          <");
 11990  002944  0E0F               	movlw	low STR_24
 11991  002946  6E0D               	movwf	i2printf@f,c
 11992  002948  0EFF               	movlw	high STR_24
 11993  00294A  6E0E               	movwf	i2printf@f+1,c
 11994  00294C  ECC0  F004         	call	i2_printf	;wreg free
 11995                           
 11996                           ;UI.c: 460: lcdInst(0b11000000);;
 11997  002950  0EC0               	movlw	192
 11998  002952  ECE0  F015         	call	i2_lcdInst
 11999                           
 12000                           ;UI.c: 461: printf("LOG 2           ");
 12001  002956  0E32               	movlw	low STR_25
 12002  002958  6E0D               	movwf	i2printf@f,c
 12003  00295A  0EFE               	movlw	high STR_25
 12004  00295C  6E0E               	movwf	i2printf@f+1,c
 12005  00295E  ECC0  F004         	call	i2_printf	;wreg free
 12006  002962  0012               	return		;funcret
 12007  002964                     __end_of_change_state_to_logs_11:
 12008                           	opt stack 0
 12009                           pclatu	equ	0xFFB
 12010                           pclath	equ	0xFFA
 12011                           tblptru	equ	0xFF8
 12012                           tblptrh	equ	0xFF7
 12013                           tblptrl	equ	0xFF6
 12014                           tablat	equ	0xFF5
 12015                           prodh	equ	0xFF4
 12016                           prodl	equ	0xFF3
 12017                           intcon	equ	0xFF2
 12018                           intcon2	equ	0xFF1
 12019                           intcon3	equ	0xFF0
 12020                           indf0	equ	0xFEF
 12021                           postinc0	equ	0xFEE
 12022                           fsr0h	equ	0xFEA
 12023                           fsr0l	equ	0xFE9
 12024                           wreg	equ	0xFE8
 12025                           postdec1	equ	0xFE5
 12026                           fsr1h	equ	0xFE2
 12027                           fsr1l	equ	0xFE1
 12028                           indf2	equ	0xFDF
 12029                           postinc2	equ	0xFDE
 12030                           postdec2	equ	0xFDD
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _dispLogs *****************
 12036 ;; Defined at:
 12037 ;;		line 410 in file "UI.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;  myLog           2    0[COMRAM] int 
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;		None
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      void 
 12044 ;; Registers used:
 12045 ;;		wreg, status,2
 12046 ;; Tracked objects:
 12047 ;;		On entry : 0/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12055 ;;Total ram usage:        2 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; This function calls:
 12058 ;;		Nothing
 12059 ;; This function is called by:
 12060 ;;		_updateMenu
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           	psect	text58
 12065  002B5C                     __ptext58:
 12066                           	opt stack 0
 12067  002B5C                     _dispLogs:
 12068                           	opt stack 22
 12069                           
 12070                           ;UI.c: 411: logstate = 1;
 12071                           
 12072                           ;incstack = 0
 12073  002B5C  0E00               	movlw	0
 12074  002B5E  0100               	movlb	0	; () banked
 12075  002B60  6FF6               	movwf	(_logstate+1)& (0+255),b
 12076  002B62  0E01               	movlw	1
 12077  002B64  6FF5               	movwf	_logstate& (0+255),b
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;UI.c: 412: log = myLog;
 12081  002B66  C001  F0F3         	movff	dispLogs@myLog,_log
 12082  002B6A  C002  F0F4         	movff	dispLogs@myLog+1,_log+1
 12083                           
 12084                           ; BSR set to: 0
 12085  002B6E  0012               	return		;funcret
 12086  002B70                     __end_of_dispLogs:
 12087                           	opt stack 0
 12088                           pclatu	equ	0xFFB
 12089                           pclath	equ	0xFFA
 12090                           tblptru	equ	0xFF8
 12091                           tblptrh	equ	0xFF7
 12092                           tblptrl	equ	0xFF6
 12093                           tablat	equ	0xFF5
 12094                           prodh	equ	0xFF4
 12095                           prodl	equ	0xFF3
 12096                           intcon	equ	0xFF2
 12097                           intcon2	equ	0xFF1
 12098                           intcon3	equ	0xFF0
 12099                           indf0	equ	0xFEF
 12100                           postinc0	equ	0xFEE
 12101                           fsr0h	equ	0xFEA
 12102                           fsr0l	equ	0xFE9
 12103                           wreg	equ	0xFE8
 12104                           postdec1	equ	0xFE5
 12105                           fsr1h	equ	0xFE2
 12106                           fsr1l	equ	0xFE1
 12107                           indf2	equ	0xFDF
 12108                           postinc2	equ	0xFDE
 12109                           postdec2	equ	0xFDD
 12110                           fsr2h	equ	0xFDA
 12111                           fsr2l	equ	0xFD9
 12112                           status	equ	0xFD8
 12113                           
 12114 ;; *************** function _printSortTimer *****************
 12115 ;; Defined at:
 12116 ;;		line 193 in file "sort.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;		None
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  i               2   72[COMRAM] int 
 12121 ;;  curTime        14   44[COMRAM] int [7]
 12122 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12123 ;;  sec             2   66[COMRAM] int 
 12124 ;;  min             2   64[COMRAM] int 
 12125 ;;  hour            2   62[COMRAM] int 
 12126 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12127 ;;  start_sec       2   58[COMRAM] unsigned int 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  1    wreg      void 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;Total ram usage:       33 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    3
 12144 ;; This function calls:
 12145 ;;		i2___lwdiv
 12146 ;;		i2___lwmod
 12147 ;;		i2___wmul
 12148 ;;		i2_getRTC
 12149 ;;		i2_lcdInst
 12150 ;;		i2_printf
 12151 ;; This function is called by:
 12152 ;;		_handler
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text59
 12157  001486                     __ptext59:
 12158                           	opt stack 0
 12159  001486                     _printSortTimer:
 12160                           	opt stack 20
 12161                           
 12162                           ;sort.c: 194: getRTC();
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;incstack = 0
 12166  001486  EC5B  F011         	call	i2_getRTC	;wreg free
 12167                           
 12168                           ;sort.c: 195: int curTime[7];
 12169                           ;sort.c: 196: for(int i = 0; i < 7; i++){
 12170  00148A  0E00               	movlw	0
 12171  00148C  6E4A               	movwf	printSortTimer@i+1,c
 12172  00148E  0E00               	movlw	0
 12173  001490  6E49               	movwf	printSortTimer@i,c
 12174  001492                     i2l5826:
 12175  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 12176  001494  D006               	goto	i2l5830
 12177  001496  504A               	movf	printSortTimer@i+1,w,c
 12178  001498  E131               	bnz	i2l5836
 12179  00149A  0E07               	movlw	7
 12180  00149C  5C49               	subwf	printSortTimer@i,w,c
 12181  00149E  B0D8               	btfsc	status,0,c
 12182  0014A0  D02D               	goto	i2l5836
 12183  0014A2                     i2l5830:
 12184                           
 12185                           ;sort.c: 197: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12186  0014A2  0EDC               	movlw	low _time
 12187  0014A4  2449               	addwf	printSortTimer@i,w,c
 12188  0014A6  6ED9               	movwf	fsr2l,c
 12189  0014A8  0E00               	movlw	high _time
 12190  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 12191  0014AC  6EDA               	movwf	fsr2h,c
 12192  0014AE  50DF               	movf	indf2,w,c
 12193  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 12194  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 12195  0014B4  0E0F               	movlw	15
 12196  0014B6  162A               	andwf	??_printSortTimer,f,c
 12197  0014B8  0E0F               	movlw	15
 12198  0014BA  162A               	andwf	??_printSortTimer,f,c
 12199  0014BC  502A               	movf	??_printSortTimer,w,c
 12200  0014BE  0D0A               	mullw	10
 12201  0014C0  0EDC               	movlw	low _time
 12202  0014C2  2449               	addwf	printSortTimer@i,w,c
 12203  0014C4  6ED9               	movwf	fsr2l,c
 12204  0014C6  0E00               	movlw	high _time
 12205  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 12206  0014CA  6EDA               	movwf	fsr2h,c
 12207  0014CC  50DF               	movf	indf2,w,c
 12208  0014CE  0B0F               	andlw	15
 12209  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12210  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12211  0014D4  50F3               	movf	prodl,w,c
 12212  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 12213  0014D8  50F4               	movf	prodh,w,c
 12214  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 12215  0014DC  90D8               	bcf	status,0,c
 12216  0014DE  3449               	rlcf	printSortTimer@i,w,c
 12217  0014E0  6ED9               	movwf	fsr2l,c
 12218  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 12219  0014E4  6EDA               	movwf	fsr2h,c
 12220  0014E6  0E2D               	movlw	low printSortTimer@curTime
 12221  0014E8  26D9               	addwf	fsr2l,f,c
 12222  0014EA  0E00               	movlw	high printSortTimer@curTime
 12223  0014EC  22DA               	addwfc	fsr2h,f,c
 12224  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12225  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12226  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 12227  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 12228  0014FA  D7CB               	goto	i2l5826
 12229  0014FC                     i2l5836:
 12230                           
 12231                           ;sort.c: 198: }
 12232                           ;sort.c: 199: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12233  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12234  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12235  001504  0E00               	movlw	0
 12236  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 12237  001508  0E3C               	movlw	60
 12238  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 12239  00150C  EC35  F015         	call	i2___wmul	;wreg free
 12240  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12241  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12242  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12243  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12244  001520  0E0E               	movlw	14
 12245  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 12246  001524  0E10               	movlw	16
 12247  001526  6E03               	movwf	i2___wmul@multiplicand,c
 12248  001528  EC35  F015         	call	i2___wmul	;wreg free
 12249  00152C  5001               	movf	?i2___wmul,w,c
 12250  00152E  262A               	addwf	??_printSortTimer,f,c
 12251  001530  5002               	movf	?i2___wmul+1,w,c
 12252  001532  222B               	addwfc	??_printSortTimer+1,f,c
 12253  001534  0101               	movlb	1	; () banked
 12254  001536  5100               	movf	_startTime& (0+255),w,b
 12255  001538  242A               	addwf	??_printSortTimer,w,c
 12256  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 12257  00153C  0101               	movlb	1	; () banked
 12258  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 12259  001540  202B               	addwfc	??_printSortTimer+1,w,c
 12260  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 12261                           
 12262                           ;sort.c: 200: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12263  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12264  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12265  00154C  0E00               	movlw	0
 12266  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 12267  001550  0E3C               	movlw	60
 12268  001552  6E03               	movwf	i2___wmul@multiplicand,c
 12269  001554  EC35  F015         	call	i2___wmul	;wreg free
 12270  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12271  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12272  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12273  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12274  001568  0E0E               	movlw	14
 12275  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12276  00156C  0E10               	movlw	16
 12277  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 12278  001570  EC35  F015         	call	i2___wmul	;wreg free
 12279  001574  5001               	movf	?i2___wmul,w,c
 12280  001576  262A               	addwf	??_printSortTimer,f,c
 12281  001578  5002               	movf	?i2___wmul+1,w,c
 12282  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 12283  00157C  502D               	movf	printSortTimer@curTime,w,c
 12284  00157E  242A               	addwf	??_printSortTimer,w,c
 12285  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 12286  001582  502E               	movf	printSortTimer@curTime+1,w,c
 12287  001584  202B               	addwfc	??_printSortTimer+1,w,c
 12288  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12289                           
 12290                           ;sort.c: 201: unsigned int timeDiff = cur_sec - start_sec;
 12291  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12292  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12293  001590  1E2A               	comf	??_printSortTimer,f,c
 12294  001592  1E2B               	comf	??_printSortTimer+1,f,c
 12295  001594  4A2A               	infsnz	??_printSortTimer,f,c
 12296  001596  2A2B               	incf	??_printSortTimer+1,f,c
 12297  001598  503D               	movf	printSortTimer@cur_sec,w,c
 12298  00159A  242A               	addwf	??_printSortTimer,w,c
 12299  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 12300  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 12301  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 12302  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 12303                           
 12304                           ;sort.c: 203: total_time = timeDiff;
 12305  0015A4  C047  F0F7         	movff	printSortTimer@timeDiff,_total_time
 12306  0015A8  C048  F0F8         	movff	printSortTimer@timeDiff+1,_total_time+1
 12307                           
 12308                           ;sort.c: 205: if(timeDiff >= 10){
 12309  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 12310  0015AE  E104               	bnz	i2u462_40
 12311  0015B0  0E0A               	movlw	10
 12312  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 12313  0015B4  A0D8               	btfss	status,0,c
 12314  0015B6  D003               	goto	i2l5846
 12315  0015B8                     i2u462_40:
 12316                           
 12317                           ;sort.c: 206: machine_state = DoneSorting_state;
 12318  0015B8  0E02               	movlw	2
 12319  0015BA  0100               	movlb	0	; () banked
 12320  0015BC  6FF9               	movwf	_machine_state& (0+255),b
 12321  0015BE                     i2l5846:
 12322                           
 12323                           ;sort.c: 208: }
 12324                           ;sort.c: 210: int hour = timeDiff / 3600;
 12325  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12326  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12327  0015C6  0E0E               	movlw	14
 12328  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12329  0015CA  0E10               	movlw	16
 12330  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 12331  0015CE  ECAC  F012         	call	i2___lwdiv	;wreg free
 12332  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12333  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12334                           
 12335                           ;sort.c: 211: int min = (timeDiff % 3600) / 60;
 12336  0015DA  0E0E               	movlw	14
 12337  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 12338  0015DE  0E10               	movlw	16
 12339  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 12340  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12341  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12342  0015EA  ECF8  F012         	call	i2___lwmod	;wreg free
 12343  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12344  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12345  0015F6  0E00               	movlw	0
 12346  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 12347  0015FA  0E3C               	movlw	60
 12348  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 12349  0015FE  ECAC  F012         	call	i2___lwdiv	;wreg free
 12350  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12351  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12352                           
 12353                           ;sort.c: 212: int sec = (timeDiff % 3600) % 60;
 12354  00160A  0E0E               	movlw	14
 12355  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 12356  00160E  0E10               	movlw	16
 12357  001610  6E03               	movwf	i2___lwmod@divisor,c
 12358  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12359  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12360  00161A  ECF8  F012         	call	i2___lwmod	;wreg free
 12361  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2143
 12362  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2143+1
 12363                           
 12364                           ;sort.c: 212: int sec = (timeDiff % 3600) % 60;
 12365  001626  C045  F001         	movff	_printSortTimer$2143,i2___lwmod@dividend
 12366  00162A  C046  F002         	movff	_printSortTimer$2143+1,i2___lwmod@dividend+1
 12367  00162E  0E00               	movlw	0
 12368  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 12369  001632  0E3C               	movlw	60
 12370  001634  6E03               	movwf	i2___lwmod@divisor,c
 12371  001636  ECF8  F012         	call	i2___lwmod	;wreg free
 12372  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12373  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12374                           
 12375                           ;sort.c: 214: lcdInst(0b10000000);;
 12376  001642  0E80               	movlw	128
 12377  001644  ECE0  F015         	call	i2_lcdInst
 12378                           
 12379                           ;sort.c: 215: printf("Sorting...");
 12380  001648  0EA8               	movlw	low STR_49
 12381  00164A  6E0D               	movwf	i2printf@f,c
 12382  00164C  0EFF               	movlw	high STR_49
 12383  00164E  6E0E               	movwf	i2printf@f+1,c
 12384  001650  ECC0  F004         	call	i2_printf	;wreg free
 12385                           
 12386                           ;sort.c: 216: lcdInst(0b11000000);;
 12387  001654  0EC0               	movlw	192
 12388  001656  ECE0  F015         	call	i2_lcdInst
 12389                           
 12390                           ;sort.c: 217: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12391  00165A  0EE8               	movlw	low STR_2
 12392  00165C  6E0D               	movwf	i2printf@f,c
 12393  00165E  0EFD               	movlw	high STR_2
 12394  001660  6E0E               	movwf	i2printf@f+1,c
 12395  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12396  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12397  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12398  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12399  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12400  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12401  00167A  ECC0  F004         	call	i2_printf	;wreg free
 12402  00167E  0012               	return		;funcret
 12403  001680                     __end_of_printSortTimer:
 12404                           	opt stack 0
 12405                           pclatu	equ	0xFFB
 12406                           pclath	equ	0xFFA
 12407                           tblptru	equ	0xFF8
 12408                           tblptrh	equ	0xFF7
 12409                           tblptrl	equ	0xFF6
 12410                           tablat	equ	0xFF5
 12411                           prodh	equ	0xFF4
 12412                           prodl	equ	0xFF3
 12413                           intcon	equ	0xFF2
 12414                           intcon2	equ	0xFF1
 12415                           intcon3	equ	0xFF0
 12416                           indf0	equ	0xFEF
 12417                           postinc0	equ	0xFEE
 12418                           fsr0h	equ	0xFEA
 12419                           fsr0l	equ	0xFE9
 12420                           wreg	equ	0xFE8
 12421                           postdec1	equ	0xFE5
 12422                           fsr1h	equ	0xFE2
 12423                           fsr1l	equ	0xFE1
 12424                           indf2	equ	0xFDF
 12425                           postinc2	equ	0xFDE
 12426                           postdec2	equ	0xFDD
 12427                           fsr2h	equ	0xFDA
 12428                           fsr2l	equ	0xFD9
 12429                           status	equ	0xFD8
 12430                           
 12431 ;; *************** function i2_printf *****************
 12432 ;; Defined at:
 12433 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12434 ;; Parameters:    Size  Location     Type
 12435 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12436 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12437 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12438 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12439 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12440 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12441 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12442 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12443 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12444 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12445 ;;		 -> STR_2(21), STR_1(17), 
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;  printf          4    0        struct .
 12448 ;;  printf          2   39[COMRAM] int 
 12449 ;;  printf          2   35[COMRAM] unsigned int 
 12450 ;;  printf          2   33[COMRAM] unsigned int 
 12451 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12452 ;;		 -> STR_51(7), printRTC@month(4), 
 12453 ;;  printf          2   29[COMRAM] PTR void [1]
 12454 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12455 ;;  printf          1   38[COMRAM] char 
 12456 ;;  printf          1   37[COMRAM] unsigned char 
 12457 ;;  printf          1   28[COMRAM] char 
 12458 ;; Return value:  Size  Location     Type
 12459 ;;                  2   12[COMRAM] int 
 12460 ;; Registers used:
 12461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12467 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12468 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12469 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;Total ram usage:       29 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; Hardware stack levels required when called:    2
 12474 ;; This function calls:
 12475 ;;		i2___lwdiv
 12476 ;;		i2___lwmod
 12477 ;;		i2___wmul
 12478 ;;		i2_isdigit
 12479 ;;		i2_putch
 12480 ;; This function is called by:
 12481 ;;		_change_state_to_menu_11
 12482 ;;		_change_state_to_menu_23
 12483 ;;		_change_state_to_logs_11
 12484 ;;		_change_state_to_logs_12
 12485 ;;		_change_state_to_logs_22
 12486 ;;		_change_state_to_logs_23
 12487 ;;		_change_state_to_logs_33
 12488 ;;		_change_state_to_logs_34
 12489 ;;		_printSortTimer
 12490 ;;		i2_change_state_to_menu_start
 12491 ;;		i2_change_state_to_menu_12
 12492 ;;		i2_change_state_to_menu_22
 12493 ;;		i2_printRTC
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text60
 12498  000980                     __ptext60:
 12499                           	opt stack 0
 12500  000980                     i2_printf:
 12501                           	opt stack 19
 12502                           
 12503                           ;doprnt.c: 466: va_list ap;
 12504                           ;doprnt.c: 499: signed char c;
 12505                           ;doprnt.c: 501: int width;
 12506                           ;doprnt.c: 506: signed char prec;
 12507                           ;doprnt.c: 508: unsigned char flag;
 12508                           ;doprnt.c: 523: union {
 12509                           ;doprnt.c: 524: unsigned long vd;
 12510                           ;doprnt.c: 525: double integ;
 12511                           ;doprnt.c: 526: } tmpval;
 12512                           ;doprnt.c: 528: unsigned int val;
 12513                           ;doprnt.c: 529: unsigned len;
 12514                           ;doprnt.c: 530: const char * cp;
 12515                           ;doprnt.c: 533: *ap = __va_start();
 12516                           
 12517                           ;incstack = 0
 12518  000980  0E0F               	movlw	low (?i2_printf+2)
 12519  000982  6E1E               	movwf	i2printf@ap,c
 12520  000984  0E00               	movlw	high (?i2_printf+2)
 12521  000986  6E1F               	movwf	i2printf@ap+1,c
 12522                           
 12523                           ;doprnt.c: 536: while(c = *f++) {
 12524  000988  D190               	goto	i2l4620
 12525  00098A                     i2l4496:
 12526                           
 12527                           ;doprnt.c: 538: if(c != '%')
 12528  00098A  0E25               	movlw	37
 12529  00098C  1827               	xorwf	i2printf@c,w,c
 12530  00098E  B4D8               	btfsc	status,2,c
 12531  000990  D004               	goto	i2l4500
 12532                           
 12533                           ;doprnt.c: 540: {
 12534                           ;doprnt.c: 541: (putch(c) );
 12535  000992  5027               	movf	i2printf@c,w,c
 12536  000994  ECDA  F015         	call	i2_putch
 12537                           
 12538                           ;doprnt.c: 542: continue;
 12539  000998  D188               	goto	i2l4620
 12540  00099A                     i2l4500:
 12541                           
 12542                           ;doprnt.c: 543: }
 12543                           ;doprnt.c: 546: width = 0;
 12544  00099A  0E00               	movlw	0
 12545  00099C  6E29               	movwf	i2printf@width+1,c
 12546  00099E  0E00               	movlw	0
 12547  0009A0  6E28               	movwf	i2printf@width,c
 12548                           
 12549                           ;doprnt.c: 548: flag = 0;
 12550  0009A2  0E00               	movlw	0
 12551  0009A4  6E26               	movwf	i2printf@flag,c
 12552                           
 12553                           ;doprnt.c: 551: switch(*f) {
 12554                           
 12555                           ;doprnt.c: 550: for(;;) {
 12556  0009A6  D003               	goto	i2l4506
 12557  0009A8                     i2l4502:
 12558                           
 12559                           ;doprnt.c: 580: flag |= 0x04;
 12560  0009A8  8426               	bsf	i2printf@flag,2,c
 12561                           
 12562                           ;doprnt.c: 581: f++;
 12563  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12564  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12565  0009AE                     i2l4506:
 12566  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12567  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12568  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12569  0009B6  6AF8               	clrf	tblptru,c
 12570  0009B8                     	endif
 12571  0009B8                     	if	0	;tblptru may be non-zero
 12572  0009B8                     	endif
 12573  0009B8  0008               	tblrd		*
 12574  0009BA  50F5               	movf	tablat,w,c
 12575                           
 12576                           ; Switch size 1, requested type "space"
 12577                           ; Number of cases is 1, Range of values is 48 to 48
 12578                           ; switch strategies available:
 12579                           ; Name         Instructions Cycles
 12580                           ; simple_byte            4     3 (average)
 12581                           ;	Chosen strategy is simple_byte
 12582  0009BC  0A30               	xorlw	48	; case 48
 12583  0009BE  B4D8               	btfsc	status,2,c
 12584  0009C0  D7F3               	goto	i2l4502
 12585                           
 12586                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12587                           
 12588                           ;doprnt.c: 586: }
 12589                           
 12590                           ;doprnt.c: 585: break;
 12591  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12592  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12593  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12594  0009CA  6AF8               	clrf	tblptru,c
 12595  0009CC                     	endif
 12596  0009CC                     	if	0	;tblptru may be non-zero
 12597  0009CC                     	endif
 12598  0009CC  0008               	tblrd		*
 12599  0009CE  50F5               	movf	tablat,w,c
 12600  0009D0  EC7D  F015         	call	i2_isdigit
 12601  0009D4  A0D8               	btfss	status,0,c
 12602  0009D6  D0A4               	goto	i2l4552
 12603                           
 12604                           ;doprnt.c: 598: width = 0;
 12605  0009D8  0E00               	movlw	0
 12606  0009DA  6E29               	movwf	i2printf@width+1,c
 12607  0009DC  0E00               	movlw	0
 12608  0009DE  6E28               	movwf	i2printf@width,c
 12609  0009E0                     i2l4512:
 12610                           
 12611                           ;doprnt.c: 600: width *= 10;
 12612  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12613  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12614  0009E8  0E00               	movlw	0
 12615  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12616  0009EC  0E0A               	movlw	10
 12617  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12618  0009F0  EC35  F015         	call	i2___wmul	;wreg free
 12619  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12620  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12621                           
 12622                           ;doprnt.c: 601: width += *f++ - '0';
 12623  0009FC  0ED0               	movlw	208
 12624  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12625  000A00  0EFF               	movlw	255
 12626  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12627  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12628  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12629  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12630  000A0C  6AF8               	clrf	tblptru,c
 12631  000A0E                     	endif
 12632  000A0E                     	if	0	;tblptru may be non-zero
 12633  000A0E                     	endif
 12634  000A0E  0008               	tblrd		*
 12635  000A10  50F5               	movf	tablat,w,c
 12636  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12637  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12638  000A16  5019               	movf	??i2_printf,w,c
 12639  000A18  261B               	addwf	??i2_printf+2,f,c
 12640  000A1A  501A               	movf	??i2_printf+1,w,c
 12641  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12642  000A1E  501B               	movf	??i2_printf+2,w,c
 12643  000A20  2628               	addwf	i2printf@width,f,c
 12644  000A22  501C               	movf	??i2_printf+3,w,c
 12645  000A24  2229               	addwfc	i2printf@width+1,f,c
 12646  000A26  4A0D               	infsnz	i2printf@f,f,c
 12647  000A28  2A0E               	incf	i2printf@f+1,f,c
 12648                           
 12649                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12650  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12651  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12652  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12653  000A32  6AF8               	clrf	tblptru,c
 12654  000A34                     	endif
 12655  000A34                     	if	0	;tblptru may be non-zero
 12656  000A34                     	endif
 12657  000A34  0008               	tblrd		*
 12658  000A36  50F5               	movf	tablat,w,c
 12659  000A38  EC7D  F015         	call	i2_isdigit
 12660  000A3C  A0D8               	btfss	status,0,c
 12661  000A3E  D070               	goto	i2l4552
 12662  000A40  D7CF               	goto	i2l4512
 12663  000A42                     i2l4520:
 12664                           
 12665                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12666  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12667  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12668  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12669  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12670  000A52  0E02               	movlw	2
 12671  000A54  261E               	addwf	i2printf@ap,f,c
 12672  000A56  0E00               	movlw	0
 12673  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12674                           
 12675                           ;doprnt.c: 740: if(!cp)
 12676  000A5A  5020               	movf	i2printf@cp,w,c
 12677  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12678  000A5E  A4D8               	btfss	status,2,c
 12679  000A60  D004               	goto	i2l4528
 12680                           
 12681                           ;doprnt.c: 741: cp = "(null)";
 12682  000A62  0EBD               	movlw	low STR_51
 12683  000A64  6E20               	movwf	i2printf@cp,c
 12684  000A66  0EFF               	movlw	high STR_51
 12685  000A68  6E21               	movwf	i2printf@cp+1,c
 12686  000A6A                     i2l4528:
 12687                           
 12688                           ;doprnt.c: 745: len = 0;
 12689  000A6A  0E00               	movlw	0
 12690  000A6C  6E25               	movwf	i2printf@len+1,c
 12691  000A6E  0E00               	movlw	0
 12692  000A70  6E24               	movwf	i2printf@len,c
 12693                           
 12694                           ;doprnt.c: 746: while(cp[len])
 12695  000A72  D002               	goto	i2l4532
 12696  000A74                     i2l4530:
 12697                           
 12698                           ;doprnt.c: 747: len++;
 12699  000A74  4A24               	infsnz	i2printf@len,f,c
 12700  000A76  2A25               	incf	i2printf@len+1,f,c
 12701  000A78                     i2l4532:
 12702  000A78  5024               	movf	i2printf@len,w,c
 12703  000A7A  2420               	addwf	i2printf@cp,w,c
 12704  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12705  000A7E  5025               	movf	i2printf@len+1,w,c
 12706  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12707  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12708  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12709  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12710  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12711  000A8E  6EF8               	movwf	tblptru,c
 12712  000A90  0E0F               	movlw	(high __ramtop+-1)
 12713  000A92  64F7               	cpfsgt	tblptrh,c
 12714  000A94  D003               	bra	i2u301_47
 12715  000A96  0008               	tblrd		*
 12716  000A98  50F5               	movf	tablat,w,c
 12717  000A9A  D005               	bra	i2u301_40
 12718  000A9C                     i2u301_47:
 12719  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12720  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12721  000AA4  50EF               	movf	indf0,w,c
 12722  000AA6                     i2u301_40:
 12723  000AA6  0900               	iorlw	0
 12724  000AA8  A4D8               	btfss	status,2,c
 12725  000AAA  D7E4               	goto	i2l4530
 12726                           
 12727                           ;doprnt.c: 757: if(width > len)
 12728  000AAC  5028               	movf	i2printf@width,w,c
 12729  000AAE  5C24               	subwf	i2printf@len,w,c
 12730  000AB0  5029               	movf	i2printf@width+1,w,c
 12731  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12732  000AB4  B0D8               	btfsc	status,0,c
 12733  000AB6  D005               	goto	i2l4538
 12734                           
 12735                           ;doprnt.c: 758: width -= len;
 12736  000AB8  5024               	movf	i2printf@len,w,c
 12737  000ABA  5E28               	subwf	i2printf@width,f,c
 12738  000ABC  5025               	movf	i2printf@len+1,w,c
 12739  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12740  000AC0  D008               	goto	i2l4542
 12741  000AC2                     i2l4538:
 12742                           
 12743                           ;doprnt.c: 759: else
 12744                           ;doprnt.c: 760: width = 0;
 12745  000AC2  0E00               	movlw	0
 12746  000AC4  6E29               	movwf	i2printf@width+1,c
 12747  000AC6  0E00               	movlw	0
 12748  000AC8  6E28               	movwf	i2printf@width,c
 12749                           
 12750                           ;doprnt.c: 764: while(width--)
 12751  000ACA  D003               	goto	i2l4542
 12752  000ACC                     i2l4540:
 12753                           
 12754                           ;doprnt.c: 765: (putch(' ') );
 12755  000ACC  0E20               	movlw	32
 12756  000ACE  ECDA  F015         	call	i2_putch
 12757  000AD2                     i2l4542:
 12758  000AD2  0628               	decf	i2printf@width,f,c
 12759  000AD4  A0D8               	btfss	status,0,c
 12760  000AD6  0629               	decf	i2printf@width+1,f,c
 12761  000AD8  2828               	incf	i2printf@width,w,c
 12762  000ADA  E1F8               	bnz	i2l4540
 12763  000ADC  2829               	incf	i2printf@width+1,w,c
 12764  000ADE  B4D8               	btfsc	status,2,c
 12765  000AE0  D016               	goto	i2l4548
 12766  000AE2  D7F4               	goto	i2l4540
 12767  000AE4                     i2l4544:
 12768                           
 12769                           ;doprnt.c: 768: (putch(*cp++) );
 12770  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12771  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12772  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12773  000AEE  6EF8               	movwf	tblptru,c
 12774  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12775  000AF2  64F7               	cpfsgt	tblptrh,c
 12776  000AF4  D003               	bra	i2u305_47
 12777  000AF6  0008               	tblrd		*
 12778  000AF8  50F5               	movf	tablat,w,c
 12779  000AFA  D005               	bra	i2u305_40
 12780  000AFC                     i2u305_47:
 12781  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12782  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12783  000B04  50EF               	movf	indf0,w,c
 12784  000B06                     i2u305_40:
 12785  000B06  ECDA  F015         	call	i2_putch
 12786  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12787  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12788  000B0E                     i2l4548:
 12789  000B0E  0624               	decf	i2printf@len,f,c
 12790  000B10  A0D8               	btfss	status,0,c
 12791  000B12  0625               	decf	i2printf@len+1,f,c
 12792  000B14  2824               	incf	i2printf@len,w,c
 12793  000B16  E1E6               	bnz	i2l4544
 12794  000B18  2825               	incf	i2printf@len+1,w,c
 12795  000B1A  B4D8               	btfsc	status,2,c
 12796  000B1C  D0C6               	goto	i2l4620
 12797  000B1E  D7E2               	goto	i2l4544
 12798  000B20                     i2l4552:
 12799  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12800  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12801  000B28  4A0D               	infsnz	i2printf@f,f,c
 12802  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12803  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12804  000B2C  6AF8               	clrf	tblptru,c
 12805  000B2E                     	endif
 12806  000B2E                     	if	0	;tblptru may be non-zero
 12807  000B2E                     	endif
 12808  000B2E  0008               	tblrd		*
 12809  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12810  000B34  5027               	movf	i2printf@c,w,c
 12811                           
 12812                           ; Switch size 1, requested type "space"
 12813                           ; Number of cases is 4, Range of values is 0 to 115
 12814                           ; switch strategies available:
 12815                           ; Name         Instructions Cycles
 12816                           ; simple_byte           13     7 (average)
 12817                           ;	Chosen strategy is simple_byte
 12818  000B36  0A00               	xorlw	0	; case 0
 12819  000B38  B4D8               	btfsc	status,2,c
 12820  000B3A  0012               	return	
 12821  000B3C  0A64               	xorlw	100	; case 100
 12822  000B3E  B4D8               	btfsc	status,2,c
 12823  000B40  D007               	goto	i2l4554
 12824  000B42  0A0D               	xorlw	13	; case 105
 12825  000B44  B4D8               	btfsc	status,2,c
 12826  000B46  D004               	goto	i2l4554
 12827  000B48  0A1A               	xorlw	26	; case 115
 12828  000B4A  B4D8               	btfsc	status,2,c
 12829  000B4C  D77A               	goto	i2l4520
 12830  000B4E  D0AD               	goto	i2l4620
 12831  000B50                     i2l4554:
 12832                           
 12833                           ;doprnt.c: 1253: {
 12834                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12835  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12836  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12837  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12838  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12839  000B60  0E02               	movlw	2
 12840  000B62  261E               	addwf	i2printf@ap,f,c
 12841  000B64  0E00               	movlw	0
 12842  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12843                           
 12844                           ;doprnt.c: 1261: if((int)val < 0) {
 12845  000B68  AE23               	btfss	i2printf@val+1,7,c
 12846  000B6A  D006               	goto	i2l4564
 12847                           
 12848                           ;doprnt.c: 1262: flag |= 0x03;
 12849  000B6C  0E03               	movlw	3
 12850  000B6E  1226               	iorwf	i2printf@flag,f,c
 12851                           
 12852                           ;doprnt.c: 1263: val = -val;
 12853  000B70  6C22               	negf	i2printf@val,c
 12854  000B72  1E23               	comf	i2printf@val+1,f,c
 12855  000B74  B0D8               	btfsc	status,0,c
 12856  000B76  2A23               	incf	i2printf@val+1,f,c
 12857  000B78                     i2l4564:
 12858                           
 12859                           ;doprnt.c: 1264: }
 12860                           ;doprnt.c: 1266: }
 12861                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12862  000B78  0E01               	movlw	1
 12863  000B7A  6E27               	movwf	i2printf@c,c
 12864  000B7C                     i2l4566:
 12865  000B7C  0E05               	movlw	5
 12866  000B7E  1827               	xorwf	i2printf@c,w,c
 12867  000B80  B4D8               	btfsc	status,2,c
 12868  000B82  D015               	goto	i2l4578
 12869                           
 12870                           ;doprnt.c: 1306: if(val < dpowers[c])
 12871  000B84  5027               	movf	i2printf@c,w,c
 12872  000B86  0D02               	mullw	2
 12873  000B88  0EC6               	movlw	low _dpowers
 12874  000B8A  24F3               	addwf	prodl,w,c
 12875  000B8C  6EF6               	movwf	tblptrl,c
 12876  000B8E  0EFD               	movlw	high _dpowers
 12877  000B90  20F4               	addwfc	prodh,w,c
 12878  000B92  6EF7               	movwf	tblptrh,c
 12879  000B94                     	if	1	;There are 3 active tblptr bytes
 12880  000B94  6AF8               	clrf	tblptru,c
 12881  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12882  000B98  22F8               	addwfc	tblptru,f,c
 12883  000B9A                     	endif
 12884  000B9A  0009               	tblrd		*+
 12885  000B9C  50F5               	movf	tablat,w,c
 12886  000B9E  5C22               	subwf	i2printf@val,w,c
 12887  000BA0  0009               	tblrd		*+
 12888  000BA2  50F5               	movf	tablat,w,c
 12889  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12890  000BA6  A0D8               	btfss	status,0,c
 12891  000BA8  D002               	goto	i2l4578
 12892                           
 12893                           ;doprnt.c: 1307: break;
 12894  000BAA  2A27               	incf	i2printf@c,f,c
 12895  000BAC  D7E7               	goto	i2l4566
 12896  000BAE                     i2l4578:
 12897                           
 12898                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12899  000BAE  5028               	movf	i2printf@width,w,c
 12900  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12901  000BB2  B4D8               	btfsc	status,2,c
 12902  000BB4  D009               	goto	i2l4584
 12903  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12904  000BBA  0E03               	movlw	3
 12905  000BBC  1619               	andwf	??i2_printf,f,c
 12906  000BBE  B4D8               	btfsc	status,2,c
 12907  000BC0  D003               	goto	i2l4584
 12908                           
 12909                           ;doprnt.c: 1346: width--;
 12910  000BC2  0628               	decf	i2printf@width,f,c
 12911  000BC4  A0D8               	btfss	status,0,c
 12912  000BC6  0629               	decf	i2printf@width+1,f,c
 12913  000BC8                     i2l4584:
 12914                           
 12915                           ;doprnt.c: 1381: if(width > c)
 12916  000BC8  0E80               	movlw	128
 12917  000BCA  BE27               	btfsc	i2printf@c,7,c
 12918  000BCC  0E7F               	movlw	127
 12919  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12920  000BD0  5028               	movf	i2printf@width,w,c
 12921  000BD2  5C27               	subwf	i2printf@c,w,c
 12922  000BD4  5029               	movf	i2printf@width+1,w,c
 12923  000BD6  0A80               	xorlw	128
 12924  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12925  000BDA  B0D8               	btfsc	status,0,c
 12926  000BDC  D007               	goto	i2l4588
 12927                           
 12928                           ;doprnt.c: 1382: width -= c;
 12929  000BDE  5027               	movf	i2printf@c,w,c
 12930  000BE0  5E28               	subwf	i2printf@width,f,c
 12931  000BE2  0E00               	movlw	0
 12932  000BE4  BE27               	btfsc	i2printf@c,7,c
 12933  000BE6  0EFF               	movlw	255
 12934  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12935  000BEA  D004               	goto	i2l4590
 12936  000BEC                     i2l4588:
 12937                           
 12938                           ;doprnt.c: 1383: else
 12939                           ;doprnt.c: 1384: width = 0;
 12940  000BEC  0E00               	movlw	0
 12941  000BEE  6E29               	movwf	i2printf@width+1,c
 12942  000BF0  0E00               	movlw	0
 12943  000BF2  6E28               	movwf	i2printf@width,c
 12944  000BF4                     i2l4590:
 12945                           
 12946                           ;doprnt.c: 1387: if(flag & 0x04) {
 12947  000BF4  A426               	btfss	i2printf@flag,2,c
 12948  000BF6  D014               	goto	i2l4602
 12949                           
 12950                           ;doprnt.c: 1392: if(flag & 0x03)
 12951  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12952  000BFC  0E03               	movlw	3
 12953  000BFE  1619               	andwf	??i2_printf,f,c
 12954  000C00  B4D8               	btfsc	status,2,c
 12955  000C02  D003               	goto	i2l4596
 12956                           
 12957                           ;doprnt.c: 1393: (putch('-') );
 12958  000C04  0E2D               	movlw	45
 12959  000C06  ECDA  F015         	call	i2_putch
 12960  000C0A                     i2l4596:
 12961                           
 12962                           ;doprnt.c: 1415: if(width)
 12963  000C0A  5028               	movf	i2printf@width,w,c
 12964  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12965  000C0E  B4D8               	btfsc	status,2,c
 12966  000C10  D01E               	goto	i2l4612
 12967                           
 12968                           ;doprnt.c: 1417: (putch('0') );
 12969                           
 12970                           ;doprnt.c: 1416: do
 12971  000C12  0E30               	movlw	48
 12972  000C14  ECDA  F015         	call	i2_putch
 12973                           
 12974                           ;doprnt.c: 1418: while(--width);
 12975  000C18  0628               	decf	i2printf@width,f,c
 12976  000C1A  A0D8               	btfss	status,0,c
 12977  000C1C  0629               	decf	i2printf@width+1,f,c
 12978  000C1E  D7F5               	goto	i2l4596
 12979  000C20                     i2l4602:
 12980                           
 12981                           ;doprnt.c: 1422: {
 12982                           ;doprnt.c: 1424: if(width
 12983                           ;doprnt.c: 1428: )
 12984  000C20  5028               	movf	i2printf@width,w,c
 12985  000C22  1029               	iorwf	i2printf@width+1,w,c
 12986  000C24  B4D8               	btfsc	status,2,c
 12987  000C26  D00A               	goto	i2l4608
 12988  000C28                     i2l4604:
 12989                           
 12990                           ;doprnt.c: 1430: (putch(' ') );
 12991  000C28  0E20               	movlw	32
 12992  000C2A  ECDA  F015         	call	i2_putch
 12993                           
 12994                           ;doprnt.c: 1431: while(--width);
 12995  000C2E  0628               	decf	i2printf@width,f,c
 12996  000C30  A0D8               	btfss	status,0,c
 12997  000C32  0629               	decf	i2printf@width+1,f,c
 12998  000C34  5028               	movf	i2printf@width,w,c
 12999  000C36  1029               	iorwf	i2printf@width+1,w,c
 13000  000C38  A4D8               	btfss	status,2,c
 13001  000C3A  D7F6               	goto	i2l4604
 13002  000C3C                     i2l4608:
 13003                           
 13004                           ;doprnt.c: 1438: if(flag & 0x03)
 13005  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 13006  000C40  0E03               	movlw	3
 13007  000C42  1619               	andwf	??i2_printf,f,c
 13008  000C44  B4D8               	btfsc	status,2,c
 13009  000C46  D003               	goto	i2l4612
 13010                           
 13011                           ;doprnt.c: 1439: (putch('-') );
 13012  000C48  0E2D               	movlw	45
 13013  000C4A  ECDA  F015         	call	i2_putch
 13014  000C4E                     i2l4612:
 13015                           
 13016                           ;doprnt.c: 1469: }
 13017                           ;doprnt.c: 1472: prec = c;
 13018  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 13019                           
 13020                           ;doprnt.c: 1474: while(prec--) {
 13021  000C52  D027               	goto	i2l4618
 13022  000C54                     i2l4614:
 13023                           
 13024                           ;doprnt.c: 1478: {
 13025                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13026  000C54  501D               	movf	i2printf@prec,w,c
 13027  000C56  0D02               	mullw	2
 13028  000C58  0EC6               	movlw	low _dpowers
 13029  000C5A  24F3               	addwf	prodl,w,c
 13030  000C5C  6EF6               	movwf	tblptrl,c
 13031  000C5E  0EFD               	movlw	high _dpowers
 13032  000C60  20F4               	addwfc	prodh,w,c
 13033  000C62  6EF7               	movwf	tblptrh,c
 13034  000C64                     	if	1	;There are 3 active tblptr bytes
 13035  000C64  6AF8               	clrf	tblptru,c
 13036  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 13037  000C68  22F8               	addwfc	tblptru,f,c
 13038  000C6A                     	endif
 13039  000C6A  0009               	tblrd		*+
 13040  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 13041  000C70  000A               	tblrd		*-
 13042  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 13043  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 13044  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13045  000C7E  ECAC  F012         	call	i2___lwdiv	;wreg free
 13046  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 13047  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13048  000C8A  0E00               	movlw	0
 13049  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 13050  000C8E  0E0A               	movlw	10
 13051  000C90  6E03               	movwf	i2___lwmod@divisor,c
 13052  000C92  ECF8  F012         	call	i2___lwmod	;wreg free
 13053  000C96  5001               	movf	?i2___lwmod,w,c
 13054  000C98  0F30               	addlw	48
 13055  000C9A  6E27               	movwf	i2printf@c,c
 13056                           
 13057                           ;doprnt.c: 1523: }
 13058                           ;doprnt.c: 1524: (putch(c) );
 13059  000C9C  5027               	movf	i2printf@c,w,c
 13060  000C9E  ECDA  F015         	call	i2_putch
 13061  000CA2                     i2l4618:
 13062  000CA2  061D               	decf	i2printf@prec,f,c
 13063  000CA4  281D               	incf	i2printf@prec,w,c
 13064  000CA6  A4D8               	btfss	status,2,c
 13065  000CA8  D7D5               	goto	i2l4614
 13066  000CAA                     i2l4620:
 13067  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13068  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13069  000CB2  4A0D               	infsnz	i2printf@f,f,c
 13070  000CB4  2A0E               	incf	i2printf@f+1,f,c
 13071  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13072  000CB6  6AF8               	clrf	tblptru,c
 13073  000CB8                     	endif
 13074  000CB8                     	if	0	;tblptru may be non-zero
 13075  000CB8                     	endif
 13076  000CB8  0008               	tblrd		*
 13077  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 13078  000CBE  5027               	movf	i2printf@c,w,c
 13079  000CC0  B4D8               	btfsc	status,2,c
 13080  000CC2  0012               	return	
 13081  000CC4  D662               	goto	i2l4496
 13082  000CC6                     __end_ofi2_printf:
 13083                           	opt stack 0
 13084                           pclatu	equ	0xFFB
 13085                           pclath	equ	0xFFA
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           intcon	equ	0xFF2
 13093                           intcon2	equ	0xFF1
 13094                           intcon3	equ	0xFF0
 13095                           indf0	equ	0xFEF
 13096                           postinc0	equ	0xFEE
 13097                           fsr0h	equ	0xFEA
 13098                           fsr0l	equ	0xFE9
 13099                           wreg	equ	0xFE8
 13100                           postdec1	equ	0xFE5
 13101                           fsr1h	equ	0xFE2
 13102                           fsr1l	equ	0xFE1
 13103                           indf2	equ	0xFDF
 13104                           postinc2	equ	0xFDE
 13105                           postdec2	equ	0xFDD
 13106                           fsr2h	equ	0xFDA
 13107                           fsr2l	equ	0xFD9
 13108                           status	equ	0xFD8
 13109                           
 13110 ;; *************** function i2_putch *****************
 13111 ;; Defined at:
 13112 ;;		line 19 in file "lcd.c"
 13113 ;; Parameters:    Size  Location     Type
 13114 ;;  data            1    wreg     unsigned char 
 13115 ;; Auto vars:     Size  Location     Type
 13116 ;;  data            1    2[COMRAM] unsigned char 
 13117 ;; Return value:  Size  Location     Type
 13118 ;;                  1    wreg      void 
 13119 ;; Registers used:
 13120 ;;		wreg, status,2, status,0, cstack
 13121 ;; Tracked objects:
 13122 ;;		On entry : 0/0
 13123 ;;		On exit  : 0/0
 13124 ;;		Unchanged: 0/0
 13125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;Total ram usage:        1 bytes
 13131 ;; Hardware stack levels used:    1
 13132 ;; Hardware stack levels required when called:    1
 13133 ;; This function calls:
 13134 ;;		i2_lcdNibble
 13135 ;; This function is called by:
 13136 ;;		i2_printf
 13137 ;; This function uses a non-reentrant model
 13138 ;;
 13139                           
 13140                           	psect	text61
 13141  002BB4                     __ptext61:
 13142                           	opt stack 0
 13143  002BB4                     i2_putch:
 13144                           	opt stack 19
 13145                           
 13146                           ;incstack = 0
 13147                           ;i2putch@data stored from wreg
 13148  002BB4  6E03               	movwf	i2putch@data,c
 13149                           
 13150                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13151  002BB6  848C               	bsf	3980,2,c	;volatile
 13152                           
 13153                           ;lcd.c: 21: lcdNibble(data);
 13154  002BB8  5003               	movf	i2putch@data,w,c
 13155  002BBA  EC81  F012         	call	i2_lcdNibble
 13156  002BBE  0012               	return		;funcret
 13157  002BC0                     __end_ofi2_putch:
 13158                           	opt stack 0
 13159                           pclatu	equ	0xFFB
 13160                           pclath	equ	0xFFA
 13161                           tblptru	equ	0xFF8
 13162                           tblptrh	equ	0xFF7
 13163                           tblptrl	equ	0xFF6
 13164                           tablat	equ	0xFF5
 13165                           prodh	equ	0xFF4
 13166                           prodl	equ	0xFF3
 13167                           intcon	equ	0xFF2
 13168                           intcon2	equ	0xFF1
 13169                           intcon3	equ	0xFF0
 13170                           indf0	equ	0xFEF
 13171                           postinc0	equ	0xFEE
 13172                           fsr0h	equ	0xFEA
 13173                           fsr0l	equ	0xFE9
 13174                           wreg	equ	0xFE8
 13175                           postdec1	equ	0xFE5
 13176                           fsr1h	equ	0xFE2
 13177                           fsr1l	equ	0xFE1
 13178                           indf2	equ	0xFDF
 13179                           postinc2	equ	0xFDE
 13180                           postdec2	equ	0xFDD
 13181                           fsr2h	equ	0xFDA
 13182                           fsr2l	equ	0xFD9
 13183                           status	equ	0xFD8
 13184                           
 13185 ;; *************** function i2_isdigit *****************
 13186 ;; Defined at:
 13187 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  c               1    wreg     unsigned char 
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  c               1    2[COMRAM] unsigned char 
 13192 ;; Return value:  Size  Location     Type
 13193 ;;		None               void
 13194 ;; Registers used:
 13195 ;;		wreg, status,2, status,0
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;Total ram usage:        3 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; This function calls:
 13208 ;;		Nothing
 13209 ;; This function is called by:
 13210 ;;		i2_printf
 13211 ;; This function uses a non-reentrant model
 13212 ;;
 13213                           
 13214                           	psect	text62
 13215  002AFA                     __ptext62:
 13216                           	opt stack 0
 13217  002AFA                     i2_isdigit:
 13218                           	opt stack 20
 13219                           
 13220                           ;incstack = 0
 13221                           ;i2isdigit@c stored from wreg
 13222  002AFA  6E03               	movwf	i2isdigit@c,c
 13223  002AFC  0E00               	movlw	0
 13224  002AFE  6E02               	movwf	i2_isdigit$1670,c
 13225  002B00  0E3A               	movlw	58
 13226  002B02  6003               	cpfslt	i2isdigit@c,c
 13227  002B04  D005               	goto	i2l4236
 13228  002B06  0E2F               	movlw	47
 13229  002B08  6403               	cpfsgt	i2isdigit@c,c
 13230  002B0A  D002               	goto	i2l4236
 13231  002B0C  0E01               	movlw	1
 13232  002B0E  6E02               	movwf	i2_isdigit$1670,c
 13233  002B10                     i2l4236:
 13234  002B10  C002  F001         	movff	i2_isdigit$1670,??i2_isdigit
 13235  002B14  3001               	rrcf	??i2_isdigit,w,c
 13236  002B16  0012               	return	
 13237  002B18                     __end_ofi2_isdigit:
 13238                           	opt stack 0
 13239                           pclatu	equ	0xFFB
 13240                           pclath	equ	0xFFA
 13241                           tblptru	equ	0xFF8
 13242                           tblptrh	equ	0xFF7
 13243                           tblptrl	equ	0xFF6
 13244                           tablat	equ	0xFF5
 13245                           prodh	equ	0xFF4
 13246                           prodl	equ	0xFF3
 13247                           intcon	equ	0xFF2
 13248                           intcon2	equ	0xFF1
 13249                           intcon3	equ	0xFF0
 13250                           indf0	equ	0xFEF
 13251                           postinc0	equ	0xFEE
 13252                           fsr0h	equ	0xFEA
 13253                           fsr0l	equ	0xFE9
 13254                           wreg	equ	0xFE8
 13255                           postdec1	equ	0xFE5
 13256                           fsr1h	equ	0xFE2
 13257                           fsr1l	equ	0xFE1
 13258                           indf2	equ	0xFDF
 13259                           postinc2	equ	0xFDE
 13260                           postdec2	equ	0xFDD
 13261                           fsr2h	equ	0xFDA
 13262                           fsr2l	equ	0xFD9
 13263                           status	equ	0xFD8
 13264                           
 13265 ;; *************** function i2___wmul *****************
 13266 ;; Defined at:
 13267 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13268 ;; Parameters:    Size  Location     Type
 13269 ;;  multiplier      2    0[COMRAM] unsigned int 
 13270 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  __wmul          2    4[COMRAM] unsigned int 
 13273 ;; Return value:  Size  Location     Type
 13274 ;;                  2    0[COMRAM] unsigned int 
 13275 ;; Registers used:
 13276 ;;		wreg, status,2, status,0, prodl, prodh
 13277 ;; Tracked objects:
 13278 ;;		On entry : 0/0
 13279 ;;		On exit  : 0/0
 13280 ;;		Unchanged: 0/0
 13281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13285 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;Total ram usage:        6 bytes
 13287 ;; Hardware stack levels used:    1
 13288 ;; This function calls:
 13289 ;;		Nothing
 13290 ;; This function is called by:
 13291 ;;		_printSortTimer
 13292 ;;		i2_printf
 13293 ;; This function uses a non-reentrant model
 13294 ;;
 13295                           
 13296                           	psect	text63
 13297  002A6A                     __ptext63:
 13298                           	opt stack 0
 13299  002A6A                     i2___wmul:
 13300                           	opt stack 20
 13301                           
 13302                           ;incstack = 0
 13303  002A6A  5001               	movf	i2___wmul@multiplier,w,c
 13304  002A6C  0203               	mulwf	i2___wmul@multiplicand,c
 13305  002A6E  CFF3 F005          	movff	prodl,i2___wmul@product
 13306  002A72  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13307  002A76  5001               	movf	i2___wmul@multiplier,w,c
 13308  002A78  0204               	mulwf	i2___wmul@multiplicand+1,c
 13309  002A7A  50F3               	movf	prodl,w,c
 13310  002A7C  2606               	addwf	i2___wmul@product+1,f,c
 13311  002A7E  5002               	movf	i2___wmul@multiplier+1,w,c
 13312  002A80  0203               	mulwf	i2___wmul@multiplicand,c
 13313  002A82  50F3               	movf	prodl,w,c
 13314  002A84  2606               	addwf	i2___wmul@product+1,f,c
 13315  002A86  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13316  002A8A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13317  002A8E  0012               	return	
 13318  002A90                     __end_ofi2___wmul:
 13319                           	opt stack 0
 13320                           pclatu	equ	0xFFB
 13321                           pclath	equ	0xFFA
 13322                           tblptru	equ	0xFF8
 13323                           tblptrh	equ	0xFF7
 13324                           tblptrl	equ	0xFF6
 13325                           tablat	equ	0xFF5
 13326                           prodh	equ	0xFF4
 13327                           prodl	equ	0xFF3
 13328                           intcon	equ	0xFF2
 13329                           intcon2	equ	0xFF1
 13330                           intcon3	equ	0xFF0
 13331                           indf0	equ	0xFEF
 13332                           postinc0	equ	0xFEE
 13333                           fsr0h	equ	0xFEA
 13334                           fsr0l	equ	0xFE9
 13335                           wreg	equ	0xFE8
 13336                           postdec1	equ	0xFE5
 13337                           fsr1h	equ	0xFE2
 13338                           fsr1l	equ	0xFE1
 13339                           indf2	equ	0xFDF
 13340                           postinc2	equ	0xFDE
 13341                           postdec2	equ	0xFDD
 13342                           fsr2h	equ	0xFDA
 13343                           fsr2l	equ	0xFD9
 13344                           status	equ	0xFD8
 13345                           
 13346 ;; *************** function i2___lwmod *****************
 13347 ;; Defined at:
 13348 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13349 ;; Parameters:    Size  Location     Type
 13350 ;;  dividend        2    0[COMRAM] unsigned int 
 13351 ;;  divisor         2    2[COMRAM] unsigned int 
 13352 ;; Auto vars:     Size  Location     Type
 13353 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  2    0[COMRAM] unsigned int 
 13356 ;; Registers used:
 13357 ;;		wreg, status,2, status,0
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;Total ram usage:        5 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; This function calls:
 13370 ;;		Nothing
 13371 ;; This function is called by:
 13372 ;;		_printSortTimer
 13373 ;;		i2_printf
 13374 ;; This function uses a non-reentrant model
 13375 ;;
 13376                           
 13377                           	psect	text64
 13378  0025F0                     __ptext64:
 13379                           	opt stack 0
 13380  0025F0                     i2___lwmod:
 13381                           	opt stack 20
 13382                           
 13383                           ;incstack = 0
 13384  0025F0  5003               	movf	i2___lwmod@divisor,w,c
 13385  0025F2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13386  0025F4  B4D8               	btfsc	status,2,c
 13387  0025F6  D018               	goto	i2l1761
 13388  0025F8  0E01               	movlw	1
 13389  0025FA  6E05               	movwf	i2___lwmod@counter,c
 13390  0025FC  D004               	goto	i2l4268
 13391  0025FE                     i2l4266:
 13392  0025FE  90D8               	bcf	status,0,c
 13393  002600  3603               	rlcf	i2___lwmod@divisor,f,c
 13394  002602  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13395  002604  2A05               	incf	i2___lwmod@counter,f,c
 13396  002606                     i2l4268:
 13397  002606  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13398  002608  D7FA               	goto	i2l4266
 13399  00260A                     i2l4270:
 13400  00260A  5003               	movf	i2___lwmod@divisor,w,c
 13401  00260C  5C01               	subwf	i2___lwmod@dividend,w,c
 13402  00260E  5004               	movf	i2___lwmod@divisor+1,w,c
 13403  002610  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13404  002612  A0D8               	btfss	status,0,c
 13405  002614  D004               	goto	i2l4274
 13406  002616  5003               	movf	i2___lwmod@divisor,w,c
 13407  002618  5E01               	subwf	i2___lwmod@dividend,f,c
 13408  00261A  5004               	movf	i2___lwmod@divisor+1,w,c
 13409  00261C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13410  00261E                     i2l4274:
 13411  00261E  90D8               	bcf	status,0,c
 13412  002620  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13413  002622  3203               	rrcf	i2___lwmod@divisor,f,c
 13414  002624  2E05               	decfsz	i2___lwmod@counter,f,c
 13415  002626  D7F1               	goto	i2l4270
 13416  002628                     i2l1761:
 13417  002628  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13418  00262C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13419  002630  0012               	return		;funcret
 13420  002632                     __end_ofi2___lwmod:
 13421                           	opt stack 0
 13422                           pclatu	equ	0xFFB
 13423                           pclath	equ	0xFFA
 13424                           tblptru	equ	0xFF8
 13425                           tblptrh	equ	0xFF7
 13426                           tblptrl	equ	0xFF6
 13427                           tablat	equ	0xFF5
 13428                           prodh	equ	0xFF4
 13429                           prodl	equ	0xFF3
 13430                           intcon	equ	0xFF2
 13431                           intcon2	equ	0xFF1
 13432                           intcon3	equ	0xFF0
 13433                           indf0	equ	0xFEF
 13434                           postinc0	equ	0xFEE
 13435                           fsr0h	equ	0xFEA
 13436                           fsr0l	equ	0xFE9
 13437                           wreg	equ	0xFE8
 13438                           postdec1	equ	0xFE5
 13439                           fsr1h	equ	0xFE2
 13440                           fsr1l	equ	0xFE1
 13441                           indf2	equ	0xFDF
 13442                           postinc2	equ	0xFDE
 13443                           postdec2	equ	0xFDD
 13444                           fsr2h	equ	0xFDA
 13445                           fsr2l	equ	0xFD9
 13446                           status	equ	0xFD8
 13447                           
 13448 ;; *************** function i2___lwdiv *****************
 13449 ;; Defined at:
 13450 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  dividend        2    5[COMRAM] unsigned int 
 13453 ;;  divisor         2    7[COMRAM] unsigned int 
 13454 ;; Auto vars:     Size  Location     Type
 13455 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13456 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  2    5[COMRAM] unsigned int 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:        7 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; This function calls:
 13473 ;;		Nothing
 13474 ;; This function is called by:
 13475 ;;		_printSortTimer
 13476 ;;		i2_printf
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text65
 13481  002558                     __ptext65:
 13482                           	opt stack 0
 13483  002558                     i2___lwdiv:
 13484                           	opt stack 20
 13485                           
 13486                           ;incstack = 0
 13487  002558  0E00               	movlw	0
 13488  00255A  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13489  00255C  0E00               	movlw	0
 13490  00255E  6E0A               	movwf	i2___lwdiv@quotient,c
 13491  002560  5008               	movf	i2___lwdiv@divisor,w,c
 13492  002562  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13493  002564  B4D8               	btfsc	status,2,c
 13494  002566  D01C               	goto	i2l1751
 13495  002568  0E01               	movlw	1
 13496  00256A  6E0C               	movwf	i2___lwdiv@counter,c
 13497  00256C  D004               	goto	i2l4248
 13498  00256E                     i2l4246:
 13499  00256E  90D8               	bcf	status,0,c
 13500  002570  3608               	rlcf	i2___lwdiv@divisor,f,c
 13501  002572  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13502  002574  2A0C               	incf	i2___lwdiv@counter,f,c
 13503  002576                     i2l4248:
 13504  002576  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13505  002578  D7FA               	goto	i2l4246
 13506  00257A                     i2l4250:
 13507  00257A  90D8               	bcf	status,0,c
 13508  00257C  360A               	rlcf	i2___lwdiv@quotient,f,c
 13509  00257E  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13510  002580  5008               	movf	i2___lwdiv@divisor,w,c
 13511  002582  5C06               	subwf	i2___lwdiv@dividend,w,c
 13512  002584  5009               	movf	i2___lwdiv@divisor+1,w,c
 13513  002586  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13514  002588  A0D8               	btfss	status,0,c
 13515  00258A  D005               	goto	i2l4258
 13516  00258C  5008               	movf	i2___lwdiv@divisor,w,c
 13517  00258E  5E06               	subwf	i2___lwdiv@dividend,f,c
 13518  002590  5009               	movf	i2___lwdiv@divisor+1,w,c
 13519  002592  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13520  002594  800A               	bsf	i2___lwdiv@quotient,0,c
 13521  002596                     i2l4258:
 13522  002596  90D8               	bcf	status,0,c
 13523  002598  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13524  00259A  3208               	rrcf	i2___lwdiv@divisor,f,c
 13525  00259C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13526  00259E  D7ED               	goto	i2l4250
 13527  0025A0                     i2l1751:
 13528  0025A0  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13529  0025A4  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13530  0025A8  0012               	return		;funcret
 13531  0025AA                     __end_ofi2___lwdiv:
 13532                           	opt stack 0
 13533                           pclatu	equ	0xFFB
 13534                           pclath	equ	0xFFA
 13535                           tblptru	equ	0xFF8
 13536                           tblptrh	equ	0xFF7
 13537                           tblptrl	equ	0xFF6
 13538                           tablat	equ	0xFF5
 13539                           prodh	equ	0xFF4
 13540                           prodl	equ	0xFF3
 13541                           intcon	equ	0xFF2
 13542                           intcon2	equ	0xFF1
 13543                           intcon3	equ	0xFF0
 13544                           indf0	equ	0xFEF
 13545                           postinc0	equ	0xFEE
 13546                           fsr0h	equ	0xFEA
 13547                           fsr0l	equ	0xFE9
 13548                           wreg	equ	0xFE8
 13549                           postdec1	equ	0xFE5
 13550                           fsr1h	equ	0xFE2
 13551                           fsr1l	equ	0xFE1
 13552                           indf2	equ	0xFDF
 13553                           postinc2	equ	0xFDE
 13554                           postdec2	equ	0xFDD
 13555                           fsr2h	equ	0xFDA
 13556                           fsr2l	equ	0xFD9
 13557                           status	equ	0xFD8
 13558                           
 13559 ;; *************** function i2_lcdInst *****************
 13560 ;; Defined at:
 13561 ;;		line 14 in file "lcd.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;  data            1    wreg     unsigned char 
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;  data            1    2[COMRAM] unsigned char 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      void 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13579 ;;Total ram usage:        1 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    1
 13582 ;; This function calls:
 13583 ;;		i2_lcdNibble
 13584 ;; This function is called by:
 13585 ;;		_change_state_to_menu_11
 13586 ;;		_change_state_to_menu_23
 13587 ;;		_change_state_to_logs_11
 13588 ;;		_change_state_to_logs_12
 13589 ;;		_change_state_to_logs_22
 13590 ;;		_change_state_to_logs_23
 13591 ;;		_change_state_to_logs_33
 13592 ;;		_change_state_to_logs_34
 13593 ;;		_printSortTimer
 13594 ;;		i2_change_state_to_menu_start
 13595 ;;		i2_change_state_to_menu_12
 13596 ;;		i2_change_state_to_menu_22
 13597 ;;		i2_printRTC
 13598 ;; This function uses a non-reentrant model
 13599 ;;
 13600                           
 13601                           	psect	text66
 13602  002BC0                     __ptext66:
 13603                           	opt stack 0
 13604  002BC0                     i2_lcdInst:
 13605                           	opt stack 19
 13606                           
 13607                           ;incstack = 0
 13608                           ;i2lcdInst@data stored from wreg
 13609  002BC0  6E03               	movwf	i2lcdInst@data,c
 13610                           
 13611                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13612  002BC2  948C               	bcf	3980,2,c	;volatile
 13613                           
 13614                           ;lcd.c: 16: lcdNibble(data);
 13615  002BC4  5003               	movf	i2lcdInst@data,w,c
 13616  002BC6  EC81  F012         	call	i2_lcdNibble
 13617  002BCA  0012               	return		;funcret
 13618  002BCC                     __end_ofi2_lcdInst:
 13619                           	opt stack 0
 13620                           pclatu	equ	0xFFB
 13621                           pclath	equ	0xFFA
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           intcon3	equ	0xFF0
 13631                           indf0	equ	0xFEF
 13632                           postinc0	equ	0xFEE
 13633                           fsr0h	equ	0xFEA
 13634                           fsr0l	equ	0xFE9
 13635                           wreg	equ	0xFE8
 13636                           postdec1	equ	0xFE5
 13637                           fsr1h	equ	0xFE2
 13638                           fsr1l	equ	0xFE1
 13639                           indf2	equ	0xFDF
 13640                           postinc2	equ	0xFDE
 13641                           postdec2	equ	0xFDD
 13642                           fsr2h	equ	0xFDA
 13643                           fsr2l	equ	0xFD9
 13644                           status	equ	0xFD8
 13645                           
 13646 ;; *************** function i2_lcdNibble *****************
 13647 ;; Defined at:
 13648 ;;		line 24 in file "lcd.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  data            1    wreg     unsigned char 
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;  data            1    1[COMRAM] unsigned char 
 13653 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      void 
 13656 ;; Registers used:
 13657 ;;		wreg, status,2, status,0
 13658 ;; Tracked objects:
 13659 ;;		On entry : 0/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13666 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13667 ;;Total ram usage:        2 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; This function calls:
 13670 ;;		Nothing
 13671 ;; This function is called by:
 13672 ;;		i2_lcdInst
 13673 ;;		i2_putch
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text67
 13678  002502                     __ptext67:
 13679                           	opt stack 0
 13680  002502                     i2_lcdNibble:
 13681                           	opt stack 19
 13682                           
 13683                           ;incstack = 0
 13684                           ;i2lcdNibble@data stored from wreg
 13685  002502  6E02               	movwf	i2lcdNibble@data,c
 13686                           
 13687                           ;lcd.c: 26: char temp = data & 0xF0;
 13688  002504  5002               	movf	i2lcdNibble@data,w,c
 13689  002506  0BF0               	andlw	240
 13690  002508  6E01               	movwf	i2lcdNibble@temp,c
 13691                           
 13692                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13693  00250A  508C               	movf	3980,w,c	;volatile
 13694  00250C  0B0F               	andlw	15
 13695  00250E  6E8C               	movwf	3980,c	;volatile
 13696                           
 13697                           ;lcd.c: 28: LATD = temp | LATD;
 13698  002510  5001               	movf	i2lcdNibble@temp,w,c
 13699  002512  108C               	iorwf	3980,w,c	;volatile
 13700  002514  6E8C               	movwf	3980,c	;volatile
 13701                           
 13702                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13703  002516  868C               	bsf	3980,3,c	;volatile
 13704                           
 13705                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13706  002518  0E42               	movlw	66
 13707  00251A                     i2u510_47:
 13708  00251A  2EE8               	decfsz	wreg,f,c
 13709  00251C  D7FE               	bra	i2u510_47
 13710  00251E  D000               	nop2	
 13711                           
 13712                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13713  002520  968C               	bcf	3980,3,c	;volatile
 13714                           
 13715                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13716  002522  0E42               	movlw	66
 13717  002524                     i2u511_47:
 13718  002524  2EE8               	decfsz	wreg,f,c
 13719  002526  D7FE               	bra	i2u511_47
 13720  002528  D000               	nop2	
 13721                           
 13722                           ;lcd.c: 35: data = data << 4;
 13723  00252A  3802               	swapf	i2lcdNibble@data,w,c
 13724  00252C  0BF0               	andlw	240
 13725  00252E  6E02               	movwf	i2lcdNibble@data,c
 13726                           
 13727                           ;lcd.c: 37: temp = data & 0xF0;
 13728  002530  5002               	movf	i2lcdNibble@data,w,c
 13729  002532  0BF0               	andlw	240
 13730  002534  6E01               	movwf	i2lcdNibble@temp,c
 13731                           
 13732                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13733  002536  508C               	movf	3980,w,c	;volatile
 13734  002538  0B0F               	andlw	15
 13735  00253A  6E8C               	movwf	3980,c	;volatile
 13736                           
 13737                           ;lcd.c: 39: LATD = temp | LATD;
 13738  00253C  5001               	movf	i2lcdNibble@temp,w,c
 13739  00253E  108C               	iorwf	3980,w,c	;volatile
 13740  002540  6E8C               	movwf	3980,c	;volatile
 13741                           
 13742                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13743  002542  868C               	bsf	3980,3,c	;volatile
 13744                           
 13745                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13746  002544  0E42               	movlw	66
 13747  002546                     i2u512_47:
 13748  002546  2EE8               	decfsz	wreg,f,c
 13749  002548  D7FE               	bra	i2u512_47
 13750  00254A  D000               	nop2	
 13751                           
 13752                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13753  00254C  968C               	bcf	3980,3,c	;volatile
 13754                           
 13755                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13756  00254E  0E42               	movlw	66
 13757  002550                     i2u513_47:
 13758  002550  2EE8               	decfsz	wreg,f,c
 13759  002552  D7FE               	bra	i2u513_47
 13760  002554  D000               	nop2	
 13761  002556  0012               	return		;funcret
 13762  002558                     __end_ofi2_lcdNibble:
 13763                           	opt stack 0
 13764                           pclatu	equ	0xFFB
 13765                           pclath	equ	0xFFA
 13766                           tblptru	equ	0xFF8
 13767                           tblptrh	equ	0xFF7
 13768                           tblptrl	equ	0xFF6
 13769                           tablat	equ	0xFF5
 13770                           prodh	equ	0xFF4
 13771                           prodl	equ	0xFF3
 13772                           intcon	equ	0xFF2
 13773                           intcon2	equ	0xFF1
 13774                           intcon3	equ	0xFF0
 13775                           indf0	equ	0xFEF
 13776                           postinc0	equ	0xFEE
 13777                           fsr0h	equ	0xFEA
 13778                           fsr0l	equ	0xFE9
 13779                           wreg	equ	0xFE8
 13780                           postdec1	equ	0xFE5
 13781                           fsr1h	equ	0xFE2
 13782                           fsr1l	equ	0xFE1
 13783                           indf2	equ	0xFDF
 13784                           postinc2	equ	0xFDE
 13785                           postdec2	equ	0xFDD
 13786                           fsr2h	equ	0xFDA
 13787                           fsr2l	equ	0xFD9
 13788                           status	equ	0xFD8
 13789                           
 13790 ;; *************** function i2_getRTC *****************
 13791 ;; Defined at:
 13792 ;;		line 43 in file "RTC.c"
 13793 ;; Parameters:    Size  Location     Type
 13794 ;;		None
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;  getRTC          2    3[COMRAM] int 
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  1    wreg      void 
 13799 ;; Registers used:
 13800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13809 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13810 ;;Total ram usage:        2 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    2
 13813 ;; This function calls:
 13814 ;;		i2_I2C_Master_Read
 13815 ;;		i2_I2C_Master_Start
 13816 ;;		i2_I2C_Master_Stop
 13817 ;;		i2_I2C_Master_Write
 13818 ;; This function is called by:
 13819 ;;		_printSortTimer
 13820 ;;		i2_printRTC
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           	psect	text68
 13825  0022B6                     __ptext68:
 13826                           	opt stack 0
 13827  0022B6                     i2_getRTC:
 13828                           	opt stack 18
 13829                           
 13830                           ;RTC.c: 47: I2C_Master_Start();
 13831                           
 13832                           ;incstack = 0
 13833  0022B6  ECFC  F015         	call	i2_I2C_Master_Start	;wreg free
 13834                           
 13835                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13836  0022BA  0E00               	movlw	0
 13837  0022BC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13838  0022BE  0ED0               	movlw	208
 13839  0022C0  6E02               	movwf	i2I2C_Master_Write@d,c
 13840  0022C2  ECEB  F015         	call	i2_I2C_Master_Write	;wreg free
 13841                           
 13842                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13843  0022C6  0E00               	movlw	0
 13844  0022C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13845  0022CA  0E00               	movlw	0
 13846  0022CC  6E02               	movwf	i2I2C_Master_Write@d,c
 13847  0022CE  ECEB  F015         	call	i2_I2C_Master_Write	;wreg free
 13848                           
 13849                           ;RTC.c: 50: I2C_Master_Stop();
 13850  0022D2  ECF8  F015         	call	i2_I2C_Master_Stop	;wreg free
 13851                           
 13852                           ;RTC.c: 53: I2C_Master_Start();
 13853  0022D6  ECFC  F015         	call	i2_I2C_Master_Start	;wreg free
 13854                           
 13855                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13856  0022DA  0E00               	movlw	0
 13857  0022DC  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13858  0022DE  0ED1               	movlw	209
 13859  0022E0  6E02               	movwf	i2I2C_Master_Write@d,c
 13860  0022E2  ECEB  F015         	call	i2_I2C_Master_Write	;wreg free
 13861                           
 13862                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13863  0022E6  0E00               	movlw	0
 13864  0022E8  6E05               	movwf	i2getRTC@i+1,c
 13865  0022EA  0E00               	movlw	0
 13866  0022EC  6E04               	movwf	i2getRTC@i,c
 13867  0022EE                     i2l4482:
 13868  0022EE  BE05               	btfsc	i2getRTC@i+1,7,c
 13869  0022F0  D006               	goto	i2l4486
 13870  0022F2  5005               	movf	i2getRTC@i+1,w,c
 13871  0022F4  E111               	bnz	i2l4492
 13872  0022F6  0E06               	movlw	6
 13873  0022F8  5C04               	subwf	i2getRTC@i,w,c
 13874  0022FA  B0D8               	btfsc	status,0,c
 13875  0022FC  D00D               	goto	i2l4492
 13876  0022FE                     i2l4486:
 13877                           
 13878                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13879  0022FE  0EDC               	movlw	low _time
 13880  002300  2404               	addwf	i2getRTC@i,w,c
 13881  002302  6ED9               	movwf	fsr2l,c
 13882  002304  0E00               	movlw	high _time
 13883  002306  2005               	addwfc	i2getRTC@i+1,w,c
 13884  002308  6EDA               	movwf	fsr2h,c
 13885  00230A  0E01               	movlw	1
 13886  00230C  EC48  F015         	call	i2_I2C_Master_Read
 13887  002310  6EDF               	movwf	indf2,c
 13888  002312  4A04               	infsnz	i2getRTC@i,f,c
 13889  002314  2A05               	incf	i2getRTC@i+1,f,c
 13890  002316  D7EB               	goto	i2l4482
 13891  002318                     i2l4492:
 13892                           
 13893                           ;RTC.c: 57: }
 13894                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13895  002318  0E00               	movlw	0
 13896  00231A  EC48  F015         	call	i2_I2C_Master_Read
 13897  00231E  0100               	movlb	0	; () banked
 13898  002320  6FE2               	movwf	(_time+6)& (0+255),b
 13899                           
 13900                           ;RTC.c: 59: I2C_Master_Stop();
 13901  002322  ECF8  F015         	call	i2_I2C_Master_Stop	;wreg free
 13902  002326  0012               	return		;funcret
 13903  002328                     __end_ofi2_getRTC:
 13904                           	opt stack 0
 13905                           pclatu	equ	0xFFB
 13906                           pclath	equ	0xFFA
 13907                           tblptru	equ	0xFF8
 13908                           tblptrh	equ	0xFF7
 13909                           tblptrl	equ	0xFF6
 13910                           tablat	equ	0xFF5
 13911                           prodh	equ	0xFF4
 13912                           prodl	equ	0xFF3
 13913                           intcon	equ	0xFF2
 13914                           intcon2	equ	0xFF1
 13915                           intcon3	equ	0xFF0
 13916                           indf0	equ	0xFEF
 13917                           postinc0	equ	0xFEE
 13918                           fsr0h	equ	0xFEA
 13919                           fsr0l	equ	0xFE9
 13920                           wreg	equ	0xFE8
 13921                           postdec1	equ	0xFE5
 13922                           fsr1h	equ	0xFE2
 13923                           fsr1l	equ	0xFE1
 13924                           indf2	equ	0xFDF
 13925                           postinc2	equ	0xFDE
 13926                           postdec2	equ	0xFDD
 13927                           fsr2h	equ	0xFDA
 13928                           fsr2l	equ	0xFD9
 13929                           status	equ	0xFD8
 13930                           
 13931 ;; *************** function i2_I2C_Master_Write *****************
 13932 ;; Defined at:
 13933 ;;		line 48 in file "I2C.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;  d               2    1[COMRAM] unsigned int 
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;		None
 13938 ;; Return value:  Size  Location     Type
 13939 ;;                  1    wreg      void 
 13940 ;; Registers used:
 13941 ;;		wreg, status,2, status,0, cstack
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13947 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;Total ram usage:        2 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    1
 13954 ;; This function calls:
 13955 ;;		i2_I2C_Master_Wait
 13956 ;; This function is called by:
 13957 ;;		i2_getRTC
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           	psect	text69
 13962  002BD6                     __ptext69:
 13963                           	opt stack 0
 13964  002BD6                     i2_I2C_Master_Write:
 13965                           	opt stack 18
 13966                           
 13967                           ;I2C.c: 50: I2C_Master_Wait();
 13968                           
 13969                           ;incstack = 0
 13970  002BD6  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 13971                           
 13972                           ;I2C.c: 51: SSPBUF = d;
 13973  002BDA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13974  002BDE  0012               	return		;funcret
 13975  002BE0                     __end_ofi2_I2C_Master_Write:
 13976                           	opt stack 0
 13977                           pclatu	equ	0xFFB
 13978                           pclath	equ	0xFFA
 13979                           tblptru	equ	0xFF8
 13980                           tblptrh	equ	0xFF7
 13981                           tblptrl	equ	0xFF6
 13982                           tablat	equ	0xFF5
 13983                           prodh	equ	0xFF4
 13984                           prodl	equ	0xFF3
 13985                           intcon	equ	0xFF2
 13986                           intcon2	equ	0xFF1
 13987                           intcon3	equ	0xFF0
 13988                           indf0	equ	0xFEF
 13989                           postinc0	equ	0xFEE
 13990                           fsr0h	equ	0xFEA
 13991                           fsr0l	equ	0xFE9
 13992                           wreg	equ	0xFE8
 13993                           postdec1	equ	0xFE5
 13994                           fsr1h	equ	0xFE2
 13995                           fsr1l	equ	0xFE1
 13996                           indf2	equ	0xFDF
 13997                           postinc2	equ	0xFDE
 13998                           postdec2	equ	0xFDD
 13999                           fsr2h	equ	0xFDA
 14000                           fsr2l	equ	0xFD9
 14001                           status	equ	0xFD8
 14002                           
 14003 ;; *************** function i2_I2C_Master_Stop *****************
 14004 ;; Defined at:
 14005 ;;		line 42 in file "I2C.c"
 14006 ;; Parameters:    Size  Location     Type
 14007 ;;		None
 14008 ;; Auto vars:     Size  Location     Type
 14009 ;;		None
 14010 ;; Return value:  Size  Location     Type
 14011 ;;                  1    wreg      void 
 14012 ;; Registers used:
 14013 ;;		wreg, status,2, status,0, cstack
 14014 ;; Tracked objects:
 14015 ;;		On entry : 0/0
 14016 ;;		On exit  : 0/0
 14017 ;;		Unchanged: 0/0
 14018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;Total ram usage:        0 bytes
 14024 ;; Hardware stack levels used:    1
 14025 ;; Hardware stack levels required when called:    1
 14026 ;; This function calls:
 14027 ;;		i2_I2C_Master_Wait
 14028 ;; This function is called by:
 14029 ;;		i2_getRTC
 14030 ;; This function uses a non-reentrant model
 14031 ;;
 14032                           
 14033                           	psect	text70
 14034  002BF0                     __ptext70:
 14035                           	opt stack 0
 14036  002BF0                     i2_I2C_Master_Stop:
 14037                           	opt stack 18
 14038                           
 14039                           ;I2C.c: 44: I2C_Master_Wait();
 14040                           
 14041                           ;incstack = 0
 14042  002BF0  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 14043                           
 14044                           ;I2C.c: 45: PEN = 1;
 14045  002BF4  84C5               	bsf	4037,2,c	;volatile
 14046  002BF6  0012               	return		;funcret
 14047  002BF8                     __end_ofi2_I2C_Master_Stop:
 14048                           	opt stack 0
 14049                           pclatu	equ	0xFFB
 14050                           pclath	equ	0xFFA
 14051                           tblptru	equ	0xFF8
 14052                           tblptrh	equ	0xFF7
 14053                           tblptrl	equ	0xFF6
 14054                           tablat	equ	0xFF5
 14055                           prodh	equ	0xFF4
 14056                           prodl	equ	0xFF3
 14057                           intcon	equ	0xFF2
 14058                           intcon2	equ	0xFF1
 14059                           intcon3	equ	0xFF0
 14060                           indf0	equ	0xFEF
 14061                           postinc0	equ	0xFEE
 14062                           fsr0h	equ	0xFEA
 14063                           fsr0l	equ	0xFE9
 14064                           wreg	equ	0xFE8
 14065                           postdec1	equ	0xFE5
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function i2_I2C_Master_Start *****************
 14076 ;; Defined at:
 14077 ;;		line 30 in file "I2C.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;		None
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;		None
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  1    wreg      void 
 14084 ;; Registers used:
 14085 ;;		wreg, status,2, status,0, cstack
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14095 ;;Total ram usage:        0 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    1
 14098 ;; This function calls:
 14099 ;;		i2_I2C_Master_Wait
 14100 ;; This function is called by:
 14101 ;;		i2_getRTC
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text71
 14106  002BF8                     __ptext71:
 14107                           	opt stack 0
 14108  002BF8                     i2_I2C_Master_Start:
 14109                           	opt stack 18
 14110                           
 14111                           ;I2C.c: 32: I2C_Master_Wait();
 14112                           
 14113                           ;incstack = 0
 14114  002BF8  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 14115                           
 14116                           ;I2C.c: 33: SEN = 1;
 14117  002BFC  80C5               	bsf	4037,0,c	;volatile
 14118  002BFE  0012               	return		;funcret
 14119  002C00                     __end_ofi2_I2C_Master_Start:
 14120                           	opt stack 0
 14121                           pclatu	equ	0xFFB
 14122                           pclath	equ	0xFFA
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           intcon	equ	0xFF2
 14130                           intcon2	equ	0xFF1
 14131                           intcon3	equ	0xFF0
 14132                           indf0	equ	0xFEF
 14133                           postinc0	equ	0xFEE
 14134                           fsr0h	equ	0xFEA
 14135                           fsr0l	equ	0xFE9
 14136                           wreg	equ	0xFE8
 14137                           postdec1	equ	0xFE5
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           indf2	equ	0xFDF
 14141                           postinc2	equ	0xFDE
 14142                           postdec2	equ	0xFDD
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function i2_I2C_Master_Read *****************
 14148 ;; Defined at:
 14149 ;;		line 54 in file "I2C.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  a               1    wreg     unsigned char 
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;  a               1    1[COMRAM] unsigned char 
 14154 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14155 ;; Return value:  Size  Location     Type
 14156 ;;                  1    wreg      unsigned char 
 14157 ;; Registers used:
 14158 ;;		wreg, status,2, status,0, cstack
 14159 ;; Tracked objects:
 14160 ;;		On entry : 0/0
 14161 ;;		On exit  : 0/0
 14162 ;;		Unchanged: 0/0
 14163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;Total ram usage:        2 bytes
 14169 ;; Hardware stack levels used:    1
 14170 ;; Hardware stack levels required when called:    1
 14171 ;; This function calls:
 14172 ;;		i2_I2C_Master_Wait
 14173 ;; This function is called by:
 14174 ;;		i2_getRTC
 14175 ;; This function uses a non-reentrant model
 14176 ;;
 14177                           
 14178                           	psect	text72
 14179  002A90                     __ptext72:
 14180                           	opt stack 0
 14181  002A90                     i2_I2C_Master_Read:
 14182                           	opt stack 18
 14183                           
 14184                           ;incstack = 0
 14185                           ;i2I2C_Master_Read@a stored from wreg
 14186  002A90  6E02               	movwf	i2I2C_Master_Read@a,c
 14187                           
 14188                           ;I2C.c: 56: unsigned char temp;
 14189                           ;I2C.c: 57: I2C_Master_Wait();
 14190  002A92  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 14191                           
 14192                           ;I2C.c: 58: RCEN = 1;
 14193  002A96  86C5               	bsf	4037,3,c	;volatile
 14194                           
 14195                           ;I2C.c: 59: I2C_Master_Wait();
 14196  002A98  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 14197                           
 14198                           ;I2C.c: 60: temp = SSPBUF;
 14199  002A9C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14200                           
 14201                           ;I2C.c: 61: I2C_Master_Wait();
 14202  002AA0  ECC1  F015         	call	i2_I2C_Master_Wait	;wreg free
 14203                           
 14204                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14205  002AA4  5002               	movf	i2I2C_Master_Read@a,w,c
 14206  002AA6  A4D8               	btfss	status,2,c
 14207  002AA8  D002               	goto	i2u252_40
 14208  002AAA  8AC5               	bsf	4037,5,c	;volatile
 14209  002AAC  D001               	goto	i2l4212
 14210  002AAE                     i2u252_40:
 14211  002AAE  9AC5               	bcf	4037,5,c	;volatile
 14212  002AB0                     i2l4212:
 14213                           
 14214                           ;I2C.c: 63: ACKEN = 1;
 14215  002AB0  88C5               	bsf	4037,4,c	;volatile
 14216                           
 14217                           ;I2C.c: 64: return temp;
 14218  002AB2  5003               	movf	i2I2C_Master_Read@temp,w,c
 14219  002AB4  0012               	return	
 14220  002AB6                     __end_ofi2_I2C_Master_Read:
 14221                           	opt stack 0
 14222                           pclatu	equ	0xFFB
 14223                           pclath	equ	0xFFA
 14224                           tblptru	equ	0xFF8
 14225                           tblptrh	equ	0xFF7
 14226                           tblptrl	equ	0xFF6
 14227                           tablat	equ	0xFF5
 14228                           prodh	equ	0xFF4
 14229                           prodl	equ	0xFF3
 14230                           intcon	equ	0xFF2
 14231                           intcon2	equ	0xFF1
 14232                           intcon3	equ	0xFF0
 14233                           indf0	equ	0xFEF
 14234                           postinc0	equ	0xFEE
 14235                           fsr0h	equ	0xFEA
 14236                           fsr0l	equ	0xFE9
 14237                           wreg	equ	0xFE8
 14238                           postdec1	equ	0xFE5
 14239                           fsr1h	equ	0xFE2
 14240                           fsr1l	equ	0xFE1
 14241                           indf2	equ	0xFDF
 14242                           postinc2	equ	0xFDE
 14243                           postdec2	equ	0xFDD
 14244                           fsr2h	equ	0xFDA
 14245                           fsr2l	equ	0xFD9
 14246                           status	equ	0xFD8
 14247                           
 14248 ;; *************** function i2_I2C_Master_Wait *****************
 14249 ;; Defined at:
 14250 ;;		line 25 in file "I2C.c"
 14251 ;; Parameters:    Size  Location     Type
 14252 ;;		None
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;		None
 14255 ;; Return value:  Size  Location     Type
 14256 ;;                  1    wreg      void 
 14257 ;; Registers used:
 14258 ;;		wreg, status,2, status,0
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;Total ram usage:        1 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; This function calls:
 14271 ;;		Nothing
 14272 ;; This function is called by:
 14273 ;;		i2_I2C_Master_Start
 14274 ;;		i2_I2C_Master_Stop
 14275 ;;		i2_I2C_Master_Write
 14276 ;;		i2_I2C_Master_Read
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           	psect	text73
 14281  002B82                     __ptext73:
 14282                           	opt stack 0
 14283  002B82                     i2_I2C_Master_Wait:
 14284                           	opt stack 18
 14285  002B82                     i2l172:
 14286  002B82  B4C7               	btfsc	4039,2,c	;volatile
 14287  002B84  D7FE               	goto	i2l172
 14288  002B86  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14289  002B8A  0E1F               	movlw	31
 14290  002B8C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14291  002B8E  B4D8               	btfsc	status,2,c
 14292  002B90  0012               	return	
 14293  002B92  D7F7               	goto	i2l172
 14294  002B94                     __end_ofi2_I2C_Master_Wait:
 14295                           	opt stack 0
 14296                           pclatu	equ	0xFFB
 14297                           pclath	equ	0xFFA
 14298                           tblptru	equ	0xFF8
 14299                           tblptrh	equ	0xFF7
 14300                           tblptrl	equ	0xFF6
 14301                           tablat	equ	0xFF5
 14302                           prodh	equ	0xFF4
 14303                           prodl	equ	0xFF3
 14304                           intcon	equ	0xFF2
 14305                           intcon2	equ	0xFF1
 14306                           intcon3	equ	0xFF0
 14307                           indf0	equ	0xFEF
 14308                           postinc0	equ	0xFEE
 14309                           fsr0h	equ	0xFEA
 14310                           fsr0l	equ	0xFE9
 14311                           wreg	equ	0xFE8
 14312                           postdec1	equ	0xFE5
 14313                           fsr1h	equ	0xFE2
 14314                           fsr1l	equ	0xFE1
 14315                           indf2	equ	0xFDF
 14316                           postinc2	equ	0xFDE
 14317                           postdec2	equ	0xFDD
 14318                           fsr2h	equ	0xFDA
 14319                           fsr2l	equ	0xFD9
 14320                           status	equ	0xFD8
 14321                           pclatu	equ	0xFFB
 14322                           pclath	equ	0xFFA
 14323                           tblptru	equ	0xFF8
 14324                           tblptrh	equ	0xFF7
 14325                           tblptrl	equ	0xFF6
 14326                           tablat	equ	0xFF5
 14327                           prodh	equ	0xFF4
 14328                           prodl	equ	0xFF3
 14329                           intcon	equ	0xFF2
 14330                           intcon2	equ	0xFF1
 14331                           intcon3	equ	0xFF0
 14332                           indf0	equ	0xFEF
 14333                           postinc0	equ	0xFEE
 14334                           fsr0h	equ	0xFEA
 14335                           fsr0l	equ	0xFE9
 14336                           wreg	equ	0xFE8
 14337                           postdec1	equ	0xFE5
 14338                           fsr1h	equ	0xFE2
 14339                           fsr1l	equ	0xFE1
 14340                           indf2	equ	0xFDF
 14341                           postinc2	equ	0xFDE
 14342                           postdec2	equ	0xFDD
 14343                           fsr2h	equ	0xFDA
 14344                           fsr2l	equ	0xFD9
 14345                           status	equ	0xFD8
 14346                           
 14347                           	psect	rparam
 14348  0000                     pclatu	equ	0xFFB
 14349                           pclath	equ	0xFFA
 14350                           tblptru	equ	0xFF8
 14351                           tblptrh	equ	0xFF7
 14352                           tblptrl	equ	0xFF6
 14353                           tablat	equ	0xFF5
 14354                           prodh	equ	0xFF4
 14355                           prodl	equ	0xFF3
 14356                           intcon	equ	0xFF2
 14357                           intcon2	equ	0xFF1
 14358                           intcon3	equ	0xFF0
 14359                           indf0	equ	0xFEF
 14360                           postinc0	equ	0xFEE
 14361                           fsr0h	equ	0xFEA
 14362                           fsr0l	equ	0xFE9
 14363                           wreg	equ	0xFE8
 14364                           postdec1	equ	0xFE5
 14365                           fsr1h	equ	0xFE2
 14366                           fsr1l	equ	0xFE1
 14367                           indf2	equ	0xFDF
 14368                           postinc2	equ	0xFDE
 14369                           postdec2	equ	0xFDD
 14370                           fsr2h	equ	0xFDA
 14371                           fsr2l	equ	0xFD9
 14372                           status	equ	0xFD8
 14373                           
 14374                           	psect	temp
 14375  00007C                     btemp:
 14376                           	opt stack 0
 14377  00007C                     	ds	1
 14378  0000                     int$flags	set	btemp
 14379                           pclatu	equ	0xFFB
 14380                           pclath	equ	0xFFA
 14381                           tblptru	equ	0xFF8
 14382                           tblptrh	equ	0xFF7
 14383                           tblptrl	equ	0xFF6
 14384                           tablat	equ	0xFF5
 14385                           prodh	equ	0xFF4
 14386                           prodl	equ	0xFF3
 14387                           intcon	equ	0xFF2
 14388                           intcon2	equ	0xFF1
 14389                           intcon3	equ	0xFF0
 14390                           indf0	equ	0xFEF
 14391                           postinc0	equ	0xFEE
 14392                           fsr0h	equ	0xFEA
 14393                           fsr0l	equ	0xFE9
 14394                           wreg	equ	0xFE8
 14395                           postdec1	equ	0xFE5
 14396                           fsr1h	equ	0xFE2
 14397                           fsr1l	equ	0xFE1
 14398                           indf2	equ	0xFDF
 14399                           postinc2	equ	0xFDE
 14400                           postdec2	equ	0xFDD
 14401                           fsr2h	equ	0xFDA
 14402                           fsr2l	equ	0xFD9
 14403                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     123
    BANK0           128     84     128
    BANK1           256      0      18
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_ID
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _Distribution->_updateServoPosition
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   41171
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3543
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              2     2      0    2051
                                             10 BANK0      2     2      0
                          _initFlags
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           0     0      0    1285
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    1285
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    1285
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _initFlags
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      12       7        7.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10D      34        0.0%
DATA                 0      0     10D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 16:23:30 2017

                   i2_I2C_Master_Start 2BF8                     i2_I2C_Master_Write 2BD6  
                                   _ID 1AFC                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l260 2B76                                    l172 2B48  
                                  l257 2B70                                    l382 00E0  
                                  l760 2096                                    l983 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F3  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 2874  
      __end_of_change_state_to_menu_12 2716        __end_of_change_state_to_menu_22 26DE  
      __end_of_change_state_to_menu_23 2844           _f_can_coming_to_distribution 00ED  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 2964  
      __end_of_change_state_to_logs_12 2934        __end_of_change_state_to_logs_22 2904  
      __end_of_change_state_to_logs_23 29C0        __end_of_change_state_to_logs_33 28D4  
      __end_of_change_state_to_logs_34 28A4                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1168 227C  
                                 l4300 05AA                                   l4310 05E8  
                                 l4126 298A                                   l1751 2236  
                                 l4160 21E6                                   l4144 2A38  
                                 l4400 08BC                                   l4304 05B4  
                                 l1761 23E8                                   l5210 1C7C  
                                 l4162 21F2                                   l4402 08C8  
                                 l4410 08F6                                   l4330 06A8  
                                 l5212 1C88                                   l5204 1C5E  
                                 l4172 2228                                   l4164 21F8  
                                 l4180 23A4                                   l4412 08FC  
                                 l4340 0720                                   l5230 1CE0  
                                 l5222 1CBE                                   l5214 1C8E  
                                 l4182 23B0                                   l4406 08E2  
                                 l4342 0738                                   l4326 0696  
                                 l4318 0664                                   l4350 077C  
                                 l5142 1BDA                                   l4184 23B6  
                                 l4416 0954                                   l4336 070E  
                                 l4328 06A2                                   l4352 07B0  
                                 l4424 2182                                   l4440 272C  
                                 l5400 0264                                   l5320 00F8  
                                 l5128 1B9A                                   l5226 1CCC  
                                 l5250 1F46                                   l5242 1F22  
                                 l4362 07E0                                   l4346 0764  
                                 l4338 071A                                   l4418 0960  
                                 l4434 21B8                                   l5410 0280  
                                 l5330 011A                                   l5322 00FE  
                                 l1698 1D94                                   l5170 1A20  
                                 l5138 1BCC                                   l5146 1BE8  
                                 l5082 1DE4                                   l5252 1F52  
                                 l4188 23DA                                   l4364 07E6  
                                 l4428 2198                                   l4460 1D28  
                                 l4444 2268                                   l5164 19D2  
                                 l4284 29D4                                   l5254 1F58  
                                 l5262 1F8A                                   l5246 1F32  
                                 l4382 0844                                   l4294 0584  
                                 l4438 2720                                   l5414 0298  
                                 l5406 0276                                   l5334 0132  
                                 l5326 0110                                   l4470 1D82  
                                 l4462 1D2E                                   l4446 2292  
                                 l5166 19EC                                   l5174 1A3A  
                                 l4286 29E6                                   l4376 0822  
                                 l5520 047C                                   l5512 045A  
                                 l5440 0324                                   l5432 0302  
                                 l5360 01B8                                   l5352 0196  
                                 l5168 1A06                                   l5176 1A68  
                                 l5096 1E1C                                   l5266 1F9E  
                                 l5258 1F7C                                   l4394 08A0  
                                 l4386 087C                                   l4298 0598  
                                 l5530 0498                                   l5450 0340  
                                 l5370 01D4                                   l5338 0144  
                                 l4458 1D18                                   l4388 0886  
                                 l4660 0DA4                                   l4652 0CFA  
                                 l5516 0464                                   l5436 030C  
                                 l5356 01A0                                   l5198 1C48  
                                 l4670 0E3A                                   l4662 0DC2  
                                 l5534 04B0                                   l5526 048E  
                                 l5454 0358                                   l5446 0336  
                                 l5374 01EC                                   l5366 01CA  
                                 l4680 0ED0                                   l4672 0E58  
                                 l4664 0DE0                                   l5560 0528  
                                 l5552 0506                                   l5480 03D0  
                                 l5472 03AE                                   l5392 0242  
                                 l4674 0E76                                   l4666 0DFE  
                                 l4658 0D86                                   l5570 0544  
                                 l5490 03EC                                   l4676 0E94  
                                 l4668 0E1C                                   l4684 0EEE  
                                 l5556 0510                                   l5476 03B8  
                                 l5396 024C                                   l4780 1E6A  
                                 l4678 0EB2                                   l4686 0F4C  
                                 l5574 055C                                   l5566 053A  
                                 l5494 0404                                   l5486 03E2  
                                 l4790 1EF6                                   _ADIE 007CEE  
                                 l4880 1FEA                                   l4784 1E80  
                                 _ADFM 007E07                                   l5578 0568  
                                 l4890 202C                                   l4884 2000  
                                 l5874 206C                                   l5890 2098  
                                 l5884 208C                                   l5876 2072  
                                 l5886 2092                                   l5878 2078  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u2420 2988  
                                 u3240 24F8                                   u3250 24FA  
                                 u2710 075A                                   u5007 046C  
                                 u3280 0D7C                                   u3520 1B30  
                                 u5017 04A0                                   u3265 2422  
                                 u5027 04CA                                   u2717 0750  
                                 u5037 0518                                   u2670 06E2  
                                 u3550 1B8A                                   u5047 054C  
                                 u3528 1B34                                   u5057 2348  
                                 u5067 2352                                   _PEIE 007F96  
                                 u5077 237E                                   u2677 06D8  
                                 u3558 1B8E                                   u5087 2388  
                                 _RCEN 007E2B                                   u4807 29DC  
                                 u4817 1A76                                   u4907 0206  
                                 u4827 1AAA                                   u4917 0254  
                                 u4837 25B2                                   u4757 1DCE  
                                 u4927 0288                                   u4847 25E6  
                                 u4767 1E4C                                   u4937 02B2  
                                 u4857 002A                                   u4777 1B16  
                                 u4947 0314                                   u4867 0122  
                                 u4787 1B72                                   u4957 0348  
                                 u4877 0152                                   u4797 1C10  
                                 u4967 0372                                   u4887 01A8  
                                 u4977 03C0                                   u4897 01DC  
                                 u4987 03F4                                   u4997 041E  
                                 _THIR 007A                                   _RSEN 007E29  
                          _stopSignals 2B32                                   _back 0063  
                                 _main 2034                                   _down 006D  
                                 _keys FDB5                                   _time 00DC  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 2AB6  
                                 btemp 007C                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 2BC0  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1250                            i2_lcdNibble 2502  
                      __end_of_Loading 1E5C                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1CEA                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1FA8                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1DA6  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                        __end_of___lwdiv 2240  
                      __end_of___lwmod 23F2                                  i2l172 2B82  
                                i2l434 124C                        ___awdiv@counter 008A  
                                i2l983 12DE                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _THMAG 00FA  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2BB4  
                      __end_of_handler 19C4                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 29EC                        __end_of_initLCD 25F0  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 2034                        __end_of_readMAG 2502  
                      __end_of_dpowers FDD0                                  _first 00FE  
                                _enter 006F                        __end_of_isdigit 2A42  
                                _input 0079                                  _putch 2B94  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 2A90                       __end_ofi2_getRTC 2328  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 27B4                       _count_can_no_lab 0065  
                      __initialization 20BC                     __size_ofi2_lcdInst 000C  
                         __end_of_main 20BC                           __end_of_keys FDC6  
                         __end_of_sort 2AD8                             i2printf@ap 001E  
                           i2printf@cp 0020                     __size_ofi2_isdigit 001E  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00D4                                 ??_sort 008E  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 27E4              i2_change_state_to_menu_22 27B4  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1271 191C  
                               i2l1275 1968                                 i2l1277 1988  
                               i2l5000 1794                                 i2l5010 17B2  
                               i2l4212 2AB0                                 i2l5012 17B6  
                               i2l5030 17E6                                 i2l5006 179E  
                               i2l1751 25A0                                 i2l5024 17D8  
                               i2l5016 17C0                                 i2l1761 2628  
                               i2l4250 257A                                 i2l5042 181C  
                               i2l5034 17F8                                 i2l4236 2B10  
                               i2l4500 099A                                 i2l5052 1838  
                               i2l4246 256E                                 i2l4270 260A  
                               i2l4502 09A8                                 i2l5046 182E  
                               i2l5038 180A                                 i2l4248 2576  
                               i2l4520 0A42                                 i2l4512 09E0  
                               i2l4258 2596                                 i2l4274 261E  
                               i2l4266 25FE                                 i2l4602 0C20  
                               i2l4530 0A74                                 i2l4506 09AE  
                               i2l4268 2606                                 i2l4604 0C28  
                               i2l4612 0C4E                                 i2l4540 0ACC  
                               i2l4532 0A78                                 i2l4620 0CAA  
                               i2l4614 0C54                                 i2l4542 0AD2  
                               i2l4608 0C3C                                 i2l4544 0AE4  
                               i2l4528 0A6A                                 i2l4552 0B20  
                               i2l4624 278C                                 i2l4482 22EE  
                               i2l4618 0CA2                                 i2l4538 0AC2  
                               i2l4554 0B50                                 i2l6170 1726  
                               i2l4626 2794                                 i2l6162 1200  
                               i2l5602 0FF0                                 i2l4492 2318  
                               i2l4564 0B78                                 i2l4548 0B0E  
                               i2l6172 1742                                 i2l6164 1222  
                               i2l4486 22FE                                 i2l4590 0BF4  
                               i2l4566 0B7C                                 i2l6166 123E  
                               i2l5710 117E                                 i2l5702 1162  
                               i2l5630 1046                                 i2l5622 1028  
                               i2l5614 100C                                 i2l5606 0FFE  
                               i2l4584 0BC8                                 i2l4496 098A  
                               i2l4840 12FE                                 i2l4832 127C  
                               i2l4578 0BAE                                 i2l4850 136C  
                               i2l4842 1314                                 i2l5730 11D4  
                               i2l5722 11B0                                 i2l5714 1194  
                               i2l5706 1170                                 i2l5650 1094  
                               i2l5642 1070                                 i2l5634 1054  
                               i2l5626 1038                                 i2l5618 101A  
                               i2l4596 0C0A                                 i2l4588 0BEC  
                               i2l4860 13DA                                 i2l4852 1382  
                               i2l4844 132A                                 i2l5830 14A2  
                               i2l4942 16B8                                 i2l4934 169E  
                               i2l4854 1398                                 i2l4846 1340  
                               i2l4838 12E8                                 i2l5726 11BE  
                               i2l5718 11A2                                 i2l5670 10E2  
                               i2l5662 10BE                                 i2l5654 10A2  
                               i2l5646 107E                                 i2l5638 1062  
                               i2l5590 0FC6                                 i2l4960 16F6  
                               i2l4944 16C8                                 i2l4952 16D6  
                               i2l4856 13AE                                 i2l4848 1356  
                               i2l4864 13F0                                 i2l5736 11E2  
                               i2l5826 1492                                 i2l4962 16FC  
                               i2l4970 170E                                 i2l4946 16CC  
                               i2l4858 13C4                                 i2l4866 144A  
                               i2l5690 1130                                 i2l5682 1114  
                               i2l5674 10F0                                 i2l5666 10D4  
                               i2l5658 10B0                                 i2l5594 0FD4  
                               i2l5914 18D4                                 i2l5836 14FC  
                               i2l4964 1702                                 i2l4956 16EA  
                               i2l5588 0FC0                                 i2l5846 15BE  
                               i2l4990 176A                                 i2l4982 1752  
                               i2l4966 1708                                 i2l4958 16F0  
                               i2l5694 113E                                 i2l5686 1122  
                               i2l5678 10FE                                 i2l5598 0FE2  
                               i2l5950 193A                                 i2l5952 193C  
                               i2l5928 18F0                                 i2l5698 1154  
                               i2l4996 1778                                 i2l5974 1986  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR3CF 005D                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 0088  
                     __end_of_dispLogs 2B70                            ?i2_printRTC 0001  
                 __end_of_Distribution 1AFC                                 ___wmul 274C  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                                 _getRTC 2142  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 2AFA                                 _initUI 2B18  
                               clear_0 211A                                 clear_1 2126  
                               clear_2 2132                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 2B70  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 0576                              ??_handler 004B  
                               _strcpy 2716                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 2A6A  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 2A42  
                         __pdataCOMRAM 007A                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 25AA                       __end_of_printRTC 0F90  
                         __mediumconst FDB4                      __end_ofi2___lwmod 2632  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 2BCC  
                    __end_ofi2_isdigit 2B18                             __accesstop 0080  
              __end_of__initialization 2138                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 2C00                           __pidataBANK1 2C06  
                          i2printRTC@i 0041                          _initSortTimer 1E5C  
          __end_of_updateServoPosition 22B6                          __end_of_putch 2BA4  
                          i2printf@len 0024                            i2printf@val 0022  
                           __end_of_ID 1C2C                             __end_of_UI 0576  
                   printSortTimer@hour 003F                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002D  
   __end_of_change_state_to_menu_start 2A18          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 29EC                  printSortTimer@cur_sec 003D  
                            ?i2_printf 000D                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0069                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                     __size_of_initFlags 003C  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_602 00D0                                UI@i_603 00D1  
                              UI@i_606 00D2                                UI@i_607 00D3  
                       ?_initSortTimer 0001                                UI@i_590 00CA  
                              UI@i_591 00CB                                UI@i_594 00CC  
                              UI@i_586 00C8                                UI@i_595 00CD  
                              UI@i_587 00C9                                UI@i_598 00CE  
                              UI@i_599 00CF                                ?___wmul 0080  
                              ?_getRTC 0001                                ?_initUI 0001  
             updateServoPosition@timer 0082                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2028 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 2BB4  
                            ?_initTime 0080                        _f_loadingNewCan 00F1  
                      i2printRTC@month 003D                  __size_of_Distribution 0138  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 2390  
                              _Loading 1DA6            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 1C2C  
                              ___awmod 1F06                             _initServos 266E  
                              ___lldiv 1CEA                        __size_of___wmul 0036  
                              ___lwdiv 21C8                                ___lwmod 2390  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                        __size_of_initUI 001A  
                              __pcinit 20BC                                __ramtop 1000  
                              _lcdInst 2BA4                                _handler 0008  
                              __ptext0 2034                                __ptext1 2B32  
                              __ptext2 2AB6                                __ptext3 1DA6  
                              __ptext4 1E5C                                __ptext5 266E  
                              __ptext6 2632                                __ptext7 1AFC  
                              __ptext8 24AC                                __ptext9 29C0  
                    __end_of_initFlags 266E                        __size_of_printf 040A  
                              _readADC 29C0                        __size_of_strcpy 0036  
                              _initLCD 25AA                                _cur_can 00E7  
                              _loadRTC 1FA8                                _readMAG 24AC  
                              _dpowers FDC6                                _isdigit 2A18  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0077                             ??_dispLogs 0003  
                         _Distribution 19C4                         __pintcode_body 1866  
                 end_of_initialization 2138                             ??_initTime 0086  
                              int_func 1866                    i2___wmul@multiplier 0001  
                  __size_of_PortTestA5 0012              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                           _servoTimes 00D4                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 24AC                             _updateMenu 0F90  
                    i2_I2C_Master_Read 2A90                              _IR_signal 005B  
                    i2_I2C_Master_Wait 2B82                      i2_I2C_Master_Stop 2BF0  
                    i2___lwdiv@divisor 0008                              i2___lwdiv 2558  
                            i2___lwmod 25F0                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 1486                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 2BC0  
                           _total_time 00F7                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 2AFA                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 0061                            ?_initServos 0001  
                       __end_of___wmul 2782                         __end_of_getRTC 21C8  
                 __size_ofi2_lcdNibble 0056                          __pidataCOMRAM 2C0A  
                        i2lcdInst@data 0003                         __end_of_initUI 2B32  
                     i2___wmul@product 0005                         __end_of_printf 0980  
                         i2printf@flag 0026                         __end_of_strcpy 274C  
            __end_ofi2_I2C_Master_Read 2AB6              __end_ofi2_I2C_Master_Wait 2B94  
                         i2printf@prec 001D                    start_initialization 20BC  
            __end_ofi2_I2C_Master_Stop 2BF8                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 0067  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                               ??___wmul 0084  
                             ??_getRTC 0083                            __pdataBANK0 00FA  
                          __pdataBANK1 010E                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2143 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01FA                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1670 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 0038  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 006B                     __end_of_PortTestA5 2B82  
                     _I2C_Master_Start 2BE8                              _f_lastCan 00EF  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2BCC                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 2328                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0073                              _initFlags 2632  
                            _cur_state 00E9                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0130  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 2C00  
           __end_ofi2_I2C_Master_Write 2BE0                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u301_40 0AA6                               i2u301_47 0A9C  
                             i2u305_40 0B06                               i2u305_47 0AFC  
                             i2u252_40 2AAE                               i2u332_40 12DE  
                             i2u510_47 251A                               i2u511_47 2524  
                             i2u512_47 2546                               i2u513_47 2550  
                             i2u509_47 16BE                               i2u462_40 15B8  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 2A6A                          lcdNibble@data 0081  
                             i2_getRTC 22B6                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                           ?_initFlags 0001                               i2_printf 0980  
                             i2_strcpy 2782                    I2C_Master_Read@temp 0082  
                            copy_data0 20D0                              copy_data1 20F0  
                     __size_ofi2_putch 000C                            _count_total 00E5  
                             __Hrparam 0000                       __size_of_Loading 00B6  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                __end_of_initSortTimer 1F06                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2844             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 26DE             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 26A6                _change_state_to_menu_23 2814  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2934  
              _change_state_to_logs_12 2904                _change_state_to_logs_22 28D4  
              _change_state_to_logs_23 2992                _change_state_to_logs_33 28A4  
              _change_state_to_logs_34 2874                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 19BC  
                      _I2C_Master_Init 23F2                       __size_of_readADC 002C  
                      _I2C_Master_Read 2964                       __size_of_initLCD 0046  
                         _f_ID_receive 00FC                       __size_of_loadRTC 008C  
                     __size_of_readMAG 0056                        _I2C_Master_Wait 2B48  
                      _I2C_Master_Stop 2BE0                       __size_of_isdigit 002A  
                       _printSortTimer 1486                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                               __ptext10 19C4  
                             __ptext11 2240                               __ptext20 0012  
                             __ptext12 2452                               __ptext21 0CC6  
                             __ptext13 2B18                               __ptext30 26DE  
                             __ptext22 2716                               __ptext14 1FA8  
                             __ptext31 0576                               __ptext23 2142  
                             __ptext15 23F2                               __ptext40 1C2C  
                             __ptext32 2B94                               __ptext24 2BCC  
                             __ptext16 1CEA                               __ptext41 2B70  
                             __ptext33 2A18                               __ptext25 2BE0  
                             __ptext17 29EC                               __ptext50 2814  
                             __ptext34 274C                               __ptext26 2BE8  
                             __ptext18 2AD8                               __ptext51 2844  
                             __ptext43 0F90                               __ptext35 2390  
                             __ptext27 2964                               __ptext19 25AA  
                             __ptext60 0980                               __ptext52 2874  
                             __ptext44 2A42                               __ptext36 21C8  
                             __ptext28 2B48                               __ptext61 2BB4  
                             __ptext53 28A4                               __ptext45 1250  
                             __ptext37 2BA4                               __ptext29 26A6  
                             __ptext70 2BF0                               __ptext62 2AFA  
                             __ptext54 2992                               __ptext46 2782  
                             __ptext38 2328                               __ptext71 2BF8  
                             __ptext63 2A6A                               __ptext55 28D4  
                             __ptext47 1680                               __ptext39 1F06  
                             __ptext72 2A90                               __ptext64 25F0  
                             __ptext56 2904                               __ptext48 27B4  
                             __ptext73 2B82                               __ptext65 2558  
                             __ptext57 2934                               __ptext49 27E4  
                             __ptext66 2BC0                               __ptext58 2B5C  
                             __ptext67 2502                               __ptext59 1486  
                             __ptext68 22B6                               __ptext69 2BD6  
                             _dispLogs 2B5C                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1670 0002  
                   __end_of_initServos 26A6                               _initTime 2AD8  
                        __size_of_main 0088                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F5  
                  _updateServoPosition 2240                 __size_of_machineConfig 005A  
                        ??i2_lcdNibble 0001                               _printRTC 0CC6  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007C                     _f_can_coming_to_ID 00EB  
                            printf@len 00A5                              printf@val 00A3  
    __end_ofi2_change_state_to_menu_12 2814      __end_ofi2_change_state_to_menu_22 27E4  
                             loadRTC@i 0096                 __end_of_printSortTimer 1680  
                            putch@data 0082               __end_of_I2C_Master_Start 2BF0  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 2BD6  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                            ??_initFlags 0080  
                           _MAG_signal 00E3                               isdigit@c 0082  
                             intlevel2 0000                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                    __end_of_stopSignals 2B48  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2452  
              __end_of_I2C_Master_Read 2992                __end_of_I2C_Master_Wait 2B5C  
              __end_of_I2C_Master_Stop 2BE8                            lcdInst@data 0082  
                        printRTC@F3193 010E                    __end_ofi2_lcdNibble 2558  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 2452                        ___lwmod@counter 008B  
                          _TMR3counter 005F                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F9  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
