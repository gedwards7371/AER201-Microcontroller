

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 03 15:52:34 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   105                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   106  0000                     
   107                           ; Version 1.40
   108                           ; Generated 01/12/2016 GMT
   109                           ; 
   110                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   111                           ; All rights reserved.
   112                           ; 
   113                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   114                           ; 
   115                           ; Redistribution and use in source and binary forms, with or without modification, are
   116                           ; permitted provided that the following conditions are met:
   117                           ; 
   118                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   119                           ;        conditions and the following disclaimer.
   120                           ; 
   121                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   122                           ;        of conditions and the following disclaimer in the documentation and/or other
   123                           ;        materials provided with the distribution.
   124                           ; 
   125                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   126                           ;        software without specific prior written permission.
   127                           ; 
   128                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   129                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   130                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   131                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   132                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   133                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   134                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   135                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   136                           ; 
   137                           ; 
   138                           ; Code-generator required, PIC18F4620 Definitions
   139                           ; 
   140                           ; SFR Addresses
   141  0000                     
   142                           	psect	idataBANK1
   143  0040F0                     __pidataBANK1:
   144                           	opt stack 0
   145                           
   146                           ;initializer for UI@F3220
   147  0040F0  4D                 	db	77
   148  0040F1  4D                 	db	77
   149  0040F2  4D                 	db	77
   150  0040F3  00                 	db	0
   151                           
   152                           ;initializer for printRTC@F3211
   153  0040F4  4D                 	db	77
   154  0040F5  4D                 	db	77
   155  0040F6  4D                 	db	77
   156  0040F7  00                 	db	0
   157                           
   158                           	psect	mediumconst
   159  00FB4E                     __pmediumconst:
   160                           	opt stack 0
   161  00FB4E  00                 	db	0
   162  00FB4F                     _keys:
   163                           	opt stack 0
   164  00FB4F  31                 	db	49
   165  00FB50  32                 	db	50
   166  00FB51  33                 	db	51
   167  00FB52  41                 	db	65
   168  00FB53  34                 	db	52
   169  00FB54  35                 	db	53
   170  00FB55  36                 	db	54
   171  00FB56  42                 	db	66
   172  00FB57  37                 	db	55
   173  00FB58  38                 	db	56
   174  00FB59  39                 	db	57
   175  00FB5A  43                 	db	67
   176  00FB5B  2A                 	db	42
   177  00FB5C  30                 	db	48
   178  00FB5D  23                 	db	35
   179  00FB5E  44                 	db	68
   180  00FB5F  00                 	db	0
   181  00FB60                     __end_of_keys:
   182                           	opt stack 0
   183  00FB60                     _dpowers:
   184                           	opt stack 0
   185  00FB60  0001               	dw	1
   186  00FB62  000A               	dw	10
   187  00FB64  0064               	dw	100
   188  00FB66  03E8               	dw	1000
   189  00FB68  2710               	dw	10000
   190  00FB6A                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _ADCON0	set	4034
   193  0000                     _ADCON0bits	set	4034
   194  0000                     _ADCON1	set	4033
   195  0000                     _ADCON2	set	4032
   196  0000                     _ADRESH	set	4036
   197  0000                     _ADRESL	set	4035
   198  0000                     _CMCONbits	set	4020
   199  0000                     _CVRCON	set	4021
   200  0000                     _EEADR	set	4009
   201  0000                     _EEADRH	set	4010
   202  0000                     _EECON1bits	set	4006
   203  0000                     _EECON2	set	4007
   204  0000                     _EEDATA	set	4008
   205  0000                     _INTCONbits	set	4082
   206  0000                     _LATA	set	3977
   207  0000                     _LATAbits	set	3977
   208  0000                     _LATB	set	3978
   209  0000                     _LATC	set	3979
   210  0000                     _LATCbits	set	3979
   211  0000                     _LATD	set	3980
   212  0000                     _LATDbits	set	3980
   213  0000                     _LATE	set	3981
   214  0000                     _LATEbits	set	3981
   215  0000                     _OSCCON	set	4051
   216  0000                     _OSCTUNEbits	set	3995
   217  0000                     _PIR2bits	set	4001
   218  0000                     _PORTAbits	set	3968
   219  0000                     _PORTB	set	3969
   220  0000                     _PORTBbits	set	3969
   221  0000                     _SSPADD	set	4040
   222  0000                     _SSPBUF	set	4041
   223  0000                     _SSPCON1	set	4038
   224  0000                     _SSPCON2	set	4037
   225  0000                     _SSPSTAT	set	4039
   226  0000                     _T0CON	set	4053
   227  0000                     _T1CON	set	4045
   228  0000                     _TMR0H	set	4055
   229  0000                     _TMR0L	set	4054
   230  0000                     _TMR1H	set	4047
   231  0000                     _TMR1L	set	4046
   232  0000                     _TMR3H	set	4019
   233  0000                     _TMR3L	set	4018
   234  0000                     _TRISA	set	3986
   235  0000                     _TRISB	set	3987
   236  0000                     _TRISC	set	3988
   237  0000                     _TRISD	set	3989
   238  0000                     _TRISE	set	3990
   239  0000                     _ACKDT	set	32301
   240  0000                     _ACKEN	set	32300
   241  0000                     _ADIE	set	31982
   242  0000                     _INT1IE	set	32643
   243  0000                     _INT1IF	set	32640
   244  0000                     _PEIE	set	32662
   245  0000                     _PEN	set	32298
   246  0000                     _RCEN	set	32299
   247  0000                     _RSEN	set	32297
   248  0000                     _SEN	set	32296
   249  0000                     _TMR0IE	set	32661
   250  0000                     _TMR0IF	set	32658
   251  0000                     _TMR0ON	set	32431
   252  0000                     _TMR1IE	set	31976
   253  0000                     _TMR1IF	set	31984
   254  0000                     _TMR1ON	set	32360
   255  0000                     _TMR2IE	set	31977
   256  0000                     _TMR3IE	set	32001
   257  0000                     _TMR3IF	set	32009
   258  0000                     _TMR3ON	set	32136
   259  0000                     _TRISC3	set	31907
   260  0000                     _TRISC4	set	31908
   261  0000                     _nRBPU	set	32655
   262  00FB6A                     STR_21:
   263  00FB6A  25                 	db	37
   264  00FB6B  30                 	db	48	;'0'
   265  00FB6C  32                 	db	50	;'2'
   266  00FB6D  64                 	db	100	;'d'
   267  00FB6E  25                 	db	37
   268  00FB6F  73                 	db	115	;'s'
   269  00FB70  20                 	db	32
   270  00FB71  7C                 	db	124
   271  00FB72  20                 	db	32
   272  00FB73  25                 	db	37
   273  00FB74  30                 	db	48	;'0'
   274  00FB75  32                 	db	50	;'2'
   275  00FB76  64                 	db	100	;'d'
   276  00FB77  3A                 	db	58	;':'
   277  00FB78  25                 	db	37
   278  00FB79  30                 	db	48	;'0'
   279  00FB7A  32                 	db	50	;'2'
   280  00FB7B  64                 	db	100	;'d'
   281  00FB7C  3A                 	db	58	;':'
   282  00FB7D  25                 	db	37
   283  00FB7E  30                 	db	48	;'0'
   284  00FB7F  32                 	db	50	;'2'
   285  00FB80  64                 	db	100	;'d'
   286  00FB81  00                 	db	0
   287  00FB82                     STR_66:
   288  00FB82  28                 	db	40
   289  00FB83  64                 	db	100	;'d'
   290  00FB84  61                 	db	97	;'a'
   291  00FB85  74                 	db	116	;'t'
   292  00FB86  61                 	db	97	;'a'
   293  00FB87  3A                 	db	58	;':'
   294  00FB88  20                 	db	32
   295  00FB89  25                 	db	37
   296  00FB8A  75                 	db	117	;'u'
   297  00FB8B  2C                 	db	44
   298  00FB8C  20                 	db	32
   299  00FB8D  61                 	db	97	;'a'
   300  00FB8E  64                 	db	100	;'d'
   301  00FB8F  64                 	db	100	;'d'
   302  00FB90  72                 	db	114	;'r'
   303  00FB91  3A                 	db	58	;':'
   304  00FB92  20                 	db	32
   305  00FB93  25                 	db	37
   306  00FB94  75                 	db	117	;'u'
   307  00FB95  29                 	db	41
   308  00FB96  00                 	db	0
   309  00FB97                     STR_27:
   310  00FB97  4E                 	db	78	;'N'
   311  00FB98  4F                 	db	79	;'O'
   312  00FB99  20                 	db	32
   313  00FB9A  4C                 	db	76	;'L'
   314  00FB9B  41                 	db	65	;'A'
   315  00FB9C  42                 	db	66	;'B'
   316  00FB9D  3A                 	db	58	;':'
   317  00FB9E  20                 	db	32
   318  00FB9F  25                 	db	37
   319  00FBA0  64                 	db	100	;'d'
   320  00FBA1  7C                 	db	124
   321  00FBA2  4C                 	db	76	;'L'
   322  00FBA3  41                 	db	65	;'A'
   323  00FBA4  42                 	db	66	;'B'
   324  00FBA5  3A                 	db	58	;':'
   325  00FBA6  20                 	db	32
   326  00FBA7  25                 	db	37
   327  00FBA8  64                 	db	100	;'d'
   328  00FBA9  00                 	db	0
   329  00FBAA                     STR_25:
   330  00FBAA  4E                 	db	78	;'N'
   331  00FBAB  4F                 	db	79	;'O'
   332  00FBAC  20                 	db	32
   333  00FBAD  54                 	db	84	;'T'
   334  00FBAE  41                 	db	65	;'A'
   335  00FBAF  42                 	db	66	;'B'
   336  00FBB0  3A                 	db	58	;':'
   337  00FBB1  20                 	db	32
   338  00FBB2  25                 	db	37
   339  00FBB3  64                 	db	100	;'d'
   340  00FBB4  7C                 	db	124
   341  00FBB5  54                 	db	84	;'T'
   342  00FBB6  41                 	db	65	;'A'
   343  00FBB7  42                 	db	66	;'B'
   344  00FBB8  3A                 	db	58	;':'
   345  00FBB9  20                 	db	32
   346  00FBBA  25                 	db	37
   347  00FBBB  64                 	db	100	;'d'
   348  00FBBC  00                 	db	0
   349  00FBBD                     STR_105:
   350  00FBBD  44                 	db	68	;'D'
   351  00FBBE  20                 	db	32
   352  00FBBF  57                 	db	87	;'W'
   353  00FBC0  49                 	db	73	;'I'
   354  00FBC1  4C                 	db	76	;'L'
   355  00FBC2  4C                 	db	76	;'L'
   356  00FBC3  20                 	db	32
   357  00FBC4  52                 	db	82	;'R'
   358  00FBC5  45                 	db	69	;'E'
   359  00FBC6  54                 	db	84	;'T'
   360  00FBC7  55                 	db	85	;'U'
   361  00FBC8  52                 	db	82	;'R'
   362  00FBC9  4E                 	db	78	;'N'
   363  00FBCA  20                 	db	32
   364  00FBCB  20                 	db	32
   365  00FBCC  20                 	db	32
   366  00FBCD  20                 	db	32
   367  00FBCE  00                 	db	0
   368  00FBCF                     STR_106:
   369  00FBCF  4F                 	db	79	;'O'
   370  00FBD0  54                 	db	84	;'T'
   371  00FBD1  48                 	db	72	;'H'
   372  00FBD2  45                 	db	69	;'E'
   373  00FBD3  52                 	db	82	;'R'
   374  00FBD4  20                 	db	32
   375  00FBD5  53                 	db	83	;'S'
   376  00FBD6  45                 	db	69	;'E'
   377  00FBD7  54                 	db	84	;'T'
   378  00FBD8  53                 	db	83	;'S'
   379  00FBD9  20                 	db	32
   380  00FBDA  52                 	db	82	;'R'
   381  00FBDB  41                 	db	65	;'A'
   382  00FBDC  35                 	db	53	;'5'
   383  00FBDD  20                 	db	32
   384  00FBDE  20                 	db	32
   385  00FBDF  20                 	db	32
   386  00FBE0  00                 	db	0
   387  00FBE1                     STR_3:
   388  00FBE1  2D                 	db	45
   389  00FBE2  2D                 	db	45
   390  00FBE3  20                 	db	32
   391  00FBE4  4C                 	db	76	;'L'
   392  00FBE5  4F                 	db	79	;'O'
   393  00FBE6  47                 	db	71	;'G'
   394  00FBE7  20                 	db	32
   395  00FBE8  25                 	db	37
   396  00FBE9  32                 	db	50	;'2'
   397  00FBEA  64                 	db	100	;'d'
   398  00FBEB  20                 	db	32
   399  00FBEC  48                 	db	72	;'H'
   400  00FBED  45                 	db	69	;'E'
   401  00FBEE  52                 	db	82	;'R'
   402  00FBEF  45                 	db	69	;'E'
   403  00FBF0  2D                 	db	45
   404  00FBF1  2D                 	db	45
   405  00FBF2  00                 	db	0
   406  00FBF3                     STR_1:
   407  00FBF3  52                 	db	82	;'R'
   408  00FBF4  45                 	db	69	;'E'
   409  00FBF5  53                 	db	83	;'S'
   410  00FBF6  55                 	db	85	;'U'
   411  00FBF7  4C                 	db	76	;'L'
   412  00FBF8  54                 	db	84	;'T'
   413  00FBF9  53                 	db	83	;'S'
   414  00FBFA  20                 	db	32
   415  00FBFB  49                 	db	73	;'I'
   416  00FBFC  4E                 	db	78	;'N'
   417  00FBFD  20                 	db	32
   418  00FBFE  4C                 	db	76	;'L'
   419  00FBFF  4F                 	db	79	;'O'
   420  00FC00  47                 	db	71	;'G'
   421  00FC01  20                 	db	32
   422  00FC02  25                 	db	37
   423  00FC03  64                 	db	100	;'d'
   424  00FC04  00                 	db	0
   425  00FC05                     STR_97:
   426  00FC05  4D                 	db	77	;'M'
   427  00FC06  49                 	db	73	;'I'
   428  00FC07  44                 	db	68	;'D'
   429  00FC08  20                 	db	32
   430  00FC09  2D                 	db	45
   431  00FC0A  2D                 	db	45
   432  00FC0B  20                 	db	32
   433  00FC0C  32                 	db	50	;'2'
   434  00FC0D  73                 	db	115	;'s'
   435  00FC0E  20                 	db	32
   436  00FC0F  20                 	db	32
   437  00FC10  20                 	db	32
   438  00FC11  20                 	db	32
   439  00FC12  20                 	db	32
   440  00FC13  20                 	db	32
   441  00FC14  20                 	db	32
   442  00FC15  00                 	db	0
   443  00FC16                     STR_100:
   444  00FC16  44                 	db	68	;'D'
   445  00FC17  52                 	db	82	;'R'
   446  00FC18  4F                 	db	79	;'O'
   447  00FC19  50                 	db	80	;'P'
   448  00FC1A  20                 	db	32
   449  00FC1B  2D                 	db	45
   450  00FC1C  2D                 	db	45
   451  00FC1D  20                 	db	32
   452  00FC1E  32                 	db	50	;'2'
   453  00FC1F  73                 	db	115	;'s'
   454  00FC20  20                 	db	32
   455  00FC21  20                 	db	32
   456  00FC22  20                 	db	32
   457  00FC23  20                 	db	32
   458  00FC24  20                 	db	32
   459  00FC25  20                 	db	32
   460  00FC26  00                 	db	0
   461  00FC27                     STR_94:
   462  00FC27  4C                 	db	76	;'L'
   463  00FC28  45                 	db	69	;'E'
   464  00FC29  46                 	db	70	;'F'
   465  00FC2A  54                 	db	84	;'T'
   466  00FC2B  20                 	db	32
   467  00FC2C  2D                 	db	45
   468  00FC2D  2D                 	db	45
   469  00FC2E  20                 	db	32
   470  00FC2F  32                 	db	50	;'2'
   471  00FC30  73                 	db	115	;'s'
   472  00FC31  20                 	db	32
   473  00FC32  20                 	db	32
   474  00FC33  20                 	db	32
   475  00FC34  20                 	db	32
   476  00FC35  20                 	db	32
   477  00FC36  20                 	db	32
   478  00FC37  00                 	db	0
   479  00FC38                     STR_99:
   480  00FC38  4C                 	db	76	;'L'
   481  00FC39  45                 	db	69	;'E'
   482  00FC3A  56                 	db	86	;'V'
   483  00FC3B  45                 	db	69	;'E'
   484  00FC3C  4C                 	db	76	;'L'
   485  00FC3D  20                 	db	32
   486  00FC3E  2D                 	db	45
   487  00FC3F  2D                 	db	45
   488  00FC40  20                 	db	32
   489  00FC41  32                 	db	50	;'2'
   490  00FC42  73                 	db	115	;'s'
   491  00FC43  20                 	db	32
   492  00FC44  20                 	db	32
   493  00FC45  20                 	db	32
   494  00FC46  20                 	db	32
   495  00FC47  20                 	db	32
   496  00FC48  00                 	db	0
   497  00FC49                     STR_93:
   498  00FC49  52                 	db	82	;'R'
   499  00FC4A  49                 	db	73	;'I'
   500  00FC4B  47                 	db	71	;'G'
   501  00FC4C  48                 	db	72	;'H'
   502  00FC4D  54                 	db	84	;'T'
   503  00FC4E  20                 	db	32
   504  00FC4F  2D                 	db	45
   505  00FC50  2D                 	db	45
   506  00FC51  20                 	db	32
   507  00FC52  32                 	db	50	;'2'
   508  00FC53  73                 	db	115	;'s'
   509  00FC54  20                 	db	32
   510  00FC55  20                 	db	32
   511  00FC56  20                 	db	32
   512  00FC57  20                 	db	32
   513  00FC58  20                 	db	32
   514  00FC59  00                 	db	0
   515  00FC5A                     STR_92:
   516  00FC5A  4D                 	db	77	;'M'
   517  00FC5B  49                 	db	73	;'I'
   518  00FC5C  44                 	db	68	;'D'
   519  00FC5D  44                 	db	68	;'D'
   520  00FC5E  4C                 	db	76	;'L'
   521  00FC5F  45                 	db	69	;'E'
   522  00FC60  20                 	db	32
   523  00FC61  2D                 	db	45
   524  00FC62  2D                 	db	45
   525  00FC63  20                 	db	32
   526  00FC64  32                 	db	50	;'2'
   527  00FC65  73                 	db	115	;'s'
   528  00FC66  20                 	db	32
   529  00FC67  20                 	db	32
   530  00FC68  20                 	db	32
   531  00FC69  20                 	db	32
   532  00FC6A  00                 	db	0
   533  00FC6B                     STR_107:
   534  00FC6B  44                 	db	68	;'D'
   535  00FC6C  20                 	db	32
   536  00FC6D  57                 	db	87	;'W'
   537  00FC6E  49                 	db	73	;'I'
   538  00FC6F  4C                 	db	76	;'L'
   539  00FC70  4C                 	db	76	;'L'
   540  00FC71  20                 	db	32
   541  00FC72  52                 	db	82	;'R'
   542  00FC73  45                 	db	69	;'E'
   543  00FC74  54                 	db	84	;'T'
   544  00FC75  55                 	db	85	;'U'
   545  00FC76  52                 	db	82	;'R'
   546  00FC77  4E                 	db	78	;'N'
   547  00FC78  20                 	db	32
   548  00FC79  20                 	db	32
   549  00FC7A  20                 	db	32
   550  00FC7B  00                 	db	0
   551  00FC7C                     STR_95:
   552  00FC7C  4D                 	db	77	;'M'
   553  00FC7D  49                 	db	73	;'I'
   554  00FC7E  44                 	db	68	;'D'
   555  00FC7F  2D                 	db	45
   556  00FC80  4C                 	db	76	;'L'
   557  00FC81  45                 	db	69	;'E'
   558  00FC82  46                 	db	70	;'F'
   559  00FC83  54                 	db	84	;'T'
   560  00FC84  20                 	db	32
   561  00FC85  2D                 	db	45
   562  00FC86  2D                 	db	45
   563  00FC87  20                 	db	32
   564  00FC88  32                 	db	50	;'2'
   565  00FC89  73                 	db	115	;'s'
   566  00FC8A  20                 	db	32
   567  00FC8B  20                 	db	32
   568  00FC8C  00                 	db	0
   569  00FC8D                     STR_96:
   570  00FC8D  4D                 	db	77	;'M'
   571  00FC8E  49                 	db	73	;'I'
   572  00FC8F  44                 	db	68	;'D'
   573  00FC90  2D                 	db	45
   574  00FC91  52                 	db	82	;'R'
   575  00FC92  49                 	db	73	;'I'
   576  00FC93  47                 	db	71	;'G'
   577  00FC94  48                 	db	72	;'H'
   578  00FC95  54                 	db	84	;'T'
   579  00FC96  20                 	db	32
   580  00FC97  2D                 	db	45
   581  00FC98  2D                 	db	45
   582  00FC99  20                 	db	32
   583  00FC9A  32                 	db	50	;'2'
   584  00FC9B  73                 	db	115	;'s'
   585  00FC9C  20                 	db	32
   586  00FC9D  00                 	db	0
   587  00FC9E                     STR_108:
   588  00FC9E  45                 	db	69	;'E'
   589  00FC9F  4C                 	db	76	;'L'
   590  00FCA0  53                 	db	83	;'S'
   591  00FCA1  45                 	db	69	;'E'
   592  00FCA2  20                 	db	32
   593  00FCA3  54                 	db	84	;'T'
   594  00FCA4  4F                 	db	79	;'O'
   595  00FCA5  47                 	db	71	;'G'
   596  00FCA6  47                 	db	71	;'G'
   597  00FCA7  4C                 	db	76	;'L'
   598  00FCA8  45                 	db	69	;'E'
   599  00FCA9  53                 	db	83	;'S'
   600  00FCAA  20                 	db	32
   601  00FCAB  52                 	db	82	;'R'
   602  00FCAC  41                 	db	65	;'A'
   603  00FCAD  35                 	db	53	;'5'
   604  00FCAE  00                 	db	0
   605  00FCAF                     STR_72:
   606  00FCAF  41                 	db	65	;'A'
   607  00FCB0  4C                 	db	76	;'L'
   608  00FCB1  47                 	db	71	;'G'
   609  00FCB2  31                 	db	49	;'1'
   610  00FCB3  3A                 	db	58	;':'
   611  00FCB4  20                 	db	32
   612  00FCB5  39                 	db	57	;'9'
   613  00FCB6  20                 	db	32
   614  00FCB7  50                 	db	80	;'P'
   615  00FCB8  4F                 	db	79	;'O'
   616  00FCB9  50                 	db	80	;'P'
   617  00FCBA  4E                 	db	78	;'N'
   618  00FCBB  4F                 	db	79	;'O'
   619  00FCBC  54                 	db	84	;'T'
   620  00FCBD  41                 	db	65	;'A'
   621  00FCBE  42                 	db	66	;'B'
   622  00FCBF  00                 	db	0
   623  00FCC0                     STR_68:
   624  00FCC0  31                 	db	49	;'1'
   625  00FCC1  2E                 	db	46
   626  00FCC2  41                 	db	65	;'A'
   627  00FCC3  4C                 	db	76	;'L'
   628  00FCC4  47                 	db	71	;'G'
   629  00FCC5  7C                 	db	124
   630  00FCC6  32                 	db	50	;'2'
   631  00FCC7  2E                 	db	46
   632  00FCC8  53                 	db	83	;'S'
   633  00FCC9  4E                 	db	78	;'N'
   634  00FCCA  52                 	db	82	;'R'
   635  00FCCB  7C                 	db	124
   636  00FCCC  33                 	db	51	;'3'
   637  00FCCD  2E                 	db	46
   638  00FCCE  41                 	db	65	;'A'
   639  00FCCF  43                 	db	67	;'C'
   640  00FCD0  00                 	db	0
   641  00FCD1                     STR_87:
   642  00FCD1  54                 	db	84	;'T'
   643  00FCD2  53                 	db	83	;'S'
   644  00FCD3  54                 	db	84	;'T'
   645  00FCD4  3A                 	db	58	;':'
   646  00FCD5  20                 	db	32
   647  00FCD6  43                 	db	67	;'C'
   648  00FCD7  4F                 	db	79	;'O'
   649  00FCD8  4E                 	db	78	;'N'
   650  00FCD9  44                 	db	68	;'D'
   651  00FCDA  20                 	db	32
   652  00FCDB  53                 	db	83	;'S'
   653  00FCDC  4F                 	db	79	;'O'
   654  00FCDD  4C                 	db	76	;'L'
   655  00FCDE  4E                 	db	78	;'N'
   656  00FCDF  27                 	db	39
   657  00FCE0  44                 	db	68	;'D'
   658  00FCE1  00                 	db	0
   659  00FCE2                     STR_89:
   660  00FCE2  54                 	db	84	;'T'
   661  00FCE3  53                 	db	83	;'S'
   662  00FCE4  54                 	db	84	;'T'
   663  00FCE5  3A                 	db	58	;':'
   664  00FCE6  20                 	db	32
   665  00FCE7  50                 	db	80	;'P'
   666  00FCE8  55                 	db	85	;'U'
   667  00FCE9  53                 	db	83	;'S'
   668  00FCEA  48                 	db	72	;'H'
   669  00FCEB  20                 	db	32
   670  00FCEC  53                 	db	83	;'S'
   671  00FCED  4F                 	db	79	;'O'
   672  00FCEE  4C                 	db	76	;'L'
   673  00FCEF  4E                 	db	78	;'N'
   674  00FCF0  27                 	db	39
   675  00FCF1  44                 	db	68	;'D'
   676  00FCF2  00                 	db	0
   677  00FCF3                     STR_69:
   678  00FCF3  34                 	db	52	;'4'
   679  00FCF4  2E                 	db	46
   680  00FCF5  48                 	db	72	;'H'
   681  00FCF6  49                 	db	73	;'I'
   682  00FCF7  7C                 	db	124
   683  00FCF8  35                 	db	53	;'5'
   684  00FCF9  2E                 	db	46
   685  00FCFA  54                 	db	84	;'T'
   686  00FCFB  4F                 	db	79	;'O'
   687  00FCFC  47                 	db	71	;'G'
   688  00FCFD  7C                 	db	124
   689  00FCFE  36                 	db	54	;'6'
   690  00FCFF  2E                 	db	46
   691  00FD00  45                 	db	69	;'E'
   692  00FD01  45                 	db	69	;'E'
   693  00FD02  50                 	db	80	;'P'
   694  00FD03  00                 	db	0
   695  00FD04                     STR_41:
   696  00FD04  4C                 	db	76	;'L'
   697  00FD05  4F                 	db	79	;'O'
   698  00FD06  47                 	db	71	;'G'
   699  00FD07  20                 	db	32
   700  00FD08  31                 	db	49	;'1'
   701  00FD09  20                 	db	32
   702  00FD0A  20                 	db	32
   703  00FD0B  20                 	db	32
   704  00FD0C  20                 	db	32
   705  00FD0D  20                 	db	32
   706  00FD0E  20                 	db	32
   707  00FD0F  20                 	db	32
   708  00FD10  20                 	db	32
   709  00FD11  20                 	db	32
   710  00FD12  20                 	db	32
   711  00FD13  20                 	db	32
   712  00FD14  00                 	db	0
   713  00FD15                     STR_40:
   714  00FD15  4C                 	db	76	;'L'
   715  00FD16  4F                 	db	79	;'O'
   716  00FD17  47                 	db	71	;'G'
   717  00FD18  20                 	db	32
   718  00FD19  32                 	db	50	;'2'
   719  00FD1A  20                 	db	32
   720  00FD1B  20                 	db	32
   721  00FD1C  20                 	db	32
   722  00FD1D  20                 	db	32
   723  00FD1E  20                 	db	32
   724  00FD1F  20                 	db	32
   725  00FD20  20                 	db	32
   726  00FD21  20                 	db	32
   727  00FD22  20                 	db	32
   728  00FD23  20                 	db	32
   729  00FD24  20                 	db	32
   730  00FD25  00                 	db	0
   731  00FD26                     STR_44:
   732  00FD26  4C                 	db	76	;'L'
   733  00FD27  4F                 	db	79	;'O'
   734  00FD28  47                 	db	71	;'G'
   735  00FD29  20                 	db	32
   736  00FD2A  33                 	db	51	;'3'
   737  00FD2B  20                 	db	32
   738  00FD2C  20                 	db	32
   739  00FD2D  20                 	db	32
   740  00FD2E  20                 	db	32
   741  00FD2F  20                 	db	32
   742  00FD30  20                 	db	32
   743  00FD31  20                 	db	32
   744  00FD32  20                 	db	32
   745  00FD33  20                 	db	32
   746  00FD34  20                 	db	32
   747  00FD35  20                 	db	32
   748  00FD36  00                 	db	0
   749  00FD37                     STR_48:
   750  00FD37  4C                 	db	76	;'L'
   751  00FD38  4F                 	db	79	;'O'
   752  00FD39  47                 	db	71	;'G'
   753  00FD3A  20                 	db	32
   754  00FD3B  34                 	db	52	;'4'
   755  00FD3C  20                 	db	32
   756  00FD3D  20                 	db	32
   757  00FD3E  20                 	db	32
   758  00FD3F  20                 	db	32
   759  00FD40  20                 	db	32
   760  00FD41  20                 	db	32
   761  00FD42  20                 	db	32
   762  00FD43  20                 	db	32
   763  00FD44  20                 	db	32
   764  00FD45  20                 	db	32
   765  00FD46  20                 	db	32
   766  00FD47  00                 	db	0
   767  00FD48                     STR_36:
   768  00FD48  33                 	db	51	;'3'
   769  00FD49  2E                 	db	46
   770  00FD4A  20                 	db	32
   771  00FD4B  4C                 	db	76	;'L'
   772  00FD4C  4F                 	db	79	;'O'
   773  00FD4D  47                 	db	71	;'G'
   774  00FD4E  53                 	db	83	;'S'
   775  00FD4F  20                 	db	32
   776  00FD50  20                 	db	32
   777  00FD51  20                 	db	32
   778  00FD52  20                 	db	32
   779  00FD53  20                 	db	32
   780  00FD54  20                 	db	32
   781  00FD55  20                 	db	32
   782  00FD56  20                 	db	32
   783  00FD57  20                 	db	32
   784  00FD58  00                 	db	0
   785  00FD59                     STR_32:
   786  00FD59  32                 	db	50	;'2'
   787  00FD5A  2E                 	db	46
   788  00FD5B  20                 	db	32
   789  00FD5C  53                 	db	83	;'S'
   790  00FD5D  4F                 	db	79	;'O'
   791  00FD5E  52                 	db	82	;'R'
   792  00FD5F  54                 	db	84	;'T'
   793  00FD60  20                 	db	32
   794  00FD61  20                 	db	32
   795  00FD62  20                 	db	32
   796  00FD63  20                 	db	32
   797  00FD64  20                 	db	32
   798  00FD65  20                 	db	32
   799  00FD66  20                 	db	32
   800  00FD67  20                 	db	32
   801  00FD68  20                 	db	32
   802  00FD69  00                 	db	0
   803  00FD6A                     STR_33:
   804  00FD6A  31                 	db	49	;'1'
   805  00FD6B  2E                 	db	46
   806  00FD6C  20                 	db	32
   807  00FD6D  44                 	db	68	;'D'
   808  00FD6E  41                 	db	65	;'A'
   809  00FD6F  54                 	db	84	;'T'
   810  00FD70  45                 	db	69	;'E'
   811  00FD71  2F                 	db	47
   812  00FD72  54                 	db	84	;'T'
   813  00FD73  49                 	db	73	;'I'
   814  00FD74  4D                 	db	77	;'M'
   815  00FD75  45                 	db	69	;'E'
   816  00FD76  20                 	db	32
   817  00FD77  20                 	db	32
   818  00FD78  20                 	db	32
   819  00FD79  20                 	db	32
   820  00FD7A  00                 	db	0
   821  00FD7B                     STR_24:
   822  00FD7B  20                 	db	32
   823  00FD7C  2D                 	db	45
   824  00FD7D  2D                 	db	45
   825  00FD7E  20                 	db	32
   826  00FD7F  50                 	db	80	;'P'
   827  00FD80  4F                 	db	79	;'O'
   828  00FD81  50                 	db	80	;'P'
   829  00FD82  20                 	db	32
   830  00FD83  20                 	db	32
   831  00FD84  43                 	db	67	;'C'
   832  00FD85  41                 	db	65	;'A'
   833  00FD86  4E                 	db	78	;'N'
   834  00FD87  20                 	db	32
   835  00FD88  2D                 	db	45
   836  00FD89  2D                 	db	45
   837  00FD8A  20                 	db	32
   838  00FD8B  00                 	db	0
   839  00FD8C                     STR_26:
   840  00FD8C  20                 	db	32
   841  00FD8D  2D                 	db	45
   842  00FD8E  2D                 	db	45
   843  00FD8F  20                 	db	32
   844  00FD90  53                 	db	83	;'S'
   845  00FD91  4F                 	db	79	;'O'
   846  00FD92  55                 	db	85	;'U'
   847  00FD93  50                 	db	80	;'P'
   848  00FD94  20                 	db	32
   849  00FD95  43                 	db	67	;'C'
   850  00FD96  41                 	db	65	;'A'
   851  00FD97  4E                 	db	78	;'N'
   852  00FD98  20                 	db	32
   853  00FD99  2D                 	db	45
   854  00FD9A  2D                 	db	45
   855  00FD9B  20                 	db	32
   856  00FD9C  00                 	db	0
   857  00FD9D                     STR_28:
   858  00FD9D  2D                 	db	45
   859  00FD9E  2D                 	db	45
   860  00FD9F  20                 	db	32
   861  00FDA0  54                 	db	84	;'T'
   862  00FDA1  4F                 	db	79	;'O'
   863  00FDA2  54                 	db	84	;'T'
   864  00FDA3  41                 	db	65	;'A'
   865  00FDA4  4C                 	db	76	;'L'
   866  00FDA5  20                 	db	32
   867  00FDA6  43                 	db	67	;'C'
   868  00FDA7  41                 	db	65	;'A'
   869  00FDA8  4E                 	db	78	;'N'
   870  00FDA9  53                 	db	83	;'S'
   871  00FDAA  20                 	db	32
   872  00FDAB  2D                 	db	45
   873  00FDAC  2D                 	db	45
   874  00FDAD  00                 	db	0
   875  00FDAE                     STR_39:
   876  00FDAE  4C                 	db	76	;'L'
   877  00FDAF  4F                 	db	79	;'O'
   878  00FDB0  47                 	db	71	;'G'
   879  00FDB1  20                 	db	32
   880  00FDB2  31                 	db	49	;'1'
   881  00FDB3  20                 	db	32
   882  00FDB4  20                 	db	32
   883  00FDB5  20                 	db	32
   884  00FDB6  20                 	db	32
   885  00FDB7  20                 	db	32
   886  00FDB8  20                 	db	32
   887  00FDB9  20                 	db	32
   888  00FDBA  20                 	db	32
   889  00FDBB  20                 	db	32
   890  00FDBC  20                 	db	32
   891  00FDBD  3C                 	db	60	;'<'
   892  00FDBE  00                 	db	0
   893  00FDBF                     STR_42:
   894  00FDBF  4C                 	db	76	;'L'
   895  00FDC0  4F                 	db	79	;'O'
   896  00FDC1  47                 	db	71	;'G'
   897  00FDC2  20                 	db	32
   898  00FDC3  32                 	db	50	;'2'
   899  00FDC4  20                 	db	32
   900  00FDC5  20                 	db	32
   901  00FDC6  20                 	db	32
   902  00FDC7  20                 	db	32
   903  00FDC8  20                 	db	32
   904  00FDC9  20                 	db	32
   905  00FDCA  20                 	db	32
   906  00FDCB  20                 	db	32
   907  00FDCC  20                 	db	32
   908  00FDCD  20                 	db	32
   909  00FDCE  3C                 	db	60	;'<'
   910  00FDCF  00                 	db	0
   911  00FDD0                     STR_46:
   912  00FDD0  4C                 	db	76	;'L'
   913  00FDD1  4F                 	db	79	;'O'
   914  00FDD2  47                 	db	71	;'G'
   915  00FDD3  20                 	db	32
   916  00FDD4  33                 	db	51	;'3'
   917  00FDD5  20                 	db	32
   918  00FDD6  20                 	db	32
   919  00FDD7  20                 	db	32
   920  00FDD8  20                 	db	32
   921  00FDD9  20                 	db	32
   922  00FDDA  20                 	db	32
   923  00FDDB  20                 	db	32
   924  00FDDC  20                 	db	32
   925  00FDDD  20                 	db	32
   926  00FDDE  20                 	db	32
   927  00FDDF  3C                 	db	60	;'<'
   928  00FDE0  00                 	db	0
   929  00FDE1                     STR_50:
   930  00FDE1  4C                 	db	76	;'L'
   931  00FDE2  4F                 	db	79	;'O'
   932  00FDE3  47                 	db	71	;'G'
   933  00FDE4  20                 	db	32
   934  00FDE5  34                 	db	52	;'4'
   935  00FDE6  20                 	db	32
   936  00FDE7  20                 	db	32
   937  00FDE8  20                 	db	32
   938  00FDE9  20                 	db	32
   939  00FDEA  20                 	db	32
   940  00FDEB  20                 	db	32
   941  00FDEC  20                 	db	32
   942  00FDED  20                 	db	32
   943  00FDEE  20                 	db	32
   944  00FDEF  20                 	db	32
   945  00FDF0  3C                 	db	60	;'<'
   946  00FDF1  00                 	db	0
   947  00FDF2                     STR_38:
   948  00FDF2  33                 	db	51	;'3'
   949  00FDF3  2E                 	db	46
   950  00FDF4  20                 	db	32
   951  00FDF5  4C                 	db	76	;'L'
   952  00FDF6  4F                 	db	79	;'O'
   953  00FDF7  47                 	db	71	;'G'
   954  00FDF8  53                 	db	83	;'S'
   955  00FDF9  20                 	db	32
   956  00FDFA  20                 	db	32
   957  00FDFB  20                 	db	32
   958  00FDFC  20                 	db	32
   959  00FDFD  20                 	db	32
   960  00FDFE  20                 	db	32
   961  00FDFF  20                 	db	32
   962  00FE00  20                 	db	32
   963  00FE01  3C                 	db	60	;'<'
   964  00FE02  00                 	db	0
   965  00FE03                     STR_34:
   966  00FE03  32                 	db	50	;'2'
   967  00FE04  2E                 	db	46
   968  00FE05  20                 	db	32
   969  00FE06  53                 	db	83	;'S'
   970  00FE07  4F                 	db	79	;'O'
   971  00FE08  52                 	db	82	;'R'
   972  00FE09  54                 	db	84	;'T'
   973  00FE0A  20                 	db	32
   974  00FE0B  20                 	db	32
   975  00FE0C  20                 	db	32
   976  00FE0D  20                 	db	32
   977  00FE0E  20                 	db	32
   978  00FE0F  20                 	db	32
   979  00FE10  20                 	db	32
   980  00FE11  20                 	db	32
   981  00FE12  3C                 	db	60	;'<'
   982  00FE13  00                 	db	0
   983  00FE14                     STR_31:
   984  00FE14  31                 	db	49	;'1'
   985  00FE15  2E                 	db	46
   986  00FE16  20                 	db	32
   987  00FE17  44                 	db	68	;'D'
   988  00FE18  41                 	db	65	;'A'
   989  00FE19  54                 	db	84	;'T'
   990  00FE1A  45                 	db	69	;'E'
   991  00FE1B  2F                 	db	47
   992  00FE1C  54                 	db	84	;'T'
   993  00FE1D  49                 	db	73	;'I'
   994  00FE1E  4D                 	db	77	;'M'
   995  00FE1F  45                 	db	69	;'E'
   996  00FE20  20                 	db	32
   997  00FE21  20                 	db	32
   998  00FE22  20                 	db	32
   999  00FE23  3C                 	db	60	;'<'
  1000  00FE24  00                 	db	0
  1001  00FE25                     STR_6:
  1002  00FE25  50                 	db	80	;'P'
  1003  00FE26  41                 	db	65	;'A'
  1004  00FE27  55                 	db	85	;'U'
  1005  00FE28  53                 	db	83	;'S'
  1006  00FE29  45                 	db	69	;'E'
  1007  00FE2A  20                 	db	32
  1008  00FE2B  3C                 	db	60	;'<'
  1009  00FE2C  20                 	db	32
  1010  00FE2D  7C                 	db	124
  1011  00FE2E  20                 	db	32
  1012  00FE2F  42                 	db	66	;'B'
  1013  00FE30  41                 	db	65	;'A'
  1014  00FE31  43                 	db	67	;'C'
  1015  00FE32  4B                 	db	75	;'K'
  1016  00FE33  20                 	db	32
  1017  00FE34  3E                 	db	62	;'>'
  1018  00FE35  00                 	db	0
  1019  00FE36                     STR_30:
  1020  00FE36  50                 	db	80	;'P'
  1021  00FE37  55                 	db	85	;'U'
  1022  00FE38  53                 	db	83	;'S'
  1023  00FE39  48                 	db	72	;'H'
  1024  00FE3A  20                 	db	32
  1025  00FE3B  54                 	db	84	;'T'
  1026  00FE3C  4F                 	db	79	;'O'
  1027  00FE3D  20                 	db	32
  1028  00FE3E  43                 	db	67	;'C'
  1029  00FE3F  4F                 	db	79	;'O'
  1030  00FE40  4E                 	db	78	;'N'
  1031  00FE41  54                 	db	84	;'T'
  1032  00FE42  49                 	db	73	;'I'
  1033  00FE43  4E                 	db	78	;'N'
  1034  00FE44  55                 	db	85	;'U'
  1035  00FE45  45                 	db	69	;'E'
  1036  00FE46  00                 	db	0
  1037  00FE47                     STR_82:
  1038  00FE47  4D                 	db	77	;'M'
  1039  00FE48  41                 	db	65	;'A'
  1040  00FE49  47                 	db	71	;'G'
  1041  00FE4A  5F                 	db	95	;'_'
  1042  00FE4B  73                 	db	115	;'s'
  1043  00FE4C  69                 	db	105	;'i'
  1044  00FE4D  67                 	db	103	;'g'
  1045  00FE4E  6E                 	db	110	;'n'
  1046  00FE4F  61                 	db	97	;'a'
  1047  00FE50  6C                 	db	108	;'l'
  1048  00FE51  3A                 	db	58	;':'
  1049  00FE52  20                 	db	32
  1050  00FE53  25                 	db	37
  1051  00FE54  64                 	db	100	;'d'
  1052  00FE55  20                 	db	32
  1053  00FE56  00                 	db	0
  1054  00FE57                     STR_98:
  1055  00FE57  54                 	db	84	;'T'
  1056  00FE58  53                 	db	83	;'S'
  1057  00FE59  54                 	db	84	;'T'
  1058  00FE5A  3A                 	db	58	;':'
  1059  00FE5B  20                 	db	32
  1060  00FE5C  54                 	db	84	;'T'
  1061  00FE5D  49                 	db	73	;'I'
  1062  00FE5E  4C                 	db	76	;'L'
  1063  00FE5F  54                 	db	84	;'T'
  1064  00FE60  20                 	db	32
  1065  00FE61  53                 	db	83	;'S'
  1066  00FE62  45                 	db	69	;'E'
  1067  00FE63  52                 	db	82	;'R'
  1068  00FE64  56                 	db	86	;'V'
  1069  00FE65  4F                 	db	79	;'O'
  1070  00FE66  00                 	db	0
  1071  00FE67                     STR_4:
  1072  00FE67  44                 	db	68	;'D'
  1073  00FE68  49                 	db	73	;'I'
  1074  00FE69  44                 	db	68	;'D'
  1075  00FE6A  4E                 	db	78	;'N'
  1076  00FE6B  27                 	db	39
  1077  00FE6C  54                 	db	84	;'T'
  1078  00FE6D  20                 	db	32
  1079  00FE6E  43                 	db	67	;'C'
  1080  00FE6F  4F                 	db	79	;'O'
  1081  00FE70  4D                 	db	77	;'M'
  1082  00FE71  50                 	db	80	;'P'
  1083  00FE72  4C                 	db	76	;'L'
  1084  00FE73  45                 	db	69	;'E'
  1085  00FE74  54                 	db	84	;'T'
  1086  00FE75  45                 	db	69	;'E'
  1087  00FE76  00                 	db	0
  1088  00FE77                     STR_80:
  1089  00FE77  49                 	db	73	;'I'
  1090  00FE78  52                 	db	82	;'R'
  1091  00FE79  5F                 	db	95	;'_'
  1092  00FE7A  73                 	db	115	;'s'
  1093  00FE7B  69                 	db	105	;'i'
  1094  00FE7C  67                 	db	103	;'g'
  1095  00FE7D  6E                 	db	110	;'n'
  1096  00FE7E  61                 	db	97	;'a'
  1097  00FE7F  6C                 	db	108	;'l'
  1098  00FE80  3A                 	db	58	;':'
  1099  00FE81  20                 	db	32
  1100  00FE82  25                 	db	37
  1101  00FE83  64                 	db	100	;'d'
  1102  00FE84  20                 	db	32
  1103  00FE85  00                 	db	0
  1104  00FE86                     STR_104:
  1105  00FE86  43                 	db	67	;'C'
  1106  00FE87  41                 	db	65	;'A'
  1107  00FE88  4D                 	db	77	;'M'
  1108  00FE89  20                 	db	32
  1109  00FE8A  44                 	db	68	;'D'
  1110  00FE8B  57                 	db	87	;'W'
  1111  00FE8C  4E                 	db	78	;'N'
  1112  00FE8D  20                 	db	32
  1113  00FE8E  7C                 	db	124
  1114  00FE8F  52                 	db	82	;'R'
  1115  00FE90  43                 	db	67	;'C'
  1116  00FE91  30                 	db	48	;'0'
  1117  00FE92  3D                 	db	61	;'='
  1118  00FE93  30                 	db	48	;'0'
  1119  00FE94  00                 	db	0
  1120  00FE95                     STR_103:
  1121  00FE95  43                 	db	67	;'C'
  1122  00FE96  41                 	db	65	;'A'
  1123  00FE97  4D                 	db	77	;'M'
  1124  00FE98  20                 	db	32
  1125  00FE99  55                 	db	85	;'U'
  1126  00FE9A  50                 	db	80	;'P'
  1127  00FE9B  20                 	db	32
  1128  00FE9C  20                 	db	32
  1129  00FE9D  7C                 	db	124
  1130  00FE9E  52                 	db	82	;'R'
  1131  00FE9F  43                 	db	67	;'C'
  1132  00FEA0  30                 	db	48	;'0'
  1133  00FEA1  3D                 	db	61	;'='
  1134  00FEA2  31                 	db	49	;'1'
  1135  00FEA3  00                 	db	0
  1136  00FEA4                     STR_81:
  1137  00FEA4  54                 	db	84	;'T'
  1138  00FEA5  53                 	db	83	;'S'
  1139  00FEA6  54                 	db	84	;'T'
  1140  00FEA7  3A                 	db	58	;':'
  1141  00FEA8  20                 	db	32
  1142  00FEA9  4D                 	db	77	;'M'
  1143  00FEAA  41                 	db	65	;'A'
  1144  00FEAB  47                 	db	71	;'G'
  1145  00FEAC  4E                 	db	78	;'N'
  1146  00FEAD  45                 	db	69	;'E'
  1147  00FEAE  54                 	db	84	;'T'
  1148  00FEAF  49                 	db	73	;'I'
  1149  00FEB0  53                 	db	83	;'S'
  1150  00FEB1  4D                 	db	77	;'M'
  1151  00FEB2  00                 	db	0
  1152  00FEB3                     STR_102:
  1153  00FEB3  54                 	db	84	;'T'
  1154  00FEB4  53                 	db	83	;'S'
  1155  00FEB5  54                 	db	84	;'T'
  1156  00FEB6  3A                 	db	58	;':'
  1157  00FEB7  20                 	db	32
  1158  00FEB8  43                 	db	67	;'C'
  1159  00FEB9  41                 	db	65	;'A'
  1160  00FEBA  4D                 	db	77	;'M'
  1161  00FEBB  20                 	db	32
  1162  00FEBC  53                 	db	83	;'S'
  1163  00FEBD  45                 	db	69	;'E'
  1164  00FEBE  52                 	db	82	;'R'
  1165  00FEBF  56                 	db	86	;'V'
  1166  00FEC0  4F                 	db	79	;'O'
  1167  00FEC1  00                 	db	0
  1168  00FEC2                     STR_91:
  1169  00FEC2  54                 	db	84	;'T'
  1170  00FEC3  53                 	db	83	;'S'
  1171  00FEC4  54                 	db	84	;'T'
  1172  00FEC5  3A                 	db	58	;':'
  1173  00FEC6  20                 	db	32
  1174  00FEC7  50                 	db	80	;'P'
  1175  00FEC8  41                 	db	65	;'A'
  1176  00FEC9  4E                 	db	78	;'N'
  1177  00FECA  20                 	db	32
  1178  00FECB  53                 	db	83	;'S'
  1179  00FECC  45                 	db	69	;'E'
  1180  00FECD  52                 	db	82	;'R'
  1181  00FECE  56                 	db	86	;'V'
  1182  00FECF  4F                 	db	79	;'O'
  1183  00FED0  00                 	db	0
  1184  00FED1                     STR_75:
  1185  00FED1  41                 	db	65	;'A'
  1186  00FED2  4C                 	db	76	;'L'
  1187  00FED3  47                 	db	71	;'G'
  1188  00FED4  34                 	db	52	;'4'
  1189  00FED5  3A                 	db	58	;':'
  1190  00FED6  20                 	db	32
  1191  00FED7  41                 	db	65	;'A'
  1192  00FED8  4C                 	db	76	;'L'
  1193  00FED9  4C                 	db	76	;'L'
  1194  00FEDA  20                 	db	32
  1195  00FEDB  43                 	db	67	;'C'
  1196  00FEDC  41                 	db	65	;'A'
  1197  00FEDD  4E                 	db	78	;'N'
  1198  00FEDE  53                 	db	83	;'S'
  1199  00FEDF  00                 	db	0
  1200  00FEE0                     STR_85:
  1201  00FEE0  54                 	db	84	;'T'
  1202  00FEE1  53                 	db	83	;'S'
  1203  00FEE2  54                 	db	84	;'T'
  1204  00FEE3  3A                 	db	58	;':'
  1205  00FEE4  20                 	db	32
  1206  00FEE5  44                 	db	68	;'D'
  1207  00FEE6  43                 	db	67	;'C'
  1208  00FEE7  20                 	db	32
  1209  00FEE8  4D                 	db	77	;'M'
  1210  00FEE9  4F                 	db	79	;'O'
  1211  00FEEA  54                 	db	84	;'T'
  1212  00FEEB  4F                 	db	79	;'O'
  1213  00FEEC  52                 	db	82	;'R'
  1214  00FEED  53                 	db	83	;'S'
  1215  00FEEE  00                 	db	0
  1216  00FEEF                     STR_70:
  1217  00FEEF  41                 	db	65	;'A'
  1218  00FEF0  4C                 	db	76	;'L'
  1219  00FEF1  47                 	db	71	;'G'
  1220  00FEF2  4F                 	db	79	;'O'
  1221  00FEF3  52                 	db	82	;'R'
  1222  00FEF4  49                 	db	73	;'I'
  1223  00FEF5  54                 	db	84	;'T'
  1224  00FEF6  48                 	db	72	;'H'
  1225  00FEF7  4D                 	db	77	;'M'
  1226  00FEF8  20                 	db	32
  1227  00FEF9  54                 	db	84	;'T'
  1228  00FEFA  45                 	db	69	;'E'
  1229  00FEFB  53                 	db	83	;'S'
  1230  00FEFC  54                 	db	84	;'T'
  1231  00FEFD  00                 	db	0
  1232  00FEFE                     STR_86:
  1233  00FEFE  50                 	db	80	;'P'
  1234  00FEFF  49                 	db	73	;'I'
  1235  00FF00  4E                 	db	78	;'N'
  1236  00FF01  20                 	db	32
  1237  00FF02  52                 	db	82	;'R'
  1238  00FF03  41                 	db	65	;'A'
  1239  00FF04  35                 	db	53	;'5'
  1240  00FF05  20                 	db	32
  1241  00FF06  48                 	db	72	;'H'
  1242  00FF07  49                 	db	73	;'I'
  1243  00FF08  47                 	db	71	;'G'
  1244  00FF09  48                 	db	72	;'H'
  1245  00FF0A  2E                 	db	46
  1246  00FF0B  00                 	db	0
  1247  00FF0C                     STR_73:
  1248  00FF0C  41                 	db	65	;'A'
  1249  00FF0D  4C                 	db	76	;'L'
  1250  00FF0E  47                 	db	71	;'G'
  1251  00FF0F  32                 	db	50	;'2'
  1252  00FF10  3A                 	db	58	;':'
  1253  00FF11  20                 	db	32
  1254  00FF12  31                 	db	49	;'1'
  1255  00FF13  32                 	db	50	;'2'
  1256  00FF14  20                 	db	32
  1257  00FF15  43                 	db	67	;'C'
  1258  00FF16  41                 	db	65	;'A'
  1259  00FF17  4E                 	db	78	;'N'
  1260  00FF18  53                 	db	83	;'S'
  1261  00FF19  00                 	db	0
  1262  00FF1A                     STR_76:
  1263  00FF1A  41                 	db	65	;'A'
  1264  00FF1B  4C                 	db	76	;'L'
  1265  00FF1C  47                 	db	71	;'G'
  1266  00FF1D  35                 	db	53	;'5'
  1267  00FF1E  3A                 	db	58	;':'
  1268  00FF1F  20                 	db	32
  1269  00FF20  4E                 	db	78	;'N'
  1270  00FF21  4F                 	db	79	;'O'
  1271  00FF22  20                 	db	32
  1272  00FF23  43                 	db	67	;'C'
  1273  00FF24  41                 	db	65	;'A'
  1274  00FF25  4E                 	db	78	;'N'
  1275  00FF26  53                 	db	83	;'S'
  1276  00FF27  00                 	db	0
  1277  00FF28                     STR_71:
  1278  00FF28  50                 	db	80	;'P'
  1279  00FF29  55                 	db	85	;'U'
  1280  00FF2A  53                 	db	83	;'S'
  1281  00FF2B  48                 	db	72	;'H'
  1282  00FF2C  20                 	db	32
  1283  00FF2D  54                 	db	84	;'T'
  1284  00FF2E  4F                 	db	79	;'O'
  1285  00FF2F  20                 	db	32
  1286  00FF30  53                 	db	83	;'S'
  1287  00FF31  54                 	db	84	;'T'
  1288  00FF32  41                 	db	65	;'A'
  1289  00FF33  52                 	db	82	;'R'
  1290  00FF34  54                 	db	84	;'T'
  1291  00FF35  00                 	db	0
  1292  00FF36                     STR_23:
  1293  00FF36  25                 	db	37
  1294  00FF37  64                 	db	100	;'d'
  1295  00FF38  20                 	db	32
  1296  00FF39  4D                 	db	77	;'M'
  1297  00FF3A  49                 	db	73	;'I'
  1298  00FF3B  4E                 	db	78	;'N'
  1299  00FF3C  20                 	db	32
  1300  00FF3D  25                 	db	37
  1301  00FF3E  64                 	db	100	;'d'
  1302  00FF3F  20                 	db	32
  1303  00FF40  53                 	db	83	;'S'
  1304  00FF41  45                 	db	69	;'E'
  1305  00FF42  43                 	db	67	;'C'
  1306  00FF43  00                 	db	0
  1307  00FF44                     STR_2:
  1308  00FF44  54                 	db	84	;'T'
  1309  00FF45  49                 	db	73	;'I'
  1310  00FF46  4D                 	db	77	;'M'
  1311  00FF47  45                 	db	69	;'E'
  1312  00FF48  3A                 	db	58	;':'
  1313  00FF49  20                 	db	32
  1314  00FF4A  25                 	db	37
  1315  00FF4B  64                 	db	100	;'d'
  1316  00FF4C  3A                 	db	58	;':'
  1317  00FF4D  25                 	db	37
  1318  00FF4E  30                 	db	48	;'0'
  1319  00FF4F  32                 	db	50	;'2'
  1320  00FF50  64                 	db	100	;'d'
  1321  00FF51  00                 	db	0
  1322  00FF52                     STR_79:
  1323  00FF52  54                 	db	84	;'T'
  1324  00FF53  53                 	db	83	;'S'
  1325  00FF54  54                 	db	84	;'T'
  1326  00FF55  3A                 	db	58	;':'
  1327  00FF56  20                 	db	32
  1328  00FF57  49                 	db	73	;'I'
  1329  00FF58  52                 	db	82	;'R'
  1330  00FF59  20                 	db	32
  1331  00FF5A  53                 	db	83	;'S'
  1332  00FF5B  4E                 	db	78	;'N'
  1333  00FF5C  53                 	db	83	;'S'
  1334  00FF5D  52                 	db	82	;'R'
  1335  00FF5E  00                 	db	0
  1336  00FF5F                     STR_65:
  1337  00FF5F  54                 	db	84	;'T'
  1338  00FF60  49                 	db	73	;'I'
  1339  00FF61  4D                 	db	77	;'M'
  1340  00FF62  45                 	db	69	;'E'
  1341  00FF63  20                 	db	32
  1342  00FF64  25                 	db	37
  1343  00FF65  64                 	db	100	;'d'
  1344  00FF66  3A                 	db	58	;':'
  1345  00FF67  25                 	db	37
  1346  00FF68  30                 	db	48	;'0'
  1347  00FF69  32                 	db	50	;'2'
  1348  00FF6A  64                 	db	100	;'d'
  1349  00FF6B  00                 	db	0
  1350  00FF6C                     STR_74:
  1351  00FF6C  41                 	db	65	;'A'
  1352  00FF6D  4C                 	db	76	;'L'
  1353  00FF6E  47                 	db	71	;'G'
  1354  00FF6F  33                 	db	51	;'3'
  1355  00FF70  3A                 	db	58	;':'
  1356  00FF71  20                 	db	32
  1357  00FF72  31                 	db	49	;'1'
  1358  00FF73  20                 	db	32
  1359  00FF74  43                 	db	67	;'C'
  1360  00FF75  41                 	db	65	;'A'
  1361  00FF76  4E                 	db	78	;'N'
  1362  00FF77  00                 	db	0
  1363  00FF78                     STR_88:
  1364  00FF78  50                 	db	80	;'P'
  1365  00FF79  49                 	db	73	;'I'
  1366  00FF7A  4E                 	db	78	;'N'
  1367  00FF7B  20                 	db	32
  1368  00FF7C  52                 	db	82	;'R'
  1369  00FF7D  41                 	db	65	;'A'
  1370  00FF7E  33                 	db	51	;'3'
  1371  00FF7F  2E                 	db	46
  1372  00FF80  2E                 	db	46
  1373  00FF81  2E                 	db	46
  1374  00FF82  00                 	db	0
  1375  00FF83                     STR_90:
  1376  00FF83  50                 	db	80	;'P'
  1377  00FF84  49                 	db	73	;'I'
  1378  00FF85  4E                 	db	78	;'N'
  1379  00FF86  20                 	db	32
  1380  00FF87  52                 	db	82	;'R'
  1381  00FF88  41                 	db	65	;'A'
  1382  00FF89  34                 	db	52	;'4'
  1383  00FF8A  2E                 	db	46
  1384  00FF8B  2E                 	db	46
  1385  00FF8C  2E                 	db	46
  1386  00FF8D  00                 	db	0
  1387  00FF8E                     STR_64:
  1388  00FF8E  53                 	db	83	;'S'
  1389  00FF8F  4F                 	db	79	;'O'
  1390  00FF90  52                 	db	82	;'R'
  1391  00FF91  54                 	db	84	;'T'
  1392  00FF92  49                 	db	73	;'I'
  1393  00FF93  4E                 	db	78	;'N'
  1394  00FF94  47                 	db	71	;'G'
  1395  00FF95  2E                 	db	46
  1396  00FF96  2E                 	db	46
  1397  00FF97  2E                 	db	46
  1398  00FF98  00                 	db	0
  1399  00FF99                     STR_83:
  1400  00FF99  41                 	db	65	;'A'
  1401  00FF9A  43                 	db	67	;'C'
  1402  00FF9B  54                 	db	84	;'T'
  1403  00FF9C  55                 	db	85	;'U'
  1404  00FF9D  41                 	db	65	;'A'
  1405  00FF9E  54                 	db	84	;'T'
  1406  00FF9F  4F                 	db	79	;'O'
  1407  00FFA0  52                 	db	82	;'R'
  1408  00FFA1  53                 	db	83	;'S'
  1409  00FFA2  00                 	db	0
  1410  00FFA3                     STR_22:
  1411  00FFA3  44                 	db	68	;'D'
  1412  00FFA4  55                 	db	85	;'U'
  1413  00FFA5  52                 	db	82	;'R'
  1414  00FFA6  41                 	db	65	;'A'
  1415  00FFA7  54                 	db	84	;'T'
  1416  00FFA8  49                 	db	73	;'I'
  1417  00FFA9  4F                 	db	79	;'O'
  1418  00FFAA  4E                 	db	78	;'N'
  1419  00FFAB  3A                 	db	58	;':'
  1420  00FFAC  00                 	db	0
  1421  00FFAD                     STR_77:
  1422  00FFAD  53                 	db	83	;'S'
  1423  00FFAE  45                 	db	69	;'E'
  1424  00FFAF  4E                 	db	78	;'N'
  1425  00FFB0  53                 	db	83	;'S'
  1426  00FFB1  4F                 	db	79	;'O'
  1427  00FFB2  52                 	db	82	;'R'
  1428  00FFB3  53                 	db	83	;'S'
  1429  00FFB4  00                 	db	0
  1430  00FFB5                     STR_109:
  1431  00FFB5  28                 	db	40
  1432  00FFB6  6E                 	db	110	;'n'
  1433  00FFB7  75                 	db	117	;'u'
  1434  00FFB8  6C                 	db	108	;'l'
  1435  00FFB9  6C                 	db	108	;'l'
  1436  00FFBA  29                 	db	41
  1437  00FFBB  00                 	db	0
  1438  00FFBC                     STR_67:
  1439  00FFBC  46                 	db	70	;'F'
  1440  00FFBD  41                 	db	65	;'A'
  1441  00FFBE  49                 	db	73	;'I'
  1442  00FFBF  4C                 	db	76	;'L'
  1443  00FFC0  45                 	db	69	;'E'
  1444  00FFC1  44                 	db	68	;'D'
  1445  00FFC2  00                 	db	0
  1446  00FFC3                     STR_7:
  1447  00FFC3  53                 	db	83	;'S'
  1448  00FFC4  54                 	db	84	;'T'
  1449  00FFC5  41                 	db	65	;'A'
  1450  00FFC6  52                 	db	82	;'R'
  1451  00FFC7  54                 	db	84	;'T'
  1452  00FFC8  3A                 	db	58	;':'
  1453  00FFC9  00                 	db	0
  1454  00FFCA                     STR_9:
  1455  00FFCA  46                 	db	70	;'F'
  1456  00FFCB  45                 	db	69	;'E'
  1457  00FFCC  42                 	db	66	;'B'
  1458  00FFCD  00                 	db	0
  1459  00FFCE                     STR_19:
  1460  00FFCE  44                 	db	68	;'D'
  1461  00FFCF  45                 	db	69	;'E'
  1462  00FFD0  43                 	db	67	;'C'
  1463  00FFD1  00                 	db	0
  1464  00FFD2                     STR_15:
  1465  00FFD2  41                 	db	65	;'A'
  1466  00FFD3  55                 	db	85	;'U'
  1467  00FFD4  47                 	db	71	;'G'
  1468  00FFD5  00                 	db	0
  1469  00FFD6                     STR_14:
  1470  00FFD6  4A                 	db	74	;'J'
  1471  00FFD7  55                 	db	85	;'U'
  1472  00FFD8  4C                 	db	76	;'L'
  1473  00FFD9  00                 	db	0
  1474  00FFDA                     STR_8:
  1475  00FFDA  4A                 	db	74	;'J'
  1476  00FFDB  41                 	db	65	;'A'
  1477  00FFDC  4E                 	db	78	;'N'
  1478  00FFDD  00                 	db	0
  1479  00FFDE                     STR_13:
  1480  00FFDE  4A                 	db	74	;'J'
  1481  00FFDF  55                 	db	85	;'U'
  1482  00FFE0  4E                 	db	78	;'N'
  1483  00FFE1  00                 	db	0
  1484  00FFE2                     STR_16:
  1485  00FFE2  53                 	db	83	;'S'
  1486  00FFE3  45                 	db	69	;'E'
  1487  00FFE4  50                 	db	80	;'P'
  1488  00FFE5  00                 	db	0
  1489  00FFE6                     STR_10:
  1490  00FFE6  4D                 	db	77	;'M'
  1491  00FFE7  41                 	db	65	;'A'
  1492  00FFE8  52                 	db	82	;'R'
  1493  00FFE9  00                 	db	0
  1494  00FFEA                     STR_11:
  1495  00FFEA  41                 	db	65	;'A'
  1496  00FFEB  50                 	db	80	;'P'
  1497  00FFEC  52                 	db	82	;'R'
  1498  00FFED  00                 	db	0
  1499  00FFEE                     STR_20:
  1500  00FFEE  45                 	db	69	;'E'
  1501  00FFEF  52                 	db	82	;'R'
  1502  00FFF0  52                 	db	82	;'R'
  1503  00FFF1  00                 	db	0
  1504  00FFF2                     STR_17:
  1505  00FFF2  4F                 	db	79	;'O'
  1506  00FFF3  43                 	db	67	;'C'
  1507  00FFF4  54                 	db	84	;'T'
  1508  00FFF5  00                 	db	0
  1509  00FFF6                     STR_18:
  1510  00FFF6  4E                 	db	78	;'N'
  1511  00FFF7  4F                 	db	79	;'O'
  1512  00FFF8  56                 	db	86	;'V'
  1513  00FFF9  00                 	db	0
  1514  00FFFA                     STR_12:
  1515  00FFFA  4D                 	db	77	;'M'
  1516  00FFFB  41                 	db	65	;'A'
  1517  00FFFC  59                 	db	89	;'Y'
  1518  00FFFD  00                 	db	0
  1519  0000                     
  1520                           ; #config settings
  1521  00FFFE  00                 	db	0	; dummy byte at the end
  1522  0000                     
  1523                           	psect	cinit
  1524  0039C4                     __pcinit:
  1525                           	opt stack 0
  1526  0039C4                     start_initialization:
  1527                           	opt stack 0
  1528  0039C4                     __initialization:
  1529                           	opt stack 0
  1530                           
  1531                           ; Initialize objects allocated to BANK1 (8 bytes)
  1532                           ; load TBLPTR registers with __pidataBANK1
  1533  0039C4  0EF0               	movlw	low __pidataBANK1
  1534  0039C6  6EF6               	movwf	tblptrl,c
  1535  0039C8  0E40               	movlw	high __pidataBANK1
  1536  0039CA  6EF7               	movwf	tblptrh,c
  1537  0039CC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1538  0039CE  6EF8               	movwf	tblptru,c
  1539  0039D0  EE01  F02D         	lfsr	0,__pdataBANK1
  1540  0039D4  EE10 F008          	lfsr	1,8
  1541  0039D8                     copy_data0:
  1542  0039D8  0009               	tblrd		*+
  1543  0039DA  CFF5 FFEE          	movff	tablat,postinc0
  1544  0039DE  50E5               	movf	postdec1,w,c
  1545  0039E0  50E1               	movf	fsr1l,w,c
  1546  0039E2  E1FA               	bnz	copy_data0
  1547                           
  1548                           ; Clear objects allocated to BANK1 (45 bytes)
  1549  0039E4  EE01  F000         	lfsr	0,__pbssBANK1
  1550  0039E8  0E2D               	movlw	45
  1551  0039EA                     clear_0:
  1552  0039EA  6AEE               	clrf	postinc0,c
  1553  0039EC  06E8               	decf	wreg,f,c
  1554  0039EE  E1FD               	bnz	clear_0
  1555                           
  1556                           ; Clear objects allocated to BANK0 (38 bytes)
  1557  0039F0  EE00  F0DA         	lfsr	0,__pbssBANK0
  1558  0039F4  0E26               	movlw	38
  1559  0039F6                     clear_1:
  1560  0039F6  6AEE               	clrf	postinc0,c
  1561  0039F8  06E8               	decf	wreg,f,c
  1562  0039FA  E1FD               	bnz	clear_1
  1563                           
  1564                           ; Clear objects allocated to COMRAM (35 bytes)
  1565  0039FC  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1566  003A00  0E23               	movlw	35
  1567  003A02                     clear_2:
  1568  003A02  6AEE               	clrf	postinc0,c
  1569  003A04  06E8               	decf	wreg,f,c
  1570  003A06  E1FD               	bnz	clear_2
  1571  003A08                     end_of_initialization:
  1572                           	opt stack 0
  1573  003A08                     __end_of__initialization:
  1574                           	opt stack 0
  1575  003A08  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1576  003A0A  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1577  003A0C  0100               	movlb	0
  1578  003A0E  EF33  F019         	goto	_main	;jump to C main() function
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           postinc0	equ	0xFEE
  1584                           wreg	equ	0xFE8
  1585                           postdec1	equ	0xFE5
  1586                           fsr1l	equ	0xFE1
  1587                           
  1588                           	psect	bssCOMRAM
  1589  00005B                     __pbssCOMRAM:
  1590                           	opt stack 0
  1591  00005B                     _back:
  1592                           	opt stack 0
  1593  00005B                     	ds	2
  1594  00005D                     _count_can_no_lab:
  1595                           	opt stack 0
  1596  00005D                     	ds	2
  1597  00005F                     _count_can_w_lab:
  1598                           	opt stack 0
  1599  00005F                     	ds	2
  1600  000061                     _count_pop_no_tab:
  1601                           	opt stack 0
  1602  000061                     	ds	2
  1603  000063                     _count_pop_w_tab:
  1604                           	opt stack 0
  1605  000063                     	ds	2
  1606  000065                     _cur_can:
  1607                           	opt stack 0
  1608  000065                     	ds	2
  1609  000067                     _debug:
  1610                           	opt stack 0
  1611  000067                     	ds	2
  1612  000069                     _down:
  1613                           	opt stack 0
  1614  000069                     	ds	2
  1615  00006B                     _enter:
  1616                           	opt stack 0
  1617  00006B                     	ds	2
  1618  00006D                     _f_ID_receive:
  1619                           	opt stack 0
  1620  00006D                     	ds	2
  1621  00006F                     _f_can_coming_to_ID:
  1622                           	opt stack 0
  1623  00006F                     	ds	2
  1624  000071                     _f_can_coming_to_distribution:
  1625                           	opt stack 0
  1626  000071                     	ds	2
  1627  000073                     _f_lastCan:
  1628                           	opt stack 0
  1629  000073                     	ds	2
  1630  000075                     _firstboot:
  1631                           	opt stack 0
  1632  000075                     	ds	2
  1633  000077                     _up:
  1634                           	opt stack 0
  1635  000077                     	ds	2
  1636  000079                     _was_low_1:
  1637                           	opt stack 0
  1638  000079                     	ds	2
  1639  00007B                     _was_low_3:
  1640                           	opt stack 0
  1641  00007B                     	ds	2
  1642  00007D                     _input:
  1643                           	opt stack 0
  1644  00007D                     	ds	1
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           postdec1	equ	0xFE5
  1652                           fsr1l	equ	0xFE1
  1653                           
  1654                           	psect	bssBANK0
  1655  0000DA                     __pbssBANK0:
  1656                           	opt stack 0
  1657  0000DA                     _IR_signal:
  1658                           	opt stack 0
  1659  0000DA                     	ds	2
  1660  0000DC                     _MAG_signal:
  1661                           	opt stack 0
  1662  0000DC                     	ds	2
  1663  0000DE                     _cur_state:
  1664                           	opt stack 0
  1665  0000DE                     	ds	2
  1666  0000E0                     _f_loadingNewCan:
  1667                           	opt stack 0
  1668  0000E0                     	ds	2
  1669  0000E2                     _first:
  1670                           	opt stack 0
  1671  0000E2                     	ds	2
  1672  0000E4                     _i:
  1673                           	opt stack 0
  1674  0000E4                     	ds	2
  1675  0000E6                     _log:
  1676                           	opt stack 0
  1677  0000E6                     	ds	2
  1678  0000E8                     _log_completion:
  1679                           	opt stack 0
  1680  0000E8                     	ds	2
  1681  0000EA                     _log_count_can_no_lab:
  1682                           	opt stack 0
  1683  0000EA                     	ds	2
  1684  0000EC                     _log_count_can_w_lab:
  1685                           	opt stack 0
  1686  0000EC                     	ds	2
  1687  0000EE                     _log_count_pop_no_tab:
  1688                           	opt stack 0
  1689  0000EE                     	ds	2
  1690  0000F0                     _log_count_pop_w_tab:
  1691                           	opt stack 0
  1692  0000F0                     	ds	2
  1693  0000F2                     _log_count_total:
  1694                           	opt stack 0
  1695  0000F2                     	ds	2
  1696  0000F4                     _log_total_time:
  1697                           	opt stack 0
  1698  0000F4                     	ds	2
  1699  0000F6                     _logstate:
  1700                           	opt stack 0
  1701  0000F6                     	ds	2
  1702  0000F8                     _total_time:
  1703                           	opt stack 0
  1704  0000F8                     	ds	2
  1705  0000FA                     _var:
  1706                           	opt stack 0
  1707  0000FA                     	ds	2
  1708  0000FC                     _machine_state:
  1709                           	opt stack 0
  1710  0000FC                     	ds	1
  1711  0000FD                     _sel:
  1712                           	opt stack 0
  1713  0000FD                     	ds	1
  1714  0000FE                     _count_total:
  1715                           	opt stack 0
  1716  0000FE                     	ds	2
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           	psect	bssBANK1
  1727  000100                     __pbssBANK1:
  1728                           	opt stack 0
  1729  000100                     _log_startTime:
  1730                           	opt stack 0
  1731  000100                     	ds	14
  1732  00010E                     _startTime:
  1733                           	opt stack 0
  1734  00010E                     	ds	14
  1735  00011C                     _servoTimes:
  1736                           	opt stack 0
  1737  00011C                     	ds	8
  1738  000124                     _time:
  1739                           	opt stack 0
  1740  000124                     	ds	7
  1741  00012B                     _f_can_distributed:
  1742                           	opt stack 0
  1743  00012B                     	ds	2
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1l	equ	0xFE1
  1752                           
  1753                           	psect	dataBANK1
  1754  00012D                     __pdataBANK1:
  1755                           	opt stack 0
  1756  00012D                     UI@F3220:
  1757                           	opt stack 0
  1758  00012D                     	ds	4
  1759  000131                     printRTC@F3211:
  1760                           	opt stack 0
  1761  000131                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	cstackBANK0
  1772  000080                     __pcstackBANK0:
  1773                           	opt stack 0
  1774  000080                     ??_PortTests:
  1775  000080                     ??_isdigit:
  1776  000080                     ??_readADC:
  1777  000080                     ??_I2C_Master_Wait:
  1778  000080                     ?___wmul:
  1779                           	opt stack 0
  1780  000080                     ?___awmod:
  1781                           	opt stack 0
  1782  000080                     ?___lwdiv:
  1783                           	opt stack 0
  1784  000080                     ?___lldiv:
  1785                           	opt stack 0
  1786  000080                     lcdNibble@temp:
  1787                           	opt stack 0
  1788  000080                     initTime@m:
  1789                           	opt stack 0
  1790  000080                     updateServoPosition@time_us:
  1791                           	opt stack 0
  1792  000080                     EEPROM_read@address:
  1793                           	opt stack 0
  1794  000080                     ___wmul@multiplier:
  1795                           	opt stack 0
  1796  000080                     ___awmod@dividend:
  1797                           	opt stack 0
  1798  000080                     ___lwdiv@dividend:
  1799                           	opt stack 0
  1800  000080                     strcpy@to:
  1801                           	opt stack 0
  1802  000080                     ___lldiv@dividend:
  1803                           	opt stack 0
  1804                           
  1805                           ; 4 bytes @ 0x0
  1806  000080                     	ds	1
  1807  000081                     readADC@channel:
  1808                           	opt stack 0
  1809  000081                     I2C_Master_Read@a:
  1810                           	opt stack 0
  1811  000081                     lcdNibble@data:
  1812                           	opt stack 0
  1813  000081                     initTime@h:
  1814                           	opt stack 0
  1815  000081                     _isdigit$1860:
  1816                           	opt stack 0
  1817  000081                     I2C_Master_Write@d:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x1
  1821  000081                     	ds	1
  1822  000082                     ??_readIR:
  1823  000082                     ??_readMAG:
  1824  000082                     I2C_Master_Read@temp:
  1825                           	opt stack 0
  1826  000082                     lcdInst@data:
  1827                           	opt stack 0
  1828  000082                     putch@data:
  1829                           	opt stack 0
  1830  000082                     initTime@w:
  1831                           	opt stack 0
  1832  000082                     isdigit@c:
  1833                           	opt stack 0
  1834  000082                     updateServoPosition@timer:
  1835                           	opt stack 0
  1836  000082                     ___wmul@multiplicand:
  1837                           	opt stack 0
  1838  000082                     ___awmod@divisor:
  1839                           	opt stack 0
  1840  000082                     ___lwdiv@divisor:
  1841                           	opt stack 0
  1842  000082                     strcpy@from:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x2
  1846  000082                     	ds	1
  1847  000083                     ??_initLCD:
  1848  000083                     initTime@DD:
  1849                           	opt stack 0
  1850  000083                     getRTC@i:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x3
  1854  000083                     	ds	1
  1855  000084                     ??_updateServoPosition:
  1856  000084                     initTime@MM:
  1857                           	opt stack 0
  1858  000084                     ___awmod@counter:
  1859                           	opt stack 0
  1860  000084                     readIR@res:
  1861                           	opt stack 0
  1862  000084                     readMAG@res:
  1863                           	opt stack 0
  1864  000084                     ___wmul@product:
  1865                           	opt stack 0
  1866  000084                     ___lwdiv@quotient:
  1867                           	opt stack 0
  1868  000084                     strcpy@cp:
  1869                           	opt stack 0
  1870  000084                     ___lldiv@divisor:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x4
  1874  000084                     	ds	1
  1875  000085                     ??_initSortTimer:
  1876  000085                     initTime@YY:
  1877                           	opt stack 0
  1878  000085                     ___awmod@sign:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x5
  1882  000085                     	ds	1
  1883  000086                     ??_ID:
  1884  000086                     ??_getIR:
  1885  000086                     ?___awdiv:
  1886                           	opt stack 0
  1887  000086                     initTime@s:
  1888                           	opt stack 0
  1889  000086                     ___lwdiv@counter:
  1890                           	opt stack 0
  1891  000086                     updateServoPosition@my_time:
  1892                           	opt stack 0
  1893  000086                     ___awdiv@dividend:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x6
  1897  000086                     	ds	1
  1898  000087                     ?___lwmod:
  1899                           	opt stack 0
  1900  000087                     ___lwmod@dividend:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x7
  1904  000087                     	ds	1
  1905  000088                     ??_Distribution:
  1906  000088                     ??_initServos:
  1907  000088                     initSortTimer@i:
  1908                           	opt stack 0
  1909  000088                     ___awdiv@divisor:
  1910                           	opt stack 0
  1911  000088                     ___lldiv@quotient:
  1912                           	opt stack 0
  1913  000088                     ID@sensor_outputs:
  1914                           	opt stack 0
  1915                           
  1916                           ; 6 bytes @ 0x8
  1917  000088                     	ds	1
  1918  000089                     ___lwmod@divisor:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x9
  1922  000089                     	ds	1
  1923  00008A                     ___awdiv@counter:
  1924                           	opt stack 0
  1925                           
  1926                           ; 1 bytes @ 0xA
  1927  00008A                     	ds	1
  1928  00008B                     ___awdiv@sign:
  1929                           	opt stack 0
  1930  00008B                     ___lwmod@counter:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0xB
  1934  00008B                     	ds	1
  1935  00008C                     ___lldiv@counter:
  1936                           	opt stack 0
  1937  00008C                     ___awdiv@quotient:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0xC
  1941  00008C                     	ds	1
  1942  00008D                     I2C_Master_Init@c:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0xD
  1946  00008D                     	ds	1
  1947  00008E                     ?_printf:
  1948                           	opt stack 0
  1949  00008E                     printf@f:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0xE
  1953  00008E                     	ds	3
  1954  000091                     ??_I2C_Master_Init:
  1955                           
  1956                           ; 1 bytes @ 0x11
  1957  000091                     	ds	4
  1958  000095                     ??_loadRTC:
  1959                           
  1960                           ; 1 bytes @ 0x15
  1961  000095                     	ds	1
  1962  000096                     loadRTC@i:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x16
  1966  000096                     	ds	4
  1967  00009A                     ??_printf:
  1968                           
  1969                           ; 1 bytes @ 0x1A
  1970  00009A                     	ds	4
  1971  00009E                     printf@prec:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x1E
  1975  00009E                     	ds	1
  1976  00009F                     printf@cp:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x1F
  1980  00009F                     	ds	2
  1981  0000A1                     printf@ap:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x21
  1985  0000A1                     	ds	2
  1986  0000A3                     printf@len:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x23
  1990  0000A3                     	ds	2
  1991  0000A5                     printf@val:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x25
  1995  0000A5                     	ds	2
  1996  0000A7                     printf@flag:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0x27
  2000  0000A7                     	ds	1
  2001  0000A8                     printf@c:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x28
  2005  0000A8                     	ds	1
  2006  0000A9                     printf@width:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x29
  2010  0000A9                     	ds	2
  2011  0000AB                     ??_printRTC:
  2012  0000AB                     ??_algorithmTest:
  2013  0000AB                     ??_sensorTest:
  2014  0000AB                     ??_actuatorTest:
  2015  0000AB                     ??_PortTestA5:
  2016  0000AB                     ??_ToggleTestA5:
  2017  0000AB                     EEPROM_write@address:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x2B
  2021  0000AB                     	ds	1
  2022  0000AC                     ToggleTestA5@on:
  2023                           	opt stack 0
  2024                           
  2025                           ; 2 bytes @ 0x2C
  2026  0000AC                     	ds	1
  2027  0000AD                     EEPROM_write@data:
  2028                           	opt stack 0
  2029  0000AD                     actuatorTest@i:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x2D
  2033  0000AD                     	ds	1
  2034  0000AE                     ??_EEPROM_write:
  2035  0000AE                     actuatorTest@i_1566:
  2036                           	opt stack 0
  2037  0000AE                     printRTC@INT_time:
  2038                           	opt stack 0
  2039                           
  2040                           ; 14 bytes @ 0x2E
  2041  0000AE                     	ds	1
  2042  0000AF                     EEPROM_write@i:
  2043                           	opt stack 0
  2044  0000AF                     actuatorTest@i_1567:
  2045                           	opt stack 0
  2046                           
  2047                           ; 1 bytes @ 0x2F
  2048  0000AF                     	ds	1
  2049  0000B0                     EEPROM_write@i_1310:
  2050                           	opt stack 0
  2051  0000B0                     actuatorTest@i_1569:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x30
  2055  0000B0                     	ds	1
  2056  0000B1                     ??_Loading:
  2057  0000B1                     logRun@num:
  2058                           	opt stack 0
  2059  0000B1                     actuatorTest@i_1570:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x31
  2063  0000B1                     	ds	1
  2064  0000B2                     logRun@byte1:
  2065                           	opt stack 0
  2066  0000B2                     actuatorTest@i_1572:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x32
  2070  0000B2                     	ds	1
  2071  0000B3                     logRun@byte2:
  2072                           	opt stack 0
  2073  0000B3                     actuatorTest@i_1573:
  2074                           	opt stack 0
  2075  0000B3                     Loading@addr:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x33
  2079  0000B3                     	ds	1
  2080  0000B4                     logRun@byte3:
  2081                           	opt stack 0
  2082  0000B4                     actuatorTest@i_1575:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x34
  2086  0000B4                     	ds	1
  2087  0000B5                     Loading@byte1:
  2088                           	opt stack 0
  2089  0000B5                     logRun@byte_i:
  2090                           	opt stack 0
  2091  0000B5                     actuatorTest@i_1576:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x35
  2095  0000B5                     	ds	1
  2096  0000B6                     logRun@byte11:
  2097                           	opt stack 0
  2098  0000B6                     actuatorTest@i_1578:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x36
  2102  0000B6                     	ds	1
  2103  0000B7                     actuatorTest@i_1579:
  2104                           	opt stack 0
  2105  0000B7                     logRun@i:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x37
  2109  0000B7                     	ds	1
  2110  0000B8                     actuatorTest@i_1581:
  2111                           	opt stack 0
  2112                           
  2113                           ; 1 bytes @ 0x38
  2114  0000B8                     	ds	1
  2115  0000B9                     actuatorTest@i_1582:
  2116                           	opt stack 0
  2117  0000B9                     logRun@addr:
  2118                           	opt stack 0
  2119                           
  2120                           ; 2 bytes @ 0x39
  2121  0000B9                     	ds	1
  2122  0000BA                     actuatorTest@i_1585:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x3A
  2126  0000BA                     	ds	1
  2127  0000BB                     actuatorTest@i_1586:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x3B
  2131  0000BB                     	ds	1
  2132  0000BC                     actuatorTest@i_1588:
  2133                           	opt stack 0
  2134  0000BC                     printRTC@RTC_month:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x3C
  2138  0000BC                     	ds	1
  2139  0000BD                     actuatorTest@i_1589:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x3D
  2143  0000BD                     	ds	1
  2144  0000BE                     actuatorTest@i_1591:
  2145                           	opt stack 0
  2146  0000BE                     printRTC@month:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x3E
  2150  0000BE                     	ds	1
  2151  0000BF                     actuatorTest@i_1592:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x3F
  2155  0000BF                     	ds	1
  2156  0000C0                     actuatorTest@i_1595:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x40
  2160  0000C0                     	ds	1
  2161  0000C1                     actuatorTest@i_1596:
  2162                           	opt stack 0
  2163                           
  2164                           ; 1 bytes @ 0x41
  2165  0000C1                     	ds	1
  2166  0000C2                     actuatorTest@i_1598:
  2167                           	opt stack 0
  2168  0000C2                     printRTC@i:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x42
  2172  0000C2                     	ds	1
  2173  0000C3                     actuatorTest@i_1599:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x43
  2177  0000C3                     	ds	1
  2178  0000C4                     ??_Test:
  2179  0000C4                     ??_UI:
  2180                           
  2181                           ; 1 bytes @ 0x44
  2182  0000C4                     	ds	2
  2183  0000C6                     _UI$2213:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x46
  2187  0000C6                     	ds	2
  2188  0000C8                     UI@i:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x48
  2192  0000C8                     	ds	1
  2193  0000C9                     UI@i_408:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x49
  2197  0000C9                     	ds	1
  2198  0000CA                     UI@i_411:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x4A
  2202  0000CA                     	ds	1
  2203  0000CB                     UI@i_412:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0x4B
  2207  0000CB                     	ds	1
  2208  0000CC                     UI@i_430:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x4C
  2212  0000CC                     	ds	1
  2213  0000CD                     UI@i_431:
  2214                           	opt stack 0
  2215                           
  2216                           ; 1 bytes @ 0x4D
  2217  0000CD                     	ds	1
  2218  0000CE                     UI@i_434:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x4E
  2222  0000CE                     	ds	1
  2223  0000CF                     UI@i_435:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x4F
  2227  0000CF                     	ds	1
  2228  0000D0                     UI@i_438:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x50
  2232  0000D0                     	ds	1
  2233  0000D1                     UI@i_439:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x51
  2237  0000D1                     	ds	1
  2238  0000D2                     UI@i_442:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x52
  2242  0000D2                     	ds	1
  2243  0000D3                     UI@i_443:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x53
  2247  0000D3                     	ds	1
  2248  0000D4                     UI@i_446:
  2249                           	opt stack 0
  2250                           
  2251                           ; 1 bytes @ 0x54
  2252  0000D4                     	ds	1
  2253  0000D5                     UI@i_447:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x55
  2257  0000D5                     	ds	1
  2258  0000D6                     UI@month:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x56
  2262  0000D6                     	ds	4
  2263  0000DA                     tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           postinc0	equ	0xFEE
  2268                           wreg	equ	0xFE8
  2269                           postdec1	equ	0xFE5
  2270                           fsr1l	equ	0xFE1
  2271                           
  2272                           ; 1 bytes @ 0x5A
  2273                           
  2274                           	psect	cstackCOMRAM
  2275  000001                     __pcstackCOMRAM:
  2276                           	opt stack 0
  2277  000001                     ??i2_I2C_Master_Wait:
  2278  000001                     ??i2_isdigit:
  2279  000001                     ?i2___wmul:
  2280                           	opt stack 0
  2281  000001                     ?i2___lwmod:
  2282                           	opt stack 0
  2283  000001                     i2lcdNibble@temp:
  2284                           	opt stack 0
  2285  000001                     i2EEPROM_read@address:
  2286                           	opt stack 0
  2287  000001                     i2___wmul@multiplier:
  2288                           	opt stack 0
  2289  000001                     i2___lwmod@dividend:
  2290                           	opt stack 0
  2291  000001                     i2strcpy@to:
  2292                           	opt stack 0
  2293                           
  2294                           ; 2 bytes @ 0x0
  2295  000001                     	ds	1
  2296  000002                     i2I2C_Master_Read@a:
  2297                           	opt stack 0
  2298  000002                     i2lcdNibble@data:
  2299                           	opt stack 0
  2300  000002                     i2_isdigit$1860:
  2301                           	opt stack 0
  2302  000002                     i2I2C_Master_Write@d:
  2303                           	opt stack 0
  2304                           
  2305                           ; 2 bytes @ 0x1
  2306  000002                     	ds	1
  2307  000003                     i2I2C_Master_Read@temp:
  2308                           	opt stack 0
  2309  000003                     i2lcdInst@data:
  2310                           	opt stack 0
  2311  000003                     i2putch@data:
  2312                           	opt stack 0
  2313  000003                     i2isdigit@c:
  2314                           	opt stack 0
  2315  000003                     i2___wmul@multiplicand:
  2316                           	opt stack 0
  2317  000003                     i2___lwmod@divisor:
  2318                           	opt stack 0
  2319  000003                     i2strcpy@from:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x2
  2323  000003                     	ds	1
  2324  000004                     i2getRTC@i:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x3
  2328  000004                     	ds	1
  2329  000005                     i2___lwmod@counter:
  2330                           	opt stack 0
  2331  000005                     i2___wmul@product:
  2332                           	opt stack 0
  2333  000005                     i2strcpy@cp:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x4
  2337  000005                     	ds	1
  2338  000006                     ?i2___lwdiv:
  2339                           	opt stack 0
  2340  000006                     i2___lwdiv@dividend:
  2341                           	opt stack 0
  2342                           
  2343                           ; 2 bytes @ 0x5
  2344  000006                     	ds	1
  2345  000007                     retrieveLog@logNum:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x6
  2349  000007                     	ds	1
  2350  000008                     i2___lwdiv@divisor:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0x7
  2354  000008                     	ds	1
  2355  000009                     ??_retrieveLog:
  2356                           
  2357                           ; 1 bytes @ 0x8
  2358  000009                     	ds	1
  2359  00000A                     i2___lwdiv@quotient:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x9
  2363  00000A                     	ds	1
  2364  00000B                     retrieveLog@byte1:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0xA
  2368  00000B                     	ds	1
  2369  00000C                     retrieveLog@byte2:
  2370                           	opt stack 0
  2371  00000C                     i2___lwdiv@counter:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0xB
  2375  00000C                     	ds	1
  2376  00000D                     ?i2_printf:
  2377                           	opt stack 0
  2378  00000D                     retrieveLog@byte3:
  2379                           	opt stack 0
  2380  00000D                     i2printf@f:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0xC
  2384  00000D                     	ds	1
  2385  00000E                     retrieveLog@i:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0xD
  2389  00000E                     	ds	2
  2390  000010                     retrieveLog@addr:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0xF
  2394  000010                     	ds	2
  2395  000012                     dispLogs@myLog:
  2396                           	opt stack 0
  2397                           
  2398                           ; 2 bytes @ 0x11
  2399  000012                     	ds	2
  2400  000014                     
  2401                           ; 1 bytes @ 0x13
  2402  000014                     	ds	5
  2403  000019                     ??i2_printf:
  2404                           
  2405                           ; 1 bytes @ 0x18
  2406  000019                     	ds	4
  2407  00001D                     i2printf@prec:
  2408                           	opt stack 0
  2409                           
  2410                           ; 1 bytes @ 0x1C
  2411  00001D                     	ds	1
  2412  00001E                     i2printf@cp:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x1D
  2416  00001E                     	ds	2
  2417  000020                     i2printf@ap:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x1F
  2421  000020                     	ds	2
  2422  000022                     i2printf@len:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x21
  2426  000022                     	ds	2
  2427  000024                     i2printf@val:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x23
  2431  000024                     	ds	2
  2432  000026                     i2printf@flag:
  2433                           	opt stack 0
  2434                           
  2435                           ; 1 bytes @ 0x25
  2436  000026                     	ds	1
  2437  000027                     i2printf@c:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0x26
  2441  000027                     	ds	1
  2442  000028                     i2printf@width:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x27
  2446  000028                     	ds	2
  2447  00002A                     ??_printSortTimer:
  2448  00002A                     ??i2_printRTC:
  2449  00002A                     ?_inputHandler:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0x29
  2453  00002A                     	ds	2
  2454  00002C                     ??_inputHandler:
  2455                           
  2456                           ; 1 bytes @ 0x2B
  2457  00002C                     	ds	1
  2458  00002D                     printSortTimer@hour:
  2459                           	opt stack 0
  2460  00002D                     i2printRTC@INT_time:
  2461                           	opt stack 0
  2462                           
  2463                           ; 14 bytes @ 0x2C
  2464  00002D                     	ds	2
  2465  00002F                     printSortTimer@curTime:
  2466                           	opt stack 0
  2467                           
  2468                           ; 14 bytes @ 0x2E
  2469  00002F                     	ds	12
  2470  00003B                     i2printRTC@RTC_month:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x3A
  2474  00003B                     	ds	2
  2475  00003D                     printSortTimer@start_sec:
  2476                           	opt stack 0
  2477  00003D                     i2printRTC@month:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x3C
  2481  00003D                     	ds	2
  2482  00003F                     printSortTimer@cur_sec:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x3E
  2486  00003F                     	ds	2
  2487  000041                     printSortTimer@min:
  2488                           	opt stack 0
  2489  000041                     i2printRTC@i:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x40
  2493  000041                     	ds	2
  2494  000043                     ??_updateMenu:
  2495  000043                     printSortTimer@sec:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x42
  2499  000043                     	ds	2
  2500  000045                     _printSortTimer$2333:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x44
  2504  000045                     	ds	2
  2505  000047                     printSortTimer@timeDiff:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0x46
  2509  000047                     	ds	2
  2510  000049                     printSortTimer@i:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x48
  2514  000049                     	ds	2
  2515  00004B                     ??_handler:
  2516                           
  2517                           ; 1 bytes @ 0x4A
  2518  00004B                     	ds	16
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1l	equ	0xFE1
  2527                           
  2528 ;;
  2529 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2530 ;;
  2531 ;; *************** function _main *****************
  2532 ;; Defined at:
  2533 ;;		line 17 in file "main.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;Total ram usage:        0 bytes
  2552 ;; Hardware stack levels required when called:   13
  2553 ;; This function calls:
  2554 ;;		_Test
  2555 ;;		_UI
  2556 ;;		_initLCD
  2557 ;;		_initTime
  2558 ;;		_initUI
  2559 ;;		_logRun
  2560 ;;		_machineConfig
  2561 ;;		_sort
  2562 ;;		_stopSignals
  2563 ;; This function is called by:
  2564 ;;		Startup code after reset
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text0
  2569  003266                     __ptext0:
  2570                           	opt stack 0
  2571  003266                     _main:
  2572                           	opt stack 18
  2573                           
  2574                           ;main.c: 18: machineConfig();
  2575                           
  2576                           ;incstack = 0
  2577  003266  EC62  F01C         	call	_machineConfig	;wreg free
  2578                           
  2579                           ;main.c: 19: initLCD();
  2580  00326A  EC7C  F01D         	call	_initLCD	;wreg free
  2581                           
  2582                           ;main.c: 20: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2583  00326E  0E20               	movlw	32
  2584  003270  0100               	movlb	0	; () banked
  2585  003272  6F80               	movwf	initTime@m& (0+255),b
  2586  003274  0E13               	movlw	19
  2587  003276  0100               	movlb	0	; () banked
  2588  003278  6F81               	movwf	initTime@h& (0+255),b
  2589  00327A  0E04               	movlw	4
  2590  00327C  0100               	movlb	0	; () banked
  2591  00327E  6F82               	movwf	initTime@w& (0+255),b
  2592  003280  0E01               	movlw	1
  2593  003282  0100               	movlb	0	; () banked
  2594  003284  6F83               	movwf	initTime@DD& (0+255),b
  2595  003286  0E03               	movlw	3
  2596  003288  0100               	movlb	0	; () banked
  2597  00328A  6F84               	movwf	initTime@MM& (0+255),b
  2598  00328C  0E17               	movlw	23
  2599  00328E  0100               	movlb	0	; () banked
  2600  003290  6F85               	movwf	initTime@YY& (0+255),b
  2601  003292  0E42               	movlw	66
  2602  003294  ECFD  F01F         	call	_initTime
  2603                           
  2604                           ;main.c: 21: initUI();
  2605  003298  ECC8  F01F         	call	_initUI	;wreg free
  2606                           
  2607                           ;main.c: 22: first = 1;
  2608  00329C  0E00               	movlw	0
  2609  00329E  0100               	movlb	0	; () banked
  2610  0032A0  6FE3               	movwf	(_first+1)& (0+255),b
  2611  0032A2  0E01               	movlw	1
  2612  0032A4  6FE2               	movwf	_first& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;main.c: 33: switch(machine_state){
  2616                           
  2617                           ;main.c: 32: while(1){
  2618  0032A6  D018               	goto	l7572
  2619  0032A8                     l7554:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 35: UI();
  2623  0032A8  EC09  F000         	call	_UI	;wreg free
  2624                           
  2625                           ;main.c: 36: break;
  2626  0032AC  D015               	goto	l7572
  2627  0032AE                     l7556:
  2628                           
  2629                           ;main.c: 38: sort();
  2630  0032AE  ECEC  F01F         	call	_sort	;wreg free
  2631                           
  2632                           ;main.c: 39: break;
  2633  0032B2  D012               	goto	l7572
  2634  0032B4                     l7558:
  2635                           
  2636                           ;main.c: 41: stopSignals();
  2637  0032B4  EC29  F020         	call	_stopSignals	;wreg free
  2638                           
  2639                           ;main.c: 42: logRun();
  2640  0032B8  ECB3  F013         	call	_logRun	;wreg free
  2641                           
  2642                           ;main.c: 43: first = 1;
  2643  0032BC  0E00               	movlw	0
  2644  0032BE  0100               	movlb	0	; () banked
  2645  0032C0  6FE3               	movwf	(_first+1)& (0+255),b
  2646  0032C2  0E01               	movlw	1
  2647  0032C4  6FE2               	movwf	_first& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;main.c: 44: UI();
  2651  0032C6  EC09  F000         	call	_UI	;wreg free
  2652                           
  2653                           ;main.c: 45: break;
  2654  0032CA  D006               	goto	l7572
  2655  0032CC                     l7566:
  2656                           
  2657                           ;main.c: 47: Test();
  2658  0032CC  EC08  F016         	call	_Test	;wreg free
  2659                           
  2660                           ;main.c: 48: break;
  2661  0032D0  D003               	goto	l7572
  2662  0032D2                     l7568:
  2663                           
  2664                           ;main.c: 50: stopSignals();
  2665  0032D2  EC29  F020         	call	_stopSignals	;wreg free
  2666  0032D6                     l478:
  2667  0032D6  D7FF               	goto	l478
  2668  0032D8                     l7572:
  2669  0032D8  0100               	movlb	0	; () banked
  2670  0032DA  51FC               	movf	_machine_state& (0+255),w,b
  2671                           
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 5, Range of values is 0 to 4
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte           16     9 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  0032DC  0A00               	xorlw	0	; case 0
  2679  0032DE  B4D8               	btfsc	status,2,c
  2680  0032E0  D7E3               	goto	l7554
  2681  0032E2  0A01               	xorlw	1	; case 1
  2682  0032E4  B4D8               	btfsc	status,2,c
  2683  0032E6  D7E3               	goto	l7556
  2684  0032E8  0A03               	xorlw	3	; case 2
  2685  0032EA  B4D8               	btfsc	status,2,c
  2686  0032EC  D7E3               	goto	l7558
  2687  0032EE  0A01               	xorlw	1	; case 3
  2688  0032F0  B4D8               	btfsc	status,2,c
  2689  0032F2  D7EC               	goto	l7566
  2690  0032F4  0A07               	xorlw	7	; case 4
  2691  0032F6  B4D8               	btfsc	status,2,c
  2692  0032F8  D7EC               	goto	l7568
  2693                           
  2694                           ; BSR set to: 0
  2695                           
  2696                           ; BSR set to: 0
  2697  0032FA  D7EE               	goto	l7572
  2698  0032FC                     __end_of_main:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           fsr1l	equ	0xFE1
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _stopSignals *****************
  2711 ;; Defined at:
  2712 ;;		line 59 in file "main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    7
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text1
  2741  004052                     __ptext1:
  2742                           	opt stack 0
  2743  004052                     _stopSignals:
  2744                           	opt stack 23
  2745                           
  2746                           ;main.c: 60: LATA = 0x00;
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;incstack = 0
  2750  004052  0E00               	movlw	0
  2751  004054  6E89               	movwf	3977,c	;volatile
  2752                           
  2753                           ;main.c: 61: LATB = 0x00;
  2754  004056  0E00               	movlw	0
  2755  004058  6E8A               	movwf	3978,c	;volatile
  2756                           
  2757                           ;main.c: 62: LATC = 0x00;
  2758  00405A  0E00               	movlw	0
  2759  00405C  6E8B               	movwf	3979,c	;volatile
  2760                           
  2761                           ;main.c: 63: LATD = 0x00;
  2762  00405E  0E00               	movlw	0
  2763  004060  6E8C               	movwf	3980,c	;volatile
  2764                           
  2765                           ;main.c: 64: LATE = 0x00;
  2766  004062  0E00               	movlw	0
  2767  004064  6E8D               	movwf	3981,c	;volatile
  2768  004066  0012               	return		;funcret
  2769  004068                     __end_of_stopSignals:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1l	equ	0xFE1
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _sort *****************
  2782 ;; Defined at:
  2783 ;;		line 55 in file "sort.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;Total ram usage:        0 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:   12
  2804 ;; This function calls:
  2805 ;;		_Distribution
  2806 ;;		_ID
  2807 ;;		_Loading
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text2
  2814  003FD8                     __ptext2:
  2815                           	opt stack 0
  2816  003FD8                     _sort:
  2817                           	opt stack 18
  2818                           
  2819                           ;sort.c: 56: if(machine_state == Sorting_state){
  2820                           
  2821                           ;incstack = 0
  2822  003FD8  0100               	movlb	0	; () banked
  2823  003FDA  05FC               	decf	_machine_state& (0+255),w,b
  2824  003FDC  B4D8               	btfsc	status,2,c
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;sort.c: 57: Loading();
  2828  003FDE  EC80  F016         	call	_Loading	;wreg free
  2829                           
  2830                           ;sort.c: 58: }
  2831                           ;sort.c: 59: if(machine_state == Sorting_state){
  2832  003FE2  0100               	movlb	0	; () banked
  2833  003FE4  05FC               	decf	_machine_state& (0+255),w,b
  2834  003FE6  B4D8               	btfsc	status,2,c
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;sort.c: 60: ID();
  2838  003FE8  ECEB  F014         	call	_ID	;wreg free
  2839                           
  2840                           ;sort.c: 61: }
  2841                           ;sort.c: 62: if(machine_state == Sorting_state){
  2842  003FEC  0100               	movlb	0	; () banked
  2843  003FEE  05FC               	decf	_machine_state& (0+255),w,b
  2844  003FF0  A4D8               	btfss	status,2,c
  2845  003FF2  0012               	return	
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;sort.c: 63: Distribution();
  2849  003FF4  EC51  F014         	call	_Distribution	;wreg free
  2850  003FF8  0012               	return	
  2851  003FFA                     __end_of_sort:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1l	equ	0xFE1
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _Loading *****************
  2864 ;; Defined at:
  2865 ;;		line 67 in file "sort.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  addr            2   51[BANK0 ] unsigned short 
  2870 ;;  byte1           1   53[BANK0 ] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;Total ram usage:        5 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:   11
  2887 ;; This function calls:
  2888 ;;		_EEPROM_read
  2889 ;;		_EEPROM_write
  2890 ;;		_getIR
  2891 ;;		_initGlobalVars
  2892 ;;		_initServos
  2893 ;;		_initSortTimer
  2894 ;;		_lcdInst
  2895 ;; This function is called by:
  2896 ;;		_sort
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text3
  2901  002D00                     __ptext3:
  2902                           	opt stack 0
  2903  002D00                     _Loading:
  2904                           	opt stack 18
  2905                           
  2906                           ;sort.c: 68: if(first){
  2907                           
  2908                           ;incstack = 0
  2909  002D00  0100               	movlb	0	; () banked
  2910  002D02  51E2               	movf	_first& (0+255),w,b
  2911  002D04  0100               	movlb	0	; () banked
  2912  002D06  11E3               	iorwf	(_first+1)& (0+255),w,b
  2913  002D08  B4D8               	btfsc	status,2,c
  2914  002D0A  D033               	goto	l6062
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;sort.c: 69: initGlobalVars();
  2918  002D0C  EC3D  F01B         	call	_initGlobalVars	;wreg free
  2919                           
  2920                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2921  002D10  0E01               	movlw	1
  2922  002D12  EC5A  F020         	call	_lcdInst
  2923  002D16  0E68               	movlw	104
  2924  002D18  0100               	movlb	0	; () banked
  2925  002D1A  6FB1               	movwf	??_Loading& (0+255),b
  2926  002D1C  0EE4               	movlw	228
  2927  002D1E                     u6577:
  2928  002D1E  2EE8               	decfsz	wreg,f,c
  2929  002D20  D7FE               	bra	u6577
  2930  002D22  2FB1               	decfsz	??_Loading& (0+255),f,b
  2931  002D24  D7FC               	bra	u6577
  2932  002D26  F000               	nop	
  2933                           
  2934                           ;sort.c: 71: initSortTimer();
  2935  002D28  EC8D  F018         	call	_initSortTimer	;wreg free
  2936                           
  2937                           ;sort.c: 76: sel = EEPROM_read(0);
  2938  002D2C  0E00               	movlw	0
  2939  002D2E  0100               	movlb	0	; () banked
  2940  002D30  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2941  002D32  0E00               	movlw	0
  2942  002D34  6F80               	movwf	EEPROM_read@address& (0+255),b
  2943  002D36  EC1D  F020         	call	_EEPROM_read	;wreg free
  2944  002D3A  0100               	movlb	0	; () banked
  2945  002D3C  6FFD               	movwf	_sel& (0+255),b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2949  002D3E  0100               	movlb	0	; () banked
  2950  002D40  51FD               	movf	_sel& (0+255),w,b
  2951  002D42  0D0B               	mullw	11
  2952  002D44  0E01               	movlw	1
  2953  002D46  24F3               	addwf	prodl,w,c
  2954  002D48  0100               	movlb	0	; () banked
  2955  002D4A  6FB3               	movwf	Loading@addr& (0+255),b
  2956  002D4C  0E00               	movlw	0
  2957  002D4E  20F4               	addwfc	prodh,w,c
  2958  002D50  0100               	movlb	0	; () banked
  2959  002D52  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2963  002D54  0E7F               	movlw	127
  2964  002D56  0100               	movlb	0	; () banked
  2965  002D58  6FB5               	movwf	Loading@byte1& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2969  002D5A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2970  002D5E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2971  002D62  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2972  002D66  ECF3  F016         	call	_EEPROM_write	;wreg free
  2973                           
  2974                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2975  002D6A  8A89               	bsf	3977,5,c	;volatile
  2976                           
  2977                           ;sort.c: 85: initServos();
  2978  002D6C  EC35  F01C         	call	_initServos	;wreg free
  2979                           
  2980                           ;sort.c: 86: }
  2981  002D70  0012               	return	
  2982  002D72                     l6062:
  2983                           
  2984                           ;sort.c: 87: else{
  2985                           ;sort.c: 90: if(!f_loadingNewCan){
  2986  002D72  0100               	movlb	0	; () banked
  2987  002D74  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  2988  002D76  0100               	movlb	0	; () banked
  2989  002D78  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2990  002D7A  A4D8               	btfss	status,2,c
  2991  002D7C  D017               	goto	l6078
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;sort.c: 92: getIR();
  2995  002D7E  EC09  F01D         	call	_getIR	;wreg free
  2996                           
  2997                           ;sort.c: 94: if(!f_loadingNewCan){
  2998  002D82  0100               	movlb	0	; () banked
  2999  002D84  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3000  002D86  0100               	movlb	0	; () banked
  3001  002D88  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3002  002D8A  B4D8               	btfsc	status,2,c
  3003  002D8C  0012               	return	
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;sort.c: 98: else{
  3007                           ;sort.c: 99: count_total++;
  3008                           
  3009                           ; BSR set to: 0
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;sort.c: 96: }
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;sort.c: 95: return;
  3016  002D8E  0100               	movlb	0	; () banked
  3017  002D90  4BFE               	infsnz	_count_total& (0+255),f,b
  3018  002D92  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;sort.c: 100: if(count_total == 12){
  3022  002D94  0E0C               	movlw	12
  3023  002D96  0100               	movlb	0	; () banked
  3024  002D98  19FE               	xorwf	_count_total& (0+255),w,b
  3025  002D9A  0100               	movlb	0	; () banked
  3026  002D9C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3027  002D9E  A4D8               	btfss	status,2,c
  3028  002DA0  0012               	return	
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;sort.c: 101: f_lastCan = 1;
  3032  002DA2  0E00               	movlw	0
  3033  002DA4  6E74               	movwf	_f_lastCan+1,c
  3034  002DA6  0E01               	movlw	1
  3035  002DA8  6E73               	movwf	_f_lastCan,c
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;sort.c: 102: }
  3039                           ;sort.c: 103: }
  3040                           ;sort.c: 104: }
  3041                           
  3042                           ; BSR set to: 0
  3043  002DAA  0012               	return	
  3044  002DAC                     l6078:
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;sort.c: 107: else if(f_ID_receive){
  3048  002DAC  506D               	movf	_f_ID_receive,w,c
  3049  002DAE  106E               	iorwf	_f_ID_receive+1,w,c
  3050  002DB0  B4D8               	btfsc	status,2,c
  3051  002DB2  0012               	return	
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;sort.c: 108: f_loadingNewCan = 0;
  3055  002DB4  0E00               	movlw	0
  3056  002DB6  0100               	movlb	0	; () banked
  3057  002DB8  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3058  002DBA  0E00               	movlw	0
  3059  002DBC  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;sort.c: 109: LATAbits.LATA4 = 1;
  3063  002DBE  8889               	bsf	3977,4,c	;volatile
  3064                           
  3065                           ;sort.c: 110: f_can_coming_to_ID = 1;
  3066  002DC0  0E00               	movlw	0
  3067  002DC2  6E70               	movwf	_f_can_coming_to_ID+1,c
  3068  002DC4  0E01               	movlw	1
  3069  002DC6  6E6F               	movwf	_f_can_coming_to_ID,c
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  3073  002DC8  0E05               	movlw	5
  3074  002DCA  0100               	movlb	0	; () banked
  3075  002DCC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3076  002DCE  0E0F               	movlw	15
  3077  002DD0  0100               	movlb	0	; () banked
  3078  002DD2  6FB1               	movwf	??_Loading& (0+255),b
  3079  002DD4  0EF1               	movlw	241
  3080  002DD6                     u6587:
  3081  002DD6  2EE8               	decfsz	wreg,f,c
  3082  002DD8  D7FE               	bra	u6587
  3083  002DDA  2FB1               	decfsz	??_Loading& (0+255),f,b
  3084  002DDC  D7FC               	bra	u6587
  3085  002DDE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3086  002DE0  D7FA               	bra	u6587
  3087                           
  3088                           ;sort.c: 112: LATAbits.LATA4 = 0;
  3089  002DE2  9889               	bcf	3977,4,c	;volatile
  3090  002DE4  0012               	return	
  3091  002DE6                     __end_of_Loading:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1l	equ	0xFE1
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _initSortTimer *****************
  3106 ;; Defined at:
  3107 ;;		line 225 in file "sort.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  i               2    8[BANK0 ] int 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;Total ram usage:        5 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:   10
  3128 ;; This function calls:
  3129 ;;		_getRTC
  3130 ;; This function is called by:
  3131 ;;		_Loading
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text4
  3136  00311A                     __ptext4:
  3137                           	opt stack 0
  3138  00311A                     _initSortTimer:
  3139                           	opt stack 18
  3140                           
  3141                           ;sort.c: 227: getRTC();
  3142                           
  3143                           ;incstack = 0
  3144  00311A  EC08  F01A         	call	_getRTC	;wreg free
  3145                           
  3146                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  3147  00311E  0E00               	movlw	0
  3148  003120  0100               	movlb	0	; () banked
  3149  003122  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3150  003124  0E00               	movlw	0
  3151  003126  6F88               	movwf	initSortTimer@i& (0+255),b
  3152  003128                     l5682:
  3153                           
  3154                           ; BSR set to: 0
  3155  003128  0100               	movlb	0	; () banked
  3156  00312A  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3157  00312C  D008               	goto	l5686
  3158  00312E  0100               	movlb	0	; () banked
  3159  003130  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3160  003132  E140               	bnz	l5692
  3161  003134  0E07               	movlw	7
  3162  003136  0100               	movlb	0	; () banked
  3163  003138  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3164  00313A  B0D8               	btfsc	status,0,c
  3165  00313C  D03B               	goto	l5692
  3166  00313E                     l5686:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3170  00313E  0E24               	movlw	low _time
  3171  003140  0100               	movlb	0	; () banked
  3172  003142  2588               	addwf	initSortTimer@i& (0+255),w,b
  3173  003144  6ED9               	movwf	fsr2l,c
  3174  003146  0E01               	movlw	high _time
  3175  003148  0100               	movlb	0	; () banked
  3176  00314A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3177  00314C  6EDA               	movwf	fsr2h,c
  3178  00314E  50DF               	movf	indf2,w,c
  3179  003150  0100               	movlb	0	; () banked
  3180  003152  6F85               	movwf	??_initSortTimer& (0+255),b
  3181  003154  0100               	movlb	0	; () banked
  3182  003156  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3183  003158  0E0F               	movlw	15
  3184  00315A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3185  00315C  0E0F               	movlw	15
  3186  00315E  0100               	movlb	0	; () banked
  3187  003160  1785               	andwf	??_initSortTimer& (0+255),f,b
  3188  003162  0100               	movlb	0	; () banked
  3189  003164  5185               	movf	??_initSortTimer& (0+255),w,b
  3190  003166  0D0A               	mullw	10
  3191  003168  0E24               	movlw	low _time
  3192  00316A  0100               	movlb	0	; () banked
  3193  00316C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3194  00316E  6ED9               	movwf	fsr2l,c
  3195  003170  0E01               	movlw	high _time
  3196  003172  0100               	movlb	0	; () banked
  3197  003174  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3198  003176  6EDA               	movwf	fsr2h,c
  3199  003178  50DF               	movf	indf2,w,c
  3200  00317A  0B0F               	andlw	15
  3201  00317C  0100               	movlb	0	; () banked
  3202  00317E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3203  003180  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3204  003182  50F3               	movf	prodl,w,c
  3205  003184  0100               	movlb	0	; () banked
  3206  003186  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3207  003188  50F4               	movf	prodh,w,c
  3208  00318A  0100               	movlb	0	; () banked
  3209  00318C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3210  00318E  90D8               	bcf	status,0,c
  3211  003190  0100               	movlb	0	; () banked
  3212  003192  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3213  003194  6ED9               	movwf	fsr2l,c
  3214  003196  0100               	movlb	0	; () banked
  3215  003198  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3216  00319A  6EDA               	movwf	fsr2h,c
  3217  00319C  0E0E               	movlw	low _startTime
  3218  00319E  26D9               	addwf	fsr2l,f,c
  3219  0031A0  0E01               	movlw	high _startTime
  3220  0031A2  22DA               	addwfc	fsr2h,f,c
  3221  0031A4  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3222  0031A8  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3223                           
  3224                           ; BSR set to: 0
  3225  0031AC  0100               	movlb	0	; () banked
  3226  0031AE  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3227  0031B0  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3228  0031B2  D7BA               	goto	l5682
  3229  0031B4                     l5692:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;sort.c: 230: }
  3233                           ;sort.c: 232: T0CON = 0b00010111;
  3234  0031B4  0E17               	movlw	23
  3235  0031B6  6ED5               	movwf	4053,c	;volatile
  3236                           
  3237                           ;sort.c: 241: TMR0H = 0b10000101;
  3238  0031B8  0E85               	movlw	133
  3239  0031BA  6ED7               	movwf	4055,c	;volatile
  3240                           
  3241                           ;sort.c: 242: TMR0L = 0b11101110;
  3242  0031BC  0EEE               	movlw	238
  3243  0031BE  6ED6               	movwf	4054,c	;volatile
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;sort.c: 243: TMR0ON = 1;
  3247  0031C0  8ED5               	bsf	4053,7,c	;volatile
  3248                           
  3249                           ; BSR set to: 0
  3250  0031C2  0012               	return		;funcret
  3251  0031C4                     __end_of_initSortTimer:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           postdec1	equ	0xFE5
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _initServos *****************
  3271 ;; Defined at:
  3272 ;;		line 245 in file "sort.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;Total ram usage:        1 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    8
  3293 ;; This function calls:
  3294 ;;		_updateServoPosition
  3295 ;; This function is called by:
  3296 ;;		_Loading
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text5
  3301  00386A                     __ptext5:
  3302                           	opt stack 0
  3303  00386A                     _initServos:
  3304                           	opt stack 20
  3305                           
  3306                           ;sort.c: 246: updateServoPosition(1500, 1);
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;incstack = 0
  3310  00386A  0E05               	movlw	5
  3311  00386C  0100               	movlb	0	; () banked
  3312  00386E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3313  003870  0EDC               	movlw	220
  3314  003872  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3315  003874  0E00               	movlw	0
  3316  003876  0100               	movlb	0	; () banked
  3317  003878  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3318  00387A  0E01               	movlw	1
  3319  00387C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3320  00387E  ECC9  F01A         	call	_updateServoPosition	;wreg free
  3321                           
  3322                           ;sort.c: 247: updateServoPosition(1000, 3);
  3323  003882  0E03               	movlw	3
  3324  003884  0100               	movlb	0	; () banked
  3325  003886  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3326  003888  0EE8               	movlw	232
  3327  00388A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3328  00388C  0E00               	movlw	0
  3329  00388E  0100               	movlb	0	; () banked
  3330  003890  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3331  003892  0E03               	movlw	3
  3332  003894  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3333  003896  ECC9  F01A         	call	_updateServoPosition	;wreg free
  3334                           
  3335                           ;sort.c: 248: TMR1ON = 1;
  3336  00389A  80CD               	bsf	4045,0,c	;volatile
  3337                           
  3338                           ;sort.c: 249: was_low_1 = 0;
  3339  00389C  0E00               	movlw	0
  3340  00389E  6E7A               	movwf	_was_low_1+1,c	;volatile
  3341  0038A0  0E00               	movlw	0
  3342  0038A2  6E79               	movwf	_was_low_1,c	;volatile
  3343                           
  3344                           ;sort.c: 250: _delay((unsigned long)((5)*(32000000/4000.0)));
  3345  0038A4  0E34               	movlw	52
  3346  0038A6  0100               	movlb	0	; () banked
  3347  0038A8  6F88               	movwf	??_initServos& (0+255),b
  3348  0038AA  0EF1               	movlw	241
  3349  0038AC                     u6597:
  3350  0038AC  2EE8               	decfsz	wreg,f,c
  3351  0038AE  D7FE               	bra	u6597
  3352  0038B0  2F88               	decfsz	??_initServos& (0+255),f,b
  3353  0038B2  D7FC               	bra	u6597
  3354  0038B4  D000               	nop2	
  3355                           
  3356                           ;sort.c: 251: TMR3ON = 1;
  3357  0038B6  80B1               	bsf	4017,0,c	;volatile
  3358                           
  3359                           ;sort.c: 252: was_low_3 = 0;
  3360  0038B8  0E00               	movlw	0
  3361  0038BA  6E7C               	movwf	_was_low_3+1,c	;volatile
  3362  0038BC  0E00               	movlw	0
  3363  0038BE  6E7B               	movwf	_was_low_3,c	;volatile
  3364                           
  3365                           ;sort.c: 253: LATCbits.LATC0 = 0;
  3366  0038C0  908B               	bcf	3979,0,c	;volatile
  3367  0038C2  0012               	return		;funcret
  3368  0038C4                     __end_of_initServos:
  3369                           	opt stack 0
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           postinc0	equ	0xFEE
  3377                           wreg	equ	0xFE8
  3378                           postdec1	equ	0xFE5
  3379                           fsr1l	equ	0xFE1
  3380                           indf2	equ	0xFDF
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _initGlobalVars *****************
  3388 ;; Defined at:
  3389 ;;		line 206 in file "sort.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    7
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_Loading
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text6
  3418  00367A                     __ptext6:
  3419                           	opt stack 0
  3420  00367A                     _initGlobalVars:
  3421                           	opt stack 21
  3422                           
  3423                           ;sort.c: 208: first = 0;
  3424                           
  3425                           ;incstack = 0
  3426  00367A  0E00               	movlw	0
  3427  00367C  0100               	movlb	0	; () banked
  3428  00367E  6FE3               	movwf	(_first+1)& (0+255),b
  3429  003680  0E00               	movlw	0
  3430  003682  6FE2               	movwf	_first& (0+255),b
  3431                           
  3432                           ;sort.c: 211: f_loadingNewCan = 0;
  3433  003684  0E00               	movlw	0
  3434  003686  0100               	movlb	0	; () banked
  3435  003688  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3436  00368A  0E00               	movlw	0
  3437  00368C  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3438                           
  3439                           ;sort.c: 212: f_lastCan = 0;
  3440  00368E  0E00               	movlw	0
  3441  003690  6E74               	movwf	_f_lastCan+1,c
  3442  003692  0E00               	movlw	0
  3443  003694  6E73               	movwf	_f_lastCan,c
  3444                           
  3445                           ;sort.c: 213: f_ID_receive = 1;
  3446  003696  0E00               	movlw	0
  3447  003698  6E6E               	movwf	_f_ID_receive+1,c
  3448  00369A  0E01               	movlw	1
  3449  00369C  6E6D               	movwf	_f_ID_receive,c
  3450                           
  3451                           ;sort.c: 214: f_can_coming_to_ID = 0;
  3452  00369E  0E00               	movlw	0
  3453  0036A0  6E70               	movwf	_f_can_coming_to_ID+1,c
  3454  0036A2  0E00               	movlw	0
  3455  0036A4  6E6F               	movwf	_f_can_coming_to_ID,c
  3456                           
  3457                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  3458  0036A6  0E00               	movlw	0
  3459  0036A8  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3460  0036AA  0E00               	movlw	0
  3461  0036AC  6E71               	movwf	_f_can_coming_to_distribution,c
  3462                           
  3463                           ;sort.c: 216: f_can_distributed = 0;
  3464  0036AE  0E00               	movlw	0
  3465  0036B0  0101               	movlb	1	; () banked
  3466  0036B2  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3467  0036B4  0E00               	movlw	0
  3468  0036B6  6F2B               	movwf	_f_can_distributed& (0+255),b
  3469                           
  3470                           ;sort.c: 219: count_total = 0;
  3471  0036B8  0E00               	movlw	0
  3472  0036BA  0100               	movlb	0	; () banked
  3473  0036BC  6FFF               	movwf	(_count_total+1)& (0+255),b
  3474  0036BE  0E00               	movlw	0
  3475  0036C0  6FFE               	movwf	_count_total& (0+255),b
  3476                           
  3477                           ;sort.c: 220: count_pop_no_tab = 0;
  3478  0036C2  0E00               	movlw	0
  3479  0036C4  6E62               	movwf	_count_pop_no_tab+1,c
  3480  0036C6  0E00               	movlw	0
  3481  0036C8  6E61               	movwf	_count_pop_no_tab,c
  3482                           
  3483                           ;sort.c: 221: count_pop_w_tab = 0;
  3484  0036CA  0E00               	movlw	0
  3485  0036CC  6E64               	movwf	_count_pop_w_tab+1,c
  3486  0036CE  0E00               	movlw	0
  3487  0036D0  6E63               	movwf	_count_pop_w_tab,c
  3488                           
  3489                           ;sort.c: 222: count_can_w_lab = 0;
  3490  0036D2  0E00               	movlw	0
  3491  0036D4  6E60               	movwf	_count_can_w_lab+1,c
  3492  0036D6  0E00               	movlw	0
  3493  0036D8  6E5F               	movwf	_count_can_w_lab,c
  3494                           
  3495                           ;sort.c: 223: count_can_no_lab = 0;
  3496  0036DA  0E00               	movlw	0
  3497  0036DC  6E5E               	movwf	_count_can_no_lab+1,c
  3498  0036DE  0E00               	movlw	0
  3499  0036E0  6E5D               	movwf	_count_can_no_lab,c
  3500                           
  3501                           ; BSR set to: 0
  3502  0036E2  0012               	return		;funcret
  3503  0036E4                     __end_of_initGlobalVars:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           postinc0	equ	0xFEE
  3512                           wreg	equ	0xFE8
  3513                           postdec1	equ	0xFE5
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _getIR *****************
  3523 ;; Defined at:
  3524 ;;		line 282 in file "sort.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        2 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    9
  3545 ;; This function calls:
  3546 ;;		_readIR
  3547 ;; This function is called by:
  3548 ;;		_Loading
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text7
  3553  003A12                     __ptext7:
  3554                           	opt stack 0
  3555  003A12                     _getIR:
  3556                           	opt stack 19
  3557                           
  3558                           ;sort.c: 283: readIR();
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;incstack = 0
  3562  003A12  EC56  F01D         	call	_readIR	;wreg free
  3563                           
  3564                           ;sort.c: 284: if(IR_signal==1){
  3565  003A16  0100               	movlb	0	; () banked
  3566  003A18  05DA               	decf	_IR_signal& (0+255),w,b
  3567  003A1A  0100               	movlb	0	; () banked
  3568  003A1C  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3569  003A1E  A4D8               	btfss	status,2,c
  3570  003A20  0012               	return	
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;sort.c: 285: _delay((unsigned long)((100)*(32000000/4000.0)));
  3574  003A22  0E05               	movlw	5
  3575  003A24  0100               	movlb	0	; () banked
  3576  003A26  6F87               	movwf	(??_getIR+1)& (0+255),b
  3577  003A28  0E0F               	movlw	15
  3578  003A2A  0100               	movlb	0	; () banked
  3579  003A2C  6F86               	movwf	??_getIR& (0+255),b
  3580  003A2E  0EF1               	movlw	241
  3581  003A30                     u6607:
  3582  003A30  2EE8               	decfsz	wreg,f,c
  3583  003A32  D7FE               	bra	u6607
  3584  003A34  2F86               	decfsz	??_getIR& (0+255),f,b
  3585  003A36  D7FC               	bra	u6607
  3586  003A38  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3587  003A3A  D7FA               	bra	u6607
  3588                           
  3589                           ;sort.c: 286: if(IR_signal==1){
  3590  003A3C  0100               	movlb	0	; () banked
  3591  003A3E  05DA               	decf	_IR_signal& (0+255),w,b
  3592  003A40  0100               	movlb	0	; () banked
  3593  003A42  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3594  003A44  A4D8               	btfss	status,2,c
  3595  003A46  D006               	goto	l5772
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;sort.c: 287: f_loadingNewCan = 1;
  3599  003A48  0E00               	movlw	0
  3600  003A4A  0100               	movlb	0	; () banked
  3601  003A4C  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3602  003A4E  0E01               	movlw	1
  3603  003A50  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3604                           
  3605                           ;sort.c: 288: }
  3606  003A52  0012               	return	
  3607  003A54                     l5772:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;sort.c: 289: else{
  3611                           ;sort.c: 290: f_loadingNewCan = 0;
  3612  003A54  0E00               	movlw	0
  3613  003A56  0100               	movlb	0	; () banked
  3614  003A58  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3615  003A5A  0E00               	movlw	0
  3616  003A5C  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3617                           
  3618                           ; BSR set to: 0
  3619  003A5E  0012               	return	
  3620  003A60                     __end_of_getIR:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           postinc0	equ	0xFEE
  3629                           wreg	equ	0xFE8
  3630                           postdec1	equ	0xFE5
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _ID *****************
  3640 ;; Defined at:
  3641 ;;		line 116 in file "sort.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:        8 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    9
  3662 ;; This function calls:
  3663 ;;		_readMAG
  3664 ;; This function is called by:
  3665 ;;		_sort
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text8
  3670  0029D6                     __ptext8:
  3671                           	opt stack 0
  3672  0029D6                     _ID:
  3673                           	opt stack 20
  3674                           
  3675                           ;sort.c: 117: if(f_can_coming_to_ID){
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;incstack = 0
  3679  0029D6  506F               	movf	_f_can_coming_to_ID,w,c
  3680  0029D8  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3681  0029DA  B4D8               	btfsc	status,2,c
  3682  0029DC  0012               	return	
  3683                           
  3684                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3685  0029DE  0E15               	movlw	21
  3686  0029E0  0100               	movlb	0	; () banked
  3687  0029E2  6F87               	movwf	(??_ID+1)& (0+255),b
  3688  0029E4  0E4B               	movlw	75
  3689  0029E6  0100               	movlb	0	; () banked
  3690  0029E8  6F86               	movwf	??_ID& (0+255),b
  3691  0029EA  0EBE               	movlw	190
  3692  0029EC                     u6617:
  3693  0029EC  2EE8               	decfsz	wreg,f,c
  3694  0029EE  D7FE               	bra	u6617
  3695  0029F0  2F86               	decfsz	??_ID& (0+255),f,b
  3696  0029F2  D7FC               	bra	u6617
  3697  0029F4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3698  0029F6  D7FA               	bra	u6617
  3699  0029F8  F000               	nop	
  3700                           
  3701                           ;sort.c: 124: int sensor_outputs[3];
  3702                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3703  0029FA  A480               	btfss	3968,2,c	;volatile
  3704  0029FC  D004               	goto	u4600
  3705  0029FE  0100               	movlb	0	; () banked
  3706  002A00  6B86               	clrf	??_ID& (0+255),b
  3707  002A02  2B86               	incf	??_ID& (0+255),f,b
  3708  002A04  D002               	goto	u4608
  3709  002A06                     u4600:
  3710  002A06  0100               	movlb	0	; () banked
  3711  002A08  6B86               	clrf	??_ID& (0+255),b
  3712  002A0A                     u4608:
  3713  002A0A  0100               	movlb	0	; () banked
  3714  002A0C  5186               	movf	??_ID& (0+255),w,b
  3715  002A0E  0100               	movlb	0	; () banked
  3716  002A10  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3717  002A12  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;sort.c: 130: if(!sensor_outputs[0]){
  3721  002A14  0100               	movlb	0	; () banked
  3722  002A16  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3723  002A18  0100               	movlb	0	; () banked
  3724  002A1A  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3725  002A1C  A4D8               	btfss	status,2,c
  3726  002A1E  D028               	goto	l6110
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;sort.c: 131: readMAG();
  3730  002A20  EC30  F01D         	call	_readMAG	;wreg free
  3731                           
  3732                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3733  002A24  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3734  002A28  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3735                           
  3736                           ;sort.c: 133: if(!sensor_outputs[1]){
  3737  002A2C  0100               	movlb	0	; () banked
  3738  002A2E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3739  002A30  0100               	movlb	0	; () banked
  3740  002A32  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3741  002A34  A4D8               	btfss	status,2,c
  3742  002A36  D01C               	goto	l6110
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3746  002A38  8689               	bsf	3977,3,c	;volatile
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3750  002A3A  0E05               	movlw	5
  3751  002A3C  0100               	movlb	0	; () banked
  3752  002A3E  6F87               	movwf	(??_ID+1)& (0+255),b
  3753  002A40  0E0F               	movlw	15
  3754  002A42  0100               	movlb	0	; () banked
  3755  002A44  6F86               	movwf	??_ID& (0+255),b
  3756  002A46  0EF1               	movlw	241
  3757  002A48                     u6627:
  3758  002A48  2EE8               	decfsz	wreg,f,c
  3759  002A4A  D7FE               	bra	u6627
  3760  002A4C  2F86               	decfsz	??_ID& (0+255),f,b
  3761  002A4E  D7FC               	bra	u6627
  3762  002A50  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3763  002A52  D7FA               	bra	u6627
  3764                           
  3765                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3766  002A54  A480               	btfss	3968,2,c	;volatile
  3767  002A56  D004               	goto	u4630
  3768  002A58  0100               	movlb	0	; () banked
  3769  002A5A  6B86               	clrf	??_ID& (0+255),b
  3770  002A5C  2B86               	incf	??_ID& (0+255),f,b
  3771  002A5E  D002               	goto	u4638
  3772  002A60                     u4630:
  3773  002A60  0100               	movlb	0	; () banked
  3774  002A62  6B86               	clrf	??_ID& (0+255),b
  3775  002A64                     u4638:
  3776  002A64  0100               	movlb	0	; () banked
  3777  002A66  5186               	movf	??_ID& (0+255),w,b
  3778  002A68  0100               	movlb	0	; () banked
  3779  002A6A  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3780  002A6C  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3784  002A6E  9689               	bcf	3977,3,c	;volatile
  3785  002A70                     l6110:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;sort.c: 139: }
  3789                           ;sort.c: 140: }
  3790                           ;sort.c: 143: if(!sensor_outputs[0]){
  3791  002A70  0100               	movlb	0	; () banked
  3792  002A72  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3793  002A74  0100               	movlb	0	; () banked
  3794  002A76  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3795  002A78  A4D8               	btfss	status,2,c
  3796  002A7A  D01E               	goto	l6128
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;sort.c: 144: if(!sensor_outputs[1]){
  3800  002A7C  0100               	movlb	0	; () banked
  3801  002A7E  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3802  002A80  0100               	movlb	0	; () banked
  3803  002A82  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3804  002A84  A4D8               	btfss	status,2,c
  3805  002A86  D012               	goto	l6124
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;sort.c: 145: if(!sensor_outputs[2]){
  3809  002A88  0100               	movlb	0	; () banked
  3810  002A8A  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3811  002A8C  0100               	movlb	0	; () banked
  3812  002A8E  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3813  002A90  A4D8               	btfss	status,2,c
  3814  002A92  D006               	goto	l6120
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;sort.c: 146: count_pop_no_tab++;
  3818  002A94  4A61               	infsnz	_count_pop_no_tab,f,c
  3819  002A96  2A62               	incf	_count_pop_no_tab+1,f,c
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;sort.c: 147: cur_can = 0;
  3823  002A98  0E00               	movlw	0
  3824  002A9A  6E66               	movwf	_cur_can+1,c
  3825  002A9C  0E00               	movlw	0
  3826  002A9E  D011               	goto	L3
  3827  002AA0                     l6120:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;sort.c: 149: else{
  3831                           ;sort.c: 150: count_pop_w_tab++;
  3832  002AA0  4A63               	infsnz	_count_pop_w_tab,f,c
  3833  002AA2  2A64               	incf	_count_pop_w_tab+1,f,c
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;sort.c: 151: cur_can = 1;
  3837  002AA4  0E00               	movlw	0
  3838  002AA6  6E66               	movwf	_cur_can+1,c
  3839  002AA8  0E01               	movlw	1
  3840  002AAA  D00B               	goto	L3
  3841  002AAC                     l6124:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;sort.c: 154: else{
  3845                           ;sort.c: 155: count_can_w_lab++;
  3846  002AAC  4A5F               	infsnz	_count_can_w_lab,f,c
  3847  002AAE  2A60               	incf	_count_can_w_lab+1,f,c
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;sort.c: 156: cur_can = 2;
  3851  002AB0  0E00               	movlw	0
  3852  002AB2  6E66               	movwf	_cur_can+1,c
  3853  002AB4  0E02               	movlw	2
  3854  002AB6  D005               	goto	L3
  3855  002AB8                     l6128:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;sort.c: 159: else{
  3859                           ;sort.c: 160: count_can_no_lab++;
  3860  002AB8  4A5D               	infsnz	_count_can_no_lab,f,c
  3861  002ABA  2A5E               	incf	_count_can_no_lab+1,f,c
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;sort.c: 161: cur_can = 3;
  3865  002ABC  0E00               	movlw	0
  3866  002ABE  6E66               	movwf	_cur_can+1,c
  3867  002AC0  0E03               	movlw	3
  3868  002AC2                     L3:
  3869  002AC2  6E65               	movwf	_cur_can,c
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;sort.c: 162: }
  3873                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3874                           
  3875                           ; BSR set to: 0
  3876  002AC4  808B               	bsf	3979,0,c	;volatile
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3880  002AC6  0E00               	movlw	0
  3881  002AC8  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3882  002ACA  0E01               	movlw	1
  3883  002ACC  6E71               	movwf	_f_can_coming_to_distribution,c
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3887  002ACE  0E15               	movlw	21
  3888  002AD0  0100               	movlb	0	; () banked
  3889  002AD2  6F87               	movwf	(??_ID+1)& (0+255),b
  3890  002AD4  0E4B               	movlw	75
  3891  002AD6  0100               	movlb	0	; () banked
  3892  002AD8  6F86               	movwf	??_ID& (0+255),b
  3893  002ADA  0EBE               	movlw	190
  3894  002ADC                     u6637:
  3895  002ADC  2EE8               	decfsz	wreg,f,c
  3896  002ADE  D7FE               	bra	u6637
  3897  002AE0  2F86               	decfsz	??_ID& (0+255),f,b
  3898  002AE2  D7FC               	bra	u6637
  3899  002AE4  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3900  002AE6  D7FA               	bra	u6637
  3901  002AE8  F000               	nop	
  3902                           
  3903                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3904  002AEA  908B               	bcf	3979,0,c	;volatile
  3905                           
  3906                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3907  002AEC  0E00               	movlw	0
  3908  002AEE  6E70               	movwf	_f_can_coming_to_ID+1,c
  3909  002AF0  0E00               	movlw	0
  3910  002AF2  6E6F               	movwf	_f_can_coming_to_ID,c
  3911  002AF4  0012               	return	
  3912  002AF6                     __end_of_ID:
  3913                           	opt stack 0
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           postdec1	equ	0xFE5
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _Distribution *****************
  3932 ;; Defined at:
  3933 ;;		line 172 in file "sort.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;Total ram usage:        2 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    8
  3954 ;; This function calls:
  3955 ;;		_updateServoPosition
  3956 ;; This function is called by:
  3957 ;;		_sort
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text9
  3962  0028A2                     __ptext9:
  3963                           	opt stack 0
  3964  0028A2                     _Distribution:
  3965                           	opt stack 21
  3966                           
  3967                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3968                           
  3969                           ;incstack = 0
  3970  0028A2  5071               	movf	_f_can_coming_to_distribution,w,c
  3971  0028A4  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  3972  0028A6  B4D8               	btfsc	status,2,c
  3973  0028A8  0012               	return	
  3974  0028AA  D034               	goto	l6156
  3975  0028AC                     l6146:
  3976                           
  3977                           ;sort.c: 178: updateServoPosition(1000, 1);
  3978  0028AC  0E03               	movlw	3
  3979  0028AE  0100               	movlb	0	; () banked
  3980  0028B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3981  0028B2  0EE8               	movlw	232
  3982  0028B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3983  0028B6  0E00               	movlw	0
  3984  0028B8  0100               	movlb	0	; () banked
  3985  0028BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3986  0028BC  0E01               	movlw	1
  3987  0028BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3988  0028C0  ECC9  F01A         	call	_updateServoPosition	;wreg free
  3989                           
  3990                           ;sort.c: 179: break;
  3991  0028C4  D03E               	goto	l6158
  3992  0028C6                     l6148:
  3993                           
  3994                           ;sort.c: 181: updateServoPosition(1333, 1);
  3995  0028C6  0E05               	movlw	5
  3996  0028C8  0100               	movlb	0	; () banked
  3997  0028CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3998  0028CC  0E35               	movlw	53
  3999  0028CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4000  0028D0  0E00               	movlw	0
  4001  0028D2  0100               	movlb	0	; () banked
  4002  0028D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4003  0028D6  0E01               	movlw	1
  4004  0028D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4005  0028DA  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4006                           
  4007                           ;sort.c: 182: break;
  4008  0028DE  D031               	goto	l6158
  4009  0028E0                     l6150:
  4010                           
  4011                           ;sort.c: 184: updateServoPosition(1666, 1);
  4012  0028E0  0E06               	movlw	6
  4013  0028E2  0100               	movlb	0	; () banked
  4014  0028E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4015  0028E6  0E82               	movlw	130
  4016  0028E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4017  0028EA  0E00               	movlw	0
  4018  0028EC  0100               	movlb	0	; () banked
  4019  0028EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4020  0028F0  0E01               	movlw	1
  4021  0028F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4022  0028F4  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4023                           
  4024                           ;sort.c: 185: break;
  4025  0028F8  D024               	goto	l6158
  4026  0028FA                     l6152:
  4027                           
  4028                           ;sort.c: 187: updateServoPosition(2000, 1);
  4029  0028FA  0E07               	movlw	7
  4030  0028FC  0100               	movlb	0	; () banked
  4031  0028FE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4032  002900  0ED0               	movlw	208
  4033  002902  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4034  002904  0E00               	movlw	0
  4035  002906  0100               	movlb	0	; () banked
  4036  002908  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4037  00290A  0E01               	movlw	1
  4038  00290C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4039  00290E  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4040                           
  4041                           ;sort.c: 191: }
  4042                           
  4043                           ;sort.c: 190: break;
  4044                           
  4045                           ;sort.c: 189: default:
  4046                           
  4047                           ;sort.c: 188: break;
  4048  002912  D017               	goto	l6158
  4049  002914                     l6156:
  4050  002914  C065  F088         	movff	_cur_can,??_Distribution
  4051  002918  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4052                           
  4053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4054                           ; Switch size 1, requested type "space"
  4055                           ; Number of cases is 1, Range of values is 0 to 0
  4056                           ; switch strategies available:
  4057                           ; Name         Instructions Cycles
  4058                           ; simple_byte            4     3 (average)
  4059                           ;	Chosen strategy is simple_byte
  4060  00291C  0100               	movlb	0	; () banked
  4061  00291E  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4062  002920  0A00               	xorlw	0	; case 0
  4063  002922  A4D8               	btfss	status,2,c
  4064  002924  D00E               	goto	l6158
  4065                           
  4066                           ; BSR set to: 0
  4067                           ; Switch size 1, requested type "space"
  4068                           ; Number of cases is 4, Range of values is 0 to 3
  4069                           ; switch strategies available:
  4070                           ; Name         Instructions Cycles
  4071                           ; simple_byte           13     7 (average)
  4072                           ;	Chosen strategy is simple_byte
  4073  002926  0100               	movlb	0	; () banked
  4074  002928  5188               	movf	??_Distribution& (0+255),w,b
  4075  00292A  0A00               	xorlw	0	; case 0
  4076  00292C  B4D8               	btfsc	status,2,c
  4077  00292E  D7BE               	goto	l6146
  4078  002930  0A01               	xorlw	1	; case 1
  4079  002932  B4D8               	btfsc	status,2,c
  4080  002934  D7C8               	goto	l6148
  4081  002936  0A03               	xorlw	3	; case 2
  4082  002938  B4D8               	btfsc	status,2,c
  4083  00293A  D7D2               	goto	l6150
  4084  00293C  0A01               	xorlw	1	; case 3
  4085  00293E  B4D8               	btfsc	status,2,c
  4086  002940  D7DC               	goto	l6152
  4087  002942                     l6158:
  4088                           
  4089                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  4090  002942  0E15               	movlw	21
  4091  002944  0100               	movlb	0	; () banked
  4092  002946  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4093  002948  0E4B               	movlw	75
  4094  00294A  0100               	movlb	0	; () banked
  4095  00294C  6F88               	movwf	??_Distribution& (0+255),b
  4096  00294E  0EBE               	movlw	190
  4097  002950                     u6647:
  4098  002950  2EE8               	decfsz	wreg,f,c
  4099  002952  D7FE               	bra	u6647
  4100  002954  2F88               	decfsz	??_Distribution& (0+255),f,b
  4101  002956  D7FC               	bra	u6647
  4102  002958  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4103  00295A  D7FA               	bra	u6647
  4104  00295C  F000               	nop	
  4105                           
  4106                           ;sort.c: 195: updateServoPosition(1500, 3);
  4107  00295E  0E05               	movlw	5
  4108  002960  0100               	movlb	0	; () banked
  4109  002962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4110  002964  0EDC               	movlw	220
  4111  002966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4112  002968  0E00               	movlw	0
  4113  00296A  0100               	movlb	0	; () banked
  4114  00296C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4115  00296E  0E03               	movlw	3
  4116  002970  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4117  002972  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4118                           
  4119                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4120  002976  0E15               	movlw	21
  4121  002978  0100               	movlb	0	; () banked
  4122  00297A  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4123  00297C  0E4B               	movlw	75
  4124  00297E  0100               	movlb	0	; () banked
  4125  002980  6F88               	movwf	??_Distribution& (0+255),b
  4126  002982  0EBE               	movlw	190
  4127  002984                     u6657:
  4128  002984  2EE8               	decfsz	wreg,f,c
  4129  002986  D7FE               	bra	u6657
  4130  002988  2F88               	decfsz	??_Distribution& (0+255),f,b
  4131  00298A  D7FC               	bra	u6657
  4132  00298C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4133  00298E  D7FA               	bra	u6657
  4134  002990  F000               	nop	
  4135                           
  4136                           ;sort.c: 199: updateServoPosition(1500, 1);
  4137  002992  0E05               	movlw	5
  4138  002994  0100               	movlb	0	; () banked
  4139  002996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4140  002998  0EDC               	movlw	220
  4141  00299A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4142  00299C  0E00               	movlw	0
  4143  00299E  0100               	movlb	0	; () banked
  4144  0029A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4145  0029A2  0E01               	movlw	1
  4146  0029A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4147  0029A6  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4148                           
  4149                           ;sort.c: 200: updateServoPosition(1000, 3);
  4150  0029AA  0E03               	movlw	3
  4151  0029AC  0100               	movlb	0	; () banked
  4152  0029AE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4153  0029B0  0EE8               	movlw	232
  4154  0029B2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4155  0029B4  0E00               	movlw	0
  4156  0029B6  0100               	movlb	0	; () banked
  4157  0029B8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4158  0029BA  0E03               	movlw	3
  4159  0029BC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4160  0029BE  ECC9  F01A         	call	_updateServoPosition	;wreg free
  4161                           
  4162                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4163  0029C2  0E00               	movlw	0
  4164  0029C4  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4165  0029C6  0E00               	movlw	0
  4166  0029C8  6E71               	movwf	_f_can_coming_to_distribution,c
  4167                           
  4168                           ;sort.c: 202: f_can_distributed = 1;
  4169  0029CA  0E00               	movlw	0
  4170  0029CC  0101               	movlb	1	; () banked
  4171  0029CE  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4172  0029D0  0E01               	movlw	1
  4173  0029D2  6F2B               	movwf	_f_can_distributed& (0+255),b
  4174  0029D4  0012               	return	
  4175  0029D6                     __end_of_Distribution:
  4176                           	opt stack 0
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           postinc0	equ	0xFEE
  4184                           wreg	equ	0xFE8
  4185                           postdec1	equ	0xFE5
  4186                           fsr1l	equ	0xFE1
  4187                           indf2	equ	0xFDF
  4188                           postinc2	equ	0xFDE
  4189                           postdec2	equ	0xFDD
  4190                           fsr2h	equ	0xFDA
  4191                           fsr2l	equ	0xFD9
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _machineConfig *****************
  4195 ;; Defined at:
  4196 ;;		line 15 in file "MachineConfig.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;Total ram usage:        0 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    7
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text10
  4225  0038C4                     __ptext10:
  4226                           	opt stack 0
  4227  0038C4                     _machineConfig:
  4228                           	opt stack 23
  4229                           
  4230                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4231                           
  4232                           ;incstack = 0
  4233  0038C4  0EF0               	movlw	240
  4234  0038C6  6ED3               	movwf	4051,c	;volatile
  4235                           
  4236                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4237  0038C8  8C9B               	bsf	3995,6,c	;volatile
  4238                           
  4239                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4240  0038CA  0E47               	movlw	71
  4241  0038CC  6E92               	movwf	3986,c	;volatile
  4242                           
  4243                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4244  0038CE  0EF2               	movlw	242
  4245  0038D0  6E93               	movwf	3987,c	;volatile
  4246                           
  4247                           ;MachineConfig.c: 27: TRISC = 0x00;
  4248  0038D2  0E00               	movlw	0
  4249  0038D4  6E94               	movwf	3988,c	;volatile
  4250                           
  4251                           ;MachineConfig.c: 31: TRISD = 0x00;
  4252  0038D6  0E00               	movlw	0
  4253  0038D8  6E95               	movwf	3989,c	;volatile
  4254                           
  4255                           ;MachineConfig.c: 34: TRISE = 0x00;
  4256  0038DA  0E00               	movlw	0
  4257  0038DC  6E96               	movwf	3990,c	;volatile
  4258                           
  4259                           ;MachineConfig.c: 37: LATA = 0x00;
  4260  0038DE  0E00               	movlw	0
  4261  0038E0  6E89               	movwf	3977,c	;volatile
  4262                           
  4263                           ;MachineConfig.c: 38: LATB = 0x00;
  4264  0038E2  0E00               	movlw	0
  4265  0038E4  6E8A               	movwf	3978,c	;volatile
  4266                           
  4267                           ;MachineConfig.c: 39: LATC = 0x00;
  4268  0038E6  0E00               	movlw	0
  4269  0038E8  6E8B               	movwf	3979,c	;volatile
  4270                           
  4271                           ;MachineConfig.c: 40: LATD = 0x00;
  4272  0038EA  0E00               	movlw	0
  4273  0038EC  6E8C               	movwf	3980,c	;volatile
  4274                           
  4275                           ;MachineConfig.c: 41: LATE = 0x00;
  4276  0038EE  0E00               	movlw	0
  4277  0038F0  6E8D               	movwf	3981,c	;volatile
  4278                           
  4279                           ;MachineConfig.c: 43: nRBPU = 0;
  4280  0038F2  9EF1               	bcf	intcon2,7,c	;volatile
  4281                           
  4282                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4283  0038F4  0E00               	movlw	0
  4284  0038F6  6EC2               	movwf	4034,c	;volatile
  4285                           
  4286                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4287  0038F8  0E0D               	movlw	13
  4288  0038FA  6EC1               	movwf	4033,c	;volatile
  4289                           
  4290                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4291  0038FC  0E00               	movlw	0
  4292  0038FE  6EB5               	movwf	4021,c	;volatile
  4293                           
  4294                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4295  003900  96B4               	bcf	4020,3,c	;volatile
  4296                           
  4297                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4298  003902  0EB1               	movlw	177
  4299  003904  6EC0               	movwf	4032,c	;volatile
  4300                           
  4301                           ;MachineConfig.c: 55: INT1IE = 1;
  4302  003906  86F0               	bsf	intcon3,3,c	;volatile
  4303                           
  4304                           ;MachineConfig.c: 57: TMR0IE = 1;
  4305  003908  8AF2               	bsf	intcon,5,c	;volatile
  4306                           
  4307                           ;MachineConfig.c: 58: TMR1IE = 1;
  4308  00390A  809D               	bsf	3997,0,c	;volatile
  4309                           
  4310                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4311  00390C  0EB0               	movlw	176
  4312  00390E  6ECD               	movwf	4045,c	;volatile
  4313                           
  4314                           ;MachineConfig.c: 60: TMR2IE = 1;
  4315  003910  829D               	bsf	3997,1,c	;volatile
  4316                           
  4317                           ;MachineConfig.c: 61: TMR3IE = 1;
  4318  003912  82A0               	bsf	4000,1,c	;volatile
  4319                           
  4320                           ;MachineConfig.c: 62: PEIE = 1;
  4321  003914  8CF2               	bsf	intcon,6,c	;volatile
  4322                           
  4323                           ;MachineConfig.c: 63: ADIE = 0;
  4324  003916  9C9D               	bcf	3997,6,c	;volatile
  4325                           
  4326                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4327  003918  9EF2               	bcf	intcon,7,c	;volatile
  4328  00391A  0012               	return		;funcret
  4329  00391C                     __end_of_machineConfig:
  4330                           	opt stack 0
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           prodh	equ	0xFF4
  4336                           prodl	equ	0xFF3
  4337                           intcon	equ	0xFF2
  4338                           intcon2	equ	0xFF1
  4339                           intcon3	equ	0xFF0
  4340                           postinc0	equ	0xFEE
  4341                           wreg	equ	0xFE8
  4342                           postdec1	equ	0xFE5
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _logRun *****************
  4352 ;; Defined at:
  4353 ;;		line 84 in file "EEPROM.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4358 ;;  i               2   55[BANK0 ] int 
  4359 ;;  num             1   49[BANK0 ] unsigned char 
  4360 ;;  addr            2   57[BANK0 ] unsigned short 
  4361 ;;  byte11          1   54[BANK0 ] unsigned char 
  4362 ;;  byte3           1   52[BANK0 ] unsigned char 
  4363 ;;  byte2           1   51[BANK0 ] unsigned char 
  4364 ;;  byte1           1   50[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;Total ram usage:       10 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:   11
  4381 ;; This function calls:
  4382 ;;		_EEPROM_read
  4383 ;;		_EEPROM_write
  4384 ;; This function is called by:
  4385 ;;		_main
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text11
  4390  002766                     __ptext11:
  4391                           	opt stack 0
  4392  002766                     _logRun:
  4393                           	opt stack 19
  4394                           
  4395                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4396                           
  4397                           ;incstack = 0
  4398  002766  0E00               	movlw	0
  4399  002768  0100               	movlb	0	; () banked
  4400  00276A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4401  00276C  0E00               	movlw	0
  4402  00276E  6F80               	movwf	EEPROM_read@address& (0+255),b
  4403  002770  EC1D  F020         	call	_EEPROM_read	;wreg free
  4404  002774  0100               	movlb	0	; () banked
  4405  002776  6FFD               	movwf	_sel& (0+255),b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4409  002778  0100               	movlb	0	; () banked
  4410  00277A  51FD               	movf	_sel& (0+255),w,b
  4411  00277C  0D0B               	mullw	11
  4412  00277E  0E01               	movlw	1
  4413  002780  24F3               	addwf	prodl,w,c
  4414  002782  0100               	movlb	0	; () banked
  4415  002784  6FB9               	movwf	logRun@addr& (0+255),b
  4416  002786  0E00               	movlw	0
  4417  002788  20F4               	addwfc	prodh,w,c
  4418  00278A  0100               	movlb	0	; () banked
  4419  00278C  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;EEPROM.c: 101: if (sel < 3){
  4423  00278E  0E03               	movlw	3
  4424  002790  0100               	movlb	0	; () banked
  4425  002792  61FD               	cpfslt	_sel& (0+255),b
  4426  002794  D00E               	goto	l7422
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4430  002796  0100               	movlb	0	; () banked
  4431  002798  29FD               	incf	_sel& (0+255),w,b
  4432  00279A  0100               	movlb	0	; () banked
  4433  00279C  6FB1               	movwf	logRun@num& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4437  00279E  0E00               	movlw	0
  4438  0027A0  0100               	movlb	0	; () banked
  4439  0027A2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4440  0027A4  0E00               	movlw	0
  4441  0027A6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4442  0027A8  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4443  0027AC  ECF3  F016         	call	_EEPROM_write	;wreg free
  4444                           
  4445                           ;EEPROM.c: 104: }
  4446  0027B0  D00A               	goto	l7424
  4447  0027B2                     l7422:
  4448                           
  4449                           ;EEPROM.c: 105: else{
  4450                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4451  0027B2  0E00               	movlw	0
  4452  0027B4  0100               	movlb	0	; () banked
  4453  0027B6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4454  0027B8  0E00               	movlw	0
  4455  0027BA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4456  0027BC  0E00               	movlw	0
  4457  0027BE  0100               	movlb	0	; () banked
  4458  0027C0  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4459  0027C2  ECF3  F016         	call	_EEPROM_write	;wreg free
  4460  0027C6                     l7424:
  4461                           
  4462                           ;EEPROM.c: 107: }
  4463                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4464  0027C6  0100               	movlb	0	; () banked
  4465  0027C8  51FE               	movf	_count_total& (0+255),w,b
  4466  0027CA  0980               	iorlw	128
  4467  0027CC  0100               	movlb	0	; () banked
  4468  0027CE  6FB2               	movwf	logRun@byte1& (0+255),b
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4472  0027D0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4473  0027D4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4474  0027D8  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4475  0027DC  ECF3  F016         	call	_EEPROM_write	;wreg free
  4476                           
  4477                           ;EEPROM.c: 112: addr++;
  4478  0027E0  0100               	movlb	0	; () banked
  4479  0027E2  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4480  0027E4  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4484  0027E6  3861               	swapf	_count_pop_no_tab,w,c
  4485  0027E8  0BF0               	andlw	240
  4486  0027EA  1063               	iorwf	_count_pop_w_tab,w,c
  4487  0027EC  0100               	movlb	0	; () banked
  4488  0027EE  6FB3               	movwf	logRun@byte2& (0+255),b
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4492  0027F0  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4493  0027F4  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4494  0027F8  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4495  0027FC  ECF3  F016         	call	_EEPROM_write	;wreg free
  4496                           
  4497                           ;EEPROM.c: 117: addr++;
  4498  002800  0100               	movlb	0	; () banked
  4499  002802  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4500  002804  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4504  002806  385F               	swapf	_count_can_w_lab,w,c
  4505  002808  0BF0               	andlw	240
  4506  00280A  105D               	iorwf	_count_can_no_lab,w,c
  4507  00280C  0100               	movlb	0	; () banked
  4508  00280E  6FB4               	movwf	logRun@byte3& (0+255),b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4512  002810  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4513  002814  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4514  002818  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4515  00281C  ECF3  F016         	call	_EEPROM_write	;wreg free
  4516                           
  4517                           ;EEPROM.c: 120: addr++;
  4518  002820  0100               	movlb	0	; () banked
  4519  002822  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4520  002824  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4524  002826  0E00               	movlw	0
  4525  002828  0100               	movlb	0	; () banked
  4526  00282A  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4527  00282C  0E00               	movlw	0
  4528  00282E  6FB7               	movwf	logRun@i& (0+255),b
  4529                           
  4530                           ; BSR set to: 0
  4531  002830  0100               	movlb	0	; () banked
  4532  002832  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4533  002834  D008               	goto	l7448
  4534  002836  0100               	movlb	0	; () banked
  4535  002838  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4536  00283A  E128               	bnz	l922
  4537  00283C  0E07               	movlw	7
  4538  00283E  0100               	movlb	0	; () banked
  4539  002840  5DB7               	subwf	logRun@i& (0+255),w,b
  4540  002842  B0D8               	btfsc	status,0,c
  4541  002844  D023               	goto	l922
  4542  002846                     l7448:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4546  002846  90D8               	bcf	status,0,c
  4547  002848  0100               	movlb	0	; () banked
  4548  00284A  35B7               	rlcf	logRun@i& (0+255),w,b
  4549  00284C  6ED9               	movwf	fsr2l,c
  4550  00284E  0100               	movlb	0	; () banked
  4551  002850  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4552  002852  6EDA               	movwf	fsr2h,c
  4553  002854  0E0E               	movlw	low _startTime
  4554  002856  26D9               	addwf	fsr2l,f,c
  4555  002858  0E01               	movlw	high _startTime
  4556  00285A  22DA               	addwfc	fsr2h,f,c
  4557  00285C  50DF               	movf	indf2,w,c
  4558  00285E  0100               	movlb	0	; () banked
  4559  002860  6FB5               	movwf	logRun@byte_i& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4563  002862  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4564  002866  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4565  00286A  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4566  00286E  ECF3  F016         	call	_EEPROM_write	;wreg free
  4567                           
  4568                           ;EEPROM.c: 126: addr++;
  4569  002872  0100               	movlb	0	; () banked
  4570  002874  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4571  002876  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4572                           
  4573                           ; BSR set to: 0
  4574  002878  0100               	movlb	0	; () banked
  4575  00287A  4BB7               	infsnz	logRun@i& (0+255),f,b
  4576  00287C  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4577                           
  4578                           ; BSR set to: 0
  4579  00287E  0100               	movlb	0	; () banked
  4580  002880  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4581  002882  D7E1               	goto	l7448
  4582  002884  0100               	movlb	0	; () banked
  4583  002886  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4584  002888  E101               	bnz	u6400
  4585  00288A  D7D8               	goto	L4
  4586  00288C                     u6400:
  4587  00288C                     l922:
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;EEPROM.c: 127: }
  4591                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4592  00288C  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4596  002890  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4597  002894  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4598  002898  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4599  00289C  ECF3  F016         	call	_EEPROM_write	;wreg free
  4600  0028A0  0012               	return		;funcret
  4601  0028A2                     __end_of_logRun:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           intcon3	equ	0xFF0
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1l	equ	0xFE1
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           postdec2	equ	0xFDD
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _EEPROM_write *****************
  4624 ;; Defined at:
  4625 ;;		line 32 in file "EEPROM.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  address         2   43[BANK0 ] unsigned short 
  4628 ;;  data            1   45[BANK0 ] unsigned char 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  i               1   48[BANK0 ] unsigned char 
  4631 ;;  i               1   47[BANK0 ] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  1    wreg      void 
  4634 ;; Registers used:
  4635 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4641 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;Total ram usage:        6 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:   10
  4648 ;; This function calls:
  4649 ;;		_EEPROM_read
  4650 ;;		_lcdInst
  4651 ;;		_printf
  4652 ;; This function is called by:
  4653 ;;		_Loading
  4654 ;;		_logRun
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text12
  4659  002DE6                     __ptext12:
  4660                           	opt stack 0
  4661  002DE6                     _EEPROM_write:
  4662                           	opt stack 18
  4663                           
  4664                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4665                           
  4666                           ;incstack = 0
  4667  002DE6  84A6               	bsf	4006,2,c	;volatile
  4668                           
  4669                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4670  002DE8  0100               	movlb	0	; () banked
  4671  002DEA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4672  002DEC  6EAA               	movwf	4010,c	;volatile
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4676  002DEE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;EEPROM.c: 39: EEDATA = data;
  4680  002DF2  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4684  002DF6  9EA6               	bcf	4006,7,c	;volatile
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4688  002DF8  9CA6               	bcf	4006,6,c	;volatile
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4692  002DFA  9EF2               	bcf	intcon,7,c	;volatile
  4693                           
  4694                           ;EEPROM.c: 45: EECON2 = 0x55;
  4695  002DFC  0E55               	movlw	85
  4696  002DFE  6EA7               	movwf	4007,c	;volatile
  4697                           
  4698                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4699  002E00  0EAA               	movlw	170
  4700  002E02  6EA7               	movwf	4007,c	;volatile
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4704  002E04  82A6               	bsf	4006,1,c	;volatile
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4708  002E06  8EF2               	bsf	intcon,7,c	;volatile
  4709  002E08                     l900:
  4710  002E08  A8A1               	btfss	4001,4,c	;volatile
  4711  002E0A  D7FE               	goto	l900
  4712                           
  4713                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4714  002E0C  98A1               	bcf	4001,4,c	;volatile
  4715                           
  4716                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4717  002E0E  94A6               	bcf	4006,2,c	;volatile
  4718                           
  4719                           ;EEPROM.c: 57: if(debug){
  4720  002E10  5067               	movf	_debug,w,c
  4721  002E12  1068               	iorwf	_debug+1,w,c
  4722  002E14  B4D8               	btfsc	status,2,c
  4723  002E16  0012               	return	
  4724                           
  4725                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4726  002E18  0E01               	movlw	1
  4727  002E1A  EC5A  F020         	call	_lcdInst
  4728  002E1E  0E68               	movlw	104
  4729  002E20  0100               	movlb	0	; () banked
  4730  002E22  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4731  002E24  0EE4               	movlw	228
  4732  002E26                     u6667:
  4733  002E26  2EE8               	decfsz	wreg,f,c
  4734  002E28  D7FE               	bra	u6667
  4735  002E2A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4736  002E2C  D7FC               	bra	u6667
  4737  002E2E  F000               	nop	
  4738                           
  4739                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4740  002E30  0E80               	movlw	128
  4741  002E32  EC5A  F020         	call	_lcdInst
  4742                           
  4743                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4744  002E36  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4745  002E3A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4746  002E3E  EC1D  F020         	call	_EEPROM_read	;wreg free
  4747  002E42  0100               	movlb	0	; () banked
  4748  002E44  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4749  002E46  A4D8               	btfss	status,2,c
  4750  002E48  D024               	goto	l5736
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4754  002E4A  0E82               	movlw	low STR_66
  4755  002E4C  0100               	movlb	0	; () banked
  4756  002E4E  6F8E               	movwf	printf@f& (0+255),b
  4757  002E50  0EFB               	movlw	high STR_66
  4758  002E52  0100               	movlb	0	; () banked
  4759  002E54  6F8F               	movwf	(printf@f+1)& (0+255),b
  4760  002E56  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4761  002E5A  0100               	movlb	0	; () banked
  4762  002E5C  6B91               	clrf	(?_printf+3)& (0+255),b
  4763  002E5E  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4764  002E62  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4765  002E66  EC97  F008         	call	_printf	;wreg free
  4766                           
  4767                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4768  002E6A  0E00               	movlw	0
  4769  002E6C  0100               	movlb	0	; () banked
  4770  002E6E  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4771  002E70                     l5728:
  4772                           
  4773                           ; BSR set to: 0
  4774  002E70  0E63               	movlw	99
  4775  002E72  0100               	movlb	0	; () banked
  4776  002E74  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4777  002E76  D001               	goto	l5732
  4778  002E78  0012               	return	
  4779  002E7A                     l5732:
  4780                           
  4781                           ; BSR set to: 0
  4782  002E7A  0E68               	movlw	104
  4783  002E7C  0100               	movlb	0	; () banked
  4784  002E7E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4785  002E80  0EE4               	movlw	228
  4786  002E82                     u6677:
  4787  002E82  2EE8               	decfsz	wreg,f,c
  4788  002E84  D7FE               	bra	u6677
  4789  002E86  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4790  002E88  D7FC               	bra	u6677
  4791  002E8A  F000               	nop	
  4792  002E8C  0100               	movlb	0	; () banked
  4793  002E8E  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4794  002E90  D7EF               	goto	l5728
  4795  002E92                     l5736:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4799  002E92  0EBC               	movlw	low STR_67
  4800  002E94  0100               	movlb	0	; () banked
  4801  002E96  6F8E               	movwf	printf@f& (0+255),b
  4802  002E98  0EFF               	movlw	high STR_67
  4803  002E9A  0100               	movlb	0	; () banked
  4804  002E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4805  002E9E  EC97  F008         	call	_printf	;wreg free
  4806  002EA2  0E00               	movlw	0
  4807  002EA4  0100               	movlb	0	; () banked
  4808  002EA6  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4809  002EA8                     l5740:
  4810                           
  4811                           ; BSR set to: 0
  4812  002EA8  0E63               	movlw	99
  4813  002EAA  0100               	movlb	0	; () banked
  4814  002EAC  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4815  002EAE  D001               	goto	l5744
  4816  002EB0  0012               	return	
  4817  002EB2                     l5744:
  4818                           
  4819                           ; BSR set to: 0
  4820  002EB2  0E68               	movlw	104
  4821  002EB4  0100               	movlb	0	; () banked
  4822  002EB6  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4823  002EB8  0EE4               	movlw	228
  4824  002EBA                     u6687:
  4825  002EBA  2EE8               	decfsz	wreg,f,c
  4826  002EBC  D7FE               	bra	u6687
  4827  002EBE  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4828  002EC0  D7FC               	bra	u6687
  4829  002EC2  F000               	nop	
  4830  002EC4  0100               	movlb	0	; () banked
  4831  002EC6  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4832  002EC8  D7EF               	goto	l5740
  4833  002ECA                     __end_of_EEPROM_write:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           intcon2	equ	0xFF1
  4843                           intcon3	equ	0xFF0
  4844                           postinc0	equ	0xFEE
  4845                           wreg	equ	0xFE8
  4846                           postdec1	equ	0xFE5
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _EEPROM_read *****************
  4856 ;; Defined at:
  4857 ;;		line 68 in file "EEPROM.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  address         2    0[BANK0 ] unsigned short 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      unsigned char 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4871 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;Total ram usage:        2 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    7
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_Loading
  4882 ;;		_EEPROM_write
  4883 ;;		_logRun
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text13
  4888  00403A                     __ptext13:
  4889                           	opt stack 0
  4890  00403A                     _EEPROM_read:
  4891                           	opt stack 20
  4892                           
  4893                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4894                           
  4895                           ;incstack = 0
  4896  00403A  0100               	movlb	0	; () banked
  4897  00403C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4898  00403E  6EAA               	movwf	4010,c	;volatile
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4902  004040  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4906  004044  9EA6               	bcf	4006,7,c	;volatile
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4910  004046  9CA6               	bcf	4006,6,c	;volatile
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4914  004048  80A6               	bsf	4006,0,c	;volatile
  4915  00404A                     l913:
  4916  00404A  B0A6               	btfsc	4006,0,c	;volatile
  4917  00404C  D7FE               	goto	l913
  4918                           
  4919                           ;EEPROM.c: 81: return EEDATA;
  4920  00404E  50A8               	movf	4008,w,c	;volatile
  4921  004050  0012               	return	
  4922  004052                     __end_of_EEPROM_read:
  4923                           	opt stack 0
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           prodh	equ	0xFF4
  4929                           prodl	equ	0xFF3
  4930                           intcon	equ	0xFF2
  4931                           intcon2	equ	0xFF1
  4932                           intcon3	equ	0xFF0
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           postdec1	equ	0xFE5
  4936                           fsr1l	equ	0xFE1
  4937                           indf2	equ	0xFDF
  4938                           postinc2	equ	0xFDE
  4939                           postdec2	equ	0xFDD
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _initUI *****************
  4945 ;; Defined at:
  4946 ;;		line 62 in file "UI.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:   12
  4967 ;; This function calls:
  4968 ;;		_change_state_to_menu_start
  4969 ;;		_loadRTC
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text14
  4976  003F90                     __ptext14:
  4977                           	opt stack 0
  4978  003F90                     _initUI:
  4979                           	opt stack 18
  4980                           
  4981                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4982                           
  4983                           ;incstack = 0
  4984  003F90  8EF2               	bsf	intcon,7,c	;volatile
  4985                           
  4986                           ;UI.c: 64: machine_state = UI_state;
  4987  003F92  0E00               	movlw	0
  4988  003F94  0100               	movlb	0	; () banked
  4989  003F96  6FFC               	movwf	_machine_state& (0+255),b
  4990                           
  4991                           ;UI.c: 65: logstate = 0;
  4992  003F98  0E00               	movlw	0
  4993  003F9A  0100               	movlb	0	; () banked
  4994  003F9C  6FF7               	movwf	(_logstate+1)& (0+255),b
  4995  003F9E  0E00               	movlw	0
  4996  003FA0  6FF6               	movwf	_logstate& (0+255),b
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;UI.c: 67: loadRTC();
  5000  003FA2  EC7E  F019         	call	_loadRTC	;wreg free
  5001                           
  5002                           ;UI.c: 69: change_state_to_menu_start();
  5003  003FA6  EC4D  F01F         	call	_change_state_to_menu_start	;wreg free
  5004                           
  5005                           ;UI.c: 70: firstboot = 1;
  5006  003FAA  0E00               	movlw	0
  5007  003FAC  6E76               	movwf	_firstboot+1,c
  5008  003FAE  0E01               	movlw	1
  5009  003FB0  6E75               	movwf	_firstboot,c
  5010  003FB2  0012               	return		;funcret
  5011  003FB4                     __end_of_initUI:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           intcon2	equ	0xFF1
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _loadRTC *****************
  5034 ;; Defined at:
  5035 ;;		line 28 in file "RTC.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  i               2   22[BANK0 ] int 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        3 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    9
  5056 ;; This function calls:
  5057 ;;		_I2C_Master_Init
  5058 ;;		_I2C_Master_Start
  5059 ;;		_I2C_Master_Stop
  5060 ;;		_I2C_Master_Write
  5061 ;; This function is called by:
  5062 ;;		_initUI
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text15
  5067  0032FC                     __ptext15:
  5068                           	opt stack 0
  5069  0032FC                     _loadRTC:
  5070                           	opt stack 20
  5071                           
  5072                           ;RTC.c: 30: I2C_Master_Init(10000);
  5073                           
  5074                           ;incstack = 0
  5075  0032FC  0E10               	movlw	16
  5076  0032FE  0100               	movlb	0	; () banked
  5077  003300  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5078  003302  0E27               	movlw	39
  5079  003304  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5080  003306  0E00               	movlw	0
  5081  003308  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5082  00330A  0E00               	movlw	0
  5083  00330C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5084  00330E  ECD7  F01B         	call	_I2C_Master_Init	;wreg free
  5085                           
  5086                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5087  003312  9EF2               	bcf	intcon,7,c	;volatile
  5088                           
  5089                           ;RTC.c: 34: I2C_Master_Start();
  5090  003314  EC80  F020         	call	_I2C_Master_Start	;wreg free
  5091                           
  5092                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5093  003318  0E00               	movlw	0
  5094  00331A  0100               	movlb	0	; () banked
  5095  00331C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5096  00331E  0ED0               	movlw	208
  5097  003320  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5098  003322  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  5099                           
  5100                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5101  003326  0E00               	movlw	0
  5102  003328  0100               	movlb	0	; () banked
  5103  00332A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5104  00332C  0E00               	movlw	0
  5105  00332E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5106  003330  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  5107                           
  5108                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5109  003334  0E00               	movlw	0
  5110  003336  0100               	movlb	0	; () banked
  5111  003338  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5112  00333A  0E00               	movlw	0
  5113  00333C  6F96               	movwf	loadRTC@i& (0+255),b
  5114  00333E                     l5852:
  5115                           
  5116                           ; BSR set to: 0
  5117  00333E  0100               	movlb	0	; () banked
  5118  003340  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5119  003342  D008               	goto	l5856
  5120  003344  0100               	movlb	0	; () banked
  5121  003346  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5122  003348  E11B               	bnz	l5862
  5123  00334A  0E07               	movlw	7
  5124  00334C  0100               	movlb	0	; () banked
  5125  00334E  5D96               	subwf	loadRTC@i& (0+255),w,b
  5126  003350  B0D8               	btfsc	status,0,c
  5127  003352  D016               	goto	l5862
  5128  003354                     l5856:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5132  003354  0E24               	movlw	low _time
  5133  003356  0100               	movlb	0	; () banked
  5134  003358  2596               	addwf	loadRTC@i& (0+255),w,b
  5135  00335A  6ED9               	movwf	fsr2l,c
  5136  00335C  0E01               	movlw	high _time
  5137  00335E  0100               	movlb	0	; () banked
  5138  003360  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5139  003362  6EDA               	movwf	fsr2h,c
  5140  003364  50DF               	movf	indf2,w,c
  5141  003366  0100               	movlb	0	; () banked
  5142  003368  6F95               	movwf	??_loadRTC& (0+255),b
  5143  00336A  0100               	movlb	0	; () banked
  5144  00336C  5195               	movf	??_loadRTC& (0+255),w,b
  5145  00336E  0100               	movlb	0	; () banked
  5146  003370  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5147  003372  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5148  003374  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  5149  003378  0100               	movlb	0	; () banked
  5150  00337A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5151  00337C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5152  00337E  D7DF               	goto	l5852
  5153  003380                     l5862:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;RTC.c: 39: }
  5157                           ;RTC.c: 40: I2C_Master_Stop();
  5158  003380  EC7C  F020         	call	_I2C_Master_Stop	;wreg free
  5159                           
  5160                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5161  003384  8EF2               	bsf	intcon,7,c	;volatile
  5162  003386  0012               	return		;funcret
  5163  003388                     __end_of_loadRTC:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           intcon2	equ	0xFF1
  5173                           intcon3	equ	0xFF0
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           postdec1	equ	0xFE5
  5177                           fsr1l	equ	0xFE1
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           postdec2	equ	0xFDD
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _I2C_Master_Init *****************
  5186 ;; Defined at:
  5187 ;;		line 15 in file "I2C.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  c               4   13[BANK0 ] const unsigned long 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		wreg, status,2, status,0, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;Total ram usage:        8 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    8
  5208 ;; This function calls:
  5209 ;;		___lldiv
  5210 ;; This function is called by:
  5211 ;;		_loadRTC
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           	psect	text16
  5216  0037AE                     __ptext16:
  5217                           	opt stack 0
  5218  0037AE                     _I2C_Master_Init:
  5219                           	opt stack 20
  5220                           
  5221                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5222                           
  5223                           ;incstack = 0
  5224  0037AE  0E00               	movlw	0
  5225  0037B0  6EC7               	movwf	4039,c	;volatile
  5226                           
  5227                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5228  0037B2  0E28               	movlw	40
  5229  0037B4  6EC6               	movwf	4038,c	;volatile
  5230                           
  5231                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5232  0037B6  0E00               	movlw	0
  5233  0037B8  6EC5               	movwf	4037,c	;volatile
  5234                           
  5235                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5236  0037BA  0E00               	movlw	0
  5237  0037BC  0100               	movlb	0	; () banked
  5238  0037BE  6F80               	movwf	___lldiv@dividend& (0+255),b
  5239  0037C0  0E48               	movlw	72
  5240  0037C2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5241  0037C4  0EE8               	movlw	232
  5242  0037C6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5243  0037C8  0E01               	movlw	1
  5244  0037CA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5245  0037CC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5246  0037D0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5247  0037D4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5248  0037D8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5249  0037DC  0E02               	movlw	2
  5250  0037DE                     u4235:
  5251  0037DE  90D8               	bcf	status,0,c
  5252  0037E0  0100               	movlb	0	; () banked
  5253  0037E2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5254  0037E4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5255  0037E6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5256  0037E8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5257  0037EA  2EE8               	decfsz	wreg,f,c
  5258  0037EC  D7F8               	goto	u4235
  5259  0037EE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5260  0037F2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5261  0037F6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5262  0037FA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5263  0037FE  EC2F  F018         	call	___lldiv	;wreg free
  5264  003802  0100               	movlb	0	; () banked
  5265  003804  0580               	decf	?___lldiv& (0+255),w,b
  5266  003806  6EC8               	movwf	4040,c	;volatile
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;I2C.c: 22: TRISC3 = 1;
  5270  003808  8694               	bsf	3988,3,c	;volatile
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;I2C.c: 23: TRISC4 = 1;
  5274  00380A  8894               	bsf	3988,4,c	;volatile
  5275                           
  5276                           ; BSR set to: 0
  5277  00380C  0012               	return		;funcret
  5278  00380E                     __end_of_I2C_Master_Init:
  5279                           	opt stack 0
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           intcon3	equ	0xFF0
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           postdec1	equ	0xFE5
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function ___lldiv *****************
  5301 ;; Defined at:
  5302 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  dividend        4    0[BANK0 ] unsigned long 
  5305 ;;  divisor         4    4[BANK0 ] unsigned long 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  quotient        4    8[BANK0 ] unsigned long 
  5308 ;;  counter         1   12[BANK0 ] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  4    0[BANK0 ] unsigned long 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5318 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;Total ram usage:       13 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    7
  5325 ;; This function calls:
  5326 ;;		Nothing
  5327 ;; This function is called by:
  5328 ;;		_I2C_Master_Init
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text17
  5333  00305E                     __ptext17:
  5334                           	opt stack 0
  5335  00305E                     ___lldiv:
  5336                           	opt stack 20
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;incstack = 0
  5340  00305E  0E00               	movlw	0
  5341  003060  0100               	movlb	0	; () banked
  5342  003062  6F88               	movwf	___lldiv@quotient& (0+255),b
  5343  003064  0E00               	movlw	0
  5344  003066  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5345  003068  0E00               	movlw	0
  5346  00306A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5347  00306C  0E00               	movlw	0
  5348  00306E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5349                           
  5350                           ; BSR set to: 0
  5351  003070  0100               	movlb	0	; () banked
  5352  003072  5184               	movf	___lldiv@divisor& (0+255),w,b
  5353  003074  0100               	movlb	0	; () banked
  5354  003076  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5355  003078  0100               	movlb	0	; () banked
  5356  00307A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5357  00307C  0100               	movlb	0	; () banked
  5358  00307E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5359  003080  B4D8               	btfsc	status,2,c
  5360  003082  D042               	goto	l1582
  5361                           
  5362                           ; BSR set to: 0
  5363  003084  0E01               	movlw	1
  5364  003086  0100               	movlb	0	; () banked
  5365  003088  6F8C               	movwf	___lldiv@counter& (0+255),b
  5366  00308A  D008               	goto	l5300
  5367  00308C                     l5298:
  5368                           
  5369                           ; BSR set to: 0
  5370  00308C  0100               	movlb	0	; () banked
  5371  00308E  90D8               	bcf	status,0,c
  5372  003090  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5373  003092  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5374  003094  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5375  003096  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5376  003098  0100               	movlb	0	; () banked
  5377  00309A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5378  00309C                     l5300:
  5379                           
  5380                           ; BSR set to: 0
  5381  00309C  0100               	movlb	0	; () banked
  5382  00309E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5383  0030A0  D7F5               	goto	l5298
  5384  0030A2                     l5302:
  5385                           
  5386                           ; BSR set to: 0
  5387  0030A2  0100               	movlb	0	; () banked
  5388  0030A4  90D8               	bcf	status,0,c
  5389  0030A6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5390  0030A8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5391  0030AA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5392  0030AC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5393                           
  5394                           ; BSR set to: 0
  5395  0030AE  0100               	movlb	0	; () banked
  5396  0030B0  5184               	movf	___lldiv@divisor& (0+255),w,b
  5397  0030B2  0100               	movlb	0	; () banked
  5398  0030B4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5399  0030B6  0100               	movlb	0	; () banked
  5400  0030B8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5401  0030BA  0100               	movlb	0	; () banked
  5402  0030BC  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5403  0030BE  0100               	movlb	0	; () banked
  5404  0030C0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5405  0030C2  0100               	movlb	0	; () banked
  5406  0030C4  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5407  0030C6  0100               	movlb	0	; () banked
  5408  0030C8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5409  0030CA  0100               	movlb	0	; () banked
  5410  0030CC  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5411  0030CE  A0D8               	btfss	status,0,c
  5412  0030D0  D012               	goto	l5310
  5413                           
  5414                           ; BSR set to: 0
  5415  0030D2  0100               	movlb	0	; () banked
  5416  0030D4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5417  0030D6  0100               	movlb	0	; () banked
  5418  0030D8  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5419  0030DA  0100               	movlb	0	; () banked
  5420  0030DC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5421  0030DE  0100               	movlb	0	; () banked
  5422  0030E0  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5423  0030E2  0100               	movlb	0	; () banked
  5424  0030E4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5425  0030E6  0100               	movlb	0	; () banked
  5426  0030E8  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5427  0030EA  0100               	movlb	0	; () banked
  5428  0030EC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5429  0030EE  0100               	movlb	0	; () banked
  5430  0030F0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5431                           
  5432                           ; BSR set to: 0
  5433  0030F2  0100               	movlb	0	; () banked
  5434  0030F4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5435  0030F6                     l5310:
  5436                           
  5437                           ; BSR set to: 0
  5438  0030F6  0100               	movlb	0	; () banked
  5439  0030F8  90D8               	bcf	status,0,c
  5440  0030FA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5441  0030FC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5442  0030FE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5443  003100  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5444                           
  5445                           ; BSR set to: 0
  5446  003102  0100               	movlb	0	; () banked
  5447  003104  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5448  003106  D7CD               	goto	l5302
  5449  003108                     l1582:
  5450                           
  5451                           ; BSR set to: 0
  5452  003108  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5453  00310C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5454  003110  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5455  003114  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5456                           
  5457                           ; BSR set to: 0
  5458  003118  0012               	return		;funcret
  5459  00311A                     __end_of___lldiv:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           intcon2	equ	0xFF1
  5469                           intcon3	equ	0xFF0
  5470                           postinc0	equ	0xFEE
  5471                           wreg	equ	0xFE8
  5472                           postdec1	equ	0xFE5
  5473                           fsr1l	equ	0xFE1
  5474                           indf2	equ	0xFDF
  5475                           postinc2	equ	0xFDE
  5476                           postdec2	equ	0xFDD
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _change_state_to_menu_start *****************
  5482 ;; Defined at:
  5483 ;;		line 472 in file "UI.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:   11
  5504 ;; This function calls:
  5505 ;;		_lcdInst
  5506 ;;		_printRTC
  5507 ;;		_printf
  5508 ;; This function is called by:
  5509 ;;		_initUI
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text18
  5514  003E9A                     __ptext18:
  5515                           	opt stack 0
  5516  003E9A                     _change_state_to_menu_start:
  5517                           	opt stack 18
  5518                           
  5519                           ;UI.c: 473: cur_state = 0;
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;incstack = 0
  5523  003E9A  0E00               	movlw	0
  5524  003E9C  0100               	movlb	0	; () banked
  5525  003E9E  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5526  003EA0  0E00               	movlw	0
  5527  003EA2  6FDE               	movwf	_cur_state& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;UI.c: 475: lcdInst(0b10000000);;
  5531  003EA4  0E80               	movlw	128
  5532  003EA6  EC5A  F020         	call	_lcdInst
  5533                           
  5534                           ;UI.c: 476: printRTC();
  5535  003EAA  EC6A  F00C         	call	_printRTC	;wreg free
  5536                           
  5537                           ;UI.c: 477: lcdInst(0b11000000);;
  5538  003EAE  0EC0               	movlw	192
  5539  003EB0  EC5A  F020         	call	_lcdInst
  5540                           
  5541                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5542  003EB4  0E36               	movlw	low STR_30
  5543  003EB6  0100               	movlb	0	; () banked
  5544  003EB8  6F8E               	movwf	printf@f& (0+255),b
  5545  003EBA  0EFE               	movlw	high STR_30
  5546  003EBC  0100               	movlb	0	; () banked
  5547  003EBE  6F8F               	movwf	(printf@f+1)& (0+255),b
  5548  003EC0  EC97  F008         	call	_printf	;wreg free
  5549  003EC4  0012               	return		;funcret
  5550  003EC6                     __end_of_change_state_to_menu_start:
  5551                           	opt stack 0
  5552                           tblptru	equ	0xFF8
  5553                           tblptrh	equ	0xFF7
  5554                           tblptrl	equ	0xFF6
  5555                           tablat	equ	0xFF5
  5556                           prodh	equ	0xFF4
  5557                           prodl	equ	0xFF3
  5558                           intcon	equ	0xFF2
  5559                           intcon2	equ	0xFF1
  5560                           intcon3	equ	0xFF0
  5561                           postinc0	equ	0xFEE
  5562                           wreg	equ	0xFE8
  5563                           postdec1	equ	0xFE5
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function _initTime *****************
  5573 ;; Defined at:
  5574 ;;		line 17 in file "RTC.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  s               1    wreg     unsigned char 
  5577 ;;  m               1    0[BANK0 ] unsigned char 
  5578 ;;  h               1    1[BANK0 ] unsigned char 
  5579 ;;  w               1    2[BANK0 ] unsigned char 
  5580 ;;  DD              1    3[BANK0 ] unsigned char 
  5581 ;;  MM              1    4[BANK0 ] unsigned char 
  5582 ;;  YY              1    5[BANK0 ] unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  s               1    6[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5594 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;Total ram usage:        7 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    7
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text19
  5609  003FFA                     __ptext19:
  5610                           	opt stack 0
  5611  003FFA                     _initTime:
  5612                           	opt stack 23
  5613                           
  5614                           ;incstack = 0
  5615                           ;initTime@s stored from wreg
  5616  003FFA  0100               	movlb	0	; () banked
  5617  003FFC  6F86               	movwf	initTime@s& (0+255),b
  5618                           
  5619                           ;RTC.c: 19: time[0] = s;
  5620  003FFE  C086  F124         	movff	initTime@s,_time
  5621                           
  5622                           ;RTC.c: 20: time[1] = m;
  5623  004002  C080  F125         	movff	initTime@m,_time+1
  5624                           
  5625                           ;RTC.c: 21: time[2] = h;
  5626  004006  C081  F126         	movff	initTime@h,_time+2
  5627                           
  5628                           ;RTC.c: 22: time[3] = w;
  5629  00400A  C082  F127         	movff	initTime@w,_time+3
  5630                           
  5631                           ;RTC.c: 23: time[4] = DD;
  5632  00400E  C083  F128         	movff	initTime@DD,_time+4
  5633                           
  5634                           ;RTC.c: 24: time[5] = MM;
  5635  004012  C084  F129         	movff	initTime@MM,_time+5
  5636                           
  5637                           ;RTC.c: 25: time[6] = YY;
  5638  004016  C085  F12A         	movff	initTime@YY,_time+6
  5639  00401A  0012               	return		;funcret
  5640  00401C                     __end_of_initTime:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           intcon2	equ	0xFF1
  5650                           intcon3	equ	0xFF0
  5651                           postinc0	equ	0xFEE
  5652                           wreg	equ	0xFE8
  5653                           postdec1	equ	0xFE5
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _initLCD *****************
  5663 ;; Defined at:
  5664 ;;		line 48 in file "lcd.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;		None
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;Total ram usage:        1 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    9
  5685 ;; This function calls:
  5686 ;;		_lcdInst
  5687 ;; This function is called by:
  5688 ;;		_main
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text20
  5693  003AF8                     __ptext20:
  5694                           	opt stack 0
  5695  003AF8                     _initLCD:
  5696                           	opt stack 21
  5697                           
  5698                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5699                           
  5700                           ;incstack = 0
  5701  003AF8  0E9C               	movlw	156
  5702  003AFA  0100               	movlb	0	; () banked
  5703  003AFC  6F83               	movwf	??_initLCD& (0+255),b
  5704  003AFE  0ED7               	movlw	215
  5705  003B00                     u6697:
  5706  003B00  2EE8               	decfsz	wreg,f,c
  5707  003B02  D7FE               	bra	u6697
  5708  003B04  2F83               	decfsz	??_initLCD& (0+255),f,b
  5709  003B06  D7FC               	bra	u6697
  5710                           
  5711                           ;lcd.c: 50: lcdInst(0b00110011);
  5712  003B08  0E33               	movlw	51
  5713  003B0A  EC5A  F020         	call	_lcdInst
  5714                           
  5715                           ;lcd.c: 51: lcdInst(0b00110010);
  5716  003B0E  0E32               	movlw	50
  5717  003B10  EC5A  F020         	call	_lcdInst
  5718                           
  5719                           ;lcd.c: 53: lcdInst(0b00101000);
  5720  003B14  0E28               	movlw	40
  5721  003B16  EC5A  F020         	call	_lcdInst
  5722                           
  5723                           ;lcd.c: 54: lcdInst(0b00001100);
  5724  003B1A  0E0C               	movlw	12
  5725  003B1C  EC5A  F020         	call	_lcdInst
  5726                           
  5727                           ;lcd.c: 55: lcdInst(0b00000110);
  5728  003B20  0E06               	movlw	6
  5729  003B22  EC5A  F020         	call	_lcdInst
  5730                           
  5731                           ;lcd.c: 56: lcdInst(0b00000001);
  5732  003B26  0E01               	movlw	1
  5733  003B28  EC5A  F020         	call	_lcdInst
  5734                           
  5735                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5736  003B2C  0E9C               	movlw	156
  5737  003B2E  0100               	movlb	0	; () banked
  5738  003B30  6F83               	movwf	??_initLCD& (0+255),b
  5739  003B32  0ED7               	movlw	215
  5740  003B34                     u6707:
  5741  003B34  2EE8               	decfsz	wreg,f,c
  5742  003B36  D7FE               	bra	u6707
  5743  003B38  2F83               	decfsz	??_initLCD& (0+255),f,b
  5744  003B3A  D7FC               	bra	u6707
  5745  003B3C  0012               	return		;funcret
  5746  003B3E                     __end_of_initLCD:
  5747                           	opt stack 0
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           intcon2	equ	0xFF1
  5756                           intcon3	equ	0xFF0
  5757                           postinc0	equ	0xFEE
  5758                           wreg	equ	0xFE8
  5759                           postdec1	equ	0xFE5
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _UI *****************
  5769 ;; Defined at:
  5770 ;;		line 74 in file "UI.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  i               1   73[BANK0 ] unsigned char 
  5775 ;;  i               1   85[BANK0 ] unsigned char 
  5776 ;;  i               1   84[BANK0 ] unsigned char 
  5777 ;;  i               1   83[BANK0 ] unsigned char 
  5778 ;;  i               1   82[BANK0 ] unsigned char 
  5779 ;;  i               1   81[BANK0 ] unsigned char 
  5780 ;;  i               1   80[BANK0 ] unsigned char 
  5781 ;;  i               1   79[BANK0 ] unsigned char 
  5782 ;;  i               1   78[BANK0 ] unsigned char 
  5783 ;;  i               1   77[BANK0 ] unsigned char 
  5784 ;;  i               1   76[BANK0 ] unsigned char 
  5785 ;;  i               1   75[BANK0 ] unsigned char 
  5786 ;;  i               1   74[BANK0 ] unsigned char 
  5787 ;;  month           4   86[BANK0 ] unsigned char [4]
  5788 ;;  i               1   72[BANK0 ] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;Total ram usage:       22 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:   11
  5805 ;; This function calls:
  5806 ;;		___awdiv
  5807 ;;		___awmod
  5808 ;;		_change_state_to_menu_12
  5809 ;;		_change_state_to_menu_22
  5810 ;;		_lcdInst
  5811 ;;		_printRTC
  5812 ;;		_printf
  5813 ;;		_strcpy
  5814 ;; This function is called by:
  5815 ;;		_main
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text21
  5820  000012                     __ptext21:
  5821                           	opt stack 0
  5822  000012                     _UI:
  5823                           	opt stack 19
  5824                           
  5825                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5826                           
  5827                           ;incstack = 0
  5828  000012  0E02               	movlw	2
  5829  000014  0100               	movlb	0	; () banked
  5830  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5831  000018  A4D8               	btfss	status,2,c
  5832  00001A  D075               	goto	l6850
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5836  00001C  0E01               	movlw	1
  5837  00001E  EC5A  F020         	call	_lcdInst
  5838  000022  0E68               	movlw	104
  5839  000024  0100               	movlb	0	; () banked
  5840  000026  6FC4               	movwf	??_UI& (0+255),b
  5841  000028  0EE4               	movlw	228
  5842  00002A                     u6717:
  5843  00002A  2EE8               	decfsz	wreg,f,c
  5844  00002C  D7FE               	bra	u6717
  5845  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5846  000030  D7FC               	bra	u6717
  5847  000032  F000               	nop	
  5848                           
  5849                           ;UI.c: 77: lcdInst(0b10000000);;
  5850  000034  0E80               	movlw	128
  5851  000036  EC5A  F020         	call	_lcdInst
  5852                           
  5853                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5854  00003A  0EF3               	movlw	low STR_1
  5855  00003C  0100               	movlb	0	; () banked
  5856  00003E  6F8E               	movwf	printf@f& (0+255),b
  5857  000040  0EFB               	movlw	high STR_1
  5858  000042  0100               	movlb	0	; () banked
  5859  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5860  000046  0E01               	movlw	1
  5861  000048  0100               	movlb	0	; () banked
  5862  00004A  25FD               	addwf	_sel& (0+255),w,b
  5863  00004C  0100               	movlb	0	; () banked
  5864  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5865  000050  0100               	movlb	0	; () banked
  5866  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5867  000054  0E00               	movlw	0
  5868  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5869  000058  EC97  F008         	call	_printf	;wreg free
  5870                           
  5871                           ;UI.c: 79: lcdInst(0b11000000);;
  5872  00005C  0EC0               	movlw	192
  5873  00005E  EC5A  F020         	call	_lcdInst
  5874                           
  5875                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5876  000062  0E0E               	movlw	14
  5877  000064  0100               	movlb	0	; () banked
  5878  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5879  000068  0E10               	movlw	16
  5880  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5881  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  5882  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5883  000074  ECE2  F018         	call	___awmod	;wreg free
  5884  000078  C080  F0C6         	movff	?___awmod,_UI$2213
  5885  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2213+1
  5886                           
  5887                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5888  000080  0E44               	movlw	low STR_2
  5889  000082  0100               	movlb	0	; () banked
  5890  000084  6F8E               	movwf	printf@f& (0+255),b
  5891  000086  0EFF               	movlw	high STR_2
  5892  000088  0100               	movlb	0	; () banked
  5893  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5894  00008C  0E0E               	movlw	14
  5895  00008E  0100               	movlb	0	; () banked
  5896  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5897  000092  0E10               	movlw	16
  5898  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5899  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  5900  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  5901  00009E  ECE2  F018         	call	___awmod	;wreg free
  5902  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5903  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5904  0000AA  0E00               	movlw	0
  5905  0000AC  0100               	movlb	0	; () banked
  5906  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5907  0000B0  0E3C               	movlw	60
  5908  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5909  0000B4  ECD0  F017         	call	___awdiv	;wreg free
  5910  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5911  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5912  0000C0  C0C6  F080         	movff	_UI$2213,___awmod@dividend
  5913  0000C4  C0C7  F081         	movff	_UI$2213+1,___awmod@dividend+1
  5914  0000C8  0E00               	movlw	0
  5915  0000CA  0100               	movlb	0	; () banked
  5916  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5917  0000CE  0E3C               	movlw	60
  5918  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5919  0000D2  ECE2  F018         	call	___awmod	;wreg free
  5920  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5921  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5922  0000DE  EC97  F008         	call	_printf	;wreg free
  5923                           
  5924                           ;UI.c: 81: machine_state = UI_state;
  5925  0000E2  0E00               	movlw	0
  5926  0000E4  0100               	movlb	0	; () banked
  5927  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5928  0000E8                     l177:
  5929  0000E8  A281               	btfss	3969,1,c	;volatile
  5930  0000EA  D7FE               	goto	l177
  5931                           
  5932                           ;UI.c: 84: }
  5933                           ;UI.c: 85: if(cur_state==12){
  5934  0000EC  0E0C               	movlw	12
  5935  0000EE  0100               	movlb	0	; () banked
  5936  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5937  0000F2  0100               	movlb	0	; () banked
  5938  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5939  0000F6  A4D8               	btfss	status,2,c
  5940  0000F8  D003               	goto	l6848
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;UI.c: 86: change_state_to_menu_12();
  5944  0000FA  ECDC  F01D         	call	_change_state_to_menu_12	;wreg free
  5945                           
  5946                           ;UI.c: 87: }
  5947  0000FE  D3D5               	goto	l7170
  5948  000100                     l6848:
  5949                           
  5950                           ;UI.c: 88: else{
  5951                           ;UI.c: 89: change_state_to_menu_22();
  5952  000100  ECC0  F01D         	call	_change_state_to_menu_22	;wreg free
  5953                           
  5954                           ;UI.c: 90: }
  5955                           ;UI.c: 91: }
  5956  000104  D3D2               	goto	l7170
  5957  000106                     l6850:
  5958                           
  5959                           ;UI.c: 92: else if(cur_state == 0){
  5960  000106  0100               	movlb	0	; () banked
  5961  000108  51DE               	movf	_cur_state& (0+255),w,b
  5962  00010A  0100               	movlb	0	; () banked
  5963  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5964  00010E  A4D8               	btfss	status,2,c
  5965  000110  D3CC               	goto	l7170
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5969  000112  0E00               	movlw	0
  5970  000114  0100               	movlb	0	; () banked
  5971  000116  6FC8               	movwf	UI@i& (0+255),b
  5972  000118                     l6854:
  5973                           
  5974                           ; BSR set to: 0
  5975  000118  0E63               	movlw	99
  5976  00011A  0100               	movlb	0	; () banked
  5977  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5978  00011E  D001               	goto	l6858
  5979  000120  D00C               	goto	l6862
  5980  000122                     l6858:
  5981                           
  5982                           ; BSR set to: 0
  5983  000122  0E68               	movlw	104
  5984  000124  0100               	movlb	0	; () banked
  5985  000126  6FC4               	movwf	??_UI& (0+255),b
  5986  000128  0EE4               	movlw	228
  5987  00012A                     u6727:
  5988  00012A  2EE8               	decfsz	wreg,f,c
  5989  00012C  D7FE               	bra	u6727
  5990  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5991  000130  D7FC               	bra	u6727
  5992  000132  F000               	nop	
  5993  000134  0100               	movlb	0	; () banked
  5994  000136  2BC8               	incf	UI@i& (0+255),f,b
  5995  000138  D7EF               	goto	l6854
  5996  00013A                     l6862:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;UI.c: 94: if(cur_state == 0){
  6000  00013A  0100               	movlb	0	; () banked
  6001  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6002  00013E  0100               	movlb	0	; () banked
  6003  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6004  000142  A4D8               	btfss	status,2,c
  6005  000144  D3B2               	goto	l7170
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;UI.c: 95: printRTC();
  6009  000146  EC6A  F00C         	call	_printRTC	;wreg free
  6010                           
  6011                           ;UI.c: 96: }
  6012                           ;UI.c: 97: }
  6013                           ;UI.c: 98: while(logstate){
  6014  00014A  D3AF               	goto	l7170
  6015  00014C                     l6866:
  6016                           
  6017                           ;UI.c: 100: if(!log_completion){
  6018  00014C  0100               	movlb	0	; () banked
  6019  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6020  000150  0100               	movlb	0	; () banked
  6021  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6022  000154  A4D8               	btfss	status,2,c
  6023  000156  D041               	goto	l6896
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6027  000158  0E01               	movlw	1
  6028  00015A  EC5A  F020         	call	_lcdInst
  6029  00015E  0E68               	movlw	104
  6030  000160  0100               	movlb	0	; () banked
  6031  000162  6FC4               	movwf	??_UI& (0+255),b
  6032  000164  0EE4               	movlw	228
  6033  000166                     u6737:
  6034  000166  2EE8               	decfsz	wreg,f,c
  6035  000168  D7FE               	bra	u6737
  6036  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6037  00016C  D7FC               	bra	u6737
  6038  00016E  F000               	nop	
  6039                           
  6040                           ;UI.c: 102: lcdInst(0b10000000);;
  6041  000170  0E80               	movlw	128
  6042  000172  EC5A  F020         	call	_lcdInst
  6043                           
  6044                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6045  000176  0EE1               	movlw	low STR_3
  6046  000178  0100               	movlb	0	; () banked
  6047  00017A  6F8E               	movwf	printf@f& (0+255),b
  6048  00017C  0EFB               	movlw	high STR_3
  6049  00017E  0100               	movlb	0	; () banked
  6050  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6051  000182  C0E6  F090         	movff	_log,?_printf+2
  6052  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6053  00018A  EC97  F008         	call	_printf	;wreg free
  6054                           
  6055                           ;UI.c: 104: lcdInst(0b11000000);;
  6056  00018E  0EC0               	movlw	192
  6057  000190  EC5A  F020         	call	_lcdInst
  6058                           
  6059                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6060  000194  0E67               	movlw	low STR_4
  6061  000196  0100               	movlb	0	; () banked
  6062  000198  6F8E               	movwf	printf@f& (0+255),b
  6063  00019A  0EFE               	movlw	high STR_4
  6064  00019C  0100               	movlb	0	; () banked
  6065  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6066  0001A0  EC97  F008         	call	_printf	;wreg free
  6067  0001A4                     l6880:
  6068  0001A4  0E00               	movlw	0
  6069  0001A6  0100               	movlb	0	; () banked
  6070  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6071  0001AA                     l6882:
  6072                           
  6073                           ; BSR set to: 0
  6074  0001AA  0E63               	movlw	99
  6075  0001AC  0100               	movlb	0	; () banked
  6076  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6077  0001B0  D001               	goto	l6886
  6078  0001B2  D00C               	goto	l6890
  6079  0001B4                     l6886:
  6080                           
  6081                           ; BSR set to: 0
  6082  0001B4  0E68               	movlw	104
  6083  0001B6  0100               	movlb	0	; () banked
  6084  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6085  0001BA  0EE4               	movlw	228
  6086  0001BC                     u6747:
  6087  0001BC  2EE8               	decfsz	wreg,f,c
  6088  0001BE  D7FE               	bra	u6747
  6089  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6090  0001C2  D7FC               	bra	u6747
  6091  0001C4  F000               	nop	
  6092  0001C6  0100               	movlb	0	; () banked
  6093  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6094  0001CA  D7EF               	goto	l6882
  6095  0001CC                     l6890:
  6096                           
  6097                           ; BSR set to: 0
  6098  0001CC  0100               	movlb	0	; () banked
  6099  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6100  0001D0  0100               	movlb	0	; () banked
  6101  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6102  0001D4  B4D8               	btfsc	status,2,c
  6103  0001D6  0012               	return	
  6104  0001D8  D7E5               	goto	l6880
  6105  0001DA                     l6896:
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;UI.c: 109: else{
  6109                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6110  0001DA  0E01               	movlw	1
  6111  0001DC  EC5A  F020         	call	_lcdInst
  6112  0001E0  0E68               	movlw	104
  6113  0001E2  0100               	movlb	0	; () banked
  6114  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6115  0001E6  0EE4               	movlw	228
  6116  0001E8                     u6757:
  6117  0001E8  2EE8               	decfsz	wreg,f,c
  6118  0001EA  D7FE               	bra	u6757
  6119  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6120  0001EE  D7FC               	bra	u6757
  6121  0001F0  F000               	nop	
  6122                           
  6123                           ;UI.c: 111: lcdInst(0b10000000);;
  6124  0001F2  0E80               	movlw	128
  6125  0001F4  EC5A  F020         	call	_lcdInst
  6126                           
  6127                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6128  0001F8  0EE1               	movlw	low STR_3
  6129  0001FA  0100               	movlb	0	; () banked
  6130  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6131  0001FE  0EFB               	movlw	high STR_3
  6132  000200  0100               	movlb	0	; () banked
  6133  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6134  000204  C0E6  F090         	movff	_log,?_printf+2
  6135  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6136  00020C  EC97  F008         	call	_printf	;wreg free
  6137                           
  6138                           ;UI.c: 113: lcdInst(0b11000000);;
  6139  000210  0EC0               	movlw	192
  6140  000212  EC5A  F020         	call	_lcdInst
  6141                           
  6142                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6143  000216  0E25               	movlw	low STR_6
  6144  000218  0100               	movlb	0	; () banked
  6145  00021A  6F8E               	movwf	printf@f& (0+255),b
  6146  00021C  0EFE               	movlw	high STR_6
  6147  00021E  0100               	movlb	0	; () banked
  6148  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6149  000222  EC97  F008         	call	_printf	;wreg free
  6150                           
  6151                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6152  000226  0E00               	movlw	0
  6153  000228  0100               	movlb	0	; () banked
  6154  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6155  00022C                     l6910:
  6156                           
  6157                           ; BSR set to: 0
  6158  00022C  0E63               	movlw	99
  6159  00022E  0100               	movlb	0	; () banked
  6160  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6161  000232  D001               	goto	l6914
  6162  000234  D00C               	goto	l6918
  6163  000236                     l6914:
  6164                           
  6165                           ; BSR set to: 0
  6166  000236  0E68               	movlw	104
  6167  000238  0100               	movlb	0	; () banked
  6168  00023A  6FC4               	movwf	??_UI& (0+255),b
  6169  00023C  0EE4               	movlw	228
  6170  00023E                     u6767:
  6171  00023E  2EE8               	decfsz	wreg,f,c
  6172  000240  D7FE               	bra	u6767
  6173  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6174  000244  D7FC               	bra	u6767
  6175  000246  F000               	nop	
  6176  000248  0100               	movlb	0	; () banked
  6177  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6178  00024C  D7EF               	goto	l6910
  6179  00024E                     l6918:
  6180                           
  6181                           ; BSR set to: 0
  6182  00024E  0100               	movlb	0	; () banked
  6183  000250  51F6               	movf	_logstate& (0+255),w,b
  6184  000252  0100               	movlb	0	; () banked
  6185  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6186  000256  B4D8               	btfsc	status,2,c
  6187  000258  0012               	return	
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  00025A  0E00               	movlw	0
  6196  00025C  0100               	movlb	0	; () banked
  6197  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6198  000260                     l6924:
  6199                           
  6200                           ; BSR set to: 0
  6201  000260  0E63               	movlw	99
  6202  000262  0100               	movlb	0	; () banked
  6203  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6204  000266  D001               	goto	l6928
  6205  000268  D00C               	goto	l6932
  6206  00026A                     l6928:
  6207                           
  6208                           ; BSR set to: 0
  6209  00026A  0E68               	movlw	104
  6210  00026C  0100               	movlb	0	; () banked
  6211  00026E  6FC4               	movwf	??_UI& (0+255),b
  6212  000270  0EE4               	movlw	228
  6213  000272                     u6777:
  6214  000272  2EE8               	decfsz	wreg,f,c
  6215  000274  D7FE               	bra	u6777
  6216  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6217  000278  D7FC               	bra	u6777
  6218  00027A  F000               	nop	
  6219  00027C  0100               	movlb	0	; () banked
  6220  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6221  000280  D7EF               	goto	l6924
  6222  000282                     l6932:
  6223                           
  6224                           ; BSR set to: 0
  6225  000282  0100               	movlb	0	; () banked
  6226  000284  51F6               	movf	_logstate& (0+255),w,b
  6227  000286  0100               	movlb	0	; () banked
  6228  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6229  00028A  B4D8               	btfsc	status,2,c
  6230  00028C  0012               	return	
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6234                           
  6235                           ; BSR set to: 0
  6236                           
  6237                           ; BSR set to: 0
  6238  00028E  0E01               	movlw	1
  6239  000290  EC5A  F020         	call	_lcdInst
  6240  000294  0E68               	movlw	104
  6241  000296  0100               	movlb	0	; () banked
  6242  000298  6FC4               	movwf	??_UI& (0+255),b
  6243  00029A  0EE4               	movlw	228
  6244  00029C                     u6787:
  6245  00029C  2EE8               	decfsz	wreg,f,c
  6246  00029E  D7FE               	bra	u6787
  6247  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6248  0002A2  D7FC               	bra	u6787
  6249  0002A4  F000               	nop	
  6250                           
  6251                           ;UI.c: 120: lcdInst(0b10000000);;
  6252  0002A6  0E80               	movlw	128
  6253  0002A8  EC5A  F020         	call	_lcdInst
  6254                           
  6255                           ;UI.c: 121: printf("START:");
  6256  0002AC  0EC3               	movlw	low STR_7
  6257  0002AE  0100               	movlb	0	; () banked
  6258  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6259  0002B2  0EFF               	movlw	high STR_7
  6260  0002B4  0100               	movlb	0	; () banked
  6261  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6262  0002B8  EC97  F008         	call	_printf	;wreg free
  6263                           
  6264                           ;UI.c: 122: lcdInst(0b11000000);;
  6265  0002BC  0EC0               	movlw	192
  6266  0002BE  EC5A  F020         	call	_lcdInst
  6267                           
  6268                           ;UI.c: 123: char month[] = "MMM";
  6269  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6270  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6271  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6272  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6273                           
  6274                           ;UI.c: 124: switch(log_startTime[5]){
  6275  0002D2  D0C3               	goto	l6976
  6276  0002D4                     l6948:
  6277                           
  6278                           ;UI.c: 126: strcpy(month, "JAN");
  6279  0002D4  0ED6               	movlw	low UI@month
  6280  0002D6  0100               	movlb	0	; () banked
  6281  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6282  0002DA  0E00               	movlw	high UI@month
  6283  0002DC  0100               	movlb	0	; () banked
  6284  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6285  0002E0  0EDA               	movlw	low STR_8
  6286  0002E2  0100               	movlb	0	; () banked
  6287  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6288  0002E6  0EFF               	movlw	high STR_8
  6289  0002E8  0100               	movlb	0	; () banked
  6290  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6291  0002EC  ECF8  F01D         	call	_strcpy	;wreg free
  6292                           
  6293                           ;UI.c: 127: break;
  6294  0002F0  D0E6               	goto	l6978
  6295  0002F2                     l6950:
  6296                           
  6297                           ;UI.c: 129: strcpy(month, "FEB");
  6298  0002F2  0ED6               	movlw	low UI@month
  6299  0002F4  0100               	movlb	0	; () banked
  6300  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6301  0002F8  0E00               	movlw	high UI@month
  6302  0002FA  0100               	movlb	0	; () banked
  6303  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6304  0002FE  0ECA               	movlw	low STR_9
  6305  000300  0100               	movlb	0	; () banked
  6306  000302  6F82               	movwf	strcpy@from& (0+255),b
  6307  000304  0EFF               	movlw	high STR_9
  6308  000306  0100               	movlb	0	; () banked
  6309  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6310  00030A  ECF8  F01D         	call	_strcpy	;wreg free
  6311                           
  6312                           ;UI.c: 130: break;
  6313  00030E  D0D7               	goto	l6978
  6314  000310                     l6952:
  6315                           
  6316                           ;UI.c: 132: strcpy(month, "MAR");
  6317  000310  0ED6               	movlw	low UI@month
  6318  000312  0100               	movlb	0	; () banked
  6319  000314  6F80               	movwf	strcpy@to& (0+255),b
  6320  000316  0E00               	movlw	high UI@month
  6321  000318  0100               	movlb	0	; () banked
  6322  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6323  00031C  0EE6               	movlw	low STR_10
  6324  00031E  0100               	movlb	0	; () banked
  6325  000320  6F82               	movwf	strcpy@from& (0+255),b
  6326  000322  0EFF               	movlw	high STR_10
  6327  000324  0100               	movlb	0	; () banked
  6328  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6329  000328  ECF8  F01D         	call	_strcpy	;wreg free
  6330                           
  6331                           ;UI.c: 133: break;
  6332  00032C  D0C8               	goto	l6978
  6333  00032E                     l6954:
  6334                           
  6335                           ;UI.c: 135: strcpy(month, "APR");
  6336  00032E  0ED6               	movlw	low UI@month
  6337  000330  0100               	movlb	0	; () banked
  6338  000332  6F80               	movwf	strcpy@to& (0+255),b
  6339  000334  0E00               	movlw	high UI@month
  6340  000336  0100               	movlb	0	; () banked
  6341  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6342  00033A  0EEA               	movlw	low STR_11
  6343  00033C  0100               	movlb	0	; () banked
  6344  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6345  000340  0EFF               	movlw	high STR_11
  6346  000342  0100               	movlb	0	; () banked
  6347  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6348  000346  ECF8  F01D         	call	_strcpy	;wreg free
  6349                           
  6350                           ;UI.c: 136: break;
  6351  00034A  D0B9               	goto	l6978
  6352  00034C                     l6956:
  6353                           
  6354                           ;UI.c: 138: strcpy(month, "MAY");
  6355  00034C  0ED6               	movlw	low UI@month
  6356  00034E  0100               	movlb	0	; () banked
  6357  000350  6F80               	movwf	strcpy@to& (0+255),b
  6358  000352  0E00               	movlw	high UI@month
  6359  000354  0100               	movlb	0	; () banked
  6360  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6361  000358  0EFA               	movlw	low STR_12
  6362  00035A  0100               	movlb	0	; () banked
  6363  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6364  00035E  0EFF               	movlw	high STR_12
  6365  000360  0100               	movlb	0	; () banked
  6366  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6367  000364  ECF8  F01D         	call	_strcpy	;wreg free
  6368                           
  6369                           ;UI.c: 139: break;
  6370  000368  D0AA               	goto	l6978
  6371  00036A                     l6958:
  6372                           
  6373                           ;UI.c: 141: strcpy(month, "JUN");
  6374  00036A  0ED6               	movlw	low UI@month
  6375  00036C  0100               	movlb	0	; () banked
  6376  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6377  000370  0E00               	movlw	high UI@month
  6378  000372  0100               	movlb	0	; () banked
  6379  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6380  000376  0EDE               	movlw	low STR_13
  6381  000378  0100               	movlb	0	; () banked
  6382  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6383  00037C  0EFF               	movlw	high STR_13
  6384  00037E  0100               	movlb	0	; () banked
  6385  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6386  000382  ECF8  F01D         	call	_strcpy	;wreg free
  6387                           
  6388                           ;UI.c: 142: break;
  6389  000386  D09B               	goto	l6978
  6390  000388                     l6960:
  6391                           
  6392                           ;UI.c: 144: strcpy(month, "JUL");
  6393  000388  0ED6               	movlw	low UI@month
  6394  00038A  0100               	movlb	0	; () banked
  6395  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6396  00038E  0E00               	movlw	high UI@month
  6397  000390  0100               	movlb	0	; () banked
  6398  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6399  000394  0ED6               	movlw	low STR_14
  6400  000396  0100               	movlb	0	; () banked
  6401  000398  6F82               	movwf	strcpy@from& (0+255),b
  6402  00039A  0EFF               	movlw	high STR_14
  6403  00039C  0100               	movlb	0	; () banked
  6404  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6405  0003A0  ECF8  F01D         	call	_strcpy	;wreg free
  6406                           
  6407                           ;UI.c: 145: break;
  6408  0003A4  D08C               	goto	l6978
  6409  0003A6                     l6962:
  6410                           
  6411                           ;UI.c: 147: strcpy(month, "AUG");
  6412  0003A6  0ED6               	movlw	low UI@month
  6413  0003A8  0100               	movlb	0	; () banked
  6414  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6415  0003AC  0E00               	movlw	high UI@month
  6416  0003AE  0100               	movlb	0	; () banked
  6417  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6418  0003B2  0ED2               	movlw	low STR_15
  6419  0003B4  0100               	movlb	0	; () banked
  6420  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6421  0003B8  0EFF               	movlw	high STR_15
  6422  0003BA  0100               	movlb	0	; () banked
  6423  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6424  0003BE  ECF8  F01D         	call	_strcpy	;wreg free
  6425                           
  6426                           ;UI.c: 148: break;
  6427  0003C2  D07D               	goto	l6978
  6428  0003C4                     l6964:
  6429                           
  6430                           ;UI.c: 150: strcpy(month, "SEP");
  6431  0003C4  0ED6               	movlw	low UI@month
  6432  0003C6  0100               	movlb	0	; () banked
  6433  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6434  0003CA  0E00               	movlw	high UI@month
  6435  0003CC  0100               	movlb	0	; () banked
  6436  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6437  0003D0  0EE2               	movlw	low STR_16
  6438  0003D2  0100               	movlb	0	; () banked
  6439  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6440  0003D6  0EFF               	movlw	high STR_16
  6441  0003D8  0100               	movlb	0	; () banked
  6442  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6443  0003DC  ECF8  F01D         	call	_strcpy	;wreg free
  6444                           
  6445                           ;UI.c: 151: break;
  6446  0003E0  D06E               	goto	l6978
  6447  0003E2                     l6966:
  6448                           
  6449                           ;UI.c: 153: strcpy(month, "OCT");
  6450  0003E2  0ED6               	movlw	low UI@month
  6451  0003E4  0100               	movlb	0	; () banked
  6452  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6453  0003E8  0E00               	movlw	high UI@month
  6454  0003EA  0100               	movlb	0	; () banked
  6455  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6456  0003EE  0EF2               	movlw	low STR_17
  6457  0003F0  0100               	movlb	0	; () banked
  6458  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6459  0003F4  0EFF               	movlw	high STR_17
  6460  0003F6  0100               	movlb	0	; () banked
  6461  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6462  0003FA  ECF8  F01D         	call	_strcpy	;wreg free
  6463                           
  6464                           ;UI.c: 154: break;
  6465  0003FE  D05F               	goto	l6978
  6466  000400                     l6968:
  6467                           
  6468                           ;UI.c: 156: strcpy(month, "NOV");
  6469  000400  0ED6               	movlw	low UI@month
  6470  000402  0100               	movlb	0	; () banked
  6471  000404  6F80               	movwf	strcpy@to& (0+255),b
  6472  000406  0E00               	movlw	high UI@month
  6473  000408  0100               	movlb	0	; () banked
  6474  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6475  00040C  0EF6               	movlw	low STR_18
  6476  00040E  0100               	movlb	0	; () banked
  6477  000410  6F82               	movwf	strcpy@from& (0+255),b
  6478  000412  0EFF               	movlw	high STR_18
  6479  000414  0100               	movlb	0	; () banked
  6480  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6481  000418  ECF8  F01D         	call	_strcpy	;wreg free
  6482                           
  6483                           ;UI.c: 157: break;
  6484  00041C  D050               	goto	l6978
  6485  00041E                     l6970:
  6486                           
  6487                           ;UI.c: 159: strcpy(month, "DEC");
  6488  00041E  0ED6               	movlw	low UI@month
  6489  000420  0100               	movlb	0	; () banked
  6490  000422  6F80               	movwf	strcpy@to& (0+255),b
  6491  000424  0E00               	movlw	high UI@month
  6492  000426  0100               	movlb	0	; () banked
  6493  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6494  00042A  0ECE               	movlw	low STR_19
  6495  00042C  0100               	movlb	0	; () banked
  6496  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6497  000430  0EFF               	movlw	high STR_19
  6498  000432  0100               	movlb	0	; () banked
  6499  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6500  000436  ECF8  F01D         	call	_strcpy	;wreg free
  6501                           
  6502                           ;UI.c: 160: break;
  6503  00043A  D041               	goto	l6978
  6504  00043C                     l6972:
  6505                           
  6506                           ;UI.c: 162: strcpy(month, "ERR");
  6507  00043C  0ED6               	movlw	low UI@month
  6508  00043E  0100               	movlb	0	; () banked
  6509  000440  6F80               	movwf	strcpy@to& (0+255),b
  6510  000442  0E00               	movlw	high UI@month
  6511  000444  0100               	movlb	0	; () banked
  6512  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6513  000448  0EEE               	movlw	low STR_20
  6514  00044A  0100               	movlb	0	; () banked
  6515  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6516  00044E  0EFF               	movlw	high STR_20
  6517  000450  0100               	movlb	0	; () banked
  6518  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6519  000454  ECF8  F01D         	call	_strcpy	;wreg free
  6520                           
  6521                           ;UI.c: 164: }
  6522                           
  6523                           ;UI.c: 163: break;
  6524  000458  D032               	goto	l6978
  6525  00045A                     l6976:
  6526  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6527  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6528  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6529                           
  6530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6531                           ; Switch size 1, requested type "space"
  6532                           ; Number of cases is 1, Range of values is 0 to 0
  6533                           ; switch strategies available:
  6534                           ; Name         Instructions Cycles
  6535                           ; simple_byte            4     3 (average)
  6536                           ;	Chosen strategy is simple_byte
  6537  000466  0100               	movlb	0	; () banked
  6538  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6539  00046A  0A00               	xorlw	0	; case 0
  6540  00046C  A4D8               	btfss	status,2,c
  6541  00046E  D7E6               	goto	l6972
  6542                           
  6543                           ; BSR set to: 0
  6544                           ; Switch size 1, requested type "space"
  6545                           ; Number of cases is 12, Range of values is 1 to 12
  6546                           ; switch strategies available:
  6547                           ; Name         Instructions Cycles
  6548                           ; simple_byte           37    19 (average)
  6549                           ;	Chosen strategy is simple_byte
  6550  000470  0100               	movlb	0	; () banked
  6551  000472  51C4               	movf	??_UI& (0+255),w,b
  6552  000474  0A01               	xorlw	1	; case 1
  6553  000476  B4D8               	btfsc	status,2,c
  6554  000478  D72D               	goto	l6948
  6555  00047A  0A03               	xorlw	3	; case 2
  6556  00047C  B4D8               	btfsc	status,2,c
  6557  00047E  D739               	goto	l6950
  6558  000480  0A01               	xorlw	1	; case 3
  6559  000482  B4D8               	btfsc	status,2,c
  6560  000484  D745               	goto	l6952
  6561  000486  0A07               	xorlw	7	; case 4
  6562  000488  B4D8               	btfsc	status,2,c
  6563  00048A  D751               	goto	l6954
  6564  00048C  0A01               	xorlw	1	; case 5
  6565  00048E  B4D8               	btfsc	status,2,c
  6566  000490  D75D               	goto	l6956
  6567  000492  0A03               	xorlw	3	; case 6
  6568  000494  B4D8               	btfsc	status,2,c
  6569  000496  D769               	goto	l6958
  6570  000498  0A01               	xorlw	1	; case 7
  6571  00049A  B4D8               	btfsc	status,2,c
  6572  00049C  D775               	goto	l6960
  6573  00049E  0A0F               	xorlw	15	; case 8
  6574  0004A0  B4D8               	btfsc	status,2,c
  6575  0004A2  D781               	goto	l6962
  6576  0004A4  0A01               	xorlw	1	; case 9
  6577  0004A6  B4D8               	btfsc	status,2,c
  6578  0004A8  D78D               	goto	l6964
  6579  0004AA  0A03               	xorlw	3	; case 10
  6580  0004AC  B4D8               	btfsc	status,2,c
  6581  0004AE  D799               	goto	l6966
  6582  0004B0  0A01               	xorlw	1	; case 11
  6583  0004B2  B4D8               	btfsc	status,2,c
  6584  0004B4  D7A5               	goto	l6968
  6585  0004B6  0A07               	xorlw	7	; case 12
  6586  0004B8  B4D8               	btfsc	status,2,c
  6587  0004BA  D7B1               	goto	l6970
  6588  0004BC  D7BF               	goto	l6972
  6589  0004BE                     l6978:
  6590                           
  6591                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6592  0004BE  0E6A               	movlw	low STR_21
  6593  0004C0  0100               	movlb	0	; () banked
  6594  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6595  0004C4  0EFB               	movlw	high STR_21
  6596  0004C6  0100               	movlb	0	; () banked
  6597  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6598  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6599  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6600  0004D2  0ED6               	movlw	low UI@month
  6601  0004D4  0100               	movlb	0	; () banked
  6602  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6603  0004D8  0E00               	movlw	high UI@month
  6604  0004DA  0100               	movlb	0	; () banked
  6605  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6606  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6607  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6608  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6609  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6610  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6611  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6612  0004F6  EC97  F008         	call	_printf	;wreg free
  6613                           
  6614                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6615  0004FA  0E00               	movlw	0
  6616  0004FC  0100               	movlb	0	; () banked
  6617  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6618  000500                     l6982:
  6619                           
  6620                           ; BSR set to: 0
  6621  000500  0E63               	movlw	99
  6622  000502  0100               	movlb	0	; () banked
  6623  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6624  000506  D001               	goto	l6986
  6625  000508  D00C               	goto	l6990
  6626  00050A                     l6986:
  6627                           
  6628                           ; BSR set to: 0
  6629  00050A  0E68               	movlw	104
  6630  00050C  0100               	movlb	0	; () banked
  6631  00050E  6FC4               	movwf	??_UI& (0+255),b
  6632  000510  0EE4               	movlw	228
  6633  000512                     u6797:
  6634  000512  2EE8               	decfsz	wreg,f,c
  6635  000514  D7FE               	bra	u6797
  6636  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6637  000518  D7FC               	bra	u6797
  6638  00051A  F000               	nop	
  6639  00051C  0100               	movlb	0	; () banked
  6640  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6641  000520  D7EF               	goto	l6982
  6642  000522                     l6990:
  6643                           
  6644                           ; BSR set to: 0
  6645  000522  0100               	movlb	0	; () banked
  6646  000524  51F6               	movf	_logstate& (0+255),w,b
  6647  000526  0100               	movlb	0	; () banked
  6648  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6649  00052A  B4D8               	btfsc	status,2,c
  6650  00052C  0012               	return	
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6654                           
  6655                           ; BSR set to: 0
  6656                           
  6657                           ; BSR set to: 0
  6658  00052E  0E00               	movlw	0
  6659  000530  0100               	movlb	0	; () banked
  6660  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6661  000534                     l6996:
  6662                           
  6663                           ; BSR set to: 0
  6664  000534  0E63               	movlw	99
  6665  000536  0100               	movlb	0	; () banked
  6666  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6667  00053A  D001               	goto	l7000
  6668  00053C  D00C               	goto	l7004
  6669  00053E                     l7000:
  6670                           
  6671                           ; BSR set to: 0
  6672  00053E  0E68               	movlw	104
  6673  000540  0100               	movlb	0	; () banked
  6674  000542  6FC4               	movwf	??_UI& (0+255),b
  6675  000544  0EE4               	movlw	228
  6676  000546                     u6807:
  6677  000546  2EE8               	decfsz	wreg,f,c
  6678  000548  D7FE               	bra	u6807
  6679  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6680  00054C  D7FC               	bra	u6807
  6681  00054E  F000               	nop	
  6682  000550  0100               	movlb	0	; () banked
  6683  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6684  000554  D7EF               	goto	l6996
  6685  000556                     l7004:
  6686                           
  6687                           ; BSR set to: 0
  6688  000556  0100               	movlb	0	; () banked
  6689  000558  51F6               	movf	_logstate& (0+255),w,b
  6690  00055A  0100               	movlb	0	; () banked
  6691  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6692  00055E  B4D8               	btfsc	status,2,c
  6693  000560  0012               	return	
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6697                           
  6698                           ; BSR set to: 0
  6699                           
  6700                           ; BSR set to: 0
  6701  000562  0E01               	movlw	1
  6702  000564  EC5A  F020         	call	_lcdInst
  6703  000568  0E68               	movlw	104
  6704  00056A  0100               	movlb	0	; () banked
  6705  00056C  6FC4               	movwf	??_UI& (0+255),b
  6706  00056E  0EE4               	movlw	228
  6707  000570                     u6817:
  6708  000570  2EE8               	decfsz	wreg,f,c
  6709  000572  D7FE               	bra	u6817
  6710  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6711  000576  D7FC               	bra	u6817
  6712  000578  F000               	nop	
  6713                           
  6714                           ;UI.c: 171: lcdInst(0b10000000);;
  6715  00057A  0E80               	movlw	128
  6716  00057C  EC5A  F020         	call	_lcdInst
  6717                           
  6718                           ;UI.c: 172: printf("DURATION:");
  6719  000580  0EA3               	movlw	low STR_22
  6720  000582  0100               	movlb	0	; () banked
  6721  000584  6F8E               	movwf	printf@f& (0+255),b
  6722  000586  0EFF               	movlw	high STR_22
  6723  000588  0100               	movlb	0	; () banked
  6724  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6725  00058C  EC97  F008         	call	_printf	;wreg free
  6726                           
  6727                           ;UI.c: 173: lcdInst(0b11000000);;
  6728  000590  0EC0               	movlw	192
  6729  000592  EC5A  F020         	call	_lcdInst
  6730                           
  6731                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6732  000596  0E0E               	movlw	14
  6733  000598  0100               	movlb	0	; () banked
  6734  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6735  00059C  0E10               	movlw	16
  6736  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6737  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6738  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6739  0005A8  ECE2  F018         	call	___awmod	;wreg free
  6740  0005AC  C080  F0C6         	movff	?___awmod,_UI$2213
  6741  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2213+1
  6742                           
  6743                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6744  0005B4  0E36               	movlw	low STR_23
  6745  0005B6  0100               	movlb	0	; () banked
  6746  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6747  0005BA  0EFF               	movlw	high STR_23
  6748  0005BC  0100               	movlb	0	; () banked
  6749  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6750  0005C0  0E0E               	movlw	14
  6751  0005C2  0100               	movlb	0	; () banked
  6752  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6753  0005C6  0E10               	movlw	16
  6754  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6755  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6756  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6757  0005D2  ECE2  F018         	call	___awmod	;wreg free
  6758  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6759  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6760  0005DE  0E00               	movlw	0
  6761  0005E0  0100               	movlb	0	; () banked
  6762  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6763  0005E4  0E3C               	movlw	60
  6764  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6765  0005E8  ECD0  F017         	call	___awdiv	;wreg free
  6766  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6767  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6768  0005F4  C0C6  F080         	movff	_UI$2213,___awmod@dividend
  6769  0005F8  C0C7  F081         	movff	_UI$2213+1,___awmod@dividend+1
  6770  0005FC  0E00               	movlw	0
  6771  0005FE  0100               	movlb	0	; () banked
  6772  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6773  000602  0E3C               	movlw	60
  6774  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6775  000606  ECE2  F018         	call	___awmod	;wreg free
  6776  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6777  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6778  000612  EC97  F008         	call	_printf	;wreg free
  6779                           
  6780                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6781  000616  0E00               	movlw	0
  6782  000618  0100               	movlb	0	; () banked
  6783  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6784  00061C                     l7024:
  6785                           
  6786                           ; BSR set to: 0
  6787  00061C  0E63               	movlw	99
  6788  00061E  0100               	movlb	0	; () banked
  6789  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6790  000622  D001               	goto	l7028
  6791  000624  D00C               	goto	l7032
  6792  000626                     l7028:
  6793                           
  6794                           ; BSR set to: 0
  6795  000626  0E68               	movlw	104
  6796  000628  0100               	movlb	0	; () banked
  6797  00062A  6FC4               	movwf	??_UI& (0+255),b
  6798  00062C  0EE4               	movlw	228
  6799  00062E                     u6827:
  6800  00062E  2EE8               	decfsz	wreg,f,c
  6801  000630  D7FE               	bra	u6827
  6802  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6803  000634  D7FC               	bra	u6827
  6804  000636  F000               	nop	
  6805  000638  0100               	movlb	0	; () banked
  6806  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6807  00063C  D7EF               	goto	l7024
  6808  00063E                     l7032:
  6809                           
  6810                           ; BSR set to: 0
  6811  00063E  0100               	movlb	0	; () banked
  6812  000640  51F6               	movf	_logstate& (0+255),w,b
  6813  000642  0100               	movlb	0	; () banked
  6814  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6815  000646  B4D8               	btfsc	status,2,c
  6816  000648  0012               	return	
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824  00064A  0E00               	movlw	0
  6825  00064C  0100               	movlb	0	; () banked
  6826  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6827  000650                     l7038:
  6828                           
  6829                           ; BSR set to: 0
  6830  000650  0E63               	movlw	99
  6831  000652  0100               	movlb	0	; () banked
  6832  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6833  000656  D001               	goto	l7042
  6834  000658  D00C               	goto	l7046
  6835  00065A                     l7042:
  6836                           
  6837                           ; BSR set to: 0
  6838  00065A  0E68               	movlw	104
  6839  00065C  0100               	movlb	0	; () banked
  6840  00065E  6FC4               	movwf	??_UI& (0+255),b
  6841  000660  0EE4               	movlw	228
  6842  000662                     u6837:
  6843  000662  2EE8               	decfsz	wreg,f,c
  6844  000664  D7FE               	bra	u6837
  6845  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6846  000668  D7FC               	bra	u6837
  6847  00066A  F000               	nop	
  6848  00066C  0100               	movlb	0	; () banked
  6849  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6850  000670  D7EF               	goto	l7038
  6851  000672                     l7046:
  6852                           
  6853                           ; BSR set to: 0
  6854  000672  0100               	movlb	0	; () banked
  6855  000674  51F6               	movf	_logstate& (0+255),w,b
  6856  000676  0100               	movlb	0	; () banked
  6857  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6858  00067A  B4D8               	btfsc	status,2,c
  6859  00067C  0012               	return	
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6863                           
  6864                           ; BSR set to: 0
  6865                           
  6866                           ; BSR set to: 0
  6867  00067E  0E01               	movlw	1
  6868  000680  EC5A  F020         	call	_lcdInst
  6869  000684  0E68               	movlw	104
  6870  000686  0100               	movlb	0	; () banked
  6871  000688  6FC4               	movwf	??_UI& (0+255),b
  6872  00068A  0EE4               	movlw	228
  6873  00068C                     u6847:
  6874  00068C  2EE8               	decfsz	wreg,f,c
  6875  00068E  D7FE               	bra	u6847
  6876  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6877  000692  D7FC               	bra	u6847
  6878  000694  F000               	nop	
  6879                           
  6880                           ;UI.c: 180: lcdInst(0b10000000);;
  6881  000696  0E80               	movlw	128
  6882  000698  EC5A  F020         	call	_lcdInst
  6883                           
  6884                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6885  00069C  0E7B               	movlw	low STR_24
  6886  00069E  0100               	movlb	0	; () banked
  6887  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6888  0006A2  0EFD               	movlw	high STR_24
  6889  0006A4  0100               	movlb	0	; () banked
  6890  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6891  0006A8  EC97  F008         	call	_printf	;wreg free
  6892                           
  6893                           ;UI.c: 182: lcdInst(0b11000000);;
  6894  0006AC  0EC0               	movlw	192
  6895  0006AE  EC5A  F020         	call	_lcdInst
  6896                           
  6897                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6898  0006B2  0EAA               	movlw	low STR_25
  6899  0006B4  0100               	movlb	0	; () banked
  6900  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6901  0006B8  0EFB               	movlw	high STR_25
  6902  0006BA  0100               	movlb	0	; () banked
  6903  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6904  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6905  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6906  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6907  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6908  0006CE  EC97  F008         	call	_printf	;wreg free
  6909                           
  6910                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6911  0006D2  0E00               	movlw	0
  6912  0006D4  0100               	movlb	0	; () banked
  6913  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6914  0006D8                     l7064:
  6915                           
  6916                           ; BSR set to: 0
  6917  0006D8  0E63               	movlw	99
  6918  0006DA  0100               	movlb	0	; () banked
  6919  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6920  0006DE  D001               	goto	l7068
  6921  0006E0  D00C               	goto	l7072
  6922  0006E2                     l7068:
  6923                           
  6924                           ; BSR set to: 0
  6925  0006E2  0E68               	movlw	104
  6926  0006E4  0100               	movlb	0	; () banked
  6927  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6928  0006E8  0EE4               	movlw	228
  6929  0006EA                     u6857:
  6930  0006EA  2EE8               	decfsz	wreg,f,c
  6931  0006EC  D7FE               	bra	u6857
  6932  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6933  0006F0  D7FC               	bra	u6857
  6934  0006F2  F000               	nop	
  6935  0006F4  0100               	movlb	0	; () banked
  6936  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6937  0006F8  D7EF               	goto	l7064
  6938  0006FA                     l7072:
  6939                           
  6940                           ; BSR set to: 0
  6941  0006FA  0100               	movlb	0	; () banked
  6942  0006FC  51F6               	movf	_logstate& (0+255),w,b
  6943  0006FE  0100               	movlb	0	; () banked
  6944  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6945  000702  B4D8               	btfsc	status,2,c
  6946  000704  0012               	return	
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6950                           
  6951                           ; BSR set to: 0
  6952                           
  6953                           ; BSR set to: 0
  6954  000706  0E00               	movlw	0
  6955  000708  0100               	movlb	0	; () banked
  6956  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6957  00070C                     l7078:
  6958                           
  6959                           ; BSR set to: 0
  6960  00070C  0E63               	movlw	99
  6961  00070E  0100               	movlb	0	; () banked
  6962  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6963  000712  D001               	goto	l7082
  6964  000714  D00C               	goto	l7086
  6965  000716                     l7082:
  6966                           
  6967                           ; BSR set to: 0
  6968  000716  0E68               	movlw	104
  6969  000718  0100               	movlb	0	; () banked
  6970  00071A  6FC4               	movwf	??_UI& (0+255),b
  6971  00071C  0EE4               	movlw	228
  6972  00071E                     u6867:
  6973  00071E  2EE8               	decfsz	wreg,f,c
  6974  000720  D7FE               	bra	u6867
  6975  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6976  000724  D7FC               	bra	u6867
  6977  000726  F000               	nop	
  6978  000728  0100               	movlb	0	; () banked
  6979  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6980  00072C  D7EF               	goto	l7078
  6981  00072E                     l7086:
  6982                           
  6983                           ; BSR set to: 0
  6984  00072E  0100               	movlb	0	; () banked
  6985  000730  51F6               	movf	_logstate& (0+255),w,b
  6986  000732  0100               	movlb	0	; () banked
  6987  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6988  000736  B4D8               	btfsc	status,2,c
  6989  000738  0012               	return	
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6993                           
  6994                           ; BSR set to: 0
  6995                           
  6996                           ; BSR set to: 0
  6997  00073A  0E01               	movlw	1
  6998  00073C  EC5A  F020         	call	_lcdInst
  6999  000740  0E68               	movlw	104
  7000  000742  0100               	movlb	0	; () banked
  7001  000744  6FC4               	movwf	??_UI& (0+255),b
  7002  000746  0EE4               	movlw	228
  7003  000748                     u6877:
  7004  000748  2EE8               	decfsz	wreg,f,c
  7005  00074A  D7FE               	bra	u6877
  7006  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7007  00074E  D7FC               	bra	u6877
  7008  000750  F000               	nop	
  7009                           
  7010                           ;UI.c: 189: lcdInst(0b10000000);;
  7011  000752  0E80               	movlw	128
  7012  000754  EC5A  F020         	call	_lcdInst
  7013                           
  7014                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7015  000758  0E8C               	movlw	low STR_26
  7016  00075A  0100               	movlb	0	; () banked
  7017  00075C  6F8E               	movwf	printf@f& (0+255),b
  7018  00075E  0EFD               	movlw	high STR_26
  7019  000760  0100               	movlb	0	; () banked
  7020  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7021  000764  EC97  F008         	call	_printf	;wreg free
  7022                           
  7023                           ;UI.c: 191: lcdInst(0b11000000);;
  7024  000768  0EC0               	movlw	192
  7025  00076A  EC5A  F020         	call	_lcdInst
  7026                           
  7027                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7028  00076E  0E97               	movlw	low STR_27
  7029  000770  0100               	movlb	0	; () banked
  7030  000772  6F8E               	movwf	printf@f& (0+255),b
  7031  000774  0EFB               	movlw	high STR_27
  7032  000776  0100               	movlb	0	; () banked
  7033  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7034  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7035  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7036  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7037  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7038  00078A  EC97  F008         	call	_printf	;wreg free
  7039                           
  7040                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7041  00078E  0E00               	movlw	0
  7042  000790  0100               	movlb	0	; () banked
  7043  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7044  000794                     l7104:
  7045                           
  7046                           ; BSR set to: 0
  7047  000794  0E63               	movlw	99
  7048  000796  0100               	movlb	0	; () banked
  7049  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7050  00079A  D001               	goto	l7108
  7051  00079C  D00C               	goto	l7112
  7052  00079E                     l7108:
  7053                           
  7054                           ; BSR set to: 0
  7055  00079E  0E68               	movlw	104
  7056  0007A0  0100               	movlb	0	; () banked
  7057  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7058  0007A4  0EE4               	movlw	228
  7059  0007A6                     u6887:
  7060  0007A6  2EE8               	decfsz	wreg,f,c
  7061  0007A8  D7FE               	bra	u6887
  7062  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7063  0007AC  D7FC               	bra	u6887
  7064  0007AE  F000               	nop	
  7065  0007B0  0100               	movlb	0	; () banked
  7066  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7067  0007B4  D7EF               	goto	l7104
  7068  0007B6                     l7112:
  7069                           
  7070                           ; BSR set to: 0
  7071  0007B6  0100               	movlb	0	; () banked
  7072  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7073  0007BA  0100               	movlb	0	; () banked
  7074  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7075  0007BE  B4D8               	btfsc	status,2,c
  7076  0007C0  0012               	return	
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7080                           
  7081                           ; BSR set to: 0
  7082                           
  7083                           ; BSR set to: 0
  7084  0007C2  0E00               	movlw	0
  7085  0007C4  0100               	movlb	0	; () banked
  7086  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7087  0007C8                     l7118:
  7088                           
  7089                           ; BSR set to: 0
  7090  0007C8  0E63               	movlw	99
  7091  0007CA  0100               	movlb	0	; () banked
  7092  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7093  0007CE  D001               	goto	l7122
  7094  0007D0  D00C               	goto	l7126
  7095  0007D2                     l7122:
  7096                           
  7097                           ; BSR set to: 0
  7098  0007D2  0E68               	movlw	104
  7099  0007D4  0100               	movlb	0	; () banked
  7100  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7101  0007D8  0EE4               	movlw	228
  7102  0007DA                     u6897:
  7103  0007DA  2EE8               	decfsz	wreg,f,c
  7104  0007DC  D7FE               	bra	u6897
  7105  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7106  0007E0  D7FC               	bra	u6897
  7107  0007E2  F000               	nop	
  7108  0007E4  0100               	movlb	0	; () banked
  7109  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7110  0007E8  D7EF               	goto	l7118
  7111  0007EA                     l7126:
  7112                           
  7113                           ; BSR set to: 0
  7114  0007EA  0100               	movlb	0	; () banked
  7115  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7116  0007EE  0100               	movlb	0	; () banked
  7117  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7118  0007F2  B4D8               	btfsc	status,2,c
  7119  0007F4  0012               	return	
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127  0007F6  0E01               	movlw	1
  7128  0007F8  EC5A  F020         	call	_lcdInst
  7129  0007FC  0E68               	movlw	104
  7130  0007FE  0100               	movlb	0	; () banked
  7131  000800  6FC4               	movwf	??_UI& (0+255),b
  7132  000802  0EE4               	movlw	228
  7133  000804                     u6907:
  7134  000804  2EE8               	decfsz	wreg,f,c
  7135  000806  D7FE               	bra	u6907
  7136  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7137  00080A  D7FC               	bra	u6907
  7138  00080C  F000               	nop	
  7139                           
  7140                           ;UI.c: 198: lcdInst(0b10000000);;
  7141  00080E  0E80               	movlw	128
  7142  000810  EC5A  F020         	call	_lcdInst
  7143                           
  7144                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7145  000814  0E9D               	movlw	low STR_28
  7146  000816  0100               	movlb	0	; () banked
  7147  000818  6F8E               	movwf	printf@f& (0+255),b
  7148  00081A  0EFD               	movlw	high STR_28
  7149  00081C  0100               	movlb	0	; () banked
  7150  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7151  000820  EC97  F008         	call	_printf	;wreg free
  7152                           
  7153                           ;UI.c: 200: lcdInst(0b11000000);;
  7154  000824  0EC0               	movlw	192
  7155  000826  EC5A  F020         	call	_lcdInst
  7156                           
  7157                           ;UI.c: 201: printf("%d", log_count_total);
  7158  00082A  0EA7               	movlw	low (STR_27+16)
  7159  00082C  0100               	movlb	0	; () banked
  7160  00082E  6F8E               	movwf	printf@f& (0+255),b
  7161  000830  0EFB               	movlw	high (STR_27+16)
  7162  000832  0100               	movlb	0	; () banked
  7163  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7164  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7165  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7166  00083E  EC97  F008         	call	_printf	;wreg free
  7167                           
  7168                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7169  000842  0E00               	movlw	0
  7170  000844  0100               	movlb	0	; () banked
  7171  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7172  000848                     l7144:
  7173                           
  7174                           ; BSR set to: 0
  7175  000848  0E63               	movlw	99
  7176  00084A  0100               	movlb	0	; () banked
  7177  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7178  00084E  D001               	goto	l7148
  7179  000850  D00C               	goto	l7152
  7180  000852                     l7148:
  7181                           
  7182                           ; BSR set to: 0
  7183  000852  0E68               	movlw	104
  7184  000854  0100               	movlb	0	; () banked
  7185  000856  6FC4               	movwf	??_UI& (0+255),b
  7186  000858  0EE4               	movlw	228
  7187  00085A                     u6917:
  7188  00085A  2EE8               	decfsz	wreg,f,c
  7189  00085C  D7FE               	bra	u6917
  7190  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7191  000860  D7FC               	bra	u6917
  7192  000862  F000               	nop	
  7193  000864  0100               	movlb	0	; () banked
  7194  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7195  000868  D7EF               	goto	l7144
  7196  00086A                     l7152:
  7197                           
  7198                           ; BSR set to: 0
  7199  00086A  0100               	movlb	0	; () banked
  7200  00086C  51F6               	movf	_logstate& (0+255),w,b
  7201  00086E  0100               	movlb	0	; () banked
  7202  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7203  000872  B4D8               	btfsc	status,2,c
  7204  000874  0012               	return	
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7208                           
  7209                           ; BSR set to: 0
  7210                           
  7211                           ; BSR set to: 0
  7212  000876  0E00               	movlw	0
  7213  000878  0100               	movlb	0	; () banked
  7214  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7215  00087C                     l7158:
  7216                           
  7217                           ; BSR set to: 0
  7218  00087C  0E63               	movlw	99
  7219  00087E  0100               	movlb	0	; () banked
  7220  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7221  000882  D001               	goto	l7162
  7222  000884  D00C               	goto	l7166
  7223  000886                     l7162:
  7224                           
  7225                           ; BSR set to: 0
  7226  000886  0E68               	movlw	104
  7227  000888  0100               	movlb	0	; () banked
  7228  00088A  6FC4               	movwf	??_UI& (0+255),b
  7229  00088C  0EE4               	movlw	228
  7230  00088E                     u6927:
  7231  00088E  2EE8               	decfsz	wreg,f,c
  7232  000890  D7FE               	bra	u6927
  7233  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7234  000894  D7FC               	bra	u6927
  7235  000896  F000               	nop	
  7236  000898  0100               	movlb	0	; () banked
  7237  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7238  00089C  D7EF               	goto	l7158
  7239  00089E                     l7166:
  7240                           
  7241                           ; BSR set to: 0
  7242  00089E  0100               	movlb	0	; () banked
  7243  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7244  0008A2  0100               	movlb	0	; () banked
  7245  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7246  0008A6  B4D8               	btfsc	status,2,c
  7247  0008A8  0012               	return	
  7248  0008AA                     l7170:
  7249  0008AA  0100               	movlb	0	; () banked
  7250  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7251  0008AE  0100               	movlb	0	; () banked
  7252  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7253  0008B2  B4D8               	btfsc	status,2,c
  7254  0008B4  0012               	return	
  7255  0008B6  D44A               	goto	l6866
  7256  0008B8                     __end_of_UI:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           intcon	equ	0xFF2
  7265                           intcon2	equ	0xFF1
  7266                           intcon3	equ	0xFF0
  7267                           postinc0	equ	0xFEE
  7268                           wreg	equ	0xFE8
  7269                           postdec1	equ	0xFE5
  7270                           fsr1l	equ	0xFE1
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function _printRTC *****************
  7279 ;; Defined at:
  7280 ;;		line 63 in file "RTC.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  i               2   66[BANK0 ] int 
  7285 ;;  INT_time       14   46[BANK0 ] int [7]
  7286 ;;  month           4   62[BANK0 ] unsigned char [4]
  7287 ;;  RTC_month       2   60[BANK0 ] int 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;Total ram usage:       25 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:   10
  7304 ;; This function calls:
  7305 ;;		_getRTC
  7306 ;;		_lcdInst
  7307 ;;		_printf
  7308 ;;		_strcpy
  7309 ;; This function is called by:
  7310 ;;		_UI
  7311 ;;		_change_state_to_menu_start
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text22
  7316  0018D4                     __ptext22:
  7317                           	opt stack 0
  7318  0018D4                     _printRTC:
  7319                           	opt stack 18
  7320                           
  7321                           ;RTC.c: 64: getRTC();
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;incstack = 0
  7325  0018D4  EC08  F01A         	call	_getRTC	;wreg free
  7326                           
  7327                           ;RTC.c: 65: char month[] = "MMM";
  7328  0018D8  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7329  0018DC  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7330  0018E0  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7331  0018E4  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7332                           
  7333                           ;RTC.c: 66: int INT_time[7];
  7334                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7335  0018E8  0E00               	movlw	0
  7336  0018EA  0100               	movlb	0	; () banked
  7337  0018EC  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7338  0018EE  0E00               	movlw	0
  7339  0018F0  6FC2               	movwf	printRTC@i& (0+255),b
  7340                           
  7341                           ; BSR set to: 0
  7342  0018F2  0100               	movlb	0	; () banked
  7343  0018F4  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7344  0018F6  D008               	goto	l5512
  7345  0018F8  0100               	movlb	0	; () banked
  7346  0018FA  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7347  0018FC  E146               	bnz	l591
  7348  0018FE  0E07               	movlw	7
  7349  001900  0100               	movlb	0	; () banked
  7350  001902  5DC2               	subwf	printRTC@i& (0+255),w,b
  7351  001904  B0D8               	btfsc	status,0,c
  7352  001906  D041               	goto	l591
  7353  001908                     l5512:
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7357  001908  0E24               	movlw	low _time
  7358  00190A  0100               	movlb	0	; () banked
  7359  00190C  25C2               	addwf	printRTC@i& (0+255),w,b
  7360  00190E  6ED9               	movwf	fsr2l,c
  7361  001910  0E01               	movlw	high _time
  7362  001912  0100               	movlb	0	; () banked
  7363  001914  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7364  001916  6EDA               	movwf	fsr2h,c
  7365  001918  50DF               	movf	indf2,w,c
  7366  00191A  0100               	movlb	0	; () banked
  7367  00191C  6FAB               	movwf	??_printRTC& (0+255),b
  7368  00191E  0100               	movlb	0	; () banked
  7369  001920  3BAB               	swapf	??_printRTC& (0+255),f,b
  7370  001922  0E0F               	movlw	15
  7371  001924  17AB               	andwf	??_printRTC& (0+255),f,b
  7372  001926  0E0F               	movlw	15
  7373  001928  0100               	movlb	0	; () banked
  7374  00192A  17AB               	andwf	??_printRTC& (0+255),f,b
  7375  00192C  0100               	movlb	0	; () banked
  7376  00192E  51AB               	movf	??_printRTC& (0+255),w,b
  7377  001930  0D0A               	mullw	10
  7378  001932  0E24               	movlw	low _time
  7379  001934  0100               	movlb	0	; () banked
  7380  001936  25C2               	addwf	printRTC@i& (0+255),w,b
  7381  001938  6ED9               	movwf	fsr2l,c
  7382  00193A  0E01               	movlw	high _time
  7383  00193C  0100               	movlb	0	; () banked
  7384  00193E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7385  001940  6EDA               	movwf	fsr2h,c
  7386  001942  50DF               	movf	indf2,w,c
  7387  001944  0B0F               	andlw	15
  7388  001946  0100               	movlb	0	; () banked
  7389  001948  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7390  00194A  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7391  00194C  50F3               	movf	prodl,w,c
  7392  00194E  0100               	movlb	0	; () banked
  7393  001950  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7394  001952  50F4               	movf	prodh,w,c
  7395  001954  0100               	movlb	0	; () banked
  7396  001956  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7397  001958  90D8               	bcf	status,0,c
  7398  00195A  0100               	movlb	0	; () banked
  7399  00195C  35C2               	rlcf	printRTC@i& (0+255),w,b
  7400  00195E  6ED9               	movwf	fsr2l,c
  7401  001960  0100               	movlb	0	; () banked
  7402  001962  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7403  001964  6EDA               	movwf	fsr2h,c
  7404  001966  0EAE               	movlw	low printRTC@INT_time
  7405  001968  26D9               	addwf	fsr2l,f,c
  7406  00196A  0E00               	movlw	high printRTC@INT_time
  7407  00196C  22DA               	addwfc	fsr2h,f,c
  7408  00196E  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7409  001972  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7410                           
  7411                           ; BSR set to: 0
  7412  001976  0100               	movlb	0	; () banked
  7413  001978  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7414  00197A  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7415                           
  7416                           ; BSR set to: 0
  7417  00197C  0100               	movlb	0	; () banked
  7418  00197E  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7419  001980  D7C3               	goto	l5512
  7420  001982  0100               	movlb	0	; () banked
  7421  001984  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7422  001986  E101               	bnz	u4250
  7423  001988  D7BA               	goto	L5
  7424  00198A                     u4250:
  7425  00198A                     l591:
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;RTC.c: 69: }
  7429                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7430  00198A  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7431  00198E  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7432                           
  7433                           ;RTC.c: 71: switch(RTC_month){
  7434  001992  D0B4               	goto	l5544
  7435  001994                     l5518:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;RTC.c: 73: strcpy(month, "JAN");
  7439  001994  0EBE               	movlw	low printRTC@month
  7440  001996  0100               	movlb	0	; () banked
  7441  001998  6F80               	movwf	strcpy@to& (0+255),b
  7442  00199A  0E00               	movlw	high printRTC@month
  7443  00199C  0100               	movlb	0	; () banked
  7444  00199E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7445  0019A0  0EDA               	movlw	low STR_8
  7446  0019A2  0100               	movlb	0	; () banked
  7447  0019A4  6F82               	movwf	strcpy@from& (0+255),b
  7448  0019A6  0EFF               	movlw	high STR_8
  7449  0019A8  0100               	movlb	0	; () banked
  7450  0019AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7451  0019AC  ECF8  F01D         	call	_strcpy	;wreg free
  7452                           
  7453                           ;RTC.c: 74: break;
  7454  0019B0  D0D4               	goto	l5546
  7455  0019B2                     l5520:
  7456                           
  7457                           ;RTC.c: 76: strcpy(month, "FEB");
  7458  0019B2  0EBE               	movlw	low printRTC@month
  7459  0019B4  0100               	movlb	0	; () banked
  7460  0019B6  6F80               	movwf	strcpy@to& (0+255),b
  7461  0019B8  0E00               	movlw	high printRTC@month
  7462  0019BA  0100               	movlb	0	; () banked
  7463  0019BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7464  0019BE  0ECA               	movlw	low STR_9
  7465  0019C0  0100               	movlb	0	; () banked
  7466  0019C2  6F82               	movwf	strcpy@from& (0+255),b
  7467  0019C4  0EFF               	movlw	high STR_9
  7468  0019C6  0100               	movlb	0	; () banked
  7469  0019C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7470  0019CA  ECF8  F01D         	call	_strcpy	;wreg free
  7471                           
  7472                           ;RTC.c: 77: break;
  7473  0019CE  D0C5               	goto	l5546
  7474  0019D0                     l5522:
  7475                           
  7476                           ;RTC.c: 79: strcpy(month, "MAR");
  7477  0019D0  0EBE               	movlw	low printRTC@month
  7478  0019D2  0100               	movlb	0	; () banked
  7479  0019D4  6F80               	movwf	strcpy@to& (0+255),b
  7480  0019D6  0E00               	movlw	high printRTC@month
  7481  0019D8  0100               	movlb	0	; () banked
  7482  0019DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7483  0019DC  0EE6               	movlw	low STR_10
  7484  0019DE  0100               	movlb	0	; () banked
  7485  0019E0  6F82               	movwf	strcpy@from& (0+255),b
  7486  0019E2  0EFF               	movlw	high STR_10
  7487  0019E4  0100               	movlb	0	; () banked
  7488  0019E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7489  0019E8  ECF8  F01D         	call	_strcpy	;wreg free
  7490                           
  7491                           ;RTC.c: 80: break;
  7492  0019EC  D0B6               	goto	l5546
  7493  0019EE                     l5524:
  7494                           
  7495                           ;RTC.c: 82: strcpy(month, "APR");
  7496  0019EE  0EBE               	movlw	low printRTC@month
  7497  0019F0  0100               	movlb	0	; () banked
  7498  0019F2  6F80               	movwf	strcpy@to& (0+255),b
  7499  0019F4  0E00               	movlw	high printRTC@month
  7500  0019F6  0100               	movlb	0	; () banked
  7501  0019F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7502  0019FA  0EEA               	movlw	low STR_11
  7503  0019FC  0100               	movlb	0	; () banked
  7504  0019FE  6F82               	movwf	strcpy@from& (0+255),b
  7505  001A00  0EFF               	movlw	high STR_11
  7506  001A02  0100               	movlb	0	; () banked
  7507  001A04  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7508  001A06  ECF8  F01D         	call	_strcpy	;wreg free
  7509                           
  7510                           ;RTC.c: 83: break;
  7511  001A0A  D0A7               	goto	l5546
  7512  001A0C                     l5526:
  7513                           
  7514                           ;RTC.c: 85: strcpy(month, "MAY");
  7515  001A0C  0EBE               	movlw	low printRTC@month
  7516  001A0E  0100               	movlb	0	; () banked
  7517  001A10  6F80               	movwf	strcpy@to& (0+255),b
  7518  001A12  0E00               	movlw	high printRTC@month
  7519  001A14  0100               	movlb	0	; () banked
  7520  001A16  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7521  001A18  0EFA               	movlw	low STR_12
  7522  001A1A  0100               	movlb	0	; () banked
  7523  001A1C  6F82               	movwf	strcpy@from& (0+255),b
  7524  001A1E  0EFF               	movlw	high STR_12
  7525  001A20  0100               	movlb	0	; () banked
  7526  001A22  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7527  001A24  ECF8  F01D         	call	_strcpy	;wreg free
  7528                           
  7529                           ;RTC.c: 86: break;
  7530  001A28  D098               	goto	l5546
  7531  001A2A                     l5528:
  7532                           
  7533                           ;RTC.c: 88: strcpy(month, "JUN");
  7534  001A2A  0EBE               	movlw	low printRTC@month
  7535  001A2C  0100               	movlb	0	; () banked
  7536  001A2E  6F80               	movwf	strcpy@to& (0+255),b
  7537  001A30  0E00               	movlw	high printRTC@month
  7538  001A32  0100               	movlb	0	; () banked
  7539  001A34  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7540  001A36  0EDE               	movlw	low STR_13
  7541  001A38  0100               	movlb	0	; () banked
  7542  001A3A  6F82               	movwf	strcpy@from& (0+255),b
  7543  001A3C  0EFF               	movlw	high STR_13
  7544  001A3E  0100               	movlb	0	; () banked
  7545  001A40  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7546  001A42  ECF8  F01D         	call	_strcpy	;wreg free
  7547                           
  7548                           ;RTC.c: 89: break;
  7549  001A46  D089               	goto	l5546
  7550  001A48                     l5530:
  7551                           
  7552                           ;RTC.c: 91: strcpy(month, "JUL");
  7553  001A48  0EBE               	movlw	low printRTC@month
  7554  001A4A  0100               	movlb	0	; () banked
  7555  001A4C  6F80               	movwf	strcpy@to& (0+255),b
  7556  001A4E  0E00               	movlw	high printRTC@month
  7557  001A50  0100               	movlb	0	; () banked
  7558  001A52  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7559  001A54  0ED6               	movlw	low STR_14
  7560  001A56  0100               	movlb	0	; () banked
  7561  001A58  6F82               	movwf	strcpy@from& (0+255),b
  7562  001A5A  0EFF               	movlw	high STR_14
  7563  001A5C  0100               	movlb	0	; () banked
  7564  001A5E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7565  001A60  ECF8  F01D         	call	_strcpy	;wreg free
  7566                           
  7567                           ;RTC.c: 92: break;
  7568  001A64  D07A               	goto	l5546
  7569  001A66                     l5532:
  7570                           
  7571                           ;RTC.c: 94: strcpy(month, "AUG");
  7572  001A66  0EBE               	movlw	low printRTC@month
  7573  001A68  0100               	movlb	0	; () banked
  7574  001A6A  6F80               	movwf	strcpy@to& (0+255),b
  7575  001A6C  0E00               	movlw	high printRTC@month
  7576  001A6E  0100               	movlb	0	; () banked
  7577  001A70  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7578  001A72  0ED2               	movlw	low STR_15
  7579  001A74  0100               	movlb	0	; () banked
  7580  001A76  6F82               	movwf	strcpy@from& (0+255),b
  7581  001A78  0EFF               	movlw	high STR_15
  7582  001A7A  0100               	movlb	0	; () banked
  7583  001A7C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7584  001A7E  ECF8  F01D         	call	_strcpy	;wreg free
  7585                           
  7586                           ;RTC.c: 95: break;
  7587  001A82  D06B               	goto	l5546
  7588  001A84                     l5534:
  7589                           
  7590                           ;RTC.c: 97: strcpy(month, "SEP");
  7591  001A84  0EBE               	movlw	low printRTC@month
  7592  001A86  0100               	movlb	0	; () banked
  7593  001A88  6F80               	movwf	strcpy@to& (0+255),b
  7594  001A8A  0E00               	movlw	high printRTC@month
  7595  001A8C  0100               	movlb	0	; () banked
  7596  001A8E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7597  001A90  0EE2               	movlw	low STR_16
  7598  001A92  0100               	movlb	0	; () banked
  7599  001A94  6F82               	movwf	strcpy@from& (0+255),b
  7600  001A96  0EFF               	movlw	high STR_16
  7601  001A98  0100               	movlb	0	; () banked
  7602  001A9A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7603  001A9C  ECF8  F01D         	call	_strcpy	;wreg free
  7604                           
  7605                           ;RTC.c: 98: break;
  7606  001AA0  D05C               	goto	l5546
  7607  001AA2                     l5536:
  7608                           
  7609                           ;RTC.c: 100: strcpy(month, "OCT");
  7610  001AA2  0EBE               	movlw	low printRTC@month
  7611  001AA4  0100               	movlb	0	; () banked
  7612  001AA6  6F80               	movwf	strcpy@to& (0+255),b
  7613  001AA8  0E00               	movlw	high printRTC@month
  7614  001AAA  0100               	movlb	0	; () banked
  7615  001AAC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7616  001AAE  0EF2               	movlw	low STR_17
  7617  001AB0  0100               	movlb	0	; () banked
  7618  001AB2  6F82               	movwf	strcpy@from& (0+255),b
  7619  001AB4  0EFF               	movlw	high STR_17
  7620  001AB6  0100               	movlb	0	; () banked
  7621  001AB8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7622  001ABA  ECF8  F01D         	call	_strcpy	;wreg free
  7623                           
  7624                           ;RTC.c: 101: break;
  7625  001ABE  D04D               	goto	l5546
  7626  001AC0                     l5538:
  7627                           
  7628                           ;RTC.c: 103: strcpy(month, "NOV");
  7629  001AC0  0EBE               	movlw	low printRTC@month
  7630  001AC2  0100               	movlb	0	; () banked
  7631  001AC4  6F80               	movwf	strcpy@to& (0+255),b
  7632  001AC6  0E00               	movlw	high printRTC@month
  7633  001AC8  0100               	movlb	0	; () banked
  7634  001ACA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7635  001ACC  0EF6               	movlw	low STR_18
  7636  001ACE  0100               	movlb	0	; () banked
  7637  001AD0  6F82               	movwf	strcpy@from& (0+255),b
  7638  001AD2  0EFF               	movlw	high STR_18
  7639  001AD4  0100               	movlb	0	; () banked
  7640  001AD6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7641  001AD8  ECF8  F01D         	call	_strcpy	;wreg free
  7642                           
  7643                           ;RTC.c: 104: break;
  7644  001ADC  D03E               	goto	l5546
  7645  001ADE                     l5540:
  7646                           
  7647                           ;RTC.c: 106: strcpy(month, "DEC");
  7648  001ADE  0EBE               	movlw	low printRTC@month
  7649  001AE0  0100               	movlb	0	; () banked
  7650  001AE2  6F80               	movwf	strcpy@to& (0+255),b
  7651  001AE4  0E00               	movlw	high printRTC@month
  7652  001AE6  0100               	movlb	0	; () banked
  7653  001AE8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7654  001AEA  0ECE               	movlw	low STR_19
  7655  001AEC  0100               	movlb	0	; () banked
  7656  001AEE  6F82               	movwf	strcpy@from& (0+255),b
  7657  001AF0  0EFF               	movlw	high STR_19
  7658  001AF2  0100               	movlb	0	; () banked
  7659  001AF4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7660  001AF6  ECF8  F01D         	call	_strcpy	;wreg free
  7661                           
  7662                           ;RTC.c: 108: }
  7663                           
  7664                           ;RTC.c: 107: break;
  7665  001AFA  D02F               	goto	l5546
  7666  001AFC                     l5544:
  7667  001AFC  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7668  001B00  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7669                           
  7670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7671                           ; Switch size 1, requested type "space"
  7672                           ; Number of cases is 1, Range of values is 0 to 0
  7673                           ; switch strategies available:
  7674                           ; Name         Instructions Cycles
  7675                           ; simple_byte            4     3 (average)
  7676                           ;	Chosen strategy is simple_byte
  7677  001B04  0100               	movlb	0	; () banked
  7678  001B06  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7679  001B08  0A00               	xorlw	0	; case 0
  7680  001B0A  A4D8               	btfss	status,2,c
  7681  001B0C  D026               	goto	l5546
  7682                           
  7683                           ; BSR set to: 0
  7684                           ; Switch size 1, requested type "space"
  7685                           ; Number of cases is 12, Range of values is 1 to 12
  7686                           ; switch strategies available:
  7687                           ; Name         Instructions Cycles
  7688                           ; simple_byte           37    19 (average)
  7689                           ;	Chosen strategy is simple_byte
  7690  001B0E  0100               	movlb	0	; () banked
  7691  001B10  51AB               	movf	??_printRTC& (0+255),w,b
  7692  001B12  0A01               	xorlw	1	; case 1
  7693  001B14  B4D8               	btfsc	status,2,c
  7694  001B16  D73E               	goto	l5518
  7695  001B18  0A03               	xorlw	3	; case 2
  7696  001B1A  B4D8               	btfsc	status,2,c
  7697  001B1C  D74A               	goto	l5520
  7698  001B1E  0A01               	xorlw	1	; case 3
  7699  001B20  B4D8               	btfsc	status,2,c
  7700  001B22  D756               	goto	l5522
  7701  001B24  0A07               	xorlw	7	; case 4
  7702  001B26  B4D8               	btfsc	status,2,c
  7703  001B28  D762               	goto	l5524
  7704  001B2A  0A01               	xorlw	1	; case 5
  7705  001B2C  B4D8               	btfsc	status,2,c
  7706  001B2E  D76E               	goto	l5526
  7707  001B30  0A03               	xorlw	3	; case 6
  7708  001B32  B4D8               	btfsc	status,2,c
  7709  001B34  D77A               	goto	l5528
  7710  001B36  0A01               	xorlw	1	; case 7
  7711  001B38  B4D8               	btfsc	status,2,c
  7712  001B3A  D786               	goto	l5530
  7713  001B3C  0A0F               	xorlw	15	; case 8
  7714  001B3E  B4D8               	btfsc	status,2,c
  7715  001B40  D792               	goto	l5532
  7716  001B42  0A01               	xorlw	1	; case 9
  7717  001B44  B4D8               	btfsc	status,2,c
  7718  001B46  D79E               	goto	l5534
  7719  001B48  0A03               	xorlw	3	; case 10
  7720  001B4A  B4D8               	btfsc	status,2,c
  7721  001B4C  D7AA               	goto	l5536
  7722  001B4E  0A01               	xorlw	1	; case 11
  7723  001B50  B4D8               	btfsc	status,2,c
  7724  001B52  D7B6               	goto	l5538
  7725  001B54  0A07               	xorlw	7	; case 12
  7726  001B56  B4D8               	btfsc	status,2,c
  7727  001B58  D7C2               	goto	l5540
  7728  001B5A                     l5546:
  7729                           
  7730                           ;RTC.c: 109: lcdInst(0b10000000);;
  7731  001B5A  0E80               	movlw	128
  7732  001B5C  EC5A  F020         	call	_lcdInst
  7733                           
  7734                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7735  001B60  0E6A               	movlw	low STR_21
  7736  001B62  0100               	movlb	0	; () banked
  7737  001B64  6F8E               	movwf	printf@f& (0+255),b
  7738  001B66  0EFB               	movlw	high STR_21
  7739  001B68  0100               	movlb	0	; () banked
  7740  001B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7741  001B6C  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7742  001B70  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7743  001B74  0EBE               	movlw	low printRTC@month
  7744  001B76  0100               	movlb	0	; () banked
  7745  001B78  6F92               	movwf	(?_printf+4)& (0+255),b
  7746  001B7A  0E00               	movlw	high printRTC@month
  7747  001B7C  0100               	movlb	0	; () banked
  7748  001B7E  6F93               	movwf	(?_printf+5)& (0+255),b
  7749  001B80  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7750  001B84  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7751  001B88  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7752  001B8C  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7753  001B90  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7754  001B94  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7755  001B98  EC97  F008         	call	_printf	;wreg free
  7756  001B9C  0012               	return		;funcret
  7757  001B9E                     __end_of_printRTC:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           intcon2	equ	0xFF1
  7767                           intcon3	equ	0xFF0
  7768                           postinc0	equ	0xFEE
  7769                           wreg	equ	0xFE8
  7770                           postdec1	equ	0xFE5
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           postinc2	equ	0xFDE
  7774                           postdec2	equ	0xFDD
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function _strcpy *****************
  7780 ;; Defined at:
  7781 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7784 ;;		 -> printRTC@month(4), UI@month(4), 
  7785 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7786 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7787 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7788 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7789 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7790 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7791 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7792 ;;		 -> STR_8(4), 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7795 ;;		 -> printRTC@month(4), UI@month(4), 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  2    0[BANK0 ] PTR unsigned char 
  7798 ;; Registers used:
  7799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7805 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;Total ram usage:        6 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    7
  7812 ;; This function calls:
  7813 ;;		Nothing
  7814 ;; This function is called by:
  7815 ;;		_UI
  7816 ;;		_printRTC
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text23
  7821  003BF0                     __ptext23:
  7822                           	opt stack 0
  7823  003BF0                     _strcpy:
  7824                           	opt stack 20
  7825                           
  7826                           ;incstack = 0
  7827  003BF0  C080  F084         	movff	strcpy@to,strcpy@cp
  7828  003BF4  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7829  003BF8  D006               	goto	l5250
  7830  003BFA                     l5248:
  7831  003BFA  0100               	movlb	0	; () banked
  7832  003BFC  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7833  003BFE  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7834  003C00  0100               	movlb	0	; () banked
  7835  003C02  4B82               	infsnz	strcpy@from& (0+255),f,b
  7836  003C04  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7837  003C06                     l5250:
  7838  003C06  C082  FFF6         	movff	strcpy@from,tblptrl
  7839  003C0A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7840  003C0E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7841  003C0E  6AF8               	clrf	tblptru,c
  7842  003C10                     	endif
  7843  003C10                     	if	0	;tblptru may be non-zero
  7844  003C10                     	endif
  7845  003C10  C084  FFD9         	movff	strcpy@cp,fsr2l
  7846  003C14  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7847  003C18  0008               	tblrd		*
  7848  003C1A  CFF5 FFDF          	movff	tablat,indf2
  7849  003C1E  50DF               	movf	indf2,w,c
  7850  003C20  B4D8               	btfsc	status,2,c
  7851  003C22  0012               	return	
  7852  003C24  D7EA               	goto	l5248
  7853  003C26                     __end_of_strcpy:
  7854                           	opt stack 0
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           intcon2	equ	0xFF1
  7863                           intcon3	equ	0xFF0
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           postdec1	equ	0xFE5
  7867                           fsr1l	equ	0xFE1
  7868                           indf2	equ	0xFDF
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function _getRTC *****************
  7876 ;; Defined at:
  7877 ;;		line 44 in file "RTC.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  i               2    3[BANK0 ] int 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;Total ram usage:        2 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    9
  7898 ;; This function calls:
  7899 ;;		_I2C_Master_Read
  7900 ;;		_I2C_Master_Start
  7901 ;;		_I2C_Master_Stop
  7902 ;;		_I2C_Master_Write
  7903 ;; This function is called by:
  7904 ;;		_printRTC
  7905 ;;		_initSortTimer
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text24
  7910  003410                     __ptext24:
  7911                           	opt stack 0
  7912  003410                     _getRTC:
  7913                           	opt stack 18
  7914                           
  7915                           ;RTC.c: 48: I2C_Master_Start();
  7916                           
  7917                           ;incstack = 0
  7918  003410  EC80  F020         	call	_I2C_Master_Start	;wreg free
  7919                           
  7920                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7921  003414  0E00               	movlw	0
  7922  003416  0100               	movlb	0	; () banked
  7923  003418  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7924  00341A  0ED0               	movlw	208
  7925  00341C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7926  00341E  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  7927                           
  7928                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7929  003422  0E00               	movlw	0
  7930  003424  0100               	movlb	0	; () banked
  7931  003426  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7932  003428  0E00               	movlw	0
  7933  00342A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7934  00342C  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  7935                           
  7936                           ;RTC.c: 51: I2C_Master_Stop();
  7937  003430  EC7C  F020         	call	_I2C_Master_Stop	;wreg free
  7938                           
  7939                           ;RTC.c: 54: I2C_Master_Start();
  7940  003434  EC80  F020         	call	_I2C_Master_Start	;wreg free
  7941                           
  7942                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7943  003438  0E00               	movlw	0
  7944  00343A  0100               	movlb	0	; () banked
  7945  00343C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7946  00343E  0ED1               	movlw	209
  7947  003440  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7948  003442  EC6E  F020         	call	_I2C_Master_Write	;wreg free
  7949                           
  7950                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7951  003446  0E00               	movlw	0
  7952  003448  0100               	movlb	0	; () banked
  7953  00344A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7954  00344C  0E00               	movlw	0
  7955  00344E  6F83               	movwf	getRTC@i& (0+255),b
  7956  003450                     l5256:
  7957                           
  7958                           ; BSR set to: 0
  7959  003450  0100               	movlb	0	; () banked
  7960  003452  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7961  003454  D008               	goto	l5260
  7962  003456  0100               	movlb	0	; () banked
  7963  003458  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7964  00345A  E115               	bnz	l5266
  7965  00345C  0E06               	movlw	6
  7966  00345E  0100               	movlb	0	; () banked
  7967  003460  5D83               	subwf	getRTC@i& (0+255),w,b
  7968  003462  B0D8               	btfsc	status,0,c
  7969  003464  D010               	goto	l5266
  7970  003466                     l5260:
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7974  003466  0E24               	movlw	low _time
  7975  003468  0100               	movlb	0	; () banked
  7976  00346A  2583               	addwf	getRTC@i& (0+255),w,b
  7977  00346C  6ED9               	movwf	fsr2l,c
  7978  00346E  0E01               	movlw	high _time
  7979  003470  0100               	movlb	0	; () banked
  7980  003472  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7981  003474  6EDA               	movwf	fsr2h,c
  7982  003476  0E01               	movlw	1
  7983  003478  EC1F  F01F         	call	_I2C_Master_Read
  7984  00347C  6EDF               	movwf	indf2,c
  7985  00347E  0100               	movlb	0	; () banked
  7986  003480  4B83               	infsnz	getRTC@i& (0+255),f,b
  7987  003482  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7988  003484  D7E5               	goto	l5256
  7989  003486                     l5266:
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;RTC.c: 58: }
  7993                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7994  003486  0E00               	movlw	0
  7995  003488  EC1F  F01F         	call	_I2C_Master_Read
  7996  00348C  0101               	movlb	1	; () banked
  7997  00348E  6F2A               	movwf	(_time+6)& (0+255),b
  7998                           
  7999                           ;RTC.c: 60: I2C_Master_Stop();
  8000  003490  EC7C  F020         	call	_I2C_Master_Stop	;wreg free
  8001  003494  0012               	return		;funcret
  8002  003496                     __end_of_getRTC:
  8003                           	opt stack 0
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodh	equ	0xFF4
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           intcon2	equ	0xFF1
  8012                           intcon3	equ	0xFF0
  8013                           postinc0	equ	0xFEE
  8014                           wreg	equ	0xFE8
  8015                           postdec1	equ	0xFE5
  8016                           fsr1l	equ	0xFE1
  8017                           indf2	equ	0xFDF
  8018                           postinc2	equ	0xFDE
  8019                           postdec2	equ	0xFDD
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function _I2C_Master_Write *****************
  8025 ;; Defined at:
  8026 ;;		line 49 in file "I2C.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  d               2    1[BANK0 ] unsigned int 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;		None
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2, status,0, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:        2 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    8
  8047 ;; This function calls:
  8048 ;;		_I2C_Master_Wait
  8049 ;; This function is called by:
  8050 ;;		_loadRTC
  8051 ;;		_getRTC
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text25
  8056  0040DC                     __ptext25:
  8057                           	opt stack 0
  8058  0040DC                     _I2C_Master_Write:
  8059                           	opt stack 18
  8060                           
  8061                           ;I2C.c: 51: I2C_Master_Wait();
  8062                           
  8063                           ;incstack = 0
  8064  0040DC  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8065                           
  8066                           ;I2C.c: 52: SSPBUF = d;
  8067  0040E0  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8068  0040E4  0012               	return		;funcret
  8069  0040E6                     __end_of_I2C_Master_Write:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           intcon3	equ	0xFF0
  8080                           postinc0	equ	0xFEE
  8081                           wreg	equ	0xFE8
  8082                           postdec1	equ	0xFE5
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _I2C_Master_Stop *****************
  8092 ;; Defined at:
  8093 ;;		line 43 in file "I2C.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;Total ram usage:        0 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    8
  8114 ;; This function calls:
  8115 ;;		_I2C_Master_Wait
  8116 ;; This function is called by:
  8117 ;;		_loadRTC
  8118 ;;		_getRTC
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text26
  8123  0040F8                     __ptext26:
  8124                           	opt stack 0
  8125  0040F8                     _I2C_Master_Stop:
  8126                           	opt stack 18
  8127                           
  8128                           ;I2C.c: 45: I2C_Master_Wait();
  8129                           
  8130                           ;incstack = 0
  8131  0040F8  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8132                           
  8133                           ;I2C.c: 46: PEN = 1;
  8134  0040FC  84C5               	bsf	4037,2,c	;volatile
  8135  0040FE  0012               	return		;funcret
  8136  004100                     __end_of_I2C_Master_Stop:
  8137                           	opt stack 0
  8138                           tblptru	equ	0xFF8
  8139                           tblptrh	equ	0xFF7
  8140                           tblptrl	equ	0xFF6
  8141                           tablat	equ	0xFF5
  8142                           prodh	equ	0xFF4
  8143                           prodl	equ	0xFF3
  8144                           intcon	equ	0xFF2
  8145                           intcon2	equ	0xFF1
  8146                           intcon3	equ	0xFF0
  8147                           postinc0	equ	0xFEE
  8148                           wreg	equ	0xFE8
  8149                           postdec1	equ	0xFE5
  8150                           fsr1l	equ	0xFE1
  8151                           indf2	equ	0xFDF
  8152                           postinc2	equ	0xFDE
  8153                           postdec2	equ	0xFDD
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function _I2C_Master_Start *****************
  8159 ;; Defined at:
  8160 ;;		line 31 in file "I2C.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg, status,2, status,0, cstack
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;Total ram usage:        0 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    8
  8181 ;; This function calls:
  8182 ;;		_I2C_Master_Wait
  8183 ;; This function is called by:
  8184 ;;		_loadRTC
  8185 ;;		_getRTC
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text27
  8190  004100                     __ptext27:
  8191                           	opt stack 0
  8192  004100                     _I2C_Master_Start:
  8193                           	opt stack 18
  8194                           
  8195                           ;I2C.c: 33: I2C_Master_Wait();
  8196                           
  8197                           ;incstack = 0
  8198  004100  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8199                           
  8200                           ;I2C.c: 34: SEN = 1;
  8201  004104  80C5               	bsf	4037,0,c	;volatile
  8202  004106  0012               	return		;funcret
  8203  004108                     __end_of_I2C_Master_Start:
  8204                           	opt stack 0
  8205                           tblptru	equ	0xFF8
  8206                           tblptrh	equ	0xFF7
  8207                           tblptrl	equ	0xFF6
  8208                           tablat	equ	0xFF5
  8209                           prodh	equ	0xFF4
  8210                           prodl	equ	0xFF3
  8211                           intcon	equ	0xFF2
  8212                           intcon2	equ	0xFF1
  8213                           intcon3	equ	0xFF0
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function _I2C_Master_Read *****************
  8226 ;; Defined at:
  8227 ;;		line 55 in file "I2C.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  a               1    wreg     unsigned char 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  a               1    1[BANK0 ] unsigned char 
  8232 ;;  temp            1    2[BANK0 ] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      unsigned char 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        2 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    8
  8249 ;; This function calls:
  8250 ;;		_I2C_Master_Wait
  8251 ;; This function is called by:
  8252 ;;		_getRTC
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text28
  8257  003E3E                     __ptext28:
  8258                           	opt stack 0
  8259  003E3E                     _I2C_Master_Read:
  8260                           	opt stack 18
  8261                           
  8262                           ;incstack = 0
  8263                           ;I2C_Master_Read@a stored from wreg
  8264  003E3E  0100               	movlb	0	; () banked
  8265  003E40  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8266                           
  8267                           ;I2C.c: 57: unsigned char temp;
  8268                           ;I2C.c: 58: I2C_Master_Wait();
  8269  003E42  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8270                           
  8271                           ;I2C.c: 59: RCEN = 1;
  8272  003E46  86C5               	bsf	4037,3,c	;volatile
  8273                           
  8274                           ;I2C.c: 60: I2C_Master_Wait();
  8275  003E48  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8276                           
  8277                           ;I2C.c: 61: temp = SSPBUF;
  8278  003E4C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8279                           
  8280                           ;I2C.c: 62: I2C_Master_Wait();
  8281  003E50  EC3F  F020         	call	_I2C_Master_Wait	;wreg free
  8282                           
  8283                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8284  003E54  0100               	movlb	0	; () banked
  8285  003E56  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8286  003E58  0100               	movlb	0	; () banked
  8287  003E5A  A4D8               	btfss	status,2,c
  8288  003E5C  D002               	goto	u3340
  8289  003E5E  8AC5               	bsf	4037,5,c	;volatile
  8290  003E60  D001               	goto	l4950
  8291  003E62                     u3340:
  8292  003E62  9AC5               	bcf	4037,5,c	;volatile
  8293  003E64                     l4950:
  8294                           
  8295                           ;I2C.c: 64: ACKEN = 1;
  8296  003E64  88C5               	bsf	4037,4,c	;volatile
  8297                           
  8298                           ;I2C.c: 65: return temp;
  8299  003E66  0100               	movlb	0	; () banked
  8300  003E68  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8301  003E6A  0012               	return	
  8302  003E6C                     __end_of_I2C_Master_Read:
  8303                           	opt stack 0
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon2	equ	0xFF1
  8312                           intcon3	equ	0xFF0
  8313                           postinc0	equ	0xFEE
  8314                           wreg	equ	0xFE8
  8315                           postdec1	equ	0xFE5
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function _I2C_Master_Wait *****************
  8325 ;; Defined at:
  8326 ;;		line 26 in file "I2C.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:        1 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    7
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_I2C_Master_Start
  8351 ;;		_I2C_Master_Stop
  8352 ;;		_I2C_Master_Write
  8353 ;;		_I2C_Master_Read
  8354 ;;		_I2C_Master_RepeatedStart
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text29
  8359  00407E                     __ptext29:
  8360                           	opt stack 0
  8361  00407E                     _I2C_Master_Wait:
  8362                           	opt stack 18
  8363  00407E                     l66:
  8364  00407E  B4C7               	btfsc	4039,2,c	;volatile
  8365  004080  D7FE               	goto	l66
  8366  004082  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8367  004086  0E1F               	movlw	31
  8368  004088  0100               	movlb	0	; () banked
  8369  00408A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8370  00408C  B4D8               	btfsc	status,2,c
  8371  00408E  0012               	return	
  8372  004090  D7F6               	goto	l66
  8373  004092                     __end_of_I2C_Master_Wait:
  8374                           	opt stack 0
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           intcon3	equ	0xFF0
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           postdec1	equ	0xFE5
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _change_state_to_menu_22 *****************
  8396 ;; Defined at:
  8397 ;;		line 496 in file "UI.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:        0 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:   10
  8418 ;; This function calls:
  8419 ;;		_lcdInst
  8420 ;;		_printf
  8421 ;; This function is called by:
  8422 ;;		_UI
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text30
  8427  003B80                     __ptext30:
  8428                           	opt stack 0
  8429  003B80                     _change_state_to_menu_22:
  8430                           	opt stack 19
  8431                           
  8432                           ;UI.c: 497: cur_state = 22;
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;incstack = 0
  8436  003B80  0E00               	movlw	0
  8437  003B82  0100               	movlb	0	; () banked
  8438  003B84  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8439  003B86  0E16               	movlw	22
  8440  003B88  6FDE               	movwf	_cur_state& (0+255),b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;UI.c: 499: lcdInst(0b10000000);;
  8444  003B8A  0E80               	movlw	128
  8445  003B8C  EC5A  F020         	call	_lcdInst
  8446                           
  8447                           ;UI.c: 500: printf("2. SORT        <");
  8448  003B90  0E03               	movlw	low STR_34
  8449  003B92  0100               	movlb	0	; () banked
  8450  003B94  6F8E               	movwf	printf@f& (0+255),b
  8451  003B96  0EFE               	movlw	high STR_34
  8452  003B98  0100               	movlb	0	; () banked
  8453  003B9A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8454  003B9C  EC97  F008         	call	_printf	;wreg free
  8455                           
  8456                           ;UI.c: 501: lcdInst(0b11000000);;
  8457  003BA0  0EC0               	movlw	192
  8458  003BA2  EC5A  F020         	call	_lcdInst
  8459                           
  8460                           ;UI.c: 502: printf("3. LOGS         ");
  8461  003BA6  0E48               	movlw	low STR_36
  8462  003BA8  0100               	movlb	0	; () banked
  8463  003BAA  6F8E               	movwf	printf@f& (0+255),b
  8464  003BAC  0EFD               	movlw	high STR_36
  8465  003BAE  0100               	movlb	0	; () banked
  8466  003BB0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8467  003BB2  EC97  F008         	call	_printf	;wreg free
  8468  003BB6  0012               	return		;funcret
  8469  003BB8                     __end_of_change_state_to_menu_22:
  8470                           	opt stack 0
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           intcon2	equ	0xFF1
  8479                           intcon3	equ	0xFF0
  8480                           postinc0	equ	0xFEE
  8481                           wreg	equ	0xFE8
  8482                           postdec1	equ	0xFE5
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _change_state_to_menu_12 *****************
  8492 ;; Defined at:
  8493 ;;		line 488 in file "UI.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:   10
  8514 ;; This function calls:
  8515 ;;		_lcdInst
  8516 ;;		_printf
  8517 ;; This function is called by:
  8518 ;;		_UI
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text31
  8523  003BB8                     __ptext31:
  8524                           	opt stack 0
  8525  003BB8                     _change_state_to_menu_12:
  8526                           	opt stack 19
  8527                           
  8528                           ;UI.c: 489: cur_state = 12;
  8529                           
  8530                           ;incstack = 0
  8531  003BB8  0E00               	movlw	0
  8532  003BBA  0100               	movlb	0	; () banked
  8533  003BBC  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8534  003BBE  0E0C               	movlw	12
  8535  003BC0  6FDE               	movwf	_cur_state& (0+255),b
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;UI.c: 491: lcdInst(0b10000000);;
  8539  003BC2  0E80               	movlw	128
  8540  003BC4  EC5A  F020         	call	_lcdInst
  8541                           
  8542                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8543  003BC8  0E6A               	movlw	low STR_33
  8544  003BCA  0100               	movlb	0	; () banked
  8545  003BCC  6F8E               	movwf	printf@f& (0+255),b
  8546  003BCE  0EFD               	movlw	high STR_33
  8547  003BD0  0100               	movlb	0	; () banked
  8548  003BD2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8549  003BD4  EC97  F008         	call	_printf	;wreg free
  8550                           
  8551                           ;UI.c: 493: lcdInst(0b11000000);;
  8552  003BD8  0EC0               	movlw	192
  8553  003BDA  EC5A  F020         	call	_lcdInst
  8554                           
  8555                           ;UI.c: 494: printf("2. SORT        <");
  8556  003BDE  0E03               	movlw	low STR_34
  8557  003BE0  0100               	movlb	0	; () banked
  8558  003BE2  6F8E               	movwf	printf@f& (0+255),b
  8559  003BE4  0EFE               	movlw	high STR_34
  8560  003BE6  0100               	movlb	0	; () banked
  8561  003BE8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8562  003BEA  EC97  F008         	call	_printf	;wreg free
  8563  003BEE  0012               	return		;funcret
  8564  003BF0                     __end_of_change_state_to_menu_12:
  8565                           	opt stack 0
  8566                           tblptru	equ	0xFF8
  8567                           tblptrh	equ	0xFF7
  8568                           tblptrl	equ	0xFF6
  8569                           tablat	equ	0xFF5
  8570                           prodh	equ	0xFF4
  8571                           prodl	equ	0xFF3
  8572                           intcon	equ	0xFF2
  8573                           intcon2	equ	0xFF1
  8574                           intcon3	equ	0xFF0
  8575                           postinc0	equ	0xFEE
  8576                           wreg	equ	0xFE8
  8577                           postdec1	equ	0xFE5
  8578                           fsr1l	equ	0xFE1
  8579                           indf2	equ	0xFDF
  8580                           postinc2	equ	0xFDE
  8581                           postdec2	equ	0xFDD
  8582                           fsr2h	equ	0xFDA
  8583                           fsr2l	equ	0xFD9
  8584                           status	equ	0xFD8
  8585                           
  8586 ;; *************** function ___awmod *****************
  8587 ;; Defined at:
  8588 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  dividend        2    0[BANK0 ] int 
  8591 ;;  divisor         2    2[BANK0 ] int 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;  sign            1    5[BANK0 ] unsigned char 
  8594 ;;  counter         1    4[BANK0 ] unsigned char 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  2    0[BANK0 ] int 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;Total ram usage:        6 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    7
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		_UI
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           	psect	text32
  8619  0031C4                     __ptext32:
  8620                           	opt stack 0
  8621  0031C4                     ___awmod:
  8622                           	opt stack 22
  8623                           
  8624                           ;incstack = 0
  8625  0031C4  0E00               	movlw	0
  8626  0031C6  0100               	movlb	0	; () banked
  8627  0031C8  6F85               	movwf	___awmod@sign& (0+255),b
  8628                           
  8629                           ; BSR set to: 0
  8630  0031CA  0100               	movlb	0	; () banked
  8631  0031CC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8632  0031CE  D008               	goto	l6778
  8633                           
  8634                           ; BSR set to: 0
  8635  0031D0  0100               	movlb	0	; () banked
  8636  0031D2  6D80               	negf	___awmod@dividend& (0+255),b
  8637  0031D4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8638  0031D6  B0D8               	btfsc	status,0,c
  8639  0031D8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642  0031DA  0E01               	movlw	1
  8643  0031DC  0100               	movlb	0	; () banked
  8644  0031DE  6F85               	movwf	___awmod@sign& (0+255),b
  8645  0031E0                     l6778:
  8646                           
  8647                           ; BSR set to: 0
  8648  0031E0  0100               	movlb	0	; () banked
  8649  0031E2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8650  0031E4  D005               	goto	l6782
  8651                           
  8652                           ; BSR set to: 0
  8653  0031E6  0100               	movlb	0	; () banked
  8654  0031E8  6D82               	negf	___awmod@divisor& (0+255),b
  8655  0031EA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8656  0031EC  B0D8               	btfsc	status,0,c
  8657  0031EE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8658  0031F0                     l6782:
  8659                           
  8660                           ; BSR set to: 0
  8661  0031F0  0100               	movlb	0	; () banked
  8662  0031F2  5182               	movf	___awmod@divisor& (0+255),w,b
  8663  0031F4  0100               	movlb	0	; () banked
  8664  0031F6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8665  0031F8  B4D8               	btfsc	status,2,c
  8666  0031FA  D026               	goto	l6798
  8667                           
  8668                           ; BSR set to: 0
  8669  0031FC  0E01               	movlw	1
  8670  0031FE  0100               	movlb	0	; () banked
  8671  003200  6F84               	movwf	___awmod@counter& (0+255),b
  8672  003202  D006               	goto	l6788
  8673  003204                     l6786:
  8674                           
  8675                           ; BSR set to: 0
  8676  003204  0100               	movlb	0	; () banked
  8677  003206  90D8               	bcf	status,0,c
  8678  003208  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8679  00320A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8680  00320C  0100               	movlb	0	; () banked
  8681  00320E  2B84               	incf	___awmod@counter& (0+255),f,b
  8682  003210                     l6788:
  8683                           
  8684                           ; BSR set to: 0
  8685  003210  0100               	movlb	0	; () banked
  8686  003212  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8687  003214  D7F7               	goto	l6786
  8688  003216                     l6790:
  8689                           
  8690                           ; BSR set to: 0
  8691  003216  0100               	movlb	0	; () banked
  8692  003218  5182               	movf	___awmod@divisor& (0+255),w,b
  8693  00321A  0100               	movlb	0	; () banked
  8694  00321C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8695  00321E  0100               	movlb	0	; () banked
  8696  003220  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8697  003222  0100               	movlb	0	; () banked
  8698  003224  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8699  003226  A0D8               	btfss	status,0,c
  8700  003228  D008               	goto	l6794
  8701                           
  8702                           ; BSR set to: 0
  8703  00322A  0100               	movlb	0	; () banked
  8704  00322C  5182               	movf	___awmod@divisor& (0+255),w,b
  8705  00322E  0100               	movlb	0	; () banked
  8706  003230  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8707  003232  0100               	movlb	0	; () banked
  8708  003234  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8709  003236  0100               	movlb	0	; () banked
  8710  003238  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8711  00323A                     l6794:
  8712                           
  8713                           ; BSR set to: 0
  8714  00323A  0100               	movlb	0	; () banked
  8715  00323C  90D8               	bcf	status,0,c
  8716  00323E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8717  003240  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8718                           
  8719                           ; BSR set to: 0
  8720  003242  0100               	movlb	0	; () banked
  8721  003244  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8722  003246  D7E7               	goto	l6790
  8723  003248                     l6798:
  8724                           
  8725                           ; BSR set to: 0
  8726  003248  0100               	movlb	0	; () banked
  8727  00324A  5185               	movf	___awmod@sign& (0+255),w,b
  8728  00324C  0100               	movlb	0	; () banked
  8729  00324E  B4D8               	btfsc	status,2,c
  8730  003250  D005               	goto	l6802
  8731                           
  8732                           ; BSR set to: 0
  8733  003252  0100               	movlb	0	; () banked
  8734  003254  6D80               	negf	___awmod@dividend& (0+255),b
  8735  003256  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8736  003258  B0D8               	btfsc	status,0,c
  8737  00325A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8738  00325C                     l6802:
  8739                           
  8740                           ; BSR set to: 0
  8741  00325C  C080  F080         	movff	___awmod@dividend,?___awmod
  8742  003260  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8743  003264  0012               	return	
  8744  003266                     __end_of___awmod:
  8745                           	opt stack 0
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon	equ	0xFF2
  8753                           intcon2	equ	0xFF1
  8754                           intcon3	equ	0xFF0
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           postdec1	equ	0xFE5
  8758                           fsr1l	equ	0xFE1
  8759                           indf2	equ	0xFDF
  8760                           postinc2	equ	0xFDE
  8761                           postdec2	equ	0xFDD
  8762                           fsr2h	equ	0xFDA
  8763                           fsr2l	equ	0xFD9
  8764                           status	equ	0xFD8
  8765                           
  8766 ;; *************** function ___awdiv *****************
  8767 ;; Defined at:
  8768 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  dividend        2    6[BANK0 ] int 
  8771 ;;  divisor         2    8[BANK0 ] int 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  quotient        2   12[BANK0 ] int 
  8774 ;;  sign            1   11[BANK0 ] unsigned char 
  8775 ;;  counter         1   10[BANK0 ] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  2    6[BANK0 ] int 
  8778 ;; Registers used:
  8779 ;;		wreg, status,2, status,0
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8785 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;Total ram usage:        8 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    7
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_UI
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text33
  8800  002FA0                     __ptext33:
  8801                           	opt stack 0
  8802  002FA0                     ___awdiv:
  8803                           	opt stack 22
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;incstack = 0
  8807  002FA0  0E00               	movlw	0
  8808  002FA2  0100               	movlb	0	; () banked
  8809  002FA4  6F8B               	movwf	___awdiv@sign& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812  002FA6  0100               	movlb	0	; () banked
  8813  002FA8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8814  002FAA  D008               	goto	l6734
  8815                           
  8816                           ; BSR set to: 0
  8817  002FAC  0100               	movlb	0	; () banked
  8818  002FAE  6D88               	negf	___awdiv@divisor& (0+255),b
  8819  002FB0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8820  002FB2  B0D8               	btfsc	status,0,c
  8821  002FB4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8822                           
  8823                           ; BSR set to: 0
  8824  002FB6  0E01               	movlw	1
  8825  002FB8  0100               	movlb	0	; () banked
  8826  002FBA  6F8B               	movwf	___awdiv@sign& (0+255),b
  8827  002FBC                     l6734:
  8828                           
  8829                           ; BSR set to: 0
  8830  002FBC  0100               	movlb	0	; () banked
  8831  002FBE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8832  002FC0  D008               	goto	l6740
  8833                           
  8834                           ; BSR set to: 0
  8835  002FC2  0100               	movlb	0	; () banked
  8836  002FC4  6D86               	negf	___awdiv@dividend& (0+255),b
  8837  002FC6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8838  002FC8  B0D8               	btfsc	status,0,c
  8839  002FCA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8840                           
  8841                           ; BSR set to: 0
  8842  002FCC  0E01               	movlw	1
  8843  002FCE  0100               	movlb	0	; () banked
  8844  002FD0  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8845  002FD2                     l6740:
  8846                           
  8847                           ; BSR set to: 0
  8848  002FD2  0E00               	movlw	0
  8849  002FD4  0100               	movlb	0	; () banked
  8850  002FD6  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8851  002FD8  0E00               	movlw	0
  8852  002FDA  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8853                           
  8854                           ; BSR set to: 0
  8855  002FDC  0100               	movlb	0	; () banked
  8856  002FDE  5188               	movf	___awdiv@divisor& (0+255),w,b
  8857  002FE0  0100               	movlb	0	; () banked
  8858  002FE2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8859  002FE4  B4D8               	btfsc	status,2,c
  8860  002FE6  D02C               	goto	l6762
  8861                           
  8862                           ; BSR set to: 0
  8863  002FE8  0E01               	movlw	1
  8864  002FEA  0100               	movlb	0	; () banked
  8865  002FEC  6F8A               	movwf	___awdiv@counter& (0+255),b
  8866  002FEE  D006               	goto	l6748
  8867  002FF0                     l6746:
  8868                           
  8869                           ; BSR set to: 0
  8870  002FF0  0100               	movlb	0	; () banked
  8871  002FF2  90D8               	bcf	status,0,c
  8872  002FF4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8873  002FF6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8874  002FF8  0100               	movlb	0	; () banked
  8875  002FFA  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8876  002FFC                     l6748:
  8877                           
  8878                           ; BSR set to: 0
  8879  002FFC  0100               	movlb	0	; () banked
  8880  002FFE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8881  003000  D7F7               	goto	l6746
  8882  003002                     l6750:
  8883                           
  8884                           ; BSR set to: 0
  8885  003002  0100               	movlb	0	; () banked
  8886  003004  90D8               	bcf	status,0,c
  8887  003006  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8888  003008  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8889                           
  8890                           ; BSR set to: 0
  8891  00300A  0100               	movlb	0	; () banked
  8892  00300C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8893  00300E  0100               	movlb	0	; () banked
  8894  003010  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8895  003012  0100               	movlb	0	; () banked
  8896  003014  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8897  003016  0100               	movlb	0	; () banked
  8898  003018  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8899  00301A  A0D8               	btfss	status,0,c
  8900  00301C  D00A               	goto	l6758
  8901                           
  8902                           ; BSR set to: 0
  8903  00301E  0100               	movlb	0	; () banked
  8904  003020  5188               	movf	___awdiv@divisor& (0+255),w,b
  8905  003022  0100               	movlb	0	; () banked
  8906  003024  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8907  003026  0100               	movlb	0	; () banked
  8908  003028  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8909  00302A  0100               	movlb	0	; () banked
  8910  00302C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8911                           
  8912                           ; BSR set to: 0
  8913  00302E  0100               	movlb	0	; () banked
  8914  003030  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8915  003032                     l6758:
  8916                           
  8917                           ; BSR set to: 0
  8918  003032  0100               	movlb	0	; () banked
  8919  003034  90D8               	bcf	status,0,c
  8920  003036  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8921  003038  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8922                           
  8923                           ; BSR set to: 0
  8924  00303A  0100               	movlb	0	; () banked
  8925  00303C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8926  00303E  D7E1               	goto	l6750
  8927  003040                     l6762:
  8928                           
  8929                           ; BSR set to: 0
  8930  003040  0100               	movlb	0	; () banked
  8931  003042  518B               	movf	___awdiv@sign& (0+255),w,b
  8932  003044  0100               	movlb	0	; () banked
  8933  003046  B4D8               	btfsc	status,2,c
  8934  003048  D005               	goto	l6766
  8935                           
  8936                           ; BSR set to: 0
  8937  00304A  0100               	movlb	0	; () banked
  8938  00304C  6D8C               	negf	___awdiv@quotient& (0+255),b
  8939  00304E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8940  003050  B0D8               	btfsc	status,0,c
  8941  003052  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8942  003054                     l6766:
  8943                           
  8944                           ; BSR set to: 0
  8945  003054  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8946  003058  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8947  00305C  0012               	return	
  8948  00305E                     __end_of___awdiv:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           intcon2	equ	0xFF1
  8958                           intcon3	equ	0xFF0
  8959                           postinc0	equ	0xFEE
  8960                           wreg	equ	0xFE8
  8961                           postdec1	equ	0xFE5
  8962                           fsr1l	equ	0xFE1
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           postdec2	equ	0xFDD
  8966                           fsr2h	equ	0xFDA
  8967                           fsr2l	equ	0xFD9
  8968                           status	equ	0xFD8
  8969                           
  8970 ;; *************** function _Test *****************
  8971 ;; Defined at:
  8972 ;;		line 26 in file "Test.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;		None
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  2  451[None  ] int 
  8979 ;; Registers used:
  8980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;Total ram usage:        2 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:   11
  8993 ;; This function calls:
  8994 ;;		_EEPROMTest
  8995 ;;		_PortTestA5
  8996 ;;		_PortTests
  8997 ;;		_ToggleTestA5
  8998 ;;		_actuatorTest
  8999 ;;		_algorithmTest
  9000 ;;		_lcdInst
  9001 ;;		_printf
  9002 ;;		_sensorTest
  9003 ;; This function is called by:
  9004 ;;		_main
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text34
  9009  002C10                     __ptext34:
  9010                           	opt stack 0
  9011  002C10                     _Test:
  9012                           	opt stack 19
  9013  002C10                     
  9014                           ;Test.c: 29: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9015  002C10  0E01               	movlw	1
  9016  002C12  EC5A  F020         	call	_lcdInst
  9017  002C16  0E68               	movlw	104
  9018  002C18  0100               	movlb	0	; () banked
  9019  002C1A  6FC4               	movwf	??_Test& (0+255),b
  9020  002C1C  0EE4               	movlw	228
  9021  002C1E                     u6937:
  9022  002C1E  2EE8               	decfsz	wreg,f,c
  9023  002C20  D7FE               	bra	u6937
  9024  002C22  2FC4               	decfsz	??_Test& (0+255),f,b
  9025  002C24  D7FC               	bra	u6937
  9026  002C26  F000               	nop	
  9027  002C28  0E80               	movlw	128
  9028  002C2A  EC5A  F020         	call	_lcdInst
  9029                           
  9030                           ;Test.c: 30: printf("1.ALG|2.SNR|3.AC");
  9031  002C2E  0EC0               	movlw	low STR_68
  9032  002C30  0100               	movlb	0	; () banked
  9033  002C32  6F8E               	movwf	printf@f& (0+255),b
  9034  002C34  0EFC               	movlw	high STR_68
  9035  002C36  0100               	movlb	0	; () banked
  9036  002C38  6F8F               	movwf	(printf@f+1)& (0+255),b
  9037  002C3A  EC97  F008         	call	_printf	;wreg free
  9038                           
  9039                           ;Test.c: 31: lcdInst(0b11000000);;
  9040  002C3E  0EC0               	movlw	192
  9041  002C40  EC5A  F020         	call	_lcdInst
  9042                           
  9043                           ;Test.c: 32: printf("4.HI|5.TOG|6.EEP");
  9044  002C44  0EF3               	movlw	low STR_69
  9045  002C46  0100               	movlb	0	; () banked
  9046  002C48  6F8E               	movwf	printf@f& (0+255),b
  9047  002C4A  0EFC               	movlw	high STR_69
  9048  002C4C  0100               	movlb	0	; () banked
  9049  002C4E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9050  002C50  EC97  F008         	call	_printf	;wreg free
  9051                           
  9052                           ;Test.c: 33: _delay((unsigned long)((100)*(32000000/4000.0)));
  9053  002C54  0E05               	movlw	5
  9054  002C56  0100               	movlb	0	; () banked
  9055  002C58  6FC5               	movwf	(??_Test+1)& (0+255),b
  9056  002C5A  0E0F               	movlw	15
  9057  002C5C  0100               	movlb	0	; () banked
  9058  002C5E  6FC4               	movwf	??_Test& (0+255),b
  9059  002C60  0EF1               	movlw	241
  9060  002C62                     u6947:
  9061  002C62  2EE8               	decfsz	wreg,f,c
  9062  002C64  D7FE               	bra	u6947
  9063  002C66  2FC4               	decfsz	??_Test& (0+255),f,b
  9064  002C68  D7FC               	bra	u6947
  9065  002C6A  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  9066  002C6C  D7FA               	bra	u6947
  9067  002C6E                     l998:
  9068  002C6E  A281               	btfss	3969,1,c	;volatile
  9069  002C70  D7FE               	goto	l998
  9070                           
  9071                           ;Test.c: 35: var = PORTB >> 4;
  9072  002C72  CF81 F0C4          	movff	3969,??_Test	;volatile
  9073  002C76  0100               	movlb	0	; () banked
  9074  002C78  3BC4               	swapf	??_Test& (0+255),f,b
  9075  002C7A  0E0F               	movlw	15
  9076  002C7C  17C4               	andwf	??_Test& (0+255),f,b
  9077  002C7E  0100               	movlb	0	; () banked
  9078  002C80  51C4               	movf	??_Test& (0+255),w,b
  9079  002C82  0100               	movlb	0	; () banked
  9080  002C84  6FFA               	movwf	_var& (0+255),b
  9081  002C86  6BFB               	clrf	(_var+1)& (0+255),b
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;Test.c: 36: var++;
  9085  002C88  0100               	movlb	0	; () banked
  9086  002C8A  4BFA               	infsnz	_var& (0+255),f,b
  9087  002C8C  2BFB               	incf	(_var+1)& (0+255),f,b
  9088  002C8E                     l1001:
  9089  002C8E  A281               	btfss	3969,1,c	;volatile
  9090  002C90  D016               	goto	l7494
  9091  002C92  D7FD               	goto	l1001
  9092  002C94                     l7478:
  9093                           
  9094                           ;Test.c: 40: algorithmTest();
  9095  002C94  EC65  F017         	call	_algorithmTest	;wreg free
  9096                           
  9097                           ;Test.c: 41: break;
  9098  002C98  D7BB               	goto	l7460
  9099  002C9A                     l7480:
  9100                           
  9101                           ;Test.c: 43: sensorTest();
  9102  002C9A  EC36  F012         	call	_sensorTest	;wreg free
  9103                           
  9104                           ;Test.c: 44: break;
  9105  002C9E  D7B8               	goto	l7460
  9106  002CA0                     l7482:
  9107                           
  9108                           ;Test.c: 46: actuatorTest();
  9109  002CA0  EC5C  F004         	call	_actuatorTest	;wreg free
  9110                           
  9111                           ;Test.c: 47: break;
  9112  002CA4  D7B5               	goto	l7460
  9113  002CA6                     l7484:
  9114                           
  9115                           ;Test.c: 49: PortTestA5();
  9116  002CA6  EC07  F01C         	call	_PortTestA5	;wreg free
  9117                           
  9118                           ;Test.c: 50: break;
  9119  002CAA  D7B2               	goto	l7460
  9120  002CAC                     l7486:
  9121                           
  9122                           ;Test.c: 52: ToggleTestA5();
  9123  002CAC  ECC4  F019         	call	_ToggleTestA5	;wreg free
  9124                           
  9125                           ;Test.c: 53: break;
  9126  002CB0  D7AF               	goto	l7460
  9127  002CB2                     l7488:
  9128                           
  9129                           ;Test.c: 55: EEPROMTest();
  9130  002CB2  EC8C  F020         	call	_EEPROMTest	;wreg free
  9131                           
  9132                           ;Test.c: 56: break;
  9133  002CB6  D7AC               	goto	l7460
  9134  002CB8                     l7490:
  9135                           
  9136                           ;Test.c: 58: PortTests();
  9137  002CB8  EC4B  F01A         	call	_PortTests	;wreg free
  9138                           
  9139                           ;Test.c: 62: }
  9140                           
  9141                           ;Test.c: 61: break;
  9142                           
  9143                           ;Test.c: 60: default:
  9144                           
  9145                           ;Test.c: 59: break;
  9146  002CBC  D7A9               	goto	l7460
  9147  002CBE                     l7494:
  9148  002CBE  C0FA  F0C4         	movff	_var,??_Test
  9149  002CC2  C0FB  F0C5         	movff	_var+1,??_Test+1
  9150                           
  9151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9152                           ; Switch size 1, requested type "space"
  9153                           ; Number of cases is 1, Range of values is 0 to 0
  9154                           ; switch strategies available:
  9155                           ; Name         Instructions Cycles
  9156                           ; simple_byte            4     3 (average)
  9157                           ;	Chosen strategy is simple_byte
  9158  002CC6  0100               	movlb	0	; () banked
  9159  002CC8  51C5               	movf	(??_Test+1)& (0+255),w,b
  9160  002CCA  0A00               	xorlw	0	; case 0
  9161  002CCC  A4D8               	btfss	status,2,c
  9162  002CCE  D7A0               	goto	l7460
  9163                           
  9164                           ; BSR set to: 0
  9165                           ; Switch size 1, requested type "space"
  9166                           ; Number of cases is 7, Range of values is 1 to 8
  9167                           ; switch strategies available:
  9168                           ; Name         Instructions Cycles
  9169                           ; simple_byte           22    12 (average)
  9170                           ;	Chosen strategy is simple_byte
  9171  002CD0  0100               	movlb	0	; () banked
  9172  002CD2  51C4               	movf	??_Test& (0+255),w,b
  9173  002CD4  0A01               	xorlw	1	; case 1
  9174  002CD6  B4D8               	btfsc	status,2,c
  9175  002CD8  D7DD               	goto	l7478
  9176  002CDA  0A03               	xorlw	3	; case 2
  9177  002CDC  B4D8               	btfsc	status,2,c
  9178  002CDE  D7DD               	goto	l7480
  9179  002CE0  0A01               	xorlw	1	; case 3
  9180  002CE2  B4D8               	btfsc	status,2,c
  9181  002CE4  D7DD               	goto	l7482
  9182  002CE6  0A06               	xorlw	6	; case 5
  9183  002CE8  B4D8               	btfsc	status,2,c
  9184  002CEA  D7DD               	goto	l7484
  9185  002CEC  0A03               	xorlw	3	; case 6
  9186  002CEE  B4D8               	btfsc	status,2,c
  9187  002CF0  D7DD               	goto	l7486
  9188  002CF2  0A01               	xorlw	1	; case 7
  9189  002CF4  B4D8               	btfsc	status,2,c
  9190  002CF6  D7DD               	goto	l7488
  9191  002CF8  0A0F               	xorlw	15	; case 8
  9192  002CFA  B4D8               	btfsc	status,2,c
  9193  002CFC  D7DD               	goto	l7490
  9194                           
  9195                           ; BSR set to: 0
  9196                           
  9197                           ; BSR set to: 0
  9198  002CFE  D788               	goto	l7460
  9199  002D00                     __end_of_Test:
  9200                           	opt stack 0
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           intcon2	equ	0xFF1
  9209                           intcon3	equ	0xFF0
  9210                           postinc0	equ	0xFEE
  9211                           wreg	equ	0xFE8
  9212                           postdec1	equ	0xFE5
  9213                           fsr1l	equ	0xFE1
  9214                           indf2	equ	0xFDF
  9215                           postinc2	equ	0xFDE
  9216                           postdec2	equ	0xFDD
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _sensorTest *****************
  9222 ;; Defined at:
  9223 ;;		line 110 in file "Test.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;		None
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;		None
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      void 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;Total ram usage:        2 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:   10
  9244 ;; This function calls:
  9245 ;;		_lcdInst
  9246 ;;		_printf
  9247 ;;		_readIR
  9248 ;;		_readMAG
  9249 ;; This function is called by:
  9250 ;;		_Test
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text35
  9255  00246C                     __ptext35:
  9256                           	opt stack 0
  9257  00246C                     _sensorTest:
  9258                           	opt stack 19
  9259                           
  9260                           ;Test.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;incstack = 0
  9264  00246C  0E01               	movlw	1
  9265  00246E  EC5A  F020         	call	_lcdInst
  9266  002472  0E68               	movlw	104
  9267  002474  0100               	movlb	0	; () banked
  9268  002476  6FAB               	movwf	??_sensorTest& (0+255),b
  9269  002478  0EE4               	movlw	228
  9270  00247A                     u6957:
  9271  00247A  2EE8               	decfsz	wreg,f,c
  9272  00247C  D7FE               	bra	u6957
  9273  00247E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9274  002480  D7FC               	bra	u6957
  9275  002482  F000               	nop	
  9276  002484  0E80               	movlw	128
  9277  002486  EC5A  F020         	call	_lcdInst
  9278                           
  9279                           ;Test.c: 113: printf("SENSORS");
  9280  00248A  0EAD               	movlw	low STR_77
  9281  00248C  0100               	movlb	0	; () banked
  9282  00248E  6F8E               	movwf	printf@f& (0+255),b
  9283  002490  0EFF               	movlw	high STR_77
  9284  002492  0100               	movlb	0	; () banked
  9285  002494  6F8F               	movwf	(printf@f+1)& (0+255),b
  9286  002496  EC97  F008         	call	_printf	;wreg free
  9287                           
  9288                           ;Test.c: 114: lcdInst(0b11000000);;
  9289  00249A  0EC0               	movlw	192
  9290  00249C  EC5A  F020         	call	_lcdInst
  9291                           
  9292                           ;Test.c: 115: printf("PUSH TO START");
  9293  0024A0  0E28               	movlw	low STR_71
  9294  0024A2  0100               	movlb	0	; () banked
  9295  0024A4  6F8E               	movwf	printf@f& (0+255),b
  9296  0024A6  0EFF               	movlw	high STR_71
  9297  0024A8  0100               	movlb	0	; () banked
  9298  0024AA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9299  0024AC  EC97  F008         	call	_printf	;wreg free
  9300                           
  9301                           ;Test.c: 116: _delay((unsigned long)((100)*(32000000/4000.0)));
  9302  0024B0  0E05               	movlw	5
  9303  0024B2  0100               	movlb	0	; () banked
  9304  0024B4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9305  0024B6  0E0F               	movlw	15
  9306  0024B8  0100               	movlb	0	; () banked
  9307  0024BA  6FAB               	movwf	??_sensorTest& (0+255),b
  9308  0024BC  0EF1               	movlw	241
  9309  0024BE                     u6967:
  9310  0024BE  2EE8               	decfsz	wreg,f,c
  9311  0024C0  D7FE               	bra	u6967
  9312  0024C2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9313  0024C4  D7FC               	bra	u6967
  9314  0024C6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9315  0024C8  D7FA               	bra	u6967
  9316  0024CA                     l1028:
  9317  0024CA  A281               	btfss	3969,1,c	;volatile
  9318  0024CC  D7FE               	goto	l1028
  9319  0024CE                     l1031:
  9320  0024CE  B281               	btfsc	3969,1,c	;volatile
  9321  0024D0  D7FE               	goto	l1031
  9322                           
  9323                           ;Test.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9324  0024D2  0E01               	movlw	1
  9325  0024D4  EC5A  F020         	call	_lcdInst
  9326  0024D8  0E68               	movlw	104
  9327  0024DA  0100               	movlb	0	; () banked
  9328  0024DC  6FAB               	movwf	??_sensorTest& (0+255),b
  9329  0024DE  0EE4               	movlw	228
  9330  0024E0                     u6977:
  9331  0024E0  2EE8               	decfsz	wreg,f,c
  9332  0024E2  D7FE               	bra	u6977
  9333  0024E4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9334  0024E6  D7FC               	bra	u6977
  9335  0024E8  F000               	nop	
  9336  0024EA  0E80               	movlw	128
  9337  0024EC  EC5A  F020         	call	_lcdInst
  9338                           
  9339                           ;Test.c: 124: printf("TST: IR SNSR");
  9340  0024F0  0E52               	movlw	low STR_79
  9341  0024F2  0100               	movlb	0	; () banked
  9342  0024F4  6F8E               	movwf	printf@f& (0+255),b
  9343  0024F6  0EFF               	movlw	high STR_79
  9344  0024F8  0100               	movlb	0	; () banked
  9345  0024FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9346  0024FC  EC97  F008         	call	_printf	;wreg free
  9347                           
  9348                           ;Test.c: 125: _delay((unsigned long)((100)*(32000000/4000.0)));
  9349  002500  0E05               	movlw	5
  9350  002502  0100               	movlb	0	; () banked
  9351  002504  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9352  002506  0E0F               	movlw	15
  9353  002508  0100               	movlb	0	; () banked
  9354  00250A  6FAB               	movwf	??_sensorTest& (0+255),b
  9355  00250C  0EF1               	movlw	241
  9356  00250E                     u6987:
  9357  00250E  2EE8               	decfsz	wreg,f,c
  9358  002510  D7FE               	bra	u6987
  9359  002512  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9360  002514  D7FC               	bra	u6987
  9361  002516  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9362  002518  D7FA               	bra	u6987
  9363                           
  9364                           ;Test.c: 126: while(PORTBbits.RB1 == 0){
  9365  00251A  D021               	goto	l6232
  9366  00251C                     l6226:
  9367                           
  9368                           ;Test.c: 127: readIR();
  9369  00251C  EC56  F01D         	call	_readIR	;wreg free
  9370                           
  9371                           ;Test.c: 128: lcdInst(0b10000000);;
  9372  002520  0E80               	movlw	128
  9373  002522  EC5A  F020         	call	_lcdInst
  9374                           
  9375                           ;Test.c: 129: lcdInst(0b11000000);;
  9376  002526  0EC0               	movlw	192
  9377  002528  EC5A  F020         	call	_lcdInst
  9378                           
  9379                           ;Test.c: 130: printf("IR_signal: %d ", IR_signal);
  9380  00252C  0E77               	movlw	low STR_80
  9381  00252E  0100               	movlb	0	; () banked
  9382  002530  6F8E               	movwf	printf@f& (0+255),b
  9383  002532  0EFE               	movlw	high STR_80
  9384  002534  0100               	movlb	0	; () banked
  9385  002536  6F8F               	movwf	(printf@f+1)& (0+255),b
  9386  002538  C0DA  F090         	movff	_IR_signal,?_printf+2
  9387  00253C  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9388  002540  EC97  F008         	call	_printf	;wreg free
  9389                           
  9390                           ;Test.c: 131: _delay((unsigned long)((100)*(32000000/4000.0)));
  9391  002544  0E05               	movlw	5
  9392  002546  0100               	movlb	0	; () banked
  9393  002548  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9394  00254A  0E0F               	movlw	15
  9395  00254C  0100               	movlb	0	; () banked
  9396  00254E  6FAB               	movwf	??_sensorTest& (0+255),b
  9397  002550  0EF1               	movlw	241
  9398  002552                     u6997:
  9399  002552  2EE8               	decfsz	wreg,f,c
  9400  002554  D7FE               	bra	u6997
  9401  002556  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9402  002558  D7FC               	bra	u6997
  9403  00255A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9404  00255C  D7FA               	bra	u6997
  9405  00255E                     l6232:
  9406  00255E  A281               	btfss	3969,1,c	;volatile
  9407  002560  D7DD               	goto	l6226
  9408                           
  9409                           ;Test.c: 132: }
  9410                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9411  002562  0E01               	movlw	1
  9412  002564  EC5A  F020         	call	_lcdInst
  9413  002568  0E68               	movlw	104
  9414  00256A  0100               	movlb	0	; () banked
  9415  00256C  6FAB               	movwf	??_sensorTest& (0+255),b
  9416  00256E  0EE4               	movlw	228
  9417  002570                     u7007:
  9418  002570  2EE8               	decfsz	wreg,f,c
  9419  002572  D7FE               	bra	u7007
  9420  002574  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9421  002576  D7FC               	bra	u7007
  9422  002578  F000               	nop	
  9423  00257A  0E80               	movlw	128
  9424  00257C  EC5A  F020         	call	_lcdInst
  9425  002580                     l1037:
  9426  002580  B281               	btfsc	3969,1,c	;volatile
  9427  002582  D7FE               	goto	l1037
  9428                           
  9429                           ;Test.c: 141: printf("TST: MAGNETISM");
  9430  002584  0EA4               	movlw	low STR_81
  9431  002586  0100               	movlb	0	; () banked
  9432  002588  6F8E               	movwf	printf@f& (0+255),b
  9433  00258A  0EFE               	movlw	high STR_81
  9434  00258C  0100               	movlb	0	; () banked
  9435  00258E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9436  002590  EC97  F008         	call	_printf	;wreg free
  9437                           
  9438                           ;Test.c: 142: _delay((unsigned long)((100)*(32000000/4000.0)));
  9439  002594  0E05               	movlw	5
  9440  002596  0100               	movlb	0	; () banked
  9441  002598  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9442  00259A  0E0F               	movlw	15
  9443  00259C  0100               	movlb	0	; () banked
  9444  00259E  6FAB               	movwf	??_sensorTest& (0+255),b
  9445  0025A0  0EF1               	movlw	241
  9446  0025A2                     u7017:
  9447  0025A2  2EE8               	decfsz	wreg,f,c
  9448  0025A4  D7FE               	bra	u7017
  9449  0025A6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9450  0025A8  D7FC               	bra	u7017
  9451  0025AA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9452  0025AC  D7FA               	bra	u7017
  9453                           
  9454                           ;Test.c: 143: while(PORTBbits.RB1 == 0){
  9455  0025AE  D021               	goto	l6250
  9456  0025B0                     l6244:
  9457                           
  9458                           ;Test.c: 144: readMAG();
  9459  0025B0  EC30  F01D         	call	_readMAG	;wreg free
  9460                           
  9461                           ;Test.c: 145: lcdInst(0b10000000);;
  9462  0025B4  0E80               	movlw	128
  9463  0025B6  EC5A  F020         	call	_lcdInst
  9464                           
  9465                           ;Test.c: 146: lcdInst(0b11000000);;
  9466  0025BA  0EC0               	movlw	192
  9467  0025BC  EC5A  F020         	call	_lcdInst
  9468                           
  9469                           ;Test.c: 147: printf("MAG_signal: %d ", MAG_signal);
  9470  0025C0  0E47               	movlw	low STR_82
  9471  0025C2  0100               	movlb	0	; () banked
  9472  0025C4  6F8E               	movwf	printf@f& (0+255),b
  9473  0025C6  0EFE               	movlw	high STR_82
  9474  0025C8  0100               	movlb	0	; () banked
  9475  0025CA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9476  0025CC  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9477  0025D0  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9478  0025D4  EC97  F008         	call	_printf	;wreg free
  9479                           
  9480                           ;Test.c: 148: _delay((unsigned long)((100)*(32000000/4000.0)));
  9481  0025D8  0E05               	movlw	5
  9482  0025DA  0100               	movlb	0	; () banked
  9483  0025DC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9484  0025DE  0E0F               	movlw	15
  9485  0025E0  0100               	movlb	0	; () banked
  9486  0025E2  6FAB               	movwf	??_sensorTest& (0+255),b
  9487  0025E4  0EF1               	movlw	241
  9488  0025E6                     u7027:
  9489  0025E6  2EE8               	decfsz	wreg,f,c
  9490  0025E8  D7FE               	bra	u7027
  9491  0025EA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9492  0025EC  D7FC               	bra	u7027
  9493  0025EE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9494  0025F0  D7FA               	bra	u7027
  9495  0025F2                     l6250:
  9496  0025F2  B281               	btfsc	3969,1,c	;volatile
  9497  0025F4  0012               	return	
  9498  0025F6  D7DC               	goto	l6244
  9499  0025F8                     __end_of_sensorTest:
  9500                           	opt stack 0
  9501                           tblptru	equ	0xFF8
  9502                           tblptrh	equ	0xFF7
  9503                           tblptrl	equ	0xFF6
  9504                           tablat	equ	0xFF5
  9505                           prodh	equ	0xFF4
  9506                           prodl	equ	0xFF3
  9507                           intcon	equ	0xFF2
  9508                           intcon2	equ	0xFF1
  9509                           intcon3	equ	0xFF0
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           postdec1	equ	0xFE5
  9513                           fsr1l	equ	0xFE1
  9514                           indf2	equ	0xFDF
  9515                           postinc2	equ	0xFDE
  9516                           postdec2	equ	0xFDD
  9517                           fsr2h	equ	0xFDA
  9518                           fsr2l	equ	0xFD9
  9519                           status	equ	0xFD8
  9520                           
  9521 ;; *************** function _readMAG *****************
  9522 ;; Defined at:
  9523 ;;		line 29 in file "ADCFunctionality.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;		None
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;  res             2    4[BANK0 ] int 
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  1    wreg      void 
  9530 ;; Registers used:
  9531 ;;		wreg, status,2, status,0, cstack
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;Total ram usage:        4 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    8
  9544 ;; This function calls:
  9545 ;;		_readADC
  9546 ;; This function is called by:
  9547 ;;		_ID
  9548 ;;		_sensorTest
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           	psect	text36
  9553  003A60                     __ptext36:
  9554                           	opt stack 0
  9555  003A60                     _readMAG:
  9556                           	opt stack 20
  9557                           
  9558                           ;ADCFunctionality.c: 30: readADC(1);
  9559                           
  9560                           ;incstack = 0
  9561  003A60  0E01               	movlw	1
  9562  003A62  EC63  F01F         	call	_readADC
  9563                           
  9564                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9565  003A66  50C3               	movf	4035,w,c	;volatile
  9566  003A68  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9567  003A6C  0100               	movlb	0	; () banked
  9568  003A6E  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9569  003A70  C082  F083         	movff	??_readMAG,??_readMAG+1
  9570  003A74  0100               	movlb	0	; () banked
  9571  003A76  6B82               	clrf	??_readMAG& (0+255),b
  9572  003A78  0100               	movlb	0	; () banked
  9573  003A7A  1182               	iorwf	??_readMAG& (0+255),w,b
  9574  003A7C  0100               	movlb	0	; () banked
  9575  003A7E  6F84               	movwf	readMAG@res& (0+255),b
  9576  003A80  0100               	movlb	0	; () banked
  9577  003A82  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9578  003A84  0100               	movlb	0	; () banked
  9579  003A86  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9583  003A88  0100               	movlb	0	; () banked
  9584  003A8A  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9585  003A8C  D008               	goto	u4211
  9586  003A8E  0100               	movlb	0	; () banked
  9587  003A90  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9588  003A92  E107               	bnz	u4210
  9589  003A94  0E96               	movlw	150
  9590  003A96  0100               	movlb	0	; () banked
  9591  003A98  5D84               	subwf	readMAG@res& (0+255),w,b
  9592  003A9A  B0D8               	btfsc	status,0,c
  9593  003A9C  D002               	goto	u4210
  9594  003A9E                     u4211:
  9595  003A9E  0E01               	movlw	1
  9596  003AA0  D001               	goto	u4220
  9597  003AA2                     u4210:
  9598  003AA2  0E00               	movlw	0
  9599  003AA4                     u4220:
  9600  003AA4  0100               	movlb	0	; () banked
  9601  003AA6  6FDC               	movwf	_MAG_signal& (0+255),b
  9602  003AA8  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9603                           
  9604                           ; BSR set to: 0
  9605  003AAA  0012               	return		;funcret
  9606  003AAC                     __end_of_readMAG:
  9607                           	opt stack 0
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           intcon2	equ	0xFF1
  9616                           intcon3	equ	0xFF0
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           postdec1	equ	0xFE5
  9620                           fsr1l	equ	0xFE1
  9621                           indf2	equ	0xFDF
  9622                           postinc2	equ	0xFDE
  9623                           postdec2	equ	0xFDD
  9624                           fsr2h	equ	0xFDA
  9625                           fsr2l	equ	0xFD9
  9626                           status	equ	0xFD8
  9627                           
  9628 ;; *************** function _readIR *****************
  9629 ;; Defined at:
  9630 ;;		line 23 in file "ADCFunctionality.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  res             2    4[BANK0 ] int 
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      void 
  9637 ;; Registers used:
  9638 ;;		wreg, status,2, status,0, cstack
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;Total ram usage:        4 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; Hardware stack levels required when called:    8
  9651 ;; This function calls:
  9652 ;;		_readADC
  9653 ;; This function is called by:
  9654 ;;		_getIR
  9655 ;;		_sensorTest
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text37
  9660  003AAC                     __ptext37:
  9661                           	opt stack 0
  9662  003AAC                     _readIR:
  9663                           	opt stack 19
  9664                           
  9665                           ;ADCFunctionality.c: 24: readADC(0);
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;incstack = 0
  9669  003AAC  0E00               	movlw	0
  9670  003AAE  EC63  F01F         	call	_readADC
  9671                           
  9672                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9673  003AB2  50C3               	movf	4035,w,c	;volatile
  9674  003AB4  CFC4 F082          	movff	4036,??_readIR	;volatile
  9675  003AB8  0100               	movlb	0	; () banked
  9676  003ABA  6B83               	clrf	(??_readIR+1)& (0+255),b
  9677  003ABC  C082  F083         	movff	??_readIR,??_readIR+1
  9678  003AC0  0100               	movlb	0	; () banked
  9679  003AC2  6B82               	clrf	??_readIR& (0+255),b
  9680  003AC4  0100               	movlb	0	; () banked
  9681  003AC6  1182               	iorwf	??_readIR& (0+255),w,b
  9682  003AC8  0100               	movlb	0	; () banked
  9683  003ACA  6F84               	movwf	readIR@res& (0+255),b
  9684  003ACC  0100               	movlb	0	; () banked
  9685  003ACE  5183               	movf	(??_readIR+1)& (0+255),w,b
  9686  003AD0  0100               	movlb	0	; () banked
  9687  003AD2  6F85               	movwf	(readIR@res+1)& (0+255),b
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9691  003AD4  0100               	movlb	0	; () banked
  9692  003AD6  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9693  003AD8  D008               	goto	u3541
  9694  003ADA  0100               	movlb	0	; () banked
  9695  003ADC  5185               	movf	(readIR@res+1)& (0+255),w,b
  9696  003ADE  E107               	bnz	u3540
  9697  003AE0  0E96               	movlw	150
  9698  003AE2  0100               	movlb	0	; () banked
  9699  003AE4  5D84               	subwf	readIR@res& (0+255),w,b
  9700  003AE6  B0D8               	btfsc	status,0,c
  9701  003AE8  D002               	goto	u3540
  9702  003AEA                     u3541:
  9703  003AEA  0E01               	movlw	1
  9704  003AEC  D001               	goto	u3550
  9705  003AEE                     u3540:
  9706  003AEE  0E00               	movlw	0
  9707  003AF0                     u3550:
  9708  003AF0  0100               	movlb	0	; () banked
  9709  003AF2  6FDA               	movwf	_IR_signal& (0+255),b
  9710  003AF4  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9711                           
  9712                           ; BSR set to: 0
  9713  003AF6  0012               	return		;funcret
  9714  003AF8                     __end_of_readIR:
  9715                           	opt stack 0
  9716                           tblptru	equ	0xFF8
  9717                           tblptrh	equ	0xFF7
  9718                           tblptrl	equ	0xFF6
  9719                           tablat	equ	0xFF5
  9720                           prodh	equ	0xFF4
  9721                           prodl	equ	0xFF3
  9722                           intcon	equ	0xFF2
  9723                           intcon2	equ	0xFF1
  9724                           intcon3	equ	0xFF0
  9725                           postinc0	equ	0xFEE
  9726                           wreg	equ	0xFE8
  9727                           postdec1	equ	0xFE5
  9728                           fsr1l	equ	0xFE1
  9729                           indf2	equ	0xFDF
  9730                           postinc2	equ	0xFDE
  9731                           postdec2	equ	0xFDD
  9732                           fsr2h	equ	0xFDA
  9733                           fsr2l	equ	0xFD9
  9734                           status	equ	0xFD8
  9735                           
  9736 ;; *************** function _readADC *****************
  9737 ;; Defined at:
  9738 ;;		line 15 in file "ADCFunctionality.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;  channel         1    wreg     unsigned char 
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;  channel         1    1[BANK0 ] unsigned char 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  1    wreg      void 
  9745 ;; Registers used:
  9746 ;;		wreg, status,2, status,0, cstack
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9756 ;;Total ram usage:        2 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    7
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_readIR
  9763 ;;		_readMAG
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           	psect	text38
  9768  003EC6                     __ptext38:
  9769                           	opt stack 0
  9770  003EC6                     _readADC:
  9771                           	opt stack 19
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;incstack = 0
  9775                           ;readADC@channel stored from wreg
  9776  003EC6  0100               	movlb	0	; () banked
  9777  003EC8  6F81               	movwf	readADC@channel& (0+255),b
  9778                           
  9779                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9780  003ECA  0100               	movlb	0	; () banked
  9781  003ECC  4581               	rlncf	readADC@channel& (0+255),w,b
  9782  003ECE  46E8               	rlncf	wreg,f,c
  9783  003ED0  0BFC               	andlw	252
  9784  003ED2  6EC2               	movwf	4034,c	;volatile
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9788  003ED4  80C2               	bsf	4034,0,c	;volatile
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9792  003ED6  82C2               	bsf	4034,1,c	;volatile
  9793                           
  9794                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9795  003ED8  D009               	goto	l4928
  9796  003EDA                     l4926:
  9797  003EDA  0E34               	movlw	52
  9798  003EDC  0100               	movlb	0	; () banked
  9799  003EDE  6F80               	movwf	??_readADC& (0+255),b
  9800  003EE0  0EF1               	movlw	241
  9801  003EE2                     u7037:
  9802  003EE2  2EE8               	decfsz	wreg,f,c
  9803  003EE4  D7FE               	bra	u7037
  9804  003EE6  2F80               	decfsz	??_readADC& (0+255),f,b
  9805  003EE8  D7FC               	bra	u7037
  9806  003EEA  D000               	nop2	
  9807  003EEC                     l4928:
  9808  003EEC  A2C2               	btfss	4034,1,c	;volatile
  9809  003EEE  0012               	return	
  9810  003EF0  D7F4               	goto	l4926
  9811  003EF2                     __end_of_readADC:
  9812                           	opt stack 0
  9813                           tblptru	equ	0xFF8
  9814                           tblptrh	equ	0xFF7
  9815                           tblptrl	equ	0xFF6
  9816                           tablat	equ	0xFF5
  9817                           prodh	equ	0xFF4
  9818                           prodl	equ	0xFF3
  9819                           intcon	equ	0xFF2
  9820                           intcon2	equ	0xFF1
  9821                           intcon3	equ	0xFF0
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           postdec1	equ	0xFE5
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           fsr2h	equ	0xFDA
  9830                           fsr2l	equ	0xFD9
  9831                           status	equ	0xFD8
  9832                           
  9833 ;; *************** function _algorithmTest *****************
  9834 ;; Defined at:
  9835 ;;		line 66 in file "Test.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;		None
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;		None
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;Total ram usage:        2 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:   10
  9856 ;; This function calls:
  9857 ;;		_lcdInst
  9858 ;;		_printf
  9859 ;; This function is called by:
  9860 ;;		_Test
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text39
  9865  002ECA                     __ptext39:
  9866                           	opt stack 0
  9867  002ECA                     _algorithmTest:
  9868                           	opt stack 19
  9869                           
  9870                           ;Test.c: 68: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9871                           
  9872                           ;incstack = 0
  9873  002ECA  0E01               	movlw	1
  9874  002ECC  EC5A  F020         	call	_lcdInst
  9875  002ED0  0E68               	movlw	104
  9876  002ED2  0100               	movlb	0	; () banked
  9877  002ED4  6FAB               	movwf	??_algorithmTest& (0+255),b
  9878  002ED6  0EE4               	movlw	228
  9879  002ED8                     u7047:
  9880  002ED8  2EE8               	decfsz	wreg,f,c
  9881  002EDA  D7FE               	bra	u7047
  9882  002EDC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9883  002EDE  D7FC               	bra	u7047
  9884  002EE0  F000               	nop	
  9885  002EE2  0E80               	movlw	128
  9886  002EE4  EC5A  F020         	call	_lcdInst
  9887                           
  9888                           ;Test.c: 69: printf("ALGORITHM TEST");
  9889  002EE8  0EEF               	movlw	low STR_70
  9890  002EEA  0100               	movlb	0	; () banked
  9891  002EEC  6F8E               	movwf	printf@f& (0+255),b
  9892  002EEE  0EFE               	movlw	high STR_70
  9893  002EF0  0100               	movlb	0	; () banked
  9894  002EF2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9895  002EF4  EC97  F008         	call	_printf	;wreg free
  9896                           
  9897                           ;Test.c: 70: lcdInst(0b11000000);;
  9898  002EF8  0EC0               	movlw	192
  9899  002EFA  EC5A  F020         	call	_lcdInst
  9900                           
  9901                           ;Test.c: 71: printf("PUSH TO START");
  9902  002EFE  0E28               	movlw	low STR_71
  9903  002F00  0100               	movlb	0	; () banked
  9904  002F02  6F8E               	movwf	printf@f& (0+255),b
  9905  002F04  0EFF               	movlw	high STR_71
  9906  002F06  0100               	movlb	0	; () banked
  9907  002F08  6F8F               	movwf	(printf@f+1)& (0+255),b
  9908  002F0A  EC97  F008         	call	_printf	;wreg free
  9909                           
  9910                           ;Test.c: 72: _delay((unsigned long)((100)*(32000000/4000.0)));
  9911  002F0E  0E05               	movlw	5
  9912  002F10  0100               	movlb	0	; () banked
  9913  002F12  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9914  002F14  0E0F               	movlw	15
  9915  002F16  0100               	movlb	0	; () banked
  9916  002F18  6FAB               	movwf	??_algorithmTest& (0+255),b
  9917  002F1A  0EF1               	movlw	241
  9918  002F1C                     u7057:
  9919  002F1C  2EE8               	decfsz	wreg,f,c
  9920  002F1E  D7FE               	bra	u7057
  9921  002F20  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9922  002F22  D7FC               	bra	u7057
  9923  002F24  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9924  002F26  D7FA               	bra	u7057
  9925  002F28                     l1019:
  9926  002F28  A281               	btfss	3969,1,c	;volatile
  9927  002F2A  D7FE               	goto	l1019
  9928  002F2C                     l1022:
  9929  002F2C  B281               	btfsc	3969,1,c	;volatile
  9930  002F2E  D7FE               	goto	l1022
  9931                           
  9932                           ;Test.c: 75: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9933  002F30  0E01               	movlw	1
  9934  002F32  EC5A  F020         	call	_lcdInst
  9935  002F36  0E68               	movlw	104
  9936  002F38  0100               	movlb	0	; () banked
  9937  002F3A  6FAB               	movwf	??_algorithmTest& (0+255),b
  9938  002F3C  0EE4               	movlw	228
  9939  002F3E                     u7067:
  9940  002F3E  2EE8               	decfsz	wreg,f,c
  9941  002F40  D7FE               	bra	u7067
  9942  002F42  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9943  002F44  D7FC               	bra	u7067
  9944  002F46  F000               	nop	
  9945  002F48  0E80               	movlw	128
  9946  002F4A  EC5A  F020         	call	_lcdInst
  9947                           
  9948                           ;Test.c: 80: printf("ALG1: 9 POPNOTAB");
  9949  002F4E  0EAF               	movlw	low STR_72
  9950  002F50  0100               	movlb	0	; () banked
  9951  002F52  6F8E               	movwf	printf@f& (0+255),b
  9952  002F54  0EFC               	movlw	high STR_72
  9953  002F56  0100               	movlb	0	; () banked
  9954  002F58  6F8F               	movwf	(printf@f+1)& (0+255),b
  9955  002F5A  EC97  F008         	call	_printf	;wreg free
  9956                           
  9957                           ;Test.c: 87: printf("ALG2: 12 CANS");
  9958  002F5E  0E0C               	movlw	low STR_73
  9959  002F60  0100               	movlb	0	; () banked
  9960  002F62  6F8E               	movwf	printf@f& (0+255),b
  9961  002F64  0EFF               	movlw	high STR_73
  9962  002F66  0100               	movlb	0	; () banked
  9963  002F68  6F8F               	movwf	(printf@f+1)& (0+255),b
  9964  002F6A  EC97  F008         	call	_printf	;wreg free
  9965                           
  9966                           ;Test.c: 96: printf("ALG3: 1 CAN");
  9967  002F6E  0E6C               	movlw	low STR_74
  9968  002F70  0100               	movlb	0	; () banked
  9969  002F72  6F8E               	movwf	printf@f& (0+255),b
  9970  002F74  0EFF               	movlw	high STR_74
  9971  002F76  0100               	movlb	0	; () banked
  9972  002F78  6F8F               	movwf	(printf@f+1)& (0+255),b
  9973  002F7A  EC97  F008         	call	_printf	;wreg free
  9974                           
  9975                           ;Test.c: 102: printf("ALG4: ALL CANS");
  9976  002F7E  0ED1               	movlw	low STR_75
  9977  002F80  0100               	movlb	0	; () banked
  9978  002F82  6F8E               	movwf	printf@f& (0+255),b
  9979  002F84  0EFE               	movlw	high STR_75
  9980  002F86  0100               	movlb	0	; () banked
  9981  002F88  6F8F               	movwf	(printf@f+1)& (0+255),b
  9982  002F8A  EC97  F008         	call	_printf	;wreg free
  9983                           
  9984                           ;Test.c: 107: printf("ALG5: NO CANS");
  9985  002F8E  0E1A               	movlw	low STR_76
  9986  002F90  0100               	movlb	0	; () banked
  9987  002F92  6F8E               	movwf	printf@f& (0+255),b
  9988  002F94  0EFF               	movlw	high STR_76
  9989  002F96  0100               	movlb	0	; () banked
  9990  002F98  6F8F               	movwf	(printf@f+1)& (0+255),b
  9991  002F9A  EC97  F008         	call	_printf	;wreg free
  9992  002F9E  0012               	return		;funcret
  9993  002FA0                     __end_of_algorithmTest:
  9994                           	opt stack 0
  9995                           tblptru	equ	0xFF8
  9996                           tblptrh	equ	0xFF7
  9997                           tblptrl	equ	0xFF6
  9998                           tablat	equ	0xFF5
  9999                           prodh	equ	0xFF4
 10000                           prodl	equ	0xFF3
 10001                           intcon	equ	0xFF2
 10002                           intcon2	equ	0xFF1
 10003                           intcon3	equ	0xFF0
 10004                           postinc0	equ	0xFEE
 10005                           wreg	equ	0xFE8
 10006                           postdec1	equ	0xFE5
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           fsr2h	equ	0xFDA
 10012                           fsr2l	equ	0xFD9
 10013                           status	equ	0xFD8
 10014                           
 10015 ;; *************** function _actuatorTest *****************
 10016 ;; Defined at:
 10017 ;;		line 152 in file "Test.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;  i               1   45[BANK0 ] unsigned char 
 10022 ;;  i               1   67[BANK0 ] unsigned char 
 10023 ;;  i               1   66[BANK0 ] unsigned char 
 10024 ;;  i               1   65[BANK0 ] unsigned char 
 10025 ;;  i               1   64[BANK0 ] unsigned char 
 10026 ;;  i               1   63[BANK0 ] unsigned char 
 10027 ;;  i               1   62[BANK0 ] unsigned char 
 10028 ;;  i               1   61[BANK0 ] unsigned char 
 10029 ;;  i               1   60[BANK0 ] unsigned char 
 10030 ;;  i               1   59[BANK0 ] unsigned char 
 10031 ;;  i               1   58[BANK0 ] unsigned char 
 10032 ;;  i               1   57[BANK0 ] unsigned char 
 10033 ;;  i               1   56[BANK0 ] unsigned char 
 10034 ;;  i               1   55[BANK0 ] unsigned char 
 10035 ;;  i               1   54[BANK0 ] unsigned char 
 10036 ;;  i               1   53[BANK0 ] unsigned char 
 10037 ;;  i               1   52[BANK0 ] unsigned char 
 10038 ;;  i               1   51[BANK0 ] unsigned char 
 10039 ;;  i               1   50[BANK0 ] unsigned char 
 10040 ;;  i               1   49[BANK0 ] unsigned char 
 10041 ;;  i               1   48[BANK0 ] unsigned char 
 10042 ;;  i               1   47[BANK0 ] unsigned char 
 10043 ;;  i               1   46[BANK0 ] unsigned char 
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      void 
 10046 ;; Registers used:
 10047 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;Total ram usage:       25 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:   10
 10060 ;; This function calls:
 10061 ;;		_lcdInst
 10062 ;;		_printf
 10063 ;;		_updateServoPosition
 10064 ;; This function is called by:
 10065 ;;		_Test
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           	psect	text40
 10070  0008B8                     __ptext40:
 10071                           	opt stack 0
 10072  0008B8                     _actuatorTest:
 10073                           	opt stack 19
 10074                           
 10075                           ;Test.c: 154: (INTCONbits.GIE = 1);
 10076                           
 10077                           ;incstack = 0
 10078  0008B8  8EF2               	bsf	intcon,7,c	;volatile
 10079                           
 10080                           ;Test.c: 155: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10081  0008BA  0E01               	movlw	1
 10082  0008BC  EC5A  F020         	call	_lcdInst
 10083  0008C0  0E68               	movlw	104
 10084  0008C2  0100               	movlb	0	; () banked
 10085  0008C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10086  0008C6  0EE4               	movlw	228
 10087  0008C8                     u7077:
 10088  0008C8  2EE8               	decfsz	wreg,f,c
 10089  0008CA  D7FE               	bra	u7077
 10090  0008CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10091  0008CE  D7FC               	bra	u7077
 10092  0008D0  F000               	nop	
 10093  0008D2  0E80               	movlw	128
 10094  0008D4  EC5A  F020         	call	_lcdInst
 10095                           
 10096                           ;Test.c: 156: printf("ACTUATORS");
 10097  0008D8  0E99               	movlw	low STR_83
 10098  0008DA  0100               	movlb	0	; () banked
 10099  0008DC  6F8E               	movwf	printf@f& (0+255),b
 10100  0008DE  0EFF               	movlw	high STR_83
 10101  0008E0  0100               	movlb	0	; () banked
 10102  0008E2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10103  0008E4  EC97  F008         	call	_printf	;wreg free
 10104                           
 10105                           ;Test.c: 157: lcdInst(0b11000000);;
 10106  0008E8  0EC0               	movlw	192
 10107  0008EA  EC5A  F020         	call	_lcdInst
 10108                           
 10109                           ;Test.c: 158: printf("PUSH TO START");
 10110  0008EE  0E28               	movlw	low STR_71
 10111  0008F0  0100               	movlb	0	; () banked
 10112  0008F2  6F8E               	movwf	printf@f& (0+255),b
 10113  0008F4  0EFF               	movlw	high STR_71
 10114  0008F6  0100               	movlb	0	; () banked
 10115  0008F8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10116  0008FA  EC97  F008         	call	_printf	;wreg free
 10117                           
 10118                           ;Test.c: 159: _delay((unsigned long)((100)*(32000000/4000.0)));
 10119  0008FE  0E05               	movlw	5
 10120  000900  0100               	movlb	0	; () banked
 10121  000902  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10122  000904  0E0F               	movlw	15
 10123  000906  0100               	movlb	0	; () banked
 10124  000908  6FAB               	movwf	??_actuatorTest& (0+255),b
 10125  00090A  0EF1               	movlw	241
 10126  00090C                     u7087:
 10127  00090C  2EE8               	decfsz	wreg,f,c
 10128  00090E  D7FE               	bra	u7087
 10129  000910  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10130  000912  D7FC               	bra	u7087
 10131  000914  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10132  000916  D7FA               	bra	u7087
 10133  000918                     l1046:
 10134  000918  A281               	btfss	3969,1,c	;volatile
 10135  00091A  D7FE               	goto	l1046
 10136  00091C                     l1049:
 10137  00091C  B281               	btfsc	3969,1,c	;volatile
 10138  00091E  D7FE               	goto	l1049
 10139                           
 10140                           ;Test.c: 162: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10141  000920  0E01               	movlw	1
 10142  000922  EC5A  F020         	call	_lcdInst
 10143  000926  0E68               	movlw	104
 10144  000928  0100               	movlb	0	; () banked
 10145  00092A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10146  00092C  0EE4               	movlw	228
 10147  00092E                     u7097:
 10148  00092E  2EE8               	decfsz	wreg,f,c
 10149  000930  D7FE               	bra	u7097
 10150  000932  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10151  000934  D7FC               	bra	u7097
 10152  000936  F000               	nop	
 10153  000938  0E80               	movlw	128
 10154  00093A  EC5A  F020         	call	_lcdInst
 10155                           
 10156                           ;Test.c: 167: printf("TST: DC MOTORS");
 10157  00093E  0EE0               	movlw	low STR_85
 10158  000940  0100               	movlb	0	; () banked
 10159  000942  6F8E               	movwf	printf@f& (0+255),b
 10160  000944  0EFE               	movlw	high STR_85
 10161  000946  0100               	movlb	0	; () banked
 10162  000948  6F8F               	movwf	(printf@f+1)& (0+255),b
 10163  00094A  EC97  F008         	call	_printf	;wreg free
 10164                           
 10165                           ;Test.c: 168: lcdInst(0b11000000);;
 10166  00094E  0EC0               	movlw	192
 10167  000950  EC5A  F020         	call	_lcdInst
 10168                           
 10169                           ;Test.c: 169: printf("PIN RA5 HIGH.");
 10170  000954  0EFE               	movlw	low STR_86
 10171  000956  0100               	movlb	0	; () banked
 10172  000958  6F8E               	movwf	printf@f& (0+255),b
 10173  00095A  0EFE               	movlw	high STR_86
 10174  00095C  0100               	movlb	0	; () banked
 10175  00095E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10176  000960  EC97  F008         	call	_printf	;wreg free
 10177                           
 10178                           ;Test.c: 170: LATAbits.LATA5 = 1;
 10179  000964  8A89               	bsf	3977,5,c	;volatile
 10180                           
 10181                           ;Test.c: 171: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10182  000966  0E00               	movlw	0
 10183  000968  0100               	movlb	0	; () banked
 10184  00096A  6FE5               	movwf	(_i+1)& (0+255),b
 10185  00096C  0E00               	movlw	0
 10186  00096E  6FE4               	movwf	_i& (0+255),b
 10187                           
 10188                           ; BSR set to: 0
 10189  000970  0100               	movlb	0	; () banked
 10190  000972  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10191  000974  D008               	goto	l6288
 10192  000976  0100               	movlb	0	; () banked
 10193  000978  51E5               	movf	(_i+1)& (0+255),w,b
 10194  00097A  E123               	bnz	l1053
 10195  00097C  0E05               	movlw	5
 10196  00097E  0100               	movlb	0	; () banked
 10197  000980  5DE4               	subwf	_i& (0+255),w,b
 10198  000982  B0D8               	btfsc	status,0,c
 10199  000984  D01E               	goto	l1053
 10200  000986                     l6288:
 10201                           
 10202                           ; BSR set to: 0
 10203  000986  0E00               	movlw	0
 10204  000988  0100               	movlb	0	; () banked
 10205  00098A  6FAD               	movwf	actuatorTest@i& (0+255),b
 10206  00098C                     l6290:
 10207                           
 10208                           ; BSR set to: 0
 10209  00098C  0E63               	movlw	99
 10210  00098E  0100               	movlb	0	; () banked
 10211  000990  65AD               	cpfsgt	actuatorTest@i& (0+255),b
 10212  000992  D001               	goto	l6294
 10213  000994  D00C               	goto	l6298
 10214  000996                     l6294:
 10215                           
 10216                           ; BSR set to: 0
 10217  000996  0E68               	movlw	104
 10218  000998  0100               	movlb	0	; () banked
 10219  00099A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10220  00099C  0EE4               	movlw	228
 10221  00099E                     u7107:
 10222  00099E  2EE8               	decfsz	wreg,f,c
 10223  0009A0  D7FE               	bra	u7107
 10224  0009A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10225  0009A4  D7FC               	bra	u7107
 10226  0009A6  F000               	nop	
 10227  0009A8  0100               	movlb	0	; () banked
 10228  0009AA  2BAD               	incf	actuatorTest@i& (0+255),f,b
 10229  0009AC  D7EF               	goto	l6290
 10230  0009AE                     l6298:
 10231                           
 10232                           ; BSR set to: 0
 10233  0009AE  0100               	movlb	0	; () banked
 10234  0009B0  4BE4               	infsnz	_i& (0+255),f,b
 10235  0009B2  2BE5               	incf	(_i+1)& (0+255),f,b
 10236                           
 10237                           ; BSR set to: 0
 10238  0009B4  0100               	movlb	0	; () banked
 10239  0009B6  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10240  0009B8  D7E6               	goto	l6288
 10241  0009BA  0100               	movlb	0	; () banked
 10242  0009BC  51E5               	movf	(_i+1)& (0+255),w,b
 10243  0009BE  E101               	bnz	u4800
 10244  0009C0  D7DD               	goto	L6
 10245  0009C2                     u4800:
 10246  0009C2                     l1053:
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;Test.c: 172: LATAbits.LATA5 = 0;
 10250  0009C2  9A89               	bcf	3977,5,c	;volatile
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10254  0009C4  0E01               	movlw	1
 10255  0009C6  EC5A  F020         	call	_lcdInst
 10256  0009CA  0E68               	movlw	104
 10257  0009CC  0100               	movlb	0	; () banked
 10258  0009CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10259  0009D0  0EE4               	movlw	228
 10260  0009D2                     u7117:
 10261  0009D2  2EE8               	decfsz	wreg,f,c
 10262  0009D4  D7FE               	bra	u7117
 10263  0009D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10264  0009D8  D7FC               	bra	u7117
 10265  0009DA  F000               	nop	
 10266  0009DC  0E80               	movlw	128
 10267  0009DE  EC5A  F020         	call	_lcdInst
 10268                           
 10269                           ;Test.c: 179: printf("TST: COND SOLN'D");
 10270  0009E2  0ED1               	movlw	low STR_87
 10271  0009E4  0100               	movlb	0	; () banked
 10272  0009E6  6F8E               	movwf	printf@f& (0+255),b
 10273  0009E8  0EFC               	movlw	high STR_87
 10274  0009EA  0100               	movlb	0	; () banked
 10275  0009EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10276  0009EE  EC97  F008         	call	_printf	;wreg free
 10277                           
 10278                           ;Test.c: 180: lcdInst(0b11000000);;
 10279  0009F2  0EC0               	movlw	192
 10280  0009F4  EC5A  F020         	call	_lcdInst
 10281                           
 10282                           ;Test.c: 181: printf("PIN RA3...");
 10283  0009F8  0E78               	movlw	low STR_88
 10284  0009FA  0100               	movlb	0	; () banked
 10285  0009FC  6F8E               	movwf	printf@f& (0+255),b
 10286  0009FE  0EFF               	movlw	high STR_88
 10287  000A00  0100               	movlb	0	; () banked
 10288  000A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 10289  000A04  EC97  F008         	call	_printf	;wreg free
 10290                           
 10291                           ;Test.c: 182: for(i=0;i<5;i++){
 10292  000A08  0E00               	movlw	0
 10293  000A0A  0100               	movlb	0	; () banked
 10294  000A0C  6FE5               	movwf	(_i+1)& (0+255),b
 10295  000A0E  0E00               	movlw	0
 10296  000A10  6FE4               	movwf	_i& (0+255),b
 10297                           
 10298                           ; BSR set to: 0
 10299  000A12  0100               	movlb	0	; () banked
 10300  000A14  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10301  000A16  D008               	goto	l1056
 10302  000A18  0100               	movlb	0	; () banked
 10303  000A1A  51E5               	movf	(_i+1)& (0+255),w,b
 10304  000A1C  E12C               	bnz	l1057
 10305  000A1E  0E05               	movlw	5
 10306  000A20  0100               	movlb	0	; () banked
 10307  000A22  5DE4               	subwf	_i& (0+255),w,b
 10308  000A24  B0D8               	btfsc	status,0,c
 10309  000A26  D027               	goto	l1057
 10310  000A28                     l1056:
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;Test.c: 183: LATAbits.LATA3 = 0;
 10314  000A28  9689               	bcf	3977,3,c	;volatile
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;Test.c: 184: _delay((unsigned long)((100)*(32000000/4000.0)));
 10318  000A2A  0E05               	movlw	5
 10319  000A2C  0100               	movlb	0	; () banked
 10320  000A2E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10321  000A30  0E0F               	movlw	15
 10322  000A32  0100               	movlb	0	; () banked
 10323  000A34  6FAB               	movwf	??_actuatorTest& (0+255),b
 10324  000A36  0EF1               	movlw	241
 10325  000A38                     u7127:
 10326  000A38  2EE8               	decfsz	wreg,f,c
 10327  000A3A  D7FE               	bra	u7127
 10328  000A3C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10329  000A3E  D7FC               	bra	u7127
 10330  000A40  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10331  000A42  D7FA               	bra	u7127
 10332                           
 10333                           ;Test.c: 185: LATAbits.LATA3 = ~0;
 10334  000A44  8689               	bsf	3977,3,c	;volatile
 10335                           
 10336                           ;Test.c: 186: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10337  000A46  0E25               	movlw	37
 10338  000A48  0100               	movlb	0	; () banked
 10339  000A4A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10340  000A4C  0E87               	movlw	135
 10341  000A4E  0100               	movlb	0	; () banked
 10342  000A50  6FAB               	movwf	??_actuatorTest& (0+255),b
 10343  000A52  0E8B               	movlw	139
 10344  000A54                     u7137:
 10345  000A54  2EE8               	decfsz	wreg,f,c
 10346  000A56  D7FE               	bra	u7137
 10347  000A58  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10348  000A5A  D7FC               	bra	u7137
 10349  000A5C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10350  000A5E  D7FA               	bra	u7137
 10351  000A60  D000               	nop2	
 10352  000A62  0100               	movlb	0	; () banked
 10353  000A64  4BE4               	infsnz	_i& (0+255),f,b
 10354  000A66  2BE5               	incf	(_i+1)& (0+255),f,b
 10355  000A68  0100               	movlb	0	; () banked
 10356  000A6A  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10357  000A6C  D7DD               	goto	l1056
 10358  000A6E  0100               	movlb	0	; () banked
 10359  000A70  51E5               	movf	(_i+1)& (0+255),w,b
 10360  000A72  E101               	bnz	u4820
 10361  000A74  D7D4               	goto	L7
 10362  000A76                     u4820:
 10363  000A76                     l1057:
 10364                           
 10365                           ; BSR set to: 0
 10366                           ;Test.c: 187: }
 10367                           ;Test.c: 188: LATAbits.LATA3 = ~0;
 10368  000A76  8689               	bsf	3977,3,c	;volatile
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;Test.c: 189: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10372  000A78  0E01               	movlw	1
 10373  000A7A  EC5A  F020         	call	_lcdInst
 10374  000A7E  0E68               	movlw	104
 10375  000A80  0100               	movlb	0	; () banked
 10376  000A82  6FAB               	movwf	??_actuatorTest& (0+255),b
 10377  000A84  0EE4               	movlw	228
 10378  000A86                     u7147:
 10379  000A86  2EE8               	decfsz	wreg,f,c
 10380  000A88  D7FE               	bra	u7147
 10381  000A8A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10382  000A8C  D7FC               	bra	u7147
 10383  000A8E  F000               	nop	
 10384  000A90  0E80               	movlw	128
 10385  000A92  EC5A  F020         	call	_lcdInst
 10386                           
 10387                           ;Test.c: 195: printf("TST: PUSH SOLN'D");
 10388  000A96  0EE2               	movlw	low STR_89
 10389  000A98  0100               	movlb	0	; () banked
 10390  000A9A  6F8E               	movwf	printf@f& (0+255),b
 10391  000A9C  0EFC               	movlw	high STR_89
 10392  000A9E  0100               	movlb	0	; () banked
 10393  000AA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10394  000AA2  EC97  F008         	call	_printf	;wreg free
 10395                           
 10396                           ;Test.c: 196: lcdInst(0b11000000);;
 10397  000AA6  0EC0               	movlw	192
 10398  000AA8  EC5A  F020         	call	_lcdInst
 10399                           
 10400                           ;Test.c: 197: printf("PIN RA4...");
 10401  000AAC  0E83               	movlw	low STR_90
 10402  000AAE  0100               	movlb	0	; () banked
 10403  000AB0  6F8E               	movwf	printf@f& (0+255),b
 10404  000AB2  0EFF               	movlw	high STR_90
 10405  000AB4  0100               	movlb	0	; () banked
 10406  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10407  000AB8  EC97  F008         	call	_printf	;wreg free
 10408                           
 10409                           ;Test.c: 198: for(i=0;i<5;i++){
 10410  000ABC  0E00               	movlw	0
 10411  000ABE  0100               	movlb	0	; () banked
 10412  000AC0  6FE5               	movwf	(_i+1)& (0+255),b
 10413  000AC2  0E00               	movlw	0
 10414  000AC4  6FE4               	movwf	_i& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417  000AC6  0100               	movlb	0	; () banked
 10418  000AC8  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10419  000ACA  D008               	goto	l1058
 10420  000ACC  0100               	movlb	0	; () banked
 10421  000ACE  51E5               	movf	(_i+1)& (0+255),w,b
 10422  000AD0  E12C               	bnz	l1059
 10423  000AD2  0E05               	movlw	5
 10424  000AD4  0100               	movlb	0	; () banked
 10425  000AD6  5DE4               	subwf	_i& (0+255),w,b
 10426  000AD8  B0D8               	btfsc	status,0,c
 10427  000ADA  D027               	goto	l1059
 10428  000ADC                     l1058:
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;Test.c: 199: LATAbits.LATA4 = 0;
 10432  000ADC  9889               	bcf	3977,4,c	;volatile
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;Test.c: 200: _delay((unsigned long)((100)*(32000000/4000.0)));
 10436  000ADE  0E05               	movlw	5
 10437  000AE0  0100               	movlb	0	; () banked
 10438  000AE2  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10439  000AE4  0E0F               	movlw	15
 10440  000AE6  0100               	movlb	0	; () banked
 10441  000AE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10442  000AEA  0EF1               	movlw	241
 10443  000AEC                     u7157:
 10444  000AEC  2EE8               	decfsz	wreg,f,c
 10445  000AEE  D7FE               	bra	u7157
 10446  000AF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10447  000AF2  D7FC               	bra	u7157
 10448  000AF4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10449  000AF6  D7FA               	bra	u7157
 10450                           
 10451                           ;Test.c: 201: LATAbits.LATA4 = ~0;
 10452  000AF8  8889               	bsf	3977,4,c	;volatile
 10453                           
 10454                           ;Test.c: 202: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10455  000AFA  0E25               	movlw	37
 10456  000AFC  0100               	movlb	0	; () banked
 10457  000AFE  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10458  000B00  0E87               	movlw	135
 10459  000B02  0100               	movlb	0	; () banked
 10460  000B04  6FAB               	movwf	??_actuatorTest& (0+255),b
 10461  000B06  0E8B               	movlw	139
 10462  000B08                     u7167:
 10463  000B08  2EE8               	decfsz	wreg,f,c
 10464  000B0A  D7FE               	bra	u7167
 10465  000B0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10466  000B0E  D7FC               	bra	u7167
 10467  000B10  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10468  000B12  D7FA               	bra	u7167
 10469  000B14  D000               	nop2	
 10470  000B16  0100               	movlb	0	; () banked
 10471  000B18  4BE4               	infsnz	_i& (0+255),f,b
 10472  000B1A  2BE5               	incf	(_i+1)& (0+255),f,b
 10473  000B1C  0100               	movlb	0	; () banked
 10474  000B1E  BFE5               	btfsc	(_i+1)& (0+255),7,b
 10475  000B20  D7DD               	goto	l1058
 10476  000B22  0100               	movlb	0	; () banked
 10477  000B24  51E5               	movf	(_i+1)& (0+255),w,b
 10478  000B26  E101               	bnz	u4840
 10479  000B28  D7D4               	goto	L8
 10480  000B2A                     u4840:
 10481  000B2A                     l1059:
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;Test.c: 203: }
 10485                           ;Test.c: 204: LATAbits.LATA4 = ~0;
 10486  000B2A  8889               	bsf	3977,4,c	;volatile
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;Test.c: 205: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10490  000B2C  0E01               	movlw	1
 10491  000B2E  EC5A  F020         	call	_lcdInst
 10492  000B32  0E68               	movlw	104
 10493  000B34  0100               	movlb	0	; () banked
 10494  000B36  6FAB               	movwf	??_actuatorTest& (0+255),b
 10495  000B38  0EE4               	movlw	228
 10496  000B3A                     u7177:
 10497  000B3A  2EE8               	decfsz	wreg,f,c
 10498  000B3C  D7FE               	bra	u7177
 10499  000B3E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10500  000B40  D7FC               	bra	u7177
 10501  000B42  F000               	nop	
 10502  000B44  0E80               	movlw	128
 10503  000B46  EC5A  F020         	call	_lcdInst
 10504                           
 10505                           ;Test.c: 208: machine_state = Sorting_state;
 10506  000B4A  0E01               	movlw	1
 10507  000B4C  0100               	movlb	0	; () banked
 10508  000B4E  6FFC               	movwf	_machine_state& (0+255),b
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;Test.c: 209: was_low_1 = 0;
 10512  000B50  0E00               	movlw	0
 10513  000B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 10514  000B54  0E00               	movlw	0
 10515  000B56  6E79               	movwf	_was_low_1,c	;volatile
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;Test.c: 210: was_low_1 = 0;
 10519  000B58  0E00               	movlw	0
 10520  000B5A  6E7A               	movwf	_was_low_1+1,c	;volatile
 10521  000B5C  0E00               	movlw	0
 10522  000B5E  6E79               	movwf	_was_low_1,c	;volatile
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;Test.c: 217: printf("TST: PAN SERVO");
 10526  000B60  0EC2               	movlw	low STR_91
 10527  000B62  0100               	movlb	0	; () banked
 10528  000B64  6F8E               	movwf	printf@f& (0+255),b
 10529  000B66  0EFE               	movlw	high STR_91
 10530  000B68  0100               	movlb	0	; () banked
 10531  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10532  000B6C  EC97  F008         	call	_printf	;wreg free
 10533                           
 10534                           ;Test.c: 218: lcdInst(0b11000000);;
 10535  000B70  0EC0               	movlw	192
 10536  000B72  EC5A  F020         	call	_lcdInst
 10537                           
 10538                           ;Test.c: 219: printf("MIDDLE -- 2s    ");
 10539  000B76  0E5A               	movlw	low STR_92
 10540  000B78  0100               	movlb	0	; () banked
 10541  000B7A  6F8E               	movwf	printf@f& (0+255),b
 10542  000B7C  0EFC               	movlw	high STR_92
 10543  000B7E  0100               	movlb	0	; () banked
 10544  000B80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10545  000B82  EC97  F008         	call	_printf	;wreg free
 10546                           
 10547                           ;Test.c: 220: updateServoPosition(1500, 1);
 10548  000B86  0E05               	movlw	5
 10549  000B88  0100               	movlb	0	; () banked
 10550  000B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10551  000B8C  0EDC               	movlw	220
 10552  000B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10553  000B90  0E00               	movlw	0
 10554  000B92  0100               	movlb	0	; () banked
 10555  000B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10556  000B96  0E01               	movlw	1
 10557  000B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10558  000B9A  ECC9  F01A         	call	_updateServoPosition	;wreg free
 10559                           
 10560                           ;Test.c: 221: TMR1ON = 1;
 10561  000B9E  80CD               	bsf	4045,0,c	;volatile
 10562                           
 10563                           ;Test.c: 222: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10564  000BA0  0E00               	movlw	0
 10565  000BA2  0100               	movlb	0	; () banked
 10566  000BA4  6FAE               	movwf	actuatorTest@i_1566& (0+255),b
 10567  000BA6                     l6374:
 10568                           
 10569                           ; BSR set to: 0
 10570  000BA6  0E63               	movlw	99
 10571  000BA8  0100               	movlb	0	; () banked
 10572  000BAA  65AE               	cpfsgt	actuatorTest@i_1566& (0+255),b
 10573  000BAC  D001               	goto	l6378
 10574  000BAE  D00C               	goto	l6382
 10575  000BB0                     l6378:
 10576                           
 10577                           ; BSR set to: 0
 10578  000BB0  0E68               	movlw	104
 10579  000BB2  0100               	movlb	0	; () banked
 10580  000BB4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10581  000BB6  0EE4               	movlw	228
 10582  000BB8                     u7187:
 10583  000BB8  2EE8               	decfsz	wreg,f,c
 10584  000BBA  D7FE               	bra	u7187
 10585  000BBC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10586  000BBE  D7FC               	bra	u7187
 10587  000BC0  F000               	nop	
 10588  000BC2  0100               	movlb	0	; () banked
 10589  000BC4  2BAE               	incf	actuatorTest@i_1566& (0+255),f,b
 10590  000BC6  D7EF               	goto	l6374
 10591  000BC8                     l6382:
 10592                           
 10593                           ; BSR set to: 0
 10594  000BC8  0E00               	movlw	0
 10595  000BCA  0100               	movlb	0	; () banked
 10596  000BCC  6FAF               	movwf	actuatorTest@i_1567& (0+255),b
 10597  000BCE                     l6384:
 10598                           
 10599                           ; BSR set to: 0
 10600  000BCE  0E63               	movlw	99
 10601  000BD0  0100               	movlb	0	; () banked
 10602  000BD2  65AF               	cpfsgt	actuatorTest@i_1567& (0+255),b
 10603  000BD4  D001               	goto	l6388
 10604  000BD6  D00C               	goto	l6392
 10605  000BD8                     l6388:
 10606                           
 10607                           ; BSR set to: 0
 10608  000BD8  0E68               	movlw	104
 10609  000BDA  0100               	movlb	0	; () banked
 10610  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10611  000BDE  0EE4               	movlw	228
 10612  000BE0                     u7197:
 10613  000BE0  2EE8               	decfsz	wreg,f,c
 10614  000BE2  D7FE               	bra	u7197
 10615  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10616  000BE6  D7FC               	bra	u7197
 10617  000BE8  F000               	nop	
 10618  000BEA  0100               	movlb	0	; () banked
 10619  000BEC  2BAF               	incf	actuatorTest@i_1567& (0+255),f,b
 10620  000BEE  D7EF               	goto	l6384
 10621  000BF0                     l6392:
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;Test.c: 224: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10625  000BF0  0E80               	movlw	128
 10626  000BF2  EC5A  F020         	call	_lcdInst
 10627  000BF6  0EC0               	movlw	192
 10628  000BF8  EC5A  F020         	call	_lcdInst
 10629                           
 10630                           ;Test.c: 225: printf("RIGHT -- 2s     ");
 10631  000BFC  0E49               	movlw	low STR_93
 10632  000BFE  0100               	movlb	0	; () banked
 10633  000C00  6F8E               	movwf	printf@f& (0+255),b
 10634  000C02  0EFC               	movlw	high STR_93
 10635  000C04  0100               	movlb	0	; () banked
 10636  000C06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10637  000C08  EC97  F008         	call	_printf	;wreg free
 10638                           
 10639                           ;Test.c: 226: updateServoPosition(1000, 1);
 10640  000C0C  0E03               	movlw	3
 10641  000C0E  0100               	movlb	0	; () banked
 10642  000C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10643  000C12  0EE8               	movlw	232
 10644  000C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10645  000C16  0E00               	movlw	0
 10646  000C18  0100               	movlb	0	; () banked
 10647  000C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10648  000C1C  0E01               	movlw	1
 10649  000C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10650  000C20  ECC9  F01A         	call	_updateServoPosition	;wreg free
 10651                           
 10652                           ;Test.c: 227: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10653  000C24  0E00               	movlw	0
 10654  000C26  0100               	movlb	0	; () banked
 10655  000C28  6FB0               	movwf	actuatorTest@i_1569& (0+255),b
 10656  000C2A                     l6400:
 10657                           
 10658                           ; BSR set to: 0
 10659  000C2A  0E63               	movlw	99
 10660  000C2C  0100               	movlb	0	; () banked
 10661  000C2E  65B0               	cpfsgt	actuatorTest@i_1569& (0+255),b
 10662  000C30  D001               	goto	l6404
 10663  000C32  D00C               	goto	l6408
 10664  000C34                     l6404:
 10665                           
 10666                           ; BSR set to: 0
 10667  000C34  0E68               	movlw	104
 10668  000C36  0100               	movlb	0	; () banked
 10669  000C38  6FAB               	movwf	??_actuatorTest& (0+255),b
 10670  000C3A  0EE4               	movlw	228
 10671  000C3C                     u7207:
 10672  000C3C  2EE8               	decfsz	wreg,f,c
 10673  000C3E  D7FE               	bra	u7207
 10674  000C40  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10675  000C42  D7FC               	bra	u7207
 10676  000C44  F000               	nop	
 10677  000C46  0100               	movlb	0	; () banked
 10678  000C48  2BB0               	incf	actuatorTest@i_1569& (0+255),f,b
 10679  000C4A  D7EF               	goto	l6400
 10680  000C4C                     l6408:
 10681                           
 10682                           ; BSR set to: 0
 10683  000C4C  0E00               	movlw	0
 10684  000C4E  0100               	movlb	0	; () banked
 10685  000C50  6FB1               	movwf	actuatorTest@i_1570& (0+255),b
 10686  000C52                     l6410:
 10687                           
 10688                           ; BSR set to: 0
 10689  000C52  0E63               	movlw	99
 10690  000C54  0100               	movlb	0	; () banked
 10691  000C56  65B1               	cpfsgt	actuatorTest@i_1570& (0+255),b
 10692  000C58  D001               	goto	l6414
 10693  000C5A  D00C               	goto	l6418
 10694  000C5C                     l6414:
 10695                           
 10696                           ; BSR set to: 0
 10697  000C5C  0E68               	movlw	104
 10698  000C5E  0100               	movlb	0	; () banked
 10699  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 10700  000C62  0EE4               	movlw	228
 10701  000C64                     u7217:
 10702  000C64  2EE8               	decfsz	wreg,f,c
 10703  000C66  D7FE               	bra	u7217
 10704  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10705  000C6A  D7FC               	bra	u7217
 10706  000C6C  F000               	nop	
 10707  000C6E  0100               	movlb	0	; () banked
 10708  000C70  2BB1               	incf	actuatorTest@i_1570& (0+255),f,b
 10709  000C72  D7EF               	goto	l6410
 10710  000C74                     l6418:
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;Test.c: 229: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10714  000C74  0E80               	movlw	128
 10715  000C76  EC5A  F020         	call	_lcdInst
 10716  000C7A  0EC0               	movlw	192
 10717  000C7C  EC5A  F020         	call	_lcdInst
 10718                           
 10719                           ;Test.c: 230: printf("LEFT -- 2s      ");
 10720  000C80  0E27               	movlw	low STR_94
 10721  000C82  0100               	movlb	0	; () banked
 10722  000C84  6F8E               	movwf	printf@f& (0+255),b
 10723  000C86  0EFC               	movlw	high STR_94
 10724  000C88  0100               	movlb	0	; () banked
 10725  000C8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10726  000C8C  EC97  F008         	call	_printf	;wreg free
 10727                           
 10728                           ;Test.c: 231: updateServoPosition(2000, 1);
 10729  000C90  0E07               	movlw	7
 10730  000C92  0100               	movlb	0	; () banked
 10731  000C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10732  000C96  0ED0               	movlw	208
 10733  000C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10734  000C9A  0E00               	movlw	0
 10735  000C9C  0100               	movlb	0	; () banked
 10736  000C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10737  000CA0  0E01               	movlw	1
 10738  000CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10739  000CA4  ECC9  F01A         	call	_updateServoPosition	;wreg free
 10740                           
 10741                           ;Test.c: 232: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10742  000CA8  0E00               	movlw	0
 10743  000CAA  0100               	movlb	0	; () banked
 10744  000CAC  6FB2               	movwf	actuatorTest@i_1572& (0+255),b
 10745  000CAE                     l6426:
 10746                           
 10747                           ; BSR set to: 0
 10748  000CAE  0E63               	movlw	99
 10749  000CB0  0100               	movlb	0	; () banked
 10750  000CB2  65B2               	cpfsgt	actuatorTest@i_1572& (0+255),b
 10751  000CB4  D001               	goto	l6430
 10752  000CB6  D00C               	goto	l6434
 10753  000CB8                     l6430:
 10754                           
 10755                           ; BSR set to: 0
 10756  000CB8  0E68               	movlw	104
 10757  000CBA  0100               	movlb	0	; () banked
 10758  000CBC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10759  000CBE  0EE4               	movlw	228
 10760  000CC0                     u7227:
 10761  000CC0  2EE8               	decfsz	wreg,f,c
 10762  000CC2  D7FE               	bra	u7227
 10763  000CC4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10764  000CC6  D7FC               	bra	u7227
 10765  000CC8  F000               	nop	
 10766  000CCA  0100               	movlb	0	; () banked
 10767  000CCC  2BB2               	incf	actuatorTest@i_1572& (0+255),f,b
 10768  000CCE  D7EF               	goto	l6426
 10769  000CD0                     l6434:
 10770                           
 10771                           ; BSR set to: 0
 10772  000CD0  0E00               	movlw	0
 10773  000CD2  0100               	movlb	0	; () banked
 10774  000CD4  6FB3               	movwf	actuatorTest@i_1573& (0+255),b
 10775  000CD6                     l6436:
 10776                           
 10777                           ; BSR set to: 0
 10778  000CD6  0E63               	movlw	99
 10779  000CD8  0100               	movlb	0	; () banked
 10780  000CDA  65B3               	cpfsgt	actuatorTest@i_1573& (0+255),b
 10781  000CDC  D001               	goto	l6440
 10782  000CDE  D00C               	goto	l6444
 10783  000CE0                     l6440:
 10784                           
 10785                           ; BSR set to: 0
 10786  000CE0  0E68               	movlw	104
 10787  000CE2  0100               	movlb	0	; () banked
 10788  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10789  000CE6  0EE4               	movlw	228
 10790  000CE8                     u7237:
 10791  000CE8  2EE8               	decfsz	wreg,f,c
 10792  000CEA  D7FE               	bra	u7237
 10793  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10794  000CEE  D7FC               	bra	u7237
 10795  000CF0  F000               	nop	
 10796  000CF2  0100               	movlb	0	; () banked
 10797  000CF4  2BB3               	incf	actuatorTest@i_1573& (0+255),f,b
 10798  000CF6  D7EF               	goto	l6436
 10799  000CF8                     l6444:
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;Test.c: 234: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10803  000CF8  0E80               	movlw	128
 10804  000CFA  EC5A  F020         	call	_lcdInst
 10805  000CFE  0EC0               	movlw	192
 10806  000D00  EC5A  F020         	call	_lcdInst
 10807                           
 10808                           ;Test.c: 235: printf("MID-LEFT -- 2s  ");
 10809  000D04  0E7C               	movlw	low STR_95
 10810  000D06  0100               	movlb	0	; () banked
 10811  000D08  6F8E               	movwf	printf@f& (0+255),b
 10812  000D0A  0EFC               	movlw	high STR_95
 10813  000D0C  0100               	movlb	0	; () banked
 10814  000D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10815  000D10  EC97  F008         	call	_printf	;wreg free
 10816                           
 10817                           ;Test.c: 236: updateServoPosition(1666, 1);
 10818  000D14  0E06               	movlw	6
 10819  000D16  0100               	movlb	0	; () banked
 10820  000D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10821  000D1A  0E82               	movlw	130
 10822  000D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10823  000D1E  0E00               	movlw	0
 10824  000D20  0100               	movlb	0	; () banked
 10825  000D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10826  000D24  0E01               	movlw	1
 10827  000D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10828  000D28  ECC9  F01A         	call	_updateServoPosition	;wreg free
 10829                           
 10830                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10831  000D2C  0E00               	movlw	0
 10832  000D2E  0100               	movlb	0	; () banked
 10833  000D30  6FB4               	movwf	actuatorTest@i_1575& (0+255),b
 10834  000D32                     l6452:
 10835                           
 10836                           ; BSR set to: 0
 10837  000D32  0E63               	movlw	99
 10838  000D34  0100               	movlb	0	; () banked
 10839  000D36  65B4               	cpfsgt	actuatorTest@i_1575& (0+255),b
 10840  000D38  D001               	goto	l6456
 10841  000D3A  D00C               	goto	l6460
 10842  000D3C                     l6456:
 10843                           
 10844                           ; BSR set to: 0
 10845  000D3C  0E68               	movlw	104
 10846  000D3E  0100               	movlb	0	; () banked
 10847  000D40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10848  000D42  0EE4               	movlw	228
 10849  000D44                     u7247:
 10850  000D44  2EE8               	decfsz	wreg,f,c
 10851  000D46  D7FE               	bra	u7247
 10852  000D48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10853  000D4A  D7FC               	bra	u7247
 10854  000D4C  F000               	nop	
 10855  000D4E  0100               	movlb	0	; () banked
 10856  000D50  2BB4               	incf	actuatorTest@i_1575& (0+255),f,b
 10857  000D52  D7EF               	goto	l6452
 10858  000D54                     l6460:
 10859                           
 10860                           ; BSR set to: 0
 10861  000D54  0E00               	movlw	0
 10862  000D56  0100               	movlb	0	; () banked
 10863  000D58  6FB5               	movwf	actuatorTest@i_1576& (0+255),b
 10864  000D5A                     l6462:
 10865                           
 10866                           ; BSR set to: 0
 10867  000D5A  0E63               	movlw	99
 10868  000D5C  0100               	movlb	0	; () banked
 10869  000D5E  65B5               	cpfsgt	actuatorTest@i_1576& (0+255),b
 10870  000D60  D001               	goto	l6466
 10871  000D62  D00C               	goto	l6470
 10872  000D64                     l6466:
 10873                           
 10874                           ; BSR set to: 0
 10875  000D64  0E68               	movlw	104
 10876  000D66  0100               	movlb	0	; () banked
 10877  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 10878  000D6A  0EE4               	movlw	228
 10879  000D6C                     u7257:
 10880  000D6C  2EE8               	decfsz	wreg,f,c
 10881  000D6E  D7FE               	bra	u7257
 10882  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10883  000D72  D7FC               	bra	u7257
 10884  000D74  F000               	nop	
 10885  000D76  0100               	movlb	0	; () banked
 10886  000D78  2BB5               	incf	actuatorTest@i_1576& (0+255),f,b
 10887  000D7A  D7EF               	goto	l6462
 10888  000D7C                     l6470:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10892  000D7C  0E80               	movlw	128
 10893  000D7E  EC5A  F020         	call	_lcdInst
 10894  000D82  0EC0               	movlw	192
 10895  000D84  EC5A  F020         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 240: printf("MID-RIGHT -- 2s ");
 10898  000D88  0E8D               	movlw	low STR_96
 10899  000D8A  0100               	movlb	0	; () banked
 10900  000D8C  6F8E               	movwf	printf@f& (0+255),b
 10901  000D8E  0EFC               	movlw	high STR_96
 10902  000D90  0100               	movlb	0	; () banked
 10903  000D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  000D94  EC97  F008         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 241: updateServoPosition(1333, 1);
 10907  000D98  0E05               	movlw	5
 10908  000D9A  0100               	movlb	0	; () banked
 10909  000D9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10910  000D9E  0E35               	movlw	53
 10911  000DA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10912  000DA2  0E00               	movlw	0
 10913  000DA4  0100               	movlb	0	; () banked
 10914  000DA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10915  000DA8  0E01               	movlw	1
 10916  000DAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10917  000DAC  ECC9  F01A         	call	_updateServoPosition	;wreg free
 10918                           
 10919                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10920  000DB0  0E00               	movlw	0
 10921  000DB2  0100               	movlb	0	; () banked
 10922  000DB4  6FB6               	movwf	actuatorTest@i_1578& (0+255),b
 10923  000DB6                     l6478:
 10924                           
 10925                           ; BSR set to: 0
 10926  000DB6  0E63               	movlw	99
 10927  000DB8  0100               	movlb	0	; () banked
 10928  000DBA  65B6               	cpfsgt	actuatorTest@i_1578& (0+255),b
 10929  000DBC  D001               	goto	l6482
 10930  000DBE  D00C               	goto	l6486
 10931  000DC0                     l6482:
 10932                           
 10933                           ; BSR set to: 0
 10934  000DC0  0E68               	movlw	104
 10935  000DC2  0100               	movlb	0	; () banked
 10936  000DC4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10937  000DC6  0EE4               	movlw	228
 10938  000DC8                     u7267:
 10939  000DC8  2EE8               	decfsz	wreg,f,c
 10940  000DCA  D7FE               	bra	u7267
 10941  000DCC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10942  000DCE  D7FC               	bra	u7267
 10943  000DD0  F000               	nop	
 10944  000DD2  0100               	movlb	0	; () banked
 10945  000DD4  2BB6               	incf	actuatorTest@i_1578& (0+255),f,b
 10946  000DD6  D7EF               	goto	l6478
 10947  000DD8                     l6486:
 10948                           
 10949                           ; BSR set to: 0
 10950  000DD8  0E00               	movlw	0
 10951  000DDA  0100               	movlb	0	; () banked
 10952  000DDC  6FB7               	movwf	actuatorTest@i_1579& (0+255),b
 10953  000DDE                     l6488:
 10954                           
 10955                           ; BSR set to: 0
 10956  000DDE  0E63               	movlw	99
 10957  000DE0  0100               	movlb	0	; () banked
 10958  000DE2  65B7               	cpfsgt	actuatorTest@i_1579& (0+255),b
 10959  000DE4  D001               	goto	l6492
 10960  000DE6  D00C               	goto	l6496
 10961  000DE8                     l6492:
 10962                           
 10963                           ; BSR set to: 0
 10964  000DE8  0E68               	movlw	104
 10965  000DEA  0100               	movlb	0	; () banked
 10966  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10967  000DEE  0EE4               	movlw	228
 10968  000DF0                     u7277:
 10969  000DF0  2EE8               	decfsz	wreg,f,c
 10970  000DF2  D7FE               	bra	u7277
 10971  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10972  000DF6  D7FC               	bra	u7277
 10973  000DF8  F000               	nop	
 10974  000DFA  0100               	movlb	0	; () banked
 10975  000DFC  2BB7               	incf	actuatorTest@i_1579& (0+255),f,b
 10976  000DFE  D7EF               	goto	l6488
 10977  000E00                     l6496:
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10981  000E00  0E80               	movlw	128
 10982  000E02  EC5A  F020         	call	_lcdInst
 10983  000E06  0EC0               	movlw	192
 10984  000E08  EC5A  F020         	call	_lcdInst
 10985                           
 10986                           ;Test.c: 245: printf("MID -- 2s       ");
 10987  000E0C  0E05               	movlw	low STR_97
 10988  000E0E  0100               	movlb	0	; () banked
 10989  000E10  6F8E               	movwf	printf@f& (0+255),b
 10990  000E12  0EFC               	movlw	high STR_97
 10991  000E14  0100               	movlb	0	; () banked
 10992  000E16  6F8F               	movwf	(printf@f+1)& (0+255),b
 10993  000E18  EC97  F008         	call	_printf	;wreg free
 10994                           
 10995                           ;Test.c: 246: updateServoPosition(1500, 1);
 10996  000E1C  0E05               	movlw	5
 10997  000E1E  0100               	movlb	0	; () banked
 10998  000E20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10999  000E22  0EDC               	movlw	220
 11000  000E24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11001  000E26  0E00               	movlw	0
 11002  000E28  0100               	movlb	0	; () banked
 11003  000E2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11004  000E2C  0E01               	movlw	1
 11005  000E2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11006  000E30  ECC9  F01A         	call	_updateServoPosition	;wreg free
 11007                           
 11008                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11009  000E34  0E00               	movlw	0
 11010  000E36  0100               	movlb	0	; () banked
 11011  000E38  6FB8               	movwf	actuatorTest@i_1581& (0+255),b
 11012  000E3A                     l6504:
 11013                           
 11014                           ; BSR set to: 0
 11015  000E3A  0E63               	movlw	99
 11016  000E3C  0100               	movlb	0	; () banked
 11017  000E3E  65B8               	cpfsgt	actuatorTest@i_1581& (0+255),b
 11018  000E40  D001               	goto	l6508
 11019  000E42  D00C               	goto	l6512
 11020  000E44                     l6508:
 11021                           
 11022                           ; BSR set to: 0
 11023  000E44  0E68               	movlw	104
 11024  000E46  0100               	movlb	0	; () banked
 11025  000E48  6FAB               	movwf	??_actuatorTest& (0+255),b
 11026  000E4A  0EE4               	movlw	228
 11027  000E4C                     u7287:
 11028  000E4C  2EE8               	decfsz	wreg,f,c
 11029  000E4E  D7FE               	bra	u7287
 11030  000E50  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11031  000E52  D7FC               	bra	u7287
 11032  000E54  F000               	nop	
 11033  000E56  0100               	movlb	0	; () banked
 11034  000E58  2BB8               	incf	actuatorTest@i_1581& (0+255),f,b
 11035  000E5A  D7EF               	goto	l6504
 11036  000E5C                     l6512:
 11037                           
 11038                           ; BSR set to: 0
 11039  000E5C  0E00               	movlw	0
 11040  000E5E  0100               	movlb	0	; () banked
 11041  000E60  6FB9               	movwf	actuatorTest@i_1582& (0+255),b
 11042  000E62                     l6514:
 11043                           
 11044                           ; BSR set to: 0
 11045  000E62  0E63               	movlw	99
 11046  000E64  0100               	movlb	0	; () banked
 11047  000E66  65B9               	cpfsgt	actuatorTest@i_1582& (0+255),b
 11048  000E68  D001               	goto	l6518
 11049  000E6A  D00C               	goto	l1083
 11050  000E6C                     l6518:
 11051                           
 11052                           ; BSR set to: 0
 11053  000E6C  0E68               	movlw	104
 11054  000E6E  0100               	movlb	0	; () banked
 11055  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 11056  000E72  0EE4               	movlw	228
 11057  000E74                     u7297:
 11058  000E74  2EE8               	decfsz	wreg,f,c
 11059  000E76  D7FE               	bra	u7297
 11060  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11061  000E7A  D7FC               	bra	u7297
 11062  000E7C  F000               	nop	
 11063  000E7E  0100               	movlb	0	; () banked
 11064  000E80  2BB9               	incf	actuatorTest@i_1582& (0+255),f,b
 11065  000E82  D7EF               	goto	l6514
 11066  000E84                     l1083:
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;Test.c: 248: TMR1ON = 0;
 11070  000E84  90CD               	bcf	4045,0,c	;volatile
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;Test.c: 255: printf("TST: TILT SERVO");
 11074  000E86  0E57               	movlw	low STR_98
 11075  000E88  0100               	movlb	0	; () banked
 11076  000E8A  6F8E               	movwf	printf@f& (0+255),b
 11077  000E8C  0EFE               	movlw	high STR_98
 11078  000E8E  0100               	movlb	0	; () banked
 11079  000E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 11080  000E92  EC97  F008         	call	_printf	;wreg free
 11081                           
 11082                           ;Test.c: 256: lcdInst(0b11000000);;
 11083  000E96  0EC0               	movlw	192
 11084  000E98  EC5A  F020         	call	_lcdInst
 11085                           
 11086                           ;Test.c: 257: printf("LEVEL -- 2s     ");
 11087  000E9C  0E38               	movlw	low STR_99
 11088  000E9E  0100               	movlb	0	; () banked
 11089  000EA0  6F8E               	movwf	printf@f& (0+255),b
 11090  000EA2  0EFC               	movlw	high STR_99
 11091  000EA4  0100               	movlb	0	; () banked
 11092  000EA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11093  000EA8  EC97  F008         	call	_printf	;wreg free
 11094                           
 11095                           ;Test.c: 258: updateServoPosition(1000, 3);
 11096  000EAC  0E03               	movlw	3
 11097  000EAE  0100               	movlb	0	; () banked
 11098  000EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11099  000EB2  0EE8               	movlw	232
 11100  000EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11101  000EB6  0E00               	movlw	0
 11102  000EB8  0100               	movlb	0	; () banked
 11103  000EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11104  000EBC  0E03               	movlw	3
 11105  000EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11106  000EC0  ECC9  F01A         	call	_updateServoPosition	;wreg free
 11107                           
 11108                           ;Test.c: 259: TMR3ON = 1;
 11109  000EC4  80B1               	bsf	4017,0,c	;volatile
 11110                           
 11111                           ;Test.c: 260: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11112  000EC6  0E00               	movlw	0
 11113  000EC8  0100               	movlb	0	; () banked
 11114  000ECA  6FBA               	movwf	actuatorTest@i_1585& (0+255),b
 11115  000ECC                     l6532:
 11116                           
 11117                           ; BSR set to: 0
 11118  000ECC  0E63               	movlw	99
 11119  000ECE  0100               	movlb	0	; () banked
 11120  000ED0  65BA               	cpfsgt	actuatorTest@i_1585& (0+255),b
 11121  000ED2  D001               	goto	l6536
 11122  000ED4  D00C               	goto	l6540
 11123  000ED6                     l6536:
 11124                           
 11125                           ; BSR set to: 0
 11126  000ED6  0E68               	movlw	104
 11127  000ED8  0100               	movlb	0	; () banked
 11128  000EDA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11129  000EDC  0EE4               	movlw	228
 11130  000EDE                     u7307:
 11131  000EDE  2EE8               	decfsz	wreg,f,c
 11132  000EE0  D7FE               	bra	u7307
 11133  000EE2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11134  000EE4  D7FC               	bra	u7307
 11135  000EE6  F000               	nop	
 11136  000EE8  0100               	movlb	0	; () banked
 11137  000EEA  2BBA               	incf	actuatorTest@i_1585& (0+255),f,b
 11138  000EEC  D7EF               	goto	l6532
 11139  000EEE                     l6540:
 11140                           
 11141                           ; BSR set to: 0
 11142  000EEE  0E00               	movlw	0
 11143  000EF0  0100               	movlb	0	; () banked
 11144  000EF2  6FBB               	movwf	actuatorTest@i_1586& (0+255),b
 11145  000EF4                     l6542:
 11146                           
 11147                           ; BSR set to: 0
 11148  000EF4  0E63               	movlw	99
 11149  000EF6  0100               	movlb	0	; () banked
 11150  000EF8  65BB               	cpfsgt	actuatorTest@i_1586& (0+255),b
 11151  000EFA  D001               	goto	l6546
 11152  000EFC  D00C               	goto	l6550
 11153  000EFE                     l6546:
 11154                           
 11155                           ; BSR set to: 0
 11156  000EFE  0E68               	movlw	104
 11157  000F00  0100               	movlb	0	; () banked
 11158  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 11159  000F04  0EE4               	movlw	228
 11160  000F06                     u7317:
 11161  000F06  2EE8               	decfsz	wreg,f,c
 11162  000F08  D7FE               	bra	u7317
 11163  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11164  000F0C  D7FC               	bra	u7317
 11165  000F0E  F000               	nop	
 11166  000F10  0100               	movlb	0	; () banked
 11167  000F12  2BBB               	incf	actuatorTest@i_1586& (0+255),f,b
 11168  000F14  D7EF               	goto	l6542
 11169  000F16                     l6550:
 11170                           
 11171                           ; BSR set to: 0
 11172                           ;Test.c: 262: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11173  000F16  0E80               	movlw	128
 11174  000F18  EC5A  F020         	call	_lcdInst
 11175  000F1C  0EC0               	movlw	192
 11176  000F1E  EC5A  F020         	call	_lcdInst
 11177                           
 11178                           ;Test.c: 263: printf("DROP -- 2s      ");
 11179  000F22  0E16               	movlw	low STR_100
 11180  000F24  0100               	movlb	0	; () banked
 11181  000F26  6F8E               	movwf	printf@f& (0+255),b
 11182  000F28  0EFC               	movlw	high STR_100
 11183  000F2A  0100               	movlb	0	; () banked
 11184  000F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11185  000F2E  EC97  F008         	call	_printf	;wreg free
 11186                           
 11187                           ;Test.c: 264: updateServoPosition(1500, 3);
 11188  000F32  0E05               	movlw	5
 11189  000F34  0100               	movlb	0	; () banked
 11190  000F36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11191  000F38  0EDC               	movlw	220
 11192  000F3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11193  000F3C  0E00               	movlw	0
 11194  000F3E  0100               	movlb	0	; () banked
 11195  000F40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11196  000F42  0E03               	movlw	3
 11197  000F44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11198  000F46  ECC9  F01A         	call	_updateServoPosition	;wreg free
 11199                           
 11200                           ;Test.c: 265: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11201  000F4A  0E00               	movlw	0
 11202  000F4C  0100               	movlb	0	; () banked
 11203  000F4E  6FBC               	movwf	actuatorTest@i_1588& (0+255),b
 11204  000F50                     l6558:
 11205                           
 11206                           ; BSR set to: 0
 11207  000F50  0E63               	movlw	99
 11208  000F52  0100               	movlb	0	; () banked
 11209  000F54  65BC               	cpfsgt	actuatorTest@i_1588& (0+255),b
 11210  000F56  D001               	goto	l6562
 11211  000F58  D00C               	goto	l6566
 11212  000F5A                     l6562:
 11213                           
 11214                           ; BSR set to: 0
 11215  000F5A  0E68               	movlw	104
 11216  000F5C  0100               	movlb	0	; () banked
 11217  000F5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11218  000F60  0EE4               	movlw	228
 11219  000F62                     u7327:
 11220  000F62  2EE8               	decfsz	wreg,f,c
 11221  000F64  D7FE               	bra	u7327
 11222  000F66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11223  000F68  D7FC               	bra	u7327
 11224  000F6A  F000               	nop	
 11225  000F6C  0100               	movlb	0	; () banked
 11226  000F6E  2BBC               	incf	actuatorTest@i_1588& (0+255),f,b
 11227  000F70  D7EF               	goto	l6558
 11228  000F72                     l6566:
 11229                           
 11230                           ; BSR set to: 0
 11231  000F72  0E00               	movlw	0
 11232  000F74  0100               	movlb	0	; () banked
 11233  000F76  6FBD               	movwf	actuatorTest@i_1589& (0+255),b
 11234  000F78                     l6568:
 11235                           
 11236                           ; BSR set to: 0
 11237  000F78  0E63               	movlw	99
 11238  000F7A  0100               	movlb	0	; () banked
 11239  000F7C  65BD               	cpfsgt	actuatorTest@i_1589& (0+255),b
 11240  000F7E  D001               	goto	l6572
 11241  000F80  D00C               	goto	l6576
 11242  000F82                     l6572:
 11243                           
 11244                           ; BSR set to: 0
 11245  000F82  0E68               	movlw	104
 11246  000F84  0100               	movlb	0	; () banked
 11247  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 11248  000F88  0EE4               	movlw	228
 11249  000F8A                     u7337:
 11250  000F8A  2EE8               	decfsz	wreg,f,c
 11251  000F8C  D7FE               	bra	u7337
 11252  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11253  000F90  D7FC               	bra	u7337
 11254  000F92  F000               	nop	
 11255  000F94  0100               	movlb	0	; () banked
 11256  000F96  2BBD               	incf	actuatorTest@i_1589& (0+255),f,b
 11257  000F98  D7EF               	goto	l6568
 11258  000F9A                     l6576:
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;Test.c: 267: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11262  000F9A  0E80               	movlw	128
 11263  000F9C  EC5A  F020         	call	_lcdInst
 11264  000FA0  0EC0               	movlw	192
 11265  000FA2  EC5A  F020         	call	_lcdInst
 11266                           
 11267                           ;Test.c: 268: printf("LEVEL -- 2s     ");
 11268  000FA6  0E38               	movlw	low STR_99
 11269  000FA8  0100               	movlb	0	; () banked
 11270  000FAA  6F8E               	movwf	printf@f& (0+255),b
 11271  000FAC  0EFC               	movlw	high STR_99
 11272  000FAE  0100               	movlb	0	; () banked
 11273  000FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11274  000FB2  EC97  F008         	call	_printf	;wreg free
 11275                           
 11276                           ;Test.c: 269: updateServoPosition(1000, 3);
 11277  000FB6  0E03               	movlw	3
 11278  000FB8  0100               	movlb	0	; () banked
 11279  000FBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11280  000FBC  0EE8               	movlw	232
 11281  000FBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11282  000FC0  0E00               	movlw	0
 11283  000FC2  0100               	movlb	0	; () banked
 11284  000FC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11285  000FC6  0E03               	movlw	3
 11286  000FC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11287  000FCA  ECC9  F01A         	call	_updateServoPosition	;wreg free
 11288                           
 11289                           ;Test.c: 270: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11290  000FCE  0E00               	movlw	0
 11291  000FD0  0100               	movlb	0	; () banked
 11292  000FD2  6FBE               	movwf	actuatorTest@i_1591& (0+255),b
 11293  000FD4                     l6584:
 11294                           
 11295                           ; BSR set to: 0
 11296  000FD4  0E63               	movlw	99
 11297  000FD6  0100               	movlb	0	; () banked
 11298  000FD8  65BE               	cpfsgt	actuatorTest@i_1591& (0+255),b
 11299  000FDA  D001               	goto	l6588
 11300  000FDC  D00C               	goto	l6592
 11301  000FDE                     l6588:
 11302                           
 11303                           ; BSR set to: 0
 11304  000FDE  0E68               	movlw	104
 11305  000FE0  0100               	movlb	0	; () banked
 11306  000FE2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11307  000FE4  0EE4               	movlw	228
 11308  000FE6                     u7347:
 11309  000FE6  2EE8               	decfsz	wreg,f,c
 11310  000FE8  D7FE               	bra	u7347
 11311  000FEA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11312  000FEC  D7FC               	bra	u7347
 11313  000FEE  F000               	nop	
 11314  000FF0  0100               	movlb	0	; () banked
 11315  000FF2  2BBE               	incf	actuatorTest@i_1591& (0+255),f,b
 11316  000FF4  D7EF               	goto	l6584
 11317  000FF6                     l6592:
 11318                           
 11319                           ; BSR set to: 0
 11320  000FF6  0E00               	movlw	0
 11321  000FF8  0100               	movlb	0	; () banked
 11322  000FFA  6FBF               	movwf	actuatorTest@i_1592& (0+255),b
 11323  000FFC                     l6594:
 11324                           
 11325                           ; BSR set to: 0
 11326  000FFC  0E63               	movlw	99
 11327  000FFE  0100               	movlb	0	; () banked
 11328  001000  65BF               	cpfsgt	actuatorTest@i_1592& (0+255),b
 11329  001002  D001               	goto	l6598
 11330  001004  D00C               	goto	l1095
 11331  001006                     l6598:
 11332                           
 11333                           ; BSR set to: 0
 11334  001006  0E68               	movlw	104
 11335  001008  0100               	movlb	0	; () banked
 11336  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11337  00100C  0EE4               	movlw	228
 11338  00100E                     u7357:
 11339  00100E  2EE8               	decfsz	wreg,f,c
 11340  001010  D7FE               	bra	u7357
 11341  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11342  001014  D7FC               	bra	u7357
 11343  001016  F000               	nop	
 11344  001018  0100               	movlb	0	; () banked
 11345  00101A  2BBF               	incf	actuatorTest@i_1592& (0+255),f,b
 11346  00101C  D7EF               	goto	l6594
 11347  00101E                     l1095:
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;Test.c: 272: TMR3ON = 0;
 11351  00101E  90B1               	bcf	4017,0,c	;volatile
 11352                           
 11353                           ;Test.c: 273: (INTCONbits.GIE = 0);
 11354  001020  9EF2               	bcf	intcon,7,c	;volatile
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;Test.c: 278: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11358  001022  0E01               	movlw	1
 11359  001024  EC5A  F020         	call	_lcdInst
 11360  001028  0E68               	movlw	104
 11361  00102A  0100               	movlb	0	; () banked
 11362  00102C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11363  00102E  0EE4               	movlw	228
 11364  001030                     u7367:
 11365  001030  2EE8               	decfsz	wreg,f,c
 11366  001032  D7FE               	bra	u7367
 11367  001034  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11368  001036  D7FC               	bra	u7367
 11369  001038  F000               	nop	
 11370  00103A  0E80               	movlw	128
 11371  00103C  EC5A  F020         	call	_lcdInst
 11372                           
 11373                           ;Test.c: 279: printf("TST: CAM SERVO");
 11374  001040  0EB3               	movlw	low STR_102
 11375  001042  0100               	movlb	0	; () banked
 11376  001044  6F8E               	movwf	printf@f& (0+255),b
 11377  001046  0EFE               	movlw	high STR_102
 11378  001048  0100               	movlb	0	; () banked
 11379  00104A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11380  00104C  EC97  F008         	call	_printf	;wreg free
 11381                           
 11382                           ;Test.c: 280: lcdInst(0b11000000);;
 11383  001050  0EC0               	movlw	192
 11384  001052  EC5A  F020         	call	_lcdInst
 11385                           
 11386                           ;Test.c: 281: printf("CAM UP  |RC0=1");
 11387  001056  0E95               	movlw	low STR_103
 11388  001058  0100               	movlb	0	; () banked
 11389  00105A  6F8E               	movwf	printf@f& (0+255),b
 11390  00105C  0EFE               	movlw	high STR_103
 11391  00105E  0100               	movlb	0	; () banked
 11392  001060  6F8F               	movwf	(printf@f+1)& (0+255),b
 11393  001062  EC97  F008         	call	_printf	;wreg free
 11394                           
 11395                           ;Test.c: 282: LATCbits.LATC0 = 0;
 11396  001066  908B               	bcf	3979,0,c	;volatile
 11397                           
 11398                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11399  001068  0E00               	movlw	0
 11400  00106A  0100               	movlb	0	; () banked
 11401  00106C  6FC0               	movwf	actuatorTest@i_1595& (0+255),b
 11402  00106E                     l6618:
 11403                           
 11404                           ; BSR set to: 0
 11405  00106E  0E63               	movlw	99
 11406  001070  0100               	movlb	0	; () banked
 11407  001072  65C0               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11408  001074  D001               	goto	l6622
 11409  001076  D00C               	goto	l6626
 11410  001078                     l6622:
 11411                           
 11412                           ; BSR set to: 0
 11413  001078  0E68               	movlw	104
 11414  00107A  0100               	movlb	0	; () banked
 11415  00107C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11416  00107E  0EE4               	movlw	228
 11417  001080                     u7377:
 11418  001080  2EE8               	decfsz	wreg,f,c
 11419  001082  D7FE               	bra	u7377
 11420  001084  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11421  001086  D7FC               	bra	u7377
 11422  001088  F000               	nop	
 11423  00108A  0100               	movlb	0	; () banked
 11424  00108C  2BC0               	incf	actuatorTest@i_1595& (0+255),f,b
 11425  00108E  D7EF               	goto	l6618
 11426  001090                     l6626:
 11427                           
 11428                           ; BSR set to: 0
 11429  001090  0E00               	movlw	0
 11430  001092  0100               	movlb	0	; () banked
 11431  001094  6FC1               	movwf	actuatorTest@i_1596& (0+255),b
 11432  001096                     l6628:
 11433                           
 11434                           ; BSR set to: 0
 11435  001096  0E63               	movlw	99
 11436  001098  0100               	movlb	0	; () banked
 11437  00109A  65C1               	cpfsgt	actuatorTest@i_1596& (0+255),b
 11438  00109C  D001               	goto	l6632
 11439  00109E  D00C               	goto	l6636
 11440  0010A0                     l6632:
 11441                           
 11442                           ; BSR set to: 0
 11443  0010A0  0E68               	movlw	104
 11444  0010A2  0100               	movlb	0	; () banked
 11445  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11446  0010A6  0EE4               	movlw	228
 11447  0010A8                     u7387:
 11448  0010A8  2EE8               	decfsz	wreg,f,c
 11449  0010AA  D7FE               	bra	u7387
 11450  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11451  0010AE  D7FC               	bra	u7387
 11452  0010B0  F000               	nop	
 11453  0010B2  0100               	movlb	0	; () banked
 11454  0010B4  2BC1               	incf	actuatorTest@i_1596& (0+255),f,b
 11455  0010B6  D7EF               	goto	l6628
 11456  0010B8                     l6636:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;Test.c: 284: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11460  0010B8  0E80               	movlw	128
 11461  0010BA  EC5A  F020         	call	_lcdInst
 11462  0010BE  0EC0               	movlw	192
 11463  0010C0  EC5A  F020         	call	_lcdInst
 11464                           
 11465                           ;Test.c: 285: LATCbits.LATC0 = 1;
 11466  0010C4  808B               	bsf	3979,0,c	;volatile
 11467                           
 11468                           ;Test.c: 286: printf("CAM DWN |RC0=0");
 11469  0010C6  0E86               	movlw	low STR_104
 11470  0010C8  0100               	movlb	0	; () banked
 11471  0010CA  6F8E               	movwf	printf@f& (0+255),b
 11472  0010CC  0EFE               	movlw	high STR_104
 11473  0010CE  0100               	movlb	0	; () banked
 11474  0010D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11475  0010D2  EC97  F008         	call	_printf	;wreg free
 11476                           
 11477                           ;Test.c: 287: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11478  0010D6  0E00               	movlw	0
 11479  0010D8  0100               	movlb	0	; () banked
 11480  0010DA  6FC2               	movwf	actuatorTest@i_1598& (0+255),b
 11481  0010DC                     l6644:
 11482                           
 11483                           ; BSR set to: 0
 11484  0010DC  0E63               	movlw	99
 11485  0010DE  0100               	movlb	0	; () banked
 11486  0010E0  65C2               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11487  0010E2  D001               	goto	l6648
 11488  0010E4  D00C               	goto	l6652
 11489  0010E6                     l6648:
 11490                           
 11491                           ; BSR set to: 0
 11492  0010E6  0E68               	movlw	104
 11493  0010E8  0100               	movlb	0	; () banked
 11494  0010EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11495  0010EC  0EE4               	movlw	228
 11496  0010EE                     u7397:
 11497  0010EE  2EE8               	decfsz	wreg,f,c
 11498  0010F0  D7FE               	bra	u7397
 11499  0010F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11500  0010F4  D7FC               	bra	u7397
 11501  0010F6  F000               	nop	
 11502  0010F8  0100               	movlb	0	; () banked
 11503  0010FA  2BC2               	incf	actuatorTest@i_1598& (0+255),f,b
 11504  0010FC  D7EF               	goto	l6644
 11505  0010FE                     l6652:
 11506                           
 11507                           ; BSR set to: 0
 11508  0010FE  0E00               	movlw	0
 11509  001100  0100               	movlb	0	; () banked
 11510  001102  6FC3               	movwf	actuatorTest@i_1599& (0+255),b
 11511  001104                     l6654:
 11512                           
 11513                           ; BSR set to: 0
 11514  001104  0E63               	movlw	99
 11515  001106  0100               	movlb	0	; () banked
 11516  001108  65C3               	cpfsgt	actuatorTest@i_1599& (0+255),b
 11517  00110A  D001               	goto	l6658
 11518  00110C  D00C               	goto	l6662
 11519  00110E                     l6658:
 11520                           
 11521                           ; BSR set to: 0
 11522  00110E  0E68               	movlw	104
 11523  001110  0100               	movlb	0	; () banked
 11524  001112  6FAB               	movwf	??_actuatorTest& (0+255),b
 11525  001114  0EE4               	movlw	228
 11526  001116                     u7407:
 11527  001116  2EE8               	decfsz	wreg,f,c
 11528  001118  D7FE               	bra	u7407
 11529  00111A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11530  00111C  D7FC               	bra	u7407
 11531  00111E  F000               	nop	
 11532  001120  0100               	movlb	0	; () banked
 11533  001122  2BC3               	incf	actuatorTest@i_1599& (0+255),f,b
 11534  001124  D7EF               	goto	l6654
 11535  001126                     l6662:
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;Test.c: 288: machine_state = Testing_state;
 11539  001126  0E03               	movlw	3
 11540  001128  0100               	movlb	0	; () banked
 11541  00112A  6FFC               	movwf	_machine_state& (0+255),b
 11542                           
 11543                           ; BSR set to: 0
 11544  00112C  0012               	return		;funcret
 11545  00112E                     __end_of_actuatorTest:
 11546                           	opt stack 0
 11547                           tblptru	equ	0xFF8
 11548                           tblptrh	equ	0xFF7
 11549                           tblptrl	equ	0xFF6
 11550                           tablat	equ	0xFF5
 11551                           prodh	equ	0xFF4
 11552                           prodl	equ	0xFF3
 11553                           intcon	equ	0xFF2
 11554                           intcon2	equ	0xFF1
 11555                           intcon3	equ	0xFF0
 11556                           postinc0	equ	0xFEE
 11557                           wreg	equ	0xFE8
 11558                           postdec1	equ	0xFE5
 11559                           fsr1l	equ	0xFE1
 11560                           indf2	equ	0xFDF
 11561                           postinc2	equ	0xFDE
 11562                           postdec2	equ	0xFDD
 11563                           fsr2h	equ	0xFDA
 11564                           fsr2l	equ	0xFD9
 11565                           status	equ	0xFD8
 11566                           
 11567 ;; *************** function _updateServoPosition *****************
 11568 ;; Defined at:
 11569 ;;		line 295 in file "sort.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;  time_us         2    0[BANK0 ] int 
 11572 ;;  timer           2    2[BANK0 ] int 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;  my_time         2    6[BANK0 ] unsigned int 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;Total ram usage:        8 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    7
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_Distribution
 11595 ;;		_initServos
 11596 ;;		_actuatorTest
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           	psect	text41
 11601  003592                     __ptext41:
 11602                           	opt stack 0
 11603  003592                     _updateServoPosition:
 11604                           	opt stack 20
 11605                           
 11606                           ;sort.c: 296: unsigned int my_time = 65535 - time_us;
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;incstack = 0
 11610  003592  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11611  003596  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11612  00359A  0100               	movlb	0	; () banked
 11613  00359C  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11614  00359E  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11615  0035A0  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11616  0035A2  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11617  0035A4  0EFF               	movlw	255
 11618  0035A6  0100               	movlb	0	; () banked
 11619  0035A8  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11620  0035AA  0100               	movlb	0	; () banked
 11621  0035AC  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11622  0035AE  0EFF               	movlw	255
 11623  0035B0  0100               	movlb	0	; () banked
 11624  0035B2  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11625  0035B4  0100               	movlb	0	; () banked
 11626  0035B6  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11627                           
 11628                           ;sort.c: 297: switch(timer){
 11629  0035B8  D015               	goto	l5286
 11630  0035BA                     l5284:
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;sort.c: 299: servoTimes[0] = my_time >> 8;
 11634  0035BA  0100               	movlb	0	; () banked
 11635  0035BC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11636  0035BE  0101               	movlb	1	; () banked
 11637  0035C0  6F1C               	movwf	_servoTimes& (0+255),b
 11638  0035C2  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11639                           
 11640                           ;sort.c: 300: servoTimes[1] = my_time & 0xFF;
 11641  0035C4  0100               	movlb	0	; () banked
 11642  0035C6  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11643  0035C8  0101               	movlb	1	; () banked
 11644  0035CA  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11645  0035CC  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11646  0035CE                     l772:
 11647                           
 11648                           ;sort.c: 302: servoTimes[2] = my_time >> 8;
 11649  0035CE  0100               	movlb	0	; () banked
 11650  0035D0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11651  0035D2  0101               	movlb	1	; () banked
 11652  0035D4  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11653  0035D6  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11654                           
 11655                           ;sort.c: 303: servoTimes[3] = my_time & 0xFF;
 11656  0035D8  0100               	movlb	0	; () banked
 11657  0035DA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11658  0035DC  0101               	movlb	1	; () banked
 11659  0035DE  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11660  0035E0  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11661                           
 11662                           ;sort.c: 304: }
 11663  0035E2  0012               	return	
 11664  0035E4                     l5286:
 11665  0035E4  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11666  0035E8  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11667                           
 11668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11669                           ; Switch size 1, requested type "space"
 11670                           ; Number of cases is 1, Range of values is 0 to 0
 11671                           ; switch strategies available:
 11672                           ; Name         Instructions Cycles
 11673                           ; simple_byte            4     3 (average)
 11674                           ;	Chosen strategy is simple_byte
 11675  0035EC  0100               	movlb	0	; () banked
 11676  0035EE  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11677  0035F0  0A00               	xorlw	0	; case 0
 11678  0035F2  A4D8               	btfss	status,2,c
 11679  0035F4  0012               	return	
 11680                           
 11681                           ; BSR set to: 0
 11682                           ; Switch size 1, requested type "space"
 11683                           ; Number of cases is 2, Range of values is 1 to 3
 11684                           ; switch strategies available:
 11685                           ; Name         Instructions Cycles
 11686                           ; simple_byte            7     4 (average)
 11687                           ;	Chosen strategy is simple_byte
 11688  0035F6  0100               	movlb	0	; () banked
 11689  0035F8  5184               	movf	??_updateServoPosition& (0+255),w,b
 11690  0035FA  0A01               	xorlw	1	; case 1
 11691  0035FC  B4D8               	btfsc	status,2,c
 11692  0035FE  D7DD               	goto	l5284
 11693  003600  0A02               	xorlw	2	; case 3
 11694  003602  A4D8               	btfss	status,2,c
 11695  003604  0012               	return	
 11696  003606  D7E3               	goto	l772
 11697  003608                     __end_of_updateServoPosition:
 11698                           	opt stack 0
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           intcon2	equ	0xFF1
 11707                           intcon3	equ	0xFF0
 11708                           postinc0	equ	0xFEE
 11709                           wreg	equ	0xFE8
 11710                           postdec1	equ	0xFE5
 11711                           fsr1l	equ	0xFE1
 11712                           indf2	equ	0xFDF
 11713                           postinc2	equ	0xFDE
 11714                           postdec2	equ	0xFDD
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function _ToggleTestA5 *****************
 11720 ;; Defined at:
 11721 ;;		line 360 in file "Test.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;		None
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;  on              2   44[BANK0 ] int 
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  1    wreg      void 
 11728 ;; Registers used:
 11729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11730 ;; Tracked objects:
 11731 ;;		On entry : 0/0
 11732 ;;		On exit  : 0/0
 11733 ;;		Unchanged: 0/0
 11734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11739 ;;Total ram usage:        3 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:   10
 11742 ;; This function calls:
 11743 ;;		_lcdInst
 11744 ;;		_printf
 11745 ;; This function is called by:
 11746 ;;		_Test
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           	psect	text42
 11751  003388                     __ptext42:
 11752                           	opt stack 0
 11753  003388                     _ToggleTestA5:
 11754                           	opt stack 19
 11755                           
 11756                           ;Test.c: 361: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11757                           
 11758                           ;incstack = 0
 11759  003388  0E01               	movlw	1
 11760  00338A  EC5A  F020         	call	_lcdInst
 11761  00338E  0E68               	movlw	104
 11762  003390  0100               	movlb	0	; () banked
 11763  003392  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11764  003394  0EE4               	movlw	228
 11765  003396                     u7417:
 11766  003396  2EE8               	decfsz	wreg,f,c
 11767  003398  D7FE               	bra	u7417
 11768  00339A  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11769  00339C  D7FC               	bra	u7417
 11770  00339E  F000               	nop	
 11771  0033A0  0E80               	movlw	128
 11772  0033A2  EC5A  F020         	call	_lcdInst
 11773                           
 11774                           ;Test.c: 362: printf("D WILL RETURN   ");
 11775  0033A6  0E6B               	movlw	low STR_107
 11776  0033A8  0100               	movlb	0	; () banked
 11777  0033AA  6F8E               	movwf	printf@f& (0+255),b
 11778  0033AC  0EFC               	movlw	high STR_107
 11779  0033AE  0100               	movlb	0	; () banked
 11780  0033B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11781  0033B2  EC97  F008         	call	_printf	;wreg free
 11782                           
 11783                           ;Test.c: 363: lcdInst(0b11000000);;
 11784  0033B6  0EC0               	movlw	192
 11785  0033B8  EC5A  F020         	call	_lcdInst
 11786                           
 11787                           ;Test.c: 364: printf("ELSE TOGGLES RA5");
 11788  0033BC  0E9E               	movlw	low STR_108
 11789  0033BE  0100               	movlb	0	; () banked
 11790  0033C0  6F8E               	movwf	printf@f& (0+255),b
 11791  0033C2  0EFC               	movlw	high STR_108
 11792  0033C4  0100               	movlb	0	; () banked
 11793  0033C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11794  0033C8  EC97  F008         	call	_printf	;wreg free
 11795                           
 11796                           ;Test.c: 365: int on = 0;
 11797  0033CC  0E00               	movlw	0
 11798  0033CE  0100               	movlb	0	; () banked
 11799  0033D0  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11800  0033D2  0E00               	movlw	0
 11801  0033D4  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11802  0033D6                     l1143:
 11803  0033D6  A281               	btfss	3969,1,c	;volatile
 11804  0033D8  D7FE               	goto	l1143
 11805                           
 11806                           ;Test.c: 370: }
 11807                           ;Test.c: 371: if(PORTB >> 4 == 0b1111){
 11808  0033DA  3881               	swapf	3969,w,c	;volatile
 11809  0033DC  0B0F               	andlw	15
 11810  0033DE  0A0F               	xorlw	15
 11811  0033E0  B4D8               	btfsc	status,2,c
 11812  0033E2  0012               	return	
 11813                           
 11814                           ;Test.c: 374: else{
 11815                           ;Test.c: 375: if(on == 0){
 11816                           
 11817                           ;Test.c: 373: }
 11818                           
 11819                           ;Test.c: 372: break;
 11820  0033E4  0100               	movlb	0	; () banked
 11821  0033E6  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11822  0033E8  0100               	movlb	0	; () banked
 11823  0033EA  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11824  0033EC  A4D8               	btfss	status,2,c
 11825  0033EE  D007               	goto	l6708
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;Test.c: 376: on = 1;
 11829  0033F0  0E00               	movlw	0
 11830  0033F2  0100               	movlb	0	; () banked
 11831  0033F4  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11832  0033F6  0E01               	movlw	1
 11833  0033F8  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;Test.c: 377: LATAbits.LATA5 = 1;
 11837  0033FA  8A89               	bsf	3977,5,c	;volatile
 11838                           
 11839                           ;Test.c: 378: }
 11840  0033FC  D006               	goto	l1151
 11841  0033FE                     l6708:
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;Test.c: 379: else{
 11845                           ;Test.c: 380: on = 0;
 11846  0033FE  0E00               	movlw	0
 11847  003400  0100               	movlb	0	; () banked
 11848  003402  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11849  003404  0E00               	movlw	0
 11850  003406  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;Test.c: 381: LATAbits.LATA5 = 0;
 11854  003408  9A89               	bcf	3977,5,c	;volatile
 11855  00340A                     l1151:
 11856  00340A  A281               	btfss	3969,1,c	;volatile
 11857  00340C  D7E4               	goto	l1143
 11858  00340E  D7FD               	goto	l1151
 11859  003410                     __end_of_ToggleTestA5:
 11860                           	opt stack 0
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           intcon2	equ	0xFF1
 11869                           intcon3	equ	0xFF0
 11870                           postinc0	equ	0xFEE
 11871                           wreg	equ	0xFE8
 11872                           postdec1	equ	0xFE5
 11873                           fsr1l	equ	0xFE1
 11874                           indf2	equ	0xFDF
 11875                           postinc2	equ	0xFDE
 11876                           postdec2	equ	0xFDD
 11877                           fsr2h	equ	0xFDA
 11878                           fsr2l	equ	0xFD9
 11879                           status	equ	0xFD8
 11880                           
 11881 ;; *************** function _PortTests *****************
 11882 ;; Defined at:
 11883 ;;		line 291 in file "Test.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;		None
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  1    wreg      void 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2, status,0
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;Total ram usage:        2 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    7
 11904 ;; This function calls:
 11905 ;;		Nothing
 11906 ;; This function is called by:
 11907 ;;		_Test
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           	psect	text43
 11912  003496                     __ptext43:
 11913                           	opt stack 0
 11914  003496                     _PortTests:
 11915                           	opt stack 22
 11916  003496                     l1108:
 11917  003496  A281               	btfss	3969,1,c	;volatile
 11918  003498  D7FE               	goto	l1108
 11919                           
 11920                           ;Test.c: 295: var = PORTB >> 4;
 11921  00349A  CF81 F080          	movff	3969,??_PortTests	;volatile
 11922  00349E  0100               	movlb	0	; () banked
 11923  0034A0  3B80               	swapf	??_PortTests& (0+255),f,b
 11924  0034A2  0E0F               	movlw	15
 11925  0034A4  1780               	andwf	??_PortTests& (0+255),f,b
 11926  0034A6  0100               	movlb	0	; () banked
 11927  0034A8  5180               	movf	??_PortTests& (0+255),w,b
 11928  0034AA  0100               	movlb	0	; () banked
 11929  0034AC  6FFA               	movwf	_var& (0+255),b
 11930  0034AE  6BFB               	clrf	(_var+1)& (0+255),b
 11931                           
 11932                           ;Test.c: 296: switch(var){
 11933  0034B0  D00C               	goto	l6716
 11934  0034B2                     l1112:
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;Test.c: 298: LATEbits.LATE0 = 1;
 11938  0034B2  808D               	bsf	3981,0,c	;volatile
 11939                           
 11940                           ;Test.c: 299: break;
 11941  0034B4  D027               	goto	l1120
 11942  0034B6                     l1114:
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;Test.c: 301: LATEbits.LATE1 = 1;
 11946  0034B6  828D               	bsf	3981,1,c	;volatile
 11947                           
 11948                           ;Test.c: 302: break;
 11949  0034B8  D025               	goto	l1120
 11950  0034BA                     l1115:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;Test.c: 304: LATDbits.LATD0 = 1;
 11954  0034BA  808C               	bsf	3980,0,c	;volatile
 11955                           
 11956                           ;Test.c: 305: break;
 11957  0034BC  D023               	goto	l1120
 11958  0034BE                     l1116:
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;Test.c: 307: LATAbits.LATA3 = 1;
 11962  0034BE  8689               	bsf	3977,3,c	;volatile
 11963                           
 11964                           ;Test.c: 308: break;
 11965  0034C0  D021               	goto	l1120
 11966  0034C2                     l1117:
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;Test.c: 310: LATAbits.LATA4 = 1;
 11970  0034C2  8889               	bsf	3977,4,c	;volatile
 11971                           
 11972                           ;Test.c: 311: break;
 11973  0034C4  D01F               	goto	l1120
 11974  0034C6                     l1118:
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;Test.c: 313: LATAbits.LATA5 = 1;
 11978  0034C6  8A89               	bsf	3977,5,c	;volatile
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;Test.c: 317: }
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;Test.c: 316: break;
 11985                           
 11986                           ;Test.c: 315: default:
 11987                           
 11988                           ;Test.c: 314: break;
 11989  0034C8  D01D               	goto	l1120
 11990  0034CA                     l6716:
 11991                           
 11992                           ; BSR set to: 0
 11993  0034CA  C0FA  F080         	movff	_var,??_PortTests
 11994  0034CE  C0FB  F081         	movff	_var+1,??_PortTests+1
 11995                           
 11996                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11997                           ; Switch size 1, requested type "space"
 11998                           ; Number of cases is 1, Range of values is 0 to 0
 11999                           ; switch strategies available:
 12000                           ; Name         Instructions Cycles
 12001                           ; simple_byte            4     3 (average)
 12002                           ;	Chosen strategy is simple_byte
 12003  0034D2  0100               	movlb	0	; () banked
 12004  0034D4  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12005  0034D6  0A00               	xorlw	0	; case 0
 12006  0034D8  A4D8               	btfss	status,2,c
 12007  0034DA  D014               	goto	l1120
 12008                           
 12009                           ; BSR set to: 0
 12010                           ; Switch size 1, requested type "space"
 12011                           ; Number of cases is 6, Range of values is 0 to 5
 12012                           ; switch strategies available:
 12013                           ; Name         Instructions Cycles
 12014                           ; simple_byte           19    10 (average)
 12015                           ;	Chosen strategy is simple_byte
 12016  0034DC  0100               	movlb	0	; () banked
 12017  0034DE  5180               	movf	??_PortTests& (0+255),w,b
 12018  0034E0  0A00               	xorlw	0	; case 0
 12019  0034E2  B4D8               	btfsc	status,2,c
 12020  0034E4  D7E6               	goto	l1112
 12021  0034E6  0A01               	xorlw	1	; case 1
 12022  0034E8  B4D8               	btfsc	status,2,c
 12023  0034EA  D7E5               	goto	l1114
 12024  0034EC  0A03               	xorlw	3	; case 2
 12025  0034EE  B4D8               	btfsc	status,2,c
 12026  0034F0  D7E4               	goto	l1115
 12027  0034F2  0A01               	xorlw	1	; case 3
 12028  0034F4  B4D8               	btfsc	status,2,c
 12029  0034F6  D7E3               	goto	l1116
 12030  0034F8  0A07               	xorlw	7	; case 4
 12031  0034FA  B4D8               	btfsc	status,2,c
 12032  0034FC  D7E2               	goto	l1117
 12033  0034FE  0A01               	xorlw	1	; case 5
 12034  003500  B4D8               	btfsc	status,2,c
 12035  003502  D7E1               	goto	l1118
 12036  003504                     l1120:
 12037  003504  B281               	btfsc	3969,1,c	;volatile
 12038  003506  D7FE               	goto	l1120
 12039                           
 12040                           ;Test.c: 319: __nop();
 12041  003508  F000               	nop	
 12042                           
 12043                           ;Test.c: 320: __nop();
 12044  00350A  F000               	nop	
 12045                           
 12046                           ;Test.c: 321: LATA = 0x00;
 12047  00350C  0E00               	movlw	0
 12048  00350E  6E89               	movwf	3977,c	;volatile
 12049                           
 12050                           ;Test.c: 322: LATE = 0x00;
 12051  003510  0E00               	movlw	0
 12052  003512  6E8D               	movwf	3981,c	;volatile
 12053                           
 12054                           ;Test.c: 323: LATD = 0x00; }
 12055  003514  0E00               	movlw	0
 12056  003516  6E8C               	movwf	3980,c	;volatile
 12057  003518  D7BE               	goto	l1108
 12058  00351A                     __end_of_PortTests:
 12059                           	opt stack 0
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           intcon2	equ	0xFF1
 12068                           intcon3	equ	0xFF0
 12069                           postinc0	equ	0xFEE
 12070                           wreg	equ	0xFE8
 12071                           postdec1	equ	0xFE5
 12072                           fsr1l	equ	0xFE1
 12073                           indf2	equ	0xFDF
 12074                           postinc2	equ	0xFDE
 12075                           postdec2	equ	0xFDD
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _PortTestA5 *****************
 12081 ;; Defined at:
 12082 ;;		line 326 in file "Test.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;		None
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;		None
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        1 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; Hardware stack levels required when called:   10
 12103 ;; This function calls:
 12104 ;;		_lcdInst
 12105 ;;		_printf
 12106 ;; This function is called by:
 12107 ;;		_Test
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text44
 12112  00380E                     __ptext44:
 12113                           	opt stack 0
 12114  00380E                     _PortTestA5:
 12115                           	opt stack 19
 12116                           
 12117                           ;Test.c: 327: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12118                           
 12119                           ;incstack = 0
 12120  00380E  0E01               	movlw	1
 12121  003810  EC5A  F020         	call	_lcdInst
 12122  003814  0E68               	movlw	104
 12123  003816  0100               	movlb	0	; () banked
 12124  003818  6FAB               	movwf	??_PortTestA5& (0+255),b
 12125  00381A  0EE4               	movlw	228
 12126  00381C                     u7427:
 12127  00381C  2EE8               	decfsz	wreg,f,c
 12128  00381E  D7FE               	bra	u7427
 12129  003820  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12130  003822  D7FC               	bra	u7427
 12131  003824  F000               	nop	
 12132  003826  0E80               	movlw	128
 12133  003828  EC5A  F020         	call	_lcdInst
 12134                           
 12135                           ;Test.c: 328: printf("D WILL RETURN    ");
 12136  00382C  0EBD               	movlw	low STR_105
 12137  00382E  0100               	movlb	0	; () banked
 12138  003830  6F8E               	movwf	printf@f& (0+255),b
 12139  003832  0EFB               	movlw	high STR_105
 12140  003834  0100               	movlb	0	; () banked
 12141  003836  6F8F               	movwf	(printf@f+1)& (0+255),b
 12142  003838  EC97  F008         	call	_printf	;wreg free
 12143                           
 12144                           ;Test.c: 329: lcdInst(0b11000000);;
 12145  00383C  0EC0               	movlw	192
 12146  00383E  EC5A  F020         	call	_lcdInst
 12147                           
 12148                           ;Test.c: 330: printf("OTHER SETS RA5   ");
 12149  003842  0ECF               	movlw	low STR_106
 12150  003844  0100               	movlb	0	; () banked
 12151  003846  6F8E               	movwf	printf@f& (0+255),b
 12152  003848  0EFB               	movlw	high STR_106
 12153  00384A  0100               	movlb	0	; () banked
 12154  00384C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12155  00384E  EC97  F008         	call	_printf	;wreg free
 12156  003852                     l1129:
 12157  003852  A281               	btfss	3969,1,c	;volatile
 12158  003854  D7FE               	goto	l1129
 12159                           
 12160                           ;Test.c: 335: }
 12161                           ;Test.c: 336: if(PORTB >> 4 == 0b1111){
 12162  003856  3881               	swapf	3969,w,c	;volatile
 12163  003858  0B0F               	andlw	15
 12164  00385A  0A0F               	xorlw	15
 12165  00385C  B4D8               	btfsc	status,2,c
 12166  00385E  0012               	return	
 12167                           
 12168                           ;Test.c: 339: else{
 12169                           ;Test.c: 340: LATAbits.LATA5 = 1;
 12170                           
 12171                           ;Test.c: 338: }
 12172                           
 12173                           ;Test.c: 337: break;
 12174  003860  8A89               	bsf	3977,5,c	;volatile
 12175  003862                     l1135:
 12176  003862  B281               	btfsc	3969,1,c	;volatile
 12177  003864  D7FE               	goto	l1135
 12178                           
 12179                           ;Test.c: 343: }
 12180                           ;Test.c: 355: LATAbits.LATA5 = 0;
 12181  003866  9A89               	bcf	3977,5,c	;volatile
 12182  003868  D7F4               	goto	l1129
 12183  00386A                     __end_of_PortTestA5:
 12184                           	opt stack 0
 12185                           tblptru	equ	0xFF8
 12186                           tblptrh	equ	0xFF7
 12187                           tblptrl	equ	0xFF6
 12188                           tablat	equ	0xFF5
 12189                           prodh	equ	0xFF4
 12190                           prodl	equ	0xFF3
 12191                           intcon	equ	0xFF2
 12192                           intcon2	equ	0xFF1
 12193                           intcon3	equ	0xFF0
 12194                           postinc0	equ	0xFEE
 12195                           wreg	equ	0xFE8
 12196                           postdec1	equ	0xFE5
 12197                           fsr1l	equ	0xFE1
 12198                           indf2	equ	0xFDF
 12199                           postinc2	equ	0xFDE
 12200                           postdec2	equ	0xFDD
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function _printf *****************
 12206 ;; Defined at:
 12207 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 12210 ;;		 -> STR_108(17), STR_107(17), STR_106(18), STR_105(18), 
 12211 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 12212 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 12213 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 12214 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 12215 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 12216 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 12217 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 12218 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 12219 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 12220 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 12221 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 12222 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 12223 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 12224 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 12225 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 12226 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 12227 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 12228 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 12229 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 12230 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;  tmpval          4    0        struct .
 12233 ;;  width           2   41[BANK0 ] int 
 12234 ;;  val             2   37[BANK0 ] unsigned int 
 12235 ;;  len             2   35[BANK0 ] unsigned int 
 12236 ;;  ap              2   33[BANK0 ] PTR void [1]
 12237 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12238 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 12239 ;;		 -> STR_109(7), count_total(2), printRTC@month(4), UI@month(4), 
 12240 ;;  c               1   40[BANK0 ] char 
 12241 ;;  flag            1   39[BANK0 ] unsigned char 
 12242 ;;  prec            1   30[BANK0 ] char 
 12243 ;; Return value:  Size  Location     Type
 12244 ;;                  2   14[BANK0 ] int 
 12245 ;; Registers used:
 12246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12247 ;; Tracked objects:
 12248 ;;		On entry : 0/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12252 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12253 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;Total ram usage:       29 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    9
 12259 ;; This function calls:
 12260 ;;		___lwdiv
 12261 ;;		___lwmod
 12262 ;;		___wmul
 12263 ;;		_isdigit
 12264 ;;		_putch
 12265 ;; This function is called by:
 12266 ;;		_UI
 12267 ;;		_change_state_to_menu_start
 12268 ;;		_change_state_to_menu_12
 12269 ;;		_change_state_to_menu_22
 12270 ;;		_printRTC
 12271 ;;		_EEPROM_write
 12272 ;;		_Test
 12273 ;;		_algorithmTest
 12274 ;;		_sensorTest
 12275 ;;		_actuatorTest
 12276 ;;		_PortTestA5
 12277 ;;		_ToggleTestA5
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           	psect	text45
 12282  00112E                     __ptext45:
 12283                           	opt stack 0
 12284  00112E                     _printf:
 12285                           	opt stack 18
 12286                           
 12287                           ;doprnt.c: 466: va_list ap;
 12288                           ;doprnt.c: 499: signed char c;
 12289                           ;doprnt.c: 501: int width;
 12290                           ;doprnt.c: 506: signed char prec;
 12291                           ;doprnt.c: 508: unsigned char flag;
 12292                           ;doprnt.c: 523: union {
 12293                           ;doprnt.c: 524: unsigned long vd;
 12294                           ;doprnt.c: 525: double integ;
 12295                           ;doprnt.c: 526: } tmpval;
 12296                           ;doprnt.c: 528: unsigned int val;
 12297                           ;doprnt.c: 529: unsigned len;
 12298                           ;doprnt.c: 530: const char * cp;
 12299                           ;doprnt.c: 533: *ap = __va_start();
 12300                           
 12301                           ;incstack = 0
 12302  00112E  0E90               	movlw	low (?_printf+2)
 12303  001130  0100               	movlb	0	; () banked
 12304  001132  6FA1               	movwf	printf@ap& (0+255),b
 12305  001134  0E00               	movlw	high (?_printf+2)
 12306  001136  0100               	movlb	0	; () banked
 12307  001138  6FA2               	movwf	(printf@ap+1)& (0+255),b
 12308                           
 12309                           ;doprnt.c: 536: while(c = *f++) {
 12310  00113A  D205               	goto	l5244
 12311  00113C                     l5114:
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;doprnt.c: 538: if(c != '%')
 12315  00113C  0E25               	movlw	37
 12316  00113E  0100               	movlb	0	; () banked
 12317  001140  19A8               	xorwf	printf@c& (0+255),w,b
 12318  001142  B4D8               	btfsc	status,2,c
 12319  001144  D005               	goto	l5118
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;doprnt.c: 540: {
 12323                           ;doprnt.c: 541: (putch(c) );
 12324  001146  0100               	movlb	0	; () banked
 12325  001148  51A8               	movf	printf@c& (0+255),w,b
 12326  00114A  EC52  F020         	call	_putch
 12327                           
 12328                           ;doprnt.c: 542: continue;
 12329  00114E  D1FB               	goto	l5244
 12330  001150                     l5118:
 12331                           
 12332                           ;doprnt.c: 543: }
 12333                           ;doprnt.c: 546: width = 0;
 12334  001150  0E00               	movlw	0
 12335  001152  0100               	movlb	0	; () banked
 12336  001154  6FAA               	movwf	(printf@width+1)& (0+255),b
 12337  001156  0E00               	movlw	0
 12338  001158  6FA9               	movwf	printf@width& (0+255),b
 12339                           
 12340                           ;doprnt.c: 548: flag = 0;
 12341  00115A  0E00               	movlw	0
 12342  00115C  0100               	movlb	0	; () banked
 12343  00115E  6FA7               	movwf	printf@flag& (0+255),b
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;doprnt.c: 551: switch(*f) {
 12347                           
 12348                           ;doprnt.c: 550: for(;;) {
 12349  001160  D005               	goto	l5124
 12350  001162                     l5120:
 12351                           
 12352                           ;doprnt.c: 580: flag |= 0x04;
 12353  001162  0100               	movlb	0	; () banked
 12354  001164  85A7               	bsf	printf@flag& (0+255),2,b
 12355                           
 12356                           ;doprnt.c: 581: f++;
 12357  001166  0100               	movlb	0	; () banked
 12358  001168  4B8E               	infsnz	printf@f& (0+255),f,b
 12359  00116A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12360  00116C                     l5124:
 12361  00116C  C08E  FFF6         	movff	printf@f,tblptrl
 12362  001170  C08F  FFF7         	movff	printf@f+1,tblptrh
 12363  001174                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12364  001174  6AF8               	clrf	tblptru,c
 12365  001176                     	endif
 12366  001176                     	if	0	;tblptru may be non-zero
 12367  001176                     	endif
 12368  001176  0008               	tblrd		*
 12369  001178  50F5               	movf	tablat,w,c
 12370                           
 12371                           ; Switch size 1, requested type "space"
 12372                           ; Number of cases is 1, Range of values is 48 to 48
 12373                           ; switch strategies available:
 12374                           ; Name         Instructions Cycles
 12375                           ; simple_byte            4     3 (average)
 12376                           ;	Chosen strategy is simple_byte
 12377  00117A  0A30               	xorlw	48	; case 48
 12378  00117C  B4D8               	btfsc	status,2,c
 12379  00117E  D7F1               	goto	l5120
 12380                           
 12381                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12382                           
 12383                           ;doprnt.c: 586: }
 12384                           
 12385                           ;doprnt.c: 585: break;
 12386  001180  C08E  FFF6         	movff	printf@f,tblptrl
 12387  001184  C08F  FFF7         	movff	printf@f+1,tblptrh
 12388  001188                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12389  001188  6AF8               	clrf	tblptru,c
 12390  00118A                     	endif
 12391  00118A                     	if	0	;tblptru may be non-zero
 12392  00118A                     	endif
 12393  00118A  0008               	tblrd		*
 12394  00118C  50F5               	movf	tablat,w,c
 12395  00118E  EC79  F01F         	call	_isdigit
 12396  001192  A0D8               	btfss	status,0,c
 12397  001194  D0D2               	goto	l5172
 12398                           
 12399                           ;doprnt.c: 598: width = 0;
 12400  001196  0E00               	movlw	0
 12401  001198  0100               	movlb	0	; () banked
 12402  00119A  6FAA               	movwf	(printf@width+1)& (0+255),b
 12403  00119C  0E00               	movlw	0
 12404  00119E  6FA9               	movwf	printf@width& (0+255),b
 12405  0011A0                     l5130:
 12406                           
 12407                           ;doprnt.c: 600: width *= 10;
 12408  0011A0  C0A9  F080         	movff	printf@width,___wmul@multiplier
 12409  0011A4  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 12410  0011A8  0E00               	movlw	0
 12411  0011AA  0100               	movlb	0	; () banked
 12412  0011AC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12413  0011AE  0E0A               	movlw	10
 12414  0011B0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 12415  0011B2  EC13  F01E         	call	___wmul	;wreg free
 12416  0011B6  C080  F0A9         	movff	?___wmul,printf@width
 12417  0011BA  C081  F0AA         	movff	?___wmul+1,printf@width+1
 12418                           
 12419                           ;doprnt.c: 601: width += *f++ - '0';
 12420  0011BE  0ED0               	movlw	208
 12421  0011C0  0100               	movlb	0	; () banked
 12422  0011C2  6F9A               	movwf	??_printf& (0+255),b
 12423  0011C4  0EFF               	movlw	255
 12424  0011C6  0100               	movlb	0	; () banked
 12425  0011C8  6F9B               	movwf	(??_printf+1)& (0+255),b
 12426  0011CA  C08E  FFF6         	movff	printf@f,tblptrl
 12427  0011CE  C08F  FFF7         	movff	printf@f+1,tblptrh
 12428  0011D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12429  0011D2  6AF8               	clrf	tblptru,c
 12430  0011D4                     	endif
 12431  0011D4                     	if	0	;tblptru may be non-zero
 12432  0011D4                     	endif
 12433  0011D4  0008               	tblrd		*
 12434  0011D6  50F5               	movf	tablat,w,c
 12435  0011D8  0100               	movlb	0	; () banked
 12436  0011DA  6F9C               	movwf	(??_printf+2)& (0+255),b
 12437  0011DC  6B9D               	clrf	(??_printf+3)& (0+255),b
 12438  0011DE  0100               	movlb	0	; () banked
 12439  0011E0  519A               	movf	??_printf& (0+255),w,b
 12440  0011E2  0100               	movlb	0	; () banked
 12441  0011E4  279C               	addwf	(??_printf+2)& (0+255),f,b
 12442  0011E6  0100               	movlb	0	; () banked
 12443  0011E8  519B               	movf	(??_printf+1)& (0+255),w,b
 12444  0011EA  0100               	movlb	0	; () banked
 12445  0011EC  239D               	addwfc	(??_printf+3)& (0+255),f,b
 12446  0011EE  0100               	movlb	0	; () banked
 12447  0011F0  519C               	movf	(??_printf+2)& (0+255),w,b
 12448  0011F2  0100               	movlb	0	; () banked
 12449  0011F4  27A9               	addwf	printf@width& (0+255),f,b
 12450  0011F6  0100               	movlb	0	; () banked
 12451  0011F8  519D               	movf	(??_printf+3)& (0+255),w,b
 12452  0011FA  0100               	movlb	0	; () banked
 12453  0011FC  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 12454                           
 12455                           ; BSR set to: 0
 12456  0011FE  0100               	movlb	0	; () banked
 12457  001200  4B8E               	infsnz	printf@f& (0+255),f,b
 12458  001202  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12462  001204  C08E  FFF6         	movff	printf@f,tblptrl
 12463  001208  C08F  FFF7         	movff	printf@f+1,tblptrh
 12464  00120C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12465  00120C  6AF8               	clrf	tblptru,c
 12466  00120E                     	endif
 12467  00120E                     	if	0	;tblptru may be non-zero
 12468  00120E                     	endif
 12469  00120E  0008               	tblrd		*
 12470  001210  50F5               	movf	tablat,w,c
 12471  001212  EC79  F01F         	call	_isdigit
 12472  001216  A0D8               	btfss	status,0,c
 12473  001218  D090               	goto	l5172
 12474  00121A  D7C2               	goto	l5130
 12475  00121C                     l5138:
 12476                           
 12477                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12478  00121C  C0A1  FFD9         	movff	printf@ap,fsr2l
 12479  001220  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12480  001224  CFDE F09F          	movff	postinc2,printf@cp
 12481  001228  CFDD F0A0          	movff	postdec2,printf@cp+1
 12482  00122C  0E02               	movlw	2
 12483  00122E  0100               	movlb	0	; () banked
 12484  001230  27A1               	addwf	printf@ap& (0+255),f,b
 12485  001232  0E00               	movlw	0
 12486  001234  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;doprnt.c: 740: if(!cp)
 12490  001236  0100               	movlb	0	; () banked
 12491  001238  519F               	movf	printf@cp& (0+255),w,b
 12492  00123A  0100               	movlb	0	; () banked
 12493  00123C  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 12494  00123E  A4D8               	btfss	status,2,c
 12495  001240  D006               	goto	l5146
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;doprnt.c: 741: cp = "(null)";
 12499  001242  0EB5               	movlw	low STR_109
 12500  001244  0100               	movlb	0	; () banked
 12501  001246  6F9F               	movwf	printf@cp& (0+255),b
 12502  001248  0EFF               	movlw	high STR_109
 12503  00124A  0100               	movlb	0	; () banked
 12504  00124C  6FA0               	movwf	(printf@cp+1)& (0+255),b
 12505  00124E                     l5146:
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;doprnt.c: 745: len = 0;
 12509  00124E  0E00               	movlw	0
 12510  001250  0100               	movlb	0	; () banked
 12511  001252  6FA4               	movwf	(printf@len+1)& (0+255),b
 12512  001254  0E00               	movlw	0
 12513  001256  6FA3               	movwf	printf@len& (0+255),b
 12514                           
 12515                           ;doprnt.c: 746: while(cp[len])
 12516  001258  D003               	goto	l5150
 12517  00125A                     l5148:
 12518                           
 12519                           ;doprnt.c: 747: len++;
 12520  00125A  0100               	movlb	0	; () banked
 12521  00125C  4BA3               	infsnz	printf@len& (0+255),f,b
 12522  00125E  2BA4               	incf	(printf@len+1)& (0+255),f,b
 12523  001260                     l5150:
 12524                           
 12525                           ; BSR set to: 0
 12526  001260  0100               	movlb	0	; () banked
 12527  001262  51A3               	movf	printf@len& (0+255),w,b
 12528  001264  0100               	movlb	0	; () banked
 12529  001266  259F               	addwf	printf@cp& (0+255),w,b
 12530  001268  0100               	movlb	0	; () banked
 12531  00126A  6F9A               	movwf	??_printf& (0+255),b
 12532  00126C  0100               	movlb	0	; () banked
 12533  00126E  51A4               	movf	(printf@len+1)& (0+255),w,b
 12534  001270  0100               	movlb	0	; () banked
 12535  001272  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 12536  001274  0100               	movlb	0	; () banked
 12537  001276  6F9B               	movwf	(??_printf+1)& (0+255),b
 12538  001278  C09A  FFF6         	movff	??_printf,tblptrl
 12539  00127C  C09B  FFF7         	movff	??_printf+1,tblptrh
 12540  001280  0E00               	movlw	low (__mediumconst shr (0+16))
 12541  001282  6EF8               	movwf	tblptru,c
 12542  001284  0E0F               	movlw	(high __ramtop+-1)
 12543  001286  64F7               	cpfsgt	tblptrh,c
 12544  001288  D003               	bra	u3607
 12545  00128A  0008               	tblrd		*
 12546  00128C  50F5               	movf	tablat,w,c
 12547  00128E  D005               	bra	u3600
 12548  001290                     u3607:
 12549  001290  CFF6 FFE9          	movff	tblptrl,fsr0l
 12550  001294  CFF7 FFEA          	movff	tblptrh,fsr0h
 12551  001298  50EF               	movf	indf0,w,c
 12552  00129A                     u3600:
 12553  00129A  0900               	iorlw	0
 12554  00129C  A4D8               	btfss	status,2,c
 12555  00129E  D7DD               	goto	l5148
 12556                           
 12557                           ;doprnt.c: 757: if(width > len)
 12558  0012A0  0100               	movlb	0	; () banked
 12559  0012A2  51A9               	movf	printf@width& (0+255),w,b
 12560  0012A4  0100               	movlb	0	; () banked
 12561  0012A6  5DA3               	subwf	printf@len& (0+255),w,b
 12562  0012A8  0100               	movlb	0	; () banked
 12563  0012AA  51AA               	movf	(printf@width+1)& (0+255),w,b
 12564  0012AC  0100               	movlb	0	; () banked
 12565  0012AE  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 12566  0012B0  B0D8               	btfsc	status,0,c
 12567  0012B2  D009               	goto	l5156
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;doprnt.c: 758: width -= len;
 12571  0012B4  0100               	movlb	0	; () banked
 12572  0012B6  51A3               	movf	printf@len& (0+255),w,b
 12573  0012B8  0100               	movlb	0	; () banked
 12574  0012BA  5FA9               	subwf	printf@width& (0+255),f,b
 12575  0012BC  0100               	movlb	0	; () banked
 12576  0012BE  51A4               	movf	(printf@len+1)& (0+255),w,b
 12577  0012C0  0100               	movlb	0	; () banked
 12578  0012C2  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12579  0012C4  D009               	goto	l5160
 12580  0012C6                     l5156:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;doprnt.c: 759: else
 12584                           ;doprnt.c: 760: width = 0;
 12585  0012C6  0E00               	movlw	0
 12586  0012C8  0100               	movlb	0	; () banked
 12587  0012CA  6FAA               	movwf	(printf@width+1)& (0+255),b
 12588  0012CC  0E00               	movlw	0
 12589  0012CE  6FA9               	movwf	printf@width& (0+255),b
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;doprnt.c: 764: while(width--)
 12593  0012D0  D003               	goto	l5160
 12594  0012D2                     l5158:
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;doprnt.c: 765: (putch(' ') );
 12598  0012D2  0E20               	movlw	32
 12599  0012D4  EC52  F020         	call	_putch
 12600  0012D8                     l5160:
 12601  0012D8  0100               	movlb	0	; () banked
 12602  0012DA  07A9               	decf	printf@width& (0+255),f,b
 12603  0012DC  A0D8               	btfss	status,0,c
 12604  0012DE  07AA               	decf	(printf@width+1)& (0+255),f,b
 12605  0012E0  0100               	movlb	0	; () banked
 12606  0012E2  29A9               	incf	printf@width& (0+255),w,b
 12607  0012E4  E1F6               	bnz	l5158
 12608  0012E6  0100               	movlb	0	; () banked
 12609  0012E8  29AA               	incf	(printf@width+1)& (0+255),w,b
 12610  0012EA  B4D8               	btfsc	status,2,c
 12611  0012EC  D017               	goto	l5166
 12612  0012EE  D7F1               	goto	l5158
 12613  0012F0                     l5162:
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;doprnt.c: 768: (putch(*cp++) );
 12617  0012F0  C09F  FFF6         	movff	printf@cp,tblptrl
 12618  0012F4  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 12619  0012F8  0E00               	movlw	low (__mediumconst shr (0+16))
 12620  0012FA  6EF8               	movwf	tblptru,c
 12621  0012FC  0E0F               	movlw	(high __ramtop+-1)
 12622  0012FE  64F7               	cpfsgt	tblptrh,c
 12623  001300  D003               	bra	u3647
 12624  001302  0008               	tblrd		*
 12625  001304  50F5               	movf	tablat,w,c
 12626  001306  D005               	bra	u3640
 12627  001308                     u3647:
 12628  001308  CFF6 FFE9          	movff	tblptrl,fsr0l
 12629  00130C  CFF7 FFEA          	movff	tblptrh,fsr0h
 12630  001310  50EF               	movf	indf0,w,c
 12631  001312                     u3640:
 12632  001312  EC52  F020         	call	_putch
 12633  001316  0100               	movlb	0	; () banked
 12634  001318  4B9F               	infsnz	printf@cp& (0+255),f,b
 12635  00131A  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12636  00131C                     l5166:
 12637                           
 12638                           ; BSR set to: 0
 12639  00131C  0100               	movlb	0	; () banked
 12640  00131E  07A3               	decf	printf@len& (0+255),f,b
 12641  001320  A0D8               	btfss	status,0,c
 12642  001322  07A4               	decf	(printf@len+1)& (0+255),f,b
 12643  001324  0100               	movlb	0	; () banked
 12644  001326  29A3               	incf	printf@len& (0+255),w,b
 12645  001328  E1E3               	bnz	l5162
 12646  00132A  0100               	movlb	0	; () banked
 12647  00132C  29A4               	incf	(printf@len+1)& (0+255),w,b
 12648  00132E  B4D8               	btfsc	status,2,c
 12649  001330  D10A               	goto	l5244
 12650  001332  D7DE               	goto	l5162
 12651  001334                     l5168:
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;doprnt.c: 818: flag |= 0x40;
 12655  001334  0100               	movlb	0	; () banked
 12656  001336  8DA7               	bsf	printf@flag& (0+255),6,b
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;doprnt.c: 822: }
 12660                           
 12661                           ;doprnt.c: 819: break;
 12662  001338  D01D               	goto	l1188
 12663  00133A                     l5172:
 12664  00133A  C08E  FFF6         	movff	printf@f,tblptrl
 12665  00133E  C08F  FFF7         	movff	printf@f+1,tblptrh
 12666  001342  0100               	movlb	0	; () banked
 12667  001344  4B8E               	infsnz	printf@f& (0+255),f,b
 12668  001346  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12669  001348                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12670  001348  6AF8               	clrf	tblptru,c
 12671  00134A                     	endif
 12672  00134A                     	if	0	;tblptru may be non-zero
 12673  00134A                     	endif
 12674  00134A  0008               	tblrd		*
 12675  00134C  CFF5 F0A8          	movff	tablat,printf@c
 12676  001350  0100               	movlb	0	; () banked
 12677  001352  51A8               	movf	printf@c& (0+255),w,b
 12678                           
 12679                           ; Switch size 1, requested type "space"
 12680                           ; Number of cases is 5, Range of values is 0 to 117
 12681                           ; switch strategies available:
 12682                           ; Name         Instructions Cycles
 12683                           ; simple_byte           16     9 (average)
 12684                           ;	Chosen strategy is simple_byte
 12685  001354  0A00               	xorlw	0	; case 0
 12686  001356  B4D8               	btfsc	status,2,c
 12687  001358  0012               	return	
 12688  00135A  0A64               	xorlw	100	; case 100
 12689  00135C  B4D8               	btfsc	status,2,c
 12690  00135E  D00A               	goto	l1188
 12691  001360  0A0D               	xorlw	13	; case 105
 12692  001362  B4D8               	btfsc	status,2,c
 12693  001364  D007               	goto	l1188
 12694  001366  0A1A               	xorlw	26	; case 115
 12695  001368  B4D8               	btfsc	status,2,c
 12696  00136A  D758               	goto	l5138
 12697  00136C  0A06               	xorlw	6	; case 117
 12698  00136E  B4D8               	btfsc	status,2,c
 12699  001370  D7E1               	goto	l5168
 12700  001372  D0E9               	goto	l5244
 12701  001374                     l1188:
 12702                           
 12703                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12704  001374  0100               	movlb	0	; () banked
 12705  001376  BDA7               	btfsc	printf@flag& (0+255),6,b
 12706  001378  D019               	goto	l5184
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;doprnt.c: 1253: {
 12710                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12711  00137A  C0A1  FFD9         	movff	printf@ap,fsr2l
 12712  00137E  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12713  001382  CFDE F0A5          	movff	postinc2,printf@val
 12714  001386  CFDD F0A6          	movff	postdec2,printf@val+1
 12715                           
 12716                           ; BSR set to: 0
 12717  00138A  0E02               	movlw	2
 12718  00138C  0100               	movlb	0	; () banked
 12719  00138E  27A1               	addwf	printf@ap& (0+255),f,b
 12720  001390  0E00               	movlw	0
 12721  001392  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12722                           
 12723                           ; BSR set to: 0
 12724                           ;doprnt.c: 1261: if((int)val < 0) {
 12725  001394  0100               	movlb	0	; () banked
 12726  001396  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12727  001398  D016               	goto	l5188
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;doprnt.c: 1262: flag |= 0x03;
 12731  00139A  0E03               	movlw	3
 12732  00139C  0100               	movlb	0	; () banked
 12733  00139E  13A7               	iorwf	printf@flag& (0+255),f,b
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;doprnt.c: 1263: val = -val;
 12737  0013A0  0100               	movlb	0	; () banked
 12738  0013A2  6DA5               	negf	printf@val& (0+255),b
 12739  0013A4  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12740  0013A6  B0D8               	btfsc	status,0,c
 12741  0013A8  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;doprnt.c: 1264: }
 12745                           ;doprnt.c: 1266: }
 12746  0013AA  D00D               	goto	l5188
 12747  0013AC                     l5184:
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;doprnt.c: 1268: else
 12751                           ;doprnt.c: 1273: {
 12752                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12753  0013AC  C0A1  FFD9         	movff	printf@ap,fsr2l
 12754  0013B0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12755  0013B4  CFDE F0A5          	movff	postinc2,printf@val
 12756  0013B8  CFDD F0A6          	movff	postdec2,printf@val+1
 12757                           
 12758                           ; BSR set to: 0
 12759  0013BC  0E02               	movlw	2
 12760  0013BE  0100               	movlb	0	; () banked
 12761  0013C0  27A1               	addwf	printf@ap& (0+255),f,b
 12762  0013C2  0E00               	movlw	0
 12763  0013C4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12764  0013C6                     l5188:
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;doprnt.c: 1287: }
 12768                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12769  0013C6  0E01               	movlw	1
 12770  0013C8  0100               	movlb	0	; () banked
 12771  0013CA  6FA8               	movwf	printf@c& (0+255),b
 12772  0013CC                     l5190:
 12773                           
 12774                           ; BSR set to: 0
 12775  0013CC  0E05               	movlw	5
 12776  0013CE  0100               	movlb	0	; () banked
 12777  0013D0  19A8               	xorwf	printf@c& (0+255),w,b
 12778  0013D2  B4D8               	btfsc	status,2,c
 12779  0013D4  D019               	goto	l5202
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;doprnt.c: 1306: if(val < dpowers[c])
 12783                           
 12784                           ; BSR set to: 0
 12785                           
 12786                           ; BSR set to: 0
 12787  0013D6  0100               	movlb	0	; () banked
 12788  0013D8  51A8               	movf	printf@c& (0+255),w,b
 12789  0013DA  0D02               	mullw	2
 12790  0013DC  0E60               	movlw	low _dpowers
 12791  0013DE  24F3               	addwf	prodl,w,c
 12792  0013E0  6EF6               	movwf	tblptrl,c
 12793  0013E2  0EFB               	movlw	high _dpowers
 12794  0013E4  20F4               	addwfc	prodh,w,c
 12795  0013E6  6EF7               	movwf	tblptrh,c
 12796  0013E8                     	if	1	;There are 3 active tblptr bytes
 12797  0013E8  6AF8               	clrf	tblptru,c
 12798  0013EA  0E00               	movlw	low (__mediumconst shr (0+16))
 12799  0013EC  22F8               	addwfc	tblptru,f,c
 12800  0013EE                     	endif
 12801  0013EE  0009               	tblrd		*+
 12802  0013F0  50F5               	movf	tablat,w,c
 12803  0013F2  0100               	movlb	0	; () banked
 12804  0013F4  5DA5               	subwf	printf@val& (0+255),w,b
 12805  0013F6  0009               	tblrd		*+
 12806  0013F8  50F5               	movf	tablat,w,c
 12807  0013FA  0100               	movlb	0	; () banked
 12808  0013FC  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12809  0013FE  A0D8               	btfss	status,0,c
 12810  001400  D003               	goto	l5202
 12811                           
 12812                           ; BSR set to: 0
 12813                           
 12814                           ; BSR set to: 0
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;doprnt.c: 1307: break;
 12818  001402  0100               	movlb	0	; () banked
 12819  001404  2BA8               	incf	printf@c& (0+255),f,b
 12820  001406  D7E2               	goto	l5190
 12821  001408                     l5202:
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12825  001408  0100               	movlb	0	; () banked
 12826  00140A  51A9               	movf	printf@width& (0+255),w,b
 12827  00140C  0100               	movlb	0	; () banked
 12828  00140E  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12829  001410  B4D8               	btfsc	status,2,c
 12830  001412  D00B               	goto	l5208
 12831                           
 12832                           ; BSR set to: 0
 12833  001414  C0A7  F09A         	movff	printf@flag,??_printf
 12834  001418  0E03               	movlw	3
 12835  00141A  0100               	movlb	0	; () banked
 12836  00141C  179A               	andwf	??_printf& (0+255),f,b
 12837  00141E  B4D8               	btfsc	status,2,c
 12838  001420  D004               	goto	l5208
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;doprnt.c: 1346: width--;
 12842  001422  0100               	movlb	0	; () banked
 12843  001424  07A9               	decf	printf@width& (0+255),f,b
 12844  001426  A0D8               	btfss	status,0,c
 12845  001428  07AA               	decf	(printf@width+1)& (0+255),f,b
 12846  00142A                     l5208:
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;doprnt.c: 1381: if(width > c)
 12850  00142A  0E80               	movlw	128
 12851  00142C  0100               	movlb	0	; () banked
 12852  00142E  BFA8               	btfsc	printf@c& (0+255),7,b
 12853  001430  0E7F               	movlw	127
 12854  001432  0100               	movlb	0	; () banked
 12855  001434  6F9A               	movwf	??_printf& (0+255),b
 12856  001436  0100               	movlb	0	; () banked
 12857  001438  51A9               	movf	printf@width& (0+255),w,b
 12858  00143A  0100               	movlb	0	; () banked
 12859  00143C  5DA8               	subwf	printf@c& (0+255),w,b
 12860  00143E  0100               	movlb	0	; () banked
 12861  001440  51AA               	movf	(printf@width+1)& (0+255),w,b
 12862  001442  0A80               	xorlw	128
 12863  001444  0100               	movlb	0	; () banked
 12864  001446  599A               	subwfb	??_printf& (0+255),w,b
 12865  001448  B0D8               	btfsc	status,0,c
 12866  00144A  D00B               	goto	l5212
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;doprnt.c: 1382: width -= c;
 12870  00144C  0100               	movlb	0	; () banked
 12871  00144E  51A8               	movf	printf@c& (0+255),w,b
 12872  001450  0100               	movlb	0	; () banked
 12873  001452  5FA9               	subwf	printf@width& (0+255),f,b
 12874  001454  0E00               	movlw	0
 12875  001456  0100               	movlb	0	; () banked
 12876  001458  BFA8               	btfsc	printf@c& (0+255),7,b
 12877  00145A  0EFF               	movlw	255
 12878  00145C  0100               	movlb	0	; () banked
 12879  00145E  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12880  001460  D005               	goto	l5214
 12881  001462                     l5212:
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;doprnt.c: 1383: else
 12885                           ;doprnt.c: 1384: width = 0;
 12886  001462  0E00               	movlw	0
 12887  001464  0100               	movlb	0	; () banked
 12888  001466  6FAA               	movwf	(printf@width+1)& (0+255),b
 12889  001468  0E00               	movlw	0
 12890  00146A  6FA9               	movwf	printf@width& (0+255),b
 12891  00146C                     l5214:
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;doprnt.c: 1387: if(flag & 0x04) {
 12895  00146C  0100               	movlb	0	; () banked
 12896  00146E  A5A7               	btfss	printf@flag& (0+255),2,b
 12897  001470  D018               	goto	l5226
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;doprnt.c: 1392: if(flag & 0x03)
 12901  001472  C0A7  F09A         	movff	printf@flag,??_printf
 12902  001476  0E03               	movlw	3
 12903  001478  0100               	movlb	0	; () banked
 12904  00147A  179A               	andwf	??_printf& (0+255),f,b
 12905  00147C  B4D8               	btfsc	status,2,c
 12906  00147E  D003               	goto	l5220
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;doprnt.c: 1393: (putch('-') );
 12910  001480  0E2D               	movlw	45
 12911  001482  EC52  F020         	call	_putch
 12912  001486                     l5220:
 12913                           
 12914                           ;doprnt.c: 1415: if(width)
 12915  001486  0100               	movlb	0	; () banked
 12916  001488  51A9               	movf	printf@width& (0+255),w,b
 12917  00148A  0100               	movlb	0	; () banked
 12918  00148C  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12919  00148E  B4D8               	btfsc	status,2,c
 12920  001490  D025               	goto	l5236
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;doprnt.c: 1417: (putch('0') );
 12924                           
 12925                           ; BSR set to: 0
 12926                           
 12927                           ;doprnt.c: 1416: do
 12928  001492  0E30               	movlw	48
 12929  001494  EC52  F020         	call	_putch
 12930                           
 12931                           ;doprnt.c: 1418: while(--width);
 12932  001498  0100               	movlb	0	; () banked
 12933  00149A  07A9               	decf	printf@width& (0+255),f,b
 12934  00149C  A0D8               	btfss	status,0,c
 12935  00149E  07AA               	decf	(printf@width+1)& (0+255),f,b
 12936  0014A0  D7F2               	goto	l5220
 12937  0014A2                     l5226:
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;doprnt.c: 1422: {
 12941                           ;doprnt.c: 1424: if(width
 12942                           ;doprnt.c: 1428: )
 12943  0014A2  0100               	movlb	0	; () banked
 12944  0014A4  51A9               	movf	printf@width& (0+255),w,b
 12945  0014A6  0100               	movlb	0	; () banked
 12946  0014A8  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12947  0014AA  B4D8               	btfsc	status,2,c
 12948  0014AC  D00D               	goto	l5232
 12949  0014AE                     l5228:
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;doprnt.c: 1430: (putch(' ') );
 12953  0014AE  0E20               	movlw	32
 12954  0014B0  EC52  F020         	call	_putch
 12955                           
 12956                           ;doprnt.c: 1431: while(--width);
 12957  0014B4  0100               	movlb	0	; () banked
 12958  0014B6  07A9               	decf	printf@width& (0+255),f,b
 12959  0014B8  A0D8               	btfss	status,0,c
 12960  0014BA  07AA               	decf	(printf@width+1)& (0+255),f,b
 12961  0014BC  0100               	movlb	0	; () banked
 12962  0014BE  51A9               	movf	printf@width& (0+255),w,b
 12963  0014C0  0100               	movlb	0	; () banked
 12964  0014C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12965  0014C4  A4D8               	btfss	status,2,c
 12966  0014C6  D7F3               	goto	l5228
 12967  0014C8                     l5232:
 12968                           
 12969                           ; BSR set to: 0
 12970                           ;doprnt.c: 1438: if(flag & 0x03)
 12971  0014C8  C0A7  F09A         	movff	printf@flag,??_printf
 12972  0014CC  0E03               	movlw	3
 12973  0014CE  0100               	movlb	0	; () banked
 12974  0014D0  179A               	andwf	??_printf& (0+255),f,b
 12975  0014D2  B4D8               	btfsc	status,2,c
 12976  0014D4  D003               	goto	l5236
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;doprnt.c: 1439: (putch('-') );
 12980  0014D6  0E2D               	movlw	45
 12981  0014D8  EC52  F020         	call	_putch
 12982  0014DC                     l5236:
 12983                           
 12984                           ;doprnt.c: 1469: }
 12985                           ;doprnt.c: 1472: prec = c;
 12986  0014DC  C0A8  F09E         	movff	printf@c,printf@prec
 12987                           
 12988                           ;doprnt.c: 1474: while(prec--) {
 12989  0014E0  D02C               	goto	l5242
 12990  0014E2                     l5238:
 12991                           
 12992                           ;doprnt.c: 1478: {
 12993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12994  0014E2  0100               	movlb	0	; () banked
 12995  0014E4  519E               	movf	printf@prec& (0+255),w,b
 12996  0014E6  0D02               	mullw	2
 12997  0014E8  0E60               	movlw	low _dpowers
 12998  0014EA  24F3               	addwf	prodl,w,c
 12999  0014EC  6EF6               	movwf	tblptrl,c
 13000  0014EE  0EFB               	movlw	high _dpowers
 13001  0014F0  20F4               	addwfc	prodh,w,c
 13002  0014F2  6EF7               	movwf	tblptrh,c
 13003  0014F4                     	if	1	;There are 3 active tblptr bytes
 13004  0014F4  6AF8               	clrf	tblptru,c
 13005  0014F6  0E00               	movlw	low (__mediumconst shr (0+16))
 13006  0014F8  22F8               	addwfc	tblptru,f,c
 13007  0014FA                     	endif
 13008  0014FA  0009               	tblrd		*+
 13009  0014FC  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13010  001500  000A               	tblrd		*-
 13011  001502  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13012  001506  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13013  00150A  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13014  00150E  EC8D  F01A         	call	___lwdiv	;wreg free
 13015  001512  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13016  001516  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13017  00151A  0E00               	movlw	0
 13018  00151C  0100               	movlb	0	; () banked
 13019  00151E  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13020  001520  0E0A               	movlw	10
 13021  001522  6F89               	movwf	___lwmod@divisor& (0+255),b
 13022  001524  ECA6  F01B         	call	___lwmod	;wreg free
 13023  001528  0100               	movlb	0	; () banked
 13024  00152A  5187               	movf	?___lwmod& (0+255),w,b
 13025  00152C  0F30               	addlw	48
 13026  00152E  0100               	movlb	0	; () banked
 13027  001530  6FA8               	movwf	printf@c& (0+255),b
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;doprnt.c: 1523: }
 13031                           ;doprnt.c: 1524: (putch(c) );
 13032  001532  0100               	movlb	0	; () banked
 13033  001534  51A8               	movf	printf@c& (0+255),w,b
 13034  001536  EC52  F020         	call	_putch
 13035  00153A                     l5242:
 13036  00153A  0100               	movlb	0	; () banked
 13037  00153C  079E               	decf	printf@prec& (0+255),f,b
 13038  00153E  0100               	movlb	0	; () banked
 13039  001540  299E               	incf	printf@prec& (0+255),w,b
 13040  001542  A4D8               	btfss	status,2,c
 13041  001544  D7CE               	goto	l5238
 13042  001546                     l5244:
 13043  001546  C08E  FFF6         	movff	printf@f,tblptrl
 13044  00154A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13045  00154E  0100               	movlb	0	; () banked
 13046  001550  4B8E               	infsnz	printf@f& (0+255),f,b
 13047  001552  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13048  001554                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13049  001554  6AF8               	clrf	tblptru,c
 13050  001556                     	endif
 13051  001556                     	if	0	;tblptru may be non-zero
 13052  001556                     	endif
 13053  001556  0008               	tblrd		*
 13054  001558  CFF5 F0A8          	movff	tablat,printf@c
 13055  00155C  0100               	movlb	0	; () banked
 13056  00155E  51A8               	movf	printf@c& (0+255),w,b
 13057  001560  B4D8               	btfsc	status,2,c
 13058  001562  0012               	return	
 13059  001564  D5EB               	goto	l5114
 13060  001566                     __end_of_printf:
 13061                           	opt stack 0
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon2	equ	0xFF1
 13070                           intcon3	equ	0xFF0
 13071                           indf0	equ	0xFEF
 13072                           postinc0	equ	0xFEE
 13073                           fsr0h	equ	0xFEA
 13074                           fsr0l	equ	0xFE9
 13075                           wreg	equ	0xFE8
 13076                           postdec1	equ	0xFE5
 13077                           fsr1l	equ	0xFE1
 13078                           indf2	equ	0xFDF
 13079                           postinc2	equ	0xFDE
 13080                           postdec2	equ	0xFDD
 13081                           fsr2h	equ	0xFDA
 13082                           fsr2l	equ	0xFD9
 13083                           status	equ	0xFD8
 13084                           
 13085 ;; *************** function _putch *****************
 13086 ;; Defined at:
 13087 ;;		line 20 in file "lcd.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  data            1    wreg     unsigned char 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;  data            1    2[BANK0 ] unsigned char 
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  1    wreg      void 
 13094 ;; Registers used:
 13095 ;;		wreg, status,2, status,0, cstack
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13105 ;;Total ram usage:        1 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    8
 13108 ;; This function calls:
 13109 ;;		_lcdNibble
 13110 ;; This function is called by:
 13111 ;;		_printf
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           	psect	text46
 13116  0040A4                     __ptext46:
 13117                           	opt stack 0
 13118  0040A4                     _putch:
 13119                           	opt stack 18
 13120                           
 13121                           ;incstack = 0
 13122                           ;putch@data stored from wreg
 13123  0040A4  0100               	movlb	0	; () banked
 13124  0040A6  6F82               	movwf	putch@data& (0+255),b
 13125                           
 13126                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13127  0040A8  848C               	bsf	3980,2,c	;volatile
 13128                           
 13129                           ;lcd.c: 22: lcdNibble(data);
 13130  0040AA  0100               	movlb	0	; () banked
 13131  0040AC  5182               	movf	putch@data& (0+255),w,b
 13132  0040AE  EC72  F01B         	call	_lcdNibble
 13133  0040B2  0012               	return		;funcret
 13134  0040B4                     __end_of_putch:
 13135                           	opt stack 0
 13136                           tblptru	equ	0xFF8
 13137                           tblptrh	equ	0xFF7
 13138                           tblptrl	equ	0xFF6
 13139                           tablat	equ	0xFF5
 13140                           prodh	equ	0xFF4
 13141                           prodl	equ	0xFF3
 13142                           intcon	equ	0xFF2
 13143                           intcon2	equ	0xFF1
 13144                           intcon3	equ	0xFF0
 13145                           indf0	equ	0xFEF
 13146                           postinc0	equ	0xFEE
 13147                           fsr0h	equ	0xFEA
 13148                           fsr0l	equ	0xFE9
 13149                           wreg	equ	0xFE8
 13150                           postdec1	equ	0xFE5
 13151                           fsr1l	equ	0xFE1
 13152                           indf2	equ	0xFDF
 13153                           postinc2	equ	0xFDE
 13154                           postdec2	equ	0xFDD
 13155                           fsr2h	equ	0xFDA
 13156                           fsr2l	equ	0xFD9
 13157                           status	equ	0xFD8
 13158                           
 13159 ;; *************** function _isdigit *****************
 13160 ;; Defined at:
 13161 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  c               1    wreg     unsigned char 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  c               1    2[BANK0 ] unsigned char 
 13166 ;; Return value:  Size  Location     Type
 13167 ;;		None               void
 13168 ;; Registers used:
 13169 ;;		wreg, status,2, status,0
 13170 ;; Tracked objects:
 13171 ;;		On entry : 0/0
 13172 ;;		On exit  : 0/0
 13173 ;;		Unchanged: 0/0
 13174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13179 ;;Total ram usage:        3 bytes
 13180 ;; Hardware stack levels used:    1
 13181 ;; Hardware stack levels required when called:    7
 13182 ;; This function calls:
 13183 ;;		Nothing
 13184 ;; This function is called by:
 13185 ;;		_printf
 13186 ;; This function uses a non-reentrant model
 13187 ;;
 13188                           
 13189                           	psect	text47
 13190  003EF2                     __ptext47:
 13191                           	opt stack 0
 13192  003EF2                     _isdigit:
 13193                           	opt stack 19
 13194                           
 13195                           ;incstack = 0
 13196                           ;isdigit@c stored from wreg
 13197  003EF2  0100               	movlb	0	; () banked
 13198  003EF4  6F82               	movwf	isdigit@c& (0+255),b
 13199  003EF6  0E00               	movlw	0
 13200  003EF8  0100               	movlb	0	; () banked
 13201  003EFA  6F81               	movwf	_isdigit$1860& (0+255),b
 13202                           
 13203                           ; BSR set to: 0
 13204  003EFC  0E3A               	movlw	58
 13205  003EFE  0100               	movlb	0	; () banked
 13206  003F00  6182               	cpfslt	isdigit@c& (0+255),b
 13207  003F02  D007               	goto	l4968
 13208                           
 13209                           ; BSR set to: 0
 13210  003F04  0E2F               	movlw	47
 13211  003F06  0100               	movlb	0	; () banked
 13212  003F08  6582               	cpfsgt	isdigit@c& (0+255),b
 13213  003F0A  D003               	goto	l4968
 13214                           
 13215                           ; BSR set to: 0
 13216  003F0C  0E01               	movlw	1
 13217  003F0E  0100               	movlb	0	; () banked
 13218  003F10  6F81               	movwf	_isdigit$1860& (0+255),b
 13219  003F12                     l4968:
 13220                           
 13221                           ; BSR set to: 0
 13222  003F12  C081  F080         	movff	_isdigit$1860,??_isdigit
 13223  003F16  0100               	movlb	0	; () banked
 13224  003F18  3180               	rrcf	??_isdigit& (0+255),w,b
 13225  003F1A  0012               	return	
 13226  003F1C                     __end_of_isdigit:
 13227                           	opt stack 0
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           intcon	equ	0xFF2
 13235                           intcon2	equ	0xFF1
 13236                           intcon3	equ	0xFF0
 13237                           indf0	equ	0xFEF
 13238                           postinc0	equ	0xFEE
 13239                           fsr0h	equ	0xFEA
 13240                           fsr0l	equ	0xFE9
 13241                           wreg	equ	0xFE8
 13242                           postdec1	equ	0xFE5
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function ___wmul *****************
 13252 ;; Defined at:
 13253 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13256 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  product         2    4[BANK0 ] unsigned int 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  2    0[BANK0 ] unsigned int 
 13261 ;; Registers used:
 13262 ;;		wreg, status,2, status,0, prodl, prodh
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13268 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;Total ram usage:        6 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    7
 13275 ;; This function calls:
 13276 ;;		Nothing
 13277 ;; This function is called by:
 13278 ;;		_printf
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           	psect	text48
 13283  003C26                     __ptext48:
 13284                           	opt stack 0
 13285  003C26                     ___wmul:
 13286                           	opt stack 19
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;incstack = 0
 13290  003C26  0100               	movlb	0	; () banked
 13291  003C28  5180               	movf	___wmul@multiplier& (0+255),w,b
 13292  003C2A  0100               	movlb	0	; () banked
 13293  003C2C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13294  003C2E  CFF3 F084          	movff	prodl,___wmul@product
 13295  003C32  CFF4 F085          	movff	prodh,___wmul@product+1
 13296  003C36  0100               	movlb	0	; () banked
 13297  003C38  5180               	movf	___wmul@multiplier& (0+255),w,b
 13298  003C3A  0100               	movlb	0	; () banked
 13299  003C3C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13300  003C3E  50F3               	movf	prodl,w,c
 13301  003C40  0100               	movlb	0	; () banked
 13302  003C42  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13303  003C44  0100               	movlb	0	; () banked
 13304  003C46  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13305  003C48  0100               	movlb	0	; () banked
 13306  003C4A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13307  003C4C  50F3               	movf	prodl,w,c
 13308  003C4E  0100               	movlb	0	; () banked
 13309  003C50  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13310                           
 13311                           ; BSR set to: 0
 13312  003C52  C084  F080         	movff	___wmul@product,?___wmul
 13313  003C56  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13314  003C5A  0012               	return	
 13315  003C5C                     __end_of___wmul:
 13316                           	opt stack 0
 13317                           tblptru	equ	0xFF8
 13318                           tblptrh	equ	0xFF7
 13319                           tblptrl	equ	0xFF6
 13320                           tablat	equ	0xFF5
 13321                           prodh	equ	0xFF4
 13322                           prodl	equ	0xFF3
 13323                           intcon	equ	0xFF2
 13324                           intcon2	equ	0xFF1
 13325                           intcon3	equ	0xFF0
 13326                           indf0	equ	0xFEF
 13327                           postinc0	equ	0xFEE
 13328                           fsr0h	equ	0xFEA
 13329                           fsr0l	equ	0xFE9
 13330                           wreg	equ	0xFE8
 13331                           postdec1	equ	0xFE5
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function ___lwmod *****************
 13341 ;; Defined at:
 13342 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  dividend        2    7[BANK0 ] unsigned int 
 13345 ;;  divisor         2    9[BANK0 ] unsigned int 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;  counter         1   11[BANK0 ] unsigned char 
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  2    7[BANK0 ] unsigned int 
 13350 ;; Registers used:
 13351 ;;		wreg, status,2, status,0
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;Total ram usage:        5 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    7
 13364 ;; This function calls:
 13365 ;;		Nothing
 13366 ;; This function is called by:
 13367 ;;		_printf
 13368 ;; This function uses a non-reentrant model
 13369 ;;
 13370                           
 13371                           	psect	text49
 13372  00374C                     __ptext49:
 13373                           	opt stack 0
 13374  00374C                     ___lwmod:
 13375                           	opt stack 19
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;incstack = 0
 13379  00374C  0100               	movlb	0	; () banked
 13380  00374E  5189               	movf	___lwmod@divisor& (0+255),w,b
 13381  003750  0100               	movlb	0	; () banked
 13382  003752  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 13383  003754  B4D8               	btfsc	status,2,c
 13384  003756  D026               	goto	l1645
 13385                           
 13386                           ; BSR set to: 0
 13387  003758  0E01               	movlw	1
 13388  00375A  0100               	movlb	0	; () banked
 13389  00375C  6F8B               	movwf	___lwmod@counter& (0+255),b
 13390  00375E  D006               	goto	l5006
 13391  003760                     l5004:
 13392                           
 13393                           ; BSR set to: 0
 13394  003760  0100               	movlb	0	; () banked
 13395  003762  90D8               	bcf	status,0,c
 13396  003764  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 13397  003766  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 13398  003768  0100               	movlb	0	; () banked
 13399  00376A  2B8B               	incf	___lwmod@counter& (0+255),f,b
 13400  00376C                     l5006:
 13401                           
 13402                           ; BSR set to: 0
 13403  00376C  0100               	movlb	0	; () banked
 13404  00376E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 13405  003770  D7F7               	goto	l5004
 13406  003772                     l5008:
 13407                           
 13408                           ; BSR set to: 0
 13409  003772  0100               	movlb	0	; () banked
 13410  003774  5189               	movf	___lwmod@divisor& (0+255),w,b
 13411  003776  0100               	movlb	0	; () banked
 13412  003778  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 13413  00377A  0100               	movlb	0	; () banked
 13414  00377C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13415  00377E  0100               	movlb	0	; () banked
 13416  003780  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 13417  003782  A0D8               	btfss	status,0,c
 13418  003784  D008               	goto	l5012
 13419                           
 13420                           ; BSR set to: 0
 13421  003786  0100               	movlb	0	; () banked
 13422  003788  5189               	movf	___lwmod@divisor& (0+255),w,b
 13423  00378A  0100               	movlb	0	; () banked
 13424  00378C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 13425  00378E  0100               	movlb	0	; () banked
 13426  003790  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 13427  003792  0100               	movlb	0	; () banked
 13428  003794  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 13429  003796                     l5012:
 13430                           
 13431                           ; BSR set to: 0
 13432  003796  0100               	movlb	0	; () banked
 13433  003798  90D8               	bcf	status,0,c
 13434  00379A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 13435  00379C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 13436                           
 13437                           ; BSR set to: 0
 13438  00379E  0100               	movlb	0	; () banked
 13439  0037A0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 13440  0037A2  D7E7               	goto	l5008
 13441  0037A4                     l1645:
 13442                           
 13443                           ; BSR set to: 0
 13444  0037A4  C087  F087         	movff	___lwmod@dividend,?___lwmod
 13445  0037A8  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 13446                           
 13447                           ; BSR set to: 0
 13448  0037AC  0012               	return		;funcret
 13449  0037AE                     __end_of___lwmod:
 13450                           	opt stack 0
 13451                           tblptru	equ	0xFF8
 13452                           tblptrh	equ	0xFF7
 13453                           tblptrl	equ	0xFF6
 13454                           tablat	equ	0xFF5
 13455                           prodh	equ	0xFF4
 13456                           prodl	equ	0xFF3
 13457                           intcon	equ	0xFF2
 13458                           intcon2	equ	0xFF1
 13459                           intcon3	equ	0xFF0
 13460                           indf0	equ	0xFEF
 13461                           postinc0	equ	0xFEE
 13462                           fsr0h	equ	0xFEA
 13463                           fsr0l	equ	0xFE9
 13464                           wreg	equ	0xFE8
 13465                           postdec1	equ	0xFE5
 13466                           fsr1l	equ	0xFE1
 13467                           indf2	equ	0xFDF
 13468                           postinc2	equ	0xFDE
 13469                           postdec2	equ	0xFDD
 13470                           fsr2h	equ	0xFDA
 13471                           fsr2l	equ	0xFD9
 13472                           status	equ	0xFD8
 13473                           
 13474 ;; *************** function ___lwdiv *****************
 13475 ;; Defined at:
 13476 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13477 ;; Parameters:    Size  Location     Type
 13478 ;;  dividend        2    0[BANK0 ] unsigned int 
 13479 ;;  divisor         2    2[BANK0 ] unsigned int 
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  quotient        2    4[BANK0 ] unsigned int 
 13482 ;;  counter         1    6[BANK0 ] unsigned char 
 13483 ;; Return value:  Size  Location     Type
 13484 ;;                  2    0[BANK0 ] unsigned int 
 13485 ;; Registers used:
 13486 ;;		wreg, status,2, status,0
 13487 ;; Tracked objects:
 13488 ;;		On entry : 0/0
 13489 ;;		On exit  : 0/0
 13490 ;;		Unchanged: 0/0
 13491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13493 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13495 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13496 ;;Total ram usage:        7 bytes
 13497 ;; Hardware stack levels used:    1
 13498 ;; Hardware stack levels required when called:    7
 13499 ;; This function calls:
 13500 ;;		Nothing
 13501 ;; This function is called by:
 13502 ;;		_printf
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text50
 13507  00351A                     __ptext50:
 13508                           	opt stack 0
 13509  00351A                     ___lwdiv:
 13510                           	opt stack 19
 13511                           
 13512                           ; BSR set to: 0
 13513                           ;incstack = 0
 13514  00351A  0E00               	movlw	0
 13515  00351C  0100               	movlb	0	; () banked
 13516  00351E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 13517  003520  0E00               	movlw	0
 13518  003522  6F84               	movwf	___lwdiv@quotient& (0+255),b
 13519                           
 13520                           ; BSR set to: 0
 13521  003524  0100               	movlb	0	; () banked
 13522  003526  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13523  003528  0100               	movlb	0	; () banked
 13524  00352A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 13525  00352C  B4D8               	btfsc	status,2,c
 13526  00352E  D02C               	goto	l1635
 13527                           
 13528                           ; BSR set to: 0
 13529  003530  0E01               	movlw	1
 13530  003532  0100               	movlb	0	; () banked
 13531  003534  6F86               	movwf	___lwdiv@counter& (0+255),b
 13532  003536  D006               	goto	l4986
 13533  003538                     l4984:
 13534                           
 13535                           ; BSR set to: 0
 13536  003538  0100               	movlb	0	; () banked
 13537  00353A  90D8               	bcf	status,0,c
 13538  00353C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 13539  00353E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 13540  003540  0100               	movlb	0	; () banked
 13541  003542  2B86               	incf	___lwdiv@counter& (0+255),f,b
 13542  003544                     l4986:
 13543                           
 13544                           ; BSR set to: 0
 13545  003544  0100               	movlb	0	; () banked
 13546  003546  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 13547  003548  D7F7               	goto	l4984
 13548  00354A                     l4988:
 13549                           
 13550                           ; BSR set to: 0
 13551  00354A  0100               	movlb	0	; () banked
 13552  00354C  90D8               	bcf	status,0,c
 13553  00354E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 13554  003550  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 13555                           
 13556                           ; BSR set to: 0
 13557  003552  0100               	movlb	0	; () banked
 13558  003554  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13559  003556  0100               	movlb	0	; () banked
 13560  003558  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 13561  00355A  0100               	movlb	0	; () banked
 13562  00355C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13563  00355E  0100               	movlb	0	; () banked
 13564  003560  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 13565  003562  A0D8               	btfss	status,0,c
 13566  003564  D00A               	goto	l4996
 13567                           
 13568                           ; BSR set to: 0
 13569  003566  0100               	movlb	0	; () banked
 13570  003568  5182               	movf	___lwdiv@divisor& (0+255),w,b
 13571  00356A  0100               	movlb	0	; () banked
 13572  00356C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 13573  00356E  0100               	movlb	0	; () banked
 13574  003570  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 13575  003572  0100               	movlb	0	; () banked
 13576  003574  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 13577                           
 13578                           ; BSR set to: 0
 13579  003576  0100               	movlb	0	; () banked
 13580  003578  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 13581  00357A                     l4996:
 13582                           
 13583                           ; BSR set to: 0
 13584  00357A  0100               	movlb	0	; () banked
 13585  00357C  90D8               	bcf	status,0,c
 13586  00357E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 13587  003580  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 13588                           
 13589                           ; BSR set to: 0
 13590  003582  0100               	movlb	0	; () banked
 13591  003584  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 13592  003586  D7E1               	goto	l4988
 13593  003588                     l1635:
 13594                           
 13595                           ; BSR set to: 0
 13596  003588  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 13597  00358C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13598                           
 13599                           ; BSR set to: 0
 13600  003590  0012               	return		;funcret
 13601  003592                     __end_of___lwdiv:
 13602                           	opt stack 0
 13603                           tblptru	equ	0xFF8
 13604                           tblptrh	equ	0xFF7
 13605                           tblptrl	equ	0xFF6
 13606                           tablat	equ	0xFF5
 13607                           prodh	equ	0xFF4
 13608                           prodl	equ	0xFF3
 13609                           intcon	equ	0xFF2
 13610                           intcon2	equ	0xFF1
 13611                           intcon3	equ	0xFF0
 13612                           indf0	equ	0xFEF
 13613                           postinc0	equ	0xFEE
 13614                           fsr0h	equ	0xFEA
 13615                           fsr0l	equ	0xFE9
 13616                           wreg	equ	0xFE8
 13617                           postdec1	equ	0xFE5
 13618                           fsr1l	equ	0xFE1
 13619                           indf2	equ	0xFDF
 13620                           postinc2	equ	0xFDE
 13621                           postdec2	equ	0xFDD
 13622                           fsr2h	equ	0xFDA
 13623                           fsr2l	equ	0xFD9
 13624                           status	equ	0xFD8
 13625                           
 13626 ;; *************** function _lcdInst *****************
 13627 ;; Defined at:
 13628 ;;		line 15 in file "lcd.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;  data            1    wreg     unsigned char 
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;  data            1    2[BANK0 ] unsigned char 
 13633 ;; Return value:  Size  Location     Type
 13634 ;;                  1    wreg      void 
 13635 ;; Registers used:
 13636 ;;		wreg, status,2, status,0, cstack
 13637 ;; Tracked objects:
 13638 ;;		On entry : 0/0
 13639 ;;		On exit  : 0/0
 13640 ;;		Unchanged: 0/0
 13641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13646 ;;Total ram usage:        1 bytes
 13647 ;; Hardware stack levels used:    1
 13648 ;; Hardware stack levels required when called:    8
 13649 ;; This function calls:
 13650 ;;		_lcdNibble
 13651 ;; This function is called by:
 13652 ;;		_UI
 13653 ;;		_change_state_to_menu_start
 13654 ;;		_change_state_to_menu_12
 13655 ;;		_change_state_to_menu_22
 13656 ;;		_initLCD
 13657 ;;		_printRTC
 13658 ;;		_Loading
 13659 ;;		_EEPROM_write
 13660 ;;		_Test
 13661 ;;		_algorithmTest
 13662 ;;		_sensorTest
 13663 ;;		_actuatorTest
 13664 ;;		_PortTestA5
 13665 ;;		_ToggleTestA5
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           	psect	text51
 13670  0040B4                     __ptext51:
 13671                           	opt stack 0
 13672  0040B4                     _lcdInst:
 13673                           	opt stack 20
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;incstack = 0
 13677                           ;lcdInst@data stored from wreg
 13678  0040B4  0100               	movlb	0	; () banked
 13679  0040B6  6F82               	movwf	lcdInst@data& (0+255),b
 13680                           
 13681                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13682  0040B8  948C               	bcf	3980,2,c	;volatile
 13683                           
 13684                           ;lcd.c: 17: lcdNibble(data);
 13685  0040BA  0100               	movlb	0	; () banked
 13686  0040BC  5182               	movf	lcdInst@data& (0+255),w,b
 13687  0040BE  EC72  F01B         	call	_lcdNibble
 13688  0040C2  0012               	return		;funcret
 13689  0040C4                     __end_of_lcdInst:
 13690                           	opt stack 0
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           intcon	equ	0xFF2
 13698                           intcon2	equ	0xFF1
 13699                           intcon3	equ	0xFF0
 13700                           indf0	equ	0xFEF
 13701                           postinc0	equ	0xFEE
 13702                           fsr0h	equ	0xFEA
 13703                           fsr0l	equ	0xFE9
 13704                           wreg	equ	0xFE8
 13705                           postdec1	equ	0xFE5
 13706                           fsr1l	equ	0xFE1
 13707                           indf2	equ	0xFDF
 13708                           postinc2	equ	0xFDE
 13709                           postdec2	equ	0xFDD
 13710                           fsr2h	equ	0xFDA
 13711                           fsr2l	equ	0xFD9
 13712                           status	equ	0xFD8
 13713                           
 13714 ;; *************** function _lcdNibble *****************
 13715 ;; Defined at:
 13716 ;;		line 25 in file "lcd.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;  data            1    wreg     unsigned char 
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;  data            1    1[BANK0 ] unsigned char 
 13721 ;;  temp            1    0[BANK0 ] unsigned char 
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		wreg, status,2, status,0
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;Total ram usage:        2 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    7
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_lcdInst
 13742 ;;		_putch
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           	psect	text52
 13747  0036E4                     __ptext52:
 13748                           	opt stack 0
 13749  0036E4                     _lcdNibble:
 13750                           	opt stack 20
 13751                           
 13752                           ;incstack = 0
 13753                           ;lcdNibble@data stored from wreg
 13754  0036E4  0100               	movlb	0	; () banked
 13755  0036E6  6F81               	movwf	lcdNibble@data& (0+255),b
 13756                           
 13757                           ;lcd.c: 27: char temp = data & 0xF0;
 13758  0036E8  0100               	movlb	0	; () banked
 13759  0036EA  5181               	movf	lcdNibble@data& (0+255),w,b
 13760  0036EC  0BF0               	andlw	240
 13761  0036EE  0100               	movlb	0	; () banked
 13762  0036F0  6F80               	movwf	lcdNibble@temp& (0+255),b
 13763                           
 13764                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13765  0036F2  508C               	movf	3980,w,c	;volatile
 13766  0036F4  0B0F               	andlw	15
 13767  0036F6  6E8C               	movwf	3980,c	;volatile
 13768                           
 13769                           ;lcd.c: 29: LATD = temp | LATD;
 13770  0036F8  0100               	movlb	0	; () banked
 13771  0036FA  5180               	movf	lcdNibble@temp& (0+255),w,b
 13772  0036FC  108C               	iorwf	3980,w,c	;volatile
 13773  0036FE  6E8C               	movwf	3980,c	;volatile
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13777  003700  868C               	bsf	3980,3,c	;volatile
 13778                           
 13779                           ; BSR set to: 0
 13780                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13781  003702  0E42               	movlw	66
 13782  003704                     u7437:
 13783  003704  2EE8               	decfsz	wreg,f,c
 13784  003706  D7FE               	bra	u7437
 13785  003708  D000               	nop2	
 13786                           
 13787                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13788  00370A  968C               	bcf	3980,3,c	;volatile
 13789                           
 13790                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13791  00370C  0E42               	movlw	66
 13792  00370E                     u7447:
 13793  00370E  2EE8               	decfsz	wreg,f,c
 13794  003710  D7FE               	bra	u7447
 13795  003712  D000               	nop2	
 13796                           
 13797                           ;lcd.c: 36: data = data << 4;
 13798  003714  0100               	movlb	0	; () banked
 13799  003716  3981               	swapf	lcdNibble@data& (0+255),w,b
 13800  003718  0BF0               	andlw	240
 13801  00371A  0100               	movlb	0	; () banked
 13802  00371C  6F81               	movwf	lcdNibble@data& (0+255),b
 13803                           
 13804                           ;lcd.c: 38: temp = data & 0xF0;
 13805  00371E  0100               	movlb	0	; () banked
 13806  003720  5181               	movf	lcdNibble@data& (0+255),w,b
 13807  003722  0BF0               	andlw	240
 13808  003724  0100               	movlb	0	; () banked
 13809  003726  6F80               	movwf	lcdNibble@temp& (0+255),b
 13810                           
 13811                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13812  003728  508C               	movf	3980,w,c	;volatile
 13813  00372A  0B0F               	andlw	15
 13814  00372C  6E8C               	movwf	3980,c	;volatile
 13815                           
 13816                           ;lcd.c: 40: LATD = temp | LATD;
 13817  00372E  0100               	movlb	0	; () banked
 13818  003730  5180               	movf	lcdNibble@temp& (0+255),w,b
 13819  003732  108C               	iorwf	3980,w,c	;volatile
 13820  003734  6E8C               	movwf	3980,c	;volatile
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13824  003736  868C               	bsf	3980,3,c	;volatile
 13825                           
 13826                           ; BSR set to: 0
 13827                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13828  003738  0E42               	movlw	66
 13829  00373A                     u7457:
 13830  00373A  2EE8               	decfsz	wreg,f,c
 13831  00373C  D7FE               	bra	u7457
 13832  00373E  D000               	nop2	
 13833                           
 13834                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13835  003740  968C               	bcf	3980,3,c	;volatile
 13836                           
 13837                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13838  003742  0E42               	movlw	66
 13839  003744                     u7467:
 13840  003744  2EE8               	decfsz	wreg,f,c
 13841  003746  D7FE               	bra	u7467
 13842  003748  D000               	nop2	
 13843  00374A  0012               	return		;funcret
 13844  00374C                     __end_of_lcdNibble:
 13845                           	opt stack 0
 13846                           tblptru	equ	0xFF8
 13847                           tblptrh	equ	0xFF7
 13848                           tblptrl	equ	0xFF6
 13849                           tablat	equ	0xFF5
 13850                           prodh	equ	0xFF4
 13851                           prodl	equ	0xFF3
 13852                           intcon	equ	0xFF2
 13853                           intcon2	equ	0xFF1
 13854                           intcon3	equ	0xFF0
 13855                           indf0	equ	0xFEF
 13856                           postinc0	equ	0xFEE
 13857                           fsr0h	equ	0xFEA
 13858                           fsr0l	equ	0xFE9
 13859                           wreg	equ	0xFE8
 13860                           postdec1	equ	0xFE5
 13861                           fsr1l	equ	0xFE1
 13862                           indf2	equ	0xFDF
 13863                           postinc2	equ	0xFDE
 13864                           postdec2	equ	0xFDD
 13865                           fsr2h	equ	0xFDA
 13866                           fsr2l	equ	0xFD9
 13867                           status	equ	0xFD8
 13868                           
 13869 ;; *************** function _EEPROMTest *****************
 13870 ;; Defined at:
 13871 ;;		line 388 in file "Test.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;                  1    wreg      void 
 13878 ;; Registers used:
 13879 ;;		None
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;Total ram usage:        0 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    7
 13892 ;; This function calls:
 13893 ;;		Nothing
 13894 ;; This function is called by:
 13895 ;;		_Test
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           	psect	text53
 13900  004118                     __ptext53:
 13901                           	opt stack 0
 13902  004118                     _EEPROMTest:
 13903                           	opt stack 22
 13904                           
 13905                           ;incstack = 0
 13906  004118  0012               	return		;funcret
 13907  00411A                     __end_of_EEPROMTest:
 13908                           	opt stack 0
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           intcon3	equ	0xFF0
 13918                           indf0	equ	0xFEF
 13919                           postinc0	equ	0xFEE
 13920                           fsr0h	equ	0xFEA
 13921                           fsr0l	equ	0xFE9
 13922                           wreg	equ	0xFE8
 13923                           postdec1	equ	0xFE5
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _handler *****************
 13933 ;; Defined at:
 13934 ;;		line 16 in file "interruptHandler.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;		None
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;		None
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:       16 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    6
 13955 ;; This function calls:
 13956 ;;		_printSortTimer
 13957 ;;		_updateMenu
 13958 ;; This function is called by:
 13959 ;;		Interrupt level 2
 13960 ;; This function uses a non-reentrant model
 13961 ;;
 13962                           
 13963                           	psect	intcode
 13964  000008                     __pintcode:
 13965                           	opt stack 0
 13966  000008                     _handler:
 13967                           	opt stack 18
 13968                           
 13969                           ;incstack = 0
 13970  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13971  00000A  EDFC  F012         	call	int_func,f	;refresh shadow registers
 13972                           tblptru	equ	0xFF8
 13973                           tblptrh	equ	0xFF7
 13974                           tblptrl	equ	0xFF6
 13975                           tablat	equ	0xFF5
 13976                           prodh	equ	0xFF4
 13977                           prodl	equ	0xFF3
 13978                           intcon	equ	0xFF2
 13979                           intcon2	equ	0xFF1
 13980                           intcon3	equ	0xFF0
 13981                           indf0	equ	0xFEF
 13982                           postinc0	equ	0xFEE
 13983                           fsr0h	equ	0xFEA
 13984                           fsr0l	equ	0xFE9
 13985                           wreg	equ	0xFE8
 13986                           postdec1	equ	0xFE5
 13987                           fsr1l	equ	0xFE1
 13988                           indf2	equ	0xFDF
 13989                           postinc2	equ	0xFDE
 13990                           postdec2	equ	0xFDD
 13991                           fsr2h	equ	0xFDA
 13992                           fsr2l	equ	0xFD9
 13993                           status	equ	0xFD8
 13994                           
 13995                           	psect	intcode_body
 13996  0025F8                     __pintcode_body:
 13997                           	opt stack 18
 13998  0025F8                     int_func:
 13999                           	opt stack 18
 14000  0025F8  0006               	pop		; remove dummy address from shadow register refresh
 14001  0025FA  CFFA F04D          	movff	pclath,??_handler+2
 14002  0025FE  CFFB F04E          	movff	pclatu,??_handler+3
 14003  002602  CFE9 F04F          	movff	fsr0l,??_handler+4
 14004  002606  CFEA F050          	movff	fsr0h,??_handler+5
 14005  00260A  CFE1 F051          	movff	fsr1l,??_handler+6
 14006  00260E  CFE2 F052          	movff	fsr1h,??_handler+7
 14007  002612  CFD9 F053          	movff	fsr2l,??_handler+8
 14008  002616  CFDA F054          	movff	fsr2h,??_handler+9
 14009  00261A  CFF3 F055          	movff	prodl,??_handler+10
 14010  00261E  CFF4 F056          	movff	prodh,??_handler+11
 14011  002622  CFF6 F057          	movff	tblptrl,??_handler+12
 14012  002626  CFF7 F058          	movff	tblptrh,??_handler+13
 14013  00262A  CFF8 F059          	movff	tblptru,??_handler+14
 14014  00262E  CFF5 F05A          	movff	tablat,??_handler+15
 14015                           
 14016                           ;interruptHandler.c: 18: if(INT1IF){
 14017  002632  A0F0               	btfss	intcon3,0,c	;volatile
 14018  002634  D020               	goto	i2l7588
 14019                           
 14020                           ;interruptHandler.c: 19: INT1IF = 0;
 14021  002636  90F0               	bcf	intcon3,0,c	;volatile
 14022                           
 14023                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 14024  002638  0100               	movlb	0	; () banked
 14025  00263A  51FC               	movf	_machine_state& (0+255),w,b
 14026  00263C  A4D8               	btfss	status,2,c
 14027  00263E  D01B               	goto	i2l7588
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 14031  002640  3881               	swapf	3969,w,c	;volatile
 14032  002642  0B0F               	andlw	15
 14033  002644  0B0F               	andlw	15
 14034  002646  6E4B               	movwf	??_handler& (0+255),c
 14035  002648  6A4C               	clrf	(??_handler+1)& (0+255),c
 14036  00264A  0E4F               	movlw	low _keys
 14037  00264C  244B               	addwf	??_handler,w,c
 14038  00264E  6EF6               	movwf	tblptrl,c
 14039  002650  0EFB               	movlw	high _keys
 14040  002652  204C               	addwfc	??_handler+1,w,c
 14041  002654  6EF7               	movwf	tblptrh,c
 14042  002656                     	if	1	;There are 3 active tblptr bytes
 14043  002656  6AF8               	clrf	tblptru,c
 14044  002658  0E00               	movlw	low (__mediumconst shr (0+16))
 14045  00265A  22F8               	addwfc	tblptru,f,c
 14046  00265C                     	endif
 14047  00265C  0008               	tblrd		*
 14048  00265E  CFF5 F07D          	movff	tablat,_input	;volatile
 14049                           
 14050                           ; BSR set to: 0
 14051                           ;interruptHandler.c: 23: if(input == '*'){
 14052  002662  0E2A               	movlw	42
 14053  002664  187D               	xorwf	_input,w,c	;volatile
 14054  002666  A4D8               	btfss	status,2,c
 14055  002668  D004               	goto	i2l7586
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;interruptHandler.c: 24: machine_state = Testing_state;
 14059  00266A  0E03               	movlw	3
 14060  00266C  0100               	movlb	0	; () banked
 14061  00266E  6FFC               	movwf	_machine_state& (0+255),b
 14062                           
 14063                           ;interruptHandler.c: 25: }
 14064  002670  D002               	goto	i2l7588
 14065  002672                     i2l7586:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;interruptHandler.c: 26: else{
 14069                           ;interruptHandler.c: 27: updateMenu();
 14070  002672  ECCF  F00D         	call	_updateMenu	;wreg free
 14071  002676                     i2l7588:
 14072                           
 14073                           ;interruptHandler.c: 28: }
 14074                           ;interruptHandler.c: 29: }
 14075                           ;interruptHandler.c: 30: }
 14076                           ;interruptHandler.c: 33: if(TMR0IF){
 14077  002676  A4F2               	btfss	intcon,2,c	;volatile
 14078  002678  D00C               	goto	i2l7602
 14079                           
 14080                           ;interruptHandler.c: 34: TMR0IF = 0;
 14081  00267A  94F2               	bcf	intcon,2,c	;volatile
 14082                           
 14083                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 14084  00267C  0100               	movlb	0	; () banked
 14085  00267E  05FC               	decf	_machine_state& (0+255),w,b
 14086  002680  A4D8               	btfss	status,2,c
 14087  002682  D007               	goto	i2l7602
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;interruptHandler.c: 36: printSortTimer();
 14091  002684  EC4A  F010         	call	_printSortTimer	;wreg free
 14092                           
 14093                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 14094  002688  0E85               	movlw	133
 14095  00268A  6ED7               	movwf	4055,c	;volatile
 14096                           
 14097                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 14098  00268C  0EEE               	movlw	238
 14099  00268E  6ED6               	movwf	4054,c	;volatile
 14100                           
 14101                           ;interruptHandler.c: 40: TMR0ON = 1;
 14102  002690  8ED5               	bsf	4053,7,c	;volatile
 14103  002692                     i2l7602:
 14104                           
 14105                           ;interruptHandler.c: 41: }
 14106                           ;interruptHandler.c: 42: }
 14107                           ;interruptHandler.c: 45: if(TMR1IF){
 14108  002692  A09E               	btfss	3998,0,c	;volatile
 14109  002694  D024               	goto	i2l7626
 14110                           
 14111                           ;interruptHandler.c: 46: TMR1IF = 0;
 14112  002696  909E               	bcf	3998,0,c	;volatile
 14113                           
 14114                           ;interruptHandler.c: 47: TMR1ON = 0;
 14115  002698  90CD               	bcf	4045,0,c	;volatile
 14116                           
 14117                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 14118  00269A  0100               	movlb	0	; () banked
 14119  00269C  05FC               	decf	_machine_state& (0+255),w,b
 14120  00269E  A4D8               	btfss	status,2,c
 14121  0026A0  D01E               	goto	i2l7626
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;interruptHandler.c: 49: if(was_low_1){
 14125  0026A2  5079               	movf	_was_low_1,w,c	;volatile
 14126  0026A4  107A               	iorwf	_was_low_1+1,w,c	;volatile
 14127  0026A6  B4D8               	btfsc	status,2,c
 14128  0026A8  D00A               	goto	i2l831
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 14132  0026AA  828B               	bsf	3979,1,c	;volatile
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;interruptHandler.c: 51: was_low_1 = 0;
 14136  0026AC  0E00               	movlw	0
 14137  0026AE  6E7A               	movwf	_was_low_1+1,c	;volatile
 14138  0026B0  0E00               	movlw	0
 14139  0026B2  6E79               	movwf	_was_low_1,c	;volatile
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 14143  0026B4  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 14147  0026B8  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 14148                           
 14149                           ;interruptHandler.c: 54: }
 14150  0026BC  D00F               	goto	i2l7624
 14151  0026BE                     i2l831:
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;interruptHandler.c: 55: else{
 14155                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 14156  0026BE  928B               	bcf	3979,1,c	;volatile
 14157                           
 14158                           ; BSR set to: 0
 14159                           ;interruptHandler.c: 57: was_low_1 = 1;
 14160  0026C0  0E00               	movlw	0
 14161  0026C2  6E7A               	movwf	_was_low_1+1,c	;volatile
 14162  0026C4  0E01               	movlw	1
 14163  0026C6  6E79               	movwf	_was_low_1,c	;volatile
 14164                           
 14165                           ; BSR set to: 0
 14166                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 14167  0026C8  0101               	movlb	1	; () banked
 14168  0026CA  511C               	movf	_servoTimes& (0+255),w,b
 14169  0026CC  0800               	sublw	0
 14170  0026CE  0F20               	addlw	32
 14171  0026D0  6ECF               	movwf	4047,c	;volatile
 14172                           
 14173                           ; BSR set to: 1
 14174                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 14175  0026D2  0101               	movlb	1	; () banked
 14176  0026D4  511E               	movf	(_servoTimes+2)& (0+255),w,b
 14177  0026D6  0800               	sublw	0
 14178  0026D8  0F20               	addlw	32
 14179  0026DA  6ECE               	movwf	4046,c	;volatile
 14180  0026DC                     i2l7624:
 14181                           
 14182                           ;interruptHandler.c: 60: }
 14183                           ;interruptHandler.c: 61: TMR1ON = 1;
 14184  0026DC  80CD               	bsf	4045,0,c	;volatile
 14185  0026DE                     i2l7626:
 14186                           
 14187                           ;interruptHandler.c: 62: }
 14188                           ;interruptHandler.c: 63: }
 14189                           ;interruptHandler.c: 65: if(TMR3IF){
 14190  0026DE  A2A1               	btfss	4001,1,c	;volatile
 14191  0026E0  D024               	goto	i2l837
 14192                           
 14193                           ;interruptHandler.c: 66: TMR3IF = 0;
 14194  0026E2  92A1               	bcf	4001,1,c	;volatile
 14195                           
 14196                           ;interruptHandler.c: 67: TMR3ON = 0;
 14197  0026E4  90B1               	bcf	4017,0,c	;volatile
 14198                           
 14199                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 14200  0026E6  0100               	movlb	0	; () banked
 14201  0026E8  05FC               	decf	_machine_state& (0+255),w,b
 14202  0026EA  A4D8               	btfss	status,2,c
 14203  0026EC  D01E               	goto	i2l837
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;interruptHandler.c: 69: if(was_low_3){
 14207  0026EE  507B               	movf	_was_low_3,w,c	;volatile
 14208  0026F0  107C               	iorwf	_was_low_3+1,w,c	;volatile
 14209  0026F2  B4D8               	btfsc	status,2,c
 14210  0026F4  D00A               	goto	i2l835
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 14214  0026F6  848B               	bsf	3979,2,c	;volatile
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;interruptHandler.c: 71: was_low_3 = 0;
 14218  0026F8  0E00               	movlw	0
 14219  0026FA  6E7C               	movwf	_was_low_3+1,c	;volatile
 14220  0026FC  0E00               	movlw	0
 14221  0026FE  6E7B               	movwf	_was_low_3,c	;volatile
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 14225  002700  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 14229  002704  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 14230                           
 14231                           ;interruptHandler.c: 74: }
 14232  002708  D00F               	goto	i2l7648
 14233  00270A                     i2l835:
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;interruptHandler.c: 75: else{
 14237                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 14238  00270A  948B               	bcf	3979,2,c	;volatile
 14239                           
 14240                           ; BSR set to: 0
 14241                           ;interruptHandler.c: 77: was_low_3 = 1;
 14242  00270C  0E00               	movlw	0
 14243  00270E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14244  002710  0E01               	movlw	1
 14245  002712  6E7B               	movwf	_was_low_3,c	;volatile
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 14249  002714  0101               	movlb	1	; () banked
 14250  002716  5120               	movf	(_servoTimes+4)& (0+255),w,b
 14251  002718  0800               	sublw	0
 14252  00271A  0F20               	addlw	32
 14253  00271C  6EB3               	movwf	4019,c	;volatile
 14254                           
 14255                           ; BSR set to: 1
 14256                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 14257  00271E  0101               	movlb	1	; () banked
 14258  002720  5122               	movf	(_servoTimes+6)& (0+255),w,b
 14259  002722  0800               	sublw	0
 14260  002724  0F20               	addlw	32
 14261  002726  6EB2               	movwf	4018,c	;volatile
 14262  002728                     i2l7648:
 14263                           
 14264                           ;interruptHandler.c: 80: }
 14265                           ;interruptHandler.c: 81: TMR3ON = 1;
 14266  002728  80B1               	bsf	4017,0,c	;volatile
 14267  00272A                     i2l837:
 14268  00272A  C05A  FFF5         	movff	??_handler+15,tablat
 14269  00272E  C059  FFF8         	movff	??_handler+14,tblptru
 14270  002732  C058  FFF7         	movff	??_handler+13,tblptrh
 14271  002736  C057  FFF6         	movff	??_handler+12,tblptrl
 14272  00273A  C056  FFF4         	movff	??_handler+11,prodh
 14273  00273E  C055  FFF3         	movff	??_handler+10,prodl
 14274  002742  C054  FFDA         	movff	??_handler+9,fsr2h
 14275  002746  C053  FFD9         	movff	??_handler+8,fsr2l
 14276  00274A  C052  FFE2         	movff	??_handler+7,fsr1h
 14277  00274E  C051  FFE1         	movff	??_handler+6,fsr1l
 14278  002752  C050  FFEA         	movff	??_handler+5,fsr0h
 14279  002756  C04F  FFE9         	movff	??_handler+4,fsr0l
 14280  00275A  C04E  FFFB         	movff	??_handler+3,pclatu
 14281  00275E  C04D  FFFA         	movff	??_handler+2,pclath
 14282  002762  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14283  002764  0011               	retfie		f
 14284  002766                     __end_of_handler:
 14285                           	opt stack 0
 14286                           pclatu	equ	0xFFB
 14287                           pclath	equ	0xFFA
 14288                           tblptru	equ	0xFF8
 14289                           tblptrh	equ	0xFF7
 14290                           tblptrl	equ	0xFF6
 14291                           tablat	equ	0xFF5
 14292                           prodh	equ	0xFF4
 14293                           prodl	equ	0xFF3
 14294                           intcon	equ	0xFF2
 14295                           intcon2	equ	0xFF1
 14296                           intcon3	equ	0xFF0
 14297                           indf0	equ	0xFEF
 14298                           postinc0	equ	0xFEE
 14299                           fsr0h	equ	0xFEA
 14300                           fsr0l	equ	0xFE9
 14301                           wreg	equ	0xFE8
 14302                           postdec1	equ	0xFE5
 14303                           fsr1h	equ	0xFE2
 14304                           fsr1l	equ	0xFE1
 14305                           indf2	equ	0xFDF
 14306                           postinc2	equ	0xFDE
 14307                           postdec2	equ	0xFDD
 14308                           fsr2h	equ	0xFDA
 14309                           fsr2l	equ	0xFD9
 14310                           status	equ	0xFD8
 14311                           
 14312 ;; *************** function _updateMenu *****************
 14313 ;; Defined at:
 14314 ;;		line 211 in file "UI.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;		None
 14317 ;; Auto vars:     Size  Location     Type
 14318 ;;		None
 14319 ;; Return value:  Size  Location     Type
 14320 ;;                  1    wreg      void 
 14321 ;; Registers used:
 14322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14323 ;; Tracked objects:
 14324 ;;		On entry : 0/0
 14325 ;;		On exit  : 0/0
 14326 ;;		Unchanged: 0/0
 14327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;Total ram usage:        2 bytes
 14333 ;; Hardware stack levels used:    1
 14334 ;; Hardware stack levels required when called:    5
 14335 ;; This function calls:
 14336 ;;		_change_state_to_logs_11
 14337 ;;		_change_state_to_logs_12
 14338 ;;		_change_state_to_logs_22
 14339 ;;		_change_state_to_logs_23
 14340 ;;		_change_state_to_logs_33
 14341 ;;		_change_state_to_logs_34
 14342 ;;		_change_state_to_menu_11
 14343 ;;		_change_state_to_menu_23
 14344 ;;		_dispLogs
 14345 ;;		_inputHandler
 14346 ;;		i2_change_state_to_menu_12
 14347 ;;		i2_change_state_to_menu_22
 14348 ;;		i2_change_state_to_menu_start
 14349 ;; This function is called by:
 14350 ;;		_handler
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           	psect	text55
 14355  001B9E                     __ptext55:
 14356                           	opt stack 0
 14357  001B9E                     _updateMenu:
 14358                           	opt stack 18
 14359                           
 14360                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 14361                           
 14362                           ;incstack = 0
 14363  001B9E  0E00               	movlw	0
 14364  001BA0  6E78               	movwf	_up+1,c
 14365  001BA2  0E00               	movlw	0
 14366  001BA4  6E77               	movwf	_up,c
 14367  001BA6  0E00               	movlw	0
 14368  001BA8  6E6A               	movwf	_down+1,c
 14369  001BAA  0E00               	movlw	0
 14370  001BAC  6E69               	movwf	_down,c
 14371  001BAE  0E00               	movlw	0
 14372  001BB0  6E6C               	movwf	_enter+1,c
 14373  001BB2  0E00               	movlw	0
 14374  001BB4  6E6B               	movwf	_enter,c
 14375  001BB6  0E00               	movlw	0
 14376  001BB8  6E5C               	movwf	_back+1,c
 14377  001BBA  0E00               	movlw	0
 14378  001BBC  6E5B               	movwf	_back,c
 14379                           
 14380                           ;UI.c: 213: (INTCONbits.GIE = 0);
 14381  001BBE  9EF2               	bcf	intcon,7,c	;volatile
 14382                           
 14383                           ;UI.c: 215: if (inputHandler()
 14384                           ;UI.c: 218: ){
 14385  001BC0  EC43  F011         	call	_inputHandler	;wreg free
 14386  001BC4  502A               	movf	?_inputHandler,w,c
 14387  001BC6  102B               	iorwf	?_inputHandler+1,w,c
 14388  001BC8  A4D8               	btfss	status,2,c
 14389  001BCA  D112               	goto	i2l7332
 14390  001BCC  D146               	goto	i2l254
 14391  001BCE                     i2l7184:
 14392                           
 14393                           ;UI.c: 222: change_state_to_menu_11();
 14394  001BCE  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 14395                           
 14396                           ;UI.c: 223: break;
 14397  001BD2  D143               	goto	i2l254
 14398  001BD4                     i2l7186:
 14399                           
 14400                           ;UI.c: 226: if(up){
 14401  001BD4  5077               	movf	_up,w,c
 14402  001BD6  1078               	iorwf	_up+1,w,c
 14403  001BD8  B4D8               	btfsc	status,2,c
 14404  001BDA  D003               	goto	i2l7190
 14405                           
 14406                           ;UI.c: 227: change_state_to_menu_23();
 14407  001BDC  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14408                           
 14409                           ;UI.c: 228: }
 14410  001BE0  D13C               	goto	i2l254
 14411  001BE2                     i2l7190:
 14412                           
 14413                           ;UI.c: 229: else if(down){
 14414  001BE2  5069               	movf	_down,w,c
 14415  001BE4  106A               	iorwf	_down+1,w,c
 14416  001BE6  B4D8               	btfsc	status,2,c
 14417  001BE8  D003               	goto	i2l7194
 14418                           
 14419                           ;UI.c: 230: change_state_to_menu_12();
 14420  001BEA  EC5F  F01E         	call	i2_change_state_to_menu_12	;wreg free
 14421                           
 14422                           ;UI.c: 231: }
 14423  001BEE  D135               	goto	i2l254
 14424  001BF0                     i2l7194:
 14425                           
 14426                           ;UI.c: 232: else if(enter){
 14427  001BF0  506B               	movf	_enter,w,c
 14428  001BF2  106C               	iorwf	_enter+1,w,c
 14429  001BF4  B4D8               	btfsc	status,2,c
 14430  001BF6  D131               	goto	i2l254
 14431                           
 14432                           ;UI.c: 233: change_state_to_menu_start();
 14433  001BF8  EC8E  F01F         	call	i2_change_state_to_menu_start	;wreg free
 14434                           
 14435                           ;UI.c: 234: }
 14436                           ;UI.c: 235: break;
 14437  001BFC  D12E               	goto	i2l254
 14438  001BFE                     i2l7198:
 14439                           
 14440                           ;UI.c: 238: if(up){
 14441  001BFE  5077               	movf	_up,w,c
 14442  001C00  1078               	iorwf	_up+1,w,c
 14443  001C02  B4D8               	btfsc	status,2,c
 14444  001C04  D003               	goto	i2l7202
 14445                           
 14446                           ;UI.c: 239: change_state_to_menu_11();
 14447  001C06  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 14448                           
 14449                           ;UI.c: 240: }
 14450  001C0A  D127               	goto	i2l254
 14451  001C0C                     i2l7202:
 14452                           
 14453                           ;UI.c: 241: else if(down){
 14454  001C0C  5069               	movf	_down,w,c
 14455  001C0E  106A               	iorwf	_down+1,w,c
 14456  001C10  B4D8               	btfsc	status,2,c
 14457  001C12  D011               	goto	i2l7218
 14458                           
 14459                           ;UI.c: 242: change_state_to_menu_23();
 14460  001C14  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14461                           
 14462                           ;UI.c: 243: }
 14463  001C18  D120               	goto	i2l254
 14464  001C1A                     i2l7210:
 14465                           
 14466                           ;UI.c: 250: if(up){
 14467  001C1A  5077               	movf	_up,w,c
 14468  001C1C  1078               	iorwf	_up+1,w,c
 14469  001C1E  B4D8               	btfsc	status,2,c
 14470  001C20  D003               	goto	i2l7214
 14471                           
 14472                           ;UI.c: 251: change_state_to_menu_11();
 14473  001C22  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 14474                           
 14475                           ;UI.c: 252: }
 14476  001C26  D119               	goto	i2l254
 14477  001C28                     i2l7214:
 14478                           
 14479                           ;UI.c: 253: else if(down){
 14480  001C28  5069               	movf	_down,w,c
 14481  001C2A  106A               	iorwf	_down+1,w,c
 14482  001C2C  B4D8               	btfsc	status,2,c
 14483  001C2E  D003               	goto	i2l7218
 14484                           
 14485                           ;UI.c: 254: change_state_to_menu_23();
 14486  001C30  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14487                           
 14488                           ;UI.c: 255: }
 14489  001C34  D112               	goto	i2l254
 14490  001C36                     i2l7218:
 14491                           
 14492                           ;UI.c: 256: else if(enter){
 14493  001C36  506B               	movf	_enter,w,c
 14494  001C38  106C               	iorwf	_enter+1,w,c
 14495  001C3A  B4D8               	btfsc	status,2,c
 14496  001C3C  D10E               	goto	i2l254
 14497                           
 14498                           ;UI.c: 257: machine_state = Sorting_state;
 14499  001C3E  0E01               	movlw	1
 14500  001C40  0100               	movlb	0	; () banked
 14501  001C42  6FFC               	movwf	_machine_state& (0+255),b
 14502                           
 14503                           ; BSR set to: 0
 14504                           ;UI.c: 258: }
 14505                           ;UI.c: 259: break;
 14506                           
 14507                           ; BSR set to: 0
 14508                           
 14509                           ; BSR set to: 0
 14510  001C44  D10A               	goto	i2l254
 14511  001C46                     i2l7222:
 14512                           
 14513                           ;UI.c: 262: if(up){
 14514  001C46  5077               	movf	_up,w,c
 14515  001C48  1078               	iorwf	_up+1,w,c
 14516  001C4A  B4D8               	btfsc	status,2,c
 14517  001C4C  D003               	goto	i2l7226
 14518                           
 14519                           ;UI.c: 263: change_state_to_menu_22();
 14520  001C4E  EC47  F01E         	call	i2_change_state_to_menu_22	;wreg free
 14521                           
 14522                           ;UI.c: 264: }
 14523  001C52  D103               	goto	i2l254
 14524  001C54                     i2l7226:
 14525                           
 14526                           ;UI.c: 265: else if(down){
 14527  001C54  5069               	movf	_down,w,c
 14528  001C56  106A               	iorwf	_down+1,w,c
 14529  001C58  B4D8               	btfsc	status,2,c
 14530  001C5A  D003               	goto	i2l7230
 14531                           
 14532                           ;UI.c: 266: change_state_to_menu_11();
 14533  001C5C  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 14534                           
 14535                           ;UI.c: 267: }
 14536  001C60  D0FC               	goto	i2l254
 14537  001C62                     i2l7230:
 14538                           
 14539                           ;UI.c: 268: else if(enter){
 14540  001C62  506B               	movf	_enter,w,c
 14541  001C64  106C               	iorwf	_enter+1,w,c
 14542  001C66  B4D8               	btfsc	status,2,c
 14543  001C68  D0F8               	goto	i2l254
 14544                           
 14545                           ;UI.c: 269: change_state_to_logs_11();
 14546  001C6A  EC07  F01F         	call	_change_state_to_logs_11	;wreg free
 14547                           
 14548                           ;UI.c: 270: }
 14549                           ;UI.c: 271: break;
 14550  001C6E  D0F5               	goto	i2l254
 14551  001C70                     i2l7234:
 14552                           
 14553                           ;UI.c: 274: if(up){
 14554  001C70  5077               	movf	_up,w,c
 14555  001C72  1078               	iorwf	_up+1,w,c
 14556  001C74  B4D8               	btfsc	status,2,c
 14557  001C76  D003               	goto	i2l7238
 14558                           
 14559                           ;UI.c: 275: change_state_to_logs_34();
 14560  001C78  ECA7  F01E         	call	_change_state_to_logs_34	;wreg free
 14561                           
 14562                           ;UI.c: 276: }
 14563  001C7C  D0EE               	goto	i2l254
 14564  001C7E                     i2l7238:
 14565                           
 14566                           ;UI.c: 277: else if(down){
 14567  001C7E  5069               	movf	_down,w,c
 14568  001C80  106A               	iorwf	_down+1,w,c
 14569  001C82  B4D8               	btfsc	status,2,c
 14570  001C84  D003               	goto	i2l7242
 14571                           
 14572                           ;UI.c: 278: change_state_to_logs_12();
 14573  001C86  ECEF  F01E         	call	_change_state_to_logs_12	;wreg free
 14574                           
 14575                           ;UI.c: 279: }
 14576  001C8A  D0E7               	goto	i2l254
 14577  001C8C                     i2l7242:
 14578                           
 14579                           ;UI.c: 280: else if(enter){
 14580  001C8C  506B               	movf	_enter,w,c
 14581  001C8E  106C               	iorwf	_enter+1,w,c
 14582  001C90  B4D8               	btfsc	status,2,c
 14583  001C92  D007               	goto	i2l7246
 14584                           
 14585                           ;UI.c: 281: dispLogs(1);
 14586  001C94  0E00               	movlw	0
 14587  001C96  6E13               	movwf	dispLogs@myLog+1,c
 14588  001C98  0E01               	movlw	1
 14589  001C9A  6E12               	movwf	dispLogs@myLog,c
 14590  001C9C  ECDA  F01F         	call	_dispLogs	;wreg free
 14591                           
 14592                           ;UI.c: 282: }
 14593  001CA0  D0DC               	goto	i2l254
 14594  001CA2                     i2l7246:
 14595                           
 14596                           ;UI.c: 283: else if(back){
 14597  001CA2  505B               	movf	_back,w,c
 14598  001CA4  105C               	iorwf	_back+1,w,c
 14599  001CA6  B4D8               	btfsc	status,2,c
 14600  001CA8  D0D8               	goto	i2l254
 14601                           
 14602                           ;UI.c: 284: change_state_to_menu_23();
 14603  001CAA  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14604                           
 14605                           ;UI.c: 285: }
 14606                           ;UI.c: 286: break;
 14607  001CAE  D0D5               	goto	i2l254
 14608  001CB0                     i2l7250:
 14609                           
 14610                           ;UI.c: 289: if(up){
 14611  001CB0  5077               	movf	_up,w,c
 14612  001CB2  1078               	iorwf	_up+1,w,c
 14613  001CB4  B4D8               	btfsc	status,2,c
 14614  001CB6  D003               	goto	i2l7254
 14615                           
 14616                           ;UI.c: 290: change_state_to_logs_11();
 14617  001CB8  EC07  F01F         	call	_change_state_to_logs_11	;wreg free
 14618                           
 14619                           ;UI.c: 291: }
 14620  001CBC  D0CE               	goto	i2l254
 14621  001CBE                     i2l7254:
 14622                           
 14623                           ;UI.c: 292: else if(down){
 14624  001CBE  5069               	movf	_down,w,c
 14625  001CC0  106A               	iorwf	_down+1,w,c
 14626  001CC2  B4D8               	btfsc	status,2,c
 14627  001CC4  D003               	goto	i2l7258
 14628                           
 14629                           ;UI.c: 293: change_state_to_logs_23();
 14630  001CC6  EC36  F01F         	call	_change_state_to_logs_23	;wreg free
 14631                           
 14632                           ;UI.c: 294: }
 14633  001CCA  D0C7               	goto	i2l254
 14634  001CCC                     i2l7258:
 14635                           
 14636                           ;UI.c: 295: else if(enter){
 14637  001CCC  506B               	movf	_enter,w,c
 14638  001CCE  106C               	iorwf	_enter+1,w,c
 14639  001CD0  B4D8               	btfsc	status,2,c
 14640  001CD2  D007               	goto	i2l7262
 14641                           
 14642                           ;UI.c: 296: dispLogs(2);
 14643  001CD4  0E00               	movlw	0
 14644  001CD6  6E13               	movwf	dispLogs@myLog+1,c
 14645  001CD8  0E02               	movlw	2
 14646  001CDA  6E12               	movwf	dispLogs@myLog,c
 14647  001CDC  ECDA  F01F         	call	_dispLogs	;wreg free
 14648                           
 14649                           ;UI.c: 297: }
 14650  001CE0  D0BC               	goto	i2l254
 14651  001CE2                     i2l7262:
 14652                           
 14653                           ;UI.c: 298: else if(back){
 14654  001CE2  505B               	movf	_back,w,c
 14655  001CE4  105C               	iorwf	_back+1,w,c
 14656  001CE6  B4D8               	btfsc	status,2,c
 14657  001CE8  D0B8               	goto	i2l254
 14658                           
 14659                           ;UI.c: 299: change_state_to_menu_23();
 14660  001CEA  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14661                           
 14662                           ;UI.c: 300: }
 14663                           ;UI.c: 301: break;
 14664  001CEE  D0B5               	goto	i2l254
 14665  001CF0                     i2l7266:
 14666                           
 14667                           ;UI.c: 304: if(up){
 14668  001CF0  5077               	movf	_up,w,c
 14669  001CF2  1078               	iorwf	_up+1,w,c
 14670  001CF4  B4D8               	btfsc	status,2,c
 14671  001CF6  D003               	goto	i2l7270
 14672                           
 14673                           ;UI.c: 305: change_state_to_logs_11();
 14674  001CF8  EC07  F01F         	call	_change_state_to_logs_11	;wreg free
 14675                           
 14676                           ;UI.c: 306: }
 14677  001CFC  D0AE               	goto	i2l254
 14678  001CFE                     i2l7270:
 14679                           
 14680                           ;UI.c: 307: else if(down){
 14681  001CFE  5069               	movf	_down,w,c
 14682  001D00  106A               	iorwf	_down+1,w,c
 14683  001D02  B4D8               	btfsc	status,2,c
 14684  001D04  D003               	goto	i2l7274
 14685                           
 14686                           ;UI.c: 308: change_state_to_logs_23();
 14687  001D06  EC36  F01F         	call	_change_state_to_logs_23	;wreg free
 14688                           
 14689                           ;UI.c: 309: }
 14690  001D0A  D0A7               	goto	i2l254
 14691  001D0C                     i2l7274:
 14692                           
 14693                           ;UI.c: 310: else if(enter){
 14694  001D0C  506B               	movf	_enter,w,c
 14695  001D0E  106C               	iorwf	_enter+1,w,c
 14696  001D10  B4D8               	btfsc	status,2,c
 14697  001D12  D007               	goto	i2l7278
 14698                           
 14699                           ;UI.c: 311: dispLogs(2);
 14700  001D14  0E00               	movlw	0
 14701  001D16  6E13               	movwf	dispLogs@myLog+1,c
 14702  001D18  0E02               	movlw	2
 14703  001D1A  6E12               	movwf	dispLogs@myLog,c
 14704  001D1C  ECDA  F01F         	call	_dispLogs	;wreg free
 14705                           
 14706                           ;UI.c: 312: }
 14707  001D20  D09C               	goto	i2l254
 14708  001D22                     i2l7278:
 14709                           
 14710                           ;UI.c: 313: else if(back){
 14711  001D22  505B               	movf	_back,w,c
 14712  001D24  105C               	iorwf	_back+1,w,c
 14713  001D26  B4D8               	btfsc	status,2,c
 14714  001D28  D098               	goto	i2l254
 14715                           
 14716                           ;UI.c: 314: change_state_to_menu_23();
 14717  001D2A  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14718                           
 14719                           ;UI.c: 315: }
 14720                           ;UI.c: 316: break;
 14721  001D2E  D095               	goto	i2l254
 14722  001D30                     i2l7282:
 14723                           
 14724                           ;UI.c: 319: if(up){
 14725  001D30  5077               	movf	_up,w,c
 14726  001D32  1078               	iorwf	_up+1,w,c
 14727  001D34  B4D8               	btfsc	status,2,c
 14728  001D36  D003               	goto	i2l7286
 14729                           
 14730                           ;UI.c: 320: change_state_to_logs_22();
 14731  001D38  ECD7  F01E         	call	_change_state_to_logs_22	;wreg free
 14732                           
 14733                           ;UI.c: 321: }
 14734  001D3C  D08E               	goto	i2l254
 14735  001D3E                     i2l7286:
 14736                           
 14737                           ;UI.c: 322: else if(down){
 14738  001D3E  5069               	movf	_down,w,c
 14739  001D40  106A               	iorwf	_down+1,w,c
 14740  001D42  B4D8               	btfsc	status,2,c
 14741  001D44  D003               	goto	i2l7290
 14742                           
 14743                           ;UI.c: 323: change_state_to_logs_34();
 14744  001D46  ECA7  F01E         	call	_change_state_to_logs_34	;wreg free
 14745                           
 14746                           ;UI.c: 324: }
 14747  001D4A  D087               	goto	i2l254
 14748  001D4C                     i2l7290:
 14749                           
 14750                           ;UI.c: 325: else if(enter){
 14751  001D4C  506B               	movf	_enter,w,c
 14752  001D4E  106C               	iorwf	_enter+1,w,c
 14753  001D50  B4D8               	btfsc	status,2,c
 14754  001D52  D007               	goto	i2l7294
 14755                           
 14756                           ;UI.c: 326: dispLogs(3);
 14757  001D54  0E00               	movlw	0
 14758  001D56  6E13               	movwf	dispLogs@myLog+1,c
 14759  001D58  0E03               	movlw	3
 14760  001D5A  6E12               	movwf	dispLogs@myLog,c
 14761  001D5C  ECDA  F01F         	call	_dispLogs	;wreg free
 14762                           
 14763                           ;UI.c: 327: }
 14764  001D60  D07C               	goto	i2l254
 14765  001D62                     i2l7294:
 14766                           
 14767                           ;UI.c: 328: else if(back){
 14768  001D62  505B               	movf	_back,w,c
 14769  001D64  105C               	iorwf	_back+1,w,c
 14770  001D66  B4D8               	btfsc	status,2,c
 14771  001D68  D078               	goto	i2l254
 14772                           
 14773                           ;UI.c: 329: change_state_to_menu_23();
 14774  001D6A  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14775                           
 14776                           ;UI.c: 330: }
 14777                           ;UI.c: 331: break;
 14778  001D6E  D075               	goto	i2l254
 14779  001D70                     i2l7298:
 14780                           
 14781                           ;UI.c: 334: if(up){
 14782  001D70  5077               	movf	_up,w,c
 14783  001D72  1078               	iorwf	_up+1,w,c
 14784  001D74  B4D8               	btfsc	status,2,c
 14785  001D76  D003               	goto	i2l7302
 14786                           
 14787                           ;UI.c: 335: change_state_to_logs_22();
 14788  001D78  ECD7  F01E         	call	_change_state_to_logs_22	;wreg free
 14789                           
 14790                           ;UI.c: 336: }
 14791  001D7C  D06E               	goto	i2l254
 14792  001D7E                     i2l7302:
 14793                           
 14794                           ;UI.c: 337: else if(down){
 14795  001D7E  5069               	movf	_down,w,c
 14796  001D80  106A               	iorwf	_down+1,w,c
 14797  001D82  B4D8               	btfsc	status,2,c
 14798  001D84  D003               	goto	i2l7306
 14799                           
 14800                           ;UI.c: 338: change_state_to_logs_34();
 14801  001D86  ECA7  F01E         	call	_change_state_to_logs_34	;wreg free
 14802                           
 14803                           ;UI.c: 339: }
 14804  001D8A  D067               	goto	i2l254
 14805  001D8C                     i2l7306:
 14806                           
 14807                           ;UI.c: 340: else if(enter){
 14808  001D8C  506B               	movf	_enter,w,c
 14809  001D8E  106C               	iorwf	_enter+1,w,c
 14810  001D90  B4D8               	btfsc	status,2,c
 14811  001D92  D007               	goto	i2l7310
 14812                           
 14813                           ;UI.c: 341: dispLogs(3);
 14814  001D94  0E00               	movlw	0
 14815  001D96  6E13               	movwf	dispLogs@myLog+1,c
 14816  001D98  0E03               	movlw	3
 14817  001D9A  6E12               	movwf	dispLogs@myLog,c
 14818  001D9C  ECDA  F01F         	call	_dispLogs	;wreg free
 14819                           
 14820                           ;UI.c: 342: }
 14821  001DA0  D05C               	goto	i2l254
 14822  001DA2                     i2l7310:
 14823                           
 14824                           ;UI.c: 343: else if(back){
 14825  001DA2  505B               	movf	_back,w,c
 14826  001DA4  105C               	iorwf	_back+1,w,c
 14827  001DA6  B4D8               	btfsc	status,2,c
 14828  001DA8  D058               	goto	i2l254
 14829                           
 14830                           ;UI.c: 344: change_state_to_menu_23();
 14831  001DAA  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14832                           
 14833                           ;UI.c: 345: }
 14834                           ;UI.c: 346: break;
 14835  001DAE  D055               	goto	i2l254
 14836  001DB0                     i2l7314:
 14837                           
 14838                           ;UI.c: 349: if(up){
 14839  001DB0  5077               	movf	_up,w,c
 14840  001DB2  1078               	iorwf	_up+1,w,c
 14841  001DB4  B4D8               	btfsc	status,2,c
 14842  001DB6  D003               	goto	i2l7318
 14843                           
 14844                           ;UI.c: 350: change_state_to_logs_33();
 14845  001DB8  ECBF  F01E         	call	_change_state_to_logs_33	;wreg free
 14846                           
 14847                           ;UI.c: 351: }
 14848  001DBC  D04E               	goto	i2l254
 14849  001DBE                     i2l7318:
 14850                           
 14851                           ;UI.c: 352: else if(down){
 14852  001DBE  5069               	movf	_down,w,c
 14853  001DC0  106A               	iorwf	_down+1,w,c
 14854  001DC2  B4D8               	btfsc	status,2,c
 14855  001DC4  D003               	goto	i2l7322
 14856                           
 14857                           ;UI.c: 353: change_state_to_logs_11();
 14858  001DC6  EC07  F01F         	call	_change_state_to_logs_11	;wreg free
 14859                           
 14860                           ;UI.c: 354: }
 14861  001DCA  D047               	goto	i2l254
 14862  001DCC                     i2l7322:
 14863                           
 14864                           ;UI.c: 355: else if(enter){
 14865  001DCC  506B               	movf	_enter,w,c
 14866  001DCE  106C               	iorwf	_enter+1,w,c
 14867  001DD0  B4D8               	btfsc	status,2,c
 14868  001DD2  D007               	goto	i2l7326
 14869                           
 14870                           ;UI.c: 356: dispLogs(4);
 14871  001DD4  0E00               	movlw	0
 14872  001DD6  6E13               	movwf	dispLogs@myLog+1,c
 14873  001DD8  0E04               	movlw	4
 14874  001DDA  6E12               	movwf	dispLogs@myLog,c
 14875  001DDC  ECDA  F01F         	call	_dispLogs	;wreg free
 14876                           
 14877                           ;UI.c: 357: }
 14878  001DE0  D03C               	goto	i2l254
 14879  001DE2                     i2l7326:
 14880                           
 14881                           ;UI.c: 358: else if(back){
 14882  001DE2  505B               	movf	_back,w,c
 14883  001DE4  105C               	iorwf	_back+1,w,c
 14884  001DE6  B4D8               	btfsc	status,2,c
 14885  001DE8  D038               	goto	i2l254
 14886                           
 14887                           ;UI.c: 359: change_state_to_menu_23();
 14888  001DEA  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 14889                           
 14890                           ;UI.c: 365: }
 14891                           
 14892                           ;UI.c: 364: break;
 14893                           
 14894                           ;UI.c: 363: default:
 14895                           
 14896                           ;UI.c: 360: }
 14897                           ;UI.c: 361: break;
 14898  001DEE  D035               	goto	i2l254
 14899  001DF0                     i2l7332:
 14900  001DF0  C0DE  F043         	movff	_cur_state,??_updateMenu
 14901  001DF4  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14902                           
 14903                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14904                           ; Switch size 1, requested type "space"
 14905                           ; Number of cases is 3, Range of values is 0 to 4
 14906                           ; switch strategies available:
 14907                           ; Name         Instructions Cycles
 14908                           ; simple_byte           10     6 (average)
 14909                           ;	Chosen strategy is simple_byte
 14910  001DF8  5044               	movf	??_updateMenu+1,w,c
 14911  001DFA  0A00               	xorlw	0	; case 0
 14912  001DFC  B4D8               	btfsc	status,2,c
 14913  001DFE  D007               	goto	i2l7912
 14914  001E00  0A03               	xorlw	3	; case 3
 14915  001E02  B4D8               	btfsc	status,2,c
 14916  001E04  D015               	goto	i2l7914
 14917  001E06  0A07               	xorlw	7	; case 4
 14918  001E08  B4D8               	btfsc	status,2,c
 14919  001E0A  D020               	goto	i2l7916
 14920  001E0C  D026               	goto	i2l254
 14921  001E0E                     i2l7912:
 14922                           
 14923                           ; Switch size 1, requested type "space"
 14924                           ; Number of cases is 5, Range of values is 0 to 23
 14925                           ; switch strategies available:
 14926                           ; Name         Instructions Cycles
 14927                           ; simple_byte           16     9 (average)
 14928                           ;	Chosen strategy is simple_byte
 14929  001E0E  5043               	movf	??_updateMenu,w,c
 14930  001E10  0A00               	xorlw	0	; case 0
 14931  001E12  B4D8               	btfsc	status,2,c
 14932  001E14  D6DC               	goto	i2l7184
 14933  001E16  0A0B               	xorlw	11	; case 11
 14934  001E18  B4D8               	btfsc	status,2,c
 14935  001E1A  D6DC               	goto	i2l7186
 14936  001E1C  0A07               	xorlw	7	; case 12
 14937  001E1E  B4D8               	btfsc	status,2,c
 14938  001E20  D6EE               	goto	i2l7198
 14939  001E22  0A1A               	xorlw	26	; case 22
 14940  001E24  B4D8               	btfsc	status,2,c
 14941  001E26  D6F9               	goto	i2l7210
 14942  001E28  0A01               	xorlw	1	; case 23
 14943  001E2A  B4D8               	btfsc	status,2,c
 14944  001E2C  D70C               	goto	i2l7222
 14945  001E2E  D015               	goto	i2l254
 14946  001E30                     i2l7914:
 14947                           
 14948                           ; Switch size 1, requested type "space"
 14949                           ; Number of cases is 4, Range of values is 243 to 255
 14950                           ; switch strategies available:
 14951                           ; Name         Instructions Cycles
 14952                           ; simple_byte           13     7 (average)
 14953                           ;	Chosen strategy is simple_byte
 14954  001E30  5043               	movf	??_updateMenu,w,c
 14955  001E32  0AF3               	xorlw	243	; case 243
 14956  001E34  B4D8               	btfsc	status,2,c
 14957  001E36  D71C               	goto	i2l7234
 14958  001E38  0A07               	xorlw	7	; case 244
 14959  001E3A  B4D8               	btfsc	status,2,c
 14960  001E3C  D739               	goto	i2l7250
 14961  001E3E  0A0A               	xorlw	10	; case 254
 14962  001E40  B4D8               	btfsc	status,2,c
 14963  001E42  D756               	goto	i2l7266
 14964  001E44  0A01               	xorlw	1	; case 255
 14965  001E46  B4D8               	btfsc	status,2,c
 14966  001E48  D773               	goto	i2l7282
 14967  001E4A  D007               	goto	i2l254
 14968  001E4C                     i2l7916:
 14969                           
 14970                           ; Switch size 1, requested type "space"
 14971                           ; Number of cases is 2, Range of values is 9 to 10
 14972                           ; switch strategies available:
 14973                           ; Name         Instructions Cycles
 14974                           ; simple_byte            7     4 (average)
 14975                           ;	Chosen strategy is simple_byte
 14976  001E4C  5043               	movf	??_updateMenu,w,c
 14977  001E4E  0A09               	xorlw	9	; case 9
 14978  001E50  B4D8               	btfsc	status,2,c
 14979  001E52  D78E               	goto	i2l7298
 14980  001E54  0A03               	xorlw	3	; case 10
 14981  001E56  B4D8               	btfsc	status,2,c
 14982  001E58  D7AB               	goto	i2l7314
 14983  001E5A                     i2l254:
 14984                           
 14985                           ;UI.c: 366: }
 14986                           ;UI.c: 367: (INTCONbits.GIE = 1);
 14987  001E5A  8EF2               	bsf	intcon,7,c	;volatile
 14988  001E5C  0012               	return		;funcret
 14989  001E5E                     __end_of_updateMenu:
 14990                           	opt stack 0
 14991                           pclatu	equ	0xFFB
 14992                           pclath	equ	0xFFA
 14993                           tblptru	equ	0xFF8
 14994                           tblptrh	equ	0xFF7
 14995                           tblptrl	equ	0xFF6
 14996                           tablat	equ	0xFF5
 14997                           prodh	equ	0xFF4
 14998                           prodl	equ	0xFF3
 14999                           intcon	equ	0xFF2
 15000                           intcon2	equ	0xFF1
 15001                           intcon3	equ	0xFF0
 15002                           indf0	equ	0xFEF
 15003                           postinc0	equ	0xFEE
 15004                           fsr0h	equ	0xFEA
 15005                           fsr0l	equ	0xFE9
 15006                           wreg	equ	0xFE8
 15007                           postdec1	equ	0xFE5
 15008                           fsr1h	equ	0xFE2
 15009                           fsr1l	equ	0xFE1
 15010                           indf2	equ	0xFDF
 15011                           postinc2	equ	0xFDE
 15012                           postdec2	equ	0xFDD
 15013                           fsr2h	equ	0xFDA
 15014                           fsr2l	equ	0xFD9
 15015                           status	equ	0xFD8
 15016                           
 15017 ;; *************** function i2_change_state_to_menu_start *****************
 15018 ;; Defined at:
 15019 ;;		line 472 in file "UI.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;		None
 15022 ;; Auto vars:     Size  Location     Type
 15023 ;;		None
 15024 ;; Return value:  Size  Location     Type
 15025 ;;                  1    wreg      void 
 15026 ;; Registers used:
 15027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15028 ;; Tracked objects:
 15029 ;;		On entry : 0/0
 15030 ;;		On exit  : 0/0
 15031 ;;		Unchanged: 0/0
 15032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;Total ram usage:        0 bytes
 15038 ;; Hardware stack levels used:    1
 15039 ;; Hardware stack levels required when called:    4
 15040 ;; This function calls:
 15041 ;;		i2_lcdInst
 15042 ;;		i2_printRTC
 15043 ;;		i2_printf
 15044 ;; This function is called by:
 15045 ;;		_updateMenu
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           	psect	text56
 15050  003F1C                     __ptext56:
 15051                           	opt stack 0
 15052  003F1C                     i2_change_state_to_menu_start:
 15053                           	opt stack 18
 15054                           
 15055                           ;UI.c: 473: cur_state = 0;
 15056                           
 15057                           ;incstack = 0
 15058  003F1C  0E00               	movlw	0
 15059  003F1E  0100               	movlb	0	; () banked
 15060  003F20  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15061  003F22  0E00               	movlw	0
 15062  003F24  6FDE               	movwf	_cur_state& (0+255),b
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;UI.c: 475: lcdInst(0b10000000);;
 15066  003F26  0E80               	movlw	128
 15067  003F28  EC68  F020         	call	i2_lcdInst
 15068                           
 15069                           ;UI.c: 476: printRTC();
 15070  003F2C  EC2F  F00F         	call	i2_printRTC	;wreg free
 15071                           
 15072                           ;UI.c: 477: lcdInst(0b11000000);;
 15073  003F30  0EC0               	movlw	192
 15074  003F32  EC68  F020         	call	i2_lcdInst
 15075                           
 15076                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 15077  003F36  0E36               	movlw	low STR_30
 15078  003F38  6E0D               	movwf	i2printf@f,c
 15079  003F3A  0EFE               	movlw	high STR_30
 15080  003F3C  6E0E               	movwf	i2printf@f+1,c
 15081  003F3E  ECB3  F00A         	call	i2_printf	;wreg free
 15082  003F42  0012               	return		;funcret
 15083  003F44                     __end_ofi2_change_state_to_menu_start:
 15084                           	opt stack 0
 15085                           pclatu	equ	0xFFB
 15086                           pclath	equ	0xFFA
 15087                           tblptru	equ	0xFF8
 15088                           tblptrh	equ	0xFF7
 15089                           tblptrl	equ	0xFF6
 15090                           tablat	equ	0xFF5
 15091                           prodh	equ	0xFF4
 15092                           prodl	equ	0xFF3
 15093                           intcon	equ	0xFF2
 15094                           intcon2	equ	0xFF1
 15095                           intcon3	equ	0xFF0
 15096                           indf0	equ	0xFEF
 15097                           postinc0	equ	0xFEE
 15098                           fsr0h	equ	0xFEA
 15099                           fsr0l	equ	0xFE9
 15100                           wreg	equ	0xFE8
 15101                           postdec1	equ	0xFE5
 15102                           fsr1h	equ	0xFE2
 15103                           fsr1l	equ	0xFE1
 15104                           indf2	equ	0xFDF
 15105                           postinc2	equ	0xFDE
 15106                           postdec2	equ	0xFDD
 15107                           fsr2h	equ	0xFDA
 15108                           fsr2l	equ	0xFD9
 15109                           status	equ	0xFD8
 15110                           
 15111 ;; *************** function i2_printRTC *****************
 15112 ;; Defined at:
 15113 ;;		line 63 in file "RTC.c"
 15114 ;; Parameters:    Size  Location     Type
 15115 ;;		None
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;  printRTC       14   44[COMRAM] int [7]
 15118 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 15119 ;;  printRTC        2   64[COMRAM] int 
 15120 ;;  printRTC        2   58[COMRAM] int 
 15121 ;; Return value:  Size  Location     Type
 15122 ;;                  1    wreg      void 
 15123 ;; Registers used:
 15124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15125 ;; Tracked objects:
 15126 ;;		On entry : 0/0
 15127 ;;		On exit  : 0/0
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15132 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15133 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15134 ;;Total ram usage:       25 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; Hardware stack levels required when called:    3
 15137 ;; This function calls:
 15138 ;;		i2_getRTC
 15139 ;;		i2_lcdInst
 15140 ;;		i2_printf
 15141 ;;		i2_strcpy
 15142 ;; This function is called by:
 15143 ;;		i2_change_state_to_menu_start
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           	psect	text57
 15148  001E5E                     __ptext57:
 15149                           	opt stack 0
 15150  001E5E                     i2_printRTC:
 15151                           	opt stack 18
 15152                           
 15153                           ;RTC.c: 64: getRTC();
 15154                           
 15155                           ;incstack = 0
 15156  001E5E  EC04  F01B         	call	i2_getRTC	;wreg free
 15157                           
 15158                           ;RTC.c: 65: char month[] = "MMM";
 15159  001E62  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 15160  001E66  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 15161  001E6A  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 15162  001E6E  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 15163                           
 15164                           ;RTC.c: 66: int INT_time[7];
 15165                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 15166  001E72  0E00               	movlw	0
 15167  001E74  6E42               	movwf	i2printRTC@i+1,c
 15168  001E76  0E00               	movlw	0
 15169  001E78  6E41               	movwf	i2printRTC@i,c
 15170  001E7A  BE42               	btfsc	i2printRTC@i+1,7,c
 15171  001E7C  D006               	goto	i2l5804
 15172  001E7E  5042               	movf	i2printRTC@i+1,w,c
 15173  001E80  E135               	bnz	i2l591
 15174  001E82  0E07               	movlw	7
 15175  001E84  5C41               	subwf	i2printRTC@i,w,c
 15176  001E86  B0D8               	btfsc	status,0,c
 15177  001E88  D031               	goto	i2l591
 15178  001E8A                     i2l5804:
 15179                           
 15180                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 15181  001E8A  0E24               	movlw	low _time
 15182  001E8C  2441               	addwf	i2printRTC@i,w,c
 15183  001E8E  6ED9               	movwf	fsr2l,c
 15184  001E90  0E01               	movlw	high _time
 15185  001E92  2042               	addwfc	i2printRTC@i+1,w,c
 15186  001E94  6EDA               	movwf	fsr2h,c
 15187  001E96  50DF               	movf	indf2,w,c
 15188  001E98  6E2A               	movwf	??i2_printRTC& (0+255),c
 15189  001E9A  3A2A               	swapf	??i2_printRTC,f,c
 15190  001E9C  0E0F               	movlw	15
 15191  001E9E  162A               	andwf	??i2_printRTC,f,c
 15192  001EA0  0E0F               	movlw	15
 15193  001EA2  162A               	andwf	??i2_printRTC,f,c
 15194  001EA4  502A               	movf	??i2_printRTC,w,c
 15195  001EA6  0D0A               	mullw	10
 15196  001EA8  0E24               	movlw	low _time
 15197  001EAA  2441               	addwf	i2printRTC@i,w,c
 15198  001EAC  6ED9               	movwf	fsr2l,c
 15199  001EAE  0E01               	movlw	high _time
 15200  001EB0  2042               	addwfc	i2printRTC@i+1,w,c
 15201  001EB2  6EDA               	movwf	fsr2h,c
 15202  001EB4  50DF               	movf	indf2,w,c
 15203  001EB6  0B0F               	andlw	15
 15204  001EB8  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 15205  001EBA  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 15206  001EBC  50F3               	movf	prodl,w,c
 15207  001EBE  262B               	addwf	??i2_printRTC+1,f,c
 15208  001EC0  50F4               	movf	prodh,w,c
 15209  001EC2  222C               	addwfc	??i2_printRTC+2,f,c
 15210  001EC4  90D8               	bcf	status,0,c
 15211  001EC6  3441               	rlcf	i2printRTC@i,w,c
 15212  001EC8  6ED9               	movwf	fsr2l,c
 15213  001ECA  3442               	rlcf	i2printRTC@i+1,w,c
 15214  001ECC  6EDA               	movwf	fsr2h,c
 15215  001ECE  0E2D               	movlw	low i2printRTC@INT_time
 15216  001ED0  26D9               	addwf	fsr2l,f,c
 15217  001ED2  0E00               	movlw	high i2printRTC@INT_time
 15218  001ED4  22DA               	addwfc	fsr2h,f,c
 15219  001ED6  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 15220  001EDA  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 15221  001EDE  4A41               	infsnz	i2printRTC@i,f,c
 15222  001EE0  2A42               	incf	i2printRTC@i+1,f,c
 15223  001EE2  BE42               	btfsc	i2printRTC@i+1,7,c
 15224  001EE4  D7D2               	goto	i2l5804
 15225  001EE6  5042               	movf	i2printRTC@i+1,w,c
 15226  001EE8  E101               	bnz	i2u440_40
 15227  001EEA  D7CB               	goto	L9
 15228  001EEC                     i2u440_40:
 15229  001EEC                     i2l591:
 15230                           
 15231                           ;RTC.c: 69: }
 15232                           ;RTC.c: 70: int RTC_month = INT_time[5];
 15233  001EEC  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 15234  001EF0  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 15235                           
 15236                           ;RTC.c: 71: switch(RTC_month){
 15237  001EF4  D084               	goto	i2l5836
 15238  001EF6                     i2l5810:
 15239                           
 15240                           ;RTC.c: 73: strcpy(month, "JAN");
 15241  001EF6  0E3D               	movlw	low i2printRTC@month
 15242  001EF8  6E01               	movwf	i2strcpy@to,c
 15243  001EFA  0E00               	movlw	high i2printRTC@month
 15244  001EFC  6E02               	movwf	i2strcpy@to+1,c
 15245  001EFE  0EDA               	movlw	low STR_8
 15246  001F00  6E03               	movwf	i2strcpy@from,c
 15247  001F02  0EFF               	movlw	high STR_8
 15248  001F04  6E04               	movwf	i2strcpy@from+1,c
 15249  001F06  EC2E  F01E         	call	i2_strcpy	;wreg free
 15250                           
 15251                           ;RTC.c: 74: break;
 15252  001F0A  D0A6               	goto	i2l5838
 15253  001F0C                     i2l5812:
 15254                           
 15255                           ;RTC.c: 76: strcpy(month, "FEB");
 15256  001F0C  0E3D               	movlw	low i2printRTC@month
 15257  001F0E  6E01               	movwf	i2strcpy@to,c
 15258  001F10  0E00               	movlw	high i2printRTC@month
 15259  001F12  6E02               	movwf	i2strcpy@to+1,c
 15260  001F14  0ECA               	movlw	low STR_9
 15261  001F16  6E03               	movwf	i2strcpy@from,c
 15262  001F18  0EFF               	movlw	high STR_9
 15263  001F1A  6E04               	movwf	i2strcpy@from+1,c
 15264  001F1C  EC2E  F01E         	call	i2_strcpy	;wreg free
 15265                           
 15266                           ;RTC.c: 77: break;
 15267  001F20  D09B               	goto	i2l5838
 15268  001F22                     i2l5814:
 15269                           
 15270                           ;RTC.c: 79: strcpy(month, "MAR");
 15271  001F22  0E3D               	movlw	low i2printRTC@month
 15272  001F24  6E01               	movwf	i2strcpy@to,c
 15273  001F26  0E00               	movlw	high i2printRTC@month
 15274  001F28  6E02               	movwf	i2strcpy@to+1,c
 15275  001F2A  0EE6               	movlw	low STR_10
 15276  001F2C  6E03               	movwf	i2strcpy@from,c
 15277  001F2E  0EFF               	movlw	high STR_10
 15278  001F30  6E04               	movwf	i2strcpy@from+1,c
 15279  001F32  EC2E  F01E         	call	i2_strcpy	;wreg free
 15280                           
 15281                           ;RTC.c: 80: break;
 15282  001F36  D090               	goto	i2l5838
 15283  001F38                     i2l5816:
 15284                           
 15285                           ;RTC.c: 82: strcpy(month, "APR");
 15286  001F38  0E3D               	movlw	low i2printRTC@month
 15287  001F3A  6E01               	movwf	i2strcpy@to,c
 15288  001F3C  0E00               	movlw	high i2printRTC@month
 15289  001F3E  6E02               	movwf	i2strcpy@to+1,c
 15290  001F40  0EEA               	movlw	low STR_11
 15291  001F42  6E03               	movwf	i2strcpy@from,c
 15292  001F44  0EFF               	movlw	high STR_11
 15293  001F46  6E04               	movwf	i2strcpy@from+1,c
 15294  001F48  EC2E  F01E         	call	i2_strcpy	;wreg free
 15295                           
 15296                           ;RTC.c: 83: break;
 15297  001F4C  D085               	goto	i2l5838
 15298  001F4E                     i2l5818:
 15299                           
 15300                           ;RTC.c: 85: strcpy(month, "MAY");
 15301  001F4E  0E3D               	movlw	low i2printRTC@month
 15302  001F50  6E01               	movwf	i2strcpy@to,c
 15303  001F52  0E00               	movlw	high i2printRTC@month
 15304  001F54  6E02               	movwf	i2strcpy@to+1,c
 15305  001F56  0EFA               	movlw	low STR_12
 15306  001F58  6E03               	movwf	i2strcpy@from,c
 15307  001F5A  0EFF               	movlw	high STR_12
 15308  001F5C  6E04               	movwf	i2strcpy@from+1,c
 15309  001F5E  EC2E  F01E         	call	i2_strcpy	;wreg free
 15310                           
 15311                           ;RTC.c: 86: break;
 15312  001F62  D07A               	goto	i2l5838
 15313  001F64                     i2l5820:
 15314                           
 15315                           ;RTC.c: 88: strcpy(month, "JUN");
 15316  001F64  0E3D               	movlw	low i2printRTC@month
 15317  001F66  6E01               	movwf	i2strcpy@to,c
 15318  001F68  0E00               	movlw	high i2printRTC@month
 15319  001F6A  6E02               	movwf	i2strcpy@to+1,c
 15320  001F6C  0EDE               	movlw	low STR_13
 15321  001F6E  6E03               	movwf	i2strcpy@from,c
 15322  001F70  0EFF               	movlw	high STR_13
 15323  001F72  6E04               	movwf	i2strcpy@from+1,c
 15324  001F74  EC2E  F01E         	call	i2_strcpy	;wreg free
 15325                           
 15326                           ;RTC.c: 89: break;
 15327  001F78  D06F               	goto	i2l5838
 15328  001F7A                     i2l5822:
 15329                           
 15330                           ;RTC.c: 91: strcpy(month, "JUL");
 15331  001F7A  0E3D               	movlw	low i2printRTC@month
 15332  001F7C  6E01               	movwf	i2strcpy@to,c
 15333  001F7E  0E00               	movlw	high i2printRTC@month
 15334  001F80  6E02               	movwf	i2strcpy@to+1,c
 15335  001F82  0ED6               	movlw	low STR_14
 15336  001F84  6E03               	movwf	i2strcpy@from,c
 15337  001F86  0EFF               	movlw	high STR_14
 15338  001F88  6E04               	movwf	i2strcpy@from+1,c
 15339  001F8A  EC2E  F01E         	call	i2_strcpy	;wreg free
 15340                           
 15341                           ;RTC.c: 92: break;
 15342  001F8E  D064               	goto	i2l5838
 15343  001F90                     i2l5824:
 15344                           
 15345                           ;RTC.c: 94: strcpy(month, "AUG");
 15346  001F90  0E3D               	movlw	low i2printRTC@month
 15347  001F92  6E01               	movwf	i2strcpy@to,c
 15348  001F94  0E00               	movlw	high i2printRTC@month
 15349  001F96  6E02               	movwf	i2strcpy@to+1,c
 15350  001F98  0ED2               	movlw	low STR_15
 15351  001F9A  6E03               	movwf	i2strcpy@from,c
 15352  001F9C  0EFF               	movlw	high STR_15
 15353  001F9E  6E04               	movwf	i2strcpy@from+1,c
 15354  001FA0  EC2E  F01E         	call	i2_strcpy	;wreg free
 15355                           
 15356                           ;RTC.c: 95: break;
 15357  001FA4  D059               	goto	i2l5838
 15358  001FA6                     i2l5826:
 15359                           
 15360                           ;RTC.c: 97: strcpy(month, "SEP");
 15361  001FA6  0E3D               	movlw	low i2printRTC@month
 15362  001FA8  6E01               	movwf	i2strcpy@to,c
 15363  001FAA  0E00               	movlw	high i2printRTC@month
 15364  001FAC  6E02               	movwf	i2strcpy@to+1,c
 15365  001FAE  0EE2               	movlw	low STR_16
 15366  001FB0  6E03               	movwf	i2strcpy@from,c
 15367  001FB2  0EFF               	movlw	high STR_16
 15368  001FB4  6E04               	movwf	i2strcpy@from+1,c
 15369  001FB6  EC2E  F01E         	call	i2_strcpy	;wreg free
 15370                           
 15371                           ;RTC.c: 98: break;
 15372  001FBA  D04E               	goto	i2l5838
 15373  001FBC                     i2l5828:
 15374                           
 15375                           ;RTC.c: 100: strcpy(month, "OCT");
 15376  001FBC  0E3D               	movlw	low i2printRTC@month
 15377  001FBE  6E01               	movwf	i2strcpy@to,c
 15378  001FC0  0E00               	movlw	high i2printRTC@month
 15379  001FC2  6E02               	movwf	i2strcpy@to+1,c
 15380  001FC4  0EF2               	movlw	low STR_17
 15381  001FC6  6E03               	movwf	i2strcpy@from,c
 15382  001FC8  0EFF               	movlw	high STR_17
 15383  001FCA  6E04               	movwf	i2strcpy@from+1,c
 15384  001FCC  EC2E  F01E         	call	i2_strcpy	;wreg free
 15385                           
 15386                           ;RTC.c: 101: break;
 15387  001FD0  D043               	goto	i2l5838
 15388  001FD2                     i2l5830:
 15389                           
 15390                           ;RTC.c: 103: strcpy(month, "NOV");
 15391  001FD2  0E3D               	movlw	low i2printRTC@month
 15392  001FD4  6E01               	movwf	i2strcpy@to,c
 15393  001FD6  0E00               	movlw	high i2printRTC@month
 15394  001FD8  6E02               	movwf	i2strcpy@to+1,c
 15395  001FDA  0EF6               	movlw	low STR_18
 15396  001FDC  6E03               	movwf	i2strcpy@from,c
 15397  001FDE  0EFF               	movlw	high STR_18
 15398  001FE0  6E04               	movwf	i2strcpy@from+1,c
 15399  001FE2  EC2E  F01E         	call	i2_strcpy	;wreg free
 15400                           
 15401                           ;RTC.c: 104: break;
 15402  001FE6  D038               	goto	i2l5838
 15403  001FE8                     i2l5832:
 15404                           
 15405                           ;RTC.c: 106: strcpy(month, "DEC");
 15406  001FE8  0E3D               	movlw	low i2printRTC@month
 15407  001FEA  6E01               	movwf	i2strcpy@to,c
 15408  001FEC  0E00               	movlw	high i2printRTC@month
 15409  001FEE  6E02               	movwf	i2strcpy@to+1,c
 15410  001FF0  0ECE               	movlw	low STR_19
 15411  001FF2  6E03               	movwf	i2strcpy@from,c
 15412  001FF4  0EFF               	movlw	high STR_19
 15413  001FF6  6E04               	movwf	i2strcpy@from+1,c
 15414  001FF8  EC2E  F01E         	call	i2_strcpy	;wreg free
 15415                           
 15416                           ;RTC.c: 108: }
 15417                           
 15418                           ;RTC.c: 107: break;
 15419  001FFC  D02D               	goto	i2l5838
 15420  001FFE                     i2l5836:
 15421  001FFE  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 15422  002002  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 15423                           
 15424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15425                           ; Switch size 1, requested type "space"
 15426                           ; Number of cases is 1, Range of values is 0 to 0
 15427                           ; switch strategies available:
 15428                           ; Name         Instructions Cycles
 15429                           ; simple_byte            4     3 (average)
 15430                           ;	Chosen strategy is simple_byte
 15431  002006  502B               	movf	??i2_printRTC+1,w,c
 15432  002008  0A00               	xorlw	0	; case 0
 15433  00200A  A4D8               	btfss	status,2,c
 15434  00200C  D025               	goto	i2l5838
 15435                           
 15436                           ; Switch size 1, requested type "space"
 15437                           ; Number of cases is 12, Range of values is 1 to 12
 15438                           ; switch strategies available:
 15439                           ; Name         Instructions Cycles
 15440                           ; simple_byte           37    19 (average)
 15441                           ;	Chosen strategy is simple_byte
 15442  00200E  502A               	movf	??i2_printRTC,w,c
 15443  002010  0A01               	xorlw	1	; case 1
 15444  002012  B4D8               	btfsc	status,2,c
 15445  002014  D770               	goto	i2l5810
 15446  002016  0A03               	xorlw	3	; case 2
 15447  002018  B4D8               	btfsc	status,2,c
 15448  00201A  D778               	goto	i2l5812
 15449  00201C  0A01               	xorlw	1	; case 3
 15450  00201E  B4D8               	btfsc	status,2,c
 15451  002020  D780               	goto	i2l5814
 15452  002022  0A07               	xorlw	7	; case 4
 15453  002024  B4D8               	btfsc	status,2,c
 15454  002026  D788               	goto	i2l5816
 15455  002028  0A01               	xorlw	1	; case 5
 15456  00202A  B4D8               	btfsc	status,2,c
 15457  00202C  D790               	goto	i2l5818
 15458  00202E  0A03               	xorlw	3	; case 6
 15459  002030  B4D8               	btfsc	status,2,c
 15460  002032  D798               	goto	i2l5820
 15461  002034  0A01               	xorlw	1	; case 7
 15462  002036  B4D8               	btfsc	status,2,c
 15463  002038  D7A0               	goto	i2l5822
 15464  00203A  0A0F               	xorlw	15	; case 8
 15465  00203C  B4D8               	btfsc	status,2,c
 15466  00203E  D7A8               	goto	i2l5824
 15467  002040  0A01               	xorlw	1	; case 9
 15468  002042  B4D8               	btfsc	status,2,c
 15469  002044  D7B0               	goto	i2l5826
 15470  002046  0A03               	xorlw	3	; case 10
 15471  002048  B4D8               	btfsc	status,2,c
 15472  00204A  D7B8               	goto	i2l5828
 15473  00204C  0A01               	xorlw	1	; case 11
 15474  00204E  B4D8               	btfsc	status,2,c
 15475  002050  D7C0               	goto	i2l5830
 15476  002052  0A07               	xorlw	7	; case 12
 15477  002054  B4D8               	btfsc	status,2,c
 15478  002056  D7C8               	goto	i2l5832
 15479  002058                     i2l5838:
 15480                           
 15481                           ;RTC.c: 109: lcdInst(0b10000000);;
 15482  002058  0E80               	movlw	128
 15483  00205A  EC68  F020         	call	i2_lcdInst
 15484                           
 15485                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 15486  00205E  0E6A               	movlw	low STR_21
 15487  002060  6E0D               	movwf	i2printf@f,c
 15488  002062  0EFB               	movlw	high STR_21
 15489  002064  6E0E               	movwf	i2printf@f+1,c
 15490  002066  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 15491  00206A  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 15492  00206E  0E3D               	movlw	low i2printRTC@month
 15493  002070  6E11               	movwf	?i2_printf+4,c
 15494  002072  0E00               	movlw	high i2printRTC@month
 15495  002074  6E12               	movwf	?i2_printf+5,c
 15496  002076  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 15497  00207A  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 15498  00207E  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 15499  002082  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 15500  002086  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 15501  00208A  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 15502  00208E  ECB3  F00A         	call	i2_printf	;wreg free
 15503  002092  0012               	return		;funcret
 15504  002094                     __end_ofi2_printRTC:
 15505                           	opt stack 0
 15506                           pclatu	equ	0xFFB
 15507                           pclath	equ	0xFFA
 15508                           tblptru	equ	0xFF8
 15509                           tblptrh	equ	0xFF7
 15510                           tblptrl	equ	0xFF6
 15511                           tablat	equ	0xFF5
 15512                           prodh	equ	0xFF4
 15513                           prodl	equ	0xFF3
 15514                           intcon	equ	0xFF2
 15515                           intcon2	equ	0xFF1
 15516                           intcon3	equ	0xFF0
 15517                           indf0	equ	0xFEF
 15518                           postinc0	equ	0xFEE
 15519                           fsr0h	equ	0xFEA
 15520                           fsr0l	equ	0xFE9
 15521                           wreg	equ	0xFE8
 15522                           postdec1	equ	0xFE5
 15523                           fsr1h	equ	0xFE2
 15524                           fsr1l	equ	0xFE1
 15525                           indf2	equ	0xFDF
 15526                           postinc2	equ	0xFDE
 15527                           postdec2	equ	0xFDD
 15528                           fsr2h	equ	0xFDA
 15529                           fsr2l	equ	0xFD9
 15530                           status	equ	0xFD8
 15531                           
 15532 ;; *************** function i2_strcpy *****************
 15533 ;; Defined at:
 15534 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;  to              2    0[COMRAM] PTR unsigned char 
 15537 ;;		 -> printRTC@month(4), UI@month(4), 
 15538 ;;  from            2    2[COMRAM] PTR const unsigned char 
 15539 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 15540 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 15541 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 15542 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 15543 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 15544 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 15545 ;;		 -> STR_8(4), 
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 15548 ;;		 -> printRTC@month(4), UI@month(4), 
 15549 ;; Return value:  Size  Location     Type
 15550 ;;                  2    0[COMRAM] PTR unsigned char 
 15551 ;; Registers used:
 15552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15553 ;; Tracked objects:
 15554 ;;		On entry : 0/0
 15555 ;;		On exit  : 0/0
 15556 ;;		Unchanged: 0/0
 15557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;Total ram usage:        6 bytes
 15563 ;; Hardware stack levels used:    1
 15564 ;; This function calls:
 15565 ;;		Nothing
 15566 ;; This function is called by:
 15567 ;;		i2_printRTC
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text58
 15572  003C5C                     __ptext58:
 15573                           	opt stack 0
 15574  003C5C                     i2_strcpy:
 15575                           	opt stack 20
 15576                           
 15577                           ;incstack = 0
 15578  003C5C  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 15579  003C60  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 15580  003C64  D004               	goto	i2l5486
 15581  003C66                     i2l5484:
 15582  003C66  4A05               	infsnz	i2strcpy@cp,f,c
 15583  003C68  2A06               	incf	i2strcpy@cp+1,f,c
 15584  003C6A  4A03               	infsnz	i2strcpy@from,f,c
 15585  003C6C  2A04               	incf	i2strcpy@from+1,f,c
 15586  003C6E                     i2l5486:
 15587  003C6E  C003  FFF6         	movff	i2strcpy@from,tblptrl
 15588  003C72  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 15589  003C76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15590  003C76  6AF8               	clrf	tblptru,c
 15591  003C78                     	endif
 15592  003C78                     	if	0	;tblptru may be non-zero
 15593  003C78                     	endif
 15594  003C78  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 15595  003C7C  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 15596  003C80  0008               	tblrd		*
 15597  003C82  CFF5 FFDF          	movff	tablat,indf2
 15598  003C86  50DF               	movf	indf2,w,c
 15599  003C88  B4D8               	btfsc	status,2,c
 15600  003C8A  0012               	return	
 15601  003C8C  D7EC               	goto	i2l5484
 15602  003C8E                     __end_ofi2_strcpy:
 15603                           	opt stack 0
 15604                           pclatu	equ	0xFFB
 15605                           pclath	equ	0xFFA
 15606                           tblptru	equ	0xFF8
 15607                           tblptrh	equ	0xFF7
 15608                           tblptrl	equ	0xFF6
 15609                           tablat	equ	0xFF5
 15610                           prodh	equ	0xFF4
 15611                           prodl	equ	0xFF3
 15612                           intcon	equ	0xFF2
 15613                           intcon2	equ	0xFF1
 15614                           intcon3	equ	0xFF0
 15615                           indf0	equ	0xFEF
 15616                           postinc0	equ	0xFEE
 15617                           fsr0h	equ	0xFEA
 15618                           fsr0l	equ	0xFE9
 15619                           wreg	equ	0xFE8
 15620                           postdec1	equ	0xFE5
 15621                           fsr1h	equ	0xFE2
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           postdec2	equ	0xFDD
 15626                           fsr2h	equ	0xFDA
 15627                           fsr2l	equ	0xFD9
 15628                           status	equ	0xFD8
 15629                           
 15630 ;; *************** function _inputHandler *****************
 15631 ;; Defined at:
 15632 ;;		line 370 in file "UI.c"
 15633 ;; Parameters:    Size  Location     Type
 15634 ;;		None
 15635 ;; Auto vars:     Size  Location     Type
 15636 ;;		None
 15637 ;; Return value:  Size  Location     Type
 15638 ;;                  2   41[COMRAM] int 
 15639 ;; Registers used:
 15640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15641 ;; Tracked objects:
 15642 ;;		On entry : 0/0
 15643 ;;		On exit  : 0/0
 15644 ;;		Unchanged: 0/0
 15645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15646 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15649 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15650 ;;Total ram usage:        4 bytes
 15651 ;; Hardware stack levels used:    1
 15652 ;; Hardware stack levels required when called:    4
 15653 ;; This function calls:
 15654 ;;		_change_state_to_logs_11
 15655 ;;		_change_state_to_logs_12
 15656 ;;		_change_state_to_logs_22
 15657 ;;		_change_state_to_logs_23
 15658 ;;		_change_state_to_logs_33
 15659 ;;		_change_state_to_logs_34
 15660 ;;		_change_state_to_menu_11
 15661 ;;		_change_state_to_menu_23
 15662 ;;		i2_change_state_to_menu_12
 15663 ;;		i2_change_state_to_menu_22
 15664 ;; This function is called by:
 15665 ;;		_updateMenu
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           	psect	text59
 15670  002286                     __ptext59:
 15671                           	opt stack 0
 15672  002286                     _inputHandler:
 15673                           	opt stack 18
 15674                           
 15675                           ;UI.c: 375: if(firstboot){
 15676                           
 15677                           ;incstack = 0
 15678  002286  5075               	movf	_firstboot,w,c
 15679  002288  1076               	iorwf	_firstboot+1,w,c
 15680  00228A  B4D8               	btfsc	status,2,c
 15681  00228C  D00B               	goto	i2l5906
 15682                           
 15683                           ;UI.c: 376: change_state_to_menu_11();
 15684  00228E  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 15685                           
 15686                           ;UI.c: 377: firstboot = 0;
 15687  002292  0E00               	movlw	0
 15688  002294  6E76               	movwf	_firstboot+1,c
 15689  002296  0E00               	movlw	0
 15690  002298  6E75               	movwf	_firstboot,c
 15691                           
 15692                           ;UI.c: 378: return 0;
 15693  00229A  0E00               	movlw	0
 15694  00229C  6E2B               	movwf	?_inputHandler+1,c
 15695  00229E  0E00               	movlw	0
 15696  0022A0  6E2A               	movwf	?_inputHandler,c
 15697  0022A2  0012               	return	
 15698  0022A4                     i2l5906:
 15699                           
 15700                           ;UI.c: 379: }
 15701                           ;UI.c: 380: if (logstate){
 15702  0022A4  0100               	movlb	0	; () banked
 15703  0022A6  51F6               	movf	_logstate& (0+255),w,b
 15704  0022A8  0100               	movlb	0	; () banked
 15705  0022AA  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 15706  0022AC  B4D8               	btfsc	status,2,c
 15707  0022AE  D0C7               	goto	i2l6024
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 15711  0022B0  0E43               	movlw	67
 15712  0022B2  187D               	xorwf	_input,w,c	;volatile
 15713  0022B4  A4D8               	btfss	status,2,c
 15714  0022B6  D012               	goto	i2l5924
 15715                           
 15716                           ; BSR set to: 0
 15717  0022B8  B281               	btfsc	3969,1,c	;volatile
 15718  0022BA  D009               	goto	i2l5916
 15719  0022BC  D00F               	goto	i2l5924
 15720  0022BE                     i2l5914:
 15721                           
 15722                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 15723  0022BE  0E68               	movlw	104
 15724  0022C0  6E2C               	movwf	??_inputHandler& (0+255),c
 15725  0022C2  0EE4               	movlw	228
 15726  0022C4                     i2u747_47:
 15727  0022C4  2EE8               	decfsz	wreg,f,c
 15728  0022C6  D7FE               	bra	i2u747_47
 15729  0022C8  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15730  0022CA  D7FC               	bra	i2u747_47
 15731  0022CC  D000               	nop2	
 15732  0022CE                     i2l5916:
 15733  0022CE  B281               	btfsc	3969,1,c	;volatile
 15734  0022D0  D7F6               	goto	i2l5914
 15735  0022D2                     i2l5918:
 15736                           
 15737                           ;UI.c: 385: }
 15738                           ;UI.c: 386: return 0;
 15739  0022D2  0E00               	movlw	0
 15740  0022D4  6E2B               	movwf	?_inputHandler+1,c
 15741  0022D6  0E00               	movlw	0
 15742  0022D8  6E2A               	movwf	?_inputHandler,c
 15743  0022DA  0012               	return	
 15744  0022DC                     i2l5924:
 15745                           
 15746                           ;UI.c: 388: else if (input == 'D'){
 15747  0022DC  0E44               	movlw	68
 15748  0022DE  187D               	xorwf	_input,w,c	;volatile
 15749  0022E0  A4D8               	btfss	status,2,c
 15750  0022E2  D7F7               	goto	i2l5918
 15751                           
 15752                           ;UI.c: 390: logstate = 0;
 15753  0022E4  0E00               	movlw	0
 15754  0022E6  0100               	movlb	0	; () banked
 15755  0022E8  6FF7               	movwf	(_logstate+1)& (0+255),b
 15756  0022EA  0E00               	movlw	0
 15757  0022EC  6FF6               	movwf	_logstate& (0+255),b
 15758                           
 15759                           ;UI.c: 391: switch(cur_state){
 15760  0022EE  D012               	goto	i2l5942
 15761  0022F0                     i2l5928:
 15762                           
 15763                           ;UI.c: 393: change_state_to_logs_11();
 15764  0022F0  EC07  F01F         	call	_change_state_to_logs_11	;wreg free
 15765                           
 15766                           ;UI.c: 394: break;
 15767  0022F4  D7EE               	goto	i2l5918
 15768  0022F6                     i2l5930:
 15769                           
 15770                           ;UI.c: 396: change_state_to_logs_12();
 15771  0022F6  ECEF  F01E         	call	_change_state_to_logs_12	;wreg free
 15772                           
 15773                           ;UI.c: 397: break;
 15774  0022FA  D7EB               	goto	i2l5918
 15775  0022FC                     i2l5932:
 15776                           
 15777                           ;UI.c: 399: change_state_to_logs_22();
 15778  0022FC  ECD7  F01E         	call	_change_state_to_logs_22	;wreg free
 15779                           
 15780                           ;UI.c: 400: break;
 15781  002300  D7E8               	goto	i2l5918
 15782  002302                     i2l5934:
 15783                           
 15784                           ;UI.c: 402: change_state_to_logs_23();
 15785  002302  EC36  F01F         	call	_change_state_to_logs_23	;wreg free
 15786                           
 15787                           ;UI.c: 403: break;
 15788  002306  D7E5               	goto	i2l5918
 15789  002308                     i2l5936:
 15790                           
 15791                           ;UI.c: 405: change_state_to_logs_33();
 15792  002308  ECBF  F01E         	call	_change_state_to_logs_33	;wreg free
 15793                           
 15794                           ;UI.c: 406: break;
 15795  00230C  D7E2               	goto	i2l5918
 15796  00230E                     i2l5938:
 15797                           
 15798                           ;UI.c: 408: change_state_to_logs_34();
 15799  00230E  ECA7  F01E         	call	_change_state_to_logs_34	;wreg free
 15800                           
 15801                           ;UI.c: 410: }
 15802                           
 15803                           ;UI.c: 409: break;
 15804  002312  D7DF               	goto	i2l5918
 15805  002314                     i2l5942:
 15806  002314  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15807  002318  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15808                           
 15809                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15810                           ; Switch size 1, requested type "space"
 15811                           ; Number of cases is 2, Range of values is 3 to 4
 15812                           ; switch strategies available:
 15813                           ; Name         Instructions Cycles
 15814                           ; simple_byte            7     4 (average)
 15815                           ;	Chosen strategy is simple_byte
 15816  00231C  502D               	movf	??_inputHandler+1,w,c
 15817  00231E  0A03               	xorlw	3	; case 3
 15818  002320  B4D8               	btfsc	status,2,c
 15819  002322  D004               	goto	i2l7920
 15820  002324  0A07               	xorlw	7	; case 4
 15821  002326  B4D8               	btfsc	status,2,c
 15822  002328  D00F               	goto	i2l7922
 15823  00232A  D7D3               	goto	i2l5918
 15824  00232C                     i2l7920:
 15825                           
 15826                           ; Switch size 1, requested type "space"
 15827                           ; Number of cases is 4, Range of values is 243 to 255
 15828                           ; switch strategies available:
 15829                           ; Name         Instructions Cycles
 15830                           ; simple_byte           13     7 (average)
 15831                           ;	Chosen strategy is simple_byte
 15832  00232C  502C               	movf	??_inputHandler,w,c
 15833  00232E  0AF3               	xorlw	243	; case 243
 15834  002330  B4D8               	btfsc	status,2,c
 15835  002332  D7DE               	goto	i2l5928
 15836  002334  0A07               	xorlw	7	; case 244
 15837  002336  B4D8               	btfsc	status,2,c
 15838  002338  D7DE               	goto	i2l5930
 15839  00233A  0A0A               	xorlw	10	; case 254
 15840  00233C  B4D8               	btfsc	status,2,c
 15841  00233E  D7DE               	goto	i2l5932
 15842  002340  0A01               	xorlw	1	; case 255
 15843  002342  B4D8               	btfsc	status,2,c
 15844  002344  D7DE               	goto	i2l5934
 15845  002346  D7C5               	goto	i2l5918
 15846  002348                     i2l7922:
 15847                           
 15848                           ; Switch size 1, requested type "space"
 15849                           ; Number of cases is 2, Range of values is 9 to 10
 15850                           ; switch strategies available:
 15851                           ; Name         Instructions Cycles
 15852                           ; simple_byte            7     4 (average)
 15853                           ;	Chosen strategy is simple_byte
 15854  002348  502C               	movf	??_inputHandler,w,c
 15855  00234A  0A09               	xorlw	9	; case 9
 15856  00234C  B4D8               	btfsc	status,2,c
 15857  00234E  D7DC               	goto	i2l5936
 15858  002350  0A03               	xorlw	3	; case 10
 15859  002352  B4D8               	btfsc	status,2,c
 15860  002354  D7DC               	goto	i2l5938
 15861  002356  D7BD               	goto	i2l5918
 15862  002358                     i2l5954:
 15863                           
 15864                           ;UI.c: 420: if(cur_state == 11){
 15865  002358  0E0B               	movlw	11
 15866  00235A  0100               	movlb	0	; () banked
 15867  00235C  19DE               	xorwf	_cur_state& (0+255),w,b
 15868  00235E  0100               	movlb	0	; () banked
 15869  002360  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15870  002362  A4D8               	btfss	status,2,c
 15871  002364  D005               	goto	i2l5962
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;UI.c: 421: return 0;
 15875  002366  0E00               	movlw	0
 15876  002368  6E2B               	movwf	?_inputHandler+1,c
 15877  00236A  0E00               	movlw	0
 15878  00236C  6E2A               	movwf	?_inputHandler,c
 15879                           
 15880                           ; BSR set to: 0
 15881  00236E  0012               	return	
 15882  002370                     i2l5962:
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;UI.c: 423: else{
 15886                           ;UI.c: 424: change_state_to_menu_11();
 15887  002370  EC8F  F01E         	call	_change_state_to_menu_11	;wreg free
 15888                           
 15889                           ;UI.c: 425: }
 15890                           ;UI.c: 426: return 0;
 15891  002374  0E00               	movlw	0
 15892  002376  6E2B               	movwf	?_inputHandler+1,c
 15893  002378  0E00               	movlw	0
 15894  00237A  6E2A               	movwf	?_inputHandler,c
 15895  00237C  0012               	return	
 15896  00237E                     i2l5968:
 15897                           
 15898                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15899  00237E  0E16               	movlw	22
 15900  002380  0100               	movlb	0	; () banked
 15901  002382  19DE               	xorwf	_cur_state& (0+255),w,b
 15902  002384  0100               	movlb	0	; () banked
 15903  002386  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15904  002388  B4D8               	btfsc	status,2,c
 15905  00238A  D007               	goto	i2l5972
 15906                           
 15907                           ; BSR set to: 0
 15908  00238C  0E0C               	movlw	12
 15909  00238E  0100               	movlb	0	; () banked
 15910  002390  19DE               	xorwf	_cur_state& (0+255),w,b
 15911  002392  0100               	movlb	0	; () banked
 15912  002394  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15913  002396  A4D8               	btfss	status,2,c
 15914  002398  D005               	goto	i2l5978
 15915  00239A                     i2l5972:
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;UI.c: 429: return 0;
 15919  00239A  0E00               	movlw	0
 15920  00239C  6E2B               	movwf	?_inputHandler+1,c
 15921  00239E  0E00               	movlw	0
 15922  0023A0  6E2A               	movwf	?_inputHandler,c
 15923                           
 15924                           ; BSR set to: 0
 15925  0023A2  0012               	return	
 15926  0023A4                     i2l5978:
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;UI.c: 431: else if(cur_state == 23){
 15930  0023A4  0E17               	movlw	23
 15931  0023A6  0100               	movlb	0	; () banked
 15932  0023A8  19DE               	xorwf	_cur_state& (0+255),w,b
 15933  0023AA  0100               	movlb	0	; () banked
 15934  0023AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15935  0023AE  A4D8               	btfss	status,2,c
 15936  0023B0  D003               	goto	i2l5982
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;UI.c: 432: change_state_to_menu_22();
 15940  0023B2  EC47  F01E         	call	i2_change_state_to_menu_22	;wreg free
 15941                           
 15942                           ;UI.c: 433: }
 15943  0023B6  D002               	goto	i2l5984
 15944  0023B8                     i2l5982:
 15945                           
 15946                           ;UI.c: 434: else{
 15947                           ;UI.c: 435: change_state_to_menu_12();
 15948  0023B8  EC5F  F01E         	call	i2_change_state_to_menu_12	;wreg free
 15949  0023BC                     i2l5984:
 15950                           
 15951                           ;UI.c: 436: }
 15952                           ;UI.c: 437: return 0;
 15953  0023BC  0E00               	movlw	0
 15954  0023BE  6E2B               	movwf	?_inputHandler+1,c
 15955  0023C0  0E00               	movlw	0
 15956  0023C2  6E2A               	movwf	?_inputHandler,c
 15957  0023C4  0012               	return	
 15958  0023C6                     i2l5988:
 15959                           
 15960                           ;UI.c: 439: if(cur_state == 23){
 15961  0023C6  0E17               	movlw	23
 15962  0023C8  0100               	movlb	0	; () banked
 15963  0023CA  19DE               	xorwf	_cur_state& (0+255),w,b
 15964  0023CC  0100               	movlb	0	; () banked
 15965  0023CE  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15966  0023D0  A4D8               	btfss	status,2,c
 15967  0023D2  D005               	goto	i2l5996
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;UI.c: 440: return 0;
 15971  0023D4  0E00               	movlw	0
 15972  0023D6  6E2B               	movwf	?_inputHandler+1,c
 15973  0023D8  0E00               	movlw	0
 15974  0023DA  6E2A               	movwf	?_inputHandler,c
 15975                           
 15976                           ; BSR set to: 0
 15977  0023DC  0012               	return	
 15978  0023DE                     i2l5996:
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;UI.c: 442: else{
 15982                           ;UI.c: 443: change_state_to_menu_23();
 15983  0023DE  EC77  F01E         	call	_change_state_to_menu_23	;wreg free
 15984                           
 15985                           ;UI.c: 444: }
 15986                           ;UI.c: 445: return 0;
 15987  0023E2  0E00               	movlw	0
 15988  0023E4  6E2B               	movwf	?_inputHandler+1,c
 15989  0023E6  0E00               	movlw	0
 15990  0023E8  6E2A               	movwf	?_inputHandler,c
 15991  0023EA  0012               	return	
 15992  0023EC                     i2l6002:
 15993                           
 15994                           ;UI.c: 448: up = 1;
 15995  0023EC  0E00               	movlw	0
 15996  0023EE  6E78               	movwf	_up+1,c
 15997  0023F0  0E01               	movlw	1
 15998  0023F2  6E77               	movwf	_up,c
 15999                           
 16000                           ;UI.c: 449: return 1;
 16001  0023F4  0E00               	movlw	0
 16002  0023F6  6E2B               	movwf	?_inputHandler+1,c
 16003  0023F8  0E01               	movlw	1
 16004  0023FA  6E2A               	movwf	?_inputHandler,c
 16005  0023FC  0012               	return	
 16006  0023FE                     i2l6006:
 16007                           
 16008                           ;UI.c: 451: down = 1;
 16009  0023FE  0E00               	movlw	0
 16010  002400  6E6A               	movwf	_down+1,c
 16011  002402  0E01               	movlw	1
 16012  002404  6E69               	movwf	_down,c
 16013                           
 16014                           ;UI.c: 452: return 1;
 16015  002406  0E00               	movlw	0
 16016  002408  6E2B               	movwf	?_inputHandler+1,c
 16017  00240A  0E01               	movlw	1
 16018  00240C  6E2A               	movwf	?_inputHandler,c
 16019  00240E  0012               	return	
 16020  002410                     i2l6010:
 16021                           
 16022                           ;UI.c: 454: enter = 1;
 16023  002410  0E00               	movlw	0
 16024  002412  6E6C               	movwf	_enter+1,c
 16025  002414  0E01               	movlw	1
 16026  002416  6E6B               	movwf	_enter,c
 16027                           
 16028                           ;UI.c: 455: return 1;
 16029  002418  0E00               	movlw	0
 16030  00241A  6E2B               	movwf	?_inputHandler+1,c
 16031  00241C  0E01               	movlw	1
 16032  00241E  6E2A               	movwf	?_inputHandler,c
 16033  002420  0012               	return	
 16034  002422                     i2l6014:
 16035                           
 16036                           ;UI.c: 457: back = 1;
 16037  002422  0E00               	movlw	0
 16038  002424  6E5C               	movwf	_back+1,c
 16039  002426  0E01               	movlw	1
 16040  002428  6E5B               	movwf	_back,c
 16041                           
 16042                           ;UI.c: 458: return 1;
 16043  00242A  0E00               	movlw	0
 16044  00242C  6E2B               	movwf	?_inputHandler+1,c
 16045  00242E  0E01               	movlw	1
 16046  002430  6E2A               	movwf	?_inputHandler,c
 16047  002432  0012               	return	
 16048  002434                     i2l6018:
 16049                           
 16050                           ;UI.c: 461: return 1;
 16051  002434  0E00               	movlw	0
 16052  002436  6E2B               	movwf	?_inputHandler+1,c
 16053  002438  0E01               	movlw	1
 16054  00243A  6E2A               	movwf	?_inputHandler,c
 16055                           
 16056                           ;UI.c: 462: }
 16057  00243C  0012               	return	
 16058  00243E                     i2l6024:
 16059  00243E  507D               	movf	_input,w,c	;volatile
 16060                           
 16061                           ; Switch size 1, requested type "space"
 16062                           ; Number of cases is 7, Range of values is 49 to 68
 16063                           ; switch strategies available:
 16064                           ; Name         Instructions Cycles
 16065                           ; simple_byte           22    12 (average)
 16066                           ;	Chosen strategy is simple_byte
 16067  002440  0A31               	xorlw	49	; case 49
 16068  002442  B4D8               	btfsc	status,2,c
 16069  002444  D789               	goto	i2l5954
 16070  002446  0A03               	xorlw	3	; case 50
 16071  002448  B4D8               	btfsc	status,2,c
 16072  00244A  D799               	goto	i2l5968
 16073  00244C  0A01               	xorlw	1	; case 51
 16074  00244E  B4D8               	btfsc	status,2,c
 16075  002450  D7BA               	goto	i2l5988
 16076  002452  0A72               	xorlw	114	; case 65
 16077  002454  B4D8               	btfsc	status,2,c
 16078  002456  D7CA               	goto	i2l6002
 16079  002458  0A03               	xorlw	3	; case 66
 16080  00245A  B4D8               	btfsc	status,2,c
 16081  00245C  D7D0               	goto	i2l6006
 16082  00245E  0A01               	xorlw	1	; case 67
 16083  002460  B4D8               	btfsc	status,2,c
 16084  002462  D7D6               	goto	i2l6010
 16085  002464  0A07               	xorlw	7	; case 68
 16086  002466  B4D8               	btfsc	status,2,c
 16087  002468  D7DC               	goto	i2l6014
 16088  00246A  D7E4               	goto	i2l6018
 16089  00246C                     __end_of_inputHandler:
 16090                           	opt stack 0
 16091                           pclatu	equ	0xFFB
 16092                           pclath	equ	0xFFA
 16093                           tblptru	equ	0xFF8
 16094                           tblptrh	equ	0xFF7
 16095                           tblptrl	equ	0xFF6
 16096                           tablat	equ	0xFF5
 16097                           prodh	equ	0xFF4
 16098                           prodl	equ	0xFF3
 16099                           intcon	equ	0xFF2
 16100                           intcon2	equ	0xFF1
 16101                           intcon3	equ	0xFF0
 16102                           indf0	equ	0xFEF
 16103                           postinc0	equ	0xFEE
 16104                           fsr0h	equ	0xFEA
 16105                           fsr0l	equ	0xFE9
 16106                           wreg	equ	0xFE8
 16107                           postdec1	equ	0xFE5
 16108                           fsr1h	equ	0xFE2
 16109                           fsr1l	equ	0xFE1
 16110                           indf2	equ	0xFDF
 16111                           postinc2	equ	0xFDE
 16112                           postdec2	equ	0xFDD
 16113                           fsr2h	equ	0xFDA
 16114                           fsr2l	equ	0xFD9
 16115                           status	equ	0xFD8
 16116                           
 16117 ;; *************** function i2_change_state_to_menu_22 *****************
 16118 ;; Defined at:
 16119 ;;		line 496 in file "UI.c"
 16120 ;; Parameters:    Size  Location     Type
 16121 ;;		None
 16122 ;; Auto vars:     Size  Location     Type
 16123 ;;		None
 16124 ;; Return value:  Size  Location     Type
 16125 ;;                  1    wreg      void 
 16126 ;; Registers used:
 16127 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16128 ;; Tracked objects:
 16129 ;;		On entry : 0/0
 16130 ;;		On exit  : 0/0
 16131 ;;		Unchanged: 0/0
 16132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16137 ;;Total ram usage:        0 bytes
 16138 ;; Hardware stack levels used:    1
 16139 ;; Hardware stack levels required when called:    3
 16140 ;; This function calls:
 16141 ;;		i2_lcdInst
 16142 ;;		i2_printf
 16143 ;; This function is called by:
 16144 ;;		_updateMenu
 16145 ;;		_inputHandler
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           	psect	text60
 16150  003C8E                     __ptext60:
 16151                           	opt stack 0
 16152  003C8E                     i2_change_state_to_menu_22:
 16153                           	opt stack 19
 16154                           
 16155                           ;UI.c: 497: cur_state = 22;
 16156                           
 16157                           ;incstack = 0
 16158  003C8E  0E00               	movlw	0
 16159  003C90  0100               	movlb	0	; () banked
 16160  003C92  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16161  003C94  0E16               	movlw	22
 16162  003C96  6FDE               	movwf	_cur_state& (0+255),b
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;UI.c: 499: lcdInst(0b10000000);;
 16166  003C98  0E80               	movlw	128
 16167  003C9A  EC68  F020         	call	i2_lcdInst
 16168                           
 16169                           ;UI.c: 500: printf("2. SORT        <");
 16170  003C9E  0E03               	movlw	low STR_34
 16171  003CA0  6E0D               	movwf	i2printf@f,c
 16172  003CA2  0EFE               	movlw	high STR_34
 16173  003CA4  6E0E               	movwf	i2printf@f+1,c
 16174  003CA6  ECB3  F00A         	call	i2_printf	;wreg free
 16175                           
 16176                           ;UI.c: 501: lcdInst(0b11000000);;
 16177  003CAA  0EC0               	movlw	192
 16178  003CAC  EC68  F020         	call	i2_lcdInst
 16179                           
 16180                           ;UI.c: 502: printf("3. LOGS         ");
 16181  003CB0  0E48               	movlw	low STR_36
 16182  003CB2  6E0D               	movwf	i2printf@f,c
 16183  003CB4  0EFD               	movlw	high STR_36
 16184  003CB6  6E0E               	movwf	i2printf@f+1,c
 16185  003CB8  ECB3  F00A         	call	i2_printf	;wreg free
 16186  003CBC  0012               	return		;funcret
 16187  003CBE                     __end_ofi2_change_state_to_menu_22:
 16188                           	opt stack 0
 16189                           pclatu	equ	0xFFB
 16190                           pclath	equ	0xFFA
 16191                           tblptru	equ	0xFF8
 16192                           tblptrh	equ	0xFF7
 16193                           tblptrl	equ	0xFF6
 16194                           tablat	equ	0xFF5
 16195                           prodh	equ	0xFF4
 16196                           prodl	equ	0xFF3
 16197                           intcon	equ	0xFF2
 16198                           intcon2	equ	0xFF1
 16199                           intcon3	equ	0xFF0
 16200                           indf0	equ	0xFEF
 16201                           postinc0	equ	0xFEE
 16202                           fsr0h	equ	0xFEA
 16203                           fsr0l	equ	0xFE9
 16204                           wreg	equ	0xFE8
 16205                           postdec1	equ	0xFE5
 16206                           fsr1h	equ	0xFE2
 16207                           fsr1l	equ	0xFE1
 16208                           indf2	equ	0xFDF
 16209                           postinc2	equ	0xFDE
 16210                           postdec2	equ	0xFDD
 16211                           fsr2h	equ	0xFDA
 16212                           fsr2l	equ	0xFD9
 16213                           status	equ	0xFD8
 16214                           
 16215 ;; *************** function i2_change_state_to_menu_12 *****************
 16216 ;; Defined at:
 16217 ;;		line 488 in file "UI.c"
 16218 ;; Parameters:    Size  Location     Type
 16219 ;;		None
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;		None
 16222 ;; Return value:  Size  Location     Type
 16223 ;;                  1    wreg      void 
 16224 ;; Registers used:
 16225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16226 ;; Tracked objects:
 16227 ;;		On entry : 0/0
 16228 ;;		On exit  : 0/0
 16229 ;;		Unchanged: 0/0
 16230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16235 ;;Total ram usage:        0 bytes
 16236 ;; Hardware stack levels used:    1
 16237 ;; Hardware stack levels required when called:    3
 16238 ;; This function calls:
 16239 ;;		i2_lcdInst
 16240 ;;		i2_printf
 16241 ;; This function is called by:
 16242 ;;		_updateMenu
 16243 ;;		_inputHandler
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           	psect	text61
 16248  003CBE                     __ptext61:
 16249                           	opt stack 0
 16250  003CBE                     i2_change_state_to_menu_12:
 16251                           	opt stack 19
 16252                           
 16253                           ;UI.c: 489: cur_state = 12;
 16254                           
 16255                           ;incstack = 0
 16256  003CBE  0E00               	movlw	0
 16257  003CC0  0100               	movlb	0	; () banked
 16258  003CC2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16259  003CC4  0E0C               	movlw	12
 16260  003CC6  6FDE               	movwf	_cur_state& (0+255),b
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;UI.c: 491: lcdInst(0b10000000);;
 16264  003CC8  0E80               	movlw	128
 16265  003CCA  EC68  F020         	call	i2_lcdInst
 16266                           
 16267                           ;UI.c: 492: printf("1. DATE/TIME    ");
 16268  003CCE  0E6A               	movlw	low STR_33
 16269  003CD0  6E0D               	movwf	i2printf@f,c
 16270  003CD2  0EFD               	movlw	high STR_33
 16271  003CD4  6E0E               	movwf	i2printf@f+1,c
 16272  003CD6  ECB3  F00A         	call	i2_printf	;wreg free
 16273                           
 16274                           ;UI.c: 493: lcdInst(0b11000000);;
 16275  003CDA  0EC0               	movlw	192
 16276  003CDC  EC68  F020         	call	i2_lcdInst
 16277                           
 16278                           ;UI.c: 494: printf("2. SORT        <");
 16279  003CE0  0E03               	movlw	low STR_34
 16280  003CE2  6E0D               	movwf	i2printf@f,c
 16281  003CE4  0EFE               	movlw	high STR_34
 16282  003CE6  6E0E               	movwf	i2printf@f+1,c
 16283  003CE8  ECB3  F00A         	call	i2_printf	;wreg free
 16284  003CEC  0012               	return		;funcret
 16285  003CEE                     __end_ofi2_change_state_to_menu_12:
 16286                           	opt stack 0
 16287                           pclatu	equ	0xFFB
 16288                           pclath	equ	0xFFA
 16289                           tblptru	equ	0xFF8
 16290                           tblptrh	equ	0xFF7
 16291                           tblptrl	equ	0xFF6
 16292                           tablat	equ	0xFF5
 16293                           prodh	equ	0xFF4
 16294                           prodl	equ	0xFF3
 16295                           intcon	equ	0xFF2
 16296                           intcon2	equ	0xFF1
 16297                           intcon3	equ	0xFF0
 16298                           indf0	equ	0xFEF
 16299                           postinc0	equ	0xFEE
 16300                           fsr0h	equ	0xFEA
 16301                           fsr0l	equ	0xFE9
 16302                           wreg	equ	0xFE8
 16303                           postdec1	equ	0xFE5
 16304                           fsr1h	equ	0xFE2
 16305                           fsr1l	equ	0xFE1
 16306                           indf2	equ	0xFDF
 16307                           postinc2	equ	0xFDE
 16308                           postdec2	equ	0xFDD
 16309                           fsr2h	equ	0xFDA
 16310                           fsr2l	equ	0xFD9
 16311                           status	equ	0xFD8
 16312                           
 16313 ;; *************** function _change_state_to_menu_23 *****************
 16314 ;; Defined at:
 16315 ;;		line 504 in file "UI.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;		None
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;		None
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  1    wreg      void 
 16322 ;; Registers used:
 16323 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;Total ram usage:        0 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    3
 16336 ;; This function calls:
 16337 ;;		i2_lcdInst
 16338 ;;		i2_printf
 16339 ;; This function is called by:
 16340 ;;		_updateMenu
 16341 ;;		_inputHandler
 16342 ;; This function uses a non-reentrant model
 16343 ;;
 16344                           
 16345                           	psect	text62
 16346  003CEE                     __ptext62:
 16347                           	opt stack 0
 16348  003CEE                     _change_state_to_menu_23:
 16349                           	opt stack 18
 16350                           
 16351                           ;UI.c: 505: cur_state = 23;
 16352                           
 16353                           ;incstack = 0
 16354  003CEE  0E00               	movlw	0
 16355  003CF0  0100               	movlb	0	; () banked
 16356  003CF2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16357  003CF4  0E17               	movlw	23
 16358  003CF6  6FDE               	movwf	_cur_state& (0+255),b
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;UI.c: 507: lcdInst(0b10000000);;
 16362  003CF8  0E80               	movlw	128
 16363  003CFA  EC68  F020         	call	i2_lcdInst
 16364                           
 16365                           ;UI.c: 508: printf("2. SORT         ");
 16366  003CFE  0E59               	movlw	low STR_32
 16367  003D00  6E0D               	movwf	i2printf@f,c
 16368  003D02  0EFD               	movlw	high STR_32
 16369  003D04  6E0E               	movwf	i2printf@f+1,c
 16370  003D06  ECB3  F00A         	call	i2_printf	;wreg free
 16371                           
 16372                           ;UI.c: 509: lcdInst(0b11000000);;
 16373  003D0A  0EC0               	movlw	192
 16374  003D0C  EC68  F020         	call	i2_lcdInst
 16375                           
 16376                           ;UI.c: 510: printf("3. LOGS        <");
 16377  003D10  0EF2               	movlw	low STR_38
 16378  003D12  6E0D               	movwf	i2printf@f,c
 16379  003D14  0EFD               	movlw	high STR_38
 16380  003D16  6E0E               	movwf	i2printf@f+1,c
 16381  003D18  ECB3  F00A         	call	i2_printf	;wreg free
 16382  003D1C  0012               	return		;funcret
 16383  003D1E                     __end_of_change_state_to_menu_23:
 16384                           	opt stack 0
 16385                           pclatu	equ	0xFFB
 16386                           pclath	equ	0xFFA
 16387                           tblptru	equ	0xFF8
 16388                           tblptrh	equ	0xFF7
 16389                           tblptrl	equ	0xFF6
 16390                           tablat	equ	0xFF5
 16391                           prodh	equ	0xFF4
 16392                           prodl	equ	0xFF3
 16393                           intcon	equ	0xFF2
 16394                           intcon2	equ	0xFF1
 16395                           intcon3	equ	0xFF0
 16396                           indf0	equ	0xFEF
 16397                           postinc0	equ	0xFEE
 16398                           fsr0h	equ	0xFEA
 16399                           fsr0l	equ	0xFE9
 16400                           wreg	equ	0xFE8
 16401                           postdec1	equ	0xFE5
 16402                           fsr1h	equ	0xFE2
 16403                           fsr1l	equ	0xFE1
 16404                           indf2	equ	0xFDF
 16405                           postinc2	equ	0xFDE
 16406                           postdec2	equ	0xFDD
 16407                           fsr2h	equ	0xFDA
 16408                           fsr2l	equ	0xFD9
 16409                           status	equ	0xFD8
 16410                           
 16411 ;; *************** function _change_state_to_menu_11 *****************
 16412 ;; Defined at:
 16413 ;;		line 480 in file "UI.c"
 16414 ;; Parameters:    Size  Location     Type
 16415 ;;		None
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;		None
 16418 ;; Return value:  Size  Location     Type
 16419 ;;                  1    wreg      void 
 16420 ;; Registers used:
 16421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16422 ;; Tracked objects:
 16423 ;;		On entry : 0/0
 16424 ;;		On exit  : 0/0
 16425 ;;		Unchanged: 0/0
 16426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;Total ram usage:        0 bytes
 16432 ;; Hardware stack levels used:    1
 16433 ;; Hardware stack levels required when called:    3
 16434 ;; This function calls:
 16435 ;;		i2_lcdInst
 16436 ;;		i2_printf
 16437 ;; This function is called by:
 16438 ;;		_updateMenu
 16439 ;;		_inputHandler
 16440 ;; This function uses a non-reentrant model
 16441 ;;
 16442                           
 16443                           	psect	text63
 16444  003D1E                     __ptext63:
 16445                           	opt stack 0
 16446  003D1E                     _change_state_to_menu_11:
 16447                           	opt stack 18
 16448                           
 16449                           ;UI.c: 481: cur_state = 11;
 16450                           
 16451                           ;incstack = 0
 16452  003D1E  0E00               	movlw	0
 16453  003D20  0100               	movlb	0	; () banked
 16454  003D22  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16455  003D24  0E0B               	movlw	11
 16456  003D26  6FDE               	movwf	_cur_state& (0+255),b
 16457                           
 16458                           ; BSR set to: 0
 16459                           ;UI.c: 483: lcdInst(0b10000000);;
 16460  003D28  0E80               	movlw	128
 16461  003D2A  EC68  F020         	call	i2_lcdInst
 16462                           
 16463                           ;UI.c: 484: printf("1. DATE/TIME   <");
 16464  003D2E  0E14               	movlw	low STR_31
 16465  003D30  6E0D               	movwf	i2printf@f,c
 16466  003D32  0EFE               	movlw	high STR_31
 16467  003D34  6E0E               	movwf	i2printf@f+1,c
 16468  003D36  ECB3  F00A         	call	i2_printf	;wreg free
 16469                           
 16470                           ;UI.c: 485: lcdInst(0b11000000);;
 16471  003D3A  0EC0               	movlw	192
 16472  003D3C  EC68  F020         	call	i2_lcdInst
 16473                           
 16474                           ;UI.c: 486: printf("2. SORT         ");
 16475  003D40  0E59               	movlw	low STR_32
 16476  003D42  6E0D               	movwf	i2printf@f,c
 16477  003D44  0EFD               	movlw	high STR_32
 16478  003D46  6E0E               	movwf	i2printf@f+1,c
 16479  003D48  ECB3  F00A         	call	i2_printf	;wreg free
 16480  003D4C  0012               	return		;funcret
 16481  003D4E                     __end_of_change_state_to_menu_11:
 16482                           	opt stack 0
 16483                           pclatu	equ	0xFFB
 16484                           pclath	equ	0xFFA
 16485                           tblptru	equ	0xFF8
 16486                           tblptrh	equ	0xFF7
 16487                           tblptrl	equ	0xFF6
 16488                           tablat	equ	0xFF5
 16489                           prodh	equ	0xFF4
 16490                           prodl	equ	0xFF3
 16491                           intcon	equ	0xFF2
 16492                           intcon2	equ	0xFF1
 16493                           intcon3	equ	0xFF0
 16494                           indf0	equ	0xFEF
 16495                           postinc0	equ	0xFEE
 16496                           fsr0h	equ	0xFEA
 16497                           fsr0l	equ	0xFE9
 16498                           wreg	equ	0xFE8
 16499                           postdec1	equ	0xFE5
 16500                           fsr1h	equ	0xFE2
 16501                           fsr1l	equ	0xFE1
 16502                           indf2	equ	0xFDF
 16503                           postinc2	equ	0xFDE
 16504                           postdec2	equ	0xFDD
 16505                           fsr2h	equ	0xFDA
 16506                           fsr2l	equ	0xFD9
 16507                           status	equ	0xFD8
 16508                           
 16509 ;; *************** function _change_state_to_logs_34 *****************
 16510 ;; Defined at:
 16511 ;;		line 547 in file "UI.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;		None
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;		None
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  1    wreg      void 
 16518 ;; Registers used:
 16519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16529 ;;Total ram usage:        0 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    3
 16532 ;; This function calls:
 16533 ;;		i2_lcdInst
 16534 ;;		i2_printf
 16535 ;; This function is called by:
 16536 ;;		_updateMenu
 16537 ;;		_inputHandler
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           	psect	text64
 16542  003D4E                     __ptext64:
 16543                           	opt stack 0
 16544  003D4E                     _change_state_to_logs_34:
 16545                           	opt stack 18
 16546                           
 16547                           ;UI.c: 548: cur_state = 1034;
 16548                           
 16549                           ;incstack = 0
 16550  003D4E  0E04               	movlw	4
 16551  003D50  0100               	movlb	0	; () banked
 16552  003D52  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16553  003D54  0E0A               	movlw	10
 16554  003D56  6FDE               	movwf	_cur_state& (0+255),b
 16555                           
 16556                           ; BSR set to: 0
 16557                           ;UI.c: 549: lcdInst(0b10000000);;
 16558  003D58  0E80               	movlw	128
 16559  003D5A  EC68  F020         	call	i2_lcdInst
 16560                           
 16561                           ;UI.c: 550: printf("LOG 3           ");
 16562  003D5E  0E26               	movlw	low STR_44
 16563  003D60  6E0D               	movwf	i2printf@f,c
 16564  003D62  0EFD               	movlw	high STR_44
 16565  003D64  6E0E               	movwf	i2printf@f+1,c
 16566  003D66  ECB3  F00A         	call	i2_printf	;wreg free
 16567                           
 16568                           ;UI.c: 551: lcdInst(0b11000000);;
 16569  003D6A  0EC0               	movlw	192
 16570  003D6C  EC68  F020         	call	i2_lcdInst
 16571                           
 16572                           ;UI.c: 552: printf("LOG 4          <");
 16573  003D70  0EE1               	movlw	low STR_50
 16574  003D72  6E0D               	movwf	i2printf@f,c
 16575  003D74  0EFD               	movlw	high STR_50
 16576  003D76  6E0E               	movwf	i2printf@f+1,c
 16577  003D78  ECB3  F00A         	call	i2_printf	;wreg free
 16578  003D7C  0012               	return		;funcret
 16579  003D7E                     __end_of_change_state_to_logs_34:
 16580                           	opt stack 0
 16581                           pclatu	equ	0xFFB
 16582                           pclath	equ	0xFFA
 16583                           tblptru	equ	0xFF8
 16584                           tblptrh	equ	0xFF7
 16585                           tblptrl	equ	0xFF6
 16586                           tablat	equ	0xFF5
 16587                           prodh	equ	0xFF4
 16588                           prodl	equ	0xFF3
 16589                           intcon	equ	0xFF2
 16590                           intcon2	equ	0xFF1
 16591                           intcon3	equ	0xFF0
 16592                           indf0	equ	0xFEF
 16593                           postinc0	equ	0xFEE
 16594                           fsr0h	equ	0xFEA
 16595                           fsr0l	equ	0xFE9
 16596                           wreg	equ	0xFE8
 16597                           postdec1	equ	0xFE5
 16598                           fsr1h	equ	0xFE2
 16599                           fsr1l	equ	0xFE1
 16600                           indf2	equ	0xFDF
 16601                           postinc2	equ	0xFDE
 16602                           postdec2	equ	0xFDD
 16603                           fsr2h	equ	0xFDA
 16604                           fsr2l	equ	0xFD9
 16605                           status	equ	0xFD8
 16606                           
 16607 ;; *************** function _change_state_to_logs_33 *****************
 16608 ;; Defined at:
 16609 ;;		line 540 in file "UI.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;		None
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;		None
 16614 ;; Return value:  Size  Location     Type
 16615 ;;                  1    wreg      void 
 16616 ;; Registers used:
 16617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16618 ;; Tracked objects:
 16619 ;;		On entry : 0/0
 16620 ;;		On exit  : 0/0
 16621 ;;		Unchanged: 0/0
 16622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;Total ram usage:        0 bytes
 16628 ;; Hardware stack levels used:    1
 16629 ;; Hardware stack levels required when called:    3
 16630 ;; This function calls:
 16631 ;;		i2_lcdInst
 16632 ;;		i2_printf
 16633 ;; This function is called by:
 16634 ;;		_updateMenu
 16635 ;;		_inputHandler
 16636 ;; This function uses a non-reentrant model
 16637 ;;
 16638                           
 16639                           	psect	text65
 16640  003D7E                     __ptext65:
 16641                           	opt stack 0
 16642  003D7E                     _change_state_to_logs_33:
 16643                           	opt stack 18
 16644                           
 16645                           ;UI.c: 541: cur_state = 1033;
 16646                           
 16647                           ;incstack = 0
 16648  003D7E  0E04               	movlw	4
 16649  003D80  0100               	movlb	0	; () banked
 16650  003D82  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16651  003D84  0E09               	movlw	9
 16652  003D86  6FDE               	movwf	_cur_state& (0+255),b
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;UI.c: 542: lcdInst(0b10000000);;
 16656  003D88  0E80               	movlw	128
 16657  003D8A  EC68  F020         	call	i2_lcdInst
 16658                           
 16659                           ;UI.c: 543: printf("LOG 3          <");
 16660  003D8E  0ED0               	movlw	low STR_46
 16661  003D90  6E0D               	movwf	i2printf@f,c
 16662  003D92  0EFD               	movlw	high STR_46
 16663  003D94  6E0E               	movwf	i2printf@f+1,c
 16664  003D96  ECB3  F00A         	call	i2_printf	;wreg free
 16665                           
 16666                           ;UI.c: 544: lcdInst(0b11000000);;
 16667  003D9A  0EC0               	movlw	192
 16668  003D9C  EC68  F020         	call	i2_lcdInst
 16669                           
 16670                           ;UI.c: 545: printf("LOG 4           ");
 16671  003DA0  0E37               	movlw	low STR_48
 16672  003DA2  6E0D               	movwf	i2printf@f,c
 16673  003DA4  0EFD               	movlw	high STR_48
 16674  003DA6  6E0E               	movwf	i2printf@f+1,c
 16675  003DA8  ECB3  F00A         	call	i2_printf	;wreg free
 16676  003DAC  0012               	return		;funcret
 16677  003DAE                     __end_of_change_state_to_logs_33:
 16678                           	opt stack 0
 16679                           pclatu	equ	0xFFB
 16680                           pclath	equ	0xFFA
 16681                           tblptru	equ	0xFF8
 16682                           tblptrh	equ	0xFF7
 16683                           tblptrl	equ	0xFF6
 16684                           tablat	equ	0xFF5
 16685                           prodh	equ	0xFF4
 16686                           prodl	equ	0xFF3
 16687                           intcon	equ	0xFF2
 16688                           intcon2	equ	0xFF1
 16689                           intcon3	equ	0xFF0
 16690                           indf0	equ	0xFEF
 16691                           postinc0	equ	0xFEE
 16692                           fsr0h	equ	0xFEA
 16693                           fsr0l	equ	0xFE9
 16694                           wreg	equ	0xFE8
 16695                           postdec1	equ	0xFE5
 16696                           fsr1h	equ	0xFE2
 16697                           fsr1l	equ	0xFE1
 16698                           indf2	equ	0xFDF
 16699                           postinc2	equ	0xFDE
 16700                           postdec2	equ	0xFDD
 16701                           fsr2h	equ	0xFDA
 16702                           fsr2l	equ	0xFD9
 16703                           status	equ	0xFD8
 16704                           
 16705 ;; *************** function _change_state_to_logs_23 *****************
 16706 ;; Defined at:
 16707 ;;		line 533 in file "UI.c"
 16708 ;; Parameters:    Size  Location     Type
 16709 ;;		None
 16710 ;; Auto vars:     Size  Location     Type
 16711 ;;		None
 16712 ;; Return value:  Size  Location     Type
 16713 ;;                  1    wreg      void 
 16714 ;; Registers used:
 16715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16716 ;; Tracked objects:
 16717 ;;		On entry : 0/0
 16718 ;;		On exit  : 0/0
 16719 ;;		Unchanged: 0/0
 16720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16725 ;;Total ram usage:        0 bytes
 16726 ;; Hardware stack levels used:    1
 16727 ;; Hardware stack levels required when called:    3
 16728 ;; This function calls:
 16729 ;;		i2_lcdInst
 16730 ;;		i2_printf
 16731 ;; This function is called by:
 16732 ;;		_updateMenu
 16733 ;;		_inputHandler
 16734 ;; This function uses a non-reentrant model
 16735 ;;
 16736                           
 16737                           	psect	text66
 16738  003E6C                     __ptext66:
 16739                           	opt stack 0
 16740  003E6C                     _change_state_to_logs_23:
 16741                           	opt stack 18
 16742                           
 16743                           ;UI.c: 534: cur_state = 1023;
 16744                           
 16745                           ;incstack = 0
 16746  003E6C  0E03               	movlw	3
 16747  003E6E  0100               	movlb	0	; () banked
 16748  003E70  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16749  003E72  69DE               	setf	_cur_state& (0+255),b
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;UI.c: 535: lcdInst(0b10000000);;
 16753  003E74  0E80               	movlw	128
 16754  003E76  EC68  F020         	call	i2_lcdInst
 16755                           
 16756                           ;UI.c: 536: printf("LOG 2           ");
 16757  003E7A  0E15               	movlw	low STR_40
 16758  003E7C  6E0D               	movwf	i2printf@f,c
 16759  003E7E  0EFD               	movlw	high STR_40
 16760  003E80  6E0E               	movwf	i2printf@f+1,c
 16761  003E82  ECB3  F00A         	call	i2_printf	;wreg free
 16762                           
 16763                           ;UI.c: 537: lcdInst(0b11000000);;
 16764  003E86  0EC0               	movlw	192
 16765  003E88  EC68  F020         	call	i2_lcdInst
 16766                           
 16767                           ;UI.c: 538: printf("LOG 3          <");
 16768  003E8C  0ED0               	movlw	low STR_46
 16769  003E8E  6E0D               	movwf	i2printf@f,c
 16770  003E90  0EFD               	movlw	high STR_46
 16771  003E92  6E0E               	movwf	i2printf@f+1,c
 16772  003E94  ECB3  F00A         	call	i2_printf	;wreg free
 16773  003E98  0012               	return		;funcret
 16774  003E9A                     __end_of_change_state_to_logs_23:
 16775                           	opt stack 0
 16776                           pclatu	equ	0xFFB
 16777                           pclath	equ	0xFFA
 16778                           tblptru	equ	0xFF8
 16779                           tblptrh	equ	0xFF7
 16780                           tblptrl	equ	0xFF6
 16781                           tablat	equ	0xFF5
 16782                           prodh	equ	0xFF4
 16783                           prodl	equ	0xFF3
 16784                           intcon	equ	0xFF2
 16785                           intcon2	equ	0xFF1
 16786                           intcon3	equ	0xFF0
 16787                           indf0	equ	0xFEF
 16788                           postinc0	equ	0xFEE
 16789                           fsr0h	equ	0xFEA
 16790                           fsr0l	equ	0xFE9
 16791                           wreg	equ	0xFE8
 16792                           postdec1	equ	0xFE5
 16793                           fsr1h	equ	0xFE2
 16794                           fsr1l	equ	0xFE1
 16795                           indf2	equ	0xFDF
 16796                           postinc2	equ	0xFDE
 16797                           postdec2	equ	0xFDD
 16798                           fsr2h	equ	0xFDA
 16799                           fsr2l	equ	0xFD9
 16800                           status	equ	0xFD8
 16801                           
 16802 ;; *************** function _change_state_to_logs_22 *****************
 16803 ;; Defined at:
 16804 ;;		line 526 in file "UI.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;		None
 16807 ;; Auto vars:     Size  Location     Type
 16808 ;;		None
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  1    wreg      void 
 16811 ;; Registers used:
 16812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;Total ram usage:        0 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    3
 16825 ;; This function calls:
 16826 ;;		i2_lcdInst
 16827 ;;		i2_printf
 16828 ;; This function is called by:
 16829 ;;		_updateMenu
 16830 ;;		_inputHandler
 16831 ;; This function uses a non-reentrant model
 16832 ;;
 16833                           
 16834                           	psect	text67
 16835  003DAE                     __ptext67:
 16836                           	opt stack 0
 16837  003DAE                     _change_state_to_logs_22:
 16838                           	opt stack 18
 16839                           
 16840                           ;UI.c: 527: cur_state = 1022;
 16841                           
 16842                           ;incstack = 0
 16843  003DAE  0E03               	movlw	3
 16844  003DB0  0100               	movlb	0	; () banked
 16845  003DB2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16846  003DB4  0EFE               	movlw	254
 16847  003DB6  6FDE               	movwf	_cur_state& (0+255),b
 16848                           
 16849                           ; BSR set to: 0
 16850                           ;UI.c: 528: lcdInst(0b10000000);;
 16851  003DB8  0E80               	movlw	128
 16852  003DBA  EC68  F020         	call	i2_lcdInst
 16853                           
 16854                           ;UI.c: 529: printf("LOG 2          <");
 16855  003DBE  0EBF               	movlw	low STR_42
 16856  003DC0  6E0D               	movwf	i2printf@f,c
 16857  003DC2  0EFD               	movlw	high STR_42
 16858  003DC4  6E0E               	movwf	i2printf@f+1,c
 16859  003DC6  ECB3  F00A         	call	i2_printf	;wreg free
 16860                           
 16861                           ;UI.c: 530: lcdInst(0b11000000);;
 16862  003DCA  0EC0               	movlw	192
 16863  003DCC  EC68  F020         	call	i2_lcdInst
 16864                           
 16865                           ;UI.c: 531: printf("LOG 3           ");
 16866  003DD0  0E26               	movlw	low STR_44
 16867  003DD2  6E0D               	movwf	i2printf@f,c
 16868  003DD4  0EFD               	movlw	high STR_44
 16869  003DD6  6E0E               	movwf	i2printf@f+1,c
 16870  003DD8  ECB3  F00A         	call	i2_printf	;wreg free
 16871  003DDC  0012               	return		;funcret
 16872  003DDE                     __end_of_change_state_to_logs_22:
 16873                           	opt stack 0
 16874                           pclatu	equ	0xFFB
 16875                           pclath	equ	0xFFA
 16876                           tblptru	equ	0xFF8
 16877                           tblptrh	equ	0xFF7
 16878                           tblptrl	equ	0xFF6
 16879                           tablat	equ	0xFF5
 16880                           prodh	equ	0xFF4
 16881                           prodl	equ	0xFF3
 16882                           intcon	equ	0xFF2
 16883                           intcon2	equ	0xFF1
 16884                           intcon3	equ	0xFF0
 16885                           indf0	equ	0xFEF
 16886                           postinc0	equ	0xFEE
 16887                           fsr0h	equ	0xFEA
 16888                           fsr0l	equ	0xFE9
 16889                           wreg	equ	0xFE8
 16890                           postdec1	equ	0xFE5
 16891                           fsr1h	equ	0xFE2
 16892                           fsr1l	equ	0xFE1
 16893                           indf2	equ	0xFDF
 16894                           postinc2	equ	0xFDE
 16895                           postdec2	equ	0xFDD
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900 ;; *************** function _change_state_to_logs_12 *****************
 16901 ;; Defined at:
 16902 ;;		line 519 in file "UI.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;		None
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;		None
 16907 ;; Return value:  Size  Location     Type
 16908 ;;                  1    wreg      void 
 16909 ;; Registers used:
 16910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16911 ;; Tracked objects:
 16912 ;;		On entry : 0/0
 16913 ;;		On exit  : 0/0
 16914 ;;		Unchanged: 0/0
 16915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;Total ram usage:        0 bytes
 16921 ;; Hardware stack levels used:    1
 16922 ;; Hardware stack levels required when called:    3
 16923 ;; This function calls:
 16924 ;;		i2_lcdInst
 16925 ;;		i2_printf
 16926 ;; This function is called by:
 16927 ;;		_updateMenu
 16928 ;;		_inputHandler
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           	psect	text68
 16933  003DDE                     __ptext68:
 16934                           	opt stack 0
 16935  003DDE                     _change_state_to_logs_12:
 16936                           	opt stack 18
 16937                           
 16938                           ;UI.c: 520: cur_state = 1012;
 16939                           
 16940                           ;incstack = 0
 16941  003DDE  0E03               	movlw	3
 16942  003DE0  0100               	movlb	0	; () banked
 16943  003DE2  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16944  003DE4  0EF4               	movlw	244
 16945  003DE6  6FDE               	movwf	_cur_state& (0+255),b
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;UI.c: 521: lcdInst(0b10000000);;
 16949  003DE8  0E80               	movlw	128
 16950  003DEA  EC68  F020         	call	i2_lcdInst
 16951                           
 16952                           ;UI.c: 522: printf("LOG 1           ");
 16953  003DEE  0E04               	movlw	low STR_41
 16954  003DF0  6E0D               	movwf	i2printf@f,c
 16955  003DF2  0EFD               	movlw	high STR_41
 16956  003DF4  6E0E               	movwf	i2printf@f+1,c
 16957  003DF6  ECB3  F00A         	call	i2_printf	;wreg free
 16958                           
 16959                           ;UI.c: 523: lcdInst(0b11000000);;
 16960  003DFA  0EC0               	movlw	192
 16961  003DFC  EC68  F020         	call	i2_lcdInst
 16962                           
 16963                           ;UI.c: 524: printf("LOG 2          <");
 16964  003E00  0EBF               	movlw	low STR_42
 16965  003E02  6E0D               	movwf	i2printf@f,c
 16966  003E04  0EFD               	movlw	high STR_42
 16967  003E06  6E0E               	movwf	i2printf@f+1,c
 16968  003E08  ECB3  F00A         	call	i2_printf	;wreg free
 16969  003E0C  0012               	return		;funcret
 16970  003E0E                     __end_of_change_state_to_logs_12:
 16971                           	opt stack 0
 16972                           pclatu	equ	0xFFB
 16973                           pclath	equ	0xFFA
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           intcon2	equ	0xFF1
 16982                           intcon3	equ	0xFF0
 16983                           indf0	equ	0xFEF
 16984                           postinc0	equ	0xFEE
 16985                           fsr0h	equ	0xFEA
 16986                           fsr0l	equ	0xFE9
 16987                           wreg	equ	0xFE8
 16988                           postdec1	equ	0xFE5
 16989                           fsr1h	equ	0xFE2
 16990                           fsr1l	equ	0xFE1
 16991                           indf2	equ	0xFDF
 16992                           postinc2	equ	0xFDE
 16993                           postdec2	equ	0xFDD
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8
 16997                           
 16998 ;; *************** function _change_state_to_logs_11 *****************
 16999 ;; Defined at:
 17000 ;;		line 512 in file "UI.c"
 17001 ;; Parameters:    Size  Location     Type
 17002 ;;		None
 17003 ;; Auto vars:     Size  Location     Type
 17004 ;;		None
 17005 ;; Return value:  Size  Location     Type
 17006 ;;                  1    wreg      void 
 17007 ;; Registers used:
 17008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17009 ;; Tracked objects:
 17010 ;;		On entry : 0/0
 17011 ;;		On exit  : 0/0
 17012 ;;		Unchanged: 0/0
 17013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17018 ;;Total ram usage:        0 bytes
 17019 ;; Hardware stack levels used:    1
 17020 ;; Hardware stack levels required when called:    3
 17021 ;; This function calls:
 17022 ;;		i2_lcdInst
 17023 ;;		i2_printf
 17024 ;; This function is called by:
 17025 ;;		_updateMenu
 17026 ;;		_inputHandler
 17027 ;; This function uses a non-reentrant model
 17028 ;;
 17029                           
 17030                           	psect	text69
 17031  003E0E                     __ptext69:
 17032                           	opt stack 0
 17033  003E0E                     _change_state_to_logs_11:
 17034                           	opt stack 18
 17035                           
 17036                           ;UI.c: 513: cur_state = 1011;
 17037                           
 17038                           ;incstack = 0
 17039  003E0E  0E03               	movlw	3
 17040  003E10  0100               	movlb	0	; () banked
 17041  003E12  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17042  003E14  0EF3               	movlw	243
 17043  003E16  6FDE               	movwf	_cur_state& (0+255),b
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;UI.c: 514: lcdInst(0b10000000);;
 17047  003E18  0E80               	movlw	128
 17048  003E1A  EC68  F020         	call	i2_lcdInst
 17049                           
 17050                           ;UI.c: 515: printf("LOG 1          <");
 17051  003E1E  0EAE               	movlw	low STR_39
 17052  003E20  6E0D               	movwf	i2printf@f,c
 17053  003E22  0EFD               	movlw	high STR_39
 17054  003E24  6E0E               	movwf	i2printf@f+1,c
 17055  003E26  ECB3  F00A         	call	i2_printf	;wreg free
 17056                           
 17057                           ;UI.c: 516: lcdInst(0b11000000);;
 17058  003E2A  0EC0               	movlw	192
 17059  003E2C  EC68  F020         	call	i2_lcdInst
 17060                           
 17061                           ;UI.c: 517: printf("LOG 2           ");
 17062  003E30  0E15               	movlw	low STR_40
 17063  003E32  6E0D               	movwf	i2printf@f,c
 17064  003E34  0EFD               	movlw	high STR_40
 17065  003E36  6E0E               	movwf	i2printf@f+1,c
 17066  003E38  ECB3  F00A         	call	i2_printf	;wreg free
 17067  003E3C  0012               	return		;funcret
 17068  003E3E                     __end_of_change_state_to_logs_11:
 17069                           	opt stack 0
 17070                           pclatu	equ	0xFFB
 17071                           pclath	equ	0xFFA
 17072                           tblptru	equ	0xFF8
 17073                           tblptrh	equ	0xFF7
 17074                           tblptrl	equ	0xFF6
 17075                           tablat	equ	0xFF5
 17076                           prodh	equ	0xFF4
 17077                           prodl	equ	0xFF3
 17078                           intcon	equ	0xFF2
 17079                           intcon2	equ	0xFF1
 17080                           intcon3	equ	0xFF0
 17081                           indf0	equ	0xFEF
 17082                           postinc0	equ	0xFEE
 17083                           fsr0h	equ	0xFEA
 17084                           fsr0l	equ	0xFE9
 17085                           wreg	equ	0xFE8
 17086                           postdec1	equ	0xFE5
 17087                           fsr1h	equ	0xFE2
 17088                           fsr1l	equ	0xFE1
 17089                           indf2	equ	0xFDF
 17090                           postinc2	equ	0xFDE
 17091                           postdec2	equ	0xFDD
 17092                           fsr2h	equ	0xFDA
 17093                           fsr2l	equ	0xFD9
 17094                           status	equ	0xFD8
 17095                           
 17096 ;; *************** function _dispLogs *****************
 17097 ;; Defined at:
 17098 ;;		line 465 in file "UI.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;  myLog           2   17[COMRAM] int 
 17101 ;; Auto vars:     Size  Location     Type
 17102 ;;		None
 17103 ;; Return value:  Size  Location     Type
 17104 ;;                  1    wreg      void 
 17105 ;; Registers used:
 17106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17107 ;; Tracked objects:
 17108 ;;		On entry : 0/0
 17109 ;;		On exit  : 0/0
 17110 ;;		Unchanged: 0/0
 17111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17116 ;;Total ram usage:        2 bytes
 17117 ;; Hardware stack levels used:    1
 17118 ;; Hardware stack levels required when called:    2
 17119 ;; This function calls:
 17120 ;;		_retrieveLog
 17121 ;; This function is called by:
 17122 ;;		_updateMenu
 17123 ;; This function uses a non-reentrant model
 17124 ;;
 17125                           
 17126                           	psect	text70
 17127  003FB4                     __ptext70:
 17128                           	opt stack 0
 17129  003FB4                     _dispLogs:
 17130                           	opt stack 20
 17131                           
 17132                           ;UI.c: 466: logstate = 1;
 17133                           
 17134                           ;incstack = 0
 17135  003FB4  0E00               	movlw	0
 17136  003FB6  0100               	movlb	0	; () banked
 17137  003FB8  6FF7               	movwf	(_logstate+1)& (0+255),b
 17138  003FBA  0E01               	movlw	1
 17139  003FBC  6FF6               	movwf	_logstate& (0+255),b
 17140                           
 17141                           ; BSR set to: 0
 17142                           ;UI.c: 467: log = myLog;
 17143  003FBE  C012  F0E6         	movff	dispLogs@myLog,_log
 17144  003FC2  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;UI.c: 468: retrieveLog(myLog - 1);
 17148  003FC6  0EFF               	movlw	255
 17149  003FC8  2412               	addwf	dispLogs@myLog,w,c
 17150  003FCA  6E07               	movwf	retrieveLog@logNum,c
 17151  003FCC  0EFF               	movlw	255
 17152  003FCE  2013               	addwfc	dispLogs@myLog+1,w,c
 17153  003FD0  6E08               	movwf	retrieveLog@logNum+1,c
 17154  003FD2  EC7B  F015         	call	_retrieveLog	;wreg free
 17155  003FD6  0012               	return		;funcret
 17156  003FD8                     __end_of_dispLogs:
 17157                           	opt stack 0
 17158                           pclatu	equ	0xFFB
 17159                           pclath	equ	0xFFA
 17160                           tblptru	equ	0xFF8
 17161                           tblptrh	equ	0xFF7
 17162                           tblptrl	equ	0xFF6
 17163                           tablat	equ	0xFF5
 17164                           prodh	equ	0xFF4
 17165                           prodl	equ	0xFF3
 17166                           intcon	equ	0xFF2
 17167                           intcon2	equ	0xFF1
 17168                           intcon3	equ	0xFF0
 17169                           indf0	equ	0xFEF
 17170                           postinc0	equ	0xFEE
 17171                           fsr0h	equ	0xFEA
 17172                           fsr0l	equ	0xFE9
 17173                           wreg	equ	0xFE8
 17174                           postdec1	equ	0xFE5
 17175                           fsr1h	equ	0xFE2
 17176                           fsr1l	equ	0xFE1
 17177                           indf2	equ	0xFDF
 17178                           postinc2	equ	0xFDE
 17179                           postdec2	equ	0xFDD
 17180                           fsr2h	equ	0xFDA
 17181                           fsr2l	equ	0xFD9
 17182                           status	equ	0xFD8
 17183                           
 17184 ;; *************** function _retrieveLog *****************
 17185 ;; Defined at:
 17186 ;;		line 134 in file "EEPROM.c"
 17187 ;; Parameters:    Size  Location     Type
 17188 ;;  logNum          2    6[COMRAM] int 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;  i               2   13[COMRAM] int 
 17191 ;;  addr            2   15[COMRAM] unsigned short 
 17192 ;;  byte3           1   12[COMRAM] unsigned char 
 17193 ;;  byte2           1   11[COMRAM] unsigned char 
 17194 ;;  byte1           1   10[COMRAM] unsigned char 
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  1    wreg      void 
 17197 ;; Registers used:
 17198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17206 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;Total ram usage:       11 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    1
 17211 ;; This function calls:
 17212 ;;		i2_EEPROM_read
 17213 ;;		i2___wmul
 17214 ;; This function is called by:
 17215 ;;		_dispLogs
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	text71
 17220  002AF6                     __ptext71:
 17221                           	opt stack 0
 17222  002AF6                     _retrieveLog:
 17223                           	opt stack 20
 17224                           
 17225                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 17226                           
 17227                           ;incstack = 0
 17228  002AF6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 17229  002AFA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 17230  002AFE  0E00               	movlw	0
 17231  002B00  6E04               	movwf	i2___wmul@multiplicand+1,c
 17232  002B02  0E0B               	movlw	11
 17233  002B04  6E03               	movwf	i2___wmul@multiplicand,c
 17234  002B06  ECA2  F01F         	call	i2___wmul	;wreg free
 17235  002B0A  0E01               	movlw	1
 17236  002B0C  2401               	addwf	?i2___wmul,w,c
 17237  002B0E  6E10               	movwf	retrieveLog@addr,c
 17238  002B10  0E00               	movlw	0
 17239  002B12  2002               	addwfc	?i2___wmul+1,w,c
 17240  002B14  6E11               	movwf	retrieveLog@addr+1,c
 17241                           
 17242                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 17243  002B16  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17244  002B1A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17245  002B1E  EC34  F020         	call	i2_EEPROM_read	;wreg free
 17246  002B22  6E0B               	movwf	retrieveLog@byte1,c
 17247                           
 17248                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 17249  002B24  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17250  002B28  0E80               	movlw	128
 17251  002B2A  1609               	andwf	??_retrieveLog,f,c
 17252  002B2C  5009               	movf	??_retrieveLog,w,c
 17253  002B2E  0100               	movlb	0	; () banked
 17254  002B30  6FE8               	movwf	_log_completion& (0+255),b
 17255  002B32  6BE9               	clrf	(_log_completion+1)& (0+255),b
 17256                           
 17257                           ; BSR set to: 0
 17258                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 17259  002B34  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 17260  002B38  0E0F               	movlw	15
 17261  002B3A  1609               	andwf	??_retrieveLog,f,c
 17262  002B3C  5009               	movf	??_retrieveLog,w,c
 17263  002B3E  0100               	movlb	0	; () banked
 17264  002B40  6FF2               	movwf	_log_count_total& (0+255),b
 17265  002B42  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 17266                           
 17267                           ; BSR set to: 0
 17268                           ;EEPROM.c: 146: addr++;
 17269  002B44  4A10               	infsnz	retrieveLog@addr,f,c
 17270  002B46  2A11               	incf	retrieveLog@addr+1,f,c
 17271                           
 17272                           ; BSR set to: 0
 17273                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 17274  002B48  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17275  002B4C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17276  002B50  EC34  F020         	call	i2_EEPROM_read	;wreg free
 17277  002B54  6E0C               	movwf	retrieveLog@byte2,c
 17278                           
 17279                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 17280  002B56  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17281  002B5A  0EF0               	movlw	240
 17282  002B5C  1609               	andwf	??_retrieveLog,f,c
 17283  002B5E  5009               	movf	??_retrieveLog,w,c
 17284  002B60  0100               	movlb	0	; () banked
 17285  002B62  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 17286  002B64  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 17287                           
 17288                           ; BSR set to: 0
 17289                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 17290  002B66  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 17291  002B6A  0E0F               	movlw	15
 17292  002B6C  1609               	andwf	??_retrieveLog,f,c
 17293  002B6E  5009               	movf	??_retrieveLog,w,c
 17294  002B70  0100               	movlb	0	; () banked
 17295  002B72  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 17296  002B74  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 17297                           
 17298                           ; BSR set to: 0
 17299                           ;EEPROM.c: 152: addr++;
 17300  002B76  4A10               	infsnz	retrieveLog@addr,f,c
 17301  002B78  2A11               	incf	retrieveLog@addr+1,f,c
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 17305  002B7A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17306  002B7E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17307  002B82  EC34  F020         	call	i2_EEPROM_read	;wreg free
 17308  002B86  6E0D               	movwf	retrieveLog@byte3,c
 17309                           
 17310                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 17311  002B88  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17312  002B8C  0EF0               	movlw	240
 17313  002B8E  1609               	andwf	??_retrieveLog,f,c
 17314  002B90  5009               	movf	??_retrieveLog,w,c
 17315  002B92  0100               	movlb	0	; () banked
 17316  002B94  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 17317  002B96  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 17321  002B98  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 17322  002B9C  0E0F               	movlw	15
 17323  002B9E  1609               	andwf	??_retrieveLog,f,c
 17324  002BA0  5009               	movf	??_retrieveLog,w,c
 17325  002BA2  0100               	movlb	0	; () banked
 17326  002BA4  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 17327  002BA6  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 17328                           
 17329                           ; BSR set to: 0
 17330                           ;EEPROM.c: 156: addr++;
 17331  002BA8  4A10               	infsnz	retrieveLog@addr,f,c
 17332  002BAA  2A11               	incf	retrieveLog@addr+1,f,c
 17333                           
 17334                           ; BSR set to: 0
 17335                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 17336  002BAC  0E00               	movlw	0
 17337  002BAE  6E0F               	movwf	retrieveLog@i+1,c
 17338  002BB0  0E00               	movlw	0
 17339  002BB2  6E0E               	movwf	retrieveLog@i,c
 17340  002BB4                     i2l5662:
 17341                           
 17342                           ; BSR set to: 0
 17343  002BB4  BE0F               	btfsc	retrieveLog@i+1,7,c
 17344  002BB6  D006               	goto	i2l5666
 17345  002BB8  500F               	movf	retrieveLog@i+1,w,c
 17346  002BBA  E11E               	bnz	i2l5674
 17347  002BBC  0E07               	movlw	7
 17348  002BBE  5C0E               	subwf	retrieveLog@i,w,c
 17349  002BC0  B0D8               	btfsc	status,0,c
 17350  002BC2  D01A               	goto	i2l5674
 17351  002BC4                     i2l5666:
 17352                           
 17353                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 17354  002BC4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17355  002BC8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17356  002BCC  EC34  F020         	call	i2_EEPROM_read	;wreg free
 17357  002BD0  6E09               	movwf	??_retrieveLog& (0+255),c
 17358  002BD2  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 17359  002BD4  90D8               	bcf	status,0,c
 17360  002BD6  340E               	rlcf	retrieveLog@i,w,c
 17361  002BD8  6ED9               	movwf	fsr2l,c
 17362  002BDA  340F               	rlcf	retrieveLog@i+1,w,c
 17363  002BDC  6EDA               	movwf	fsr2h,c
 17364  002BDE  0E00               	movlw	low _log_startTime
 17365  002BE0  26D9               	addwf	fsr2l,f,c
 17366  002BE2  0E01               	movlw	high _log_startTime
 17367  002BE4  22DA               	addwfc	fsr2h,f,c
 17368  002BE6  C009  FFDE         	movff	??_retrieveLog,postinc2
 17369  002BEA  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 17370                           
 17371                           ;EEPROM.c: 161: addr++;
 17372  002BEE  4A10               	infsnz	retrieveLog@addr,f,c
 17373  002BF0  2A11               	incf	retrieveLog@addr+1,f,c
 17374  002BF2  4A0E               	infsnz	retrieveLog@i,f,c
 17375  002BF4  2A0F               	incf	retrieveLog@i+1,f,c
 17376  002BF6  D7DE               	goto	i2l5662
 17377  002BF8                     i2l5674:
 17378                           
 17379                           ;EEPROM.c: 162: }
 17380                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 17381  002BF8  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 17382  002BFC  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 17383  002C00  EC34  F020         	call	i2_EEPROM_read	;wreg free
 17384  002C04  6E09               	movwf	??_retrieveLog& (0+255),c
 17385  002C06  5009               	movf	??_retrieveLog,w,c
 17386  002C08  0100               	movlb	0	; () banked
 17387  002C0A  6FF4               	movwf	_log_total_time& (0+255),b
 17388  002C0C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 17389                           
 17390                           ; BSR set to: 0
 17391  002C0E  0012               	return		;funcret
 17392  002C10                     __end_of_retrieveLog:
 17393                           	opt stack 0
 17394                           pclatu	equ	0xFFB
 17395                           pclath	equ	0xFFA
 17396                           tblptru	equ	0xFF8
 17397                           tblptrh	equ	0xFF7
 17398                           tblptrl	equ	0xFF6
 17399                           tablat	equ	0xFF5
 17400                           prodh	equ	0xFF4
 17401                           prodl	equ	0xFF3
 17402                           intcon	equ	0xFF2
 17403                           intcon2	equ	0xFF1
 17404                           intcon3	equ	0xFF0
 17405                           indf0	equ	0xFEF
 17406                           postinc0	equ	0xFEE
 17407                           fsr0h	equ	0xFEA
 17408                           fsr0l	equ	0xFE9
 17409                           wreg	equ	0xFE8
 17410                           postdec1	equ	0xFE5
 17411                           fsr1h	equ	0xFE2
 17412                           fsr1l	equ	0xFE1
 17413                           indf2	equ	0xFDF
 17414                           postinc2	equ	0xFDE
 17415                           postdec2	equ	0xFDD
 17416                           fsr2h	equ	0xFDA
 17417                           fsr2l	equ	0xFD9
 17418                           status	equ	0xFD8
 17419                           
 17420 ;; *************** function i2_EEPROM_read *****************
 17421 ;; Defined at:
 17422 ;;		line 68 in file "EEPROM.c"
 17423 ;; Parameters:    Size  Location     Type
 17424 ;;  address         2    0[COMRAM] unsigned short 
 17425 ;; Auto vars:     Size  Location     Type
 17426 ;;		None
 17427 ;; Return value:  Size  Location     Type
 17428 ;;                  1    wreg      unsigned char 
 17429 ;; Registers used:
 17430 ;;		wreg, status,2
 17431 ;; Tracked objects:
 17432 ;;		On entry : 0/0
 17433 ;;		On exit  : 0/0
 17434 ;;		Unchanged: 0/0
 17435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17436 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17440 ;;Total ram usage:        2 bytes
 17441 ;; Hardware stack levels used:    1
 17442 ;; This function calls:
 17443 ;;		Nothing
 17444 ;; This function is called by:
 17445 ;;		_retrieveLog
 17446 ;; This function uses a non-reentrant model
 17447 ;;
 17448                           
 17449                           	psect	text72
 17450  004068                     __ptext72:
 17451                           	opt stack 0
 17452  004068                     i2_EEPROM_read:
 17453                           	opt stack 20
 17454                           
 17455                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;incstack = 0
 17459  004068  5002               	movf	i2EEPROM_read@address+1,w,c
 17460  00406A  6EAA               	movwf	4010,c	;volatile
 17461                           
 17462                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 17463  00406C  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 17464                           
 17465                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 17466  004070  9EA6               	bcf	4006,7,c	;volatile
 17467                           
 17468                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 17469  004072  9CA6               	bcf	4006,6,c	;volatile
 17470                           
 17471                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 17472  004074  80A6               	bsf	4006,0,c	;volatile
 17473  004076                     i2l913:
 17474  004076  B0A6               	btfsc	4006,0,c	;volatile
 17475  004078  D7FE               	goto	i2l913
 17476                           
 17477                           ;EEPROM.c: 81: return EEDATA;
 17478  00407A  50A8               	movf	4008,w,c	;volatile
 17479  00407C  0012               	return	
 17480  00407E                     __end_ofi2_EEPROM_read:
 17481                           	opt stack 0
 17482                           pclatu	equ	0xFFB
 17483                           pclath	equ	0xFFA
 17484                           tblptru	equ	0xFF8
 17485                           tblptrh	equ	0xFF7
 17486                           tblptrl	equ	0xFF6
 17487                           tablat	equ	0xFF5
 17488                           prodh	equ	0xFF4
 17489                           prodl	equ	0xFF3
 17490                           intcon	equ	0xFF2
 17491                           intcon2	equ	0xFF1
 17492                           intcon3	equ	0xFF0
 17493                           indf0	equ	0xFEF
 17494                           postinc0	equ	0xFEE
 17495                           fsr0h	equ	0xFEA
 17496                           fsr0l	equ	0xFE9
 17497                           wreg	equ	0xFE8
 17498                           postdec1	equ	0xFE5
 17499                           fsr1h	equ	0xFE2
 17500                           fsr1l	equ	0xFE1
 17501                           indf2	equ	0xFDF
 17502                           postinc2	equ	0xFDE
 17503                           postdec2	equ	0xFDD
 17504                           fsr2h	equ	0xFDA
 17505                           fsr2l	equ	0xFD9
 17506                           status	equ	0xFD8
 17507                           
 17508 ;; *************** function _printSortTimer *****************
 17509 ;; Defined at:
 17510 ;;		line 255 in file "sort.c"
 17511 ;; Parameters:    Size  Location     Type
 17512 ;;		None
 17513 ;; Auto vars:     Size  Location     Type
 17514 ;;  i               2   72[COMRAM] int 
 17515 ;;  curTime        14   46[COMRAM] int [7]
 17516 ;;  timeDiff        2   70[COMRAM] unsigned int 
 17517 ;;  sec             2   66[COMRAM] int 
 17518 ;;  min             2   64[COMRAM] int 
 17519 ;;  cur_sec         2   62[COMRAM] unsigned int 
 17520 ;;  start_sec       2   60[COMRAM] unsigned int 
 17521 ;;  hour            2   44[COMRAM] int 
 17522 ;; Return value:  Size  Location     Type
 17523 ;;                  1    wreg      void 
 17524 ;; Registers used:
 17525 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17526 ;; Tracked objects:
 17527 ;;		On entry : 0/0
 17528 ;;		On exit  : 0/0
 17529 ;;		Unchanged: 0/0
 17530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17534 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17535 ;;Total ram usage:       33 bytes
 17536 ;; Hardware stack levels used:    1
 17537 ;; Hardware stack levels required when called:    3
 17538 ;; This function calls:
 17539 ;;		i2___lwdiv
 17540 ;;		i2___lwmod
 17541 ;;		i2___wmul
 17542 ;;		i2_getRTC
 17543 ;;		i2_lcdInst
 17544 ;;		i2_printf
 17545 ;; This function is called by:
 17546 ;;		_handler
 17547 ;; This function uses a non-reentrant model
 17548 ;;
 17549                           
 17550                           	psect	text73
 17551  002094                     __ptext73:
 17552                           	opt stack 0
 17553  002094                     _printSortTimer:
 17554                           	opt stack 20
 17555                           
 17556                           ;sort.c: 256: getRTC();
 17557                           
 17558                           ;incstack = 0
 17559  002094  EC04  F01B         	call	i2_getRTC	;wreg free
 17560                           
 17561                           ;sort.c: 257: int curTime[7];
 17562                           ;sort.c: 258: for(int i = 0; i < 7; i++){
 17563  002098  0E00               	movlw	0
 17564  00209A  6E4A               	movwf	printSortTimer@i+1,c
 17565  00209C  0E00               	movlw	0
 17566  00209E  6E49               	movwf	printSortTimer@i,c
 17567  0020A0                     i2l7504:
 17568  0020A0  BE4A               	btfsc	printSortTimer@i+1,7,c
 17569  0020A2  D006               	goto	i2l7508
 17570  0020A4  504A               	movf	printSortTimer@i+1,w,c
 17571  0020A6  E131               	bnz	i2l7514
 17572  0020A8  0E07               	movlw	7
 17573  0020AA  5C49               	subwf	printSortTimer@i,w,c
 17574  0020AC  B0D8               	btfsc	status,0,c
 17575  0020AE  D02D               	goto	i2l7514
 17576  0020B0                     i2l7508:
 17577                           
 17578                           ;sort.c: 259: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17579  0020B0  0E24               	movlw	low _time
 17580  0020B2  2449               	addwf	printSortTimer@i,w,c
 17581  0020B4  6ED9               	movwf	fsr2l,c
 17582  0020B6  0E01               	movlw	high _time
 17583  0020B8  204A               	addwfc	printSortTimer@i+1,w,c
 17584  0020BA  6EDA               	movwf	fsr2h,c
 17585  0020BC  50DF               	movf	indf2,w,c
 17586  0020BE  6E2A               	movwf	??_printSortTimer& (0+255),c
 17587  0020C0  3A2A               	swapf	??_printSortTimer,f,c
 17588  0020C2  0E0F               	movlw	15
 17589  0020C4  162A               	andwf	??_printSortTimer,f,c
 17590  0020C6  0E0F               	movlw	15
 17591  0020C8  162A               	andwf	??_printSortTimer,f,c
 17592  0020CA  502A               	movf	??_printSortTimer,w,c
 17593  0020CC  0D0A               	mullw	10
 17594  0020CE  0E24               	movlw	low _time
 17595  0020D0  2449               	addwf	printSortTimer@i,w,c
 17596  0020D2  6ED9               	movwf	fsr2l,c
 17597  0020D4  0E01               	movlw	high _time
 17598  0020D6  204A               	addwfc	printSortTimer@i+1,w,c
 17599  0020D8  6EDA               	movwf	fsr2h,c
 17600  0020DA  50DF               	movf	indf2,w,c
 17601  0020DC  0B0F               	andlw	15
 17602  0020DE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 17603  0020E0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 17604  0020E2  50F3               	movf	prodl,w,c
 17605  0020E4  262B               	addwf	??_printSortTimer+1,f,c
 17606  0020E6  50F4               	movf	prodh,w,c
 17607  0020E8  222C               	addwfc	??_printSortTimer+2,f,c
 17608  0020EA  90D8               	bcf	status,0,c
 17609  0020EC  3449               	rlcf	printSortTimer@i,w,c
 17610  0020EE  6ED9               	movwf	fsr2l,c
 17611  0020F0  344A               	rlcf	printSortTimer@i+1,w,c
 17612  0020F2  6EDA               	movwf	fsr2h,c
 17613  0020F4  0E2F               	movlw	low printSortTimer@curTime
 17614  0020F6  26D9               	addwf	fsr2l,f,c
 17615  0020F8  0E00               	movlw	high printSortTimer@curTime
 17616  0020FA  22DA               	addwfc	fsr2h,f,c
 17617  0020FC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 17618  002100  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 17619  002104  4A49               	infsnz	printSortTimer@i,f,c
 17620  002106  2A4A               	incf	printSortTimer@i+1,f,c
 17621  002108  D7CB               	goto	i2l7504
 17622  00210A                     i2l7514:
 17623                           
 17624                           ;sort.c: 260: }
 17625                           ;sort.c: 261: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 17626  00210A  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 17627  00210E  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 17628  002112  0E00               	movlw	0
 17629  002114  6E04               	movwf	i2___wmul@multiplicand+1,c
 17630  002116  0E3C               	movlw	60
 17631  002118  6E03               	movwf	i2___wmul@multiplicand,c
 17632  00211A  ECA2  F01F         	call	i2___wmul	;wreg free
 17633  00211E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17634  002122  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17635  002126  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17636  00212A  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17637  00212E  0E0E               	movlw	14
 17638  002130  6E04               	movwf	i2___wmul@multiplicand+1,c
 17639  002132  0E10               	movlw	16
 17640  002134  6E03               	movwf	i2___wmul@multiplicand,c
 17641  002136  ECA2  F01F         	call	i2___wmul	;wreg free
 17642  00213A  5001               	movf	?i2___wmul,w,c
 17643  00213C  262A               	addwf	??_printSortTimer,f,c
 17644  00213E  5002               	movf	?i2___wmul+1,w,c
 17645  002140  222B               	addwfc	??_printSortTimer+1,f,c
 17646  002142  0101               	movlb	1	; () banked
 17647  002144  510E               	movf	_startTime& (0+255),w,b
 17648  002146  242A               	addwf	??_printSortTimer,w,c
 17649  002148  6E3D               	movwf	printSortTimer@start_sec,c
 17650  00214A  0101               	movlb	1	; () banked
 17651  00214C  510F               	movf	(_startTime+1)& (0+255),w,b
 17652  00214E  202B               	addwfc	??_printSortTimer+1,w,c
 17653  002150  6E3E               	movwf	printSortTimer@start_sec+1,c
 17654                           
 17655                           ;sort.c: 262: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17656  002152  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17657  002156  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17658  00215A  0E00               	movlw	0
 17659  00215C  6E04               	movwf	i2___wmul@multiplicand+1,c
 17660  00215E  0E3C               	movlw	60
 17661  002160  6E03               	movwf	i2___wmul@multiplicand,c
 17662  002162  ECA2  F01F         	call	i2___wmul	;wreg free
 17663  002166  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17664  00216A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17665  00216E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17666  002172  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17667  002176  0E0E               	movlw	14
 17668  002178  6E04               	movwf	i2___wmul@multiplicand+1,c
 17669  00217A  0E10               	movlw	16
 17670  00217C  6E03               	movwf	i2___wmul@multiplicand,c
 17671  00217E  ECA2  F01F         	call	i2___wmul	;wreg free
 17672  002182  5001               	movf	?i2___wmul,w,c
 17673  002184  262A               	addwf	??_printSortTimer,f,c
 17674  002186  5002               	movf	?i2___wmul+1,w,c
 17675  002188  222B               	addwfc	??_printSortTimer+1,f,c
 17676  00218A  502F               	movf	printSortTimer@curTime,w,c
 17677  00218C  242A               	addwf	??_printSortTimer,w,c
 17678  00218E  6E3F               	movwf	printSortTimer@cur_sec,c
 17679  002190  5030               	movf	printSortTimer@curTime+1,w,c
 17680  002192  202B               	addwfc	??_printSortTimer+1,w,c
 17681  002194  6E40               	movwf	printSortTimer@cur_sec+1,c
 17682                           
 17683                           ;sort.c: 263: unsigned int timeDiff = cur_sec - start_sec;
 17684  002196  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 17685  00219A  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 17686  00219E  1E2A               	comf	??_printSortTimer,f,c
 17687  0021A0  1E2B               	comf	??_printSortTimer+1,f,c
 17688  0021A2  4A2A               	infsnz	??_printSortTimer,f,c
 17689  0021A4  2A2B               	incf	??_printSortTimer+1,f,c
 17690  0021A6  503F               	movf	printSortTimer@cur_sec,w,c
 17691  0021A8  242A               	addwf	??_printSortTimer,w,c
 17692  0021AA  6E47               	movwf	printSortTimer@timeDiff,c
 17693  0021AC  5040               	movf	printSortTimer@cur_sec+1,w,c
 17694  0021AE  202B               	addwfc	??_printSortTimer+1,w,c
 17695  0021B0  6E48               	movwf	printSortTimer@timeDiff+1,c
 17696                           
 17697                           ;sort.c: 265: total_time = timeDiff;
 17698  0021B2  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 17699  0021B6  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 17700                           
 17701                           ;sort.c: 267: if(timeDiff >= 180){
 17702  0021BA  5048               	movf	printSortTimer@timeDiff+1,w,c
 17703  0021BC  E104               	bnz	i2u645_40
 17704  0021BE  0EB4               	movlw	180
 17705  0021C0  5C47               	subwf	printSortTimer@timeDiff,w,c
 17706  0021C2  A0D8               	btfss	status,0,c
 17707  0021C4  D003               	goto	i2l7524
 17708  0021C6                     i2u645_40:
 17709                           
 17710                           ;sort.c: 268: machine_state = DoneSorting_state;
 17711  0021C6  0E02               	movlw	2
 17712  0021C8  0100               	movlb	0	; () banked
 17713  0021CA  6FFC               	movwf	_machine_state& (0+255),b
 17714  0021CC                     i2l7524:
 17715                           
 17716                           ;sort.c: 270: }
 17717                           ;sort.c: 272: int hour = timeDiff / 3600;
 17718  0021CC  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 17719  0021D0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 17720  0021D4  0E0E               	movlw	14
 17721  0021D6  6E09               	movwf	i2___lwdiv@divisor+1,c
 17722  0021D8  0E10               	movlw	16
 17723  0021DA  6E08               	movwf	i2___lwdiv@divisor,c
 17724  0021DC  ECB9  F01C         	call	i2___lwdiv	;wreg free
 17725  0021E0  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17726  0021E4  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17727                           
 17728                           ;sort.c: 273: int min = (timeDiff % 3600) / 60;
 17729  0021E8  0E0E               	movlw	14
 17730  0021EA  6E04               	movwf	i2___lwmod@divisor+1,c
 17731  0021EC  0E10               	movlw	16
 17732  0021EE  6E03               	movwf	i2___lwmod@divisor,c
 17733  0021F0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17734  0021F4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17735  0021F8  EC9F  F01D         	call	i2___lwmod	;wreg free
 17736  0021FC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17737  002200  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17738  002204  0E00               	movlw	0
 17739  002206  6E09               	movwf	i2___lwdiv@divisor+1,c
 17740  002208  0E3C               	movlw	60
 17741  00220A  6E08               	movwf	i2___lwdiv@divisor,c
 17742  00220C  ECB9  F01C         	call	i2___lwdiv	;wreg free
 17743  002210  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17744  002214  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17745                           
 17746                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17747  002218  0E0E               	movlw	14
 17748  00221A  6E04               	movwf	i2___lwmod@divisor+1,c
 17749  00221C  0E10               	movlw	16
 17750  00221E  6E03               	movwf	i2___lwmod@divisor,c
 17751  002220  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17752  002224  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17753  002228  EC9F  F01D         	call	i2___lwmod	;wreg free
 17754  00222C  C001  F045         	movff	?i2___lwmod,_printSortTimer$2333
 17755  002230  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2333+1
 17756                           
 17757                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17758  002234  C045  F001         	movff	_printSortTimer$2333,i2___lwmod@dividend
 17759  002238  C046  F002         	movff	_printSortTimer$2333+1,i2___lwmod@dividend+1
 17760  00223C  0E00               	movlw	0
 17761  00223E  6E04               	movwf	i2___lwmod@divisor+1,c
 17762  002240  0E3C               	movlw	60
 17763  002242  6E03               	movwf	i2___lwmod@divisor,c
 17764  002244  EC9F  F01D         	call	i2___lwmod	;wreg free
 17765  002248  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17766  00224C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17767                           
 17768                           ;sort.c: 276: lcdInst(0b10000000);;
 17769  002250  0E80               	movlw	128
 17770  002252  EC68  F020         	call	i2_lcdInst
 17771                           
 17772                           ;sort.c: 277: printf("SORTING...");
 17773  002256  0E8E               	movlw	low STR_64
 17774  002258  6E0D               	movwf	i2printf@f,c
 17775  00225A  0EFF               	movlw	high STR_64
 17776  00225C  6E0E               	movwf	i2printf@f+1,c
 17777  00225E  ECB3  F00A         	call	i2_printf	;wreg free
 17778                           
 17779                           ;sort.c: 278: lcdInst(0b11000000);;
 17780  002262  0EC0               	movlw	192
 17781  002264  EC68  F020         	call	i2_lcdInst
 17782                           
 17783                           ;sort.c: 279: printf("TIME %d:%02d", min, sec);
 17784  002268  0E5F               	movlw	low STR_65
 17785  00226A  6E0D               	movwf	i2printf@f,c
 17786  00226C  0EFF               	movlw	high STR_65
 17787  00226E  6E0E               	movwf	i2printf@f+1,c
 17788  002270  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17789  002274  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17790  002278  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17791  00227C  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17792  002280  ECB3  F00A         	call	i2_printf	;wreg free
 17793  002284  0012               	return		;funcret
 17794  002286                     __end_of_printSortTimer:
 17795                           	opt stack 0
 17796                           pclatu	equ	0xFFB
 17797                           pclath	equ	0xFFA
 17798                           tblptru	equ	0xFF8
 17799                           tblptrh	equ	0xFF7
 17800                           tblptrl	equ	0xFF6
 17801                           tablat	equ	0xFF5
 17802                           prodh	equ	0xFF4
 17803                           prodl	equ	0xFF3
 17804                           intcon	equ	0xFF2
 17805                           intcon2	equ	0xFF1
 17806                           intcon3	equ	0xFF0
 17807                           indf0	equ	0xFEF
 17808                           postinc0	equ	0xFEE
 17809                           fsr0h	equ	0xFEA
 17810                           fsr0l	equ	0xFE9
 17811                           wreg	equ	0xFE8
 17812                           postdec1	equ	0xFE5
 17813                           fsr1h	equ	0xFE2
 17814                           fsr1l	equ	0xFE1
 17815                           indf2	equ	0xFDF
 17816                           postinc2	equ	0xFDE
 17817                           postdec2	equ	0xFDD
 17818                           fsr2h	equ	0xFDA
 17819                           fsr2l	equ	0xFD9
 17820                           status	equ	0xFD8
 17821                           
 17822 ;; *************** function i2_printf *****************
 17823 ;; Defined at:
 17824 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17825 ;; Parameters:    Size  Location     Type
 17826 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17827 ;;		 -> STR_108(17), STR_107(17), STR_106(18), STR_105(18), 
 17828 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 17829 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 17830 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 17831 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 17832 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 17833 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 17834 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 17835 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17836 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 17837 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 17838 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 17839 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17840 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17841 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17842 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17843 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17844 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 17845 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17846 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17847 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  printf          4    0        struct .
 17850 ;;  printf          2   39[COMRAM] int 
 17851 ;;  printf          2   35[COMRAM] unsigned int 
 17852 ;;  printf          2   33[COMRAM] unsigned int 
 17853 ;;  printf          2   31[COMRAM] PTR void [1]
 17854 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17855 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17856 ;;		 -> STR_109(7), count_total(2), printRTC@month(4), UI@month(4), 
 17857 ;;  printf          1   38[COMRAM] char 
 17858 ;;  printf          1   37[COMRAM] unsigned char 
 17859 ;;  printf          1   28[COMRAM] char 
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  2   12[COMRAM] int 
 17862 ;; Registers used:
 17863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17869 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17871 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17872 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17873 ;;Total ram usage:       29 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    2
 17876 ;; This function calls:
 17877 ;;		i2___lwdiv
 17878 ;;		i2___lwmod
 17879 ;;		i2___wmul
 17880 ;;		i2_isdigit
 17881 ;;		i2_putch
 17882 ;; This function is called by:
 17883 ;;		_change_state_to_menu_11
 17884 ;;		_change_state_to_menu_23
 17885 ;;		_change_state_to_logs_11
 17886 ;;		_change_state_to_logs_12
 17887 ;;		_change_state_to_logs_22
 17888 ;;		_change_state_to_logs_23
 17889 ;;		_change_state_to_logs_33
 17890 ;;		_change_state_to_logs_34
 17891 ;;		_printSortTimer
 17892 ;;		i2_change_state_to_menu_start
 17893 ;;		i2_change_state_to_menu_12
 17894 ;;		i2_change_state_to_menu_22
 17895 ;;		i2_printRTC
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text74
 17900  001566                     __ptext74:
 17901                           	opt stack 0
 17902  001566                     i2_printf:
 17903                           	opt stack 19
 17904                           
 17905                           ;doprnt.c: 466: va_list ap;
 17906                           ;doprnt.c: 499: signed char c;
 17907                           ;doprnt.c: 501: int width;
 17908                           ;doprnt.c: 506: signed char prec;
 17909                           ;doprnt.c: 508: unsigned char flag;
 17910                           ;doprnt.c: 523: union {
 17911                           ;doprnt.c: 524: unsigned long vd;
 17912                           ;doprnt.c: 525: double integ;
 17913                           ;doprnt.c: 526: } tmpval;
 17914                           ;doprnt.c: 528: unsigned int val;
 17915                           ;doprnt.c: 529: unsigned len;
 17916                           ;doprnt.c: 530: const char * cp;
 17917                           ;doprnt.c: 533: *ap = __va_start();
 17918                           
 17919                           ;incstack = 0
 17920  001566  0E0F               	movlw	low (?i2_printf+2)
 17921  001568  6E20               	movwf	i2printf@ap,c
 17922  00156A  0E00               	movlw	high (?i2_printf+2)
 17923  00156C  6E21               	movwf	i2printf@ap+1,c
 17924                           
 17925                           ;doprnt.c: 536: while(c = *f++) {
 17926  00156E  D1A4               	goto	i2l5480
 17927  001570                     i2l5350:
 17928                           
 17929                           ;doprnt.c: 538: if(c != '%')
 17930  001570  0E25               	movlw	37
 17931  001572  1827               	xorwf	i2printf@c,w,c
 17932  001574  B4D8               	btfsc	status,2,c
 17933  001576  D004               	goto	i2l5354
 17934                           
 17935                           ;doprnt.c: 540: {
 17936                           ;doprnt.c: 541: (putch(c) );
 17937  001578  5027               	movf	i2printf@c,w,c
 17938  00157A  EC62  F020         	call	i2_putch
 17939                           
 17940                           ;doprnt.c: 542: continue;
 17941  00157E  D19C               	goto	i2l5480
 17942  001580                     i2l5354:
 17943                           
 17944                           ;doprnt.c: 543: }
 17945                           ;doprnt.c: 546: width = 0;
 17946  001580  0E00               	movlw	0
 17947  001582  6E29               	movwf	i2printf@width+1,c
 17948  001584  0E00               	movlw	0
 17949  001586  6E28               	movwf	i2printf@width,c
 17950                           
 17951                           ;doprnt.c: 548: flag = 0;
 17952  001588  0E00               	movlw	0
 17953  00158A  6E26               	movwf	i2printf@flag,c
 17954                           
 17955                           ;doprnt.c: 551: switch(*f) {
 17956                           
 17957                           ;doprnt.c: 550: for(;;) {
 17958  00158C  D003               	goto	i2l5360
 17959  00158E                     i2l5356:
 17960                           
 17961                           ;doprnt.c: 580: flag |= 0x04;
 17962  00158E  8426               	bsf	i2printf@flag,2,c
 17963                           
 17964                           ;doprnt.c: 581: f++;
 17965  001590  4A0D               	infsnz	i2printf@f,f,c
 17966  001592  2A0E               	incf	i2printf@f+1,f,c
 17967  001594                     i2l5360:
 17968  001594  C00D  FFF6         	movff	i2printf@f,tblptrl
 17969  001598  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17970  00159C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17971  00159C  6AF8               	clrf	tblptru,c
 17972  00159E                     	endif
 17973  00159E                     	if	0	;tblptru may be non-zero
 17974  00159E                     	endif
 17975  00159E  0008               	tblrd		*
 17976  0015A0  50F5               	movf	tablat,w,c
 17977                           
 17978                           ; Switch size 1, requested type "space"
 17979                           ; Number of cases is 1, Range of values is 48 to 48
 17980                           ; switch strategies available:
 17981                           ; Name         Instructions Cycles
 17982                           ; simple_byte            4     3 (average)
 17983                           ;	Chosen strategy is simple_byte
 17984  0015A2  0A30               	xorlw	48	; case 48
 17985  0015A4  B4D8               	btfsc	status,2,c
 17986  0015A6  D7F3               	goto	i2l5356
 17987                           
 17988                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17989                           
 17990                           ;doprnt.c: 586: }
 17991                           
 17992                           ;doprnt.c: 585: break;
 17993  0015A8  C00D  FFF6         	movff	i2printf@f,tblptrl
 17994  0015AC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17995  0015B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17996  0015B0  6AF8               	clrf	tblptru,c
 17997  0015B2                     	endif
 17998  0015B2                     	if	0	;tblptru may be non-zero
 17999  0015B2                     	endif
 18000  0015B2  0008               	tblrd		*
 18001  0015B4  50F5               	movf	tablat,w,c
 18002  0015B6  EC0E  F020         	call	i2_isdigit
 18003  0015BA  A0D8               	btfss	status,0,c
 18004  0015BC  D0A6               	goto	i2l5408
 18005                           
 18006                           ;doprnt.c: 598: width = 0;
 18007  0015BE  0E00               	movlw	0
 18008  0015C0  6E29               	movwf	i2printf@width+1,c
 18009  0015C2  0E00               	movlw	0
 18010  0015C4  6E28               	movwf	i2printf@width,c
 18011  0015C6                     i2l5366:
 18012                           
 18013                           ;doprnt.c: 600: width *= 10;
 18014  0015C6  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 18015  0015CA  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 18016  0015CE  0E00               	movlw	0
 18017  0015D0  6E04               	movwf	i2___wmul@multiplicand+1,c
 18018  0015D2  0E0A               	movlw	10
 18019  0015D4  6E03               	movwf	i2___wmul@multiplicand,c
 18020  0015D6  ECA2  F01F         	call	i2___wmul	;wreg free
 18021  0015DA  C001  F028         	movff	?i2___wmul,i2printf@width
 18022  0015DE  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 18023                           
 18024                           ;doprnt.c: 601: width += *f++ - '0';
 18025  0015E2  0ED0               	movlw	208
 18026  0015E4  6E19               	movwf	??i2_printf& (0+255),c
 18027  0015E6  0EFF               	movlw	255
 18028  0015E8  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18029  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 18030  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18031  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18032  0015F2  6AF8               	clrf	tblptru,c
 18033  0015F4                     	endif
 18034  0015F4                     	if	0	;tblptru may be non-zero
 18035  0015F4                     	endif
 18036  0015F4  0008               	tblrd		*
 18037  0015F6  50F5               	movf	tablat,w,c
 18038  0015F8  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 18039  0015FA  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 18040  0015FC  5019               	movf	??i2_printf,w,c
 18041  0015FE  261B               	addwf	??i2_printf+2,f,c
 18042  001600  501A               	movf	??i2_printf+1,w,c
 18043  001602  221C               	addwfc	??i2_printf+3,f,c
 18044  001604  501B               	movf	??i2_printf+2,w,c
 18045  001606  2628               	addwf	i2printf@width,f,c
 18046  001608  501C               	movf	??i2_printf+3,w,c
 18047  00160A  2229               	addwfc	i2printf@width+1,f,c
 18048  00160C  4A0D               	infsnz	i2printf@f,f,c
 18049  00160E  2A0E               	incf	i2printf@f+1,f,c
 18050                           
 18051                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 18052  001610  C00D  FFF6         	movff	i2printf@f,tblptrl
 18053  001614  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18054  001618                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18055  001618  6AF8               	clrf	tblptru,c
 18056  00161A                     	endif
 18057  00161A                     	if	0	;tblptru may be non-zero
 18058  00161A                     	endif
 18059  00161A  0008               	tblrd		*
 18060  00161C  50F5               	movf	tablat,w,c
 18061  00161E  EC0E  F020         	call	i2_isdigit
 18062  001622  A0D8               	btfss	status,0,c
 18063  001624  D072               	goto	i2l5408
 18064  001626  D7CF               	goto	i2l5366
 18065  001628                     i2l5374:
 18066                           
 18067                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 18068  001628  C020  FFD9         	movff	i2printf@ap,fsr2l
 18069  00162C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18070  001630  CFDE F01E          	movff	postinc2,i2printf@cp
 18071  001634  CFDD F01F          	movff	postdec2,i2printf@cp+1
 18072  001638  0E02               	movlw	2
 18073  00163A  2620               	addwf	i2printf@ap,f,c
 18074  00163C  0E00               	movlw	0
 18075  00163E  2221               	addwfc	i2printf@ap+1,f,c
 18076                           
 18077                           ;doprnt.c: 740: if(!cp)
 18078  001640  501E               	movf	i2printf@cp,w,c
 18079  001642  101F               	iorwf	i2printf@cp+1,w,c
 18080  001644  A4D8               	btfss	status,2,c
 18081  001646  D004               	goto	i2l5382
 18082                           
 18083                           ;doprnt.c: 741: cp = "(null)";
 18084  001648  0EB5               	movlw	low STR_109
 18085  00164A  6E1E               	movwf	i2printf@cp,c
 18086  00164C  0EFF               	movlw	high STR_109
 18087  00164E  6E1F               	movwf	i2printf@cp+1,c
 18088  001650                     i2l5382:
 18089                           
 18090                           ;doprnt.c: 745: len = 0;
 18091  001650  0E00               	movlw	0
 18092  001652  6E23               	movwf	i2printf@len+1,c
 18093  001654  0E00               	movlw	0
 18094  001656  6E22               	movwf	i2printf@len,c
 18095                           
 18096                           ;doprnt.c: 746: while(cp[len])
 18097  001658  D002               	goto	i2l5386
 18098  00165A                     i2l5384:
 18099                           
 18100                           ;doprnt.c: 747: len++;
 18101  00165A  4A22               	infsnz	i2printf@len,f,c
 18102  00165C  2A23               	incf	i2printf@len+1,f,c
 18103  00165E                     i2l5386:
 18104  00165E  5022               	movf	i2printf@len,w,c
 18105  001660  241E               	addwf	i2printf@cp,w,c
 18106  001662  6E19               	movwf	??i2_printf& (0+255),c
 18107  001664  5023               	movf	i2printf@len+1,w,c
 18108  001666  201F               	addwfc	i2printf@cp+1,w,c
 18109  001668  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 18110  00166A  C019  FFF6         	movff	??i2_printf,tblptrl
 18111  00166E  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 18112  001672  0E00               	movlw	low (__mediumconst shr (0+16))
 18113  001674  6EF8               	movwf	tblptru,c
 18114  001676  0E0F               	movlw	(high __ramtop+-1)
 18115  001678  64F7               	cpfsgt	tblptrh,c
 18116  00167A  D003               	bra	i2u397_47
 18117  00167C  0008               	tblrd		*
 18118  00167E  50F5               	movf	tablat,w,c
 18119  001680  D005               	bra	i2u397_40
 18120  001682                     i2u397_47:
 18121  001682  CFF6 FFE9          	movff	tblptrl,fsr0l
 18122  001686  CFF7 FFEA          	movff	tblptrh,fsr0h
 18123  00168A  50EF               	movf	indf0,w,c
 18124  00168C                     i2u397_40:
 18125  00168C  0900               	iorlw	0
 18126  00168E  A4D8               	btfss	status,2,c
 18127  001690  D7E4               	goto	i2l5384
 18128                           
 18129                           ;doprnt.c: 757: if(width > len)
 18130  001692  5028               	movf	i2printf@width,w,c
 18131  001694  5C22               	subwf	i2printf@len,w,c
 18132  001696  5029               	movf	i2printf@width+1,w,c
 18133  001698  5823               	subwfb	i2printf@len+1,w,c
 18134  00169A  B0D8               	btfsc	status,0,c
 18135  00169C  D005               	goto	i2l5392
 18136                           
 18137                           ;doprnt.c: 758: width -= len;
 18138  00169E  5022               	movf	i2printf@len,w,c
 18139  0016A0  5E28               	subwf	i2printf@width,f,c
 18140  0016A2  5023               	movf	i2printf@len+1,w,c
 18141  0016A4  5A29               	subwfb	i2printf@width+1,f,c
 18142  0016A6  D008               	goto	i2l5396
 18143  0016A8                     i2l5392:
 18144                           
 18145                           ;doprnt.c: 759: else
 18146                           ;doprnt.c: 760: width = 0;
 18147  0016A8  0E00               	movlw	0
 18148  0016AA  6E29               	movwf	i2printf@width+1,c
 18149  0016AC  0E00               	movlw	0
 18150  0016AE  6E28               	movwf	i2printf@width,c
 18151                           
 18152                           ;doprnt.c: 764: while(width--)
 18153  0016B0  D003               	goto	i2l5396
 18154  0016B2                     i2l5394:
 18155                           
 18156                           ;doprnt.c: 765: (putch(' ') );
 18157  0016B2  0E20               	movlw	32
 18158  0016B4  EC62  F020         	call	i2_putch
 18159  0016B8                     i2l5396:
 18160  0016B8  0628               	decf	i2printf@width,f,c
 18161  0016BA  A0D8               	btfss	status,0,c
 18162  0016BC  0629               	decf	i2printf@width+1,f,c
 18163  0016BE  2828               	incf	i2printf@width,w,c
 18164  0016C0  E1F8               	bnz	i2l5394
 18165  0016C2  2829               	incf	i2printf@width+1,w,c
 18166  0016C4  B4D8               	btfsc	status,2,c
 18167  0016C6  D016               	goto	i2l5402
 18168  0016C8  D7F4               	goto	i2l5394
 18169  0016CA                     i2l5398:
 18170                           
 18171                           ;doprnt.c: 768: (putch(*cp++) );
 18172  0016CA  C01E  FFF6         	movff	i2printf@cp,tblptrl
 18173  0016CE  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 18174  0016D2  0E00               	movlw	low (__mediumconst shr (0+16))
 18175  0016D4  6EF8               	movwf	tblptru,c
 18176  0016D6  0E0F               	movlw	(high __ramtop+-1)
 18177  0016D8  64F7               	cpfsgt	tblptrh,c
 18178  0016DA  D003               	bra	i2u401_47
 18179  0016DC  0008               	tblrd		*
 18180  0016DE  50F5               	movf	tablat,w,c
 18181  0016E0  D005               	bra	i2u401_40
 18182  0016E2                     i2u401_47:
 18183  0016E2  CFF6 FFE9          	movff	tblptrl,fsr0l
 18184  0016E6  CFF7 FFEA          	movff	tblptrh,fsr0h
 18185  0016EA  50EF               	movf	indf0,w,c
 18186  0016EC                     i2u401_40:
 18187  0016EC  EC62  F020         	call	i2_putch
 18188  0016F0  4A1E               	infsnz	i2printf@cp,f,c
 18189  0016F2  2A1F               	incf	i2printf@cp+1,f,c
 18190  0016F4                     i2l5402:
 18191  0016F4  0622               	decf	i2printf@len,f,c
 18192  0016F6  A0D8               	btfss	status,0,c
 18193  0016F8  0623               	decf	i2printf@len+1,f,c
 18194  0016FA  2822               	incf	i2printf@len,w,c
 18195  0016FC  E1E6               	bnz	i2l5398
 18196  0016FE  2823               	incf	i2printf@len+1,w,c
 18197  001700  B4D8               	btfsc	status,2,c
 18198  001702  D0DA               	goto	i2l5480
 18199  001704  D7E2               	goto	i2l5398
 18200  001706                     i2l5404:
 18201                           
 18202                           ;doprnt.c: 818: flag |= 0x40;
 18203  001706  8C26               	bsf	i2printf@flag,6,c
 18204                           
 18205                           ;doprnt.c: 822: }
 18206                           
 18207                           ;doprnt.c: 819: break;
 18208  001708  D01B               	goto	i2l1188
 18209  00170A                     i2l5408:
 18210  00170A  C00D  FFF6         	movff	i2printf@f,tblptrl
 18211  00170E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18212  001712  4A0D               	infsnz	i2printf@f,f,c
 18213  001714  2A0E               	incf	i2printf@f+1,f,c
 18214  001716                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18215  001716  6AF8               	clrf	tblptru,c
 18216  001718                     	endif
 18217  001718                     	if	0	;tblptru may be non-zero
 18218  001718                     	endif
 18219  001718  0008               	tblrd		*
 18220  00171A  CFF5 F027          	movff	tablat,i2printf@c
 18221  00171E  5027               	movf	i2printf@c,w,c
 18222                           
 18223                           ; Switch size 1, requested type "space"
 18224                           ; Number of cases is 5, Range of values is 0 to 117
 18225                           ; switch strategies available:
 18226                           ; Name         Instructions Cycles
 18227                           ; simple_byte           16     9 (average)
 18228                           ;	Chosen strategy is simple_byte
 18229  001720  0A00               	xorlw	0	; case 0
 18230  001722  B4D8               	btfsc	status,2,c
 18231  001724  0012               	return	
 18232  001726  0A64               	xorlw	100	; case 100
 18233  001728  B4D8               	btfsc	status,2,c
 18234  00172A  D00A               	goto	i2l1188
 18235  00172C  0A0D               	xorlw	13	; case 105
 18236  00172E  B4D8               	btfsc	status,2,c
 18237  001730  D007               	goto	i2l1188
 18238  001732  0A1A               	xorlw	26	; case 115
 18239  001734  B4D8               	btfsc	status,2,c
 18240  001736  D778               	goto	i2l5374
 18241  001738  0A06               	xorlw	6	; case 117
 18242  00173A  B4D8               	btfsc	status,2,c
 18243  00173C  D7E4               	goto	i2l5404
 18244  00173E  D0BC               	goto	i2l5480
 18245  001740                     i2l1188:
 18246                           
 18247                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 18248  001740  BC26               	btfsc	i2printf@flag,6,c
 18249  001742  D015               	goto	i2l5420
 18250                           
 18251                           ;doprnt.c: 1253: {
 18252                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 18253  001744  C020  FFD9         	movff	i2printf@ap,fsr2l
 18254  001748  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18255  00174C  CFDE F024          	movff	postinc2,i2printf@val
 18256  001750  CFDD F025          	movff	postdec2,i2printf@val+1
 18257  001754  0E02               	movlw	2
 18258  001756  2620               	addwf	i2printf@ap,f,c
 18259  001758  0E00               	movlw	0
 18260  00175A  2221               	addwfc	i2printf@ap+1,f,c
 18261                           
 18262                           ;doprnt.c: 1261: if((int)val < 0) {
 18263  00175C  AE25               	btfss	i2printf@val+1,7,c
 18264  00175E  D013               	goto	i2l5424
 18265                           
 18266                           ;doprnt.c: 1262: flag |= 0x03;
 18267  001760  0E03               	movlw	3
 18268  001762  1226               	iorwf	i2printf@flag,f,c
 18269                           
 18270                           ;doprnt.c: 1263: val = -val;
 18271  001764  6C24               	negf	i2printf@val,c
 18272  001766  1E25               	comf	i2printf@val+1,f,c
 18273  001768  B0D8               	btfsc	status,0,c
 18274  00176A  2A25               	incf	i2printf@val+1,f,c
 18275                           
 18276                           ;doprnt.c: 1264: }
 18277                           ;doprnt.c: 1266: }
 18278  00176C  D00C               	goto	i2l5424
 18279  00176E                     i2l5420:
 18280                           
 18281                           ;doprnt.c: 1268: else
 18282                           ;doprnt.c: 1273: {
 18283                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 18284  00176E  C020  FFD9         	movff	i2printf@ap,fsr2l
 18285  001772  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 18286  001776  CFDE F024          	movff	postinc2,i2printf@val
 18287  00177A  CFDD F025          	movff	postdec2,i2printf@val+1
 18288  00177E  0E02               	movlw	2
 18289  001780  2620               	addwf	i2printf@ap,f,c
 18290  001782  0E00               	movlw	0
 18291  001784  2221               	addwfc	i2printf@ap+1,f,c
 18292  001786                     i2l5424:
 18293                           
 18294                           ;doprnt.c: 1287: }
 18295                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 18296  001786  0E01               	movlw	1
 18297  001788  6E27               	movwf	i2printf@c,c
 18298  00178A                     i2l5426:
 18299  00178A  0E05               	movlw	5
 18300  00178C  1827               	xorwf	i2printf@c,w,c
 18301  00178E  B4D8               	btfsc	status,2,c
 18302  001790  D015               	goto	i2l5438
 18303                           
 18304                           ;doprnt.c: 1306: if(val < dpowers[c])
 18305  001792  5027               	movf	i2printf@c,w,c
 18306  001794  0D02               	mullw	2
 18307  001796  0E60               	movlw	low _dpowers
 18308  001798  24F3               	addwf	prodl,w,c
 18309  00179A  6EF6               	movwf	tblptrl,c
 18310  00179C  0EFB               	movlw	high _dpowers
 18311  00179E  20F4               	addwfc	prodh,w,c
 18312  0017A0  6EF7               	movwf	tblptrh,c
 18313  0017A2                     	if	1	;There are 3 active tblptr bytes
 18314  0017A2  6AF8               	clrf	tblptru,c
 18315  0017A4  0E00               	movlw	low (__mediumconst shr (0+16))
 18316  0017A6  22F8               	addwfc	tblptru,f,c
 18317  0017A8                     	endif
 18318  0017A8  0009               	tblrd		*+
 18319  0017AA  50F5               	movf	tablat,w,c
 18320  0017AC  5C24               	subwf	i2printf@val,w,c
 18321  0017AE  0009               	tblrd		*+
 18322  0017B0  50F5               	movf	tablat,w,c
 18323  0017B2  5825               	subwfb	i2printf@val+1,w,c
 18324  0017B4  A0D8               	btfss	status,0,c
 18325  0017B6  D002               	goto	i2l5438
 18326                           
 18327                           ;doprnt.c: 1307: break;
 18328  0017B8  2A27               	incf	i2printf@c,f,c
 18329  0017BA  D7E7               	goto	i2l5426
 18330  0017BC                     i2l5438:
 18331                           
 18332                           ;doprnt.c: 1345: if(width && flag & 0x03)
 18333  0017BC  5028               	movf	i2printf@width,w,c
 18334  0017BE  1029               	iorwf	i2printf@width+1,w,c
 18335  0017C0  B4D8               	btfsc	status,2,c
 18336  0017C2  D009               	goto	i2l5444
 18337  0017C4  C026  F019         	movff	i2printf@flag,??i2_printf
 18338  0017C8  0E03               	movlw	3
 18339  0017CA  1619               	andwf	??i2_printf,f,c
 18340  0017CC  B4D8               	btfsc	status,2,c
 18341  0017CE  D003               	goto	i2l5444
 18342                           
 18343                           ;doprnt.c: 1346: width--;
 18344  0017D0  0628               	decf	i2printf@width,f,c
 18345  0017D2  A0D8               	btfss	status,0,c
 18346  0017D4  0629               	decf	i2printf@width+1,f,c
 18347  0017D6                     i2l5444:
 18348                           
 18349                           ;doprnt.c: 1381: if(width > c)
 18350  0017D6  0E80               	movlw	128
 18351  0017D8  BE27               	btfsc	i2printf@c,7,c
 18352  0017DA  0E7F               	movlw	127
 18353  0017DC  6E19               	movwf	??i2_printf& (0+255),c
 18354  0017DE  5028               	movf	i2printf@width,w,c
 18355  0017E0  5C27               	subwf	i2printf@c,w,c
 18356  0017E2  5029               	movf	i2printf@width+1,w,c
 18357  0017E4  0A80               	xorlw	128
 18358  0017E6  5819               	subwfb	??i2_printf& (0+255),w,c
 18359  0017E8  B0D8               	btfsc	status,0,c
 18360  0017EA  D007               	goto	i2l5448
 18361                           
 18362                           ;doprnt.c: 1382: width -= c;
 18363  0017EC  5027               	movf	i2printf@c,w,c
 18364  0017EE  5E28               	subwf	i2printf@width,f,c
 18365  0017F0  0E00               	movlw	0
 18366  0017F2  BE27               	btfsc	i2printf@c,7,c
 18367  0017F4  0EFF               	movlw	255
 18368  0017F6  5A29               	subwfb	i2printf@width+1,f,c
 18369  0017F8  D004               	goto	i2l5450
 18370  0017FA                     i2l5448:
 18371                           
 18372                           ;doprnt.c: 1383: else
 18373                           ;doprnt.c: 1384: width = 0;
 18374  0017FA  0E00               	movlw	0
 18375  0017FC  6E29               	movwf	i2printf@width+1,c
 18376  0017FE  0E00               	movlw	0
 18377  001800  6E28               	movwf	i2printf@width,c
 18378  001802                     i2l5450:
 18379                           
 18380                           ;doprnt.c: 1387: if(flag & 0x04) {
 18381  001802  A426               	btfss	i2printf@flag,2,c
 18382  001804  D014               	goto	i2l5462
 18383                           
 18384                           ;doprnt.c: 1392: if(flag & 0x03)
 18385  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 18386  00180A  0E03               	movlw	3
 18387  00180C  1619               	andwf	??i2_printf,f,c
 18388  00180E  B4D8               	btfsc	status,2,c
 18389  001810  D003               	goto	i2l5456
 18390                           
 18391                           ;doprnt.c: 1393: (putch('-') );
 18392  001812  0E2D               	movlw	45
 18393  001814  EC62  F020         	call	i2_putch
 18394  001818                     i2l5456:
 18395                           
 18396                           ;doprnt.c: 1415: if(width)
 18397  001818  5028               	movf	i2printf@width,w,c
 18398  00181A  1029               	iorwf	i2printf@width+1,w,c
 18399  00181C  B4D8               	btfsc	status,2,c
 18400  00181E  D01E               	goto	i2l5472
 18401                           
 18402                           ;doprnt.c: 1417: (putch('0') );
 18403                           
 18404                           ;doprnt.c: 1416: do
 18405  001820  0E30               	movlw	48
 18406  001822  EC62  F020         	call	i2_putch
 18407                           
 18408                           ;doprnt.c: 1418: while(--width);
 18409  001826  0628               	decf	i2printf@width,f,c
 18410  001828  A0D8               	btfss	status,0,c
 18411  00182A  0629               	decf	i2printf@width+1,f,c
 18412  00182C  D7F5               	goto	i2l5456
 18413  00182E                     i2l5462:
 18414                           
 18415                           ;doprnt.c: 1422: {
 18416                           ;doprnt.c: 1424: if(width
 18417                           ;doprnt.c: 1428: )
 18418  00182E  5028               	movf	i2printf@width,w,c
 18419  001830  1029               	iorwf	i2printf@width+1,w,c
 18420  001832  B4D8               	btfsc	status,2,c
 18421  001834  D00A               	goto	i2l5468
 18422  001836                     i2l5464:
 18423                           
 18424                           ;doprnt.c: 1430: (putch(' ') );
 18425  001836  0E20               	movlw	32
 18426  001838  EC62  F020         	call	i2_putch
 18427                           
 18428                           ;doprnt.c: 1431: while(--width);
 18429  00183C  0628               	decf	i2printf@width,f,c
 18430  00183E  A0D8               	btfss	status,0,c
 18431  001840  0629               	decf	i2printf@width+1,f,c
 18432  001842  5028               	movf	i2printf@width,w,c
 18433  001844  1029               	iorwf	i2printf@width+1,w,c
 18434  001846  A4D8               	btfss	status,2,c
 18435  001848  D7F6               	goto	i2l5464
 18436  00184A                     i2l5468:
 18437                           
 18438                           ;doprnt.c: 1438: if(flag & 0x03)
 18439  00184A  C026  F019         	movff	i2printf@flag,??i2_printf
 18440  00184E  0E03               	movlw	3
 18441  001850  1619               	andwf	??i2_printf,f,c
 18442  001852  B4D8               	btfsc	status,2,c
 18443  001854  D003               	goto	i2l5472
 18444                           
 18445                           ;doprnt.c: 1439: (putch('-') );
 18446  001856  0E2D               	movlw	45
 18447  001858  EC62  F020         	call	i2_putch
 18448  00185C                     i2l5472:
 18449                           
 18450                           ;doprnt.c: 1469: }
 18451                           ;doprnt.c: 1472: prec = c;
 18452  00185C  C027  F01D         	movff	i2printf@c,i2printf@prec
 18453                           
 18454                           ;doprnt.c: 1474: while(prec--) {
 18455  001860  D027               	goto	i2l5478
 18456  001862                     i2l5474:
 18457                           
 18458                           ;doprnt.c: 1478: {
 18459                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18460  001862  501D               	movf	i2printf@prec,w,c
 18461  001864  0D02               	mullw	2
 18462  001866  0E60               	movlw	low _dpowers
 18463  001868  24F3               	addwf	prodl,w,c
 18464  00186A  6EF6               	movwf	tblptrl,c
 18465  00186C  0EFB               	movlw	high _dpowers
 18466  00186E  20F4               	addwfc	prodh,w,c
 18467  001870  6EF7               	movwf	tblptrh,c
 18468  001872                     	if	1	;There are 3 active tblptr bytes
 18469  001872  6AF8               	clrf	tblptru,c
 18470  001874  0E00               	movlw	low (__mediumconst shr (0+16))
 18471  001876  22F8               	addwfc	tblptru,f,c
 18472  001878                     	endif
 18473  001878  0009               	tblrd		*+
 18474  00187A  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 18475  00187E  000A               	tblrd		*-
 18476  001880  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 18477  001884  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 18478  001888  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 18479  00188C  ECB9  F01C         	call	i2___lwdiv	;wreg free
 18480  001890  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 18481  001894  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 18482  001898  0E00               	movlw	0
 18483  00189A  6E04               	movwf	i2___lwmod@divisor+1,c
 18484  00189C  0E0A               	movlw	10
 18485  00189E  6E03               	movwf	i2___lwmod@divisor,c
 18486  0018A0  EC9F  F01D         	call	i2___lwmod	;wreg free
 18487  0018A4  5001               	movf	?i2___lwmod,w,c
 18488  0018A6  0F30               	addlw	48
 18489  0018A8  6E27               	movwf	i2printf@c,c
 18490                           
 18491                           ;doprnt.c: 1523: }
 18492                           ;doprnt.c: 1524: (putch(c) );
 18493  0018AA  5027               	movf	i2printf@c,w,c
 18494  0018AC  EC62  F020         	call	i2_putch
 18495  0018B0                     i2l5478:
 18496  0018B0  061D               	decf	i2printf@prec,f,c
 18497  0018B2  281D               	incf	i2printf@prec,w,c
 18498  0018B4  A4D8               	btfss	status,2,c
 18499  0018B6  D7D5               	goto	i2l5474
 18500  0018B8                     i2l5480:
 18501  0018B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 18502  0018BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18503  0018C0  4A0D               	infsnz	i2printf@f,f,c
 18504  0018C2  2A0E               	incf	i2printf@f+1,f,c
 18505  0018C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18506  0018C4  6AF8               	clrf	tblptru,c
 18507  0018C6                     	endif
 18508  0018C6                     	if	0	;tblptru may be non-zero
 18509  0018C6                     	endif
 18510  0018C6  0008               	tblrd		*
 18511  0018C8  CFF5 F027          	movff	tablat,i2printf@c
 18512  0018CC  5027               	movf	i2printf@c,w,c
 18513  0018CE  B4D8               	btfsc	status,2,c
 18514  0018D0  0012               	return	
 18515  0018D2  D64E               	goto	i2l5350
 18516  0018D4                     __end_ofi2_printf:
 18517                           	opt stack 0
 18518                           pclatu	equ	0xFFB
 18519                           pclath	equ	0xFFA
 18520                           tblptru	equ	0xFF8
 18521                           tblptrh	equ	0xFF7
 18522                           tblptrl	equ	0xFF6
 18523                           tablat	equ	0xFF5
 18524                           prodh	equ	0xFF4
 18525                           prodl	equ	0xFF3
 18526                           intcon	equ	0xFF2
 18527                           intcon2	equ	0xFF1
 18528                           intcon3	equ	0xFF0
 18529                           indf0	equ	0xFEF
 18530                           postinc0	equ	0xFEE
 18531                           fsr0h	equ	0xFEA
 18532                           fsr0l	equ	0xFE9
 18533                           wreg	equ	0xFE8
 18534                           postdec1	equ	0xFE5
 18535                           fsr1h	equ	0xFE2
 18536                           fsr1l	equ	0xFE1
 18537                           indf2	equ	0xFDF
 18538                           postinc2	equ	0xFDE
 18539                           postdec2	equ	0xFDD
 18540                           fsr2h	equ	0xFDA
 18541                           fsr2l	equ	0xFD9
 18542                           status	equ	0xFD8
 18543                           
 18544 ;; *************** function i2_putch *****************
 18545 ;; Defined at:
 18546 ;;		line 20 in file "lcd.c"
 18547 ;; Parameters:    Size  Location     Type
 18548 ;;  data            1    wreg     unsigned char 
 18549 ;; Auto vars:     Size  Location     Type
 18550 ;;  data            1    2[COMRAM] unsigned char 
 18551 ;; Return value:  Size  Location     Type
 18552 ;;                  1    wreg      void 
 18553 ;; Registers used:
 18554 ;;		wreg, status,2, status,0, cstack
 18555 ;; Tracked objects:
 18556 ;;		On entry : 0/0
 18557 ;;		On exit  : 0/0
 18558 ;;		Unchanged: 0/0
 18559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18563 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18564 ;;Total ram usage:        1 bytes
 18565 ;; Hardware stack levels used:    1
 18566 ;; Hardware stack levels required when called:    1
 18567 ;; This function calls:
 18568 ;;		i2_lcdNibble
 18569 ;; This function is called by:
 18570 ;;		i2_printf
 18571 ;; This function uses a non-reentrant model
 18572 ;;
 18573                           
 18574                           	psect	text75
 18575  0040C4                     __ptext75:
 18576                           	opt stack 0
 18577  0040C4                     i2_putch:
 18578                           	opt stack 19
 18579                           
 18580                           ;incstack = 0
 18581                           ;i2putch@data stored from wreg
 18582  0040C4  6E03               	movwf	i2putch@data,c
 18583                           
 18584                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18585  0040C6  848C               	bsf	3980,2,c	;volatile
 18586                           
 18587                           ;lcd.c: 22: lcdNibble(data);
 18588  0040C8  5003               	movf	i2putch@data,w,c
 18589  0040CA  EC8E  F01C         	call	i2_lcdNibble
 18590  0040CE  0012               	return		;funcret
 18591  0040D0                     __end_ofi2_putch:
 18592                           	opt stack 0
 18593                           pclatu	equ	0xFFB
 18594                           pclath	equ	0xFFA
 18595                           tblptru	equ	0xFF8
 18596                           tblptrh	equ	0xFF7
 18597                           tblptrl	equ	0xFF6
 18598                           tablat	equ	0xFF5
 18599                           prodh	equ	0xFF4
 18600                           prodl	equ	0xFF3
 18601                           intcon	equ	0xFF2
 18602                           intcon2	equ	0xFF1
 18603                           intcon3	equ	0xFF0
 18604                           indf0	equ	0xFEF
 18605                           postinc0	equ	0xFEE
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           postdec1	equ	0xFE5
 18610                           fsr1h	equ	0xFE2
 18611                           fsr1l	equ	0xFE1
 18612                           indf2	equ	0xFDF
 18613                           postinc2	equ	0xFDE
 18614                           postdec2	equ	0xFDD
 18615                           fsr2h	equ	0xFDA
 18616                           fsr2l	equ	0xFD9
 18617                           status	equ	0xFD8
 18618                           
 18619 ;; *************** function i2_isdigit *****************
 18620 ;; Defined at:
 18621 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;  c               1    wreg     unsigned char 
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  c               1    2[COMRAM] unsigned char 
 18626 ;; Return value:  Size  Location     Type
 18627 ;;		None               void
 18628 ;; Registers used:
 18629 ;;		wreg, status,2, status,0
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18637 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18639 ;;Total ram usage:        3 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; This function calls:
 18642 ;;		Nothing
 18643 ;; This function is called by:
 18644 ;;		i2_printf
 18645 ;; This function uses a non-reentrant model
 18646 ;;
 18647                           
 18648                           	psect	text76
 18649  00401C                     __ptext76:
 18650                           	opt stack 0
 18651  00401C                     i2_isdigit:
 18652                           	opt stack 20
 18653                           
 18654                           ;incstack = 0
 18655                           ;i2isdigit@c stored from wreg
 18656  00401C  6E03               	movwf	i2isdigit@c,c
 18657  00401E  0E00               	movlw	0
 18658  004020  6E02               	movwf	i2_isdigit$1860,c
 18659  004022  0E3A               	movlw	58
 18660  004024  6003               	cpfslt	i2isdigit@c,c
 18661  004026  D005               	goto	i2l5060
 18662  004028  0E2F               	movlw	47
 18663  00402A  6403               	cpfsgt	i2isdigit@c,c
 18664  00402C  D002               	goto	i2l5060
 18665  00402E  0E01               	movlw	1
 18666  004030  6E02               	movwf	i2_isdigit$1860,c
 18667  004032                     i2l5060:
 18668  004032  C002  F001         	movff	i2_isdigit$1860,??i2_isdigit
 18669  004036  3001               	rrcf	??i2_isdigit,w,c
 18670  004038  0012               	return	
 18671  00403A                     __end_ofi2_isdigit:
 18672                           	opt stack 0
 18673                           pclatu	equ	0xFFB
 18674                           pclath	equ	0xFFA
 18675                           tblptru	equ	0xFF8
 18676                           tblptrh	equ	0xFF7
 18677                           tblptrl	equ	0xFF6
 18678                           tablat	equ	0xFF5
 18679                           prodh	equ	0xFF4
 18680                           prodl	equ	0xFF3
 18681                           intcon	equ	0xFF2
 18682                           intcon2	equ	0xFF1
 18683                           intcon3	equ	0xFF0
 18684                           indf0	equ	0xFEF
 18685                           postinc0	equ	0xFEE
 18686                           fsr0h	equ	0xFEA
 18687                           fsr0l	equ	0xFE9
 18688                           wreg	equ	0xFE8
 18689                           postdec1	equ	0xFE5
 18690                           fsr1h	equ	0xFE2
 18691                           fsr1l	equ	0xFE1
 18692                           indf2	equ	0xFDF
 18693                           postinc2	equ	0xFDE
 18694                           postdec2	equ	0xFDD
 18695                           fsr2h	equ	0xFDA
 18696                           fsr2l	equ	0xFD9
 18697                           status	equ	0xFD8
 18698                           
 18699 ;; *************** function i2___wmul *****************
 18700 ;; Defined at:
 18701 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18702 ;; Parameters:    Size  Location     Type
 18703 ;;  multiplier      2    0[COMRAM] unsigned int 
 18704 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18705 ;; Auto vars:     Size  Location     Type
 18706 ;;  __wmul          2    4[COMRAM] unsigned int 
 18707 ;; Return value:  Size  Location     Type
 18708 ;;                  2    0[COMRAM] unsigned int 
 18709 ;; Registers used:
 18710 ;;		wreg, status,2, status,0, prodl, prodh
 18711 ;; Tracked objects:
 18712 ;;		On entry : 0/0
 18713 ;;		On exit  : 0/0
 18714 ;;		Unchanged: 0/0
 18715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18716 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18717 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18719 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18720 ;;Total ram usage:        6 bytes
 18721 ;; Hardware stack levels used:    1
 18722 ;; This function calls:
 18723 ;;		Nothing
 18724 ;; This function is called by:
 18725 ;;		_printSortTimer
 18726 ;;		_retrieveLog
 18727 ;;		i2_printf
 18728 ;; This function uses a non-reentrant model
 18729 ;;
 18730                           
 18731                           	psect	text77
 18732  003F44                     __ptext77:
 18733                           	opt stack 0
 18734  003F44                     i2___wmul:
 18735                           	opt stack 20
 18736                           
 18737                           ;incstack = 0
 18738  003F44  5001               	movf	i2___wmul@multiplier,w,c
 18739  003F46  0203               	mulwf	i2___wmul@multiplicand,c
 18740  003F48  CFF3 F005          	movff	prodl,i2___wmul@product
 18741  003F4C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18742  003F50  5001               	movf	i2___wmul@multiplier,w,c
 18743  003F52  0204               	mulwf	i2___wmul@multiplicand+1,c
 18744  003F54  50F3               	movf	prodl,w,c
 18745  003F56  2606               	addwf	i2___wmul@product+1,f,c
 18746  003F58  5002               	movf	i2___wmul@multiplier+1,w,c
 18747  003F5A  0203               	mulwf	i2___wmul@multiplicand,c
 18748  003F5C  50F3               	movf	prodl,w,c
 18749  003F5E  2606               	addwf	i2___wmul@product+1,f,c
 18750  003F60  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18751  003F64  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18752  003F68  0012               	return	
 18753  003F6A                     __end_ofi2___wmul:
 18754                           	opt stack 0
 18755                           pclatu	equ	0xFFB
 18756                           pclath	equ	0xFFA
 18757                           tblptru	equ	0xFF8
 18758                           tblptrh	equ	0xFF7
 18759                           tblptrl	equ	0xFF6
 18760                           tablat	equ	0xFF5
 18761                           prodh	equ	0xFF4
 18762                           prodl	equ	0xFF3
 18763                           intcon	equ	0xFF2
 18764                           intcon2	equ	0xFF1
 18765                           intcon3	equ	0xFF0
 18766                           indf0	equ	0xFEF
 18767                           postinc0	equ	0xFEE
 18768                           fsr0h	equ	0xFEA
 18769                           fsr0l	equ	0xFE9
 18770                           wreg	equ	0xFE8
 18771                           postdec1	equ	0xFE5
 18772                           fsr1h	equ	0xFE2
 18773                           fsr1l	equ	0xFE1
 18774                           indf2	equ	0xFDF
 18775                           postinc2	equ	0xFDE
 18776                           postdec2	equ	0xFDD
 18777                           fsr2h	equ	0xFDA
 18778                           fsr2l	equ	0xFD9
 18779                           status	equ	0xFD8
 18780                           
 18781 ;; *************** function i2___lwmod *****************
 18782 ;; Defined at:
 18783 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18784 ;; Parameters:    Size  Location     Type
 18785 ;;  dividend        2    0[COMRAM] unsigned int 
 18786 ;;  divisor         2    2[COMRAM] unsigned int 
 18787 ;; Auto vars:     Size  Location     Type
 18788 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18789 ;; Return value:  Size  Location     Type
 18790 ;;                  2    0[COMRAM] unsigned int 
 18791 ;; Registers used:
 18792 ;;		wreg, status,2, status,0
 18793 ;; Tracked objects:
 18794 ;;		On entry : 0/0
 18795 ;;		On exit  : 0/0
 18796 ;;		Unchanged: 0/0
 18797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18801 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18802 ;;Total ram usage:        5 bytes
 18803 ;; Hardware stack levels used:    1
 18804 ;; This function calls:
 18805 ;;		Nothing
 18806 ;; This function is called by:
 18807 ;;		_printSortTimer
 18808 ;;		i2_printf
 18809 ;; This function uses a non-reentrant model
 18810 ;;
 18811                           
 18812                           	psect	text78
 18813  003B3E                     __ptext78:
 18814                           	opt stack 0
 18815  003B3E                     i2___lwmod:
 18816                           	opt stack 20
 18817                           
 18818                           ;incstack = 0
 18819  003B3E  5003               	movf	i2___lwmod@divisor,w,c
 18820  003B40  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18821  003B42  B4D8               	btfsc	status,2,c
 18822  003B44  D018               	goto	i2l1645
 18823  003B46  0E01               	movlw	1
 18824  003B48  6E05               	movwf	i2___lwmod@counter,c
 18825  003B4A  D004               	goto	i2l5092
 18826  003B4C                     i2l5090:
 18827  003B4C  90D8               	bcf	status,0,c
 18828  003B4E  3603               	rlcf	i2___lwmod@divisor,f,c
 18829  003B50  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18830  003B52  2A05               	incf	i2___lwmod@counter,f,c
 18831  003B54                     i2l5092:
 18832  003B54  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18833  003B56  D7FA               	goto	i2l5090
 18834  003B58                     i2l5094:
 18835  003B58  5003               	movf	i2___lwmod@divisor,w,c
 18836  003B5A  5C01               	subwf	i2___lwmod@dividend,w,c
 18837  003B5C  5004               	movf	i2___lwmod@divisor+1,w,c
 18838  003B5E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18839  003B60  A0D8               	btfss	status,0,c
 18840  003B62  D004               	goto	i2l5098
 18841  003B64  5003               	movf	i2___lwmod@divisor,w,c
 18842  003B66  5E01               	subwf	i2___lwmod@dividend,f,c
 18843  003B68  5004               	movf	i2___lwmod@divisor+1,w,c
 18844  003B6A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18845  003B6C                     i2l5098:
 18846  003B6C  90D8               	bcf	status,0,c
 18847  003B6E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18848  003B70  3203               	rrcf	i2___lwmod@divisor,f,c
 18849  003B72  2E05               	decfsz	i2___lwmod@counter,f,c
 18850  003B74  D7F1               	goto	i2l5094
 18851  003B76                     i2l1645:
 18852  003B76  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18853  003B7A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18854  003B7E  0012               	return		;funcret
 18855  003B80                     __end_ofi2___lwmod:
 18856                           	opt stack 0
 18857                           pclatu	equ	0xFFB
 18858                           pclath	equ	0xFFA
 18859                           tblptru	equ	0xFF8
 18860                           tblptrh	equ	0xFF7
 18861                           tblptrl	equ	0xFF6
 18862                           tablat	equ	0xFF5
 18863                           prodh	equ	0xFF4
 18864                           prodl	equ	0xFF3
 18865                           intcon	equ	0xFF2
 18866                           intcon2	equ	0xFF1
 18867                           intcon3	equ	0xFF0
 18868                           indf0	equ	0xFEF
 18869                           postinc0	equ	0xFEE
 18870                           fsr0h	equ	0xFEA
 18871                           fsr0l	equ	0xFE9
 18872                           wreg	equ	0xFE8
 18873                           postdec1	equ	0xFE5
 18874                           fsr1h	equ	0xFE2
 18875                           fsr1l	equ	0xFE1
 18876                           indf2	equ	0xFDF
 18877                           postinc2	equ	0xFDE
 18878                           postdec2	equ	0xFDD
 18879                           fsr2h	equ	0xFDA
 18880                           fsr2l	equ	0xFD9
 18881                           status	equ	0xFD8
 18882                           
 18883 ;; *************** function i2___lwdiv *****************
 18884 ;; Defined at:
 18885 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18886 ;; Parameters:    Size  Location     Type
 18887 ;;  dividend        2    5[COMRAM] unsigned int 
 18888 ;;  divisor         2    7[COMRAM] unsigned int 
 18889 ;; Auto vars:     Size  Location     Type
 18890 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18891 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18892 ;; Return value:  Size  Location     Type
 18893 ;;                  2    5[COMRAM] unsigned int 
 18894 ;; Registers used:
 18895 ;;		wreg, status,2, status,0
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : 0/0
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18902 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18904 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18905 ;;Total ram usage:        7 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; This function calls:
 18908 ;;		Nothing
 18909 ;; This function is called by:
 18910 ;;		_printSortTimer
 18911 ;;		i2_printf
 18912 ;; This function uses a non-reentrant model
 18913 ;;
 18914                           
 18915                           	psect	text79
 18916  003972                     __ptext79:
 18917                           	opt stack 0
 18918  003972                     i2___lwdiv:
 18919                           	opt stack 20
 18920                           
 18921                           ;incstack = 0
 18922  003972  0E00               	movlw	0
 18923  003974  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18924  003976  0E00               	movlw	0
 18925  003978  6E0A               	movwf	i2___lwdiv@quotient,c
 18926  00397A  5008               	movf	i2___lwdiv@divisor,w,c
 18927  00397C  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18928  00397E  B4D8               	btfsc	status,2,c
 18929  003980  D01C               	goto	i2l1635
 18930  003982  0E01               	movlw	1
 18931  003984  6E0C               	movwf	i2___lwdiv@counter,c
 18932  003986  D004               	goto	i2l5072
 18933  003988                     i2l5070:
 18934  003988  90D8               	bcf	status,0,c
 18935  00398A  3608               	rlcf	i2___lwdiv@divisor,f,c
 18936  00398C  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18937  00398E  2A0C               	incf	i2___lwdiv@counter,f,c
 18938  003990                     i2l5072:
 18939  003990  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18940  003992  D7FA               	goto	i2l5070
 18941  003994                     i2l5074:
 18942  003994  90D8               	bcf	status,0,c
 18943  003996  360A               	rlcf	i2___lwdiv@quotient,f,c
 18944  003998  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18945  00399A  5008               	movf	i2___lwdiv@divisor,w,c
 18946  00399C  5C06               	subwf	i2___lwdiv@dividend,w,c
 18947  00399E  5009               	movf	i2___lwdiv@divisor+1,w,c
 18948  0039A0  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18949  0039A2  A0D8               	btfss	status,0,c
 18950  0039A4  D005               	goto	i2l5082
 18951  0039A6  5008               	movf	i2___lwdiv@divisor,w,c
 18952  0039A8  5E06               	subwf	i2___lwdiv@dividend,f,c
 18953  0039AA  5009               	movf	i2___lwdiv@divisor+1,w,c
 18954  0039AC  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18955  0039AE  800A               	bsf	i2___lwdiv@quotient,0,c
 18956  0039B0                     i2l5082:
 18957  0039B0  90D8               	bcf	status,0,c
 18958  0039B2  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18959  0039B4  3208               	rrcf	i2___lwdiv@divisor,f,c
 18960  0039B6  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18961  0039B8  D7ED               	goto	i2l5074
 18962  0039BA                     i2l1635:
 18963  0039BA  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18964  0039BE  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18965  0039C2  0012               	return		;funcret
 18966  0039C4                     __end_ofi2___lwdiv:
 18967                           	opt stack 0
 18968                           pclatu	equ	0xFFB
 18969                           pclath	equ	0xFFA
 18970                           tblptru	equ	0xFF8
 18971                           tblptrh	equ	0xFF7
 18972                           tblptrl	equ	0xFF6
 18973                           tablat	equ	0xFF5
 18974                           prodh	equ	0xFF4
 18975                           prodl	equ	0xFF3
 18976                           intcon	equ	0xFF2
 18977                           intcon2	equ	0xFF1
 18978                           intcon3	equ	0xFF0
 18979                           indf0	equ	0xFEF
 18980                           postinc0	equ	0xFEE
 18981                           fsr0h	equ	0xFEA
 18982                           fsr0l	equ	0xFE9
 18983                           wreg	equ	0xFE8
 18984                           postdec1	equ	0xFE5
 18985                           fsr1h	equ	0xFE2
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           fsr2h	equ	0xFDA
 18991                           fsr2l	equ	0xFD9
 18992                           status	equ	0xFD8
 18993                           
 18994 ;; *************** function i2_lcdInst *****************
 18995 ;; Defined at:
 18996 ;;		line 15 in file "lcd.c"
 18997 ;; Parameters:    Size  Location     Type
 18998 ;;  data            1    wreg     unsigned char 
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;  data            1    2[COMRAM] unsigned char 
 19001 ;; Return value:  Size  Location     Type
 19002 ;;                  1    wreg      void 
 19003 ;; Registers used:
 19004 ;;		wreg, status,2, status,0, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;Total ram usage:        1 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    1
 19017 ;; This function calls:
 19018 ;;		i2_lcdNibble
 19019 ;; This function is called by:
 19020 ;;		_change_state_to_menu_11
 19021 ;;		_change_state_to_menu_23
 19022 ;;		_change_state_to_logs_11
 19023 ;;		_change_state_to_logs_12
 19024 ;;		_change_state_to_logs_22
 19025 ;;		_change_state_to_logs_23
 19026 ;;		_change_state_to_logs_33
 19027 ;;		_change_state_to_logs_34
 19028 ;;		_printSortTimer
 19029 ;;		i2_change_state_to_menu_start
 19030 ;;		i2_change_state_to_menu_12
 19031 ;;		i2_change_state_to_menu_22
 19032 ;;		i2_printRTC
 19033 ;; This function uses a non-reentrant model
 19034 ;;
 19035                           
 19036                           	psect	text80
 19037  0040D0                     __ptext80:
 19038                           	opt stack 0
 19039  0040D0                     i2_lcdInst:
 19040                           	opt stack 19
 19041                           
 19042                           ;incstack = 0
 19043                           ;i2lcdInst@data stored from wreg
 19044  0040D0  6E03               	movwf	i2lcdInst@data,c
 19045                           
 19046                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 19047  0040D2  948C               	bcf	3980,2,c	;volatile
 19048                           
 19049                           ;lcd.c: 17: lcdNibble(data);
 19050  0040D4  5003               	movf	i2lcdInst@data,w,c
 19051  0040D6  EC8E  F01C         	call	i2_lcdNibble
 19052  0040DA  0012               	return		;funcret
 19053  0040DC                     __end_ofi2_lcdInst:
 19054                           	opt stack 0
 19055                           pclatu	equ	0xFFB
 19056                           pclath	equ	0xFFA
 19057                           tblptru	equ	0xFF8
 19058                           tblptrh	equ	0xFF7
 19059                           tblptrl	equ	0xFF6
 19060                           tablat	equ	0xFF5
 19061                           prodh	equ	0xFF4
 19062                           prodl	equ	0xFF3
 19063                           intcon	equ	0xFF2
 19064                           intcon2	equ	0xFF1
 19065                           intcon3	equ	0xFF0
 19066                           indf0	equ	0xFEF
 19067                           postinc0	equ	0xFEE
 19068                           fsr0h	equ	0xFEA
 19069                           fsr0l	equ	0xFE9
 19070                           wreg	equ	0xFE8
 19071                           postdec1	equ	0xFE5
 19072                           fsr1h	equ	0xFE2
 19073                           fsr1l	equ	0xFE1
 19074                           indf2	equ	0xFDF
 19075                           postinc2	equ	0xFDE
 19076                           postdec2	equ	0xFDD
 19077                           fsr2h	equ	0xFDA
 19078                           fsr2l	equ	0xFD9
 19079                           status	equ	0xFD8
 19080                           
 19081 ;; *************** function i2_lcdNibble *****************
 19082 ;; Defined at:
 19083 ;;		line 25 in file "lcd.c"
 19084 ;; Parameters:    Size  Location     Type
 19085 ;;  data            1    wreg     unsigned char 
 19086 ;; Auto vars:     Size  Location     Type
 19087 ;;  data            1    1[COMRAM] unsigned char 
 19088 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19089 ;; Return value:  Size  Location     Type
 19090 ;;                  1    wreg      void 
 19091 ;; Registers used:
 19092 ;;		wreg, status,2, status,0
 19093 ;; Tracked objects:
 19094 ;;		On entry : 0/0
 19095 ;;		On exit  : 0/0
 19096 ;;		Unchanged: 0/0
 19097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19101 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19102 ;;Total ram usage:        2 bytes
 19103 ;; Hardware stack levels used:    1
 19104 ;; This function calls:
 19105 ;;		Nothing
 19106 ;; This function is called by:
 19107 ;;		i2_lcdInst
 19108 ;;		i2_putch
 19109 ;; This function uses a non-reentrant model
 19110 ;;
 19111                           
 19112                           	psect	text81
 19113  00391C                     __ptext81:
 19114                           	opt stack 0
 19115  00391C                     i2_lcdNibble:
 19116                           	opt stack 19
 19117                           
 19118                           ;incstack = 0
 19119                           ;i2lcdNibble@data stored from wreg
 19120  00391C  6E02               	movwf	i2lcdNibble@data,c
 19121                           
 19122                           ;lcd.c: 27: char temp = data & 0xF0;
 19123  00391E  5002               	movf	i2lcdNibble@data,w,c
 19124  003920  0BF0               	andlw	240
 19125  003922  6E01               	movwf	i2lcdNibble@temp,c
 19126                           
 19127                           ;lcd.c: 28: LATD = LATD & 0x0F;
 19128  003924  508C               	movf	3980,w,c	;volatile
 19129  003926  0B0F               	andlw	15
 19130  003928  6E8C               	movwf	3980,c	;volatile
 19131                           
 19132                           ;lcd.c: 29: LATD = temp | LATD;
 19133  00392A  5001               	movf	i2lcdNibble@temp,w,c
 19134  00392C  108C               	iorwf	3980,w,c	;volatile
 19135  00392E  6E8C               	movwf	3980,c	;volatile
 19136                           
 19137                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 19138  003930  868C               	bsf	3980,3,c	;volatile
 19139                           
 19140                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19141  003932  0E42               	movlw	66
 19142  003934                     i2u748_47:
 19143  003934  2EE8               	decfsz	wreg,f,c
 19144  003936  D7FE               	bra	i2u748_47
 19145  003938  D000               	nop2	
 19146                           
 19147                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 19148  00393A  968C               	bcf	3980,3,c	;volatile
 19149                           
 19150                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19151  00393C  0E42               	movlw	66
 19152  00393E                     i2u749_47:
 19153  00393E  2EE8               	decfsz	wreg,f,c
 19154  003940  D7FE               	bra	i2u749_47
 19155  003942  D000               	nop2	
 19156                           
 19157                           ;lcd.c: 36: data = data << 4;
 19158  003944  3802               	swapf	i2lcdNibble@data,w,c
 19159  003946  0BF0               	andlw	240
 19160  003948  6E02               	movwf	i2lcdNibble@data,c
 19161                           
 19162                           ;lcd.c: 38: temp = data & 0xF0;
 19163  00394A  5002               	movf	i2lcdNibble@data,w,c
 19164  00394C  0BF0               	andlw	240
 19165  00394E  6E01               	movwf	i2lcdNibble@temp,c
 19166                           
 19167                           ;lcd.c: 39: LATD = LATD & 0x0F;
 19168  003950  508C               	movf	3980,w,c	;volatile
 19169  003952  0B0F               	andlw	15
 19170  003954  6E8C               	movwf	3980,c	;volatile
 19171                           
 19172                           ;lcd.c: 40: LATD = temp | LATD;
 19173  003956  5001               	movf	i2lcdNibble@temp,w,c
 19174  003958  108C               	iorwf	3980,w,c	;volatile
 19175  00395A  6E8C               	movwf	3980,c	;volatile
 19176                           
 19177                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 19178  00395C  868C               	bsf	3980,3,c	;volatile
 19179                           
 19180                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19181  00395E  0E42               	movlw	66
 19182  003960                     i2u750_47:
 19183  003960  2EE8               	decfsz	wreg,f,c
 19184  003962  D7FE               	bra	i2u750_47
 19185  003964  D000               	nop2	
 19186                           
 19187                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 19188  003966  968C               	bcf	3980,3,c	;volatile
 19189                           
 19190                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 19191  003968  0E42               	movlw	66
 19192  00396A                     i2u751_47:
 19193  00396A  2EE8               	decfsz	wreg,f,c
 19194  00396C  D7FE               	bra	i2u751_47
 19195  00396E  D000               	nop2	
 19196  003970  0012               	return		;funcret
 19197  003972                     __end_ofi2_lcdNibble:
 19198                           	opt stack 0
 19199                           pclatu	equ	0xFFB
 19200                           pclath	equ	0xFFA
 19201                           tblptru	equ	0xFF8
 19202                           tblptrh	equ	0xFF7
 19203                           tblptrl	equ	0xFF6
 19204                           tablat	equ	0xFF5
 19205                           prodh	equ	0xFF4
 19206                           prodl	equ	0xFF3
 19207                           intcon	equ	0xFF2
 19208                           intcon2	equ	0xFF1
 19209                           intcon3	equ	0xFF0
 19210                           indf0	equ	0xFEF
 19211                           postinc0	equ	0xFEE
 19212                           fsr0h	equ	0xFEA
 19213                           fsr0l	equ	0xFE9
 19214                           wreg	equ	0xFE8
 19215                           postdec1	equ	0xFE5
 19216                           fsr1h	equ	0xFE2
 19217                           fsr1l	equ	0xFE1
 19218                           indf2	equ	0xFDF
 19219                           postinc2	equ	0xFDE
 19220                           postdec2	equ	0xFDD
 19221                           fsr2h	equ	0xFDA
 19222                           fsr2l	equ	0xFD9
 19223                           status	equ	0xFD8
 19224                           
 19225 ;; *************** function i2_getRTC *****************
 19226 ;; Defined at:
 19227 ;;		line 44 in file "RTC.c"
 19228 ;; Parameters:    Size  Location     Type
 19229 ;;		None
 19230 ;; Auto vars:     Size  Location     Type
 19231 ;;  getRTC          2    3[COMRAM] int 
 19232 ;; Return value:  Size  Location     Type
 19233 ;;                  1    wreg      void 
 19234 ;; Registers used:
 19235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19236 ;; Tracked objects:
 19237 ;;		On entry : 0/0
 19238 ;;		On exit  : 0/0
 19239 ;;		Unchanged: 0/0
 19240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;Total ram usage:        2 bytes
 19246 ;; Hardware stack levels used:    1
 19247 ;; Hardware stack levels required when called:    2
 19248 ;; This function calls:
 19249 ;;		i2_I2C_Master_Read
 19250 ;;		i2_I2C_Master_Start
 19251 ;;		i2_I2C_Master_Stop
 19252 ;;		i2_I2C_Master_Write
 19253 ;; This function is called by:
 19254 ;;		_printSortTimer
 19255 ;;		i2_printRTC
 19256 ;; This function uses a non-reentrant model
 19257 ;;
 19258                           
 19259                           	psect	text82
 19260  003608                     __ptext82:
 19261                           	opt stack 0
 19262  003608                     i2_getRTC:
 19263                           	opt stack 18
 19264                           
 19265                           ;RTC.c: 48: I2C_Master_Start();
 19266                           
 19267                           ;incstack = 0
 19268  003608  EC88  F020         	call	i2_I2C_Master_Start	;wreg free
 19269                           
 19270                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 19271  00360C  0E00               	movlw	0
 19272  00360E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19273  003610  0ED0               	movlw	208
 19274  003612  6E02               	movwf	i2I2C_Master_Write@d,c
 19275  003614  EC73  F020         	call	i2_I2C_Master_Write	;wreg free
 19276                           
 19277                           ;RTC.c: 50: I2C_Master_Write(0x00);
 19278  003618  0E00               	movlw	0
 19279  00361A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19280  00361C  0E00               	movlw	0
 19281  00361E  6E02               	movwf	i2I2C_Master_Write@d,c
 19282  003620  EC73  F020         	call	i2_I2C_Master_Write	;wreg free
 19283                           
 19284                           ;RTC.c: 51: I2C_Master_Stop();
 19285  003624  EC84  F020         	call	i2_I2C_Master_Stop	;wreg free
 19286                           
 19287                           ;RTC.c: 54: I2C_Master_Start();
 19288  003628  EC88  F020         	call	i2_I2C_Master_Start	;wreg free
 19289                           
 19290                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 19291  00362C  0E00               	movlw	0
 19292  00362E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 19293  003630  0ED1               	movlw	209
 19294  003632  6E02               	movwf	i2I2C_Master_Write@d,c
 19295  003634  EC73  F020         	call	i2_I2C_Master_Write	;wreg free
 19296                           
 19297                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 19298  003638  0E00               	movlw	0
 19299  00363A  6E05               	movwf	i2getRTC@i+1,c
 19300  00363C  0E00               	movlw	0
 19301  00363E  6E04               	movwf	i2getRTC@i,c
 19302  003640                     i2l5322:
 19303  003640  BE05               	btfsc	i2getRTC@i+1,7,c
 19304  003642  D006               	goto	i2l5326
 19305  003644  5005               	movf	i2getRTC@i+1,w,c
 19306  003646  E111               	bnz	i2l5332
 19307  003648  0E06               	movlw	6
 19308  00364A  5C04               	subwf	i2getRTC@i,w,c
 19309  00364C  B0D8               	btfsc	status,0,c
 19310  00364E  D00D               	goto	i2l5332
 19311  003650                     i2l5326:
 19312                           
 19313                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 19314  003650  0E24               	movlw	low _time
 19315  003652  2404               	addwf	i2getRTC@i,w,c
 19316  003654  6ED9               	movwf	fsr2l,c
 19317  003656  0E01               	movlw	high _time
 19318  003658  2005               	addwfc	i2getRTC@i+1,w,c
 19319  00365A  6EDA               	movwf	fsr2h,c
 19320  00365C  0E01               	movlw	1
 19321  00365E  ECB5  F01F         	call	i2_I2C_Master_Read
 19322  003662  6EDF               	movwf	indf2,c
 19323  003664  4A04               	infsnz	i2getRTC@i,f,c
 19324  003666  2A05               	incf	i2getRTC@i+1,f,c
 19325  003668  D7EB               	goto	i2l5322
 19326  00366A                     i2l5332:
 19327                           
 19328                           ;RTC.c: 58: }
 19329                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 19330  00366A  0E00               	movlw	0
 19331  00366C  ECB5  F01F         	call	i2_I2C_Master_Read
 19332  003670  0101               	movlb	1	; () banked
 19333  003672  6F2A               	movwf	(_time+6)& (0+255),b
 19334                           
 19335                           ;RTC.c: 60: I2C_Master_Stop();
 19336  003674  EC84  F020         	call	i2_I2C_Master_Stop	;wreg free
 19337  003678  0012               	return		;funcret
 19338  00367A                     __end_ofi2_getRTC:
 19339                           	opt stack 0
 19340                           pclatu	equ	0xFFB
 19341                           pclath	equ	0xFFA
 19342                           tblptru	equ	0xFF8
 19343                           tblptrh	equ	0xFF7
 19344                           tblptrl	equ	0xFF6
 19345                           tablat	equ	0xFF5
 19346                           prodh	equ	0xFF4
 19347                           prodl	equ	0xFF3
 19348                           intcon	equ	0xFF2
 19349                           intcon2	equ	0xFF1
 19350                           intcon3	equ	0xFF0
 19351                           indf0	equ	0xFEF
 19352                           postinc0	equ	0xFEE
 19353                           fsr0h	equ	0xFEA
 19354                           fsr0l	equ	0xFE9
 19355                           wreg	equ	0xFE8
 19356                           postdec1	equ	0xFE5
 19357                           fsr1h	equ	0xFE2
 19358                           fsr1l	equ	0xFE1
 19359                           indf2	equ	0xFDF
 19360                           postinc2	equ	0xFDE
 19361                           postdec2	equ	0xFDD
 19362                           fsr2h	equ	0xFDA
 19363                           fsr2l	equ	0xFD9
 19364                           status	equ	0xFD8
 19365                           
 19366 ;; *************** function i2_I2C_Master_Write *****************
 19367 ;; Defined at:
 19368 ;;		line 49 in file "I2C.c"
 19369 ;; Parameters:    Size  Location     Type
 19370 ;;  d               2    1[COMRAM] unsigned int 
 19371 ;; Auto vars:     Size  Location     Type
 19372 ;;		None
 19373 ;; Return value:  Size  Location     Type
 19374 ;;                  1    wreg      void 
 19375 ;; Registers used:
 19376 ;;		wreg, status,2, status,0, cstack
 19377 ;; Tracked objects:
 19378 ;;		On entry : 0/0
 19379 ;;		On exit  : 0/0
 19380 ;;		Unchanged: 0/0
 19381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19385 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19386 ;;Total ram usage:        2 bytes
 19387 ;; Hardware stack levels used:    1
 19388 ;; Hardware stack levels required when called:    1
 19389 ;; This function calls:
 19390 ;;		i2_I2C_Master_Wait
 19391 ;; This function is called by:
 19392 ;;		i2_getRTC
 19393 ;; This function uses a non-reentrant model
 19394 ;;
 19395                           
 19396                           	psect	text83
 19397  0040E6                     __ptext83:
 19398                           	opt stack 0
 19399  0040E6                     i2_I2C_Master_Write:
 19400                           	opt stack 18
 19401                           
 19402                           ;I2C.c: 51: I2C_Master_Wait();
 19403                           
 19404                           ;incstack = 0
 19405  0040E6  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19406                           
 19407                           ;I2C.c: 52: SSPBUF = d;
 19408  0040EA  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 19409  0040EE  0012               	return		;funcret
 19410  0040F0                     __end_ofi2_I2C_Master_Write:
 19411                           	opt stack 0
 19412                           pclatu	equ	0xFFB
 19413                           pclath	equ	0xFFA
 19414                           tblptru	equ	0xFF8
 19415                           tblptrh	equ	0xFF7
 19416                           tblptrl	equ	0xFF6
 19417                           tablat	equ	0xFF5
 19418                           prodh	equ	0xFF4
 19419                           prodl	equ	0xFF3
 19420                           intcon	equ	0xFF2
 19421                           intcon2	equ	0xFF1
 19422                           intcon3	equ	0xFF0
 19423                           indf0	equ	0xFEF
 19424                           postinc0	equ	0xFEE
 19425                           fsr0h	equ	0xFEA
 19426                           fsr0l	equ	0xFE9
 19427                           wreg	equ	0xFE8
 19428                           postdec1	equ	0xFE5
 19429                           fsr1h	equ	0xFE2
 19430                           fsr1l	equ	0xFE1
 19431                           indf2	equ	0xFDF
 19432                           postinc2	equ	0xFDE
 19433                           postdec2	equ	0xFDD
 19434                           fsr2h	equ	0xFDA
 19435                           fsr2l	equ	0xFD9
 19436                           status	equ	0xFD8
 19437                           
 19438 ;; *************** function i2_I2C_Master_Stop *****************
 19439 ;; Defined at:
 19440 ;;		line 43 in file "I2C.c"
 19441 ;; Parameters:    Size  Location     Type
 19442 ;;		None
 19443 ;; Auto vars:     Size  Location     Type
 19444 ;;		None
 19445 ;; Return value:  Size  Location     Type
 19446 ;;                  1    wreg      void 
 19447 ;; Registers used:
 19448 ;;		wreg, status,2, status,0, cstack
 19449 ;; Tracked objects:
 19450 ;;		On entry : 0/0
 19451 ;;		On exit  : 0/0
 19452 ;;		Unchanged: 0/0
 19453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19458 ;;Total ram usage:        0 bytes
 19459 ;; Hardware stack levels used:    1
 19460 ;; Hardware stack levels required when called:    1
 19461 ;; This function calls:
 19462 ;;		i2_I2C_Master_Wait
 19463 ;; This function is called by:
 19464 ;;		i2_getRTC
 19465 ;; This function uses a non-reentrant model
 19466 ;;
 19467                           
 19468                           	psect	text84
 19469  004108                     __ptext84:
 19470                           	opt stack 0
 19471  004108                     i2_I2C_Master_Stop:
 19472                           	opt stack 18
 19473                           
 19474                           ;I2C.c: 45: I2C_Master_Wait();
 19475                           
 19476                           ;incstack = 0
 19477  004108  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19478                           
 19479                           ;I2C.c: 46: PEN = 1;
 19480  00410C  84C5               	bsf	4037,2,c	;volatile
 19481  00410E  0012               	return		;funcret
 19482  004110                     __end_ofi2_I2C_Master_Stop:
 19483                           	opt stack 0
 19484                           pclatu	equ	0xFFB
 19485                           pclath	equ	0xFFA
 19486                           tblptru	equ	0xFF8
 19487                           tblptrh	equ	0xFF7
 19488                           tblptrl	equ	0xFF6
 19489                           tablat	equ	0xFF5
 19490                           prodh	equ	0xFF4
 19491                           prodl	equ	0xFF3
 19492                           intcon	equ	0xFF2
 19493                           intcon2	equ	0xFF1
 19494                           intcon3	equ	0xFF0
 19495                           indf0	equ	0xFEF
 19496                           postinc0	equ	0xFEE
 19497                           fsr0h	equ	0xFEA
 19498                           fsr0l	equ	0xFE9
 19499                           wreg	equ	0xFE8
 19500                           postdec1	equ	0xFE5
 19501                           fsr1h	equ	0xFE2
 19502                           fsr1l	equ	0xFE1
 19503                           indf2	equ	0xFDF
 19504                           postinc2	equ	0xFDE
 19505                           postdec2	equ	0xFDD
 19506                           fsr2h	equ	0xFDA
 19507                           fsr2l	equ	0xFD9
 19508                           status	equ	0xFD8
 19509                           
 19510 ;; *************** function i2_I2C_Master_Start *****************
 19511 ;; Defined at:
 19512 ;;		line 31 in file "I2C.c"
 19513 ;; Parameters:    Size  Location     Type
 19514 ;;		None
 19515 ;; Auto vars:     Size  Location     Type
 19516 ;;		None
 19517 ;; Return value:  Size  Location     Type
 19518 ;;                  1    wreg      void 
 19519 ;; Registers used:
 19520 ;;		wreg, status,2, status,0, cstack
 19521 ;; Tracked objects:
 19522 ;;		On entry : 0/0
 19523 ;;		On exit  : 0/0
 19524 ;;		Unchanged: 0/0
 19525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19530 ;;Total ram usage:        0 bytes
 19531 ;; Hardware stack levels used:    1
 19532 ;; Hardware stack levels required when called:    1
 19533 ;; This function calls:
 19534 ;;		i2_I2C_Master_Wait
 19535 ;; This function is called by:
 19536 ;;		i2_getRTC
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           	psect	text85
 19541  004110                     __ptext85:
 19542                           	opt stack 0
 19543  004110                     i2_I2C_Master_Start:
 19544                           	opt stack 18
 19545                           
 19546                           ;I2C.c: 33: I2C_Master_Wait();
 19547                           
 19548                           ;incstack = 0
 19549  004110  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19550                           
 19551                           ;I2C.c: 34: SEN = 1;
 19552  004114  80C5               	bsf	4037,0,c	;volatile
 19553  004116  0012               	return		;funcret
 19554  004118                     __end_ofi2_I2C_Master_Start:
 19555                           	opt stack 0
 19556                           pclatu	equ	0xFFB
 19557                           pclath	equ	0xFFA
 19558                           tblptru	equ	0xFF8
 19559                           tblptrh	equ	0xFF7
 19560                           tblptrl	equ	0xFF6
 19561                           tablat	equ	0xFF5
 19562                           prodh	equ	0xFF4
 19563                           prodl	equ	0xFF3
 19564                           intcon	equ	0xFF2
 19565                           intcon2	equ	0xFF1
 19566                           intcon3	equ	0xFF0
 19567                           indf0	equ	0xFEF
 19568                           postinc0	equ	0xFEE
 19569                           fsr0h	equ	0xFEA
 19570                           fsr0l	equ	0xFE9
 19571                           wreg	equ	0xFE8
 19572                           postdec1	equ	0xFE5
 19573                           fsr1h	equ	0xFE2
 19574                           fsr1l	equ	0xFE1
 19575                           indf2	equ	0xFDF
 19576                           postinc2	equ	0xFDE
 19577                           postdec2	equ	0xFDD
 19578                           fsr2h	equ	0xFDA
 19579                           fsr2l	equ	0xFD9
 19580                           status	equ	0xFD8
 19581                           
 19582 ;; *************** function i2_I2C_Master_Read *****************
 19583 ;; Defined at:
 19584 ;;		line 55 in file "I2C.c"
 19585 ;; Parameters:    Size  Location     Type
 19586 ;;  a               1    wreg     unsigned char 
 19587 ;; Auto vars:     Size  Location     Type
 19588 ;;  a               1    1[COMRAM] unsigned char 
 19589 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 19590 ;; Return value:  Size  Location     Type
 19591 ;;                  1    wreg      unsigned char 
 19592 ;; Registers used:
 19593 ;;		wreg, status,2, status,0, cstack
 19594 ;; Tracked objects:
 19595 ;;		On entry : 0/0
 19596 ;;		On exit  : 0/0
 19597 ;;		Unchanged: 0/0
 19598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;Total ram usage:        2 bytes
 19604 ;; Hardware stack levels used:    1
 19605 ;; Hardware stack levels required when called:    1
 19606 ;; This function calls:
 19607 ;;		i2_I2C_Master_Wait
 19608 ;; This function is called by:
 19609 ;;		i2_getRTC
 19610 ;; This function uses a non-reentrant model
 19611 ;;
 19612                           
 19613                           	psect	text86
 19614  003F6A                     __ptext86:
 19615                           	opt stack 0
 19616  003F6A                     i2_I2C_Master_Read:
 19617                           	opt stack 18
 19618                           
 19619                           ;incstack = 0
 19620                           ;i2I2C_Master_Read@a stored from wreg
 19621  003F6A  6E02               	movwf	i2I2C_Master_Read@a,c
 19622                           
 19623                           ;I2C.c: 57: unsigned char temp;
 19624                           ;I2C.c: 58: I2C_Master_Wait();
 19625  003F6C  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19626                           
 19627                           ;I2C.c: 59: RCEN = 1;
 19628  003F70  86C5               	bsf	4037,3,c	;volatile
 19629                           
 19630                           ;I2C.c: 60: I2C_Master_Wait();
 19631  003F72  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19632                           
 19633                           ;I2C.c: 61: temp = SSPBUF;
 19634  003F76  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19635                           
 19636                           ;I2C.c: 62: I2C_Master_Wait();
 19637  003F7A  EC49  F020         	call	i2_I2C_Master_Wait	;wreg free
 19638                           
 19639                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19640  003F7E  5002               	movf	i2I2C_Master_Read@a,w,c
 19641  003F80  A4D8               	btfss	status,2,c
 19642  003F82  D002               	goto	i2u344_40
 19643  003F84  8AC5               	bsf	4037,5,c	;volatile
 19644  003F86  D001               	goto	i2l5036
 19645  003F88                     i2u344_40:
 19646  003F88  9AC5               	bcf	4037,5,c	;volatile
 19647  003F8A                     i2l5036:
 19648                           
 19649                           ;I2C.c: 64: ACKEN = 1;
 19650  003F8A  88C5               	bsf	4037,4,c	;volatile
 19651                           
 19652                           ;I2C.c: 65: return temp;
 19653  003F8C  5003               	movf	i2I2C_Master_Read@temp,w,c
 19654  003F8E  0012               	return	
 19655  003F90                     __end_ofi2_I2C_Master_Read:
 19656                           	opt stack 0
 19657                           pclatu	equ	0xFFB
 19658                           pclath	equ	0xFFA
 19659                           tblptru	equ	0xFF8
 19660                           tblptrh	equ	0xFF7
 19661                           tblptrl	equ	0xFF6
 19662                           tablat	equ	0xFF5
 19663                           prodh	equ	0xFF4
 19664                           prodl	equ	0xFF3
 19665                           intcon	equ	0xFF2
 19666                           intcon2	equ	0xFF1
 19667                           intcon3	equ	0xFF0
 19668                           indf0	equ	0xFEF
 19669                           postinc0	equ	0xFEE
 19670                           fsr0h	equ	0xFEA
 19671                           fsr0l	equ	0xFE9
 19672                           wreg	equ	0xFE8
 19673                           postdec1	equ	0xFE5
 19674                           fsr1h	equ	0xFE2
 19675                           fsr1l	equ	0xFE1
 19676                           indf2	equ	0xFDF
 19677                           postinc2	equ	0xFDE
 19678                           postdec2	equ	0xFDD
 19679                           fsr2h	equ	0xFDA
 19680                           fsr2l	equ	0xFD9
 19681                           status	equ	0xFD8
 19682                           
 19683 ;; *************** function i2_I2C_Master_Wait *****************
 19684 ;; Defined at:
 19685 ;;		line 26 in file "I2C.c"
 19686 ;; Parameters:    Size  Location     Type
 19687 ;;		None
 19688 ;; Auto vars:     Size  Location     Type
 19689 ;;		None
 19690 ;; Return value:  Size  Location     Type
 19691 ;;                  1    wreg      void 
 19692 ;; Registers used:
 19693 ;;		wreg, status,2, status,0
 19694 ;; Tracked objects:
 19695 ;;		On entry : 0/0
 19696 ;;		On exit  : 0/0
 19697 ;;		Unchanged: 0/0
 19698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19703 ;;Total ram usage:        1 bytes
 19704 ;; Hardware stack levels used:    1
 19705 ;; This function calls:
 19706 ;;		Nothing
 19707 ;; This function is called by:
 19708 ;;		i2_I2C_Master_Start
 19709 ;;		i2_I2C_Master_Stop
 19710 ;;		i2_I2C_Master_Write
 19711 ;;		i2_I2C_Master_Read
 19712 ;; This function uses a non-reentrant model
 19713 ;;
 19714                           
 19715                           	psect	text87
 19716  004092                     __ptext87:
 19717                           	opt stack 0
 19718  004092                     i2_I2C_Master_Wait:
 19719                           	opt stack 18
 19720  004092                     i2l66:
 19721  004092  B4C7               	btfsc	4039,2,c	;volatile
 19722  004094  D7FE               	goto	i2l66
 19723  004096  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19724  00409A  0E1F               	movlw	31
 19725  00409C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19726  00409E  B4D8               	btfsc	status,2,c
 19727  0040A0  0012               	return	
 19728  0040A2  D7F7               	goto	i2l66
 19729  0040A4                     __end_ofi2_I2C_Master_Wait:
 19730                           	opt stack 0
 19731                           pclatu	equ	0xFFB
 19732                           pclath	equ	0xFFA
 19733                           tblptru	equ	0xFF8
 19734                           tblptrh	equ	0xFF7
 19735                           tblptrl	equ	0xFF6
 19736                           tablat	equ	0xFF5
 19737                           prodh	equ	0xFF4
 19738                           prodl	equ	0xFF3
 19739                           intcon	equ	0xFF2
 19740                           intcon2	equ	0xFF1
 19741                           intcon3	equ	0xFF0
 19742                           indf0	equ	0xFEF
 19743                           postinc0	equ	0xFEE
 19744                           fsr0h	equ	0xFEA
 19745                           fsr0l	equ	0xFE9
 19746                           wreg	equ	0xFE8
 19747                           postdec1	equ	0xFE5
 19748                           fsr1h	equ	0xFE2
 19749                           fsr1l	equ	0xFE1
 19750                           indf2	equ	0xFDF
 19751                           postinc2	equ	0xFDE
 19752                           postdec2	equ	0xFDD
 19753                           fsr2h	equ	0xFDA
 19754                           fsr2l	equ	0xFD9
 19755                           status	equ	0xFD8
 19756                           pclatu	equ	0xFFB
 19757                           pclath	equ	0xFFA
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           intcon2	equ	0xFF1
 19766                           intcon3	equ	0xFF0
 19767                           indf0	equ	0xFEF
 19768                           postinc0	equ	0xFEE
 19769                           fsr0h	equ	0xFEA
 19770                           fsr0l	equ	0xFE9
 19771                           wreg	equ	0xFE8
 19772                           postdec1	equ	0xFE5
 19773                           fsr1h	equ	0xFE2
 19774                           fsr1l	equ	0xFE1
 19775                           indf2	equ	0xFDF
 19776                           postinc2	equ	0xFDE
 19777                           postdec2	equ	0xFDD
 19778                           fsr2h	equ	0xFDA
 19779                           fsr2l	equ	0xFD9
 19780                           status	equ	0xFD8
 19781                           
 19782                           	psect	rparam
 19783  0000                     pclatu	equ	0xFFB
 19784                           pclath	equ	0xFFA
 19785                           tblptru	equ	0xFF8
 19786                           tblptrh	equ	0xFF7
 19787                           tblptrl	equ	0xFF6
 19788                           tablat	equ	0xFF5
 19789                           prodh	equ	0xFF4
 19790                           prodl	equ	0xFF3
 19791                           intcon	equ	0xFF2
 19792                           intcon2	equ	0xFF1
 19793                           intcon3	equ	0xFF0
 19794                           indf0	equ	0xFEF
 19795                           postinc0	equ	0xFEE
 19796                           fsr0h	equ	0xFEA
 19797                           fsr0l	equ	0xFE9
 19798                           wreg	equ	0xFE8
 19799                           postdec1	equ	0xFE5
 19800                           fsr1h	equ	0xFE2
 19801                           fsr1l	equ	0xFE1
 19802                           indf2	equ	0xFDF
 19803                           postinc2	equ	0xFDE
 19804                           postdec2	equ	0xFDD
 19805                           fsr2h	equ	0xFDA
 19806                           fsr2l	equ	0xFD9
 19807                           status	equ	0xFD8
 19808                           
 19809                           	psect	temp
 19810  00007E                     btemp:
 19811                           	opt stack 0
 19812  00007E                     	ds	1
 19813  0000                     int$flags	set	btemp
 19814                           pclatu	equ	0xFFB
 19815                           pclath	equ	0xFFA
 19816                           tblptru	equ	0xFF8
 19817                           tblptrh	equ	0xFF7
 19818                           tblptrl	equ	0xFF6
 19819                           tablat	equ	0xFF5
 19820                           prodh	equ	0xFF4
 19821                           prodl	equ	0xFF3
 19822                           intcon	equ	0xFF2
 19823                           intcon2	equ	0xFF1
 19824                           intcon3	equ	0xFF0
 19825                           indf0	equ	0xFEF
 19826                           postinc0	equ	0xFEE
 19827                           fsr0h	equ	0xFEA
 19828                           fsr0l	equ	0xFE9
 19829                           wreg	equ	0xFE8
 19830                           postdec1	equ	0xFE5
 19831                           fsr1h	equ	0xFE2
 19832                           fsr1l	equ	0xFE1
 19833                           indf2	equ	0xFDF
 19834                           postinc2	equ	0xFDE
 19835                           postdec2	equ	0xFDD
 19836                           fsr2h	equ	0xFDA
 19837                           fsr2l	equ	0xFD9
 19838                           status	equ	0xFD8


Data Sizes:
    Strings     1172
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_109(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_108(CODE[17]), STR_107(CODE[17]), STR_106(CODE[18]), STR_105(CODE[18]), 
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[17]), STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), 
		 -> STR_88(CODE[11]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), 
		 -> STR_84(CODE[14]), STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _PortTestA5->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  139954
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15891
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   13247
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10274
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9527
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20880
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20030
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   41640
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12199
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7831
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7831
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   50596
                                             68 BANK0      2     2      0
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7921
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7831
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        25    25      0   11326
                                             43 BANK0     25    25      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    7856
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    7831
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7696
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 03 15:52:34 2017

                                    _i 00E4                     i2_I2C_Master_Start 4110  
                   i2_I2C_Master_Write 40E6                                     l66 407E  
                                   _ID 29D6                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l900 2E08                                    l478 32D6  
                                  l591 198A                                    l913 404A  
                                  l922 288C                                    l772 35CE  
                                  l998 2C6E                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 3D4E  
      __end_of_change_state_to_menu_12 3BF0        __end_of_change_state_to_menu_22 3BB8  
      __end_of_change_state_to_menu_23 3D1E           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 3E3E  
      __end_of_change_state_to_logs_12 3E0E        __end_of_change_state_to_logs_22 3DDE  
      __end_of_change_state_to_logs_23 3E9A        __end_of_change_state_to_logs_33 3DAE  
      __end_of_change_state_to_logs_34 3D7E                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1001 2C8E  
                                 l1022 2F2C                                   l1031 24CE  
                                 l1120 3504                                   l1112 34B2  
                                 l1114 34B6                                   l1115 34BA  
                                 l1019 2F28                                   l1116 34BE  
                                 l1108 3496                                   l1028 24CA  
                                 l1117 34C2                                   l1053 09C2  
                                 l1037 2580                                   l1118 34C6  
                                 l1046 0918                                   l1135 3862  
                                 l1151 340A                                   l1143 33D6  
                                 l1056 0A28                                   l1129 3852  
                                 l1057 0A76                                   l1049 091C  
                                 l1058 0ADC                                   l1083 0E84  
                                 l1059 0B2A                                   l1095 101E  
                                 l1188 1374                                   l1635 3588  
                                 l5012 3796                                   l5004 3760  
                                 l1645 37A4                                   l5006 376C  
                                 l1582 3108                                   l5008 3772  
                                 l5120 1162                                   l5202 1408  
                                 l5130 11A0                                   l5114 113C  
                                 l5220 1486                                   l5212 1462  
                                 l5124 116C                                   l5300 309C  
                                 l5214 146C                                   l5150 1260  
                                 l5118 1150                                   l5310 30F6  
                                 l5302 30A2                                   l6110 2A70  
                                 l5232 14C8                                   l5208 142A  
                                 l5160 12D8                                   l7000 053E  
                                 l6120 2AA0                                   l5242 153A  
                                 l5226 14A2                                   l5162 12F0  
                                 l5146 124E                                   l5138 121C  
                                 l5250 3C06                                   l5228 14AE  
                                 l5236 14DC                                   l5156 12C6  
                                 l5148 125A                                   l5172 133A  
                                 l5244 1546                                   l5260 3466  
                                 l7004 0556                                   l6124 2AAC  
                                 l5238 14E2                                   l5190 13CC  
                                 l5166 131C                                   l5158 12D2  
                                 l6150 28E0                                   l6062 2D72  
                                 l5184 13AC                                   l5168 1334  
                                 l6400 0C2A                                   l6232 255E  
                                 l5256 3450                                   l5248 3BFA  
                                 l5520 19B2                                   l5512 1908  
                                 l7112 07B6                                   l7104 0794  
                                 l7032 063E                                   l7024 061C  
                                 l6152 28FA                                   l6128 2AB8  
                                 l6410 0C52                                   l6250 25F2  
                                 l6226 251C                                   l5266 3486  
                                 l5530 1A48                                   l5522 19D0  
                                 l7122 07D2                                   l7042 065A  
                                 l6146 28AC                                   l5188 13C6  
                                 l5284 35BA                                   l6404 0C34  
                                 l6244 25B0                                   l5540 1ADE  
                                 l5532 1A66                                   l5524 19EE  
                                 l7108 079E                                   l7028 0626  
                                 l6148 28C6                                   l6156 2914  
                                 l5286 35E4                                   l6430 0CB8  
                                 l6414 0C5C                                   l5534 1A84  
                                 l5526 1A0C                                   l5518 1994  
                                 l7126 07EA                                   l7118 07C8  
                                 l7046 0672                                   l7038 0650  
                                 l6158 2942                                   l6078 2DAC  
                                 l6512 0E5C                                   l6504 0E3A  
                                 l6440 0CE0                                   l6408 0C4C  
                                 l5536 1AA2                                   l5528 1A2A  
                                 l5544 1AFC                                   l7152 086A  
                                 l7144 0848                                   l7072 06FA  
                                 l7064 06D8                                   l6514 0E62  
                                 l6434 0CD0                                   l6426 0CAE  
                                 l6418 0C74                                   l6290 098C  
                                 l5538 1AC0                                   l5546 1B5A  
                                 l7162 0886                                   l7082 0716  
                                 l7170 08AA                                   l5298 308C  
                                 l6540 0EEE                                   l6532 0ECC  
                                 l6508 0E44                                   l6460 0D54  
                                 l6452 0D32                                   l6444 0CF8  
                                 l6436 0CD6                                   l7148 0852  
                                 l7068 06E2                                   l5740 2EA8  
                                 l5732 2E7A                                   l6622 1078  
                                 l6550 0F16                                   l6542 0EF4  
                                 l6518 0E6C                                   l6470 0D7C  
                                 l6462 0D5A                                   l6382 0BC8  
                                 l6374 0BA6                                   l6294 0996  
                                 l4926 3EDA                                   l4950 3E64  
                                 l7166 089E                                   l7158 087C  
                                 l7086 072E                                   l7078 070C  
                                 l7422 27B2                                   _ADIE 007CEE  
                                 l6632 10A0                                   l6536 0ED6  
                                 l6456 0D3C                                   l6392 0BF0  
                                 l6384 0BCE                                   l6288 0986  
                                 l4928 3EEC                                   l5744 2EB2  
                                 l5728 2E70                                   l5736 2E92  
                                 l7424 27C6                                   l6626 1090  
                                 l6618 106E                                   l6562 0F5A  
                                 l6546 0EFE                                   l6482 0DC0  
                                 l6466 0D64                                   l6378 0BB0  
                                 l6298 09AE                                   l6802 325C  
                                 l5682 3128                                   l6716 34CA  
                                 l6708 33FE                                   l6652 10FE  
                                 l6644 10DC                                   l6636 10B8  
                                 l6628 1096                                   l6572 0F82  
                                 l6492 0DE8                                   l6388 0BD8  
                                 l7460 2C10                                   l6740 2FD2  
                                 l5852 333E                                   l5772 3A54  
                                 l5692 31B4                                   l6662 1126  
                                 l6654 1104                                   l6566 0F72  
                                 l6558 0F50                                   l6486 0DD8  
                                 l6478 0DB6                                   l6750 3002  
                                 l6734 2FBC                                   l6910 022C  
                                 l5862 3380                                   l5686 313E  
                                 l4984 3538                                   l4968 3F12  
                                 l6648 10E6                                   l6592 0FF6  
                                 l6584 0FD4                                   l6576 0F9A  
                                 l6568 0F78                                   l6496 0E00  
                                 l6488 0DDE                                   l7480 2C9A  
                                 l5856 3354                                   l7448 2846  
                                 l4986 3544                                   l6658 110E  
                                 l6594 0FFC                                   l7490 2CB8  
                                 l7482 2CA0                                   l6746 2FF0  
                                 l6762 3040                                   l6914 0236  
                                 l6850 0106                                   l7554 32A8  
                                 l4996 357A                                   l4988 354A  
                                 l6588 0FDE                                   l7484 2CA6  
                                 l6748 2FFC                                   l6932 0282  
                                 l6924 0260                                   l7556 32AE  
                                 l7572 32D8                                   l6598 1006  
                                 l7486 2CAC                                   l7478 2C94  
                                 l7494 2CBE                                   l6766 3054  
                                 l6758 3032                                   l6790 3216  
                                 l6782 31F0                                   l6950 02F2  
                                 l6918 024E                                   l6862 013A  
                                 l6854 0118                                   l7566 32CC  
                                 l7558 32B4                                   l7488 2CB2  
                                 l6960 0388                                   l6952 0310  
                                 l6928 026A                                   l6880 01A4  
                                 l6848 0100                                   l7568 32D2  
                                 l6794 323A                                   l6786 3204  
                                 l6778 31E0                                   l6970 041E  
                                 l6962 03A6                                   l6954 032E  
                                 l6890 01CC                                   l6882 01AA  
                                 l6866 014C                                   l6858 0122  
                                 l6788 3210                                   l6972 043C  
                                 l6964 03C4                                   l6956 034C  
                                 l6948 02D4                                   l6798 3248  
                                 l6990 0522                                   l6982 0500  
                                 l6966 03E2                                   l6958 036A  
                                 l6886 01B4                                   l6968 0400  
                                 l6976 045A                                   l6896 01DA  
                                 l6986 050A                                   l6978 04BE  
                                 l6996 0534                                   STR_1 FBF3  
                                 STR_2 FF44                                   STR_3 FBE1  
                                 STR_4 FE67                                   STR_5 FBE1  
                                 STR_6 FE25                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4210 3AA2  
                                 u4211 3A9E                                   u4220 3AA4  
                                 u3340 3E62                                   u3600 129A  
                                 u4250 198A                                   u4235 37DE  
                                 u3540 3AEE                                   u3541 3AEA  
                                 u3550 3AF0                                   u3607 1290  
                                 u3640 1312                                   u4600 2A06  
                                 _PEIE 007F96                                   u4630 2A60  
                                 u3647 1308                                   u7007 2570  
                                 u4800 09C2                                   u6400 288C  
                                 u4608 2A0A                                   u7017 25A2  
                                 u7107 099E                                   u7027 25E6  
                                 u4820 0A76                                   _RCEN 007E2B  
                                 u7117 09D2                                   u7037 3EE2  
                                 u4638 2A64                                   u7207 0C3C  
                                 u7127 0A38                                   u7047 2ED8  
                                 u4840 0B2A                                   u7217 0C64  
                                 u7137 0A54                                   u7057 2F1C  
                                 u7307 0EDE                                   u7227 0CC0  
                                 u7147 0A86                                   u7067 2F3E  
                                 u7317 0F06                                   u7237 0CE8  
                                 u7157 0AEC                                   u7077 08C8  
                                 u7407 1116                                   u7327 0F62  
                                 u7247 0D44                                   u7167 0B08  
                                 u7087 090C                                   u6607 3A30  
                                 u7417 3396                                   u7337 0F8A  
                                 u7257 0D6C                                   u7177 0B3A  
                                 u7097 092E                                   u6617 29EC  
                                 i2l66 4092                                   u7427 381C  
                                 u7347 0FE6                                   u7267 0DC8  
                                 u7187 0BB8                                   u6707 3B34  
                                 u6627 2A48                                   u7437 3704  
                                 u7357 100E                                   u7277 0DF0  
                                 u7197 0BE0                                   u6717 002A  
                                 u6637 2ADC                                   u7447 370E  
                                 u7367 1030                                   u7287 0E4C  
                                 u6807 0546                                   u6727 012A  
                                 u6647 2950                                   u7457 373A  
                                 u7377 1080                                   u7297 0E74  
                                 u6817 0570                                   u6737 0166  
                                 u6657 2984                                   u6577 2D1E  
                                 u7467 3744                                   u7387 10A8  
                                 u6907 0804                                   u6827 062E  
                                 u6747 01BC                                   u6667 2E26  
                                 u6587 2DD6                                   u7397 10EE  
                                 u6917 085A                                   u6837 0662  
                                 u6757 01E8                                   u6677 2E82  
                                 u6597 38AC                                   u6927 088E  
                                 u6847 068C                                   u6767 023E  
                                 u6687 2EBA                                   u6937 2C1E  
                                 u6857 06EA                                   u6777 0272  
                                 u6697 3B00                                   u6947 2C62  
                                 u6867 071E                                   u6787 029C  
                                 u6957 247A                                   u6877 0748  
                                 u6797 0512                                   u6967 24BE  
                                 u6887 07A6                                   u6977 24E0  
                                 u6897 07DA                                   u6987 250E  
                                 u6997 2552                                   _RSEN 007E29  
                          _stopSignals 4052                                   _Test 2C10  
                                 _back 005B                                   _main 3266  
                                 _down 0069                                   _keys FB4F  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3FD8                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 40D0  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1E5E  
                          i2_lcdNibble 391C                        __end_of_Loading 2DE6  
                 __end_of_actuatorTest 112E                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 2ECA                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 305E                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FB6A  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE36                                  STR_15 FFD2  
                                STR_23 FF36                                  STR_31 FE14  
                                STR_16 FFE2                                  STR_24 FD7B  
                                STR_32 FD59                                  STR_40 FD15  
                                STR_17 FFF2                                  STR_33 FD6A  
                                STR_41 FD04                                  STR_25 FBAA  
                                STR_18 FFF6                                  STR_34 FE03  
                                STR_50 FDE1                                  STR_42 FDBF  
                                STR_26 FD8C                                  STR_43 FDBF  
                                STR_35 FE03                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FB97  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD9D                                  STR_36 FD48  
                                STR_44 FD26                        __end_of___awmod 3266  
                                STR_45 FD15                                  STR_37 FD59  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FBA7                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FEEF  
                                STR_38 FDF2                                  STR_46 FDD0  
                                STR_47 FDD0                                  STR_55 FFFA  
                                STR_63 FB6A                                  STR_71 FF28  
                                STR_39 FDAE                                  STR_56 FFDE  
                                STR_64 FF8E                                  STR_80 FE77  
                                STR_48 FD37                                  STR_72 FCAF  
                                STR_49 FD26                                  STR_57 FFD6  
                                STR_65 FF5F                                  STR_73 FF0C  
                                STR_81 FEA4                                  STR_58 FFD2  
                                STR_90 FF83                                  STR_74 FF6C  
                                STR_82 FE47                                  STR_66 FB82  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_83 FF99                                  STR_75 FED1  
                                STR_91 FEC2                                  STR_84 FF28  
                                STR_76 FF1A                                  STR_68 FCC0  
                                STR_92 FC5A                                  STR_77 FFAD  
                                STR_85 FEE0                                  STR_69 FCF3  
                                STR_93 FC49                                  STR_78 FF28  
                                STR_86 FEFE                                  STR_94 FC27  
                                STR_79 FF52                                  STR_87 FCD1  
                                STR_95 FC7C                                  STR_88 FF78  
                                STR_96 FC8D                                  STR_89 FCE2  
                                STR_97 FC05                                  STR_98 FE57  
                                STR_99 FC38                                  ?_sort 0001  
                      __end_of___lldiv 311A                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 3592                        __end_of___lwmod 37AE  
                                i2l254 1E5A                                  i2l591 1EEC  
                                i2l831 26BE                                  i2l913 4076  
                                i2l835 270A                                  i2l837 272A  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 40C4                        __end_of_handler 2766  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 3EF2  
                      __end_of_initLCD 3B3E                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 3A12                        __end_of_loadRTC 3388  
                      __end_of_readMAG 3AAC                        __end_of_dpowers FB6A  
                                _first 00E2                                  _enter 006B  
                      __end_of_isdigit 3F1C                                  _input 007D  
                                _putch 40A4                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 3F6A  
                     __end_ofi2_getRTC 367A                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 18D4  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 3C8E                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 39C4                           __end_of_Test 2D00  
                   __size_ofi2_lcdInst 000C                           __end_of_main 32FC  
                         __end_of_keys FB60                           __end_of_sort 3FFA  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C4  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B6  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC16  
                               STR_101 FC38                                 STR_102 FEB3  
                               STR_103 FE95                                 STR_104 FE86  
                               STR_105 FBBD                                 STR_106 FBCF  
                               _ADRESH 000FC4                                 STR_107 FC6B  
                               STR_108 FC9E                                 _EEADRH 000FAA  
                               STR_109 FFB5                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 3CBE  
            i2_change_state_to_menu_22 3C8E                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1188 1740                                 i2l1635 39BA  
                               i2l1645 3B76                                 i2l6010 2410  
                               i2l6002 23EC                                 i2l5036 3F8A  
                               i2l5060 4032                                 i2l5070 3988  
                               i2l6014 2422                                 i2l6006 23FE  
                               i2l5072 3990                                 i2l6024 243E  
                               i2l5322 3640                                 i2l5082 39B0  
                               i2l5074 3994                                 i2l5090 3B4C  
                               i2l5402 16F4                                 i2l6018 2434  
                               i2l5332 366A                                 i2l5092 3B54  
                               i2l5420 176E                                 i2l5404 1706  
                               i2l5326 3650                                 i2l5094 3B58  
                               i2l5350 1570                                 i2l5424 1786  
                               i2l5408 170A                                 i2l5360 1594  
                               i2l5098 3B6C                                 i2l5450 1802  
                               i2l5426 178A                                 i2l5354 1580  
                               i2l7210 1C1A                                 i2l7202 1C0C  
                               i2l5444 17D6                                 i2l5356 158E  
                               i2l5462 182E                                 i2l5438 17BC  
                               i2l5382 1650                                 i2l5374 1628  
                               i2l5366 15C6                                 i2l7310 1DA2  
                               i2l7302 1D7E                                 i2l7230 1C62  
                               i2l7222 1C46                                 i2l7214 1C28  
                               i2l5464 1836                                 i2l5472 185C  
                               i2l5456 1818                                 i2l5448 17FA  
                               i2l5392 16A8                                 i2l5384 165A  
                               i2l5480 18B8                                 i2l5474 1862  
                               i2l5394 16B2                                 i2l5386 165E  
                               i2l5810 1EF6                                 i2l7322 1DCC  
                               i2l7314 1DB0                                 i2l7306 1D8C  
                               i2l7250 1CB0                                 i2l7242 1C8C  
                               i2l7234 1C70                                 i2l7226 1C54  
                               i2l7218 1C36                                 i2l5468 184A  
                               i2l5396 16B8                                 i2l5484 3C66  
                               i2l5820 1F64                                 i2l5812 1F0C  
                               i2l5804 1E8A                                 i2l7332 1DF0  
                               i2l5478 18B0                                 i2l5398 16CA  
                               i2l5662 2BB4                                 i2l5486 3C6E  
                               i2l5830 1FD2                                 i2l5822 1F7A  
                               i2l5814 1F22                                 i2l7326 1DE2  
                               i2l7318 1DBE                                 i2l7270 1CFE  
                               i2l7262 1CE2                                 i2l7254 1CBE  
                               i2l7246 1CA2                                 i2l7238 1C7E  
                               i2l7190 1BE2                                 i2l7504 20A0  
                               i2l5832 1FE8                                 i2l5824 1F90  
                               i2l5816 1F38                                 i2l7184 1BCE  
                               i2l7514 210A                                 i2l5674 2BF8  
                               i2l5666 2BC4                                 i2l5930 22F6  
                               i2l5914 22BE                                 i2l5906 22A4  
                               i2l5826 1FA6                                 i2l5818 1F4E  
                               i2l7290 1D4C                                 i2l7282 1D30  
                               i2l7274 1D0C                                 i2l7266 1CF0  
                               i2l7258 1CCC                                 i2l7194 1BF0  
                               i2l7186 1BD4                                 i2l7602 2692  
                               i2l7524 21CC                                 i2l7508 20B0  
                               i2l5932 22FC                                 i2l5916 22CE  
                               i2l5924 22DC                                 i2l5828 1FBC  
                               i2l5836 1FFE                                 i2l5934 2302  
                               i2l5942 2314                                 i2l5918 22D2  
                               i2l5838 2058                                 i2l7294 1D62  
                               i2l7286 1D3E                                 i2l7278 1D22  
                               i2l7198 1BFE                                 i2l5936 2308  
                               i2l5928 22F0                                 i2l7624 26DC  
                               i2l5962 2370                                 i2l5954 2358  
                               i2l5938 230E                                 i2l7298 1D70  
                               i2l7626 26DE                                 i2l5972 239A  
                               i2l5982 23B8                                 i2l5984 23BC  
                               i2l5968 237E                                 i2l7920 232C  
                               i2l7912 1E0E                                 i2l7648 2728  
                               i2l5978 23A4                                 i2l7922 2348  
                               i2l7914 1E30                                 i2l7586 2672  
                               i2l5996 23DE                                 i2l5988 23C6  
                               i2l7916 1E4C                                 i2l7588 2676  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 3FD8  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 29D6                                 ___wmul 3C26  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3410                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 401C  
                               _initUI 3F90                                 _readIR 3AAC  
                               _logRun 2766                                 clear_0 39EA  
                               clear_1 39F6                                 clear_2 3A02  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 380E                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 112E  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 3BF0  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 3F44  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 3F1C                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 39C4                       __end_of_printRTC 1B9E  
                         __mediumconst FB4E                      __end_ofi2___lwmod 3B80  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 2FA0                      __end_ofi2_lcdInst 40DC  
                    __end_ofi2_isdigit 403A                             __accesstop 0080  
              __end_of__initialization 3A08                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 0876                          i2_EEPROM_read 4068  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 411A                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 40F0  
                        __end_of_getIR 3A60                            i2printRTC@i 0041  
                        _initSortTimer 311A            __end_of_updateServoPosition 3608  
                        __end_of_putch 40B4                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 2AF6  
                           __end_of_UI 08B8                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 3EC6  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 3E9A  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08B8  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 2DE6                                UI@F3220 012D  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      __end_of_PortTests 351A  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2213 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 40C4  
                            ?_initTime 0080                        _f_loadingNewCan 00E0  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 374C  
                              _Loading 2D00            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 2FA0                                ___awmod 31C4  
                           _initServos 386A                                ___lldiv 305E  
                      __size_of___wmul 0036                                ___lwdiv 351A  
                              ___lwmod 374C                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 39C4                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 367A  
                              _lcdInst 40B4                                _handler 0008  
                              __ptext0 3266                                __ptext1 4052  
                              __ptext2 3FD8                                __ptext3 2D00  
                              __ptext4 311A                                __ptext5 386A  
                              __ptext6 367A                                __ptext7 3A12  
                              __ptext8 29D6                                __ptext9 28A2  
                      __size_of_printf 0438                                _readADC 3EC6  
                      __size_of_strcpy 0036                                _initLCD 3AF8  
                              _cur_can 0065                                _loadRTC 32FC  
                              _readMAG 3A60                                _dpowers FB60  
                   actuatorTest@i_1570 00B1                     actuatorTest@i_1572 00B2  
                   actuatorTest@i_1581 00B8                     actuatorTest@i_1573 00B3  
                   actuatorTest@i_1582 00B9                     actuatorTest@i_1566 00AE  
                   actuatorTest@i_1591 00BE                     actuatorTest@i_1575 00B4  
                   actuatorTest@i_1567 00AF                     actuatorTest@i_1592 00BF  
                   actuatorTest@i_1576 00B5                     actuatorTest@i_1585 00BA  
                   actuatorTest@i_1569 00B0                     actuatorTest@i_1586 00BB  
                   actuatorTest@i_1578 00B6                     actuatorTest@i_1595 00C0  
                   actuatorTest@i_1579 00B7                     actuatorTest@i_1596 00C1  
                   actuatorTest@i_1588 00BC                     actuatorTest@i_1589 00BD  
                   actuatorTest@i_1598 00C2                     actuatorTest@i_1599 00C3  
                              _isdigit 3EF2                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 28A2  
                       __pintcode_body 25F8                   end_of_initialization 3A08  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 25F8  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 36E4                             _sensorTest 246C  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 246C  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 391C  
                           _updateMenu 1B9E                      i2_I2C_Master_Read 3F6A  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4092  
                    i2_I2C_Master_Stop 4108                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3972  
                            i2___lwmod 3B3E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2094                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00AD           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 40D0                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 401C  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 4052  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3C5C                         __end_of_getRTC 3496  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 3FB4  
                       __end_of_readIR 3AF8                         __end_of_logRun 28A2  
                     i2___wmul@product 0005                         __end_of_printf 1566  
                         i2printf@flag 0026                         __end_of_strcpy 3C26  
            __end_ofi2_I2C_Master_Read 3F90              __end_ofi2_I2C_Master_Wait 40A4  
                         i2printf@prec 001D                    start_initialization 39C4  
            __end_ofi2_I2C_Master_Stop 4110                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1310 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3496  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2333 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1860 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 403A                     __end_of_PortTestA5 386A  
                     _I2C_Master_Start 4100                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 40DC                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 3410                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB4E                              _lcdNibble 36E4  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 2ECA                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0120                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 018C  
           __end_ofi2_I2C_Master_Start 4118             __end_ofi2_I2C_Master_Write 40F0  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2286                            ??i2_isdigit 0001  
                             i2u401_40 16EC                               i2u401_47 16E2  
                             i2u344_40 3F88                               i2u440_40 1EEC  
                             _PIR2bits 000FA1                               i2u397_40 168C  
                             i2u645_40 21C6                               i2u397_47 1682  
                             i2u750_47 3960                               i2u751_47 396A  
                             i2u747_47 22C4                               i2u748_47 3934  
                             i2u749_47 393E                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 3F44  
                        lcdNibble@data 0081                               i2_getRTC 3608  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 1566  
                             i2_strcpy 3C5C                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 39D8  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 407E  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 00E6  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                  __end_of_initSortTimer 31C4  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 3D1E             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3BB8             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3B80                _change_state_to_menu_23 3CEE  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 3E0E  
              _change_state_to_logs_12 3DDE                _change_state_to_logs_22 3DAE  
              _change_state_to_logs_23 3E6C                _change_state_to_logs_33 3D7E  
              _change_state_to_logs_34 3D4E                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 275E  
                           _EEPROMTest 4118                        _I2C_Master_Init 37AE  
                     __size_of_readADC 002C                        _I2C_Master_Read 3E3E  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 407E                        _I2C_Master_Stop 40F8  
                     __size_of_isdigit 002A                         _printSortTimer 2094  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 2C10                               __ptext10 38C4  
                             __ptext11 2766                               __ptext20 3AF8  
                             __ptext12 2DE6                               __ptext21 0012  
                             __ptext13 403A                               __ptext30 3B80  
                             __ptext22 18D4                               __ptext14 3F90  
                             __ptext31 3BB8                               __ptext23 3BF0  
                             __ptext15 32FC                               __ptext40 08B8  
                             __ptext32 31C4                               __ptext24 3410  
                             __ptext16 37AE                               __ptext41 3592  
                             __ptext33 2FA0                               __ptext25 40DC  
                             __ptext17 305E                               __ptext50 351A  
                             __ptext42 3388                               __ptext34 2C10  
                             __ptext26 40F8                               __ptext18 3E9A  
                             __ptext51 40B4                               __ptext43 3496  
                             __ptext35 246C                               __ptext27 4100  
                             __ptext19 3FFA                               __ptext60 3C8E  
                             __ptext52 36E4                               __ptext44 380E  
                             __ptext36 3A60                               __ptext28 3E3E  
                             __ptext61 3CBE                               __ptext53 4118  
                             __ptext45 112E                               __ptext37 3AAC  
                             __ptext29 407E                               __ptext70 3FB4  
                             __ptext62 3CEE                               __ptext46 40A4  
                             __ptext38 3EC6                               __ptext71 2AF6  
                             __ptext63 3D1E                               __ptext55 1B9E  
                             __ptext47 3EF2                               __ptext39 2ECA  
                             __ptext80 40D0                               __ptext72 4068  
                             __ptext64 3D4E                               __ptext56 3F1C  
                             __ptext48 3C26                               __ptext81 391C  
                             __ptext73 2094                               __ptext65 3D7E  
                             __ptext57 1E5E                               __ptext49 374C  
                             __ptext82 3608                               __ptext74 1566  
                             __ptext66 3E6C                               __ptext58 3C5C  
                             __ptext83 40E6                               __ptext75 40C4  
                             __ptext67 3DAE                               __ptext59 2286  
                             __ptext84 4108                               __ptext76 401C  
                             __ptext68 3DDE                               __ptext85 4110  
                             __ptext77 3F44                               __ptext69 3E0E  
                             __ptext86 3F6A                               __ptext78 3B3E  
                             __ptext87 4092                               __ptext79 3972  
                             _dispLogs 3FB4                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1860 0002  
                   __end_of_initServos 38C4                          __size_of_Test 00F0  
                        ?_EEPROM_write 00AB                               _initTime 3FFA  
                        __size_of_main 0096                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3592                 __size_of_machineConfig 0058  
                        ??i2_lcdNibble 0001                               _printRTC 18D4  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 3CEE      __end_ofi2_change_state_to_menu_22 3CBE  
                             loadRTC@i 0096                 __end_of_printSortTimer 2286  
                            putch@data 0082               __end_of_I2C_Master_Start 4108  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 40E6  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 3388                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 25F8                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4068              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 1E5E  
              __end_of_I2C_Master_Init 380E                __end_of_I2C_Master_Read 3E6C  
              __end_of_I2C_Master_Wait 4092                __end_of_I2C_Master_Stop 4100  
                        printRTC@F3211 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 2AF6  
                  __end_ofi2_lcdNibble 3972                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 38C4                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
