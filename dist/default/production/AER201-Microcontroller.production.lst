

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Mar 24 22:20:47 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004974                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3225
   152  004974  4D                 	db	77
   153  004975  4D                 	db	77
   154  004976  4D                 	db	77
   155  004977  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3216
   158  004978  4D                 	db	77
   159  004979  4D                 	db	77
   160  00497A  4D                 	db	77
   161  00497B  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  004232                     __pcinit:
  1614                           	opt stack 0
  1615  004232                     start_initialization:
  1616                           	opt stack 0
  1617  004232                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  004232  0E74               	movlw	low __pidataBANK1
  1623  004234  6EF6               	movwf	tblptrl,c
  1624  004236  0E49               	movlw	high __pidataBANK1
  1625  004238  6EF7               	movwf	tblptrh,c
  1626  00423A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  00423C  6EF8               	movwf	tblptru,c
  1628  00423E  EE01  F02F         	lfsr	0,__pdataBANK1
  1629  004242  EE10 F008          	lfsr	1,8
  1630  004246                     copy_data0:
  1631  004246  0009               	tblrd		*+
  1632  004248  CFF5 FFEE          	movff	tablat,postinc0
  1633  00424C  50E5               	movf	postdec1,w,c
  1634  00424E  50E1               	movf	fsr1l,w,c
  1635  004250  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (47 bytes)
  1638  004252  EE01  F000         	lfsr	0,__pbssBANK1
  1639  004256  0E2F               	movlw	47
  1640  004258                     clear_0:
  1641  004258  6AEE               	clrf	postinc0,c
  1642  00425A  06E8               	decf	wreg,f,c
  1643  00425C  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  00425E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  004262  0E26               	movlw	38
  1648  004264                     clear_1:
  1649  004264  6AEE               	clrf	postinc0,c
  1650  004266  06E8               	decf	wreg,f,c
  1651  004268  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  00426A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  00426E  0E23               	movlw	35
  1656  004270                     clear_2:
  1657  004270  6AEE               	clrf	postinc0,c
  1658  004272  06E8               	decf	wreg,f,c
  1659  004274  E1FD               	bnz	clear_2
  1660  004276                     end_of_initialization:
  1661                           	opt stack 0
  1662  004276                     __end_of__initialization:
  1663                           	opt stack 0
  1664  004276  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  004278  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  00427A  0100               	movlb	0
  1667  00427C  EF88  F01B         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_can_no_lab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_can_w_lab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _count_pop_no_tab:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _count_pop_w_tab:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _cur_can:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _debug:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _down:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _enter:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _f_ID_receive:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _f_can_coming_to_ID:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _f_can_coming_to_distribution:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _f_lastCan:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _firstboot:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _IR_signal:
  1747                           	opt stack 0
  1748  0000DA                     	ds	2
  1749  0000DC                     _MAG_signal:
  1750                           	opt stack 0
  1751  0000DC                     	ds	2
  1752  0000DE                     _RTCflag:
  1753                           	opt stack 0
  1754  0000DE                     	ds	2
  1755  0000E0                     _cur_state:
  1756                           	opt stack 0
  1757  0000E0                     	ds	2
  1758  0000E2                     _f_loadingNewCan:
  1759                           	opt stack 0
  1760  0000E2                     	ds	2
  1761  0000E4                     _first:
  1762                           	opt stack 0
  1763  0000E4                     	ds	2
  1764  0000E6                     _log:
  1765                           	opt stack 0
  1766  0000E6                     	ds	2
  1767  0000E8                     _log_completion:
  1768                           	opt stack 0
  1769  0000E8                     	ds	2
  1770  0000EA                     _log_count_can_no_lab:
  1771                           	opt stack 0
  1772  0000EA                     	ds	2
  1773  0000EC                     _log_count_can_w_lab:
  1774                           	opt stack 0
  1775  0000EC                     	ds	2
  1776  0000EE                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000EE                     	ds	2
  1779  0000F0                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F0                     	ds	2
  1782  0000F2                     _log_count_total:
  1783                           	opt stack 0
  1784  0000F2                     	ds	2
  1785  0000F4                     _log_total_time:
  1786                           	opt stack 0
  1787  0000F4                     	ds	2
  1788  0000F6                     _logstate:
  1789                           	opt stack 0
  1790  0000F6                     	ds	2
  1791  0000F8                     _total_time:
  1792                           	opt stack 0
  1793  0000F8                     	ds	2
  1794  0000FA                     _var:
  1795                           	opt stack 0
  1796  0000FA                     	ds	2
  1797  0000FC                     _machine_state:
  1798                           	opt stack 0
  1799  0000FC                     	ds	1
  1800  0000FD                     _sel:
  1801                           	opt stack 0
  1802  0000FD                     	ds	1
  1803  0000FE                     _count_total:
  1804                           	opt stack 0
  1805  0000FE                     	ds	2
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssBANK1
  1816  000100                     __pbssBANK1:
  1817                           	opt stack 0
  1818  000100                     _log_startTime:
  1819                           	opt stack 0
  1820  000100                     	ds	14
  1821  00010E                     _startTime:
  1822                           	opt stack 0
  1823  00010E                     	ds	14
  1824  00011C                     _servoTimes:
  1825                           	opt stack 0
  1826  00011C                     	ds	8
  1827  000124                     _time:
  1828                           	opt stack 0
  1829  000124                     	ds	7
  1830  00012B                     _f_can_distributed:
  1831                           	opt stack 0
  1832  00012B                     	ds	2
  1833  00012D                     _i:
  1834                           	opt stack 0
  1835  00012D                     	ds	2
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1l	equ	0xFE1
  1844                           
  1845                           	psect	dataBANK1
  1846  00012F                     __pdataBANK1:
  1847                           	opt stack 0
  1848  00012F                     UI@F3225:
  1849                           	opt stack 0
  1850  00012F                     	ds	4
  1851  000133                     printRTC@F3216:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           
  1863                           	psect	cstackBANK0
  1864  000080                     __pcstackBANK0:
  1865                           	opt stack 0
  1866  000080                     ??_delay_ms:
  1867  000080                     ??_PortTests:
  1868  000080                     ??_isdigit:
  1869  000080                     ??_readADC:
  1870  000080                     ??_I2C_Master_Wait:
  1871  000080                     ?___wmul:
  1872                           	opt stack 0
  1873  000080                     ?___awmod:
  1874                           	opt stack 0
  1875  000080                     ?___lwdiv:
  1876                           	opt stack 0
  1877  000080                     ?___lldiv:
  1878                           	opt stack 0
  1879  000080                     lcdNibble@temp:
  1880                           	opt stack 0
  1881  000080                     initTime@m:
  1882                           	opt stack 0
  1883  000080                     updateServoPosition@time_us:
  1884                           	opt stack 0
  1885  000080                     EEPROM_read@address:
  1886                           	opt stack 0
  1887  000080                     ___wmul@multiplier:
  1888                           	opt stack 0
  1889  000080                     ___awmod@dividend:
  1890                           	opt stack 0
  1891  000080                     ___lwdiv@dividend:
  1892                           	opt stack 0
  1893  000080                     strcpy@to:
  1894                           	opt stack 0
  1895  000080                     ___lldiv@dividend:
  1896                           	opt stack 0
  1897                           
  1898                           ; 4 bytes @ 0x0
  1899  000080                     	ds	1
  1900  000081                     readADC@channel:
  1901                           	opt stack 0
  1902  000081                     I2C_Master_Read@a:
  1903                           	opt stack 0
  1904  000081                     lcdNibble@data:
  1905                           	opt stack 0
  1906  000081                     initTime@h:
  1907                           	opt stack 0
  1908  000081                     delay_ms@milliseconds:
  1909                           	opt stack 0
  1910  000081                     _isdigit$1957:
  1911                           	opt stack 0
  1912  000081                     I2C_Master_Write@d:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x1
  1916  000081                     	ds	1
  1917  000082                     ??_readIR:
  1918  000082                     ??_readMAG:
  1919  000082                     I2C_Master_Read@temp:
  1920                           	opt stack 0
  1921  000082                     lcdInst@data:
  1922                           	opt stack 0
  1923  000082                     putch@data:
  1924                           	opt stack 0
  1925  000082                     initTime@w:
  1926                           	opt stack 0
  1927  000082                     isdigit@c:
  1928                           	opt stack 0
  1929  000082                     updateServoPosition@timer:
  1930                           	opt stack 0
  1931  000082                     ___wmul@multiplicand:
  1932                           	opt stack 0
  1933  000082                     ___awmod@divisor:
  1934                           	opt stack 0
  1935  000082                     ___lwdiv@divisor:
  1936                           	opt stack 0
  1937  000082                     strcpy@from:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x2
  1941  000082                     	ds	1
  1942  000083                     ??_initLCD:
  1943  000083                     initTime@DD:
  1944                           	opt stack 0
  1945  000083                     getRTC@i:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x3
  1949  000083                     	ds	1
  1950  000084                     ??_updateServoPosition:
  1951  000084                     initTime@MM:
  1952                           	opt stack 0
  1953  000084                     ___awmod@counter:
  1954                           	opt stack 0
  1955  000084                     readIR@res:
  1956                           	opt stack 0
  1957  000084                     readMAG@res:
  1958                           	opt stack 0
  1959  000084                     ___wmul@product:
  1960                           	opt stack 0
  1961  000084                     ___lwdiv@quotient:
  1962                           	opt stack 0
  1963  000084                     strcpy@cp:
  1964                           	opt stack 0
  1965  000084                     ___lldiv@divisor:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x4
  1969  000084                     	ds	1
  1970  000085                     ??_initSortTimer:
  1971  000085                     initTime@YY:
  1972                           	opt stack 0
  1973  000085                     ___awmod@sign:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0x5
  1977  000085                     	ds	1
  1978  000086                     ??_getIR:
  1979  000086                     ??_getMAG:
  1980  000086                     ?___awdiv:
  1981                           	opt stack 0
  1982  000086                     initTime@s:
  1983                           	opt stack 0
  1984  000086                     ___lwdiv@counter:
  1985                           	opt stack 0
  1986  000086                     updateServoPosition@my_time:
  1987                           	opt stack 0
  1988  000086                     ___awdiv@dividend:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x6
  1992  000086                     	ds	1
  1993  000087                     ?___lwmod:
  1994                           	opt stack 0
  1995  000087                     ___lwmod@dividend:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x7
  1999  000087                     	ds	1
  2000  000088                     ??_ID:
  2001  000088                     ??_Distribution:
  2002  000088                     ??_initServos:
  2003  000088                     initSortTimer@i:
  2004                           	opt stack 0
  2005  000088                     ___awdiv@divisor:
  2006                           	opt stack 0
  2007  000088                     ___lldiv@quotient:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x8
  2011  000088                     	ds	1
  2012  000089                     ___lwmod@divisor:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x9
  2016  000089                     	ds	1
  2017  00008A                     ___awdiv@counter:
  2018                           	opt stack 0
  2019  00008A                     ID@i:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0xA
  2023  00008A                     	ds	1
  2024  00008B                     ___awdiv@sign:
  2025                           	opt stack 0
  2026  00008B                     ___lwmod@counter:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0xB
  2030  00008B                     	ds	1
  2031  00008C                     ___lldiv@counter:
  2032                           	opt stack 0
  2033  00008C                     ___awdiv@quotient:
  2034                           	opt stack 0
  2035  00008C                     ID@sensor_outputs:
  2036                           	opt stack 0
  2037                           
  2038                           ; 6 bytes @ 0xC
  2039  00008C                     	ds	1
  2040  00008D                     I2C_Master_Init@c:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0xD
  2044  00008D                     	ds	1
  2045  00008E                     ?_printf:
  2046                           	opt stack 0
  2047  00008E                     printf@f:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0xE
  2051  00008E                     	ds	3
  2052  000091                     ??_I2C_Master_Init:
  2053                           
  2054                           ; 1 bytes @ 0x11
  2055  000091                     	ds	4
  2056  000095                     ??_loadRTC:
  2057                           
  2058                           ; 1 bytes @ 0x15
  2059  000095                     	ds	1
  2060  000096                     loadRTC@i:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x16
  2064  000096                     	ds	4
  2065  00009A                     ??_printf:
  2066                           
  2067                           ; 1 bytes @ 0x1A
  2068  00009A                     	ds	4
  2069  00009E                     printf@prec:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x1E
  2073  00009E                     	ds	1
  2074  00009F                     printf@cp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x1F
  2078  00009F                     	ds	2
  2079  0000A1                     printf@ap:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x21
  2083  0000A1                     	ds	2
  2084  0000A3                     printf@len:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x23
  2088  0000A3                     	ds	2
  2089  0000A5                     printf@val:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x25
  2093  0000A5                     	ds	2
  2094  0000A7                     printf@flag:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x27
  2098  0000A7                     	ds	1
  2099  0000A8                     printf@c:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x28
  2103  0000A8                     	ds	1
  2104  0000A9                     printf@width:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x29
  2108  0000A9                     	ds	2
  2109  0000AB                     ??_printRTC:
  2110  0000AB                     ??_algorithmTest:
  2111  0000AB                     ??_sensorTest:
  2112  0000AB                     ??_actuatorTest:
  2113  0000AB                     ??_PortTestA5:
  2114  0000AB                     ??_SpeedTest:
  2115  0000AB                     ??_PusherTest:
  2116  0000AB                     ??_BothServos:
  2117  0000AB                     ??_BlockerTest:
  2118  0000AB                     EEPROM_write@address:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x2B
  2122  0000AB                     	ds	1
  2123  0000AC                     PusherTest@i:
  2124                           	opt stack 0
  2125  0000AC                     BlockerTest@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x2C
  2129  0000AC                     	ds	1
  2130  0000AD                     EEPROM_write@data:
  2131                           	opt stack 0
  2132  0000AD                     actuatorTest@i_1643:
  2133                           	opt stack 0
  2134  0000AD                     sensorTest@res:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x2D
  2138  0000AD                     	ds	1
  2139  0000AE                     ??_EEPROM_write:
  2140  0000AE                     actuatorTest@i_1650:
  2141                           	opt stack 0
  2142  0000AE                     BlockerTest@flag:
  2143                           	opt stack 0
  2144  0000AE                     printRTC@INT_time:
  2145                           	opt stack 0
  2146                           
  2147                           ; 14 bytes @ 0x2E
  2148  0000AE                     	ds	1
  2149  0000AF                     EEPROM_write@i:
  2150                           	opt stack 0
  2151  0000AF                     actuatorTest@i_1651:
  2152                           	opt stack 0
  2153                           
  2154                           ; 1 bytes @ 0x2F
  2155  0000AF                     	ds	1
  2156  0000B0                     EEPROM_write@i_1329:
  2157                           	opt stack 0
  2158  0000B0                     actuatorTest@i_1653:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x30
  2162  0000B0                     	ds	1
  2163  0000B1                     ??_Loading:
  2164  0000B1                     logRun@num:
  2165                           	opt stack 0
  2166  0000B1                     actuatorTest@i_1654:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x31
  2170  0000B1                     	ds	1
  2171  0000B2                     logRun@byte1:
  2172                           	opt stack 0
  2173  0000B2                     actuatorTest@i_1656:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x32
  2177  0000B2                     	ds	1
  2178  0000B3                     logRun@byte2:
  2179                           	opt stack 0
  2180  0000B3                     actuatorTest@i_1657:
  2181                           	opt stack 0
  2182  0000B3                     Loading@addr:
  2183                           	opt stack 0
  2184                           
  2185                           ; 2 bytes @ 0x33
  2186  0000B3                     	ds	1
  2187  0000B4                     logRun@byte3:
  2188                           	opt stack 0
  2189  0000B4                     actuatorTest@i_1659:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x34
  2193  0000B4                     	ds	1
  2194  0000B5                     Loading@byte1:
  2195                           	opt stack 0
  2196  0000B5                     logRun@byte_i:
  2197                           	opt stack 0
  2198  0000B5                     actuatorTest@i_1660:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x35
  2202  0000B5                     	ds	1
  2203  0000B6                     logRun@byte11:
  2204                           	opt stack 0
  2205  0000B6                     actuatorTest@i_1662:
  2206                           	opt stack 0
  2207  0000B6                     Loading@i_1098:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x36
  2211  0000B6                     	ds	1
  2212  0000B7                     actuatorTest@i_1663:
  2213                           	opt stack 0
  2214  0000B7                     logRun@i:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x37
  2218  0000B7                     	ds	1
  2219  0000B8                     actuatorTest@i_1665:
  2220                           	opt stack 0
  2221  0000B8                     Loading@i:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x38
  2225  0000B8                     	ds	1
  2226  0000B9                     actuatorTest@i_1666:
  2227                           	opt stack 0
  2228  0000B9                     logRun@addr:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x39
  2232  0000B9                     	ds	1
  2233  0000BA                     actuatorTest@i_1669:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x3A
  2237  0000BA                     	ds	1
  2238  0000BB                     actuatorTest@i_1670:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x3B
  2242  0000BB                     	ds	1
  2243  0000BC                     actuatorTest@i_1672:
  2244                           	opt stack 0
  2245  0000BC                     printRTC@RTC_month:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x3C
  2249  0000BC                     	ds	1
  2250  0000BD                     actuatorTest@i_1673:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x3D
  2254  0000BD                     	ds	1
  2255  0000BE                     actuatorTest@i_1675:
  2256                           	opt stack 0
  2257  0000BE                     printRTC@month:
  2258                           	opt stack 0
  2259                           
  2260                           ; 4 bytes @ 0x3E
  2261  0000BE                     	ds	1
  2262  0000BF                     actuatorTest@i_1676:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x3F
  2266  0000BF                     	ds	1
  2267  0000C0                     actuatorTest@i_1679:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x40
  2271  0000C0                     	ds	1
  2272  0000C1                     actuatorTest@i_1680:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x41
  2276  0000C1                     	ds	1
  2277  0000C2                     actuatorTest@i_1682:
  2278                           	opt stack 0
  2279  0000C2                     printRTC@i:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x42
  2283  0000C2                     	ds	1
  2284  0000C3                     actuatorTest@i_1683:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x43
  2288  0000C3                     	ds	1
  2289  0000C4                     ??_UI:
  2290  0000C4                     actuatorTest@i:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x44
  2294  0000C4                     	ds	2
  2295  0000C6                     ??_Test:
  2296  0000C6                     _UI$2313:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x46
  2300  0000C6                     	ds	2
  2301  0000C8                     UI@i:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x48
  2305  0000C8                     	ds	1
  2306  0000C9                     UI@i_409:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x49
  2310  0000C9                     	ds	1
  2311  0000CA                     UI@i_412:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x4A
  2315  0000CA                     	ds	1
  2316  0000CB                     UI@i_413:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x4B
  2320  0000CB                     	ds	1
  2321  0000CC                     UI@i_431:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x4C
  2325  0000CC                     	ds	1
  2326  0000CD                     UI@i_432:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x4D
  2330  0000CD                     	ds	1
  2331  0000CE                     UI@i_435:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x4E
  2335  0000CE                     	ds	1
  2336  0000CF                     UI@i_436:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x4F
  2340  0000CF                     	ds	1
  2341  0000D0                     UI@i_439:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x50
  2345  0000D0                     	ds	1
  2346  0000D1                     UI@i_440:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x51
  2350  0000D1                     	ds	1
  2351  0000D2                     UI@i_443:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x52
  2355  0000D2                     	ds	1
  2356  0000D3                     UI@i_444:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x53
  2360  0000D3                     	ds	1
  2361  0000D4                     UI@i_447:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x54
  2365  0000D4                     	ds	1
  2366  0000D5                     UI@i_448:
  2367                           	opt stack 0
  2368                           
  2369                           ; 1 bytes @ 0x55
  2370  0000D5                     	ds	1
  2371  0000D6                     UI@month:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0x56
  2375  0000D6                     	ds	4
  2376  0000DA                     tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           
  2385                           ; 1 bytes @ 0x5A
  2386                           
  2387                           	psect	cstackCOMRAM
  2388  000001                     __pcstackCOMRAM:
  2389                           	opt stack 0
  2390  000001                     ??i2_I2C_Master_Wait:
  2391  000001                     ??i2_isdigit:
  2392  000001                     ?i2___wmul:
  2393                           	opt stack 0
  2394  000001                     ?i2___lwmod:
  2395                           	opt stack 0
  2396  000001                     i2lcdNibble@temp:
  2397                           	opt stack 0
  2398  000001                     i2EEPROM_read@address:
  2399                           	opt stack 0
  2400  000001                     i2___wmul@multiplier:
  2401                           	opt stack 0
  2402  000001                     i2___lwmod@dividend:
  2403                           	opt stack 0
  2404  000001                     i2strcpy@to:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x0
  2408  000001                     	ds	1
  2409  000002                     i2I2C_Master_Read@a:
  2410                           	opt stack 0
  2411  000002                     i2lcdNibble@data:
  2412                           	opt stack 0
  2413  000002                     i2_isdigit$1957:
  2414                           	opt stack 0
  2415  000002                     i2I2C_Master_Write@d:
  2416                           	opt stack 0
  2417                           
  2418                           ; 2 bytes @ 0x1
  2419  000002                     	ds	1
  2420  000003                     i2I2C_Master_Read@temp:
  2421                           	opt stack 0
  2422  000003                     i2lcdInst@data:
  2423                           	opt stack 0
  2424  000003                     i2putch@data:
  2425                           	opt stack 0
  2426  000003                     i2isdigit@c:
  2427                           	opt stack 0
  2428  000003                     i2___wmul@multiplicand:
  2429                           	opt stack 0
  2430  000003                     i2___lwmod@divisor:
  2431                           	opt stack 0
  2432  000003                     i2strcpy@from:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x2
  2436  000003                     	ds	1
  2437  000004                     i2getRTC@i:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x3
  2441  000004                     	ds	1
  2442  000005                     i2___lwmod@counter:
  2443                           	opt stack 0
  2444  000005                     i2___wmul@product:
  2445                           	opt stack 0
  2446  000005                     i2strcpy@cp:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x4
  2450  000005                     	ds	1
  2451  000006                     ?i2___lwdiv:
  2452                           	opt stack 0
  2453  000006                     i2___lwdiv@dividend:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x5
  2457  000006                     	ds	1
  2458  000007                     retrieveLog@logNum:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x6
  2462  000007                     	ds	1
  2463  000008                     i2___lwdiv@divisor:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x7
  2467  000008                     	ds	1
  2468  000009                     ??_retrieveLog:
  2469                           
  2470                           ; 1 bytes @ 0x8
  2471  000009                     	ds	1
  2472  00000A                     i2___lwdiv@quotient:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x9
  2476  00000A                     	ds	1
  2477  00000B                     retrieveLog@byte1:
  2478                           	opt stack 0
  2479                           
  2480                           ; 1 bytes @ 0xA
  2481  00000B                     	ds	1
  2482  00000C                     retrieveLog@byte2:
  2483                           	opt stack 0
  2484  00000C                     i2___lwdiv@counter:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0xB
  2488  00000C                     	ds	1
  2489  00000D                     ?i2_printf:
  2490                           	opt stack 0
  2491  00000D                     retrieveLog@byte3:
  2492                           	opt stack 0
  2493  00000D                     i2printf@f:
  2494                           	opt stack 0
  2495                           
  2496                           ; 2 bytes @ 0xC
  2497  00000D                     	ds	1
  2498  00000E                     retrieveLog@i:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0xD
  2502  00000E                     	ds	2
  2503  000010                     retrieveLog@addr:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0xF
  2507  000010                     	ds	2
  2508  000012                     dispLogs@myLog:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x11
  2512  000012                     	ds	2
  2513  000014                     
  2514                           ; 1 bytes @ 0x13
  2515  000014                     	ds	5
  2516  000019                     ??i2_printf:
  2517                           
  2518                           ; 1 bytes @ 0x18
  2519  000019                     	ds	4
  2520  00001D                     i2printf@prec:
  2521                           	opt stack 0
  2522                           
  2523                           ; 1 bytes @ 0x1C
  2524  00001D                     	ds	1
  2525  00001E                     i2printf@cp:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x1D
  2529  00001E                     	ds	2
  2530  000020                     i2printf@ap:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1F
  2534  000020                     	ds	2
  2535  000022                     i2printf@len:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x21
  2539  000022                     	ds	2
  2540  000024                     i2printf@val:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x23
  2544  000024                     	ds	2
  2545  000026                     i2printf@flag:
  2546                           	opt stack 0
  2547                           
  2548                           ; 1 bytes @ 0x25
  2549  000026                     	ds	1
  2550  000027                     i2printf@c:
  2551                           	opt stack 0
  2552                           
  2553                           ; 1 bytes @ 0x26
  2554  000027                     	ds	1
  2555  000028                     i2printf@width:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0x27
  2559  000028                     	ds	2
  2560  00002A                     ??_printSortTimer:
  2561  00002A                     ??i2_printRTC:
  2562  00002A                     ?_inputHandler:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x29
  2566  00002A                     	ds	2
  2567  00002C                     ??_inputHandler:
  2568                           
  2569                           ; 1 bytes @ 0x2B
  2570  00002C                     	ds	1
  2571  00002D                     printSortTimer@hour:
  2572                           	opt stack 0
  2573  00002D                     i2printRTC@INT_time:
  2574                           	opt stack 0
  2575                           
  2576                           ; 14 bytes @ 0x2C
  2577  00002D                     	ds	2
  2578  00002F                     printSortTimer@curTime:
  2579                           	opt stack 0
  2580                           
  2581                           ; 14 bytes @ 0x2E
  2582  00002F                     	ds	12
  2583  00003B                     i2printRTC@RTC_month:
  2584                           	opt stack 0
  2585                           
  2586                           ; 2 bytes @ 0x3A
  2587  00003B                     	ds	2
  2588  00003D                     printSortTimer@start_sec:
  2589                           	opt stack 0
  2590  00003D                     i2printRTC@month:
  2591                           	opt stack 0
  2592                           
  2593                           ; 4 bytes @ 0x3C
  2594  00003D                     	ds	2
  2595  00003F                     printSortTimer@cur_sec:
  2596                           	opt stack 0
  2597                           
  2598                           ; 2 bytes @ 0x3E
  2599  00003F                     	ds	2
  2600  000041                     printSortTimer@min:
  2601                           	opt stack 0
  2602  000041                     i2printRTC@i:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x40
  2606  000041                     	ds	2
  2607  000043                     ??_updateMenu:
  2608  000043                     printSortTimer@sec:
  2609                           	opt stack 0
  2610                           
  2611                           ; 2 bytes @ 0x42
  2612  000043                     	ds	2
  2613  000045                     _printSortTimer$2433:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x44
  2617  000045                     	ds	2
  2618  000047                     printSortTimer@timeDiff:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x46
  2622  000047                     	ds	2
  2623  000049                     printSortTimer@i:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x48
  2627  000049                     	ds	2
  2628  00004B                     ??_handler:
  2629                           
  2630                           ; 1 bytes @ 0x4A
  2631  00004B                     	ds	16
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           postdec1	equ	0xFE5
  2639                           fsr1l	equ	0xFE1
  2640                           
  2641 ;;
  2642 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2643 ;;
  2644 ;; *************** function _main *****************
  2645 ;; Defined at:
  2646 ;;		line 19 in file "main.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;		None
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;Total ram usage:        0 bytes
  2665 ;; Hardware stack levels required when called:   13
  2666 ;; This function calls:
  2667 ;;		_I2C_Master_Init
  2668 ;;		_Test
  2669 ;;		_UI
  2670 ;;		_initLCD
  2671 ;;		_initTime
  2672 ;;		_initUI
  2673 ;;		_logRun
  2674 ;;		_machineConfig
  2675 ;;		_sort
  2676 ;;		_stopSignals
  2677 ;; This function is called by:
  2678 ;;		Startup code after reset
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text0
  2683  003710                     __ptext0:
  2684                           	opt stack 0
  2685  003710                     _main:
  2686                           	opt stack 18
  2687                           
  2688                           ;main.c: 20: machineConfig();
  2689                           
  2690                           ;incstack = 0
  2691  003710  EC12  F020         	call	_machineConfig	;wreg free
  2692                           
  2693                           ;main.c: 21: initLCD();
  2694  003714  EC8C  F021         	call	_initLCD	;wreg free
  2695                           
  2696                           ;main.c: 24: RTCflag = 0;
  2697  003718  0E00               	movlw	0
  2698  00371A  0100               	movlb	0	; () banked
  2699  00371C  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2700  00371E  0E00               	movlw	0
  2701  003720  6FDE               	movwf	_RTCflag& (0+255),b
  2702                           
  2703                           ;main.c: 25: if(RTCflag){
  2704  003722  0100               	movlb	0	; () banked
  2705  003724  51DE               	movf	_RTCflag& (0+255),w,b
  2706  003726  0100               	movlb	0	; () banked
  2707  003728  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2708  00372A  B4D8               	btfsc	status,2,c
  2709  00372C  D016               	goto	l8253
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2713  00372E  0E20               	movlw	32
  2714  003730  0100               	movlb	0	; () banked
  2715  003732  6F80               	movwf	initTime@m& (0+255),b
  2716  003734  0E15               	movlw	21
  2717  003736  0100               	movlb	0	; () banked
  2718  003738  6F81               	movwf	initTime@h& (0+255),b
  2719  00373A  0E04               	movlw	4
  2720  00373C  0100               	movlb	0	; () banked
  2721  00373E  6F82               	movwf	initTime@w& (0+255),b
  2722  003740  0E15               	movlw	21
  2723  003742  0100               	movlb	0	; () banked
  2724  003744  6F83               	movwf	initTime@DD& (0+255),b
  2725  003746  0E03               	movlw	3
  2726  003748  0100               	movlb	0	; () banked
  2727  00374A  6F84               	movwf	initTime@MM& (0+255),b
  2728  00374C  0E17               	movlw	23
  2729  00374E  0100               	movlb	0	; () banked
  2730  003750  6F85               	movwf	initTime@YY& (0+255),b
  2731  003752  0E42               	movlw	66
  2732  003754  EC3F  F024         	call	_initTime
  2733                           
  2734                           ;main.c: 27: }
  2735  003758  D00B               	goto	l8255
  2736  00375A                     l8253:
  2737                           
  2738                           ;main.c: 28: else{
  2739                           ;main.c: 29: I2C_Master_Init(10000);
  2740  00375A  0E10               	movlw	16
  2741  00375C  0100               	movlb	0	; () banked
  2742  00375E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2743  003760  0E27               	movlw	39
  2744  003762  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2745  003764  0E00               	movlw	0
  2746  003766  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2747  003768  0E00               	movlw	0
  2748  00376A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2749  00376C  ECE2  F01F         	call	_I2C_Master_Init	;wreg free
  2750  003770                     l8255:
  2751                           
  2752                           ;main.c: 30: }
  2753                           ;main.c: 32: initUI();
  2754  003770  EC48  F023         	call	_initUI	;wreg free
  2755                           
  2756                           ;main.c: 33: first = 1;
  2757  003774  0E00               	movlw	0
  2758  003776  0100               	movlb	0	; () banked
  2759  003778  6FE5               	movwf	(_first+1)& (0+255),b
  2760  00377A  0E01               	movlw	1
  2761  00377C  6FE4               	movwf	_first& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 44: switch(machine_state){
  2765                           
  2766                           ;main.c: 43: while(1){
  2767  00377E  D018               	goto	l8277
  2768  003780                     l8259:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 46: UI();
  2772  003780  EC65  F004         	call	_UI	;wreg free
  2773                           
  2774                           ;main.c: 47: break;
  2775  003784  D015               	goto	l8277
  2776  003786                     l8261:
  2777                           
  2778                           ;main.c: 49: sort();
  2779  003786  EC2E  F024         	call	_sort	;wreg free
  2780                           
  2781                           ;main.c: 50: break;
  2782  00378A  D012               	goto	l8277
  2783  00378C                     l8263:
  2784                           
  2785                           ;main.c: 52: stopSignals();
  2786  00378C  EC6B  F024         	call	_stopSignals	;wreg free
  2787                           
  2788                           ;main.c: 53: logRun();
  2789  003790  EC8C  F018         	call	_logRun	;wreg free
  2790                           
  2791                           ;main.c: 54: first = 1;
  2792  003794  0E00               	movlw	0
  2793  003796  0100               	movlb	0	; () banked
  2794  003798  6FE5               	movwf	(_first+1)& (0+255),b
  2795  00379A  0E01               	movlw	1
  2796  00379C  6FE4               	movwf	_first& (0+255),b
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 55: UI();
  2800  00379E  EC65  F004         	call	_UI	;wreg free
  2801                           
  2802                           ;main.c: 56: break;
  2803  0037A2  D006               	goto	l8277
  2804  0037A4                     l8271:
  2805                           
  2806                           ;main.c: 58: Test();
  2807  0037A4  ECBD  F019         	call	_Test	;wreg free
  2808                           
  2809                           ;main.c: 59: break;
  2810  0037A8  D003               	goto	l8277
  2811  0037AA                     l8273:
  2812                           
  2813                           ;main.c: 61: stopSignals();
  2814  0037AA  EC6B  F024         	call	_stopSignals	;wreg free
  2815  0037AE                     l487:
  2816  0037AE  D7FF               	goto	l487
  2817  0037B0                     l8277:
  2818  0037B0  0100               	movlb	0	; () banked
  2819  0037B2  51FC               	movf	_machine_state& (0+255),w,b
  2820                           
  2821                           ; Switch size 1, requested type "space"
  2822                           ; Number of cases is 5, Range of values is 0 to 4
  2823                           ; switch strategies available:
  2824                           ; Name         Instructions Cycles
  2825                           ; simple_byte           16     9 (average)
  2826                           ;	Chosen strategy is simple_byte
  2827  0037B4  0A00               	xorlw	0	; case 0
  2828  0037B6  B4D8               	btfsc	status,2,c
  2829  0037B8  D7E3               	goto	l8259
  2830  0037BA  0A01               	xorlw	1	; case 1
  2831  0037BC  B4D8               	btfsc	status,2,c
  2832  0037BE  D7E3               	goto	l8261
  2833  0037C0  0A03               	xorlw	3	; case 2
  2834  0037C2  B4D8               	btfsc	status,2,c
  2835  0037C4  D7E3               	goto	l8263
  2836  0037C6  0A01               	xorlw	1	; case 3
  2837  0037C8  B4D8               	btfsc	status,2,c
  2838  0037CA  D7EC               	goto	l8271
  2839  0037CC  0A07               	xorlw	7	; case 4
  2840  0037CE  B4D8               	btfsc	status,2,c
  2841  0037D0  D7EC               	goto	l8273
  2842                           
  2843                           ; BSR set to: 0
  2844                           
  2845                           ; BSR set to: 0
  2846  0037D2  D7EE               	goto	l8277
  2847  0037D4                     __end_of_main:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _stopSignals *****************
  2860 ;; Defined at:
  2861 ;;		line 70 in file "main.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    7
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_main
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text1
  2890  0048D6                     __ptext1:
  2891                           	opt stack 0
  2892  0048D6                     _stopSignals:
  2893                           	opt stack 23
  2894                           
  2895                           ;main.c: 71: LATA = 0x00;
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;incstack = 0
  2899  0048D6  0E00               	movlw	0
  2900  0048D8  6E89               	movwf	3977,c	;volatile
  2901                           
  2902                           ;main.c: 72: LATB = 0x00;
  2903  0048DA  0E00               	movlw	0
  2904  0048DC  6E8A               	movwf	3978,c	;volatile
  2905                           
  2906                           ;main.c: 73: LATC = 0x00;
  2907  0048DE  0E00               	movlw	0
  2908  0048E0  6E8B               	movwf	3979,c	;volatile
  2909                           
  2910                           ;main.c: 74: LATD = 0x00;
  2911  0048E2  0E00               	movlw	0
  2912  0048E4  6E8C               	movwf	3980,c	;volatile
  2913                           
  2914                           ;main.c: 75: LATE = 0x00;
  2915  0048E6  0E00               	movlw	0
  2916  0048E8  6E8D               	movwf	3981,c	;volatile
  2917  0048EA  0012               	return		;funcret
  2918  0048EC                     __end_of_stopSignals:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           fsr1l	equ	0xFE1
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _sort *****************
  2931 ;; Defined at:
  2932 ;;		line 55 in file "sort.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;		None
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        0 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:   12
  2953 ;; This function calls:
  2954 ;;		_Distribution
  2955 ;;		_ID
  2956 ;;		_Loading
  2957 ;; This function is called by:
  2958 ;;		_main
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text2
  2963  00485C                     __ptext2:
  2964                           	opt stack 0
  2965  00485C                     _sort:
  2966                           	opt stack 18
  2967                           
  2968                           ;sort.c: 56: if(machine_state == Sorting_state){
  2969                           
  2970                           ;incstack = 0
  2971  00485C  0100               	movlb	0	; () banked
  2972  00485E  05FC               	decf	_machine_state& (0+255),w,b
  2973  004860  B4D8               	btfsc	status,2,c
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;sort.c: 57: Loading();
  2977  004862  EC9C  F015         	call	_Loading	;wreg free
  2978                           
  2979                           ;sort.c: 58: }
  2980                           ;sort.c: 59: if(machine_state == Sorting_state){
  2981  004866  0100               	movlb	0	; () banked
  2982  004868  05FC               	decf	_machine_state& (0+255),w,b
  2983  00486A  B4D8               	btfsc	status,2,c
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;sort.c: 60: ID();
  2987  00486C  ECDE  F017         	call	_ID	;wreg free
  2988                           
  2989                           ;sort.c: 61: }
  2990                           ;sort.c: 62: if(machine_state == Sorting_state){
  2991  004870  0100               	movlb	0	; () banked
  2992  004872  05FC               	decf	_machine_state& (0+255),w,b
  2993  004874  A4D8               	btfss	status,2,c
  2994  004876  0012               	return	
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;sort.c: 63: Distribution();
  2998  004878  EC6C  F016         	call	_Distribution	;wreg free
  2999  00487C  0012               	return	
  3000  00487E                     __end_of_sort:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _Loading *****************
  3013 ;; Defined at:
  3014 ;;		line 67 in file "sort.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  i               2   54[BANK0 ] int 
  3019 ;;  i               2   56[BANK0 ] int 
  3020 ;;  addr            2   51[BANK0 ] unsigned short 
  3021 ;;  byte1           1   53[BANK0 ] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        9 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:   11
  3038 ;; This function calls:
  3039 ;;		_EEPROM_read
  3040 ;;		_EEPROM_write
  3041 ;;		_delay_ms
  3042 ;;		_getIR
  3043 ;;		_initGlobalVars
  3044 ;;		_initServos
  3045 ;;		_initSortTimer
  3046 ;;		_lcdInst
  3047 ;; This function is called by:
  3048 ;;		_sort
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text3
  3053  002B38                     __ptext3:
  3054                           	opt stack 0
  3055  002B38                     _Loading:
  3056                           	opt stack 18
  3057                           
  3058                           ;sort.c: 68: if(first){
  3059                           
  3060                           ;incstack = 0
  3061  002B38  0100               	movlb	0	; () banked
  3062  002B3A  51E4               	movf	_first& (0+255),w,b
  3063  002B3C  0100               	movlb	0	; () banked
  3064  002B3E  11E5               	iorwf	(_first+1)& (0+255),w,b
  3065  002B40  B4D8               	btfsc	status,2,c
  3066  002B42  D074               	goto	l6517
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;sort.c: 69: initGlobalVars();
  3070  002B44  EC48  F01F         	call	_initGlobalVars	;wreg free
  3071                           
  3072                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3073  002B48  0E01               	movlw	1
  3074  002B4A  EC9C  F024         	call	_lcdInst
  3075  002B4E  0E68               	movlw	104
  3076  002B50  0100               	movlb	0	; () banked
  3077  002B52  6FB1               	movwf	??_Loading& (0+255),b
  3078  002B54  0EE4               	movlw	228
  3079  002B56                     u7317:
  3080  002B56  2EE8               	decfsz	wreg,f,c
  3081  002B58  D7FE               	bra	u7317
  3082  002B5A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3083  002B5C  D7FC               	bra	u7317
  3084  002B5E  F000               	nop	
  3085                           
  3086                           ;sort.c: 71: initSortTimer();
  3087  002B60  ECA7  F01C         	call	_initSortTimer	;wreg free
  3088                           
  3089                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3090  002B64  8A8B               	bsf	3979,5,c	;volatile
  3091                           
  3092                           ;sort.c: 77: sel = EEPROM_read(0);
  3093  002B66  0E00               	movlw	0
  3094  002B68  0100               	movlb	0	; () banked
  3095  002B6A  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3096  002B6C  0E00               	movlw	0
  3097  002B6E  6F80               	movwf	EEPROM_read@address& (0+255),b
  3098  002B70  EC5F  F024         	call	_EEPROM_read	;wreg free
  3099  002B74  0100               	movlb	0	; () banked
  3100  002B76  6FFD               	movwf	_sel& (0+255),b
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3104  002B78  0100               	movlb	0	; () banked
  3105  002B7A  51FD               	movf	_sel& (0+255),w,b
  3106  002B7C  0D0B               	mullw	11
  3107  002B7E  0E01               	movlw	1
  3108  002B80  24F3               	addwf	prodl,w,c
  3109  002B82  0100               	movlb	0	; () banked
  3110  002B84  6FB3               	movwf	Loading@addr& (0+255),b
  3111  002B86  0E00               	movlw	0
  3112  002B88  20F4               	addwfc	prodh,w,c
  3113  002B8A  0100               	movlb	0	; () banked
  3114  002B8C  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3118  002B8E  0E7F               	movlw	127
  3119  002B90  0100               	movlb	0	; () banked
  3120  002B92  6FB5               	movwf	Loading@byte1& (0+255),b
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3124  002B94  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3125  002B98  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3126  002B9C  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3127  002BA0  EC47  F01A         	call	_EEPROM_write	;wreg free
  3128                           
  3129                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3130  002BA4  9A89               	bcf	3977,5,c	;volatile
  3131                           
  3132                           ;sort.c: 85: for(int i=0; i<46; i++){
  3133  002BA6  0E00               	movlw	0
  3134  002BA8  0100               	movlb	0	; () banked
  3135  002BAA  6FB9               	movwf	(Loading@i+1)& (0+255),b
  3136  002BAC  0E00               	movlw	0
  3137  002BAE  6FB8               	movwf	Loading@i& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140  002BB0  0100               	movlb	0	; () banked
  3141  002BB2  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3142  002BB4  D008               	goto	l6505
  3143  002BB6  0100               	movlb	0	; () banked
  3144  002BB8  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3145  002BBA  E126               	bnz	l730
  3146  002BBC  0E2E               	movlw	46
  3147  002BBE  0100               	movlb	0	; () banked
  3148  002BC0  5DB8               	subwf	Loading@i& (0+255),w,b
  3149  002BC2  B0D8               	btfsc	status,0,c
  3150  002BC4  D021               	goto	l730
  3151  002BC6                     l6505:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3155  002BC6  BA89               	btfsc	3977,5,c	;volatile
  3156  002BC8  D004               	goto	u4950
  3157  002BCA  0100               	movlb	0	; () banked
  3158  002BCC  6BB1               	clrf	??_Loading& (0+255),b
  3159  002BCE  2BB1               	incf	??_Loading& (0+255),f,b
  3160  002BD0  D002               	goto	u4968
  3161  002BD2                     u4950:
  3162  002BD2  0100               	movlb	0	; () banked
  3163  002BD4  6BB1               	clrf	??_Loading& (0+255),b
  3164  002BD6                     u4968:
  3165  002BD6  0100               	movlb	0	; () banked
  3166  002BD8  3BB1               	swapf	??_Loading& (0+255),f,b
  3167  002BDA  47B1               	rlncf	??_Loading& (0+255),f,b
  3168  002BDC  5089               	movf	3977,w,c	;volatile
  3169  002BDE  0100               	movlb	0	; () banked
  3170  002BE0  19B1               	xorwf	??_Loading& (0+255),w,b
  3171  002BE2  0BDF               	andlw	-33
  3172  002BE4  19B1               	xorwf	??_Loading& (0+255),w,b
  3173  002BE6  6E89               	movwf	3977,c	;volatile
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 87: delay_ms(45-i);
  3177  002BE8  0100               	movlb	0	; () banked
  3178  002BEA  51B8               	movf	Loading@i& (0+255),w,b
  3179  002BEC  0800               	sublw	0
  3180  002BEE  0F2D               	addlw	45
  3181  002BF0  ECCE  F023         	call	_delay_ms
  3182  002BF4  0100               	movlb	0	; () banked
  3183  002BF6  4BB8               	infsnz	Loading@i& (0+255),f,b
  3184  002BF8  2BB9               	incf	(Loading@i+1)& (0+255),f,b
  3185                           
  3186                           ; BSR set to: 0
  3187  002BFA  0100               	movlb	0	; () banked
  3188  002BFC  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3189  002BFE  D7E3               	goto	l6505
  3190  002C00  0100               	movlb	0	; () banked
  3191  002C02  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3192  002C04  E101               	bnz	u4970
  3193  002C06  D7DA               	goto	L1
  3194  002C08                     u4970:
  3195  002C08                     l730:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;sort.c: 88: }
  3199                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3200  002C08  8A89               	bsf	3977,5,c	;volatile
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;sort.c: 92: initServos();
  3204  002C0A  EC6E  F020         	call	_initServos	;wreg free
  3205                           
  3206                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3207  002C0E  0ECB               	movlw	203
  3208  002C10  0100               	movlb	0	; () banked
  3209  002C12  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3210  002C14  0EEC               	movlw	236
  3211  002C16  0100               	movlb	0	; () banked
  3212  002C18  6FB1               	movwf	??_Loading& (0+255),b
  3213  002C1A  0E84               	movlw	132
  3214  002C1C                     u7327:
  3215  002C1C  2EE8               	decfsz	wreg,f,c
  3216  002C1E  D7FE               	bra	u7327
  3217  002C20  2FB1               	decfsz	??_Loading& (0+255),f,b
  3218  002C22  D7FC               	bra	u7327
  3219  002C24  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3220  002C26  D7FA               	bra	u7327
  3221  002C28  F000               	nop	
  3222                           
  3223                           ;sort.c: 94: }
  3224  002C2A  0012               	return	
  3225  002C2C                     l6517:
  3226                           
  3227                           ;sort.c: 95: else{
  3228                           ;sort.c: 98: if(!f_loadingNewCan){
  3229  002C2C  0100               	movlb	0	; () banked
  3230  002C2E  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3231  002C30  0100               	movlb	0	; () banked
  3232  002C32  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3233  002C34  A4D8               	btfss	status,2,c
  3234  002C36  D017               	goto	l6533
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;sort.c: 100: getIR();
  3238  002C38  ECC6  F020         	call	_getIR	;wreg free
  3239                           
  3240                           ;sort.c: 102: if(!f_loadingNewCan){
  3241  002C3C  0100               	movlb	0	; () banked
  3242  002C3E  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3243  002C40  0100               	movlb	0	; () banked
  3244  002C42  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3245  002C44  B4D8               	btfsc	status,2,c
  3246  002C46  0012               	return	
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;sort.c: 106: else{
  3250                           ;sort.c: 107: count_total++;
  3251                           
  3252                           ; BSR set to: 0
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;sort.c: 104: }
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;sort.c: 103: return;
  3259  002C48  0100               	movlb	0	; () banked
  3260  002C4A  4BFE               	infsnz	_count_total& (0+255),f,b
  3261  002C4C  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;sort.c: 108: if(count_total == 12){
  3265  002C4E  0E0C               	movlw	12
  3266  002C50  0100               	movlb	0	; () banked
  3267  002C52  19FE               	xorwf	_count_total& (0+255),w,b
  3268  002C54  0100               	movlb	0	; () banked
  3269  002C56  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3270  002C58  A4D8               	btfss	status,2,c
  3271  002C5A  0012               	return	
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;sort.c: 109: f_lastCan = 1;
  3275  002C5C  0E00               	movlw	0
  3276  002C5E  6E74               	movwf	_f_lastCan+1,c
  3277  002C60  0E01               	movlw	1
  3278  002C62  6E73               	movwf	_f_lastCan,c
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;sort.c: 110: }
  3282                           ;sort.c: 111: }
  3283                           ;sort.c: 112: }
  3284                           
  3285                           ; BSR set to: 0
  3286  002C64  0012               	return	
  3287  002C66                     l6533:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;sort.c: 115: else if(f_ID_receive){
  3291  002C66  506D               	movf	_f_ID_receive,w,c
  3292  002C68  106E               	iorwf	_f_ID_receive+1,w,c
  3293  002C6A  B4D8               	btfsc	status,2,c
  3294  002C6C  0012               	return	
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;sort.c: 116: f_loadingNewCan = 0;
  3298  002C6E  0E00               	movlw	0
  3299  002C70  0100               	movlb	0	; () banked
  3300  002C72  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3301  002C74  0E00               	movlw	0
  3302  002C76  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3306  002C78  0E3D               	movlw	61
  3307  002C7A  0100               	movlb	0	; () banked
  3308  002C7C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3309  002C7E  0EE1               	movlw	225
  3310  002C80  0100               	movlb	0	; () banked
  3311  002C82  6FB1               	movwf	??_Loading& (0+255),b
  3312  002C84  0E3F               	movlw	63
  3313  002C86                     u7337:
  3314  002C86  2EE8               	decfsz	wreg,f,c
  3315  002C88  D7FE               	bra	u7337
  3316  002C8A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3317  002C8C  D7FC               	bra	u7337
  3318  002C8E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3319  002C90  D7FA               	bra	u7337
  3320  002C92  D000               	nop2	
  3321                           
  3322                           ;sort.c: 119: for(int i = 0; i<3000; i++){
  3323  002C94  0E00               	movlw	0
  3324  002C96  0100               	movlb	0	; () banked
  3325  002C98  6FB7               	movwf	(Loading@i_1098+1)& (0+255),b
  3326  002C9A  0E00               	movlw	0
  3327  002C9C  6FB6               	movwf	Loading@i_1098& (0+255),b
  3328  002C9E                     l6541:
  3329                           
  3330                           ; BSR set to: 0
  3331  002C9E  0100               	movlb	0	; () banked
  3332  002CA0  BFB7               	btfsc	(Loading@i_1098+1)& (0+255),7,b
  3333  002CA2  D008               	goto	l739
  3334  002CA4  0EB8               	movlw	184
  3335  002CA6  0100               	movlb	0	; () banked
  3336  002CA8  5DB6               	subwf	Loading@i_1098& (0+255),w,b
  3337  002CAA  0E0B               	movlw	11
  3338  002CAC  0100               	movlb	0	; () banked
  3339  002CAE  59B7               	subwfb	(Loading@i_1098+1)& (0+255),w,b
  3340  002CB0  B0D8               	btfsc	status,0,c
  3341  002CB2  D00D               	goto	l6551
  3342  002CB4                     l739:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;sort.c: 120: LATAbits.LATA4 = 1;
  3346  002CB4  8889               	bsf	3977,4,c	;volatile
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sort.c: 121: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3350  002CB6  0EBA               	movlw	186
  3351  002CB8                     u7347:
  3352  002CB8  2EE8               	decfsz	wreg,f,c
  3353  002CBA  D7FE               	bra	u7347
  3354  002CBC  D000               	nop2	
  3355                           
  3356                           ;sort.c: 122: LATAbits.LATA4 = 0;
  3357  002CBE  9889               	bcf	3977,4,c	;volatile
  3358                           
  3359                           ;sort.c: 123: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3360  002CC0  0E50               	movlw	80
  3361  002CC2                     u7357:
  3362  002CC2  2EE8               	decfsz	wreg,f,c
  3363  002CC4  D7FE               	bra	u7357
  3364  002CC6  0100               	movlb	0	; () banked
  3365  002CC8  4BB6               	infsnz	Loading@i_1098& (0+255),f,b
  3366  002CCA  2BB7               	incf	(Loading@i_1098+1)& (0+255),f,b
  3367  002CCC  D7E8               	goto	l6541
  3368  002CCE                     l6551:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;sort.c: 124: }
  3372                           ;sort.c: 126: f_can_coming_to_ID = 1;
  3373  002CCE  0E00               	movlw	0
  3374  002CD0  6E70               	movwf	_f_can_coming_to_ID+1,c
  3375  002CD2  0E01               	movlw	1
  3376  002CD4  6E6F               	movwf	_f_can_coming_to_ID,c
  3377                           
  3378                           ; BSR set to: 0
  3379                           
  3380                           ; BSR set to: 0
  3381  002CD6  0012               	return	
  3382  002CD8                     __end_of_Loading:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           postinc0	equ	0xFEE
  3391                           wreg	equ	0xFE8
  3392                           postdec1	equ	0xFE5
  3393                           fsr1l	equ	0xFE1
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _initSortTimer *****************
  3397 ;; Defined at:
  3398 ;;		line 259 in file "sort.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  i               2    8[BANK0 ] int 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:        5 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:   10
  3419 ;; This function calls:
  3420 ;;		_getRTC
  3421 ;; This function is called by:
  3422 ;;		_Loading
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text4
  3427  00394E                     __ptext4:
  3428                           	opt stack 0
  3429  00394E                     _initSortTimer:
  3430                           	opt stack 18
  3431                           
  3432                           ;sort.c: 261: getRTC();
  3433                           
  3434                           ;incstack = 0
  3435  00394E  EC93  F01D         	call	_getRTC	;wreg free
  3436                           
  3437                           ;sort.c: 262: for(int i = 0; i < 7; i++){
  3438  003952  0E00               	movlw	0
  3439  003954  0100               	movlb	0	; () banked
  3440  003956  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3441  003958  0E00               	movlw	0
  3442  00395A  6F88               	movwf	initSortTimer@i& (0+255),b
  3443  00395C                     l6101:
  3444                           
  3445                           ; BSR set to: 0
  3446  00395C  0100               	movlb	0	; () banked
  3447  00395E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3448  003960  D008               	goto	l6105
  3449  003962  0100               	movlb	0	; () banked
  3450  003964  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3451  003966  E140               	bnz	l6111
  3452  003968  0E07               	movlw	7
  3453  00396A  0100               	movlb	0	; () banked
  3454  00396C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3455  00396E  B0D8               	btfsc	status,0,c
  3456  003970  D03B               	goto	l6111
  3457  003972                     l6105:
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;sort.c: 263: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3461  003972  0E24               	movlw	low _time
  3462  003974  0100               	movlb	0	; () banked
  3463  003976  2588               	addwf	initSortTimer@i& (0+255),w,b
  3464  003978  6ED9               	movwf	fsr2l,c
  3465  00397A  0E01               	movlw	high _time
  3466  00397C  0100               	movlb	0	; () banked
  3467  00397E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3468  003980  6EDA               	movwf	fsr2h,c
  3469  003982  50DF               	movf	indf2,w,c
  3470  003984  0100               	movlb	0	; () banked
  3471  003986  6F85               	movwf	??_initSortTimer& (0+255),b
  3472  003988  0100               	movlb	0	; () banked
  3473  00398A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3474  00398C  0E0F               	movlw	15
  3475  00398E  1785               	andwf	??_initSortTimer& (0+255),f,b
  3476  003990  0E0F               	movlw	15
  3477  003992  0100               	movlb	0	; () banked
  3478  003994  1785               	andwf	??_initSortTimer& (0+255),f,b
  3479  003996  0100               	movlb	0	; () banked
  3480  003998  5185               	movf	??_initSortTimer& (0+255),w,b
  3481  00399A  0D0A               	mullw	10
  3482  00399C  0E24               	movlw	low _time
  3483  00399E  0100               	movlb	0	; () banked
  3484  0039A0  2588               	addwf	initSortTimer@i& (0+255),w,b
  3485  0039A2  6ED9               	movwf	fsr2l,c
  3486  0039A4  0E01               	movlw	high _time
  3487  0039A6  0100               	movlb	0	; () banked
  3488  0039A8  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3489  0039AA  6EDA               	movwf	fsr2h,c
  3490  0039AC  50DF               	movf	indf2,w,c
  3491  0039AE  0B0F               	andlw	15
  3492  0039B0  0100               	movlb	0	; () banked
  3493  0039B2  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3494  0039B4  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3495  0039B6  50F3               	movf	prodl,w,c
  3496  0039B8  0100               	movlb	0	; () banked
  3497  0039BA  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3498  0039BC  50F4               	movf	prodh,w,c
  3499  0039BE  0100               	movlb	0	; () banked
  3500  0039C0  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3501  0039C2  90D8               	bcf	status,0,c
  3502  0039C4  0100               	movlb	0	; () banked
  3503  0039C6  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3504  0039C8  6ED9               	movwf	fsr2l,c
  3505  0039CA  0100               	movlb	0	; () banked
  3506  0039CC  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3507  0039CE  6EDA               	movwf	fsr2h,c
  3508  0039D0  0E0E               	movlw	low _startTime
  3509  0039D2  26D9               	addwf	fsr2l,f,c
  3510  0039D4  0E01               	movlw	high _startTime
  3511  0039D6  22DA               	addwfc	fsr2h,f,c
  3512  0039D8  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3513  0039DC  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3514                           
  3515                           ; BSR set to: 0
  3516  0039E0  0100               	movlb	0	; () banked
  3517  0039E2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3518  0039E4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3519  0039E6  D7BA               	goto	l6101
  3520  0039E8                     l6111:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;sort.c: 264: }
  3524                           ;sort.c: 266: T0CON = 0b00010111;
  3525  0039E8  0E17               	movlw	23
  3526  0039EA  6ED5               	movwf	4053,c	;volatile
  3527                           
  3528                           ;sort.c: 275: TMR0H = 0b10000101;
  3529  0039EC  0E85               	movlw	133
  3530  0039EE  6ED7               	movwf	4055,c	;volatile
  3531                           
  3532                           ;sort.c: 276: TMR0L = 0b11101110;
  3533  0039F0  0EEE               	movlw	238
  3534  0039F2  6ED6               	movwf	4054,c	;volatile
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;sort.c: 277: TMR0ON = 1;
  3538  0039F4  8ED5               	bsf	4053,7,c	;volatile
  3539                           
  3540                           ; BSR set to: 0
  3541  0039F6  0012               	return		;funcret
  3542  0039F8                     __end_of_initSortTimer:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           fsr1l	equ	0xFE1
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function _initGlobalVars *****************
  3562 ;; Defined at:
  3563 ;;		line 240 in file "sort.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    7
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_Loading
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text5
  3592  003E90                     __ptext5:
  3593                           	opt stack 0
  3594  003E90                     _initGlobalVars:
  3595                           	opt stack 21
  3596                           
  3597                           ;sort.c: 242: first = 0;
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;incstack = 0
  3601  003E90  0E00               	movlw	0
  3602  003E92  0100               	movlb	0	; () banked
  3603  003E94  6FE5               	movwf	(_first+1)& (0+255),b
  3604  003E96  0E00               	movlw	0
  3605  003E98  6FE4               	movwf	_first& (0+255),b
  3606                           
  3607                           ;sort.c: 245: f_loadingNewCan = 0;
  3608  003E9A  0E00               	movlw	0
  3609  003E9C  0100               	movlb	0	; () banked
  3610  003E9E  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3611  003EA0  0E00               	movlw	0
  3612  003EA2  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3613                           
  3614                           ;sort.c: 246: f_lastCan = 0;
  3615  003EA4  0E00               	movlw	0
  3616  003EA6  6E74               	movwf	_f_lastCan+1,c
  3617  003EA8  0E00               	movlw	0
  3618  003EAA  6E73               	movwf	_f_lastCan,c
  3619                           
  3620                           ;sort.c: 247: f_ID_receive = 1;
  3621  003EAC  0E00               	movlw	0
  3622  003EAE  6E6E               	movwf	_f_ID_receive+1,c
  3623  003EB0  0E01               	movlw	1
  3624  003EB2  6E6D               	movwf	_f_ID_receive,c
  3625                           
  3626                           ;sort.c: 248: f_can_coming_to_ID = 0;
  3627  003EB4  0E00               	movlw	0
  3628  003EB6  6E70               	movwf	_f_can_coming_to_ID+1,c
  3629  003EB8  0E00               	movlw	0
  3630  003EBA  6E6F               	movwf	_f_can_coming_to_ID,c
  3631                           
  3632                           ;sort.c: 249: f_can_coming_to_distribution = 0;
  3633  003EBC  0E00               	movlw	0
  3634  003EBE  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3635  003EC0  0E00               	movlw	0
  3636  003EC2  6E71               	movwf	_f_can_coming_to_distribution,c
  3637                           
  3638                           ;sort.c: 250: f_can_distributed = 0;
  3639  003EC4  0E00               	movlw	0
  3640  003EC6  0101               	movlb	1	; () banked
  3641  003EC8  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3642  003ECA  0E00               	movlw	0
  3643  003ECC  6F2B               	movwf	_f_can_distributed& (0+255),b
  3644                           
  3645                           ;sort.c: 253: count_total = 0;
  3646  003ECE  0E00               	movlw	0
  3647  003ED0  0100               	movlb	0	; () banked
  3648  003ED2  6FFF               	movwf	(_count_total+1)& (0+255),b
  3649  003ED4  0E00               	movlw	0
  3650  003ED6  6FFE               	movwf	_count_total& (0+255),b
  3651                           
  3652                           ;sort.c: 254: count_pop_no_tab = 0;
  3653  003ED8  0E00               	movlw	0
  3654  003EDA  6E62               	movwf	_count_pop_no_tab+1,c
  3655  003EDC  0E00               	movlw	0
  3656  003EDE  6E61               	movwf	_count_pop_no_tab,c
  3657                           
  3658                           ;sort.c: 255: count_pop_w_tab = 0;
  3659  003EE0  0E00               	movlw	0
  3660  003EE2  6E64               	movwf	_count_pop_w_tab+1,c
  3661  003EE4  0E00               	movlw	0
  3662  003EE6  6E63               	movwf	_count_pop_w_tab,c
  3663                           
  3664                           ;sort.c: 256: count_can_w_lab = 0;
  3665  003EE8  0E00               	movlw	0
  3666  003EEA  6E60               	movwf	_count_can_w_lab+1,c
  3667  003EEC  0E00               	movlw	0
  3668  003EEE  6E5F               	movwf	_count_can_w_lab,c
  3669                           
  3670                           ;sort.c: 257: count_can_no_lab = 0;
  3671  003EF0  0E00               	movlw	0
  3672  003EF2  6E5E               	movwf	_count_can_no_lab+1,c
  3673  003EF4  0E00               	movlw	0
  3674  003EF6  6E5D               	movwf	_count_can_no_lab,c
  3675                           
  3676                           ; BSR set to: 0
  3677  003EF8  0012               	return		;funcret
  3678  003EFA                     __end_of_initGlobalVars:
  3679                           	opt stack 0
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _getIR *****************
  3698 ;; Defined at:
  3699 ;;		line 317 in file "sort.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        2 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    9
  3720 ;; This function calls:
  3721 ;;		_readIR
  3722 ;; This function is called by:
  3723 ;;		_Loading
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text6
  3728  00418C                     __ptext6:
  3729                           	opt stack 0
  3730  00418C                     _getIR:
  3731                           	opt stack 19
  3732                           
  3733                           ;sort.c: 318: readIR();
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;incstack = 0
  3737  00418C  EC40  F021         	call	_readIR	;wreg free
  3738                           
  3739                           ;sort.c: 320: if(IR_signal==1){
  3740  004190  0100               	movlb	0	; () banked
  3741  004192  05DA               	decf	_IR_signal& (0+255),w,b
  3742  004194  0100               	movlb	0	; () banked
  3743  004196  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3744  004198  A4D8               	btfss	status,2,c
  3745  00419A  0012               	return	
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;sort.c: 321: _delay((unsigned long)((500)*(32000000/4000.0)));
  3749  00419C  0E15               	movlw	21
  3750  00419E  0100               	movlb	0	; () banked
  3751  0041A0  6F87               	movwf	(??_getIR+1)& (0+255),b
  3752  0041A2  0E4B               	movlw	75
  3753  0041A4  0100               	movlb	0	; () banked
  3754  0041A6  6F86               	movwf	??_getIR& (0+255),b
  3755  0041A8  0EBE               	movlw	190
  3756  0041AA                     u7367:
  3757  0041AA  2EE8               	decfsz	wreg,f,c
  3758  0041AC  D7FE               	bra	u7367
  3759  0041AE  2F86               	decfsz	??_getIR& (0+255),f,b
  3760  0041B0  D7FC               	bra	u7367
  3761  0041B2  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3762  0041B4  D7FA               	bra	u7367
  3763  0041B6  F000               	nop	
  3764                           
  3765                           ;sort.c: 322: readIR();
  3766  0041B8  EC40  F021         	call	_readIR	;wreg free
  3767                           
  3768                           ;sort.c: 323: if(IR_signal==1){
  3769  0041BC  0100               	movlb	0	; () banked
  3770  0041BE  05DA               	decf	_IR_signal& (0+255),w,b
  3771  0041C0  0100               	movlb	0	; () banked
  3772  0041C2  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3773  0041C4  A4D8               	btfss	status,2,c
  3774  0041C6  D006               	goto	l6201
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;sort.c: 324: f_loadingNewCan = 1;
  3778  0041C8  0E00               	movlw	0
  3779  0041CA  0100               	movlb	0	; () banked
  3780  0041CC  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3781  0041CE  0E01               	movlw	1
  3782  0041D0  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3783                           
  3784                           ;sort.c: 325: }
  3785  0041D2  0012               	return	
  3786  0041D4                     l6201:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;sort.c: 326: else{
  3790                           ;sort.c: 327: f_loadingNewCan = 0;
  3791  0041D4  0E00               	movlw	0
  3792  0041D6  0100               	movlb	0	; () banked
  3793  0041D8  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3794  0041DA  0E00               	movlw	0
  3795  0041DC  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798  0041DE  0012               	return	
  3799  0041E0                     __end_of_getIR:
  3800                           	opt stack 0
  3801                           tblptru	equ	0xFF8
  3802                           tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           postdec1	equ	0xFE5
  3810                           fsr1l	equ	0xFE1
  3811                           indf2	equ	0xFDF
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _readIR *****************
  3819 ;; Defined at:
  3820 ;;		line 23 in file "ADCFunctionality.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  res             2    4[BANK0 ] int 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:        4 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    8
  3841 ;; This function calls:
  3842 ;;		_readADC
  3843 ;; This function is called by:
  3844 ;;		_getIR
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text7
  3849  004280                     __ptext7:
  3850                           	opt stack 0
  3851  004280                     _readIR:
  3852                           	opt stack 19
  3853                           
  3854                           ;ADCFunctionality.c: 24: readADC(0);
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;incstack = 0
  3858  004280  0E00               	movlw	0
  3859  004282  ECA3  F023         	call	_readADC
  3860                           
  3861                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3862  004286  50C3               	movf	4035,w,c	;volatile
  3863  004288  CFC4 F082          	movff	4036,??_readIR	;volatile
  3864  00428C  0100               	movlb	0	; () banked
  3865  00428E  6B83               	clrf	(??_readIR+1)& (0+255),b
  3866  004290  C082  F083         	movff	??_readIR,??_readIR+1
  3867  004294  0100               	movlb	0	; () banked
  3868  004296  6B82               	clrf	??_readIR& (0+255),b
  3869  004298  0100               	movlb	0	; () banked
  3870  00429A  1182               	iorwf	??_readIR& (0+255),w,b
  3871  00429C  0100               	movlb	0	; () banked
  3872  00429E  6F84               	movwf	readIR@res& (0+255),b
  3873  0042A0  0100               	movlb	0	; () banked
  3874  0042A2  5183               	movf	(??_readIR+1)& (0+255),w,b
  3875  0042A4  0100               	movlb	0	; () banked
  3876  0042A6  6F85               	movwf	(readIR@res+1)& (0+255),b
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3880  0042A8  0100               	movlb	0	; () banked
  3881  0042AA  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3882  0042AC  D00A               	goto	u3910
  3883  0042AE  0EE9               	movlw	233
  3884  0042B0  0100               	movlb	0	; () banked
  3885  0042B2  5D84               	subwf	readIR@res& (0+255),w,b
  3886  0042B4  0E03               	movlw	3
  3887  0042B6  0100               	movlb	0	; () banked
  3888  0042B8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3889  0042BA  A0D8               	btfss	status,0,c
  3890  0042BC  D002               	goto	u3910
  3891  0042BE  0E01               	movlw	1
  3892  0042C0  D001               	goto	u3920
  3893  0042C2                     u3910:
  3894  0042C2  0E00               	movlw	0
  3895  0042C4                     u3920:
  3896  0042C4  0100               	movlb	0	; () banked
  3897  0042C6  6FDA               	movwf	_IR_signal& (0+255),b
  3898  0042C8  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3899                           
  3900                           ; BSR set to: 0
  3901  0042CA  0012               	return		;funcret
  3902  0042CC                     __end_of_readIR:
  3903                           	opt stack 0
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           postdec1	equ	0xFE5
  3913                           fsr1l	equ	0xFE1
  3914                           indf2	equ	0xFDF
  3915                           postinc2	equ	0xFDE
  3916                           postdec2	equ	0xFDD
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921 ;; *************** function _delay_ms *****************
  3922 ;; Defined at:
  3923 ;;		line 352 in file "sort.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  milliseconds    1    wreg     unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;Total ram usage:        2 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    7
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_Loading
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text8
  3952  00479C                     __ptext8:
  3953                           	opt stack 0
  3954  00479C                     _delay_ms:
  3955                           	opt stack 21
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;incstack = 0
  3959                           ;delay_ms@milliseconds stored from wreg
  3960  00479C  0100               	movlb	0	; () banked
  3961  00479E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3962                           
  3963                           ;sort.c: 353: while(milliseconds > 0)
  3964  0047A0  D00B               	goto	l6173
  3965  0047A2                     l6169:
  3966                           
  3967                           ;sort.c: 354: {
  3968                           ;sort.c: 355: milliseconds--;
  3969  0047A2  0100               	movlb	0	; () banked
  3970  0047A4  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 356: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3974  0047A6  0E0B               	movlw	11
  3975  0047A8  0100               	movlb	0	; () banked
  3976  0047AA  6F80               	movwf	??_delay_ms& (0+255),b
  3977  0047AC  0E47               	movlw	71
  3978  0047AE                     u7377:
  3979  0047AE  2EE8               	decfsz	wreg,f,c
  3980  0047B0  D7FE               	bra	u7377
  3981  0047B2  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3982  0047B4  D7FC               	bra	u7377
  3983  0047B6  D000               	nop2	
  3984  0047B8                     l6173:
  3985  0047B8  0100               	movlb	0	; () banked
  3986  0047BA  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3987  0047BC  0100               	movlb	0	; () banked
  3988  0047BE  B4D8               	btfsc	status,2,c
  3989  0047C0  0012               	return	
  3990  0047C2  D7EF               	goto	l6169
  3991  0047C4                     __end_of_delay_ms:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           postinc0	equ	0xFEE
  4000                           wreg	equ	0xFE8
  4001                           postdec1	equ	0xFE5
  4002                           fsr1l	equ	0xFE1
  4003                           indf2	equ	0xFDF
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function _ID *****************
  4011 ;; Defined at:
  4012 ;;		line 130 in file "sort.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  i               2   10[BANK0 ] int 
  4017 ;;  sensor_outpu    6   12[BANK0 ] int [3]
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;Total ram usage:       10 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:   10
  4034 ;; This function calls:
  4035 ;;		_getMAG
  4036 ;; This function is called by:
  4037 ;;		_sort
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text9
  4042  002FBC                     __ptext9:
  4043                           	opt stack 0
  4044  002FBC                     _ID:
  4045                           	opt stack 19
  4046                           
  4047                           ;sort.c: 131: if(f_can_coming_to_ID){
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;incstack = 0
  4051  002FBC  506F               	movf	_f_can_coming_to_ID,w,c
  4052  002FBE  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  4053  002FC0  B4D8               	btfsc	status,2,c
  4054  002FC2  0012               	return	
  4055                           
  4056                           ;sort.c: 133: _delay((unsigned long)((750)*(32000000/4000.0)));
  4057  002FC4  0E1F               	movlw	31
  4058  002FC6  0100               	movlb	0	; () banked
  4059  002FC8  6F89               	movwf	(??_ID+1)& (0+255),b
  4060  002FCA  0E71               	movlw	113
  4061  002FCC  0100               	movlb	0	; () banked
  4062  002FCE  6F88               	movwf	??_ID& (0+255),b
  4063  002FD0  0E1E               	movlw	30
  4064  002FD2                     u7387:
  4065  002FD2  2EE8               	decfsz	wreg,f,c
  4066  002FD4  D7FE               	bra	u7387
  4067  002FD6  2F88               	decfsz	??_ID& (0+255),f,b
  4068  002FD8  D7FC               	bra	u7387
  4069  002FDA  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4070  002FDC  D7FA               	bra	u7387
  4071  002FDE  F000               	nop	
  4072                           
  4073                           ;sort.c: 138: int sensor_outputs[3];
  4074                           ;sort.c: 142: sensor_outputs[0] = PORTAbits.RA2;
  4075  002FE0  A480               	btfss	3968,2,c	;volatile
  4076  002FE2  D004               	goto	u5050
  4077  002FE4  0100               	movlb	0	; () banked
  4078  002FE6  6B88               	clrf	??_ID& (0+255),b
  4079  002FE8  2B88               	incf	??_ID& (0+255),f,b
  4080  002FEA  D002               	goto	u5058
  4081  002FEC                     u5050:
  4082  002FEC  0100               	movlb	0	; () banked
  4083  002FEE  6B88               	clrf	??_ID& (0+255),b
  4084  002FF0                     u5058:
  4085  002FF0  0100               	movlb	0	; () banked
  4086  002FF2  5188               	movf	??_ID& (0+255),w,b
  4087  002FF4  0100               	movlb	0	; () banked
  4088  002FF6  6F8C               	movwf	ID@sensor_outputs& (0+255),b
  4089  002FF8  6B8D               	clrf	(ID@sensor_outputs+1)& (0+255),b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;sort.c: 144: if(!sensor_outputs[0]){
  4093  002FFA  0100               	movlb	0	; () banked
  4094  002FFC  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4095  002FFE  0100               	movlb	0	; () banked
  4096  003000  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4097  003002  A4D8               	btfss	status,2,c
  4098  003004  D029               	goto	l6575
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;sort.c: 145: getMAG();
  4102  003006  EC3E  F022         	call	_getMAG	;wreg free
  4103                           
  4104                           ;sort.c: 146: sensor_outputs[1] = MAG_signal;
  4105  00300A  C0DC  F08E         	movff	_MAG_signal,ID@sensor_outputs+2
  4106  00300E  C0DD  F08F         	movff	_MAG_signal+1,ID@sensor_outputs+3
  4107                           
  4108                           ;sort.c: 147: if(!sensor_outputs[1]){
  4109  003012  0100               	movlb	0	; () banked
  4110  003014  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4111  003016  0100               	movlb	0	; () banked
  4112  003018  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4113  00301A  A4D8               	btfss	status,2,c
  4114  00301C  D01D               	goto	l6575
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;sort.c: 148: LATAbits.LATA3 = 1;
  4118  00301E  8689               	bsf	3977,3,c	;volatile
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;sort.c: 150: _delay((unsigned long)((600)*(32000000/4000.0)));
  4122  003020  0E19               	movlw	25
  4123  003022  0100               	movlb	0	; () banked
  4124  003024  6F89               	movwf	(??_ID+1)& (0+255),b
  4125  003026  0E5A               	movlw	90
  4126  003028  0100               	movlb	0	; () banked
  4127  00302A  6F88               	movwf	??_ID& (0+255),b
  4128  00302C  0EB1               	movlw	177
  4129  00302E                     u7397:
  4130  00302E  2EE8               	decfsz	wreg,f,c
  4131  003030  D7FE               	bra	u7397
  4132  003032  2F88               	decfsz	??_ID& (0+255),f,b
  4133  003034  D7FC               	bra	u7397
  4134  003036  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4135  003038  D7FA               	bra	u7397
  4136  00303A  D000               	nop2	
  4137                           
  4138                           ;sort.c: 151: sensor_outputs[2] = PORTAbits.RA2;
  4139  00303C  A480               	btfss	3968,2,c	;volatile
  4140  00303E  D004               	goto	u5080
  4141  003040  0100               	movlb	0	; () banked
  4142  003042  6B88               	clrf	??_ID& (0+255),b
  4143  003044  2B88               	incf	??_ID& (0+255),f,b
  4144  003046  D002               	goto	u5088
  4145  003048                     u5080:
  4146  003048  0100               	movlb	0	; () banked
  4147  00304A  6B88               	clrf	??_ID& (0+255),b
  4148  00304C                     u5088:
  4149  00304C  0100               	movlb	0	; () banked
  4150  00304E  5188               	movf	??_ID& (0+255),w,b
  4151  003050  0100               	movlb	0	; () banked
  4152  003052  6F90               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4153  003054  6B91               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;sort.c: 152: LATAbits.LATA3 = 0;
  4157  003056  9689               	bcf	3977,3,c	;volatile
  4158  003058                     l6575:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;sort.c: 153: }
  4162                           ;sort.c: 154: }
  4163                           ;sort.c: 162: if(!sensor_outputs[0]){
  4164  003058  0100               	movlb	0	; () banked
  4165  00305A  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4166  00305C  0100               	movlb	0	; () banked
  4167  00305E  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4168  003060  A4D8               	btfss	status,2,c
  4169  003062  D01E               	goto	l6593
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;sort.c: 163: if(!sensor_outputs[1]){
  4173  003064  0100               	movlb	0	; () banked
  4174  003066  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4175  003068  0100               	movlb	0	; () banked
  4176  00306A  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4177  00306C  A4D8               	btfss	status,2,c
  4178  00306E  D012               	goto	l6589
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;sort.c: 164: if(!sensor_outputs[2]){
  4182  003070  0100               	movlb	0	; () banked
  4183  003072  5190               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4184  003074  0100               	movlb	0	; () banked
  4185  003076  1191               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4186  003078  A4D8               	btfss	status,2,c
  4187  00307A  D006               	goto	l6585
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;sort.c: 165: count_pop_no_tab++;
  4191  00307C  4A61               	infsnz	_count_pop_no_tab,f,c
  4192  00307E  2A62               	incf	_count_pop_no_tab+1,f,c
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;sort.c: 166: cur_can = 0;
  4196  003080  0E00               	movlw	0
  4197  003082  6E66               	movwf	_cur_can+1,c
  4198  003084  0E00               	movlw	0
  4199  003086  D011               	goto	L4
  4200  003088                     l6585:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;sort.c: 168: else{
  4204                           ;sort.c: 169: count_pop_w_tab++;
  4205  003088  4A63               	infsnz	_count_pop_w_tab,f,c
  4206  00308A  2A64               	incf	_count_pop_w_tab+1,f,c
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;sort.c: 170: cur_can = 1;
  4210  00308C  0E00               	movlw	0
  4211  00308E  6E66               	movwf	_cur_can+1,c
  4212  003090  0E01               	movlw	1
  4213  003092  D00B               	goto	L4
  4214  003094                     l6589:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;sort.c: 173: else{
  4218                           ;sort.c: 174: count_can_w_lab++;
  4219  003094  4A5F               	infsnz	_count_can_w_lab,f,c
  4220  003096  2A60               	incf	_count_can_w_lab+1,f,c
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;sort.c: 175: cur_can = 2;
  4224  003098  0E00               	movlw	0
  4225  00309A  6E66               	movwf	_cur_can+1,c
  4226  00309C  0E02               	movlw	2
  4227  00309E  D005               	goto	L4
  4228  0030A0                     l6593:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;sort.c: 178: else{
  4232                           ;sort.c: 179: count_can_no_lab++;
  4233  0030A0  4A5D               	infsnz	_count_can_no_lab,f,c
  4234  0030A2  2A5E               	incf	_count_can_no_lab+1,f,c
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;sort.c: 180: cur_can = 3;
  4238  0030A4  0E00               	movlw	0
  4239  0030A6  6E66               	movwf	_cur_can+1,c
  4240  0030A8  0E03               	movlw	3
  4241  0030AA                     L4:
  4242  0030AA  6E65               	movwf	_cur_can,c
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;sort.c: 181: }
  4246                           ;sort.c: 185: for(int i=0;i<10000;i++)
  4247                           
  4248                           ; BSR set to: 0
  4249  0030AC  0E00               	movlw	0
  4250  0030AE  0100               	movlb	0	; () banked
  4251  0030B0  6F8B               	movwf	(ID@i+1)& (0+255),b
  4252  0030B2  0E00               	movlw	0
  4253  0030B4  6F8A               	movwf	ID@i& (0+255),b
  4254  0030B6                     l6599:
  4255                           
  4256                           ; BSR set to: 0
  4257  0030B6  0100               	movlb	0	; () banked
  4258  0030B8  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4259  0030BA  D008               	goto	l752
  4260  0030BC  0E10               	movlw	16
  4261  0030BE  0100               	movlb	0	; () banked
  4262  0030C0  5D8A               	subwf	ID@i& (0+255),w,b
  4263  0030C2  0E27               	movlw	39
  4264  0030C4  0100               	movlb	0	; () banked
  4265  0030C6  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4266  0030C8  B0D8               	btfsc	status,0,c
  4267  0030CA  D00D               	goto	l753
  4268  0030CC                     l752:
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;sort.c: 186: {
  4272                           ;sort.c: 187: LATCbits.LATC0 = 1;
  4273  0030CC  808B               	bsf	3979,0,c	;volatile
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;sort.c: 188: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4277  0030CE  0E1A               	movlw	26
  4278  0030D0                     u7407:
  4279  0030D0  2EE8               	decfsz	wreg,f,c
  4280  0030D2  D7FE               	bra	u7407
  4281  0030D4  D000               	nop2	
  4282                           
  4283                           ;sort.c: 189: LATCbits.LATC0 = 0;
  4284  0030D6  908B               	bcf	3979,0,c	;volatile
  4285                           
  4286                           ;sort.c: 190: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4287  0030D8  0EF0               	movlw	240
  4288  0030DA                     u7417:
  4289  0030DA  2EE8               	decfsz	wreg,f,c
  4290  0030DC  D7FE               	bra	u7417
  4291  0030DE  0100               	movlb	0	; () banked
  4292  0030E0  4B8A               	infsnz	ID@i& (0+255),f,b
  4293  0030E2  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4294  0030E4  D7E8               	goto	l6599
  4295  0030E6                     l753:
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;sort.c: 191: }
  4299                           ;sort.c: 192: LATCbits.LATC0 = 0;
  4300  0030E6  908B               	bcf	3979,0,c	;volatile
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;sort.c: 194: f_can_coming_to_distribution = 1;
  4304  0030E8  0E00               	movlw	0
  4305  0030EA  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4306  0030EC  0E01               	movlw	1
  4307  0030EE  6E71               	movwf	_f_can_coming_to_distribution,c
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;sort.c: 195: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4311  0030F0  0E3D               	movlw	61
  4312  0030F2  0100               	movlb	0	; () banked
  4313  0030F4  6F89               	movwf	(??_ID+1)& (0+255),b
  4314  0030F6  0EE1               	movlw	225
  4315  0030F8  0100               	movlb	0	; () banked
  4316  0030FA  6F88               	movwf	??_ID& (0+255),b
  4317  0030FC  0E3F               	movlw	63
  4318  0030FE                     u7427:
  4319  0030FE  2EE8               	decfsz	wreg,f,c
  4320  003100  D7FE               	bra	u7427
  4321  003102  2F88               	decfsz	??_ID& (0+255),f,b
  4322  003104  D7FC               	bra	u7427
  4323  003106  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4324  003108  D7FA               	bra	u7427
  4325  00310A  D000               	nop2	
  4326                           
  4327                           ;sort.c: 196: LATCbits.LATC0 = 1;
  4328  00310C  808B               	bsf	3979,0,c	;volatile
  4329                           
  4330                           ;sort.c: 198: f_can_coming_to_ID = 0;
  4331  00310E  0E00               	movlw	0
  4332  003110  6E70               	movwf	_f_can_coming_to_ID+1,c
  4333  003112  0E00               	movlw	0
  4334  003114  6E6F               	movwf	_f_can_coming_to_ID,c
  4335  003116  0012               	return	
  4336  003118                     __end_of_ID:
  4337                           	opt stack 0
  4338                           tblptru	equ	0xFF8
  4339                           tblptrh	equ	0xFF7
  4340                           tblptrl	equ	0xFF6
  4341                           tablat	equ	0xFF5
  4342                           prodh	equ	0xFF4
  4343                           prodl	equ	0xFF3
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           indf2	equ	0xFDF
  4349                           postinc2	equ	0xFDE
  4350                           postdec2	equ	0xFDD
  4351                           fsr2h	equ	0xFDA
  4352                           fsr2l	equ	0xFD9
  4353                           status	equ	0xFD8
  4354                           
  4355 ;; *************** function _getMAG *****************
  4356 ;; Defined at:
  4357 ;;		line 331 in file "sort.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;Total ram usage:        2 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    9
  4378 ;; This function calls:
  4379 ;;		_readMAG
  4380 ;; This function is called by:
  4381 ;;		_ID
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text10
  4386  00447C                     __ptext10:
  4387                           	opt stack 0
  4388  00447C                     _getMAG:
  4389                           	opt stack 19
  4390                           
  4391                           ;sort.c: 332: readMAG();
  4392                           
  4393                           ;incstack = 0
  4394  00447C  EC66  F021         	call	_readMAG	;wreg free
  4395                           
  4396                           ;sort.c: 334: if(MAG_signal==1){
  4397  004480  0100               	movlb	0	; () banked
  4398  004482  05DC               	decf	_MAG_signal& (0+255),w,b
  4399  004484  0100               	movlb	0	; () banked
  4400  004486  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4401  004488  A4D8               	btfss	status,2,c
  4402  00448A  0012               	return	
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;sort.c: 335: _delay((unsigned long)((500)*(32000000/4000.0)));
  4406  00448C  0E15               	movlw	21
  4407  00448E  0100               	movlb	0	; () banked
  4408  004490  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4409  004492  0E4B               	movlw	75
  4410  004494  0100               	movlb	0	; () banked
  4411  004496  6F86               	movwf	??_getMAG& (0+255),b
  4412  004498  0EBE               	movlw	190
  4413  00449A                     u7437:
  4414  00449A  2EE8               	decfsz	wreg,f,c
  4415  00449C  D7FE               	bra	u7437
  4416  00449E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4417  0044A0  D7FC               	bra	u7437
  4418  0044A2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4419  0044A4  D7FA               	bra	u7437
  4420  0044A6  F000               	nop	
  4421                           
  4422                           ;sort.c: 336: readMAG();
  4423  0044A8  EC66  F021         	call	_readMAG	;wreg free
  4424  0044AC  0012               	return	
  4425  0044AE                     __end_of_getMAG:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec1	equ	0xFE5
  4436                           fsr1l	equ	0xFE1
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _Distribution *****************
  4445 ;; Defined at:
  4446 ;;		line 201 in file "sort.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      void 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;Total ram usage:        2 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    8
  4467 ;; This function calls:
  4468 ;;		_updateServoPosition
  4469 ;; This function is called by:
  4470 ;;		_sort
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text11
  4475  002CD8                     __ptext11:
  4476                           	opt stack 0
  4477  002CD8                     _Distribution:
  4478                           	opt stack 21
  4479                           
  4480                           ;sort.c: 202: if(f_can_coming_to_distribution){
  4481                           
  4482                           ;incstack = 0
  4483  002CD8  5071               	movf	_f_can_coming_to_distribution,w,c
  4484  002CDA  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4485  002CDC  B4D8               	btfsc	status,2,c
  4486  002CDE  0012               	return	
  4487  002CE0  D034               	goto	l6631
  4488  002CE2                     l6621:
  4489                           
  4490                           ;sort.c: 207: updateServoPosition(500, 1);
  4491  002CE2  0E01               	movlw	1
  4492  002CE4  0100               	movlb	0	; () banked
  4493  002CE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4494  002CE8  0EF4               	movlw	244
  4495  002CEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4496  002CEC  0E00               	movlw	0
  4497  002CEE  0100               	movlb	0	; () banked
  4498  002CF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4499  002CF2  0E01               	movlw	1
  4500  002CF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4501  002CF6  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4502                           
  4503                           ;sort.c: 208: break;
  4504  002CFA  D03E               	goto	l6633
  4505  002CFC                     l6623:
  4506                           
  4507                           ;sort.c: 210: updateServoPosition(750, 1);
  4508  002CFC  0E02               	movlw	2
  4509  002CFE  0100               	movlb	0	; () banked
  4510  002D00  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4511  002D02  0EEE               	movlw	238
  4512  002D04  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4513  002D06  0E00               	movlw	0
  4514  002D08  0100               	movlb	0	; () banked
  4515  002D0A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4516  002D0C  0E01               	movlw	1
  4517  002D0E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4518  002D10  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4519                           
  4520                           ;sort.c: 211: break;
  4521  002D14  D031               	goto	l6633
  4522  002D16                     l6625:
  4523                           
  4524                           ;sort.c: 213: updateServoPosition(1700, 1);
  4525  002D16  0E06               	movlw	6
  4526  002D18  0100               	movlb	0	; () banked
  4527  002D1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4528  002D1C  0EA4               	movlw	164
  4529  002D1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4530  002D20  0E00               	movlw	0
  4531  002D22  0100               	movlb	0	; () banked
  4532  002D24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4533  002D26  0E01               	movlw	1
  4534  002D28  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4535  002D2A  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4536                           
  4537                           ;sort.c: 214: break;
  4538  002D2E  D024               	goto	l6633
  4539  002D30                     l6627:
  4540                           
  4541                           ;sort.c: 216: updateServoPosition(2100, 1);
  4542  002D30  0E08               	movlw	8
  4543  002D32  0100               	movlb	0	; () banked
  4544  002D34  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4545  002D36  0E34               	movlw	52
  4546  002D38  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4547  002D3A  0E00               	movlw	0
  4548  002D3C  0100               	movlb	0	; () banked
  4549  002D3E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4550  002D40  0E01               	movlw	1
  4551  002D42  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4552  002D44  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4553                           
  4554                           ;sort.c: 220: }
  4555                           
  4556                           ;sort.c: 219: break;
  4557                           
  4558                           ;sort.c: 218: default:
  4559                           
  4560                           ;sort.c: 217: break;
  4561  002D48  D017               	goto	l6633
  4562  002D4A                     l6631:
  4563  002D4A  C065  F088         	movff	_cur_can,??_Distribution
  4564  002D4E  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4565                           
  4566                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4567                           ; Switch size 1, requested type "space"
  4568                           ; Number of cases is 1, Range of values is 0 to 0
  4569                           ; switch strategies available:
  4570                           ; Name         Instructions Cycles
  4571                           ; simple_byte            4     3 (average)
  4572                           ;	Chosen strategy is simple_byte
  4573  002D52  0100               	movlb	0	; () banked
  4574  002D54  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4575  002D56  0A00               	xorlw	0	; case 0
  4576  002D58  A4D8               	btfss	status,2,c
  4577  002D5A  D00E               	goto	l6633
  4578                           
  4579                           ; BSR set to: 0
  4580                           ; Switch size 1, requested type "space"
  4581                           ; Number of cases is 4, Range of values is 0 to 3
  4582                           ; switch strategies available:
  4583                           ; Name         Instructions Cycles
  4584                           ; simple_byte           13     7 (average)
  4585                           ;	Chosen strategy is simple_byte
  4586  002D5C  0100               	movlb	0	; () banked
  4587  002D5E  5188               	movf	??_Distribution& (0+255),w,b
  4588  002D60  0A00               	xorlw	0	; case 0
  4589  002D62  B4D8               	btfsc	status,2,c
  4590  002D64  D7BE               	goto	l6621
  4591  002D66  0A01               	xorlw	1	; case 1
  4592  002D68  B4D8               	btfsc	status,2,c
  4593  002D6A  D7C8               	goto	l6623
  4594  002D6C  0A03               	xorlw	3	; case 2
  4595  002D6E  B4D8               	btfsc	status,2,c
  4596  002D70  D7D2               	goto	l6625
  4597  002D72  0A01               	xorlw	1	; case 3
  4598  002D74  B4D8               	btfsc	status,2,c
  4599  002D76  D7DC               	goto	l6627
  4600  002D78                     l6633:
  4601                           
  4602                           ;sort.c: 221: updateServoPosition(1150, 3);
  4603  002D78  0E04               	movlw	4
  4604  002D7A  0100               	movlb	0	; () banked
  4605  002D7C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4606  002D7E  0E7E               	movlw	126
  4607  002D80  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4608  002D82  0E00               	movlw	0
  4609  002D84  0100               	movlb	0	; () banked
  4610  002D86  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4611  002D88  0E03               	movlw	3
  4612  002D8A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4613  002D8C  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4614                           
  4615                           ;sort.c: 222: _delay((unsigned long)((750)*(32000000/4000.0)));
  4616  002D90  0E1F               	movlw	31
  4617  002D92  0100               	movlb	0	; () banked
  4618  002D94  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4619  002D96  0E71               	movlw	113
  4620  002D98  0100               	movlb	0	; () banked
  4621  002D9A  6F88               	movwf	??_Distribution& (0+255),b
  4622  002D9C  0E1E               	movlw	30
  4623  002D9E                     u7447:
  4624  002D9E  2EE8               	decfsz	wreg,f,c
  4625  002DA0  D7FE               	bra	u7447
  4626  002DA2  2F88               	decfsz	??_Distribution& (0+255),f,b
  4627  002DA4  D7FC               	bra	u7447
  4628  002DA6  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4629  002DA8  D7FA               	bra	u7447
  4630  002DAA  F000               	nop	
  4631                           
  4632                           ;sort.c: 225: updateServoPosition(1350, 3);
  4633  002DAC  0E05               	movlw	5
  4634  002DAE  0100               	movlb	0	; () banked
  4635  002DB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4636  002DB2  0E46               	movlw	70
  4637  002DB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4638  002DB6  0E00               	movlw	0
  4639  002DB8  0100               	movlb	0	; () banked
  4640  002DBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4641  002DBC  0E03               	movlw	3
  4642  002DBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4643  002DC0  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4644                           
  4645                           ;sort.c: 226: _delay((unsigned long)((2000)*(32000000/4000.0)));
  4646  002DC4  0E52               	movlw	82
  4647  002DC6  0100               	movlb	0	; () banked
  4648  002DC8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4649  002DCA  0E2B               	movlw	43
  4650  002DCC  0100               	movlb	0	; () banked
  4651  002DCE  6F88               	movwf	??_Distribution& (0+255),b
  4652  002DD0  0E00               	movlw	0
  4653  002DD2                     u7457:
  4654  002DD2  2EE8               	decfsz	wreg,f,c
  4655  002DD4  D7FE               	bra	u7457
  4656  002DD6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4657  002DD8  D7FC               	bra	u7457
  4658  002DDA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4659  002DDC  D7FA               	bra	u7457
  4660  002DDE  F000               	nop	
  4661                           
  4662                           ;sort.c: 229: updateServoPosition(1150, 3);
  4663  002DE0  0E04               	movlw	4
  4664  002DE2  0100               	movlb	0	; () banked
  4665  002DE4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4666  002DE6  0E7E               	movlw	126
  4667  002DE8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4668  002DEA  0E00               	movlw	0
  4669  002DEC  0100               	movlb	0	; () banked
  4670  002DEE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4671  002DF0  0E03               	movlw	3
  4672  002DF2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4673  002DF4  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4674                           
  4675                           ;sort.c: 230: _delay((unsigned long)((750)*(32000000/4000.0)));
  4676  002DF8  0E1F               	movlw	31
  4677  002DFA  0100               	movlb	0	; () banked
  4678  002DFC  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4679  002DFE  0E71               	movlw	113
  4680  002E00  0100               	movlb	0	; () banked
  4681  002E02  6F88               	movwf	??_Distribution& (0+255),b
  4682  002E04  0E1E               	movlw	30
  4683  002E06                     u7467:
  4684  002E06  2EE8               	decfsz	wreg,f,c
  4685  002E08  D7FE               	bra	u7467
  4686  002E0A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4687  002E0C  D7FC               	bra	u7467
  4688  002E0E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4689  002E10  D7FA               	bra	u7467
  4690  002E12  F000               	nop	
  4691                           
  4692                           ;sort.c: 231: updateServoPosition(1200, 1);
  4693  002E14  0E04               	movlw	4
  4694  002E16  0100               	movlb	0	; () banked
  4695  002E18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4696  002E1A  0EB0               	movlw	176
  4697  002E1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4698  002E1E  0E00               	movlw	0
  4699  002E20  0100               	movlb	0	; () banked
  4700  002E22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4701  002E24  0E01               	movlw	1
  4702  002E26  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4703  002E28  ECD4  F01E         	call	_updateServoPosition	;wreg free
  4704                           
  4705                           ;sort.c: 232: f_can_coming_to_distribution = 0;
  4706  002E2C  0E00               	movlw	0
  4707  002E2E  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4708  002E30  0E00               	movlw	0
  4709  002E32  6E71               	movwf	_f_can_coming_to_distribution,c
  4710                           
  4711                           ;sort.c: 233: f_can_distributed = 1;
  4712  002E34  0E00               	movlw	0
  4713  002E36  0101               	movlb	1	; () banked
  4714  002E38  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4715  002E3A  0E01               	movlw	1
  4716  002E3C  6F2B               	movwf	_f_can_distributed& (0+255),b
  4717                           
  4718                           ; BSR set to: 1
  4719                           ;sort.c: 234: if(f_lastCan == 1){
  4720  002E3E  0473               	decf	_f_lastCan,w,c
  4721  002E40  1074               	iorwf	_f_lastCan+1,w,c
  4722  002E42  A4D8               	btfss	status,2,c
  4723  002E44  0012               	return	
  4724                           
  4725                           ; BSR set to: 1
  4726                           ;sort.c: 235: machine_state = DoneSorting_state;
  4727  002E46  0E02               	movlw	2
  4728  002E48  0100               	movlb	0	; () banked
  4729  002E4A  6FFC               	movwf	_machine_state& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732  002E4C  0012               	return	
  4733  002E4E                     __end_of_Distribution:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function _machineConfig *****************
  4753 ;; Defined at:
  4754 ;;		line 15 in file "MachineConfig.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    7
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text12
  4783  004024                     __ptext12:
  4784                           	opt stack 0
  4785  004024                     _machineConfig:
  4786                           	opt stack 23
  4787                           
  4788                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4789                           
  4790                           ;incstack = 0
  4791  004024  0EF0               	movlw	240
  4792  004026  6ED3               	movwf	4051,c	;volatile
  4793                           
  4794                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4795  004028  8C9B               	bsf	3995,6,c	;volatile
  4796                           
  4797                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4798  00402A  0E07               	movlw	7
  4799  00402C  6E92               	movwf	3986,c	;volatile
  4800                           
  4801                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4802  00402E  0EF2               	movlw	242
  4803  004030  6E93               	movwf	3987,c	;volatile
  4804                           
  4805                           ;MachineConfig.c: 27: TRISC = 0x00;
  4806  004032  0E00               	movlw	0
  4807  004034  6E94               	movwf	3988,c	;volatile
  4808                           
  4809                           ;MachineConfig.c: 31: TRISD = 0x00;
  4810  004036  0E00               	movlw	0
  4811  004038  6E95               	movwf	3989,c	;volatile
  4812                           
  4813                           ;MachineConfig.c: 34: TRISE = 0x00;
  4814  00403A  0E00               	movlw	0
  4815  00403C  6E96               	movwf	3990,c	;volatile
  4816                           
  4817                           ;MachineConfig.c: 37: LATA = 0x00;
  4818  00403E  0E00               	movlw	0
  4819  004040  6E89               	movwf	3977,c	;volatile
  4820                           
  4821                           ;MachineConfig.c: 38: LATB = 0x00;
  4822  004042  0E00               	movlw	0
  4823  004044  6E8A               	movwf	3978,c	;volatile
  4824                           
  4825                           ;MachineConfig.c: 39: LATC = 0x00;
  4826  004046  0E00               	movlw	0
  4827  004048  6E8B               	movwf	3979,c	;volatile
  4828                           
  4829                           ;MachineConfig.c: 40: LATD = 0x00;
  4830  00404A  0E00               	movlw	0
  4831  00404C  6E8C               	movwf	3980,c	;volatile
  4832                           
  4833                           ;MachineConfig.c: 41: LATE = 0x00;
  4834  00404E  0E00               	movlw	0
  4835  004050  6E8D               	movwf	3981,c	;volatile
  4836                           
  4837                           ;MachineConfig.c: 43: nRBPU = 0;
  4838  004052  9EF1               	bcf	intcon2,7,c	;volatile
  4839                           
  4840                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4841  004054  0E00               	movlw	0
  4842  004056  6EC2               	movwf	4034,c	;volatile
  4843                           
  4844                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4845  004058  0E0D               	movlw	13
  4846  00405A  6EC1               	movwf	4033,c	;volatile
  4847                           
  4848                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4849  00405C  0E00               	movlw	0
  4850  00405E  6EB5               	movwf	4021,c	;volatile
  4851                           
  4852                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4853  004060  96B4               	bcf	4020,3,c	;volatile
  4854                           
  4855                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4856  004062  0EB1               	movlw	177
  4857  004064  6EC0               	movwf	4032,c	;volatile
  4858                           
  4859                           ;MachineConfig.c: 55: INT1IE = 1;
  4860  004066  86F0               	bsf	intcon3,3,c	;volatile
  4861                           
  4862                           ;MachineConfig.c: 57: TMR0IE = 1;
  4863  004068  8AF2               	bsf	intcon,5,c	;volatile
  4864                           
  4865                           ;MachineConfig.c: 58: TMR1IE = 1;
  4866  00406A  809D               	bsf	3997,0,c	;volatile
  4867                           
  4868                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4869  00406C  0EB0               	movlw	176
  4870  00406E  6ECD               	movwf	4045,c	;volatile
  4871                           
  4872                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4873  004070  0EB0               	movlw	176
  4874  004072  6EB1               	movwf	4017,c	;volatile
  4875                           
  4876                           ;MachineConfig.c: 61: TMR2IE = 1;
  4877  004074  829D               	bsf	3997,1,c	;volatile
  4878                           
  4879                           ;MachineConfig.c: 62: TMR3IE = 1;
  4880  004076  82A0               	bsf	4000,1,c	;volatile
  4881                           
  4882                           ;MachineConfig.c: 63: PEIE = 1;
  4883  004078  8CF2               	bsf	intcon,6,c	;volatile
  4884                           
  4885                           ;MachineConfig.c: 64: ADIE = 0;
  4886  00407A  9C9D               	bcf	3997,6,c	;volatile
  4887                           
  4888                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4889  00407C  9EF2               	bcf	intcon,7,c	;volatile
  4890  00407E  0012               	return		;funcret
  4891  004080                     __end_of_machineConfig:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           intcon2	equ	0xFF1
  4901                           intcon3	equ	0xFF0
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           fsr1l	equ	0xFE1
  4906                           indf2	equ	0xFDF
  4907                           postinc2	equ	0xFDE
  4908                           postdec2	equ	0xFDD
  4909                           fsr2h	equ	0xFDA
  4910                           fsr2l	equ	0xFD9
  4911                           status	equ	0xFD8
  4912                           
  4913 ;; *************** function _logRun *****************
  4914 ;; Defined at:
  4915 ;;		line 84 in file "EEPROM.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4920 ;;  i               2   55[BANK0 ] int 
  4921 ;;  num             1   49[BANK0 ] unsigned char 
  4922 ;;  addr            2   57[BANK0 ] unsigned short 
  4923 ;;  byte11          1   54[BANK0 ] unsigned char 
  4924 ;;  byte3           1   52[BANK0 ] unsigned char 
  4925 ;;  byte2           1   51[BANK0 ] unsigned char 
  4926 ;;  byte1           1   50[BANK0 ] unsigned char 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;Total ram usage:       10 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:   11
  4943 ;; This function calls:
  4944 ;;		_EEPROM_read
  4945 ;;		_EEPROM_write
  4946 ;; This function is called by:
  4947 ;;		_main
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text13
  4952  003118                     __ptext13:
  4953                           	opt stack 0
  4954  003118                     _logRun:
  4955                           	opt stack 19
  4956                           
  4957                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4958                           
  4959                           ;incstack = 0
  4960  003118  0E00               	movlw	0
  4961  00311A  0100               	movlb	0	; () banked
  4962  00311C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4963  00311E  0E00               	movlw	0
  4964  003120  6F80               	movwf	EEPROM_read@address& (0+255),b
  4965  003122  EC5F  F024         	call	_EEPROM_read	;wreg free
  4966  003126  0100               	movlb	0	; () banked
  4967  003128  6FFD               	movwf	_sel& (0+255),b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4971  00312A  0100               	movlb	0	; () banked
  4972  00312C  51FD               	movf	_sel& (0+255),w,b
  4973  00312E  0D0B               	mullw	11
  4974  003130  0E01               	movlw	1
  4975  003132  24F3               	addwf	prodl,w,c
  4976  003134  0100               	movlb	0	; () banked
  4977  003136  6FB9               	movwf	logRun@addr& (0+255),b
  4978  003138  0E00               	movlw	0
  4979  00313A  20F4               	addwfc	prodh,w,c
  4980  00313C  0100               	movlb	0	; () banked
  4981  00313E  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;EEPROM.c: 101: if (sel < 3){
  4985  003140  0E03               	movlw	3
  4986  003142  0100               	movlb	0	; () banked
  4987  003144  61FD               	cpfslt	_sel& (0+255),b
  4988  003146  D00E               	goto	l8117
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4992  003148  0100               	movlb	0	; () banked
  4993  00314A  29FD               	incf	_sel& (0+255),w,b
  4994  00314C  0100               	movlb	0	; () banked
  4995  00314E  6FB1               	movwf	logRun@num& (0+255),b
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4999  003150  0E00               	movlw	0
  5000  003152  0100               	movlb	0	; () banked
  5001  003154  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5002  003156  0E00               	movlw	0
  5003  003158  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5004  00315A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5005  00315E  EC47  F01A         	call	_EEPROM_write	;wreg free
  5006                           
  5007                           ;EEPROM.c: 104: }
  5008  003162  D00A               	goto	l8119
  5009  003164                     l8117:
  5010                           
  5011                           ;EEPROM.c: 105: else{
  5012                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5013  003164  0E00               	movlw	0
  5014  003166  0100               	movlb	0	; () banked
  5015  003168  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5016  00316A  0E00               	movlw	0
  5017  00316C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5018  00316E  0E00               	movlw	0
  5019  003170  0100               	movlb	0	; () banked
  5020  003172  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5021  003174  EC47  F01A         	call	_EEPROM_write	;wreg free
  5022  003178                     l8119:
  5023                           
  5024                           ;EEPROM.c: 107: }
  5025                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5026  003178  0100               	movlb	0	; () banked
  5027  00317A  51FE               	movf	_count_total& (0+255),w,b
  5028  00317C  0980               	iorlw	128
  5029  00317E  0100               	movlb	0	; () banked
  5030  003180  6FB2               	movwf	logRun@byte1& (0+255),b
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5034  003182  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5035  003186  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5036  00318A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5037  00318E  EC47  F01A         	call	_EEPROM_write	;wreg free
  5038                           
  5039                           ;EEPROM.c: 112: addr++;
  5040  003192  0100               	movlb	0	; () banked
  5041  003194  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5042  003196  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5046  003198  3861               	swapf	_count_pop_no_tab,w,c
  5047  00319A  0BF0               	andlw	240
  5048  00319C  1063               	iorwf	_count_pop_w_tab,w,c
  5049  00319E  0100               	movlb	0	; () banked
  5050  0031A0  6FB3               	movwf	logRun@byte2& (0+255),b
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5054  0031A2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5055  0031A6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5056  0031AA  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5057  0031AE  EC47  F01A         	call	_EEPROM_write	;wreg free
  5058                           
  5059                           ;EEPROM.c: 117: addr++;
  5060  0031B2  0100               	movlb	0	; () banked
  5061  0031B4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5062  0031B6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5066  0031B8  385F               	swapf	_count_can_w_lab,w,c
  5067  0031BA  0BF0               	andlw	240
  5068  0031BC  105D               	iorwf	_count_can_no_lab,w,c
  5069  0031BE  0100               	movlb	0	; () banked
  5070  0031C0  6FB4               	movwf	logRun@byte3& (0+255),b
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5074  0031C2  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5075  0031C6  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5076  0031CA  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5077  0031CE  EC47  F01A         	call	_EEPROM_write	;wreg free
  5078                           
  5079                           ;EEPROM.c: 120: addr++;
  5080  0031D2  0100               	movlb	0	; () banked
  5081  0031D4  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5082  0031D6  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5086  0031D8  0E00               	movlw	0
  5087  0031DA  0100               	movlb	0	; () banked
  5088  0031DC  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5089  0031DE  0E00               	movlw	0
  5090  0031E0  6FB7               	movwf	logRun@i& (0+255),b
  5091                           
  5092                           ; BSR set to: 0
  5093  0031E2  0100               	movlb	0	; () banked
  5094  0031E4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5095  0031E6  D008               	goto	l8143
  5096  0031E8  0100               	movlb	0	; () banked
  5097  0031EA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5098  0031EC  E128               	bnz	l954
  5099  0031EE  0E07               	movlw	7
  5100  0031F0  0100               	movlb	0	; () banked
  5101  0031F2  5DB7               	subwf	logRun@i& (0+255),w,b
  5102  0031F4  B0D8               	btfsc	status,0,c
  5103  0031F6  D023               	goto	l954
  5104  0031F8                     l8143:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5108  0031F8  90D8               	bcf	status,0,c
  5109  0031FA  0100               	movlb	0	; () banked
  5110  0031FC  35B7               	rlcf	logRun@i& (0+255),w,b
  5111  0031FE  6ED9               	movwf	fsr2l,c
  5112  003200  0100               	movlb	0	; () banked
  5113  003202  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5114  003204  6EDA               	movwf	fsr2h,c
  5115  003206  0E0E               	movlw	low _startTime
  5116  003208  26D9               	addwf	fsr2l,f,c
  5117  00320A  0E01               	movlw	high _startTime
  5118  00320C  22DA               	addwfc	fsr2h,f,c
  5119  00320E  50DF               	movf	indf2,w,c
  5120  003210  0100               	movlb	0	; () banked
  5121  003212  6FB5               	movwf	logRun@byte_i& (0+255),b
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5125  003214  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5126  003218  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5127  00321C  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5128  003220  EC47  F01A         	call	_EEPROM_write	;wreg free
  5129                           
  5130                           ;EEPROM.c: 126: addr++;
  5131  003224  0100               	movlb	0	; () banked
  5132  003226  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5133  003228  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 0
  5136  00322A  0100               	movlb	0	; () banked
  5137  00322C  4BB7               	infsnz	logRun@i& (0+255),f,b
  5138  00322E  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5139                           
  5140                           ; BSR set to: 0
  5141  003230  0100               	movlb	0	; () banked
  5142  003232  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5143  003234  D7E1               	goto	l8143
  5144  003236  0100               	movlb	0	; () banked
  5145  003238  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5146  00323A  E101               	bnz	u7110
  5147  00323C  D7D8               	goto	L5
  5148  00323E                     u7110:
  5149  00323E                     l954:
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;EEPROM.c: 127: }
  5153                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5154  00323E  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5158  003242  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5159  003246  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5160  00324A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5161  00324E  EC47  F01A         	call	_EEPROM_write	;wreg free
  5162  003252  0012               	return		;funcret
  5163  003254                     __end_of_logRun:
  5164                           	opt stack 0
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           intcon2	equ	0xFF1
  5173                           intcon3	equ	0xFF0
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           postdec1	equ	0xFE5
  5177                           fsr1l	equ	0xFE1
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           postdec2	equ	0xFDD
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _EEPROM_write *****************
  5186 ;; Defined at:
  5187 ;;		line 32 in file "EEPROM.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  address         2   43[BANK0 ] unsigned short 
  5190 ;;  data            1   45[BANK0 ] unsigned char 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  i               1   48[BANK0 ] unsigned char 
  5193 ;;  i               1   47[BANK0 ] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5203 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;Total ram usage:        6 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:   10
  5210 ;; This function calls:
  5211 ;;		_EEPROM_read
  5212 ;;		_lcdInst
  5213 ;;		_printf
  5214 ;; This function is called by:
  5215 ;;		_Loading
  5216 ;;		_logRun
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text14
  5221  00348E                     __ptext14:
  5222                           	opt stack 0
  5223  00348E                     _EEPROM_write:
  5224                           	opt stack 18
  5225                           
  5226                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5227                           
  5228                           ;incstack = 0
  5229  00348E  84A6               	bsf	4006,2,c	;volatile
  5230                           
  5231                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5232  003490  0100               	movlb	0	; () banked
  5233  003492  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5234  003494  6EAA               	movwf	4010,c	;volatile
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5238  003496  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;EEPROM.c: 39: EEDATA = data;
  5242  00349A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5246  00349E  9EA6               	bcf	4006,7,c	;volatile
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5250  0034A0  9CA6               	bcf	4006,6,c	;volatile
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5254  0034A2  9EF2               	bcf	intcon,7,c	;volatile
  5255                           
  5256                           ;EEPROM.c: 45: EECON2 = 0x55;
  5257  0034A4  0E55               	movlw	85
  5258  0034A6  6EA7               	movwf	4007,c	;volatile
  5259                           
  5260                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5261  0034A8  0EAA               	movlw	170
  5262  0034AA  6EA7               	movwf	4007,c	;volatile
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5266  0034AC  82A6               	bsf	4006,1,c	;volatile
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5270  0034AE  8EF2               	bsf	intcon,7,c	;volatile
  5271  0034B0                     l932:
  5272  0034B0  A8A1               	btfss	4001,4,c	;volatile
  5273  0034B2  D7FE               	goto	l932
  5274                           
  5275                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5276  0034B4  98A1               	bcf	4001,4,c	;volatile
  5277                           
  5278                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5279  0034B6  94A6               	bcf	4006,2,c	;volatile
  5280                           
  5281                           ;EEPROM.c: 57: if(debug){
  5282  0034B8  5067               	movf	_debug,w,c
  5283  0034BA  1068               	iorwf	_debug+1,w,c
  5284  0034BC  B4D8               	btfsc	status,2,c
  5285  0034BE  0012               	return	
  5286                           
  5287                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5288  0034C0  0E01               	movlw	1
  5289  0034C2  EC9C  F024         	call	_lcdInst
  5290  0034C6  0E68               	movlw	104
  5291  0034C8  0100               	movlb	0	; () banked
  5292  0034CA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5293  0034CC  0EE4               	movlw	228
  5294  0034CE                     u7477:
  5295  0034CE  2EE8               	decfsz	wreg,f,c
  5296  0034D0  D7FE               	bra	u7477
  5297  0034D2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5298  0034D4  D7FC               	bra	u7477
  5299  0034D6  F000               	nop	
  5300                           
  5301                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5302  0034D8  0E80               	movlw	128
  5303  0034DA  EC9C  F024         	call	_lcdInst
  5304                           
  5305                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5306  0034DE  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5307  0034E2  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5308  0034E6  EC5F  F024         	call	_EEPROM_read	;wreg free
  5309  0034EA  0100               	movlb	0	; () banked
  5310  0034EC  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5311  0034EE  A4D8               	btfss	status,2,c
  5312  0034F0  D024               	goto	l6155
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5316  0034F2  0E34               	movlw	low STR_66
  5317  0034F4  0100               	movlb	0	; () banked
  5318  0034F6  6F8E               	movwf	printf@f& (0+255),b
  5319  0034F8  0EFB               	movlw	high STR_66
  5320  0034FA  0100               	movlb	0	; () banked
  5321  0034FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5322  0034FE  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5323  003502  0100               	movlb	0	; () banked
  5324  003504  6B91               	clrf	(?_printf+3)& (0+255),b
  5325  003506  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5326  00350A  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5327  00350E  ECB8  F008         	call	_printf	;wreg free
  5328                           
  5329                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5330  003512  0E00               	movlw	0
  5331  003514  0100               	movlb	0	; () banked
  5332  003516  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5333  003518                     l6147:
  5334                           
  5335                           ; BSR set to: 0
  5336  003518  0E63               	movlw	99
  5337  00351A  0100               	movlb	0	; () banked
  5338  00351C  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5339  00351E  D001               	goto	l6151
  5340  003520  0012               	return	
  5341  003522                     l6151:
  5342                           
  5343                           ; BSR set to: 0
  5344  003522  0E68               	movlw	104
  5345  003524  0100               	movlb	0	; () banked
  5346  003526  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5347  003528  0EE4               	movlw	228
  5348  00352A                     u7487:
  5349  00352A  2EE8               	decfsz	wreg,f,c
  5350  00352C  D7FE               	bra	u7487
  5351  00352E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5352  003530  D7FC               	bra	u7487
  5353  003532  F000               	nop	
  5354  003534  0100               	movlb	0	; () banked
  5355  003536  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5356  003538  D7EF               	goto	l6147
  5357  00353A                     l6155:
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5361  00353A  0EBD               	movlw	low STR_67
  5362  00353C  0100               	movlb	0	; () banked
  5363  00353E  6F8E               	movwf	printf@f& (0+255),b
  5364  003540  0EFF               	movlw	high STR_67
  5365  003542  0100               	movlb	0	; () banked
  5366  003544  6F8F               	movwf	(printf@f+1)& (0+255),b
  5367  003546  ECB8  F008         	call	_printf	;wreg free
  5368  00354A  0E00               	movlw	0
  5369  00354C  0100               	movlb	0	; () banked
  5370  00354E  6FB0               	movwf	EEPROM_write@i_1329& (0+255),b
  5371  003550                     l6159:
  5372                           
  5373                           ; BSR set to: 0
  5374  003550  0E63               	movlw	99
  5375  003552  0100               	movlb	0	; () banked
  5376  003554  65B0               	cpfsgt	EEPROM_write@i_1329& (0+255),b
  5377  003556  D001               	goto	l6163
  5378  003558  0012               	return	
  5379  00355A                     l6163:
  5380                           
  5381                           ; BSR set to: 0
  5382  00355A  0E68               	movlw	104
  5383  00355C  0100               	movlb	0	; () banked
  5384  00355E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5385  003560  0EE4               	movlw	228
  5386  003562                     u7497:
  5387  003562  2EE8               	decfsz	wreg,f,c
  5388  003564  D7FE               	bra	u7497
  5389  003566  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5390  003568  D7FC               	bra	u7497
  5391  00356A  F000               	nop	
  5392  00356C  0100               	movlb	0	; () banked
  5393  00356E  2BB0               	incf	EEPROM_write@i_1329& (0+255),f,b
  5394  003570  D7EF               	goto	l6159
  5395  003572                     __end_of_EEPROM_write:
  5396                           	opt stack 0
  5397                           tblptru	equ	0xFF8
  5398                           tblptrh	equ	0xFF7
  5399                           tblptrl	equ	0xFF6
  5400                           tablat	equ	0xFF5
  5401                           prodh	equ	0xFF4
  5402                           prodl	equ	0xFF3
  5403                           intcon	equ	0xFF2
  5404                           intcon2	equ	0xFF1
  5405                           intcon3	equ	0xFF0
  5406                           postinc0	equ	0xFEE
  5407                           wreg	equ	0xFE8
  5408                           postdec1	equ	0xFE5
  5409                           fsr1l	equ	0xFE1
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           fsr2h	equ	0xFDA
  5414                           fsr2l	equ	0xFD9
  5415                           status	equ	0xFD8
  5416                           
  5417 ;; *************** function _EEPROM_read *****************
  5418 ;; Defined at:
  5419 ;;		line 68 in file "EEPROM.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;  address         2    0[BANK0 ] unsigned short 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      unsigned char 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;Total ram usage:        2 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    7
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_Loading
  5444 ;;		_EEPROM_write
  5445 ;;		_logRun
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text15
  5450  0048BE                     __ptext15:
  5451                           	opt stack 0
  5452  0048BE                     _EEPROM_read:
  5453                           	opt stack 20
  5454                           
  5455                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5456                           
  5457                           ;incstack = 0
  5458  0048BE  0100               	movlb	0	; () banked
  5459  0048C0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5460  0048C2  6EAA               	movwf	4010,c	;volatile
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5464  0048C4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5468  0048C8  9EA6               	bcf	4006,7,c	;volatile
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5472  0048CA  9CA6               	bcf	4006,6,c	;volatile
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5476  0048CC  80A6               	bsf	4006,0,c	;volatile
  5477  0048CE                     l945:
  5478  0048CE  B0A6               	btfsc	4006,0,c	;volatile
  5479  0048D0  D7FE               	goto	l945
  5480                           
  5481                           ;EEPROM.c: 81: return EEDATA;
  5482  0048D2  50A8               	movf	4008,w,c	;volatile
  5483  0048D4  0012               	return	
  5484  0048D6                     __end_of_EEPROM_read:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           intcon2	equ	0xFF1
  5494                           intcon3	equ	0xFF0
  5495                           postinc0	equ	0xFEE
  5496                           wreg	equ	0xFE8
  5497                           postdec1	equ	0xFE5
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _initUI *****************
  5507 ;; Defined at:
  5508 ;;		line 62 in file "UI.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;		None
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;		None
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      void 
  5515 ;; Registers used:
  5516 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;Total ram usage:        0 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:   12
  5529 ;; This function calls:
  5530 ;;		_change_state_to_menu_start
  5531 ;;		_loadRTC
  5532 ;; This function is called by:
  5533 ;;		_main
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text16
  5538  004690                     __ptext16:
  5539                           	opt stack 0
  5540  004690                     _initUI:
  5541                           	opt stack 18
  5542                           
  5543                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5544                           
  5545                           ;incstack = 0
  5546  004690  8EF2               	bsf	intcon,7,c	;volatile
  5547                           
  5548                           ;UI.c: 64: machine_state = UI_state;
  5549  004692  0E00               	movlw	0
  5550  004694  0100               	movlb	0	; () banked
  5551  004696  6FFC               	movwf	_machine_state& (0+255),b
  5552                           
  5553                           ;UI.c: 65: logstate = 0;
  5554  004698  0E00               	movlw	0
  5555  00469A  0100               	movlb	0	; () banked
  5556  00469C  6FF7               	movwf	(_logstate+1)& (0+255),b
  5557  00469E  0E00               	movlw	0
  5558  0046A0  6FF6               	movwf	_logstate& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;UI.c: 67: if(RTCflag){
  5562  0046A2  0100               	movlb	0	; () banked
  5563  0046A4  51DE               	movf	_RTCflag& (0+255),w,b
  5564  0046A6  0100               	movlb	0	; () banked
  5565  0046A8  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5566  0046AA  A4D8               	btfss	status,2,c
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;UI.c: 68: loadRTC();
  5570  0046AC  EC4D  F01D         	call	_loadRTC	;wreg free
  5571                           
  5572                           ;UI.c: 69: }
  5573                           ;UI.c: 71: change_state_to_menu_start();
  5574  0046B0  EC8D  F023         	call	_change_state_to_menu_start	;wreg free
  5575                           
  5576                           ;UI.c: 72: firstboot = 1;
  5577  0046B4  0E00               	movlw	0
  5578  0046B6  6E76               	movwf	_firstboot+1,c
  5579  0046B8  0E01               	movlw	1
  5580  0046BA  6E75               	movwf	_firstboot,c
  5581  0046BC  0012               	return		;funcret
  5582  0046BE                     __end_of_initUI:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           intcon2	equ	0xFF1
  5592                           intcon3	equ	0xFF0
  5593                           postinc0	equ	0xFEE
  5594                           wreg	equ	0xFE8
  5595                           postdec1	equ	0xFE5
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _loadRTC *****************
  5605 ;; Defined at:
  5606 ;;		line 28 in file "RTC.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  i               2   22[BANK0 ] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;Total ram usage:        3 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    9
  5627 ;; This function calls:
  5628 ;;		_I2C_Master_Init
  5629 ;;		_I2C_Master_Start
  5630 ;;		_I2C_Master_Stop
  5631 ;;		_I2C_Master_Write
  5632 ;; This function is called by:
  5633 ;;		_initUI
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text17
  5638  003A9A                     __ptext17:
  5639                           	opt stack 0
  5640  003A9A                     _loadRTC:
  5641                           	opt stack 20
  5642                           
  5643                           ;RTC.c: 30: I2C_Master_Init(10000);
  5644                           
  5645                           ;incstack = 0
  5646  003A9A  0E10               	movlw	16
  5647  003A9C  0100               	movlb	0	; () banked
  5648  003A9E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5649  003AA0  0E27               	movlw	39
  5650  003AA2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5651  003AA4  0E00               	movlw	0
  5652  003AA6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5653  003AA8  0E00               	movlw	0
  5654  003AAA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5655  003AAC  ECE2  F01F         	call	_I2C_Master_Init	;wreg free
  5656                           
  5657                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5658  003AB0  9EF2               	bcf	intcon,7,c	;volatile
  5659                           
  5660                           ;RTC.c: 34: I2C_Master_Start();
  5661  003AB2  ECC2  F024         	call	_I2C_Master_Start	;wreg free
  5662                           
  5663                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5664  003AB6  0E00               	movlw	0
  5665  003AB8  0100               	movlb	0	; () banked
  5666  003ABA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5667  003ABC  0ED0               	movlw	208
  5668  003ABE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5669  003AC0  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  5670                           
  5671                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5672  003AC4  0E00               	movlw	0
  5673  003AC6  0100               	movlb	0	; () banked
  5674  003AC8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5675  003ACA  0E00               	movlw	0
  5676  003ACC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5677  003ACE  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  5678                           
  5679                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5680  003AD2  0E00               	movlw	0
  5681  003AD4  0100               	movlb	0	; () banked
  5682  003AD6  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5683  003AD8  0E00               	movlw	0
  5684  003ADA  6F96               	movwf	loadRTC@i& (0+255),b
  5685  003ADC                     l6289:
  5686                           
  5687                           ; BSR set to: 0
  5688  003ADC  0100               	movlb	0	; () banked
  5689  003ADE  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5690  003AE0  D008               	goto	l6293
  5691  003AE2  0100               	movlb	0	; () banked
  5692  003AE4  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5693  003AE6  E11B               	bnz	l6299
  5694  003AE8  0E07               	movlw	7
  5695  003AEA  0100               	movlb	0	; () banked
  5696  003AEC  5D96               	subwf	loadRTC@i& (0+255),w,b
  5697  003AEE  B0D8               	btfsc	status,0,c
  5698  003AF0  D016               	goto	l6299
  5699  003AF2                     l6293:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5703  003AF2  0E24               	movlw	low _time
  5704  003AF4  0100               	movlb	0	; () banked
  5705  003AF6  2596               	addwf	loadRTC@i& (0+255),w,b
  5706  003AF8  6ED9               	movwf	fsr2l,c
  5707  003AFA  0E01               	movlw	high _time
  5708  003AFC  0100               	movlb	0	; () banked
  5709  003AFE  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5710  003B00  6EDA               	movwf	fsr2h,c
  5711  003B02  50DF               	movf	indf2,w,c
  5712  003B04  0100               	movlb	0	; () banked
  5713  003B06  6F95               	movwf	??_loadRTC& (0+255),b
  5714  003B08  0100               	movlb	0	; () banked
  5715  003B0A  5195               	movf	??_loadRTC& (0+255),w,b
  5716  003B0C  0100               	movlb	0	; () banked
  5717  003B0E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5718  003B10  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5719  003B12  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  5720  003B16  0100               	movlb	0	; () banked
  5721  003B18  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5722  003B1A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5723  003B1C  D7DF               	goto	l6289
  5724  003B1E                     l6299:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;RTC.c: 39: }
  5728                           ;RTC.c: 40: I2C_Master_Stop();
  5729  003B1E  ECBE  F024         	call	_I2C_Master_Stop	;wreg free
  5730                           
  5731                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5732  003B22  8EF2               	bsf	intcon,7,c	;volatile
  5733  003B24  0012               	return		;funcret
  5734  003B26                     __end_of_loadRTC:
  5735                           	opt stack 0
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           prodh	equ	0xFF4
  5741                           prodl	equ	0xFF3
  5742                           intcon	equ	0xFF2
  5743                           intcon2	equ	0xFF1
  5744                           intcon3	equ	0xFF0
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           postdec1	equ	0xFE5
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _I2C_Master_Init *****************
  5757 ;; Defined at:
  5758 ;;		line 15 in file "I2C.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  c               4   13[BANK0 ] const unsigned long 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;Total ram usage:        8 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    8
  5779 ;; This function calls:
  5780 ;;		___lldiv
  5781 ;; This function is called by:
  5782 ;;		_main
  5783 ;;		_loadRTC
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text18
  5788  003FC4                     __ptext18:
  5789                           	opt stack 0
  5790  003FC4                     _I2C_Master_Init:
  5791                           	opt stack 20
  5792                           
  5793                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5794                           
  5795                           ;incstack = 0
  5796  003FC4  0E00               	movlw	0
  5797  003FC6  6EC7               	movwf	4039,c	;volatile
  5798                           
  5799                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5800  003FC8  0E28               	movlw	40
  5801  003FCA  6EC6               	movwf	4038,c	;volatile
  5802                           
  5803                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5804  003FCC  0E00               	movlw	0
  5805  003FCE  6EC5               	movwf	4037,c	;volatile
  5806                           
  5807                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5808  003FD0  0E00               	movlw	0
  5809  003FD2  0100               	movlb	0	; () banked
  5810  003FD4  6F80               	movwf	___lldiv@dividend& (0+255),b
  5811  003FD6  0E48               	movlw	72
  5812  003FD8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5813  003FDA  0EE8               	movlw	232
  5814  003FDC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5815  003FDE  0E01               	movlw	1
  5816  003FE0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5817  003FE2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5818  003FE6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5819  003FEA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5820  003FEE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5821  003FF2  0E02               	movlw	2
  5822  003FF4                     u4605:
  5823  003FF4  90D8               	bcf	status,0,c
  5824  003FF6  0100               	movlb	0	; () banked
  5825  003FF8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5826  003FFA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5827  003FFC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5828  003FFE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5829  004000  2EE8               	decfsz	wreg,f,c
  5830  004002  D7F8               	goto	u4605
  5831  004004  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5832  004008  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5833  00400C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5834  004010  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5835  004014  EC49  F01C         	call	___lldiv	;wreg free
  5836  004018  0100               	movlb	0	; () banked
  5837  00401A  0580               	decf	?___lldiv& (0+255),w,b
  5838  00401C  6EC8               	movwf	4040,c	;volatile
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;I2C.c: 22: TRISC3 = 1;
  5842  00401E  8694               	bsf	3988,3,c	;volatile
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;I2C.c: 23: TRISC4 = 1;
  5846  004020  8894               	bsf	3988,4,c	;volatile
  5847                           
  5848                           ; BSR set to: 0
  5849  004022  0012               	return		;funcret
  5850  004024                     __end_of_I2C_Master_Init:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           intcon2	equ	0xFF1
  5860                           intcon3	equ	0xFF0
  5861                           postinc0	equ	0xFEE
  5862                           wreg	equ	0xFE8
  5863                           postdec1	equ	0xFE5
  5864                           fsr1l	equ	0xFE1
  5865                           indf2	equ	0xFDF
  5866                           postinc2	equ	0xFDE
  5867                           postdec2	equ	0xFDD
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function ___lldiv *****************
  5873 ;; Defined at:
  5874 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  dividend        4    0[BANK0 ] unsigned long 
  5877 ;;  divisor         4    4[BANK0 ] unsigned long 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  quotient        4    8[BANK0 ] unsigned long 
  5880 ;;  counter         1   12[BANK0 ] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  4    0[BANK0 ] unsigned long 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:       13 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    7
  5897 ;; This function calls:
  5898 ;;		Nothing
  5899 ;; This function is called by:
  5900 ;;		_I2C_Master_Init
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text19
  5905  003892                     __ptext19:
  5906                           	opt stack 0
  5907  003892                     ___lldiv:
  5908                           	opt stack 20
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;incstack = 0
  5912  003892  0E00               	movlw	0
  5913  003894  0100               	movlb	0	; () banked
  5914  003896  6F88               	movwf	___lldiv@quotient& (0+255),b
  5915  003898  0E00               	movlw	0
  5916  00389A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5917  00389C  0E00               	movlw	0
  5918  00389E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5919  0038A0  0E00               	movlw	0
  5920  0038A2  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  0038A4  0100               	movlb	0	; () banked
  5924  0038A6  5184               	movf	___lldiv@divisor& (0+255),w,b
  5925  0038A8  0100               	movlb	0	; () banked
  5926  0038AA  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5927  0038AC  0100               	movlb	0	; () banked
  5928  0038AE  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5929  0038B0  0100               	movlb	0	; () banked
  5930  0038B2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5931  0038B4  B4D8               	btfsc	status,2,c
  5932  0038B6  D042               	goto	l1691
  5933                           
  5934                           ; BSR set to: 0
  5935  0038B8  0E01               	movlw	1
  5936  0038BA  0100               	movlb	0	; () banked
  5937  0038BC  6F8C               	movwf	___lldiv@counter& (0+255),b
  5938  0038BE  D008               	goto	l5725
  5939  0038C0                     l5723:
  5940                           
  5941                           ; BSR set to: 0
  5942  0038C0  0100               	movlb	0	; () banked
  5943  0038C2  90D8               	bcf	status,0,c
  5944  0038C4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5945  0038C6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5946  0038C8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5947  0038CA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5948  0038CC  0100               	movlb	0	; () banked
  5949  0038CE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5950  0038D0                     l5725:
  5951                           
  5952                           ; BSR set to: 0
  5953  0038D0  0100               	movlb	0	; () banked
  5954  0038D2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5955  0038D4  D7F5               	goto	l5723
  5956  0038D6                     l5727:
  5957                           
  5958                           ; BSR set to: 0
  5959  0038D6  0100               	movlb	0	; () banked
  5960  0038D8  90D8               	bcf	status,0,c
  5961  0038DA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5962  0038DC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5963  0038DE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5964  0038E0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 0
  5967  0038E2  0100               	movlb	0	; () banked
  5968  0038E4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5969  0038E6  0100               	movlb	0	; () banked
  5970  0038E8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5971  0038EA  0100               	movlb	0	; () banked
  5972  0038EC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5973  0038EE  0100               	movlb	0	; () banked
  5974  0038F0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5975  0038F2  0100               	movlb	0	; () banked
  5976  0038F4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5977  0038F6  0100               	movlb	0	; () banked
  5978  0038F8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5979  0038FA  0100               	movlb	0	; () banked
  5980  0038FC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5981  0038FE  0100               	movlb	0	; () banked
  5982  003900  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5983  003902  A0D8               	btfss	status,0,c
  5984  003904  D012               	goto	l5735
  5985                           
  5986                           ; BSR set to: 0
  5987  003906  0100               	movlb	0	; () banked
  5988  003908  5184               	movf	___lldiv@divisor& (0+255),w,b
  5989  00390A  0100               	movlb	0	; () banked
  5990  00390C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5991  00390E  0100               	movlb	0	; () banked
  5992  003910  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5993  003912  0100               	movlb	0	; () banked
  5994  003914  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5995  003916  0100               	movlb	0	; () banked
  5996  003918  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5997  00391A  0100               	movlb	0	; () banked
  5998  00391C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5999  00391E  0100               	movlb	0	; () banked
  6000  003920  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6001  003922  0100               	movlb	0	; () banked
  6002  003924  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6003                           
  6004                           ; BSR set to: 0
  6005  003926  0100               	movlb	0	; () banked
  6006  003928  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6007  00392A                     l5735:
  6008                           
  6009                           ; BSR set to: 0
  6010  00392A  0100               	movlb	0	; () banked
  6011  00392C  90D8               	bcf	status,0,c
  6012  00392E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6013  003930  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6014  003932  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6015  003934  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6016                           
  6017                           ; BSR set to: 0
  6018  003936  0100               	movlb	0	; () banked
  6019  003938  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6020  00393A  D7CD               	goto	l5727
  6021  00393C                     l1691:
  6022                           
  6023                           ; BSR set to: 0
  6024  00393C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6025  003940  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6026  003944  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6027  003948  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6028                           
  6029                           ; BSR set to: 0
  6030  00394C  0012               	return		;funcret
  6031  00394E                     __end_of___lldiv:
  6032                           	opt stack 0
  6033                           tblptru	equ	0xFF8
  6034                           tblptrh	equ	0xFF7
  6035                           tblptrl	equ	0xFF6
  6036                           tablat	equ	0xFF5
  6037                           prodh	equ	0xFF4
  6038                           prodl	equ	0xFF3
  6039                           intcon	equ	0xFF2
  6040                           intcon2	equ	0xFF1
  6041                           intcon3	equ	0xFF0
  6042                           postinc0	equ	0xFEE
  6043                           wreg	equ	0xFE8
  6044                           postdec1	equ	0xFE5
  6045                           fsr1l	equ	0xFE1
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _change_state_to_menu_start *****************
  6054 ;; Defined at:
  6055 ;;		line 474 in file "UI.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;		None
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;Total ram usage:        0 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:   11
  6076 ;; This function calls:
  6077 ;;		_lcdInst
  6078 ;;		_printRTC
  6079 ;;		_printf
  6080 ;; This function is called by:
  6081 ;;		_initUI
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text20
  6086  00471A                     __ptext20:
  6087                           	opt stack 0
  6088  00471A                     _change_state_to_menu_start:
  6089                           	opt stack 18
  6090                           
  6091                           ;UI.c: 475: cur_state = 0;
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;incstack = 0
  6095  00471A  0E00               	movlw	0
  6096  00471C  0100               	movlb	0	; () banked
  6097  00471E  6FE1               	movwf	(_cur_state+1)& (0+255),b
  6098  004720  0E00               	movlw	0
  6099  004722  6FE0               	movwf	_cur_state& (0+255),b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;UI.c: 477: lcdInst(0b10000000);;
  6103  004724  0E80               	movlw	128
  6104  004726  EC9C  F024         	call	_lcdInst
  6105                           
  6106                           ;UI.c: 478: printRTC();
  6107  00472A  ECD0  F00F         	call	_printRTC	;wreg free
  6108                           
  6109                           ;UI.c: 479: lcdInst(0b11000000);;
  6110  00472E  0EC0               	movlw	192
  6111  004730  EC9C  F024         	call	_lcdInst
  6112                           
  6113                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6114  004734  0EF7               	movlw	low STR_30
  6115  004736  0100               	movlb	0	; () banked
  6116  004738  6F8E               	movwf	printf@f& (0+255),b
  6117  00473A  0EFD               	movlw	high STR_30
  6118  00473C  0100               	movlb	0	; () banked
  6119  00473E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6120  004740  ECB8  F008         	call	_printf	;wreg free
  6121  004744  0012               	return		;funcret
  6122  004746                     __end_of_change_state_to_menu_start:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           intcon	equ	0xFF2
  6131                           intcon2	equ	0xFF1
  6132                           intcon3	equ	0xFF0
  6133                           postinc0	equ	0xFEE
  6134                           wreg	equ	0xFE8
  6135                           postdec1	equ	0xFE5
  6136                           fsr1l	equ	0xFE1
  6137                           indf2	equ	0xFDF
  6138                           postinc2	equ	0xFDE
  6139                           postdec2	equ	0xFDD
  6140                           fsr2h	equ	0xFDA
  6141                           fsr2l	equ	0xFD9
  6142                           status	equ	0xFD8
  6143                           
  6144 ;; *************** function _initTime *****************
  6145 ;; Defined at:
  6146 ;;		line 17 in file "RTC.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;  s               1    wreg     unsigned char 
  6149 ;;  m               1    0[BANK0 ] unsigned char 
  6150 ;;  h               1    1[BANK0 ] unsigned char 
  6151 ;;  w               1    2[BANK0 ] unsigned char 
  6152 ;;  DD              1    3[BANK0 ] unsigned char 
  6153 ;;  MM              1    4[BANK0 ] unsigned char 
  6154 ;;  YY              1    5[BANK0 ] unsigned char 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  s               1    6[BANK0 ] unsigned char 
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      void 
  6159 ;; Registers used:
  6160 ;;		wreg
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6166 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;Total ram usage:        7 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    7
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_main
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text21
  6181  00487E                     __ptext21:
  6182                           	opt stack 0
  6183  00487E                     _initTime:
  6184                           	opt stack 23
  6185                           
  6186                           ;incstack = 0
  6187                           ;initTime@s stored from wreg
  6188  00487E  0100               	movlb	0	; () banked
  6189  004880  6F86               	movwf	initTime@s& (0+255),b
  6190                           
  6191                           ;RTC.c: 19: time[0] = s;
  6192  004882  C086  F124         	movff	initTime@s,_time
  6193                           
  6194                           ;RTC.c: 20: time[1] = m;
  6195  004886  C080  F125         	movff	initTime@m,_time+1
  6196                           
  6197                           ;RTC.c: 21: time[2] = h;
  6198  00488A  C081  F126         	movff	initTime@h,_time+2
  6199                           
  6200                           ;RTC.c: 22: time[3] = w;
  6201  00488E  C082  F127         	movff	initTime@w,_time+3
  6202                           
  6203                           ;RTC.c: 23: time[4] = DD;
  6204  004892  C083  F128         	movff	initTime@DD,_time+4
  6205                           
  6206                           ;RTC.c: 24: time[5] = MM;
  6207  004896  C084  F129         	movff	initTime@MM,_time+5
  6208                           
  6209                           ;RTC.c: 25: time[6] = YY;
  6210  00489A  C085  F12A         	movff	initTime@YY,_time+6
  6211  00489E  0012               	return		;funcret
  6212  0048A0                     __end_of_initTime:
  6213                           	opt stack 0
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           prodh	equ	0xFF4
  6219                           prodl	equ	0xFF3
  6220                           intcon	equ	0xFF2
  6221                           intcon2	equ	0xFF1
  6222                           intcon3	equ	0xFF0
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           postdec1	equ	0xFE5
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function _initLCD *****************
  6235 ;; Defined at:
  6236 ;;		line 48 in file "lcd.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;		None
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg, status,2, status,0, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    9
  6257 ;; This function calls:
  6258 ;;		_lcdInst
  6259 ;; This function is called by:
  6260 ;;		_main
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text22
  6265  004318                     __ptext22:
  6266                           	opt stack 0
  6267  004318                     _initLCD:
  6268                           	opt stack 21
  6269                           
  6270                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6271                           
  6272                           ;incstack = 0
  6273  004318  0E9C               	movlw	156
  6274  00431A  0100               	movlb	0	; () banked
  6275  00431C  6F83               	movwf	??_initLCD& (0+255),b
  6276  00431E  0ED7               	movlw	215
  6277  004320                     u7507:
  6278  004320  2EE8               	decfsz	wreg,f,c
  6279  004322  D7FE               	bra	u7507
  6280  004324  2F83               	decfsz	??_initLCD& (0+255),f,b
  6281  004326  D7FC               	bra	u7507
  6282                           
  6283                           ;lcd.c: 50: lcdInst(0b00110011);
  6284  004328  0E33               	movlw	51
  6285  00432A  EC9C  F024         	call	_lcdInst
  6286                           
  6287                           ;lcd.c: 51: lcdInst(0b00110010);
  6288  00432E  0E32               	movlw	50
  6289  004330  EC9C  F024         	call	_lcdInst
  6290                           
  6291                           ;lcd.c: 53: lcdInst(0b00101000);
  6292  004334  0E28               	movlw	40
  6293  004336  EC9C  F024         	call	_lcdInst
  6294                           
  6295                           ;lcd.c: 54: lcdInst(0b00001100);
  6296  00433A  0E0C               	movlw	12
  6297  00433C  EC9C  F024         	call	_lcdInst
  6298                           
  6299                           ;lcd.c: 55: lcdInst(0b00000110);
  6300  004340  0E06               	movlw	6
  6301  004342  EC9C  F024         	call	_lcdInst
  6302                           
  6303                           ;lcd.c: 56: lcdInst(0b00000001);
  6304  004346  0E01               	movlw	1
  6305  004348  EC9C  F024         	call	_lcdInst
  6306                           
  6307                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6308  00434C  0E9C               	movlw	156
  6309  00434E  0100               	movlb	0	; () banked
  6310  004350  6F83               	movwf	??_initLCD& (0+255),b
  6311  004352  0ED7               	movlw	215
  6312  004354                     u7517:
  6313  004354  2EE8               	decfsz	wreg,f,c
  6314  004356  D7FE               	bra	u7517
  6315  004358  2F83               	decfsz	??_initLCD& (0+255),f,b
  6316  00435A  D7FC               	bra	u7517
  6317  00435C  0012               	return		;funcret
  6318  00435E                     __end_of_initLCD:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           intcon2	equ	0xFF1
  6328                           intcon3	equ	0xFF0
  6329                           postinc0	equ	0xFEE
  6330                           wreg	equ	0xFE8
  6331                           postdec1	equ	0xFE5
  6332                           fsr1l	equ	0xFE1
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _UI *****************
  6341 ;; Defined at:
  6342 ;;		line 76 in file "UI.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  i               1   73[BANK0 ] unsigned char 
  6347 ;;  i               1   85[BANK0 ] unsigned char 
  6348 ;;  i               1   84[BANK0 ] unsigned char 
  6349 ;;  i               1   83[BANK0 ] unsigned char 
  6350 ;;  i               1   82[BANK0 ] unsigned char 
  6351 ;;  i               1   81[BANK0 ] unsigned char 
  6352 ;;  i               1   80[BANK0 ] unsigned char 
  6353 ;;  i               1   79[BANK0 ] unsigned char 
  6354 ;;  i               1   78[BANK0 ] unsigned char 
  6355 ;;  i               1   77[BANK0 ] unsigned char 
  6356 ;;  i               1   76[BANK0 ] unsigned char 
  6357 ;;  i               1   75[BANK0 ] unsigned char 
  6358 ;;  i               1   74[BANK0 ] unsigned char 
  6359 ;;  month           4   86[BANK0 ] unsigned char [4]
  6360 ;;  i               1   72[BANK0 ] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;Total ram usage:       22 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:   11
  6377 ;; This function calls:
  6378 ;;		___awdiv
  6379 ;;		___awmod
  6380 ;;		_change_state_to_menu_12
  6381 ;;		_change_state_to_menu_22
  6382 ;;		_lcdInst
  6383 ;;		_printRTC
  6384 ;;		_printf
  6385 ;;		_strcpy
  6386 ;; This function is called by:
  6387 ;;		_main
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text23
  6392  0008CA                     __ptext23:
  6393                           	opt stack 0
  6394  0008CA                     _UI:
  6395                           	opt stack 19
  6396                           
  6397                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6398                           
  6399                           ;incstack = 0
  6400  0008CA  0E02               	movlw	2
  6401  0008CC  0100               	movlb	0	; () banked
  6402  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6403  0008D0  A4D8               	btfss	status,2,c
  6404  0008D2  D075               	goto	l7545
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6408  0008D4  0E01               	movlw	1
  6409  0008D6  EC9C  F024         	call	_lcdInst
  6410  0008DA  0E68               	movlw	104
  6411  0008DC  0100               	movlb	0	; () banked
  6412  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6413  0008E0  0EE4               	movlw	228
  6414  0008E2                     u7527:
  6415  0008E2  2EE8               	decfsz	wreg,f,c
  6416  0008E4  D7FE               	bra	u7527
  6417  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6418  0008E8  D7FC               	bra	u7527
  6419  0008EA  F000               	nop	
  6420                           
  6421                           ;UI.c: 79: lcdInst(0b10000000);;
  6422  0008EC  0E80               	movlw	128
  6423  0008EE  EC9C  F024         	call	_lcdInst
  6424                           
  6425                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6426  0008F2  0EA3               	movlw	low STR_1
  6427  0008F4  0100               	movlb	0	; () banked
  6428  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6429  0008F8  0EFB               	movlw	high STR_1
  6430  0008FA  0100               	movlb	0	; () banked
  6431  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6432  0008FE  0E01               	movlw	1
  6433  000900  0100               	movlb	0	; () banked
  6434  000902  25FD               	addwf	_sel& (0+255),w,b
  6435  000904  0100               	movlb	0	; () banked
  6436  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6437  000908  0100               	movlb	0	; () banked
  6438  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6439  00090C  0E00               	movlw	0
  6440  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6441  000910  ECB8  F008         	call	_printf	;wreg free
  6442                           
  6443                           ;UI.c: 81: lcdInst(0b11000000);;
  6444  000914  0EC0               	movlw	192
  6445  000916  EC9C  F024         	call	_lcdInst
  6446                           
  6447                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6448  00091A  0E0E               	movlw	14
  6449  00091C  0100               	movlb	0	; () banked
  6450  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6451  000920  0E10               	movlw	16
  6452  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6453  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6454  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6455  00092C  ECFC  F01C         	call	___awmod	;wreg free
  6456  000930  C080  F0C6         	movff	?___awmod,_UI$2313
  6457  000934  C081  F0C7         	movff	?___awmod+1,_UI$2313+1
  6458                           
  6459                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6460  000938  0E27               	movlw	low STR_2
  6461  00093A  0100               	movlb	0	; () banked
  6462  00093C  6F8E               	movwf	printf@f& (0+255),b
  6463  00093E  0EFF               	movlw	high STR_2
  6464  000940  0100               	movlb	0	; () banked
  6465  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6466  000944  0E0E               	movlw	14
  6467  000946  0100               	movlb	0	; () banked
  6468  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6469  00094A  0E10               	movlw	16
  6470  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6471  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6472  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6473  000956  ECFC  F01C         	call	___awmod	;wreg free
  6474  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6475  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6476  000962  0E00               	movlw	0
  6477  000964  0100               	movlb	0	; () banked
  6478  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6479  000968  0E3C               	movlw	60
  6480  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6481  00096C  ECEA  F01B         	call	___awdiv	;wreg free
  6482  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6483  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6484  000978  C0C6  F080         	movff	_UI$2313,___awmod@dividend
  6485  00097C  C0C7  F081         	movff	_UI$2313+1,___awmod@dividend+1
  6486  000980  0E00               	movlw	0
  6487  000982  0100               	movlb	0	; () banked
  6488  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6489  000986  0E3C               	movlw	60
  6490  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6491  00098A  ECFC  F01C         	call	___awmod	;wreg free
  6492  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6493  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6494  000996  ECB8  F008         	call	_printf	;wreg free
  6495                           
  6496                           ;UI.c: 83: machine_state = UI_state;
  6497  00099A  0E00               	movlw	0
  6498  00099C  0100               	movlb	0	; () banked
  6499  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6500  0009A0                     l180:
  6501  0009A0  A281               	btfss	3969,1,c	;volatile
  6502  0009A2  D7FE               	goto	l180
  6503                           
  6504                           ;UI.c: 86: }
  6505                           ;UI.c: 87: if(cur_state==12){
  6506  0009A4  0E0C               	movlw	12
  6507  0009A6  0100               	movlb	0	; () banked
  6508  0009A8  19E0               	xorwf	_cur_state& (0+255),w,b
  6509  0009AA  0100               	movlb	0	; () banked
  6510  0009AC  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6511  0009AE  A4D8               	btfss	status,2,c
  6512  0009B0  D003               	goto	l7543
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;UI.c: 88: change_state_to_menu_12();
  6516  0009B2  ECEC  F021         	call	_change_state_to_menu_12	;wreg free
  6517                           
  6518                           ;UI.c: 89: }
  6519  0009B6  D3D5               	goto	l7865
  6520  0009B8                     l7543:
  6521                           
  6522                           ;UI.c: 90: else{
  6523                           ;UI.c: 91: change_state_to_menu_22();
  6524  0009B8  ECD0  F021         	call	_change_state_to_menu_22	;wreg free
  6525                           
  6526                           ;UI.c: 92: }
  6527                           ;UI.c: 93: }
  6528  0009BC  D3D2               	goto	l7865
  6529  0009BE                     l7545:
  6530                           
  6531                           ;UI.c: 94: else if(cur_state == 0){
  6532  0009BE  0100               	movlb	0	; () banked
  6533  0009C0  51E0               	movf	_cur_state& (0+255),w,b
  6534  0009C2  0100               	movlb	0	; () banked
  6535  0009C4  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6536  0009C6  A4D8               	btfss	status,2,c
  6537  0009C8  D3CC               	goto	l7865
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6541  0009CA  0E00               	movlw	0
  6542  0009CC  0100               	movlb	0	; () banked
  6543  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6544  0009D0                     l7549:
  6545                           
  6546                           ; BSR set to: 0
  6547  0009D0  0E63               	movlw	99
  6548  0009D2  0100               	movlb	0	; () banked
  6549  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6550  0009D6  D001               	goto	l7553
  6551  0009D8  D00C               	goto	l7557
  6552  0009DA                     l7553:
  6553                           
  6554                           ; BSR set to: 0
  6555  0009DA  0E68               	movlw	104
  6556  0009DC  0100               	movlb	0	; () banked
  6557  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6558  0009E0  0EE4               	movlw	228
  6559  0009E2                     u7537:
  6560  0009E2  2EE8               	decfsz	wreg,f,c
  6561  0009E4  D7FE               	bra	u7537
  6562  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6563  0009E8  D7FC               	bra	u7537
  6564  0009EA  F000               	nop	
  6565  0009EC  0100               	movlb	0	; () banked
  6566  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6567  0009F0  D7EF               	goto	l7549
  6568  0009F2                     l7557:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;UI.c: 96: if(cur_state == 0){
  6572  0009F2  0100               	movlb	0	; () banked
  6573  0009F4  51E0               	movf	_cur_state& (0+255),w,b
  6574  0009F6  0100               	movlb	0	; () banked
  6575  0009F8  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
  6576  0009FA  A4D8               	btfss	status,2,c
  6577  0009FC  D3B2               	goto	l7865
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;UI.c: 97: printRTC();
  6581  0009FE  ECD0  F00F         	call	_printRTC	;wreg free
  6582                           
  6583                           ;UI.c: 98: }
  6584                           ;UI.c: 99: }
  6585                           ;UI.c: 100: while(logstate){
  6586  000A02  D3AF               	goto	l7865
  6587  000A04                     l7561:
  6588                           
  6589                           ;UI.c: 102: if(!log_completion){
  6590  000A04  0100               	movlb	0	; () banked
  6591  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6592  000A08  0100               	movlb	0	; () banked
  6593  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6594  000A0C  A4D8               	btfss	status,2,c
  6595  000A0E  D041               	goto	l7591
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6599  000A10  0E01               	movlw	1
  6600  000A12  EC9C  F024         	call	_lcdInst
  6601  000A16  0E68               	movlw	104
  6602  000A18  0100               	movlb	0	; () banked
  6603  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6604  000A1C  0EE4               	movlw	228
  6605  000A1E                     u7547:
  6606  000A1E  2EE8               	decfsz	wreg,f,c
  6607  000A20  D7FE               	bra	u7547
  6608  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6609  000A24  D7FC               	bra	u7547
  6610  000A26  F000               	nop	
  6611                           
  6612                           ;UI.c: 104: lcdInst(0b10000000);;
  6613  000A28  0E80               	movlw	128
  6614  000A2A  EC9C  F024         	call	_lcdInst
  6615                           
  6616                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6617  000A2E  0E91               	movlw	low STR_3
  6618  000A30  0100               	movlb	0	; () banked
  6619  000A32  6F8E               	movwf	printf@f& (0+255),b
  6620  000A34  0EFB               	movlw	high STR_3
  6621  000A36  0100               	movlb	0	; () banked
  6622  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6623  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6624  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6625  000A42  ECB8  F008         	call	_printf	;wreg free
  6626                           
  6627                           ;UI.c: 106: lcdInst(0b11000000);;
  6628  000A46  0EC0               	movlw	192
  6629  000A48  EC9C  F024         	call	_lcdInst
  6630                           
  6631                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6632  000A4C  0E4A               	movlw	low STR_4
  6633  000A4E  0100               	movlb	0	; () banked
  6634  000A50  6F8E               	movwf	printf@f& (0+255),b
  6635  000A52  0EFE               	movlw	high STR_4
  6636  000A54  0100               	movlb	0	; () banked
  6637  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6638  000A58  ECB8  F008         	call	_printf	;wreg free
  6639  000A5C                     l7575:
  6640  000A5C  0E00               	movlw	0
  6641  000A5E  0100               	movlb	0	; () banked
  6642  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6643  000A62                     l7577:
  6644                           
  6645                           ; BSR set to: 0
  6646  000A62  0E63               	movlw	99
  6647  000A64  0100               	movlb	0	; () banked
  6648  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6649  000A68  D001               	goto	l7581
  6650  000A6A  D00C               	goto	l7585
  6651  000A6C                     l7581:
  6652                           
  6653                           ; BSR set to: 0
  6654  000A6C  0E68               	movlw	104
  6655  000A6E  0100               	movlb	0	; () banked
  6656  000A70  6FC4               	movwf	??_UI& (0+255),b
  6657  000A72  0EE4               	movlw	228
  6658  000A74                     u7557:
  6659  000A74  2EE8               	decfsz	wreg,f,c
  6660  000A76  D7FE               	bra	u7557
  6661  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6662  000A7A  D7FC               	bra	u7557
  6663  000A7C  F000               	nop	
  6664  000A7E  0100               	movlb	0	; () banked
  6665  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6666  000A82  D7EF               	goto	l7577
  6667  000A84                     l7585:
  6668                           
  6669                           ; BSR set to: 0
  6670  000A84  0100               	movlb	0	; () banked
  6671  000A86  51F6               	movf	_logstate& (0+255),w,b
  6672  000A88  0100               	movlb	0	; () banked
  6673  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6674  000A8C  B4D8               	btfsc	status,2,c
  6675  000A8E  0012               	return	
  6676  000A90  D7E5               	goto	l7575
  6677  000A92                     l7591:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;UI.c: 111: else{
  6681                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6682  000A92  0E01               	movlw	1
  6683  000A94  EC9C  F024         	call	_lcdInst
  6684  000A98  0E68               	movlw	104
  6685  000A9A  0100               	movlb	0	; () banked
  6686  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6687  000A9E  0EE4               	movlw	228
  6688  000AA0                     u7567:
  6689  000AA0  2EE8               	decfsz	wreg,f,c
  6690  000AA2  D7FE               	bra	u7567
  6691  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6692  000AA6  D7FC               	bra	u7567
  6693  000AA8  F000               	nop	
  6694                           
  6695                           ;UI.c: 113: lcdInst(0b10000000);;
  6696  000AAA  0E80               	movlw	128
  6697  000AAC  EC9C  F024         	call	_lcdInst
  6698                           
  6699                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6700  000AB0  0E91               	movlw	low STR_3
  6701  000AB2  0100               	movlb	0	; () banked
  6702  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6703  000AB6  0EFB               	movlw	high STR_3
  6704  000AB8  0100               	movlb	0	; () banked
  6705  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6706  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6707  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6708  000AC4  ECB8  F008         	call	_printf	;wreg free
  6709                           
  6710                           ;UI.c: 115: lcdInst(0b11000000);;
  6711  000AC8  0EC0               	movlw	192
  6712  000ACA  EC9C  F024         	call	_lcdInst
  6713                           
  6714                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6715  000ACE  0EE6               	movlw	low STR_6
  6716  000AD0  0100               	movlb	0	; () banked
  6717  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6718  000AD4  0EFD               	movlw	high STR_6
  6719  000AD6  0100               	movlb	0	; () banked
  6720  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6721  000ADA  ECB8  F008         	call	_printf	;wreg free
  6722                           
  6723                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6724  000ADE  0E00               	movlw	0
  6725  000AE0  0100               	movlb	0	; () banked
  6726  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6727  000AE4                     l7605:
  6728                           
  6729                           ; BSR set to: 0
  6730  000AE4  0E63               	movlw	99
  6731  000AE6  0100               	movlb	0	; () banked
  6732  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6733  000AEA  D001               	goto	l7609
  6734  000AEC  D00C               	goto	l7613
  6735  000AEE                     l7609:
  6736                           
  6737                           ; BSR set to: 0
  6738  000AEE  0E68               	movlw	104
  6739  000AF0  0100               	movlb	0	; () banked
  6740  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6741  000AF4  0EE4               	movlw	228
  6742  000AF6                     u7577:
  6743  000AF6  2EE8               	decfsz	wreg,f,c
  6744  000AF8  D7FE               	bra	u7577
  6745  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6746  000AFC  D7FC               	bra	u7577
  6747  000AFE  F000               	nop	
  6748  000B00  0100               	movlb	0	; () banked
  6749  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6750  000B04  D7EF               	goto	l7605
  6751  000B06                     l7613:
  6752                           
  6753                           ; BSR set to: 0
  6754  000B06  0100               	movlb	0	; () banked
  6755  000B08  51F6               	movf	_logstate& (0+255),w,b
  6756  000B0A  0100               	movlb	0	; () banked
  6757  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6758  000B0E  B4D8               	btfsc	status,2,c
  6759  000B10  0012               	return	
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6763                           
  6764                           ; BSR set to: 0
  6765                           
  6766                           ; BSR set to: 0
  6767  000B12  0E00               	movlw	0
  6768  000B14  0100               	movlb	0	; () banked
  6769  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6770  000B18                     l7619:
  6771                           
  6772                           ; BSR set to: 0
  6773  000B18  0E63               	movlw	99
  6774  000B1A  0100               	movlb	0	; () banked
  6775  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6776  000B1E  D001               	goto	l7623
  6777  000B20  D00C               	goto	l7627
  6778  000B22                     l7623:
  6779                           
  6780                           ; BSR set to: 0
  6781  000B22  0E68               	movlw	104
  6782  000B24  0100               	movlb	0	; () banked
  6783  000B26  6FC4               	movwf	??_UI& (0+255),b
  6784  000B28  0EE4               	movlw	228
  6785  000B2A                     u7587:
  6786  000B2A  2EE8               	decfsz	wreg,f,c
  6787  000B2C  D7FE               	bra	u7587
  6788  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6789  000B30  D7FC               	bra	u7587
  6790  000B32  F000               	nop	
  6791  000B34  0100               	movlb	0	; () banked
  6792  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6793  000B38  D7EF               	goto	l7619
  6794  000B3A                     l7627:
  6795                           
  6796                           ; BSR set to: 0
  6797  000B3A  0100               	movlb	0	; () banked
  6798  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6799  000B3E  0100               	movlb	0	; () banked
  6800  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6801  000B42  B4D8               	btfsc	status,2,c
  6802  000B44  0012               	return	
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6806                           
  6807                           ; BSR set to: 0
  6808                           
  6809                           ; BSR set to: 0
  6810  000B46  0E01               	movlw	1
  6811  000B48  EC9C  F024         	call	_lcdInst
  6812  000B4C  0E68               	movlw	104
  6813  000B4E  0100               	movlb	0	; () banked
  6814  000B50  6FC4               	movwf	??_UI& (0+255),b
  6815  000B52  0EE4               	movlw	228
  6816  000B54                     u7597:
  6817  000B54  2EE8               	decfsz	wreg,f,c
  6818  000B56  D7FE               	bra	u7597
  6819  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6820  000B5A  D7FC               	bra	u7597
  6821  000B5C  F000               	nop	
  6822                           
  6823                           ;UI.c: 122: lcdInst(0b10000000);;
  6824  000B5E  0E80               	movlw	128
  6825  000B60  EC9C  F024         	call	_lcdInst
  6826                           
  6827                           ;UI.c: 123: printf("START:");
  6828  000B64  0EC4               	movlw	low STR_7
  6829  000B66  0100               	movlb	0	; () banked
  6830  000B68  6F8E               	movwf	printf@f& (0+255),b
  6831  000B6A  0EFF               	movlw	high STR_7
  6832  000B6C  0100               	movlb	0	; () banked
  6833  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6834  000B70  ECB8  F008         	call	_printf	;wreg free
  6835                           
  6836                           ;UI.c: 124: lcdInst(0b11000000);;
  6837  000B74  0EC0               	movlw	192
  6838  000B76  EC9C  F024         	call	_lcdInst
  6839                           
  6840                           ;UI.c: 125: char month[] = "MMM";
  6841  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6842  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6843  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6844  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6845                           
  6846                           ;UI.c: 126: switch(log_startTime[5]){
  6847  000B8A  D0C3               	goto	l7671
  6848  000B8C                     l7643:
  6849                           
  6850                           ;UI.c: 128: strcpy(month, "JAN");
  6851  000B8C  0ED6               	movlw	low UI@month
  6852  000B8E  0100               	movlb	0	; () banked
  6853  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6854  000B92  0E00               	movlw	high UI@month
  6855  000B94  0100               	movlb	0	; () banked
  6856  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6857  000B98  0EDB               	movlw	low STR_8
  6858  000B9A  0100               	movlb	0	; () banked
  6859  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6860  000B9E  0EFF               	movlw	high STR_8
  6861  000BA0  0100               	movlb	0	; () banked
  6862  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6863  000BA4  EC08  F022         	call	_strcpy	;wreg free
  6864                           
  6865                           ;UI.c: 129: break;
  6866  000BA8  D0E6               	goto	l7673
  6867  000BAA                     l7645:
  6868                           
  6869                           ;UI.c: 131: strcpy(month, "FEB");
  6870  000BAA  0ED6               	movlw	low UI@month
  6871  000BAC  0100               	movlb	0	; () banked
  6872  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6873  000BB0  0E00               	movlw	high UI@month
  6874  000BB2  0100               	movlb	0	; () banked
  6875  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6876  000BB6  0ECB               	movlw	low STR_9
  6877  000BB8  0100               	movlb	0	; () banked
  6878  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6879  000BBC  0EFF               	movlw	high STR_9
  6880  000BBE  0100               	movlb	0	; () banked
  6881  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6882  000BC2  EC08  F022         	call	_strcpy	;wreg free
  6883                           
  6884                           ;UI.c: 132: break;
  6885  000BC6  D0D7               	goto	l7673
  6886  000BC8                     l7647:
  6887                           
  6888                           ;UI.c: 134: strcpy(month, "MAR");
  6889  000BC8  0ED6               	movlw	low UI@month
  6890  000BCA  0100               	movlb	0	; () banked
  6891  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6892  000BCE  0E00               	movlw	high UI@month
  6893  000BD0  0100               	movlb	0	; () banked
  6894  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6895  000BD4  0EE7               	movlw	low STR_10
  6896  000BD6  0100               	movlb	0	; () banked
  6897  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6898  000BDA  0EFF               	movlw	high STR_10
  6899  000BDC  0100               	movlb	0	; () banked
  6900  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6901  000BE0  EC08  F022         	call	_strcpy	;wreg free
  6902                           
  6903                           ;UI.c: 135: break;
  6904  000BE4  D0C8               	goto	l7673
  6905  000BE6                     l7649:
  6906                           
  6907                           ;UI.c: 137: strcpy(month, "APR");
  6908  000BE6  0ED6               	movlw	low UI@month
  6909  000BE8  0100               	movlb	0	; () banked
  6910  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6911  000BEC  0E00               	movlw	high UI@month
  6912  000BEE  0100               	movlb	0	; () banked
  6913  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6914  000BF2  0EEB               	movlw	low STR_11
  6915  000BF4  0100               	movlb	0	; () banked
  6916  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6917  000BF8  0EFF               	movlw	high STR_11
  6918  000BFA  0100               	movlb	0	; () banked
  6919  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6920  000BFE  EC08  F022         	call	_strcpy	;wreg free
  6921                           
  6922                           ;UI.c: 138: break;
  6923  000C02  D0B9               	goto	l7673
  6924  000C04                     l7651:
  6925                           
  6926                           ;UI.c: 140: strcpy(month, "MAY");
  6927  000C04  0ED6               	movlw	low UI@month
  6928  000C06  0100               	movlb	0	; () banked
  6929  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6930  000C0A  0E00               	movlw	high UI@month
  6931  000C0C  0100               	movlb	0	; () banked
  6932  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6933  000C10  0EFB               	movlw	low STR_12
  6934  000C12  0100               	movlb	0	; () banked
  6935  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6936  000C16  0EFF               	movlw	high STR_12
  6937  000C18  0100               	movlb	0	; () banked
  6938  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6939  000C1C  EC08  F022         	call	_strcpy	;wreg free
  6940                           
  6941                           ;UI.c: 141: break;
  6942  000C20  D0AA               	goto	l7673
  6943  000C22                     l7653:
  6944                           
  6945                           ;UI.c: 143: strcpy(month, "JUN");
  6946  000C22  0ED6               	movlw	low UI@month
  6947  000C24  0100               	movlb	0	; () banked
  6948  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6949  000C28  0E00               	movlw	high UI@month
  6950  000C2A  0100               	movlb	0	; () banked
  6951  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6952  000C2E  0EDF               	movlw	low STR_13
  6953  000C30  0100               	movlb	0	; () banked
  6954  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6955  000C34  0EFF               	movlw	high STR_13
  6956  000C36  0100               	movlb	0	; () banked
  6957  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6958  000C3A  EC08  F022         	call	_strcpy	;wreg free
  6959                           
  6960                           ;UI.c: 144: break;
  6961  000C3E  D09B               	goto	l7673
  6962  000C40                     l7655:
  6963                           
  6964                           ;UI.c: 146: strcpy(month, "JUL");
  6965  000C40  0ED6               	movlw	low UI@month
  6966  000C42  0100               	movlb	0	; () banked
  6967  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6968  000C46  0E00               	movlw	high UI@month
  6969  000C48  0100               	movlb	0	; () banked
  6970  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6971  000C4C  0ED7               	movlw	low STR_14
  6972  000C4E  0100               	movlb	0	; () banked
  6973  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6974  000C52  0EFF               	movlw	high STR_14
  6975  000C54  0100               	movlb	0	; () banked
  6976  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6977  000C58  EC08  F022         	call	_strcpy	;wreg free
  6978                           
  6979                           ;UI.c: 147: break;
  6980  000C5C  D08C               	goto	l7673
  6981  000C5E                     l7657:
  6982                           
  6983                           ;UI.c: 149: strcpy(month, "AUG");
  6984  000C5E  0ED6               	movlw	low UI@month
  6985  000C60  0100               	movlb	0	; () banked
  6986  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6987  000C64  0E00               	movlw	high UI@month
  6988  000C66  0100               	movlb	0	; () banked
  6989  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6990  000C6A  0ED3               	movlw	low STR_15
  6991  000C6C  0100               	movlb	0	; () banked
  6992  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6993  000C70  0EFF               	movlw	high STR_15
  6994  000C72  0100               	movlb	0	; () banked
  6995  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6996  000C76  EC08  F022         	call	_strcpy	;wreg free
  6997                           
  6998                           ;UI.c: 150: break;
  6999  000C7A  D07D               	goto	l7673
  7000  000C7C                     l7659:
  7001                           
  7002                           ;UI.c: 152: strcpy(month, "SEP");
  7003  000C7C  0ED6               	movlw	low UI@month
  7004  000C7E  0100               	movlb	0	; () banked
  7005  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7006  000C82  0E00               	movlw	high UI@month
  7007  000C84  0100               	movlb	0	; () banked
  7008  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7009  000C88  0EE3               	movlw	low STR_16
  7010  000C8A  0100               	movlb	0	; () banked
  7011  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7012  000C8E  0EFF               	movlw	high STR_16
  7013  000C90  0100               	movlb	0	; () banked
  7014  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7015  000C94  EC08  F022         	call	_strcpy	;wreg free
  7016                           
  7017                           ;UI.c: 153: break;
  7018  000C98  D06E               	goto	l7673
  7019  000C9A                     l7661:
  7020                           
  7021                           ;UI.c: 155: strcpy(month, "OCT");
  7022  000C9A  0ED6               	movlw	low UI@month
  7023  000C9C  0100               	movlb	0	; () banked
  7024  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7025  000CA0  0E00               	movlw	high UI@month
  7026  000CA2  0100               	movlb	0	; () banked
  7027  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7028  000CA6  0EF3               	movlw	low STR_17
  7029  000CA8  0100               	movlb	0	; () banked
  7030  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7031  000CAC  0EFF               	movlw	high STR_17
  7032  000CAE  0100               	movlb	0	; () banked
  7033  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7034  000CB2  EC08  F022         	call	_strcpy	;wreg free
  7035                           
  7036                           ;UI.c: 156: break;
  7037  000CB6  D05F               	goto	l7673
  7038  000CB8                     l7663:
  7039                           
  7040                           ;UI.c: 158: strcpy(month, "NOV");
  7041  000CB8  0ED6               	movlw	low UI@month
  7042  000CBA  0100               	movlb	0	; () banked
  7043  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7044  000CBE  0E00               	movlw	high UI@month
  7045  000CC0  0100               	movlb	0	; () banked
  7046  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7047  000CC4  0EF7               	movlw	low STR_18
  7048  000CC6  0100               	movlb	0	; () banked
  7049  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7050  000CCA  0EFF               	movlw	high STR_18
  7051  000CCC  0100               	movlb	0	; () banked
  7052  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7053  000CD0  EC08  F022         	call	_strcpy	;wreg free
  7054                           
  7055                           ;UI.c: 159: break;
  7056  000CD4  D050               	goto	l7673
  7057  000CD6                     l7665:
  7058                           
  7059                           ;UI.c: 161: strcpy(month, "DEC");
  7060  000CD6  0ED6               	movlw	low UI@month
  7061  000CD8  0100               	movlb	0	; () banked
  7062  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7063  000CDC  0E00               	movlw	high UI@month
  7064  000CDE  0100               	movlb	0	; () banked
  7065  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7066  000CE2  0ECF               	movlw	low STR_19
  7067  000CE4  0100               	movlb	0	; () banked
  7068  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7069  000CE8  0EFF               	movlw	high STR_19
  7070  000CEA  0100               	movlb	0	; () banked
  7071  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7072  000CEE  EC08  F022         	call	_strcpy	;wreg free
  7073                           
  7074                           ;UI.c: 162: break;
  7075  000CF2  D041               	goto	l7673
  7076  000CF4                     l7667:
  7077                           
  7078                           ;UI.c: 164: strcpy(month, "ERR");
  7079  000CF4  0ED6               	movlw	low UI@month
  7080  000CF6  0100               	movlb	0	; () banked
  7081  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7082  000CFA  0E00               	movlw	high UI@month
  7083  000CFC  0100               	movlb	0	; () banked
  7084  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7085  000D00  0EEF               	movlw	low STR_20
  7086  000D02  0100               	movlb	0	; () banked
  7087  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7088  000D06  0EFF               	movlw	high STR_20
  7089  000D08  0100               	movlb	0	; () banked
  7090  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7091  000D0C  EC08  F022         	call	_strcpy	;wreg free
  7092                           
  7093                           ;UI.c: 166: }
  7094                           
  7095                           ;UI.c: 165: break;
  7096  000D10  D032               	goto	l7673
  7097  000D12                     l7671:
  7098  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7099  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7100  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7101                           
  7102                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7103                           ; Switch size 1, requested type "space"
  7104                           ; Number of cases is 1, Range of values is 0 to 0
  7105                           ; switch strategies available:
  7106                           ; Name         Instructions Cycles
  7107                           ; simple_byte            4     3 (average)
  7108                           ;	Chosen strategy is simple_byte
  7109  000D1E  0100               	movlb	0	; () banked
  7110  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7111  000D22  0A00               	xorlw	0	; case 0
  7112  000D24  A4D8               	btfss	status,2,c
  7113  000D26  D7E6               	goto	l7667
  7114                           
  7115                           ; BSR set to: 0
  7116                           ; Switch size 1, requested type "space"
  7117                           ; Number of cases is 12, Range of values is 1 to 12
  7118                           ; switch strategies available:
  7119                           ; Name         Instructions Cycles
  7120                           ; simple_byte           37    19 (average)
  7121                           ;	Chosen strategy is simple_byte
  7122  000D28  0100               	movlb	0	; () banked
  7123  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7124  000D2C  0A01               	xorlw	1	; case 1
  7125  000D2E  B4D8               	btfsc	status,2,c
  7126  000D30  D72D               	goto	l7643
  7127  000D32  0A03               	xorlw	3	; case 2
  7128  000D34  B4D8               	btfsc	status,2,c
  7129  000D36  D739               	goto	l7645
  7130  000D38  0A01               	xorlw	1	; case 3
  7131  000D3A  B4D8               	btfsc	status,2,c
  7132  000D3C  D745               	goto	l7647
  7133  000D3E  0A07               	xorlw	7	; case 4
  7134  000D40  B4D8               	btfsc	status,2,c
  7135  000D42  D751               	goto	l7649
  7136  000D44  0A01               	xorlw	1	; case 5
  7137  000D46  B4D8               	btfsc	status,2,c
  7138  000D48  D75D               	goto	l7651
  7139  000D4A  0A03               	xorlw	3	; case 6
  7140  000D4C  B4D8               	btfsc	status,2,c
  7141  000D4E  D769               	goto	l7653
  7142  000D50  0A01               	xorlw	1	; case 7
  7143  000D52  B4D8               	btfsc	status,2,c
  7144  000D54  D775               	goto	l7655
  7145  000D56  0A0F               	xorlw	15	; case 8
  7146  000D58  B4D8               	btfsc	status,2,c
  7147  000D5A  D781               	goto	l7657
  7148  000D5C  0A01               	xorlw	1	; case 9
  7149  000D5E  B4D8               	btfsc	status,2,c
  7150  000D60  D78D               	goto	l7659
  7151  000D62  0A03               	xorlw	3	; case 10
  7152  000D64  B4D8               	btfsc	status,2,c
  7153  000D66  D799               	goto	l7661
  7154  000D68  0A01               	xorlw	1	; case 11
  7155  000D6A  B4D8               	btfsc	status,2,c
  7156  000D6C  D7A5               	goto	l7663
  7157  000D6E  0A07               	xorlw	7	; case 12
  7158  000D70  B4D8               	btfsc	status,2,c
  7159  000D72  D7B1               	goto	l7665
  7160  000D74  D7BF               	goto	l7667
  7161  000D76                     l7673:
  7162                           
  7163                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7164  000D76  0E1C               	movlw	low STR_21
  7165  000D78  0100               	movlb	0	; () banked
  7166  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7167  000D7C  0EFB               	movlw	high STR_21
  7168  000D7E  0100               	movlb	0	; () banked
  7169  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7170  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7171  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7172  000D8A  0ED6               	movlw	low UI@month
  7173  000D8C  0100               	movlb	0	; () banked
  7174  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7175  000D90  0E00               	movlw	high UI@month
  7176  000D92  0100               	movlb	0	; () banked
  7177  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7178  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7179  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7180  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7181  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7182  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7183  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7184  000DAE  ECB8  F008         	call	_printf	;wreg free
  7185                           
  7186                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7187  000DB2  0E00               	movlw	0
  7188  000DB4  0100               	movlb	0	; () banked
  7189  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7190  000DB8                     l7677:
  7191                           
  7192                           ; BSR set to: 0
  7193  000DB8  0E63               	movlw	99
  7194  000DBA  0100               	movlb	0	; () banked
  7195  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7196  000DBE  D001               	goto	l7681
  7197  000DC0  D00C               	goto	l7685
  7198  000DC2                     l7681:
  7199                           
  7200                           ; BSR set to: 0
  7201  000DC2  0E68               	movlw	104
  7202  000DC4  0100               	movlb	0	; () banked
  7203  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7204  000DC8  0EE4               	movlw	228
  7205  000DCA                     u7607:
  7206  000DCA  2EE8               	decfsz	wreg,f,c
  7207  000DCC  D7FE               	bra	u7607
  7208  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7209  000DD0  D7FC               	bra	u7607
  7210  000DD2  F000               	nop	
  7211  000DD4  0100               	movlb	0	; () banked
  7212  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7213  000DD8  D7EF               	goto	l7677
  7214  000DDA                     l7685:
  7215                           
  7216                           ; BSR set to: 0
  7217  000DDA  0100               	movlb	0	; () banked
  7218  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7219  000DDE  0100               	movlb	0	; () banked
  7220  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7221  000DE2  B4D8               	btfsc	status,2,c
  7222  000DE4  0012               	return	
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7226                           
  7227                           ; BSR set to: 0
  7228                           
  7229                           ; BSR set to: 0
  7230  000DE6  0E00               	movlw	0
  7231  000DE8  0100               	movlb	0	; () banked
  7232  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7233  000DEC                     l7691:
  7234                           
  7235                           ; BSR set to: 0
  7236  000DEC  0E63               	movlw	99
  7237  000DEE  0100               	movlb	0	; () banked
  7238  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7239  000DF2  D001               	goto	l7695
  7240  000DF4  D00C               	goto	l7699
  7241  000DF6                     l7695:
  7242                           
  7243                           ; BSR set to: 0
  7244  000DF6  0E68               	movlw	104
  7245  000DF8  0100               	movlb	0	; () banked
  7246  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7247  000DFC  0EE4               	movlw	228
  7248  000DFE                     u7617:
  7249  000DFE  2EE8               	decfsz	wreg,f,c
  7250  000E00  D7FE               	bra	u7617
  7251  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7252  000E04  D7FC               	bra	u7617
  7253  000E06  F000               	nop	
  7254  000E08  0100               	movlb	0	; () banked
  7255  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7256  000E0C  D7EF               	goto	l7691
  7257  000E0E                     l7699:
  7258                           
  7259                           ; BSR set to: 0
  7260  000E0E  0100               	movlb	0	; () banked
  7261  000E10  51F6               	movf	_logstate& (0+255),w,b
  7262  000E12  0100               	movlb	0	; () banked
  7263  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7264  000E16  B4D8               	btfsc	status,2,c
  7265  000E18  0012               	return	
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7269                           
  7270                           ; BSR set to: 0
  7271                           
  7272                           ; BSR set to: 0
  7273  000E1A  0E01               	movlw	1
  7274  000E1C  EC9C  F024         	call	_lcdInst
  7275  000E20  0E68               	movlw	104
  7276  000E22  0100               	movlb	0	; () banked
  7277  000E24  6FC4               	movwf	??_UI& (0+255),b
  7278  000E26  0EE4               	movlw	228
  7279  000E28                     u7627:
  7280  000E28  2EE8               	decfsz	wreg,f,c
  7281  000E2A  D7FE               	bra	u7627
  7282  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7283  000E2E  D7FC               	bra	u7627
  7284  000E30  F000               	nop	
  7285                           
  7286                           ;UI.c: 173: lcdInst(0b10000000);;
  7287  000E32  0E80               	movlw	128
  7288  000E34  EC9C  F024         	call	_lcdInst
  7289                           
  7290                           ;UI.c: 174: printf("DURATION:");
  7291  000E38  0E9B               	movlw	low STR_22
  7292  000E3A  0100               	movlb	0	; () banked
  7293  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7294  000E3E  0EFF               	movlw	high STR_22
  7295  000E40  0100               	movlb	0	; () banked
  7296  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7297  000E44  ECB8  F008         	call	_printf	;wreg free
  7298                           
  7299                           ;UI.c: 175: lcdInst(0b11000000);;
  7300  000E48  0EC0               	movlw	192
  7301  000E4A  EC9C  F024         	call	_lcdInst
  7302                           
  7303                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7304  000E4E  0E0E               	movlw	14
  7305  000E50  0100               	movlb	0	; () banked
  7306  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7307  000E54  0E10               	movlw	16
  7308  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7309  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7310  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7311  000E60  ECFC  F01C         	call	___awmod	;wreg free
  7312  000E64  C080  F0C6         	movff	?___awmod,_UI$2313
  7313  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2313+1
  7314                           
  7315                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7316  000E6C  0E19               	movlw	low STR_23
  7317  000E6E  0100               	movlb	0	; () banked
  7318  000E70  6F8E               	movwf	printf@f& (0+255),b
  7319  000E72  0EFF               	movlw	high STR_23
  7320  000E74  0100               	movlb	0	; () banked
  7321  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7322  000E78  0E0E               	movlw	14
  7323  000E7A  0100               	movlb	0	; () banked
  7324  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7325  000E7E  0E10               	movlw	16
  7326  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7327  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7328  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7329  000E8A  ECFC  F01C         	call	___awmod	;wreg free
  7330  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7331  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7332  000E96  0E00               	movlw	0
  7333  000E98  0100               	movlb	0	; () banked
  7334  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7335  000E9C  0E3C               	movlw	60
  7336  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7337  000EA0  ECEA  F01B         	call	___awdiv	;wreg free
  7338  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7339  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7340  000EAC  C0C6  F080         	movff	_UI$2313,___awmod@dividend
  7341  000EB0  C0C7  F081         	movff	_UI$2313+1,___awmod@dividend+1
  7342  000EB4  0E00               	movlw	0
  7343  000EB6  0100               	movlb	0	; () banked
  7344  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7345  000EBA  0E3C               	movlw	60
  7346  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7347  000EBE  ECFC  F01C         	call	___awmod	;wreg free
  7348  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7349  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7350  000ECA  ECB8  F008         	call	_printf	;wreg free
  7351                           
  7352                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7353  000ECE  0E00               	movlw	0
  7354  000ED0  0100               	movlb	0	; () banked
  7355  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7356  000ED4                     l7719:
  7357                           
  7358                           ; BSR set to: 0
  7359  000ED4  0E63               	movlw	99
  7360  000ED6  0100               	movlb	0	; () banked
  7361  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7362  000EDA  D001               	goto	l7723
  7363  000EDC  D00C               	goto	l7727
  7364  000EDE                     l7723:
  7365                           
  7366                           ; BSR set to: 0
  7367  000EDE  0E68               	movlw	104
  7368  000EE0  0100               	movlb	0	; () banked
  7369  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7370  000EE4  0EE4               	movlw	228
  7371  000EE6                     u7637:
  7372  000EE6  2EE8               	decfsz	wreg,f,c
  7373  000EE8  D7FE               	bra	u7637
  7374  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7375  000EEC  D7FC               	bra	u7637
  7376  000EEE  F000               	nop	
  7377  000EF0  0100               	movlb	0	; () banked
  7378  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7379  000EF4  D7EF               	goto	l7719
  7380  000EF6                     l7727:
  7381                           
  7382                           ; BSR set to: 0
  7383  000EF6  0100               	movlb	0	; () banked
  7384  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7385  000EFA  0100               	movlb	0	; () banked
  7386  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7387  000EFE  B4D8               	btfsc	status,2,c
  7388  000F00  0012               	return	
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7392                           
  7393                           ; BSR set to: 0
  7394                           
  7395                           ; BSR set to: 0
  7396  000F02  0E00               	movlw	0
  7397  000F04  0100               	movlb	0	; () banked
  7398  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7399  000F08                     l7733:
  7400                           
  7401                           ; BSR set to: 0
  7402  000F08  0E63               	movlw	99
  7403  000F0A  0100               	movlb	0	; () banked
  7404  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7405  000F0E  D001               	goto	l7737
  7406  000F10  D00C               	goto	l7741
  7407  000F12                     l7737:
  7408                           
  7409                           ; BSR set to: 0
  7410  000F12  0E68               	movlw	104
  7411  000F14  0100               	movlb	0	; () banked
  7412  000F16  6FC4               	movwf	??_UI& (0+255),b
  7413  000F18  0EE4               	movlw	228
  7414  000F1A                     u7647:
  7415  000F1A  2EE8               	decfsz	wreg,f,c
  7416  000F1C  D7FE               	bra	u7647
  7417  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7418  000F20  D7FC               	bra	u7647
  7419  000F22  F000               	nop	
  7420  000F24  0100               	movlb	0	; () banked
  7421  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7422  000F28  D7EF               	goto	l7733
  7423  000F2A                     l7741:
  7424                           
  7425                           ; BSR set to: 0
  7426  000F2A  0100               	movlb	0	; () banked
  7427  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7428  000F2E  0100               	movlb	0	; () banked
  7429  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7430  000F32  B4D8               	btfsc	status,2,c
  7431  000F34  0012               	return	
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7435                           
  7436                           ; BSR set to: 0
  7437                           
  7438                           ; BSR set to: 0
  7439  000F36  0E01               	movlw	1
  7440  000F38  EC9C  F024         	call	_lcdInst
  7441  000F3C  0E68               	movlw	104
  7442  000F3E  0100               	movlb	0	; () banked
  7443  000F40  6FC4               	movwf	??_UI& (0+255),b
  7444  000F42  0EE4               	movlw	228
  7445  000F44                     u7657:
  7446  000F44  2EE8               	decfsz	wreg,f,c
  7447  000F46  D7FE               	bra	u7657
  7448  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7449  000F4A  D7FC               	bra	u7657
  7450  000F4C  F000               	nop	
  7451                           
  7452                           ;UI.c: 182: lcdInst(0b10000000);;
  7453  000F4E  0E80               	movlw	128
  7454  000F50  EC9C  F024         	call	_lcdInst
  7455                           
  7456                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7457  000F54  0E3C               	movlw	low STR_24
  7458  000F56  0100               	movlb	0	; () banked
  7459  000F58  6F8E               	movwf	printf@f& (0+255),b
  7460  000F5A  0EFD               	movlw	high STR_24
  7461  000F5C  0100               	movlb	0	; () banked
  7462  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7463  000F60  ECB8  F008         	call	_printf	;wreg free
  7464                           
  7465                           ;UI.c: 184: lcdInst(0b11000000);;
  7466  000F64  0EC0               	movlw	192
  7467  000F66  EC9C  F024         	call	_lcdInst
  7468                           
  7469                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7470  000F6A  0E19               	movlw	low STR_25
  7471  000F6C  0100               	movlb	0	; () banked
  7472  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7473  000F70  0EFE               	movlw	high STR_25
  7474  000F72  0100               	movlb	0	; () banked
  7475  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7476  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7477  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7478  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7479  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7480  000F86  ECB8  F008         	call	_printf	;wreg free
  7481                           
  7482                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7483  000F8A  0E00               	movlw	0
  7484  000F8C  0100               	movlb	0	; () banked
  7485  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7486  000F90                     l7759:
  7487                           
  7488                           ; BSR set to: 0
  7489  000F90  0E63               	movlw	99
  7490  000F92  0100               	movlb	0	; () banked
  7491  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7492  000F96  D001               	goto	l7763
  7493  000F98  D00C               	goto	l7767
  7494  000F9A                     l7763:
  7495                           
  7496                           ; BSR set to: 0
  7497  000F9A  0E68               	movlw	104
  7498  000F9C  0100               	movlb	0	; () banked
  7499  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7500  000FA0  0EE4               	movlw	228
  7501  000FA2                     u7667:
  7502  000FA2  2EE8               	decfsz	wreg,f,c
  7503  000FA4  D7FE               	bra	u7667
  7504  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7505  000FA8  D7FC               	bra	u7667
  7506  000FAA  F000               	nop	
  7507  000FAC  0100               	movlb	0	; () banked
  7508  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7509  000FB0  D7EF               	goto	l7759
  7510  000FB2                     l7767:
  7511                           
  7512                           ; BSR set to: 0
  7513  000FB2  0100               	movlb	0	; () banked
  7514  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7515  000FB6  0100               	movlb	0	; () banked
  7516  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7517  000FBA  B4D8               	btfsc	status,2,c
  7518  000FBC  0012               	return	
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7522                           
  7523                           ; BSR set to: 0
  7524                           
  7525                           ; BSR set to: 0
  7526  000FBE  0E00               	movlw	0
  7527  000FC0  0100               	movlb	0	; () banked
  7528  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7529  000FC4                     l7773:
  7530                           
  7531                           ; BSR set to: 0
  7532  000FC4  0E63               	movlw	99
  7533  000FC6  0100               	movlb	0	; () banked
  7534  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7535  000FCA  D001               	goto	l7777
  7536  000FCC  D00C               	goto	l7781
  7537  000FCE                     l7777:
  7538                           
  7539                           ; BSR set to: 0
  7540  000FCE  0E68               	movlw	104
  7541  000FD0  0100               	movlb	0	; () banked
  7542  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7543  000FD4  0EE4               	movlw	228
  7544  000FD6                     u7677:
  7545  000FD6  2EE8               	decfsz	wreg,f,c
  7546  000FD8  D7FE               	bra	u7677
  7547  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7548  000FDC  D7FC               	bra	u7677
  7549  000FDE  F000               	nop	
  7550  000FE0  0100               	movlb	0	; () banked
  7551  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7552  000FE4  D7EF               	goto	l7773
  7553  000FE6                     l7781:
  7554                           
  7555                           ; BSR set to: 0
  7556  000FE6  0100               	movlb	0	; () banked
  7557  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7558  000FEA  0100               	movlb	0	; () banked
  7559  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7560  000FEE  B4D8               	btfsc	status,2,c
  7561  000FF0  0012               	return	
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7565                           
  7566                           ; BSR set to: 0
  7567                           
  7568                           ; BSR set to: 0
  7569  000FF2  0E01               	movlw	1
  7570  000FF4  EC9C  F024         	call	_lcdInst
  7571  000FF8  0E68               	movlw	104
  7572  000FFA  0100               	movlb	0	; () banked
  7573  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7574  000FFE  0EE4               	movlw	228
  7575  001000                     u7687:
  7576  001000  2EE8               	decfsz	wreg,f,c
  7577  001002  D7FE               	bra	u7687
  7578  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7579  001006  D7FC               	bra	u7687
  7580  001008  F000               	nop	
  7581                           
  7582                           ;UI.c: 191: lcdInst(0b10000000);;
  7583  00100A  0E80               	movlw	128
  7584  00100C  EC9C  F024         	call	_lcdInst
  7585                           
  7586                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7587  001010  0E4D               	movlw	low STR_26
  7588  001012  0100               	movlb	0	; () banked
  7589  001014  6F8E               	movwf	printf@f& (0+255),b
  7590  001016  0EFD               	movlw	high STR_26
  7591  001018  0100               	movlb	0	; () banked
  7592  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7593  00101C  ECB8  F008         	call	_printf	;wreg free
  7594                           
  7595                           ;UI.c: 193: lcdInst(0b11000000);;
  7596  001020  0EC0               	movlw	192
  7597  001022  EC9C  F024         	call	_lcdInst
  7598                           
  7599                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7600  001026  0E08               	movlw	low STR_27
  7601  001028  0100               	movlb	0	; () banked
  7602  00102A  6F8E               	movwf	printf@f& (0+255),b
  7603  00102C  0EFE               	movlw	high STR_27
  7604  00102E  0100               	movlb	0	; () banked
  7605  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7606  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7607  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7608  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7609  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7610  001042  ECB8  F008         	call	_printf	;wreg free
  7611                           
  7612                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7613  001046  0E00               	movlw	0
  7614  001048  0100               	movlb	0	; () banked
  7615  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7616  00104C                     l7799:
  7617                           
  7618                           ; BSR set to: 0
  7619  00104C  0E63               	movlw	99
  7620  00104E  0100               	movlb	0	; () banked
  7621  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7622  001052  D001               	goto	l7803
  7623  001054  D00C               	goto	l7807
  7624  001056                     l7803:
  7625                           
  7626                           ; BSR set to: 0
  7627  001056  0E68               	movlw	104
  7628  001058  0100               	movlb	0	; () banked
  7629  00105A  6FC4               	movwf	??_UI& (0+255),b
  7630  00105C  0EE4               	movlw	228
  7631  00105E                     u7697:
  7632  00105E  2EE8               	decfsz	wreg,f,c
  7633  001060  D7FE               	bra	u7697
  7634  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7635  001064  D7FC               	bra	u7697
  7636  001066  F000               	nop	
  7637  001068  0100               	movlb	0	; () banked
  7638  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7639  00106C  D7EF               	goto	l7799
  7640  00106E                     l7807:
  7641                           
  7642                           ; BSR set to: 0
  7643  00106E  0100               	movlb	0	; () banked
  7644  001070  51F6               	movf	_logstate& (0+255),w,b
  7645  001072  0100               	movlb	0	; () banked
  7646  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7647  001076  B4D8               	btfsc	status,2,c
  7648  001078  0012               	return	
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7652                           
  7653                           ; BSR set to: 0
  7654                           
  7655                           ; BSR set to: 0
  7656  00107A  0E00               	movlw	0
  7657  00107C  0100               	movlb	0	; () banked
  7658  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7659  001080                     l7813:
  7660                           
  7661                           ; BSR set to: 0
  7662  001080  0E63               	movlw	99
  7663  001082  0100               	movlb	0	; () banked
  7664  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7665  001086  D001               	goto	l7817
  7666  001088  D00C               	goto	l7821
  7667  00108A                     l7817:
  7668                           
  7669                           ; BSR set to: 0
  7670  00108A  0E68               	movlw	104
  7671  00108C  0100               	movlb	0	; () banked
  7672  00108E  6FC4               	movwf	??_UI& (0+255),b
  7673  001090  0EE4               	movlw	228
  7674  001092                     u7707:
  7675  001092  2EE8               	decfsz	wreg,f,c
  7676  001094  D7FE               	bra	u7707
  7677  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7678  001098  D7FC               	bra	u7707
  7679  00109A  F000               	nop	
  7680  00109C  0100               	movlb	0	; () banked
  7681  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7682  0010A0  D7EF               	goto	l7813
  7683  0010A2                     l7821:
  7684                           
  7685                           ; BSR set to: 0
  7686  0010A2  0100               	movlb	0	; () banked
  7687  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7688  0010A6  0100               	movlb	0	; () banked
  7689  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7690  0010AA  B4D8               	btfsc	status,2,c
  7691  0010AC  0012               	return	
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7695                           
  7696                           ; BSR set to: 0
  7697                           
  7698                           ; BSR set to: 0
  7699  0010AE  0E01               	movlw	1
  7700  0010B0  EC9C  F024         	call	_lcdInst
  7701  0010B4  0E68               	movlw	104
  7702  0010B6  0100               	movlb	0	; () banked
  7703  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7704  0010BA  0EE4               	movlw	228
  7705  0010BC                     u7717:
  7706  0010BC  2EE8               	decfsz	wreg,f,c
  7707  0010BE  D7FE               	bra	u7717
  7708  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7709  0010C2  D7FC               	bra	u7717
  7710  0010C4  F000               	nop	
  7711                           
  7712                           ;UI.c: 200: lcdInst(0b10000000);;
  7713  0010C6  0E80               	movlw	128
  7714  0010C8  EC9C  F024         	call	_lcdInst
  7715                           
  7716                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7717  0010CC  0E5E               	movlw	low STR_28
  7718  0010CE  0100               	movlb	0	; () banked
  7719  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7720  0010D2  0EFD               	movlw	high STR_28
  7721  0010D4  0100               	movlb	0	; () banked
  7722  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7723  0010D8  ECB8  F008         	call	_printf	;wreg free
  7724                           
  7725                           ;UI.c: 202: lcdInst(0b11000000);;
  7726  0010DC  0EC0               	movlw	192
  7727  0010DE  EC9C  F024         	call	_lcdInst
  7728                           
  7729                           ;UI.c: 203: printf("%d", log_count_total);
  7730  0010E2  0E16               	movlw	low (STR_27+14)
  7731  0010E4  0100               	movlb	0	; () banked
  7732  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7733  0010E8  0EFE               	movlw	high (STR_27+14)
  7734  0010EA  0100               	movlb	0	; () banked
  7735  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7736  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7737  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7738  0010F6  ECB8  F008         	call	_printf	;wreg free
  7739                           
  7740                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7741  0010FA  0E00               	movlw	0
  7742  0010FC  0100               	movlb	0	; () banked
  7743  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7744  001100                     l7839:
  7745                           
  7746                           ; BSR set to: 0
  7747  001100  0E63               	movlw	99
  7748  001102  0100               	movlb	0	; () banked
  7749  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7750  001106  D001               	goto	l7843
  7751  001108  D00C               	goto	l7847
  7752  00110A                     l7843:
  7753                           
  7754                           ; BSR set to: 0
  7755  00110A  0E68               	movlw	104
  7756  00110C  0100               	movlb	0	; () banked
  7757  00110E  6FC4               	movwf	??_UI& (0+255),b
  7758  001110  0EE4               	movlw	228
  7759  001112                     u7727:
  7760  001112  2EE8               	decfsz	wreg,f,c
  7761  001114  D7FE               	bra	u7727
  7762  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7763  001118  D7FC               	bra	u7727
  7764  00111A  F000               	nop	
  7765  00111C  0100               	movlb	0	; () banked
  7766  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7767  001120  D7EF               	goto	l7839
  7768  001122                     l7847:
  7769                           
  7770                           ; BSR set to: 0
  7771  001122  0100               	movlb	0	; () banked
  7772  001124  51F6               	movf	_logstate& (0+255),w,b
  7773  001126  0100               	movlb	0	; () banked
  7774  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7775  00112A  B4D8               	btfsc	status,2,c
  7776  00112C  0012               	return	
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7780                           
  7781                           ; BSR set to: 0
  7782                           
  7783                           ; BSR set to: 0
  7784  00112E  0E00               	movlw	0
  7785  001130  0100               	movlb	0	; () banked
  7786  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7787  001134                     l7853:
  7788                           
  7789                           ; BSR set to: 0
  7790  001134  0E63               	movlw	99
  7791  001136  0100               	movlb	0	; () banked
  7792  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7793  00113A  D001               	goto	l7857
  7794  00113C  D00C               	goto	l7861
  7795  00113E                     l7857:
  7796                           
  7797                           ; BSR set to: 0
  7798  00113E  0E68               	movlw	104
  7799  001140  0100               	movlb	0	; () banked
  7800  001142  6FC4               	movwf	??_UI& (0+255),b
  7801  001144  0EE4               	movlw	228
  7802  001146                     u7737:
  7803  001146  2EE8               	decfsz	wreg,f,c
  7804  001148  D7FE               	bra	u7737
  7805  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7806  00114C  D7FC               	bra	u7737
  7807  00114E  F000               	nop	
  7808  001150  0100               	movlb	0	; () banked
  7809  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7810  001154  D7EF               	goto	l7853
  7811  001156                     l7861:
  7812                           
  7813                           ; BSR set to: 0
  7814  001156  0100               	movlb	0	; () banked
  7815  001158  51F6               	movf	_logstate& (0+255),w,b
  7816  00115A  0100               	movlb	0	; () banked
  7817  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7818  00115E  B4D8               	btfsc	status,2,c
  7819  001160  0012               	return	
  7820  001162                     l7865:
  7821  001162  0100               	movlb	0	; () banked
  7822  001164  51F6               	movf	_logstate& (0+255),w,b
  7823  001166  0100               	movlb	0	; () banked
  7824  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7825  00116A  B4D8               	btfsc	status,2,c
  7826  00116C  0012               	return	
  7827  00116E  D44A               	goto	l7561
  7828  001170                     __end_of_UI:
  7829                           	opt stack 0
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           intcon2	equ	0xFF1
  7838                           intcon3	equ	0xFF0
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           postdec1	equ	0xFE5
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _printRTC *****************
  7851 ;; Defined at:
  7852 ;;		line 63 in file "RTC.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  i               2   66[BANK0 ] int 
  7857 ;;  INT_time       14   46[BANK0 ] int [7]
  7858 ;;  month           4   62[BANK0 ] unsigned char [4]
  7859 ;;  RTC_month       2   60[BANK0 ] int 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;                  1    wreg      void 
  7862 ;; Registers used:
  7863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;Total ram usage:       25 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:   10
  7876 ;; This function calls:
  7877 ;;		_getRTC
  7878 ;;		_lcdInst
  7879 ;;		_printf
  7880 ;;		_strcpy
  7881 ;; This function is called by:
  7882 ;;		_UI
  7883 ;;		_change_state_to_menu_start
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text24
  7888  001FA0                     __ptext24:
  7889                           	opt stack 0
  7890  001FA0                     _printRTC:
  7891                           	opt stack 18
  7892                           
  7893                           ;RTC.c: 64: getRTC();
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;incstack = 0
  7897  001FA0  EC93  F01D         	call	_getRTC	;wreg free
  7898                           
  7899                           ;RTC.c: 65: char month[] = "MMM";
  7900  001FA4  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7901  001FA8  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7902  001FAC  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7903  001FB0  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7904                           
  7905                           ;RTC.c: 66: int INT_time[7];
  7906                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7907  001FB4  0E00               	movlw	0
  7908  001FB6  0100               	movlb	0	; () banked
  7909  001FB8  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7910  001FBA  0E00               	movlw	0
  7911  001FBC  6FC2               	movwf	printRTC@i& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914  001FBE  0100               	movlb	0	; () banked
  7915  001FC0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7916  001FC2  D008               	goto	l5931
  7917  001FC4  0100               	movlb	0	; () banked
  7918  001FC6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7919  001FC8  E146               	bnz	l602
  7920  001FCA  0E07               	movlw	7
  7921  001FCC  0100               	movlb	0	; () banked
  7922  001FCE  5DC2               	subwf	printRTC@i& (0+255),w,b
  7923  001FD0  B0D8               	btfsc	status,0,c
  7924  001FD2  D041               	goto	l602
  7925  001FD4                     l5931:
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7929  001FD4  0E24               	movlw	low _time
  7930  001FD6  0100               	movlb	0	; () banked
  7931  001FD8  25C2               	addwf	printRTC@i& (0+255),w,b
  7932  001FDA  6ED9               	movwf	fsr2l,c
  7933  001FDC  0E01               	movlw	high _time
  7934  001FDE  0100               	movlb	0	; () banked
  7935  001FE0  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7936  001FE2  6EDA               	movwf	fsr2h,c
  7937  001FE4  50DF               	movf	indf2,w,c
  7938  001FE6  0100               	movlb	0	; () banked
  7939  001FE8  6FAB               	movwf	??_printRTC& (0+255),b
  7940  001FEA  0100               	movlb	0	; () banked
  7941  001FEC  3BAB               	swapf	??_printRTC& (0+255),f,b
  7942  001FEE  0E0F               	movlw	15
  7943  001FF0  17AB               	andwf	??_printRTC& (0+255),f,b
  7944  001FF2  0E0F               	movlw	15
  7945  001FF4  0100               	movlb	0	; () banked
  7946  001FF6  17AB               	andwf	??_printRTC& (0+255),f,b
  7947  001FF8  0100               	movlb	0	; () banked
  7948  001FFA  51AB               	movf	??_printRTC& (0+255),w,b
  7949  001FFC  0D0A               	mullw	10
  7950  001FFE  0E24               	movlw	low _time
  7951  002000  0100               	movlb	0	; () banked
  7952  002002  25C2               	addwf	printRTC@i& (0+255),w,b
  7953  002004  6ED9               	movwf	fsr2l,c
  7954  002006  0E01               	movlw	high _time
  7955  002008  0100               	movlb	0	; () banked
  7956  00200A  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7957  00200C  6EDA               	movwf	fsr2h,c
  7958  00200E  50DF               	movf	indf2,w,c
  7959  002010  0B0F               	andlw	15
  7960  002012  0100               	movlb	0	; () banked
  7961  002014  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7962  002016  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7963  002018  50F3               	movf	prodl,w,c
  7964  00201A  0100               	movlb	0	; () banked
  7965  00201C  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7966  00201E  50F4               	movf	prodh,w,c
  7967  002020  0100               	movlb	0	; () banked
  7968  002022  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7969  002024  90D8               	bcf	status,0,c
  7970  002026  0100               	movlb	0	; () banked
  7971  002028  35C2               	rlcf	printRTC@i& (0+255),w,b
  7972  00202A  6ED9               	movwf	fsr2l,c
  7973  00202C  0100               	movlb	0	; () banked
  7974  00202E  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7975  002030  6EDA               	movwf	fsr2h,c
  7976  002032  0EAE               	movlw	low printRTC@INT_time
  7977  002034  26D9               	addwf	fsr2l,f,c
  7978  002036  0E00               	movlw	high printRTC@INT_time
  7979  002038  22DA               	addwfc	fsr2h,f,c
  7980  00203A  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7981  00203E  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7982                           
  7983                           ; BSR set to: 0
  7984  002042  0100               	movlb	0	; () banked
  7985  002044  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7986  002046  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 0
  7989  002048  0100               	movlb	0	; () banked
  7990  00204A  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7991  00204C  D7C3               	goto	l5931
  7992  00204E  0100               	movlb	0	; () banked
  7993  002050  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7994  002052  E101               	bnz	u4620
  7995  002054  D7BA               	goto	L6
  7996  002056                     u4620:
  7997  002056                     l602:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;RTC.c: 69: }
  8001                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8002  002056  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8003  00205A  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8004                           
  8005                           ;RTC.c: 71: switch(RTC_month){
  8006  00205E  D0B4               	goto	l5963
  8007  002060                     l5937:
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;RTC.c: 73: strcpy(month, "JAN");
  8011  002060  0EBE               	movlw	low printRTC@month
  8012  002062  0100               	movlb	0	; () banked
  8013  002064  6F80               	movwf	strcpy@to& (0+255),b
  8014  002066  0E00               	movlw	high printRTC@month
  8015  002068  0100               	movlb	0	; () banked
  8016  00206A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8017  00206C  0EDB               	movlw	low STR_8
  8018  00206E  0100               	movlb	0	; () banked
  8019  002070  6F82               	movwf	strcpy@from& (0+255),b
  8020  002072  0EFF               	movlw	high STR_8
  8021  002074  0100               	movlb	0	; () banked
  8022  002076  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8023  002078  EC08  F022         	call	_strcpy	;wreg free
  8024                           
  8025                           ;RTC.c: 74: break;
  8026  00207C  D0D4               	goto	l5965
  8027  00207E                     l5939:
  8028                           
  8029                           ;RTC.c: 76: strcpy(month, "FEB");
  8030  00207E  0EBE               	movlw	low printRTC@month
  8031  002080  0100               	movlb	0	; () banked
  8032  002082  6F80               	movwf	strcpy@to& (0+255),b
  8033  002084  0E00               	movlw	high printRTC@month
  8034  002086  0100               	movlb	0	; () banked
  8035  002088  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8036  00208A  0ECB               	movlw	low STR_9
  8037  00208C  0100               	movlb	0	; () banked
  8038  00208E  6F82               	movwf	strcpy@from& (0+255),b
  8039  002090  0EFF               	movlw	high STR_9
  8040  002092  0100               	movlb	0	; () banked
  8041  002094  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8042  002096  EC08  F022         	call	_strcpy	;wreg free
  8043                           
  8044                           ;RTC.c: 77: break;
  8045  00209A  D0C5               	goto	l5965
  8046  00209C                     l5941:
  8047                           
  8048                           ;RTC.c: 79: strcpy(month, "MAR");
  8049  00209C  0EBE               	movlw	low printRTC@month
  8050  00209E  0100               	movlb	0	; () banked
  8051  0020A0  6F80               	movwf	strcpy@to& (0+255),b
  8052  0020A2  0E00               	movlw	high printRTC@month
  8053  0020A4  0100               	movlb	0	; () banked
  8054  0020A6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8055  0020A8  0EE7               	movlw	low STR_10
  8056  0020AA  0100               	movlb	0	; () banked
  8057  0020AC  6F82               	movwf	strcpy@from& (0+255),b
  8058  0020AE  0EFF               	movlw	high STR_10
  8059  0020B0  0100               	movlb	0	; () banked
  8060  0020B2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8061  0020B4  EC08  F022         	call	_strcpy	;wreg free
  8062                           
  8063                           ;RTC.c: 80: break;
  8064  0020B8  D0B6               	goto	l5965
  8065  0020BA                     l5943:
  8066                           
  8067                           ;RTC.c: 82: strcpy(month, "APR");
  8068  0020BA  0EBE               	movlw	low printRTC@month
  8069  0020BC  0100               	movlb	0	; () banked
  8070  0020BE  6F80               	movwf	strcpy@to& (0+255),b
  8071  0020C0  0E00               	movlw	high printRTC@month
  8072  0020C2  0100               	movlb	0	; () banked
  8073  0020C4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8074  0020C6  0EEB               	movlw	low STR_11
  8075  0020C8  0100               	movlb	0	; () banked
  8076  0020CA  6F82               	movwf	strcpy@from& (0+255),b
  8077  0020CC  0EFF               	movlw	high STR_11
  8078  0020CE  0100               	movlb	0	; () banked
  8079  0020D0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8080  0020D2  EC08  F022         	call	_strcpy	;wreg free
  8081                           
  8082                           ;RTC.c: 83: break;
  8083  0020D6  D0A7               	goto	l5965
  8084  0020D8                     l5945:
  8085                           
  8086                           ;RTC.c: 85: strcpy(month, "MAY");
  8087  0020D8  0EBE               	movlw	low printRTC@month
  8088  0020DA  0100               	movlb	0	; () banked
  8089  0020DC  6F80               	movwf	strcpy@to& (0+255),b
  8090  0020DE  0E00               	movlw	high printRTC@month
  8091  0020E0  0100               	movlb	0	; () banked
  8092  0020E2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8093  0020E4  0EFB               	movlw	low STR_12
  8094  0020E6  0100               	movlb	0	; () banked
  8095  0020E8  6F82               	movwf	strcpy@from& (0+255),b
  8096  0020EA  0EFF               	movlw	high STR_12
  8097  0020EC  0100               	movlb	0	; () banked
  8098  0020EE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8099  0020F0  EC08  F022         	call	_strcpy	;wreg free
  8100                           
  8101                           ;RTC.c: 86: break;
  8102  0020F4  D098               	goto	l5965
  8103  0020F6                     l5947:
  8104                           
  8105                           ;RTC.c: 88: strcpy(month, "JUN");
  8106  0020F6  0EBE               	movlw	low printRTC@month
  8107  0020F8  0100               	movlb	0	; () banked
  8108  0020FA  6F80               	movwf	strcpy@to& (0+255),b
  8109  0020FC  0E00               	movlw	high printRTC@month
  8110  0020FE  0100               	movlb	0	; () banked
  8111  002100  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8112  002102  0EDF               	movlw	low STR_13
  8113  002104  0100               	movlb	0	; () banked
  8114  002106  6F82               	movwf	strcpy@from& (0+255),b
  8115  002108  0EFF               	movlw	high STR_13
  8116  00210A  0100               	movlb	0	; () banked
  8117  00210C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8118  00210E  EC08  F022         	call	_strcpy	;wreg free
  8119                           
  8120                           ;RTC.c: 89: break;
  8121  002112  D089               	goto	l5965
  8122  002114                     l5949:
  8123                           
  8124                           ;RTC.c: 91: strcpy(month, "JUL");
  8125  002114  0EBE               	movlw	low printRTC@month
  8126  002116  0100               	movlb	0	; () banked
  8127  002118  6F80               	movwf	strcpy@to& (0+255),b
  8128  00211A  0E00               	movlw	high printRTC@month
  8129  00211C  0100               	movlb	0	; () banked
  8130  00211E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8131  002120  0ED7               	movlw	low STR_14
  8132  002122  0100               	movlb	0	; () banked
  8133  002124  6F82               	movwf	strcpy@from& (0+255),b
  8134  002126  0EFF               	movlw	high STR_14
  8135  002128  0100               	movlb	0	; () banked
  8136  00212A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8137  00212C  EC08  F022         	call	_strcpy	;wreg free
  8138                           
  8139                           ;RTC.c: 92: break;
  8140  002130  D07A               	goto	l5965
  8141  002132                     l5951:
  8142                           
  8143                           ;RTC.c: 94: strcpy(month, "AUG");
  8144  002132  0EBE               	movlw	low printRTC@month
  8145  002134  0100               	movlb	0	; () banked
  8146  002136  6F80               	movwf	strcpy@to& (0+255),b
  8147  002138  0E00               	movlw	high printRTC@month
  8148  00213A  0100               	movlb	0	; () banked
  8149  00213C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8150  00213E  0ED3               	movlw	low STR_15
  8151  002140  0100               	movlb	0	; () banked
  8152  002142  6F82               	movwf	strcpy@from& (0+255),b
  8153  002144  0EFF               	movlw	high STR_15
  8154  002146  0100               	movlb	0	; () banked
  8155  002148  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8156  00214A  EC08  F022         	call	_strcpy	;wreg free
  8157                           
  8158                           ;RTC.c: 95: break;
  8159  00214E  D06B               	goto	l5965
  8160  002150                     l5953:
  8161                           
  8162                           ;RTC.c: 97: strcpy(month, "SEP");
  8163  002150  0EBE               	movlw	low printRTC@month
  8164  002152  0100               	movlb	0	; () banked
  8165  002154  6F80               	movwf	strcpy@to& (0+255),b
  8166  002156  0E00               	movlw	high printRTC@month
  8167  002158  0100               	movlb	0	; () banked
  8168  00215A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8169  00215C  0EE3               	movlw	low STR_16
  8170  00215E  0100               	movlb	0	; () banked
  8171  002160  6F82               	movwf	strcpy@from& (0+255),b
  8172  002162  0EFF               	movlw	high STR_16
  8173  002164  0100               	movlb	0	; () banked
  8174  002166  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8175  002168  EC08  F022         	call	_strcpy	;wreg free
  8176                           
  8177                           ;RTC.c: 98: break;
  8178  00216C  D05C               	goto	l5965
  8179  00216E                     l5955:
  8180                           
  8181                           ;RTC.c: 100: strcpy(month, "OCT");
  8182  00216E  0EBE               	movlw	low printRTC@month
  8183  002170  0100               	movlb	0	; () banked
  8184  002172  6F80               	movwf	strcpy@to& (0+255),b
  8185  002174  0E00               	movlw	high printRTC@month
  8186  002176  0100               	movlb	0	; () banked
  8187  002178  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8188  00217A  0EF3               	movlw	low STR_17
  8189  00217C  0100               	movlb	0	; () banked
  8190  00217E  6F82               	movwf	strcpy@from& (0+255),b
  8191  002180  0EFF               	movlw	high STR_17
  8192  002182  0100               	movlb	0	; () banked
  8193  002184  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8194  002186  EC08  F022         	call	_strcpy	;wreg free
  8195                           
  8196                           ;RTC.c: 101: break;
  8197  00218A  D04D               	goto	l5965
  8198  00218C                     l5957:
  8199                           
  8200                           ;RTC.c: 103: strcpy(month, "NOV");
  8201  00218C  0EBE               	movlw	low printRTC@month
  8202  00218E  0100               	movlb	0	; () banked
  8203  002190  6F80               	movwf	strcpy@to& (0+255),b
  8204  002192  0E00               	movlw	high printRTC@month
  8205  002194  0100               	movlb	0	; () banked
  8206  002196  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8207  002198  0EF7               	movlw	low STR_18
  8208  00219A  0100               	movlb	0	; () banked
  8209  00219C  6F82               	movwf	strcpy@from& (0+255),b
  8210  00219E  0EFF               	movlw	high STR_18
  8211  0021A0  0100               	movlb	0	; () banked
  8212  0021A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8213  0021A4  EC08  F022         	call	_strcpy	;wreg free
  8214                           
  8215                           ;RTC.c: 104: break;
  8216  0021A8  D03E               	goto	l5965
  8217  0021AA                     l5959:
  8218                           
  8219                           ;RTC.c: 106: strcpy(month, "DEC");
  8220  0021AA  0EBE               	movlw	low printRTC@month
  8221  0021AC  0100               	movlb	0	; () banked
  8222  0021AE  6F80               	movwf	strcpy@to& (0+255),b
  8223  0021B0  0E00               	movlw	high printRTC@month
  8224  0021B2  0100               	movlb	0	; () banked
  8225  0021B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8226  0021B6  0ECF               	movlw	low STR_19
  8227  0021B8  0100               	movlb	0	; () banked
  8228  0021BA  6F82               	movwf	strcpy@from& (0+255),b
  8229  0021BC  0EFF               	movlw	high STR_19
  8230  0021BE  0100               	movlb	0	; () banked
  8231  0021C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8232  0021C2  EC08  F022         	call	_strcpy	;wreg free
  8233                           
  8234                           ;RTC.c: 108: }
  8235                           
  8236                           ;RTC.c: 107: break;
  8237  0021C6  D02F               	goto	l5965
  8238  0021C8                     l5963:
  8239  0021C8  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8240  0021CC  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8241                           
  8242                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8243                           ; Switch size 1, requested type "space"
  8244                           ; Number of cases is 1, Range of values is 0 to 0
  8245                           ; switch strategies available:
  8246                           ; Name         Instructions Cycles
  8247                           ; simple_byte            4     3 (average)
  8248                           ;	Chosen strategy is simple_byte
  8249  0021D0  0100               	movlb	0	; () banked
  8250  0021D2  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8251  0021D4  0A00               	xorlw	0	; case 0
  8252  0021D6  A4D8               	btfss	status,2,c
  8253  0021D8  D026               	goto	l5965
  8254                           
  8255                           ; BSR set to: 0
  8256                           ; Switch size 1, requested type "space"
  8257                           ; Number of cases is 12, Range of values is 1 to 12
  8258                           ; switch strategies available:
  8259                           ; Name         Instructions Cycles
  8260                           ; simple_byte           37    19 (average)
  8261                           ;	Chosen strategy is simple_byte
  8262  0021DA  0100               	movlb	0	; () banked
  8263  0021DC  51AB               	movf	??_printRTC& (0+255),w,b
  8264  0021DE  0A01               	xorlw	1	; case 1
  8265  0021E0  B4D8               	btfsc	status,2,c
  8266  0021E2  D73E               	goto	l5937
  8267  0021E4  0A03               	xorlw	3	; case 2
  8268  0021E6  B4D8               	btfsc	status,2,c
  8269  0021E8  D74A               	goto	l5939
  8270  0021EA  0A01               	xorlw	1	; case 3
  8271  0021EC  B4D8               	btfsc	status,2,c
  8272  0021EE  D756               	goto	l5941
  8273  0021F0  0A07               	xorlw	7	; case 4
  8274  0021F2  B4D8               	btfsc	status,2,c
  8275  0021F4  D762               	goto	l5943
  8276  0021F6  0A01               	xorlw	1	; case 5
  8277  0021F8  B4D8               	btfsc	status,2,c
  8278  0021FA  D76E               	goto	l5945
  8279  0021FC  0A03               	xorlw	3	; case 6
  8280  0021FE  B4D8               	btfsc	status,2,c
  8281  002200  D77A               	goto	l5947
  8282  002202  0A01               	xorlw	1	; case 7
  8283  002204  B4D8               	btfsc	status,2,c
  8284  002206  D786               	goto	l5949
  8285  002208  0A0F               	xorlw	15	; case 8
  8286  00220A  B4D8               	btfsc	status,2,c
  8287  00220C  D792               	goto	l5951
  8288  00220E  0A01               	xorlw	1	; case 9
  8289  002210  B4D8               	btfsc	status,2,c
  8290  002212  D79E               	goto	l5953
  8291  002214  0A03               	xorlw	3	; case 10
  8292  002216  B4D8               	btfsc	status,2,c
  8293  002218  D7AA               	goto	l5955
  8294  00221A  0A01               	xorlw	1	; case 11
  8295  00221C  B4D8               	btfsc	status,2,c
  8296  00221E  D7B6               	goto	l5957
  8297  002220  0A07               	xorlw	7	; case 12
  8298  002222  B4D8               	btfsc	status,2,c
  8299  002224  D7C2               	goto	l5959
  8300  002226                     l5965:
  8301                           
  8302                           ;RTC.c: 109: lcdInst(0b10000000);;
  8303  002226  0E80               	movlw	128
  8304  002228  EC9C  F024         	call	_lcdInst
  8305                           
  8306                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8307  00222C  0E1C               	movlw	low STR_21
  8308  00222E  0100               	movlb	0	; () banked
  8309  002230  6F8E               	movwf	printf@f& (0+255),b
  8310  002232  0EFB               	movlw	high STR_21
  8311  002234  0100               	movlb	0	; () banked
  8312  002236  6F8F               	movwf	(printf@f+1)& (0+255),b
  8313  002238  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8314  00223C  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8315  002240  0EBE               	movlw	low printRTC@month
  8316  002242  0100               	movlb	0	; () banked
  8317  002244  6F92               	movwf	(?_printf+4)& (0+255),b
  8318  002246  0E00               	movlw	high printRTC@month
  8319  002248  0100               	movlb	0	; () banked
  8320  00224A  6F93               	movwf	(?_printf+5)& (0+255),b
  8321  00224C  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8322  002250  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8323  002254  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8324  002258  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8325  00225C  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8326  002260  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8327  002264  ECB8  F008         	call	_printf	;wreg free
  8328  002268  0012               	return		;funcret
  8329  00226A                     __end_of_printRTC:
  8330                           	opt stack 0
  8331                           tblptru	equ	0xFF8
  8332                           tblptrh	equ	0xFF7
  8333                           tblptrl	equ	0xFF6
  8334                           tablat	equ	0xFF5
  8335                           prodh	equ	0xFF4
  8336                           prodl	equ	0xFF3
  8337                           intcon	equ	0xFF2
  8338                           intcon2	equ	0xFF1
  8339                           intcon3	equ	0xFF0
  8340                           postinc0	equ	0xFEE
  8341                           wreg	equ	0xFE8
  8342                           postdec1	equ	0xFE5
  8343                           fsr1l	equ	0xFE1
  8344                           indf2	equ	0xFDF
  8345                           postinc2	equ	0xFDE
  8346                           postdec2	equ	0xFDD
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8
  8350                           
  8351 ;; *************** function _strcpy *****************
  8352 ;; Defined at:
  8353 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8356 ;;		 -> printRTC@month(4), UI@month(4), 
  8357 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8358 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8359 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8360 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8361 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8362 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8363 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8364 ;;		 -> STR_8(4), 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8367 ;;		 -> printRTC@month(4), UI@month(4), 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  2    0[BANK0 ] PTR unsigned char 
  8370 ;; Registers used:
  8371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;Total ram usage:        6 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    7
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		_UI
  8388 ;;		_printRTC
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           	psect	text25
  8393  004410                     __ptext25:
  8394                           	opt stack 0
  8395  004410                     _strcpy:
  8396                           	opt stack 20
  8397                           
  8398                           ;incstack = 0
  8399  004410  C080  F084         	movff	strcpy@to,strcpy@cp
  8400  004414  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8401  004418  D006               	goto	l5675
  8402  00441A                     l5673:
  8403  00441A  0100               	movlb	0	; () banked
  8404  00441C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8405  00441E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8406  004420  0100               	movlb	0	; () banked
  8407  004422  4B82               	infsnz	strcpy@from& (0+255),f,b
  8408  004424  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8409  004426                     l5675:
  8410  004426  C082  FFF6         	movff	strcpy@from,tblptrl
  8411  00442A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8412  00442E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8413  00442E  6AF8               	clrf	tblptru,c
  8414  004430                     	endif
  8415  004430                     	if	0	;tblptru may be non-zero
  8416  004430                     	endif
  8417  004430  C084  FFD9         	movff	strcpy@cp,fsr2l
  8418  004434  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8419  004438  0008               	tblrd		*
  8420  00443A  CFF5 FFDF          	movff	tablat,indf2
  8421  00443E  50DF               	movf	indf2,w,c
  8422  004440  B4D8               	btfsc	status,2,c
  8423  004442  0012               	return	
  8424  004444  D7EA               	goto	l5673
  8425  004446                     __end_of_strcpy:
  8426                           	opt stack 0
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           intcon2	equ	0xFF1
  8435                           intcon3	equ	0xFF0
  8436                           postinc0	equ	0xFEE
  8437                           wreg	equ	0xFE8
  8438                           postdec1	equ	0xFE5
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           postdec2	equ	0xFDD
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _getRTC *****************
  8448 ;; Defined at:
  8449 ;;		line 44 in file "RTC.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  i               2    3[BANK0 ] int 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        2 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    9
  8470 ;; This function calls:
  8471 ;;		_I2C_Master_Read
  8472 ;;		_I2C_Master_Start
  8473 ;;		_I2C_Master_Stop
  8474 ;;		_I2C_Master_Write
  8475 ;; This function is called by:
  8476 ;;		_printRTC
  8477 ;;		_initSortTimer
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text26
  8482  003B26                     __ptext26:
  8483                           	opt stack 0
  8484  003B26                     _getRTC:
  8485                           	opt stack 18
  8486                           
  8487                           ;RTC.c: 48: I2C_Master_Start();
  8488                           
  8489                           ;incstack = 0
  8490  003B26  ECC2  F024         	call	_I2C_Master_Start	;wreg free
  8491                           
  8492                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8493  003B2A  0E00               	movlw	0
  8494  003B2C  0100               	movlb	0	; () banked
  8495  003B2E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8496  003B30  0ED0               	movlw	208
  8497  003B32  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8498  003B34  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  8499                           
  8500                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8501  003B38  0E00               	movlw	0
  8502  003B3A  0100               	movlb	0	; () banked
  8503  003B3C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8504  003B3E  0E00               	movlw	0
  8505  003B40  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8506  003B42  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  8507                           
  8508                           ;RTC.c: 51: I2C_Master_Stop();
  8509  003B46  ECBE  F024         	call	_I2C_Master_Stop	;wreg free
  8510                           
  8511                           ;RTC.c: 54: I2C_Master_Start();
  8512  003B4A  ECC2  F024         	call	_I2C_Master_Start	;wreg free
  8513                           
  8514                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8515  003B4E  0E00               	movlw	0
  8516  003B50  0100               	movlb	0	; () banked
  8517  003B52  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8518  003B54  0ED1               	movlw	209
  8519  003B56  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8520  003B58  ECB0  F024         	call	_I2C_Master_Write	;wreg free
  8521                           
  8522                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8523  003B5C  0E00               	movlw	0
  8524  003B5E  0100               	movlb	0	; () banked
  8525  003B60  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8526  003B62  0E00               	movlw	0
  8527  003B64  6F83               	movwf	getRTC@i& (0+255),b
  8528  003B66                     l5681:
  8529                           
  8530                           ; BSR set to: 0
  8531  003B66  0100               	movlb	0	; () banked
  8532  003B68  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8533  003B6A  D008               	goto	l5685
  8534  003B6C  0100               	movlb	0	; () banked
  8535  003B6E  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8536  003B70  E115               	bnz	l5691
  8537  003B72  0E06               	movlw	6
  8538  003B74  0100               	movlb	0	; () banked
  8539  003B76  5D83               	subwf	getRTC@i& (0+255),w,b
  8540  003B78  B0D8               	btfsc	status,0,c
  8541  003B7A  D010               	goto	l5691
  8542  003B7C                     l5685:
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8546  003B7C  0E24               	movlw	low _time
  8547  003B7E  0100               	movlb	0	; () banked
  8548  003B80  2583               	addwf	getRTC@i& (0+255),w,b
  8549  003B82  6ED9               	movwf	fsr2l,c
  8550  003B84  0E01               	movlw	high _time
  8551  003B86  0100               	movlb	0	; () banked
  8552  003B88  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8553  003B8A  6EDA               	movwf	fsr2h,c
  8554  003B8C  0E01               	movlw	1
  8555  003B8E  EC5F  F023         	call	_I2C_Master_Read
  8556  003B92  6EDF               	movwf	indf2,c
  8557  003B94  0100               	movlb	0	; () banked
  8558  003B96  4B83               	infsnz	getRTC@i& (0+255),f,b
  8559  003B98  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8560  003B9A  D7E5               	goto	l5681
  8561  003B9C                     l5691:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;RTC.c: 58: }
  8565                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8566  003B9C  0E00               	movlw	0
  8567  003B9E  EC5F  F023         	call	_I2C_Master_Read
  8568  003BA2  0101               	movlb	1	; () banked
  8569  003BA4  6F2A               	movwf	(_time+6)& (0+255),b
  8570                           
  8571                           ;RTC.c: 60: I2C_Master_Stop();
  8572  003BA6  ECBE  F024         	call	_I2C_Master_Stop	;wreg free
  8573  003BAA  0012               	return		;funcret
  8574  003BAC                     __end_of_getRTC:
  8575                           	opt stack 0
  8576                           tblptru	equ	0xFF8
  8577                           tblptrh	equ	0xFF7
  8578                           tblptrl	equ	0xFF6
  8579                           tablat	equ	0xFF5
  8580                           prodh	equ	0xFF4
  8581                           prodl	equ	0xFF3
  8582                           intcon	equ	0xFF2
  8583                           intcon2	equ	0xFF1
  8584                           intcon3	equ	0xFF0
  8585                           postinc0	equ	0xFEE
  8586                           wreg	equ	0xFE8
  8587                           postdec1	equ	0xFE5
  8588                           fsr1l	equ	0xFE1
  8589                           indf2	equ	0xFDF
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           
  8596 ;; *************** function _I2C_Master_Write *****************
  8597 ;; Defined at:
  8598 ;;		line 49 in file "I2C.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  d               2    1[BANK0 ] unsigned int 
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;		None
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      void 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, status,0, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;Total ram usage:        2 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    8
  8619 ;; This function calls:
  8620 ;;		_I2C_Master_Wait
  8621 ;; This function is called by:
  8622 ;;		_loadRTC
  8623 ;;		_getRTC
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text27
  8628  004960                     __ptext27:
  8629                           	opt stack 0
  8630  004960                     _I2C_Master_Write:
  8631                           	opt stack 18
  8632                           
  8633                           ;I2C.c: 51: I2C_Master_Wait();
  8634                           
  8635                           ;incstack = 0
  8636  004960  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8637                           
  8638                           ;I2C.c: 52: SSPBUF = d;
  8639  004964  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8640  004968  0012               	return		;funcret
  8641  00496A                     __end_of_I2C_Master_Write:
  8642                           	opt stack 0
  8643                           tblptru	equ	0xFF8
  8644                           tblptrh	equ	0xFF7
  8645                           tblptrl	equ	0xFF6
  8646                           tablat	equ	0xFF5
  8647                           prodh	equ	0xFF4
  8648                           prodl	equ	0xFF3
  8649                           intcon	equ	0xFF2
  8650                           intcon2	equ	0xFF1
  8651                           intcon3	equ	0xFF0
  8652                           postinc0	equ	0xFEE
  8653                           wreg	equ	0xFE8
  8654                           postdec1	equ	0xFE5
  8655                           fsr1l	equ	0xFE1
  8656                           indf2	equ	0xFDF
  8657                           postinc2	equ	0xFDE
  8658                           postdec2	equ	0xFDD
  8659                           fsr2h	equ	0xFDA
  8660                           fsr2l	equ	0xFD9
  8661                           status	equ	0xFD8
  8662                           
  8663 ;; *************** function _I2C_Master_Stop *****************
  8664 ;; Defined at:
  8665 ;;		line 43 in file "I2C.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;		None
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;		None
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  1    wreg      void 
  8672 ;; Registers used:
  8673 ;;		wreg, status,2, status,0, cstack
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;Total ram usage:        0 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:    8
  8686 ;; This function calls:
  8687 ;;		_I2C_Master_Wait
  8688 ;; This function is called by:
  8689 ;;		_loadRTC
  8690 ;;		_getRTC
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           	psect	text28
  8695  00497C                     __ptext28:
  8696                           	opt stack 0
  8697  00497C                     _I2C_Master_Stop:
  8698                           	opt stack 18
  8699                           
  8700                           ;I2C.c: 45: I2C_Master_Wait();
  8701                           
  8702                           ;incstack = 0
  8703  00497C  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8704                           
  8705                           ;I2C.c: 46: PEN = 1;
  8706  004980  84C5               	bsf	4037,2,c	;volatile
  8707  004982  0012               	return		;funcret
  8708  004984                     __end_of_I2C_Master_Stop:
  8709                           	opt stack 0
  8710                           tblptru	equ	0xFF8
  8711                           tblptrh	equ	0xFF7
  8712                           tblptrl	equ	0xFF6
  8713                           tablat	equ	0xFF5
  8714                           prodh	equ	0xFF4
  8715                           prodl	equ	0xFF3
  8716                           intcon	equ	0xFF2
  8717                           intcon2	equ	0xFF1
  8718                           intcon3	equ	0xFF0
  8719                           postinc0	equ	0xFEE
  8720                           wreg	equ	0xFE8
  8721                           postdec1	equ	0xFE5
  8722                           fsr1l	equ	0xFE1
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           fsr2h	equ	0xFDA
  8727                           fsr2l	equ	0xFD9
  8728                           status	equ	0xFD8
  8729                           
  8730 ;; *************** function _I2C_Master_Start *****************
  8731 ;; Defined at:
  8732 ;;		line 31 in file "I2C.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;Total ram usage:        0 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    8
  8753 ;; This function calls:
  8754 ;;		_I2C_Master_Wait
  8755 ;; This function is called by:
  8756 ;;		_loadRTC
  8757 ;;		_getRTC
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text29
  8762  004984                     __ptext29:
  8763                           	opt stack 0
  8764  004984                     _I2C_Master_Start:
  8765                           	opt stack 18
  8766                           
  8767                           ;I2C.c: 33: I2C_Master_Wait();
  8768                           
  8769                           ;incstack = 0
  8770  004984  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8771                           
  8772                           ;I2C.c: 34: SEN = 1;
  8773  004988  80C5               	bsf	4037,0,c	;volatile
  8774  00498A  0012               	return		;funcret
  8775  00498C                     __end_of_I2C_Master_Start:
  8776                           	opt stack 0
  8777                           tblptru	equ	0xFF8
  8778                           tblptrh	equ	0xFF7
  8779                           tblptrl	equ	0xFF6
  8780                           tablat	equ	0xFF5
  8781                           prodh	equ	0xFF4
  8782                           prodl	equ	0xFF3
  8783                           intcon	equ	0xFF2
  8784                           intcon2	equ	0xFF1
  8785                           intcon3	equ	0xFF0
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec1	equ	0xFE5
  8789                           fsr1l	equ	0xFE1
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           postdec2	equ	0xFDD
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797 ;; *************** function _I2C_Master_Read *****************
  8798 ;; Defined at:
  8799 ;;		line 55 in file "I2C.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  a               1    wreg     unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  a               1    1[BANK0 ] unsigned char 
  8804 ;;  temp            1    2[BANK0 ] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      unsigned char 
  8807 ;; Registers used:
  8808 ;;		wreg, status,2, status,0, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;Total ram usage:        2 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    8
  8821 ;; This function calls:
  8822 ;;		_I2C_Master_Wait
  8823 ;; This function is called by:
  8824 ;;		_getRTC
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text30
  8829  0046BE                     __ptext30:
  8830                           	opt stack 0
  8831  0046BE                     _I2C_Master_Read:
  8832                           	opt stack 18
  8833                           
  8834                           ;incstack = 0
  8835                           ;I2C_Master_Read@a stored from wreg
  8836  0046BE  0100               	movlb	0	; () banked
  8837  0046C0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8838                           
  8839                           ;I2C.c: 57: unsigned char temp;
  8840                           ;I2C.c: 58: I2C_Master_Wait();
  8841  0046C2  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8842                           
  8843                           ;I2C.c: 59: RCEN = 1;
  8844  0046C6  86C5               	bsf	4037,3,c	;volatile
  8845                           
  8846                           ;I2C.c: 60: I2C_Master_Wait();
  8847  0046C8  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8848                           
  8849                           ;I2C.c: 61: temp = SSPBUF;
  8850  0046CC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8851                           
  8852                           ;I2C.c: 62: I2C_Master_Wait();
  8853  0046D0  EC81  F024         	call	_I2C_Master_Wait	;wreg free
  8854                           
  8855                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8856  0046D4  0100               	movlb	0	; () banked
  8857  0046D6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8858  0046D8  0100               	movlb	0	; () banked
  8859  0046DA  A4D8               	btfss	status,2,c
  8860  0046DC  D002               	goto	u3710
  8861  0046DE  8AC5               	bsf	4037,5,c	;volatile
  8862  0046E0  D001               	goto	l5369
  8863  0046E2                     u3710:
  8864  0046E2  9AC5               	bcf	4037,5,c	;volatile
  8865  0046E4                     l5369:
  8866                           
  8867                           ;I2C.c: 64: ACKEN = 1;
  8868  0046E4  88C5               	bsf	4037,4,c	;volatile
  8869                           
  8870                           ;I2C.c: 65: return temp;
  8871  0046E6  0100               	movlb	0	; () banked
  8872  0046E8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8873  0046EA  0012               	return	
  8874  0046EC                     __end_of_I2C_Master_Read:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           intcon2	equ	0xFF1
  8884                           intcon3	equ	0xFF0
  8885                           postinc0	equ	0xFEE
  8886                           wreg	equ	0xFE8
  8887                           postdec1	equ	0xFE5
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           fsr2h	equ	0xFDA
  8893                           fsr2l	equ	0xFD9
  8894                           status	equ	0xFD8
  8895                           
  8896 ;; *************** function _I2C_Master_Wait *****************
  8897 ;; Defined at:
  8898 ;;		line 26 in file "I2C.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;		None
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  1    wreg      void 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;Total ram usage:        1 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    7
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_I2C_Master_Start
  8923 ;;		_I2C_Master_Stop
  8924 ;;		_I2C_Master_Write
  8925 ;;		_I2C_Master_Read
  8926 ;;		_I2C_Master_RepeatedStart
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           	psect	text31
  8931  004902                     __ptext31:
  8932                           	opt stack 0
  8933  004902                     _I2C_Master_Wait:
  8934                           	opt stack 18
  8935  004902                     l66:
  8936  004902  B4C7               	btfsc	4039,2,c	;volatile
  8937  004904  D7FE               	goto	l66
  8938  004906  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8939  00490A  0E1F               	movlw	31
  8940  00490C  0100               	movlb	0	; () banked
  8941  00490E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8942  004910  B4D8               	btfsc	status,2,c
  8943  004912  0012               	return	
  8944  004914  D7F6               	goto	l66
  8945  004916                     __end_of_I2C_Master_Wait:
  8946                           	opt stack 0
  8947                           tblptru	equ	0xFF8
  8948                           tblptrh	equ	0xFF7
  8949                           tblptrl	equ	0xFF6
  8950                           tablat	equ	0xFF5
  8951                           prodh	equ	0xFF4
  8952                           prodl	equ	0xFF3
  8953                           intcon	equ	0xFF2
  8954                           intcon2	equ	0xFF1
  8955                           intcon3	equ	0xFF0
  8956                           postinc0	equ	0xFEE
  8957                           wreg	equ	0xFE8
  8958                           postdec1	equ	0xFE5
  8959                           fsr1l	equ	0xFE1
  8960                           indf2	equ	0xFDF
  8961                           postinc2	equ	0xFDE
  8962                           postdec2	equ	0xFDD
  8963                           fsr2h	equ	0xFDA
  8964                           fsr2l	equ	0xFD9
  8965                           status	equ	0xFD8
  8966                           
  8967 ;; *************** function _change_state_to_menu_22 *****************
  8968 ;; Defined at:
  8969 ;;		line 498 in file "UI.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;		None
  8974 ;; Return value:  Size  Location     Type
  8975 ;;                  1    wreg      void 
  8976 ;; Registers used:
  8977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;Total ram usage:        0 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:   10
  8990 ;; This function calls:
  8991 ;;		_lcdInst
  8992 ;;		_printf
  8993 ;; This function is called by:
  8994 ;;		_UI
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           	psect	text32
  8999  0043A0                     __ptext32:
  9000                           	opt stack 0
  9001  0043A0                     _change_state_to_menu_22:
  9002                           	opt stack 19
  9003                           
  9004                           ;UI.c: 499: cur_state = 22;
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;incstack = 0
  9008  0043A0  0E00               	movlw	0
  9009  0043A2  0100               	movlb	0	; () banked
  9010  0043A4  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9011  0043A6  0E16               	movlw	22
  9012  0043A8  6FE0               	movwf	_cur_state& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;UI.c: 501: lcdInst(0b10000000);;
  9016  0043AA  0E80               	movlw	128
  9017  0043AC  EC9C  F024         	call	_lcdInst
  9018                           
  9019                           ;UI.c: 502: printf("2. SORT        <");
  9020  0043B0  0EC4               	movlw	low STR_34
  9021  0043B2  0100               	movlb	0	; () banked
  9022  0043B4  6F8E               	movwf	printf@f& (0+255),b
  9023  0043B6  0EFD               	movlw	high STR_34
  9024  0043B8  0100               	movlb	0	; () banked
  9025  0043BA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9026  0043BC  ECB8  F008         	call	_printf	;wreg free
  9027                           
  9028                           ;UI.c: 503: lcdInst(0b11000000);;
  9029  0043C0  0EC0               	movlw	192
  9030  0043C2  EC9C  F024         	call	_lcdInst
  9031                           
  9032                           ;UI.c: 504: printf("3. LOGS         ");
  9033  0043C6  0E09               	movlw	low STR_36
  9034  0043C8  0100               	movlb	0	; () banked
  9035  0043CA  6F8E               	movwf	printf@f& (0+255),b
  9036  0043CC  0EFD               	movlw	high STR_36
  9037  0043CE  0100               	movlb	0	; () banked
  9038  0043D0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9039  0043D2  ECB8  F008         	call	_printf	;wreg free
  9040  0043D6  0012               	return		;funcret
  9041  0043D8                     __end_of_change_state_to_menu_22:
  9042                           	opt stack 0
  9043                           tblptru	equ	0xFF8
  9044                           tblptrh	equ	0xFF7
  9045                           tblptrl	equ	0xFF6
  9046                           tablat	equ	0xFF5
  9047                           prodh	equ	0xFF4
  9048                           prodl	equ	0xFF3
  9049                           intcon	equ	0xFF2
  9050                           intcon2	equ	0xFF1
  9051                           intcon3	equ	0xFF0
  9052                           postinc0	equ	0xFEE
  9053                           wreg	equ	0xFE8
  9054                           postdec1	equ	0xFE5
  9055                           fsr1l	equ	0xFE1
  9056                           indf2	equ	0xFDF
  9057                           postinc2	equ	0xFDE
  9058                           postdec2	equ	0xFDD
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function _change_state_to_menu_12 *****************
  9064 ;; Defined at:
  9065 ;;		line 490 in file "UI.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;		None
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;		None
  9070 ;; Return value:  Size  Location     Type
  9071 ;;                  1    wreg      void 
  9072 ;; Registers used:
  9073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9083 ;;Total ram usage:        0 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:   10
  9086 ;; This function calls:
  9087 ;;		_lcdInst
  9088 ;;		_printf
  9089 ;; This function is called by:
  9090 ;;		_UI
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           	psect	text33
  9095  0043D8                     __ptext33:
  9096                           	opt stack 0
  9097  0043D8                     _change_state_to_menu_12:
  9098                           	opt stack 19
  9099                           
  9100                           ;UI.c: 491: cur_state = 12;
  9101                           
  9102                           ;incstack = 0
  9103  0043D8  0E00               	movlw	0
  9104  0043DA  0100               	movlb	0	; () banked
  9105  0043DC  6FE1               	movwf	(_cur_state+1)& (0+255),b
  9106  0043DE  0E0C               	movlw	12
  9107  0043E0  6FE0               	movwf	_cur_state& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;UI.c: 493: lcdInst(0b10000000);;
  9111  0043E2  0E80               	movlw	128
  9112  0043E4  EC9C  F024         	call	_lcdInst
  9113                           
  9114                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9115  0043E8  0E2B               	movlw	low STR_33
  9116  0043EA  0100               	movlb	0	; () banked
  9117  0043EC  6F8E               	movwf	printf@f& (0+255),b
  9118  0043EE  0EFD               	movlw	high STR_33
  9119  0043F0  0100               	movlb	0	; () banked
  9120  0043F2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9121  0043F4  ECB8  F008         	call	_printf	;wreg free
  9122                           
  9123                           ;UI.c: 495: lcdInst(0b11000000);;
  9124  0043F8  0EC0               	movlw	192
  9125  0043FA  EC9C  F024         	call	_lcdInst
  9126                           
  9127                           ;UI.c: 496: printf("2. SORT        <");
  9128  0043FE  0EC4               	movlw	low STR_34
  9129  004400  0100               	movlb	0	; () banked
  9130  004402  6F8E               	movwf	printf@f& (0+255),b
  9131  004404  0EFD               	movlw	high STR_34
  9132  004406  0100               	movlb	0	; () banked
  9133  004408  6F8F               	movwf	(printf@f+1)& (0+255),b
  9134  00440A  ECB8  F008         	call	_printf	;wreg free
  9135  00440E  0012               	return		;funcret
  9136  004410                     __end_of_change_state_to_menu_12:
  9137                           	opt stack 0
  9138                           tblptru	equ	0xFF8
  9139                           tblptrh	equ	0xFF7
  9140                           tblptrl	equ	0xFF6
  9141                           tablat	equ	0xFF5
  9142                           prodh	equ	0xFF4
  9143                           prodl	equ	0xFF3
  9144                           intcon	equ	0xFF2
  9145                           intcon2	equ	0xFF1
  9146                           intcon3	equ	0xFF0
  9147                           postinc0	equ	0xFEE
  9148                           wreg	equ	0xFE8
  9149                           postdec1	equ	0xFE5
  9150                           fsr1l	equ	0xFE1
  9151                           indf2	equ	0xFDF
  9152                           postinc2	equ	0xFDE
  9153                           postdec2	equ	0xFDD
  9154                           fsr2h	equ	0xFDA
  9155                           fsr2l	equ	0xFD9
  9156                           status	equ	0xFD8
  9157                           
  9158 ;; *************** function ___awmod *****************
  9159 ;; Defined at:
  9160 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  dividend        2    0[BANK0 ] int 
  9163 ;;  divisor         2    2[BANK0 ] int 
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  sign            1    5[BANK0 ] unsigned char 
  9166 ;;  counter         1    4[BANK0 ] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  2    0[BANK0 ] int 
  9169 ;; Registers used:
  9170 ;;		wreg, status,2, status,0
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9176 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;Total ram usage:        6 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    7
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_UI
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           	psect	text34
  9191  0039F8                     __ptext34:
  9192                           	opt stack 0
  9193  0039F8                     ___awmod:
  9194                           	opt stack 22
  9195                           
  9196                           ;incstack = 0
  9197  0039F8  0E00               	movlw	0
  9198  0039FA  0100               	movlb	0	; () banked
  9199  0039FC  6F85               	movwf	___awmod@sign& (0+255),b
  9200                           
  9201                           ; BSR set to: 0
  9202  0039FE  0100               	movlb	0	; () banked
  9203  003A00  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9204  003A02  D008               	goto	l7471
  9205                           
  9206                           ; BSR set to: 0
  9207  003A04  0100               	movlb	0	; () banked
  9208  003A06  6D80               	negf	___awmod@dividend& (0+255),b
  9209  003A08  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9210  003A0A  B0D8               	btfsc	status,0,c
  9211  003A0C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9212                           
  9213                           ; BSR set to: 0
  9214  003A0E  0E01               	movlw	1
  9215  003A10  0100               	movlb	0	; () banked
  9216  003A12  6F85               	movwf	___awmod@sign& (0+255),b
  9217  003A14                     l7471:
  9218                           
  9219                           ; BSR set to: 0
  9220  003A14  0100               	movlb	0	; () banked
  9221  003A16  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9222  003A18  D005               	goto	l7475
  9223                           
  9224                           ; BSR set to: 0
  9225  003A1A  0100               	movlb	0	; () banked
  9226  003A1C  6D82               	negf	___awmod@divisor& (0+255),b
  9227  003A1E  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9228  003A20  B0D8               	btfsc	status,0,c
  9229  003A22  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9230  003A24                     l7475:
  9231                           
  9232                           ; BSR set to: 0
  9233  003A24  0100               	movlb	0	; () banked
  9234  003A26  5182               	movf	___awmod@divisor& (0+255),w,b
  9235  003A28  0100               	movlb	0	; () banked
  9236  003A2A  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9237  003A2C  B4D8               	btfsc	status,2,c
  9238  003A2E  D026               	goto	l7491
  9239                           
  9240                           ; BSR set to: 0
  9241  003A30  0E01               	movlw	1
  9242  003A32  0100               	movlb	0	; () banked
  9243  003A34  6F84               	movwf	___awmod@counter& (0+255),b
  9244  003A36  D006               	goto	l7481
  9245  003A38                     l7479:
  9246                           
  9247                           ; BSR set to: 0
  9248  003A38  0100               	movlb	0	; () banked
  9249  003A3A  90D8               	bcf	status,0,c
  9250  003A3C  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9251  003A3E  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9252  003A40  0100               	movlb	0	; () banked
  9253  003A42  2B84               	incf	___awmod@counter& (0+255),f,b
  9254  003A44                     l7481:
  9255                           
  9256                           ; BSR set to: 0
  9257  003A44  0100               	movlb	0	; () banked
  9258  003A46  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9259  003A48  D7F7               	goto	l7479
  9260  003A4A                     l7483:
  9261                           
  9262                           ; BSR set to: 0
  9263  003A4A  0100               	movlb	0	; () banked
  9264  003A4C  5182               	movf	___awmod@divisor& (0+255),w,b
  9265  003A4E  0100               	movlb	0	; () banked
  9266  003A50  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9267  003A52  0100               	movlb	0	; () banked
  9268  003A54  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9269  003A56  0100               	movlb	0	; () banked
  9270  003A58  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9271  003A5A  A0D8               	btfss	status,0,c
  9272  003A5C  D008               	goto	l7487
  9273                           
  9274                           ; BSR set to: 0
  9275  003A5E  0100               	movlb	0	; () banked
  9276  003A60  5182               	movf	___awmod@divisor& (0+255),w,b
  9277  003A62  0100               	movlb	0	; () banked
  9278  003A64  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9279  003A66  0100               	movlb	0	; () banked
  9280  003A68  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9281  003A6A  0100               	movlb	0	; () banked
  9282  003A6C  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9283  003A6E                     l7487:
  9284                           
  9285                           ; BSR set to: 0
  9286  003A6E  0100               	movlb	0	; () banked
  9287  003A70  90D8               	bcf	status,0,c
  9288  003A72  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9289  003A74  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9290                           
  9291                           ; BSR set to: 0
  9292  003A76  0100               	movlb	0	; () banked
  9293  003A78  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9294  003A7A  D7E7               	goto	l7483
  9295  003A7C                     l7491:
  9296                           
  9297                           ; BSR set to: 0
  9298  003A7C  0100               	movlb	0	; () banked
  9299  003A7E  5185               	movf	___awmod@sign& (0+255),w,b
  9300  003A80  0100               	movlb	0	; () banked
  9301  003A82  B4D8               	btfsc	status,2,c
  9302  003A84  D005               	goto	l7495
  9303                           
  9304                           ; BSR set to: 0
  9305  003A86  0100               	movlb	0	; () banked
  9306  003A88  6D80               	negf	___awmod@dividend& (0+255),b
  9307  003A8A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9308  003A8C  B0D8               	btfsc	status,0,c
  9309  003A8E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9310  003A90                     l7495:
  9311                           
  9312                           ; BSR set to: 0
  9313  003A90  C080  F080         	movff	___awmod@dividend,?___awmod
  9314  003A94  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9315  003A98  0012               	return	
  9316  003A9A                     __end_of___awmod:
  9317                           	opt stack 0
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           intcon	equ	0xFF2
  9325                           intcon2	equ	0xFF1
  9326                           intcon3	equ	0xFF0
  9327                           postinc0	equ	0xFEE
  9328                           wreg	equ	0xFE8
  9329                           postdec1	equ	0xFE5
  9330                           fsr1l	equ	0xFE1
  9331                           indf2	equ	0xFDF
  9332                           postinc2	equ	0xFDE
  9333                           postdec2	equ	0xFDD
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function ___awdiv *****************
  9339 ;; Defined at:
  9340 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  dividend        2    6[BANK0 ] int 
  9343 ;;  divisor         2    8[BANK0 ] int 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  quotient        2   12[BANK0 ] int 
  9346 ;;  sign            1   11[BANK0 ] unsigned char 
  9347 ;;  counter         1   10[BANK0 ] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  2    6[BANK0 ] int 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;Total ram usage:        8 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    7
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_UI
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text35
  9372  0037D4                     __ptext35:
  9373                           	opt stack 0
  9374  0037D4                     ___awdiv:
  9375                           	opt stack 22
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;incstack = 0
  9379  0037D4  0E00               	movlw	0
  9380  0037D6  0100               	movlb	0	; () banked
  9381  0037D8  6F8B               	movwf	___awdiv@sign& (0+255),b
  9382                           
  9383                           ; BSR set to: 0
  9384  0037DA  0100               	movlb	0	; () banked
  9385  0037DC  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9386  0037DE  D008               	goto	l7427
  9387                           
  9388                           ; BSR set to: 0
  9389  0037E0  0100               	movlb	0	; () banked
  9390  0037E2  6D88               	negf	___awdiv@divisor& (0+255),b
  9391  0037E4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9392  0037E6  B0D8               	btfsc	status,0,c
  9393  0037E8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9394                           
  9395                           ; BSR set to: 0
  9396  0037EA  0E01               	movlw	1
  9397  0037EC  0100               	movlb	0	; () banked
  9398  0037EE  6F8B               	movwf	___awdiv@sign& (0+255),b
  9399  0037F0                     l7427:
  9400                           
  9401                           ; BSR set to: 0
  9402  0037F0  0100               	movlb	0	; () banked
  9403  0037F2  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9404  0037F4  D008               	goto	l7433
  9405                           
  9406                           ; BSR set to: 0
  9407  0037F6  0100               	movlb	0	; () banked
  9408  0037F8  6D86               	negf	___awdiv@dividend& (0+255),b
  9409  0037FA  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9410  0037FC  B0D8               	btfsc	status,0,c
  9411  0037FE  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9412                           
  9413                           ; BSR set to: 0
  9414  003800  0E01               	movlw	1
  9415  003802  0100               	movlb	0	; () banked
  9416  003804  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9417  003806                     l7433:
  9418                           
  9419                           ; BSR set to: 0
  9420  003806  0E00               	movlw	0
  9421  003808  0100               	movlb	0	; () banked
  9422  00380A  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9423  00380C  0E00               	movlw	0
  9424  00380E  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9425                           
  9426                           ; BSR set to: 0
  9427  003810  0100               	movlb	0	; () banked
  9428  003812  5188               	movf	___awdiv@divisor& (0+255),w,b
  9429  003814  0100               	movlb	0	; () banked
  9430  003816  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9431  003818  B4D8               	btfsc	status,2,c
  9432  00381A  D02C               	goto	l7455
  9433                           
  9434                           ; BSR set to: 0
  9435  00381C  0E01               	movlw	1
  9436  00381E  0100               	movlb	0	; () banked
  9437  003820  6F8A               	movwf	___awdiv@counter& (0+255),b
  9438  003822  D006               	goto	l7441
  9439  003824                     l7439:
  9440                           
  9441                           ; BSR set to: 0
  9442  003824  0100               	movlb	0	; () banked
  9443  003826  90D8               	bcf	status,0,c
  9444  003828  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9445  00382A  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9446  00382C  0100               	movlb	0	; () banked
  9447  00382E  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9448  003830                     l7441:
  9449                           
  9450                           ; BSR set to: 0
  9451  003830  0100               	movlb	0	; () banked
  9452  003832  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9453  003834  D7F7               	goto	l7439
  9454  003836                     l7443:
  9455                           
  9456                           ; BSR set to: 0
  9457  003836  0100               	movlb	0	; () banked
  9458  003838  90D8               	bcf	status,0,c
  9459  00383A  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9460  00383C  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9461                           
  9462                           ; BSR set to: 0
  9463  00383E  0100               	movlb	0	; () banked
  9464  003840  5188               	movf	___awdiv@divisor& (0+255),w,b
  9465  003842  0100               	movlb	0	; () banked
  9466  003844  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9467  003846  0100               	movlb	0	; () banked
  9468  003848  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9469  00384A  0100               	movlb	0	; () banked
  9470  00384C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9471  00384E  A0D8               	btfss	status,0,c
  9472  003850  D00A               	goto	l7451
  9473                           
  9474                           ; BSR set to: 0
  9475  003852  0100               	movlb	0	; () banked
  9476  003854  5188               	movf	___awdiv@divisor& (0+255),w,b
  9477  003856  0100               	movlb	0	; () banked
  9478  003858  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9479  00385A  0100               	movlb	0	; () banked
  9480  00385C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9481  00385E  0100               	movlb	0	; () banked
  9482  003860  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9483                           
  9484                           ; BSR set to: 0
  9485  003862  0100               	movlb	0	; () banked
  9486  003864  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9487  003866                     l7451:
  9488                           
  9489                           ; BSR set to: 0
  9490  003866  0100               	movlb	0	; () banked
  9491  003868  90D8               	bcf	status,0,c
  9492  00386A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9493  00386C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9494                           
  9495                           ; BSR set to: 0
  9496  00386E  0100               	movlb	0	; () banked
  9497  003870  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9498  003872  D7E1               	goto	l7443
  9499  003874                     l7455:
  9500                           
  9501                           ; BSR set to: 0
  9502  003874  0100               	movlb	0	; () banked
  9503  003876  518B               	movf	___awdiv@sign& (0+255),w,b
  9504  003878  0100               	movlb	0	; () banked
  9505  00387A  B4D8               	btfsc	status,2,c
  9506  00387C  D005               	goto	l7459
  9507                           
  9508                           ; BSR set to: 0
  9509  00387E  0100               	movlb	0	; () banked
  9510  003880  6D8C               	negf	___awdiv@quotient& (0+255),b
  9511  003882  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9512  003884  B0D8               	btfsc	status,0,c
  9513  003886  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9514  003888                     l7459:
  9515                           
  9516                           ; BSR set to: 0
  9517  003888  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9518  00388C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9519  003890  0012               	return	
  9520  003892                     __end_of___awdiv:
  9521                           	opt stack 0
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _Test *****************
  9543 ;; Defined at:
  9544 ;;		line 30 in file "Test.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;		None
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  1    wreg      void 
  9551 ;; Registers used:
  9552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;Total ram usage:        2 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:   11
  9565 ;; This function calls:
  9566 ;;		_BlockerTest
  9567 ;;		_BothServos
  9568 ;;		_EEPROMTest
  9569 ;;		_PortTestA5
  9570 ;;		_PortTests
  9571 ;;		_PusherTest
  9572 ;;		_SpeedTest
  9573 ;;		_actuatorTest
  9574 ;;		_algorithmTest
  9575 ;;		_lcdInst
  9576 ;;		_printf
  9577 ;;		_sensorTest
  9578 ;; This function is called by:
  9579 ;;		_main
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           	psect	text36
  9584  00337A                     __ptext36:
  9585                           	opt stack 0
  9586  00337A                     _Test:
  9587                           	opt stack 19
  9588  00337A                     
  9589                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9590  00337A  0E01               	movlw	1
  9591  00337C  EC9C  F024         	call	_lcdInst
  9592  003380  0E68               	movlw	104
  9593  003382  0100               	movlb	0	; () banked
  9594  003384  6FC6               	movwf	??_Test& (0+255),b
  9595  003386  0EE4               	movlw	228
  9596  003388                     u7747:
  9597  003388  2EE8               	decfsz	wreg,f,c
  9598  00338A  D7FE               	bra	u7747
  9599  00338C  2FC6               	decfsz	??_Test& (0+255),f,b
  9600  00338E  D7FC               	bra	u7747
  9601  003390  F000               	nop	
  9602  003392  0E80               	movlw	128
  9603  003394  EC9C  F024         	call	_lcdInst
  9604                           
  9605                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9606  003398  0E70               	movlw	low STR_68
  9607  00339A  0100               	movlb	0	; () banked
  9608  00339C  6F8E               	movwf	printf@f& (0+255),b
  9609  00339E  0EFC               	movlw	high STR_68
  9610  0033A0  0100               	movlb	0	; () banked
  9611  0033A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9612  0033A4  ECB8  F008         	call	_printf	;wreg free
  9613                           
  9614                           ;Test.c: 35: lcdInst(0b11000000);;
  9615  0033A8  0EC0               	movlw	192
  9616  0033AA  EC9C  F024         	call	_lcdInst
  9617                           
  9618                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9619  0033AE  0EA3               	movlw	low STR_69
  9620  0033B0  0100               	movlb	0	; () banked
  9621  0033B2  6F8E               	movwf	printf@f& (0+255),b
  9622  0033B4  0EFC               	movlw	high STR_69
  9623  0033B6  0100               	movlb	0	; () banked
  9624  0033B8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9625  0033BA  ECB8  F008         	call	_printf	;wreg free
  9626                           
  9627                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9628  0033BE  0E05               	movlw	5
  9629  0033C0  0100               	movlb	0	; () banked
  9630  0033C2  6FC7               	movwf	(??_Test+1)& (0+255),b
  9631  0033C4  0E0F               	movlw	15
  9632  0033C6  0100               	movlb	0	; () banked
  9633  0033C8  6FC6               	movwf	??_Test& (0+255),b
  9634  0033CA  0EF1               	movlw	241
  9635  0033CC                     u7757:
  9636  0033CC  2EE8               	decfsz	wreg,f,c
  9637  0033CE  D7FE               	bra	u7757
  9638  0033D0  2FC6               	decfsz	??_Test& (0+255),f,b
  9639  0033D2  D7FC               	bra	u7757
  9640  0033D4  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9641  0033D6  D7FA               	bra	u7757
  9642  0033D8                     l1046:
  9643  0033D8  A281               	btfss	3969,1,c	;volatile
  9644  0033DA  D7FE               	goto	l1046
  9645                           
  9646                           ;Test.c: 39: var = PORTB >> 4;
  9647  0033DC  CF81 F0C6          	movff	3969,??_Test	;volatile
  9648  0033E0  0100               	movlb	0	; () banked
  9649  0033E2  3BC6               	swapf	??_Test& (0+255),f,b
  9650  0033E4  0E0F               	movlw	15
  9651  0033E6  17C6               	andwf	??_Test& (0+255),f,b
  9652  0033E8  0100               	movlb	0	; () banked
  9653  0033EA  51C6               	movf	??_Test& (0+255),w,b
  9654  0033EC  0100               	movlb	0	; () banked
  9655  0033EE  6FFA               	movwf	_var& (0+255),b
  9656  0033F0  6BFB               	clrf	(_var+1)& (0+255),b
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;Test.c: 40: var++;
  9660  0033F2  0100               	movlb	0	; () banked
  9661  0033F4  4BFA               	infsnz	_var& (0+255),f,b
  9662  0033F6  2BFB               	incf	(_var+1)& (0+255),f,b
  9663  0033F8                     l1049:
  9664  0033F8  A281               	btfss	3969,1,c	;volatile
  9665  0033FA  D01F               	goto	l8195
  9666  0033FC  D7FD               	goto	l1049
  9667  0033FE                     l8173:
  9668                           
  9669                           ;Test.c: 44: algorithmTest();
  9670  0033FE  ECB9  F01A         	call	_algorithmTest	;wreg free
  9671                           
  9672                           ;Test.c: 45: break;
  9673  003402  D7BB               	goto	l8155
  9674  003404                     l8175:
  9675                           
  9676                           ;Test.c: 47: sensorTest();
  9677  003404  EC51  F00E         	call	_sensorTest	;wreg free
  9678                           
  9679                           ;Test.c: 48: break;
  9680  003408  D7B8               	goto	l8155
  9681  00340A                     l8177:
  9682                           
  9683                           ;Test.c: 50: actuatorTest();
  9684  00340A  EC09  F000         	call	_actuatorTest	;wreg free
  9685                           
  9686                           ;Test.c: 51: break;
  9687  00340E  D7B5               	goto	l8155
  9688  003410                     l8179:
  9689                           
  9690                           ;Test.c: 53: PortTestA5();
  9691  003410  EC40  F020         	call	_PortTestA5	;wreg free
  9692                           
  9693                           ;Test.c: 54: break;
  9694  003414  D7B2               	goto	l8155
  9695  003416                     l8181:
  9696                           
  9697                           ;Test.c: 57: SpeedTest();
  9698  003416  ECD6  F01D         	call	_SpeedTest	;wreg free
  9699                           
  9700                           ;Test.c: 58: break;
  9701  00341A  D7AF               	goto	l8155
  9702  00341C                     l8183:
  9703                           
  9704                           ;Test.c: 60: EEPROMTest();
  9705  00341C  ECCE  F024         	call	_EEPROMTest	;wreg free
  9706                           
  9707                           ;Test.c: 61: break;
  9708  003420  D7AC               	goto	l8155
  9709  003422                     l8185:
  9710                           
  9711                           ;Test.c: 63: PusherTest();
  9712  003422  EC5A  F01E         	call	_PusherTest	;wreg free
  9713                           
  9714                           ;Test.c: 64: break;
  9715  003426  D7A9               	goto	l8155
  9716  003428                     l8187:
  9717                           
  9718                           ;Test.c: 66: PortTests();
  9719  003428  EC18  F01E         	call	_PortTests	;wreg free
  9720                           
  9721                           ;Test.c: 67: break;
  9722  00342C  D7A6               	goto	l8155
  9723  00342E                     l8189:
  9724                           
  9725                           ;Test.c: 69: BothServos();
  9726  00342E  ECD4  F00A         	call	_BothServos	;wreg free
  9727                           
  9728                           ;Test.c: 70: break;
  9729  003432  D7A3               	goto	l8155
  9730  003434                     l8191:
  9731                           
  9732                           ;Test.c: 72: BlockerTest();
  9733  003434  EC24  F01B         	call	_BlockerTest	;wreg free
  9734                           
  9735                           ;Test.c: 76: }
  9736                           
  9737                           ;Test.c: 75: break;
  9738                           
  9739                           ;Test.c: 74: default:
  9740                           
  9741                           ;Test.c: 73: break;
  9742  003438  D7A0               	goto	l8155
  9743  00343A                     l8195:
  9744  00343A  C0FA  F0C6         	movff	_var,??_Test
  9745  00343E  C0FB  F0C7         	movff	_var+1,??_Test+1
  9746                           
  9747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9748                           ; Switch size 1, requested type "space"
  9749                           ; Number of cases is 1, Range of values is 0 to 0
  9750                           ; switch strategies available:
  9751                           ; Name         Instructions Cycles
  9752                           ; simple_byte            4     3 (average)
  9753                           ;	Chosen strategy is simple_byte
  9754  003442  0100               	movlb	0	; () banked
  9755  003444  51C7               	movf	(??_Test+1)& (0+255),w,b
  9756  003446  0A00               	xorlw	0	; case 0
  9757  003448  A4D8               	btfss	status,2,c
  9758  00344A  D797               	goto	l8155
  9759                           
  9760                           ; BSR set to: 0
  9761                           ; Switch size 1, requested type "space"
  9762                           ; Number of cases is 10, Range of values is 1 to 11
  9763                           ; switch strategies available:
  9764                           ; Name         Instructions Cycles
  9765                           ; simple_byte           31    16 (average)
  9766                           ;	Chosen strategy is simple_byte
  9767  00344C  0100               	movlb	0	; () banked
  9768  00344E  51C6               	movf	??_Test& (0+255),w,b
  9769  003450  0A01               	xorlw	1	; case 1
  9770  003452  B4D8               	btfsc	status,2,c
  9771  003454  D7D4               	goto	l8173
  9772  003456  0A03               	xorlw	3	; case 2
  9773  003458  B4D8               	btfsc	status,2,c
  9774  00345A  D7D4               	goto	l8175
  9775  00345C  0A01               	xorlw	1	; case 3
  9776  00345E  B4D8               	btfsc	status,2,c
  9777  003460  D7D4               	goto	l8177
  9778  003462  0A06               	xorlw	6	; case 5
  9779  003464  B4D8               	btfsc	status,2,c
  9780  003466  D7D4               	goto	l8179
  9781  003468  0A03               	xorlw	3	; case 6
  9782  00346A  B4D8               	btfsc	status,2,c
  9783  00346C  D7D4               	goto	l8181
  9784  00346E  0A01               	xorlw	1	; case 7
  9785  003470  B4D8               	btfsc	status,2,c
  9786  003472  D7D4               	goto	l8183
  9787  003474  0A0F               	xorlw	15	; case 8
  9788  003476  B4D8               	btfsc	status,2,c
  9789  003478  D7D4               	goto	l8185
  9790  00347A  0A01               	xorlw	1	; case 9
  9791  00347C  B4D8               	btfsc	status,2,c
  9792  00347E  D7D4               	goto	l8187
  9793  003480  0A03               	xorlw	3	; case 10
  9794  003482  B4D8               	btfsc	status,2,c
  9795  003484  D7D4               	goto	l8189
  9796  003486  0A01               	xorlw	1	; case 11
  9797  003488  B4D8               	btfsc	status,2,c
  9798  00348A  D7D4               	goto	l8191
  9799                           
  9800                           ; BSR set to: 0
  9801                           
  9802                           ; BSR set to: 0
  9803  00348C  D776               	goto	l8155
  9804  00348E                     __end_of_Test:
  9805                           	opt stack 0
  9806                           tblptru	equ	0xFF8
  9807                           tblptrh	equ	0xFF7
  9808                           tblptrl	equ	0xFF6
  9809                           tablat	equ	0xFF5
  9810                           prodh	equ	0xFF4
  9811                           prodl	equ	0xFF3
  9812                           intcon	equ	0xFF2
  9813                           intcon2	equ	0xFF1
  9814                           intcon3	equ	0xFF0
  9815                           postinc0	equ	0xFEE
  9816                           wreg	equ	0xFE8
  9817                           postdec1	equ	0xFE5
  9818                           fsr1l	equ	0xFE1
  9819                           indf2	equ	0xFDF
  9820                           postinc2	equ	0xFDE
  9821                           postdec2	equ	0xFDD
  9822                           fsr2h	equ	0xFDA
  9823                           fsr2l	equ	0xFD9
  9824                           status	equ	0xFD8
  9825                           
  9826 ;; *************** function _sensorTest *****************
  9827 ;; Defined at:
  9828 ;;		line 124 in file "Test.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;		None
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;  res             2   45[BANK0 ] int 
  9833 ;; Return value:  Size  Location     Type
  9834 ;;                  1    wreg      void 
  9835 ;; Registers used:
  9836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;Total ram usage:        4 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; Hardware stack levels required when called:   10
  9849 ;; This function calls:
  9850 ;;		_lcdInst
  9851 ;;		_printf
  9852 ;;		_readADC
  9853 ;;		_readMAG
  9854 ;; This function is called by:
  9855 ;;		_Test
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           	psect	text37
  9860  001CA2                     __ptext37:
  9861                           	opt stack 0
  9862  001CA2                     _sensorTest:
  9863                           	opt stack 19
  9864                           
  9865                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;incstack = 0
  9869  001CA2  0E01               	movlw	1
  9870  001CA4  EC9C  F024         	call	_lcdInst
  9871  001CA8  0E68               	movlw	104
  9872  001CAA  0100               	movlb	0	; () banked
  9873  001CAC  6FAB               	movwf	??_sensorTest& (0+255),b
  9874  001CAE  0EE4               	movlw	228
  9875  001CB0                     u7767:
  9876  001CB0  2EE8               	decfsz	wreg,f,c
  9877  001CB2  D7FE               	bra	u7767
  9878  001CB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9879  001CB6  D7FC               	bra	u7767
  9880  001CB8  F000               	nop	
  9881  001CBA  0E80               	movlw	128
  9882  001CBC  EC9C  F024         	call	_lcdInst
  9883                           
  9884                           ;Test.c: 127: printf("SENSORS");
  9885  001CC0  0EAE               	movlw	low STR_77
  9886  001CC2  0100               	movlb	0	; () banked
  9887  001CC4  6F8E               	movwf	printf@f& (0+255),b
  9888  001CC6  0EFF               	movlw	high STR_77
  9889  001CC8  0100               	movlb	0	; () banked
  9890  001CCA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9891  001CCC  ECB8  F008         	call	_printf	;wreg free
  9892                           
  9893                           ;Test.c: 128: lcdInst(0b11000000);;
  9894  001CD0  0EC0               	movlw	192
  9895  001CD2  EC9C  F024         	call	_lcdInst
  9896                           
  9897                           ;Test.c: 129: printf("PUSH TO START");
  9898  001CD6  0E0B               	movlw	low STR_71
  9899  001CD8  0100               	movlb	0	; () banked
  9900  001CDA  6F8E               	movwf	printf@f& (0+255),b
  9901  001CDC  0EFF               	movlw	high STR_71
  9902  001CDE  0100               	movlb	0	; () banked
  9903  001CE0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9904  001CE2  ECB8  F008         	call	_printf	;wreg free
  9905                           
  9906                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
  9907  001CE6  0E05               	movlw	5
  9908  001CE8  0100               	movlb	0	; () banked
  9909  001CEA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9910  001CEC  0E0F               	movlw	15
  9911  001CEE  0100               	movlb	0	; () banked
  9912  001CF0  6FAB               	movwf	??_sensorTest& (0+255),b
  9913  001CF2  0EF1               	movlw	241
  9914  001CF4                     u7777:
  9915  001CF4  2EE8               	decfsz	wreg,f,c
  9916  001CF6  D7FE               	bra	u7777
  9917  001CF8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9918  001CFA  D7FC               	bra	u7777
  9919  001CFC  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9920  001CFE  D7FA               	bra	u7777
  9921  001D00                     l1079:
  9922  001D00  A281               	btfss	3969,1,c	;volatile
  9923  001D02  D7FE               	goto	l1079
  9924  001D04                     l1082:
  9925  001D04  B281               	btfsc	3969,1,c	;volatile
  9926  001D06  D7FE               	goto	l1082
  9927                           
  9928                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9929  001D08  0E01               	movlw	1
  9930  001D0A  EC9C  F024         	call	_lcdInst
  9931  001D0E  0E68               	movlw	104
  9932  001D10  0100               	movlb	0	; () banked
  9933  001D12  6FAB               	movwf	??_sensorTest& (0+255),b
  9934  001D14  0EE4               	movlw	228
  9935  001D16                     u7787:
  9936  001D16  2EE8               	decfsz	wreg,f,c
  9937  001D18  D7FE               	bra	u7787
  9938  001D1A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9939  001D1C  D7FC               	bra	u7787
  9940  001D1E  F000               	nop	
  9941  001D20  0E80               	movlw	128
  9942  001D22  EC9C  F024         	call	_lcdInst
  9943                           
  9944                           ;Test.c: 138: printf("TST: IR SNSR");
  9945  001D26  0E35               	movlw	low STR_79
  9946  001D28  0100               	movlb	0	; () banked
  9947  001D2A  6F8E               	movwf	printf@f& (0+255),b
  9948  001D2C  0EFF               	movlw	high STR_79
  9949  001D2E  0100               	movlb	0	; () banked
  9950  001D30  6F8F               	movwf	(printf@f+1)& (0+255),b
  9951  001D32  ECB8  F008         	call	_printf	;wreg free
  9952                           
  9953                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
  9954  001D36  0E05               	movlw	5
  9955  001D38  0100               	movlb	0	; () banked
  9956  001D3A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9957  001D3C  0E0F               	movlw	15
  9958  001D3E  0100               	movlb	0	; () banked
  9959  001D40  6FAB               	movwf	??_sensorTest& (0+255),b
  9960  001D42  0EF1               	movlw	241
  9961  001D44                     u7797:
  9962  001D44  2EE8               	decfsz	wreg,f,c
  9963  001D46  D7FE               	bra	u7797
  9964  001D48  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9965  001D4A  D7FC               	bra	u7797
  9966  001D4C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9967  001D4E  D7FA               	bra	u7797
  9968                           
  9969                           ;Test.c: 140: LATCbits.LATC5 = 1;
  9970  001D50  8A8B               	bsf	3979,5,c	;volatile
  9971                           
  9972                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
  9973  001D52  D05C               	goto	l6729
  9974  001D54                     l6711:
  9975                           
  9976                           ;Test.c: 142: readADC(0);
  9977  001D54  0E00               	movlw	0
  9978  001D56  ECA3  F023         	call	_readADC
  9979                           
  9980                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
  9981  001D5A  50C3               	movf	4035,w,c	;volatile
  9982  001D5C  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9983  001D60  0100               	movlb	0	; () banked
  9984  001D62  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9985  001D64  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9986  001D68  0100               	movlb	0	; () banked
  9987  001D6A  6BAB               	clrf	??_sensorTest& (0+255),b
  9988  001D6C  0100               	movlb	0	; () banked
  9989  001D6E  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9990  001D70  0100               	movlb	0	; () banked
  9991  001D72  6FAD               	movwf	sensorTest@res& (0+255),b
  9992  001D74  0100               	movlb	0	; () banked
  9993  001D76  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9994  001D78  0100               	movlb	0	; () banked
  9995  001D7A  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;Test.c: 144: IR_signal = (res > 1000) ? 1 : 0;
  9999  001D7C  0100               	movlb	0	; () banked
 10000  001D7E  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10001  001D80  D00A               	goto	u5200
 10002  001D82  0EE9               	movlw	233
 10003  001D84  0100               	movlb	0	; () banked
 10004  001D86  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10005  001D88  0E03               	movlw	3
 10006  001D8A  0100               	movlb	0	; () banked
 10007  001D8C  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10008  001D8E  A0D8               	btfss	status,0,c
 10009  001D90  D002               	goto	u5200
 10010  001D92  0E01               	movlw	1
 10011  001D94  D001               	goto	u5210
 10012  001D96                     u5200:
 10013  001D96  0E00               	movlw	0
 10014  001D98                     u5210:
 10015  001D98  0100               	movlb	0	; () banked
 10016  001D9A  6FDA               	movwf	_IR_signal& (0+255),b
 10017  001D9C  6BDB               	clrf	(_IR_signal+1)& (0+255),b
 10018                           
 10019                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10020  001D9E  0E01               	movlw	1
 10021  001DA0  EC9C  F024         	call	_lcdInst
 10022  001DA4  0E68               	movlw	104
 10023  001DA6  0100               	movlb	0	; () banked
 10024  001DA8  6FAB               	movwf	??_sensorTest& (0+255),b
 10025  001DAA  0EE4               	movlw	228
 10026  001DAC                     u7807:
 10027  001DAC  2EE8               	decfsz	wreg,f,c
 10028  001DAE  D7FE               	bra	u7807
 10029  001DB0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10030  001DB2  D7FC               	bra	u7807
 10031  001DB4  F000               	nop	
 10032  001DB6  0E80               	movlw	128
 10033  001DB8  EC9C  F024         	call	_lcdInst
 10034                           
 10035                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 10036  001DBC  0E5A               	movlw	low STR_80
 10037  001DBE  0100               	movlb	0	; () banked
 10038  001DC0  6F8E               	movwf	printf@f& (0+255),b
 10039  001DC2  0EFE               	movlw	high STR_80
 10040  001DC4  0100               	movlb	0	; () banked
 10041  001DC6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10042  001DC8  C0DA  F090         	movff	_IR_signal,?_printf+2
 10043  001DCC  C0DB  F091         	movff	_IR_signal+1,?_printf+3
 10044  001DD0  ECB8  F008         	call	_printf	;wreg free
 10045                           
 10046                           ;Test.c: 148: lcdInst(0b11000000);;
 10047  001DD4  0EC0               	movlw	192
 10048  001DD6  EC9C  F024         	call	_lcdInst
 10049                           
 10050                           ;Test.c: 149: printf("%d", res);
 10051  001DDA  0E16               	movlw	low (STR_27+14)
 10052  001DDC  0100               	movlb	0	; () banked
 10053  001DDE  6F8E               	movwf	printf@f& (0+255),b
 10054  001DE0  0EFE               	movlw	high (STR_27+14)
 10055  001DE2  0100               	movlb	0	; () banked
 10056  001DE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10057  001DE6  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10058  001DEA  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10059  001DEE  ECB8  F008         	call	_printf	;wreg free
 10060                           
 10061                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 10062  001DF2  0E05               	movlw	5
 10063  001DF4  0100               	movlb	0	; () banked
 10064  001DF6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10065  001DF8  0E0F               	movlw	15
 10066  001DFA  0100               	movlb	0	; () banked
 10067  001DFC  6FAB               	movwf	??_sensorTest& (0+255),b
 10068  001DFE  0EF1               	movlw	241
 10069  001E00                     u7817:
 10070  001E00  2EE8               	decfsz	wreg,f,c
 10071  001E02  D7FE               	bra	u7817
 10072  001E04  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10073  001E06  D7FC               	bra	u7817
 10074  001E08  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10075  001E0A  D7FA               	bra	u7817
 10076  001E0C                     l6729:
 10077  001E0C  A281               	btfss	3969,1,c	;volatile
 10078  001E0E  D7A2               	goto	l6711
 10079                           
 10080                           ;Test.c: 151: }
 10081                           ;Test.c: 152: LATCbits.LATC5 = 0;
 10082  001E10  9A8B               	bcf	3979,5,c	;volatile
 10083                           
 10084                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10085  001E12  0E01               	movlw	1
 10086  001E14  EC9C  F024         	call	_lcdInst
 10087  001E18  0E68               	movlw	104
 10088  001E1A  0100               	movlb	0	; () banked
 10089  001E1C  6FAB               	movwf	??_sensorTest& (0+255),b
 10090  001E1E  0EE4               	movlw	228
 10091  001E20                     u7827:
 10092  001E20  2EE8               	decfsz	wreg,f,c
 10093  001E22  D7FE               	bra	u7827
 10094  001E24  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10095  001E26  D7FC               	bra	u7827
 10096  001E28  F000               	nop	
 10097  001E2A  0E80               	movlw	128
 10098  001E2C  EC9C  F024         	call	_lcdInst
 10099                           
 10100                           ;Test.c: 160: printf("TST: MAGNETISM");
 10101  001E30  0E87               	movlw	low STR_82
 10102  001E32  0100               	movlb	0	; () banked
 10103  001E34  6F8E               	movwf	printf@f& (0+255),b
 10104  001E36  0EFE               	movlw	high STR_82
 10105  001E38  0100               	movlb	0	; () banked
 10106  001E3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10107  001E3C  ECB8  F008         	call	_printf	;wreg free
 10108                           
 10109                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10110  001E40  0E05               	movlw	5
 10111  001E42  0100               	movlb	0	; () banked
 10112  001E44  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10113  001E46  0E0F               	movlw	15
 10114  001E48  0100               	movlb	0	; () banked
 10115  001E4A  6FAB               	movwf	??_sensorTest& (0+255),b
 10116  001E4C  0EF1               	movlw	241
 10117  001E4E                     u7837:
 10118  001E4E  2EE8               	decfsz	wreg,f,c
 10119  001E50  D7FE               	bra	u7837
 10120  001E52  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10121  001E54  D7FC               	bra	u7837
 10122  001E56  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10123  001E58  D7FA               	bra	u7837
 10124                           
 10125                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 10126  001E5A  D021               	goto	l6747
 10127  001E5C                     l6741:
 10128                           
 10129                           ;Test.c: 163: readMAG();
 10130  001E5C  EC66  F021         	call	_readMAG	;wreg free
 10131                           
 10132                           ;Test.c: 164: lcdInst(0b10000000);;
 10133  001E60  0E80               	movlw	128
 10134  001E62  EC9C  F024         	call	_lcdInst
 10135                           
 10136                           ;Test.c: 165: lcdInst(0b11000000);;
 10137  001E66  0EC0               	movlw	192
 10138  001E68  EC9C  F024         	call	_lcdInst
 10139                           
 10140                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 10141  001E6C  0E2A               	movlw	low STR_83
 10142  001E6E  0100               	movlb	0	; () banked
 10143  001E70  6F8E               	movwf	printf@f& (0+255),b
 10144  001E72  0EFE               	movlw	high STR_83
 10145  001E74  0100               	movlb	0	; () banked
 10146  001E76  6F8F               	movwf	(printf@f+1)& (0+255),b
 10147  001E78  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10148  001E7C  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10149  001E80  ECB8  F008         	call	_printf	;wreg free
 10150                           
 10151                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 10152  001E84  0E05               	movlw	5
 10153  001E86  0100               	movlb	0	; () banked
 10154  001E88  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10155  001E8A  0E0F               	movlw	15
 10156  001E8C  0100               	movlb	0	; () banked
 10157  001E8E  6FAB               	movwf	??_sensorTest& (0+255),b
 10158  001E90  0EF1               	movlw	241
 10159  001E92                     u7847:
 10160  001E92  2EE8               	decfsz	wreg,f,c
 10161  001E94  D7FE               	bra	u7847
 10162  001E96  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10163  001E98  D7FC               	bra	u7847
 10164  001E9A  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10165  001E9C  D7FA               	bra	u7847
 10166  001E9E                     l6747:
 10167  001E9E  A281               	btfss	3969,1,c	;volatile
 10168  001EA0  D7DD               	goto	l6741
 10169                           
 10170                           ;Test.c: 168: }
 10171                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10172  001EA2  0E01               	movlw	1
 10173  001EA4  EC9C  F024         	call	_lcdInst
 10174  001EA8  0E68               	movlw	104
 10175  001EAA  0100               	movlb	0	; () banked
 10176  001EAC  6FAB               	movwf	??_sensorTest& (0+255),b
 10177  001EAE  0EE4               	movlw	228
 10178  001EB0                     u7857:
 10179  001EB0  2EE8               	decfsz	wreg,f,c
 10180  001EB2  D7FE               	bra	u7857
 10181  001EB4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10182  001EB6  D7FC               	bra	u7857
 10183  001EB8  F000               	nop	
 10184  001EBA  0E80               	movlw	128
 10185  001EBC  EC9C  F024         	call	_lcdInst
 10186                           
 10187                           ;Test.c: 174: printf("TST: COND");
 10188  001EC0  0E87               	movlw	low STR_84
 10189  001EC2  0100               	movlb	0	; () banked
 10190  001EC4  6F8E               	movwf	printf@f& (0+255),b
 10191  001EC6  0EFF               	movlw	high STR_84
 10192  001EC8  0100               	movlb	0	; () banked
 10193  001ECA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10194  001ECC  ECB8  F008         	call	_printf	;wreg free
 10195                           
 10196                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 10197  001ED0  0E05               	movlw	5
 10198  001ED2  0100               	movlb	0	; () banked
 10199  001ED4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10200  001ED6  0E0F               	movlw	15
 10201  001ED8  0100               	movlb	0	; () banked
 10202  001EDA  6FAB               	movwf	??_sensorTest& (0+255),b
 10203  001EDC  0EF1               	movlw	241
 10204  001EDE                     u7867:
 10205  001EDE  2EE8               	decfsz	wreg,f,c
 10206  001EE0  D7FE               	bra	u7867
 10207  001EE2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10208  001EE4  D7FC               	bra	u7867
 10209  001EE6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10210  001EE8  D7FA               	bra	u7867
 10211  001EEA                     l6759:
 10212                           
 10213                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10214  001EEA  0E01               	movlw	1
 10215  001EEC  EC9C  F024         	call	_lcdInst
 10216  001EF0  0E68               	movlw	104
 10217  001EF2  0100               	movlb	0	; () banked
 10218  001EF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10219  001EF6  0EE4               	movlw	228
 10220  001EF8                     u7877:
 10221  001EF8  2EE8               	decfsz	wreg,f,c
 10222  001EFA  D7FE               	bra	u7877
 10223  001EFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10224  001EFE  D7FC               	bra	u7877
 10225  001F00  F000               	nop	
 10226  001F02  0E80               	movlw	128
 10227  001F04  EC9C  F024         	call	_lcdInst
 10228                           
 10229                           ;Test.c: 178: printf("TST: COND");
 10230  001F08  0E87               	movlw	low STR_84
 10231  001F0A  0100               	movlb	0	; () banked
 10232  001F0C  6F8E               	movwf	printf@f& (0+255),b
 10233  001F0E  0EFF               	movlw	high STR_84
 10234  001F10  0100               	movlb	0	; () banked
 10235  001F12  6F8F               	movwf	(printf@f+1)& (0+255),b
 10236  001F14  ECB8  F008         	call	_printf	;wreg free
 10237                           
 10238                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 10239  001F18  D01B               	goto	l6771
 10240  001F1A                     l6767:
 10241                           
 10242                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10243  001F1A  0E80               	movlw	128
 10244  001F1C  EC9C  F024         	call	_lcdInst
 10245  001F20  0EC0               	movlw	192
 10246  001F22  EC9C  F024         	call	_lcdInst
 10247                           
 10248                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 10249  001F26  0EA5               	movlw	low STR_86
 10250  001F28  0100               	movlb	0	; () banked
 10251  001F2A  6F8E               	movwf	printf@f& (0+255),b
 10252  001F2C  0EFF               	movlw	high STR_86
 10253  001F2E  0100               	movlb	0	; () banked
 10254  001F30  6F8F               	movwf	(printf@f+1)& (0+255),b
 10255  001F32  A480               	btfss	3968,2,c	;volatile
 10256  001F34  D004               	goto	u5240
 10257  001F36  0100               	movlb	0	; () banked
 10258  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10259  001F3A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10260  001F3C  D002               	goto	u5248
 10261  001F3E                     u5240:
 10262  001F3E  0100               	movlb	0	; () banked
 10263  001F40  6BAB               	clrf	??_sensorTest& (0+255),b
 10264  001F42                     u5248:
 10265  001F42  0100               	movlb	0	; () banked
 10266  001F44  51AB               	movf	??_sensorTest& (0+255),w,b
 10267  001F46  0100               	movlb	0	; () banked
 10268  001F48  6F90               	movwf	(?_printf+2)& (0+255),b
 10269  001F4A  6B91               	clrf	(?_printf+3)& (0+255),b
 10270  001F4C  ECB8  F008         	call	_printf	;wreg free
 10271  001F50                     l6771:
 10272  001F50  A281               	btfss	3969,1,c	;volatile
 10273  001F52  D7E3               	goto	l6767
 10274                           
 10275                           ;Test.c: 185: }
 10276                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 10277  001F54  3881               	swapf	3969,w,c	;volatile
 10278  001F56  0B0F               	andlw	15
 10279  001F58  0A0F               	xorlw	15
 10280  001F5A  B4D8               	btfsc	status,2,c
 10281  001F5C  0012               	return	
 10282                           
 10283                           ;Test.c: 189: else{
 10284                           ;Test.c: 190: LATAbits.LATA3 = 1;
 10285                           
 10286                           ;Test.c: 188: }
 10287                           
 10288                           ;Test.c: 187: break;
 10289  001F5E  8689               	bsf	3977,3,c	;volatile
 10290                           
 10291                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 10292  001F60  D01B               	goto	l6783
 10293  001F62                     l6779:
 10294                           
 10295                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10296  001F62  0E80               	movlw	128
 10297  001F64  EC9C  F024         	call	_lcdInst
 10298  001F68  0EC0               	movlw	192
 10299  001F6A  EC9C  F024         	call	_lcdInst
 10300                           
 10301                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 10302  001F6E  0EA5               	movlw	low STR_86
 10303  001F70  0100               	movlb	0	; () banked
 10304  001F72  6F8E               	movwf	printf@f& (0+255),b
 10305  001F74  0EFF               	movlw	high STR_86
 10306  001F76  0100               	movlb	0	; () banked
 10307  001F78  6F8F               	movwf	(printf@f+1)& (0+255),b
 10308  001F7A  A480               	btfss	3968,2,c	;volatile
 10309  001F7C  D004               	goto	u5270
 10310  001F7E  0100               	movlb	0	; () banked
 10311  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10312  001F82  2BAB               	incf	??_sensorTest& (0+255),f,b
 10313  001F84  D002               	goto	u5278
 10314  001F86                     u5270:
 10315  001F86  0100               	movlb	0	; () banked
 10316  001F88  6BAB               	clrf	??_sensorTest& (0+255),b
 10317  001F8A                     u5278:
 10318  001F8A  0100               	movlb	0	; () banked
 10319  001F8C  51AB               	movf	??_sensorTest& (0+255),w,b
 10320  001F8E  0100               	movlb	0	; () banked
 10321  001F90  6F90               	movwf	(?_printf+2)& (0+255),b
 10322  001F92  6B91               	clrf	(?_printf+3)& (0+255),b
 10323  001F94  ECB8  F008         	call	_printf	;wreg free
 10324  001F98                     l6783:
 10325  001F98  B281               	btfsc	3969,1,c	;volatile
 10326  001F9A  D7E3               	goto	l6779
 10327                           
 10328                           ;Test.c: 195: }
 10329                           ;Test.c: 196: LATAbits.LATA3 = ~1;
 10330  001F9C  9689               	bcf	3977,3,c	;volatile
 10331  001F9E  D7A5               	goto	l6759
 10332  001FA0                     __end_of_sensorTest:
 10333                           	opt stack 0
 10334                           tblptru	equ	0xFF8
 10335                           tblptrh	equ	0xFF7
 10336                           tblptrl	equ	0xFF6
 10337                           tablat	equ	0xFF5
 10338                           prodh	equ	0xFF4
 10339                           prodl	equ	0xFF3
 10340                           intcon	equ	0xFF2
 10341                           intcon2	equ	0xFF1
 10342                           intcon3	equ	0xFF0
 10343                           postinc0	equ	0xFEE
 10344                           wreg	equ	0xFE8
 10345                           postdec1	equ	0xFE5
 10346                           fsr1l	equ	0xFE1
 10347                           indf2	equ	0xFDF
 10348                           postinc2	equ	0xFDE
 10349                           postdec2	equ	0xFDD
 10350                           fsr2h	equ	0xFDA
 10351                           fsr2l	equ	0xFD9
 10352                           status	equ	0xFD8
 10353                           
 10354 ;; *************** function _readMAG *****************
 10355 ;; Defined at:
 10356 ;;		line 29 in file "ADCFunctionality.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;  res             2    4[BANK0 ] int 
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		wreg, status,2, status,0, cstack
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;Total ram usage:        4 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    8
 10377 ;; This function calls:
 10378 ;;		_readADC
 10379 ;; This function is called by:
 10380 ;;		_getMAG
 10381 ;;		_sensorTest
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           	psect	text38
 10386  0042CC                     __ptext38:
 10387                           	opt stack 0
 10388  0042CC                     _readMAG:
 10389                           	opt stack 19
 10390                           
 10391                           ;ADCFunctionality.c: 30: readADC(1);
 10392                           
 10393                           ;incstack = 0
 10394  0042CC  0E01               	movlw	1
 10395  0042CE  ECA3  F023         	call	_readADC
 10396                           
 10397                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10398  0042D2  50C3               	movf	4035,w,c	;volatile
 10399  0042D4  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10400  0042D8  0100               	movlb	0	; () banked
 10401  0042DA  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10402  0042DC  C082  F083         	movff	??_readMAG,??_readMAG+1
 10403  0042E0  0100               	movlb	0	; () banked
 10404  0042E2  6B82               	clrf	??_readMAG& (0+255),b
 10405  0042E4  0100               	movlb	0	; () banked
 10406  0042E6  1182               	iorwf	??_readMAG& (0+255),w,b
 10407  0042E8  0100               	movlb	0	; () banked
 10408  0042EA  6F84               	movwf	readMAG@res& (0+255),b
 10409  0042EC  0100               	movlb	0	; () banked
 10410  0042EE  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10411  0042F0  0100               	movlb	0	; () banked
 10412  0042F2  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10416  0042F4  0100               	movlb	0	; () banked
 10417  0042F6  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10418  0042F8  D008               	goto	u3931
 10419  0042FA  0100               	movlb	0	; () banked
 10420  0042FC  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10421  0042FE  E107               	bnz	u3930
 10422  004300  0E96               	movlw	150
 10423  004302  0100               	movlb	0	; () banked
 10424  004304  5D84               	subwf	readMAG@res& (0+255),w,b
 10425  004306  B0D8               	btfsc	status,0,c
 10426  004308  D002               	goto	u3930
 10427  00430A                     u3931:
 10428  00430A  0E01               	movlw	1
 10429  00430C  D001               	goto	u3940
 10430  00430E                     u3930:
 10431  00430E  0E00               	movlw	0
 10432  004310                     u3940:
 10433  004310  0100               	movlb	0	; () banked
 10434  004312  6FDC               	movwf	_MAG_signal& (0+255),b
 10435  004314  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10436                           
 10437                           ; BSR set to: 0
 10438  004316  0012               	return		;funcret
 10439  004318                     __end_of_readMAG:
 10440                           	opt stack 0
 10441                           tblptru	equ	0xFF8
 10442                           tblptrh	equ	0xFF7
 10443                           tblptrl	equ	0xFF6
 10444                           tablat	equ	0xFF5
 10445                           prodh	equ	0xFF4
 10446                           prodl	equ	0xFF3
 10447                           intcon	equ	0xFF2
 10448                           intcon2	equ	0xFF1
 10449                           intcon3	equ	0xFF0
 10450                           postinc0	equ	0xFEE
 10451                           wreg	equ	0xFE8
 10452                           postdec1	equ	0xFE5
 10453                           fsr1l	equ	0xFE1
 10454                           indf2	equ	0xFDF
 10455                           postinc2	equ	0xFDE
 10456                           postdec2	equ	0xFDD
 10457                           fsr2h	equ	0xFDA
 10458                           fsr2l	equ	0xFD9
 10459                           status	equ	0xFD8
 10460                           
 10461 ;; *************** function _readADC *****************
 10462 ;; Defined at:
 10463 ;;		line 15 in file "ADCFunctionality.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;  channel         1    wreg     unsigned char 
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  channel         1    1[BANK0 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      void 
 10470 ;; Registers used:
 10471 ;;		wreg, status,2, status,0, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;Total ram usage:        2 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    7
 10484 ;; This function calls:
 10485 ;;		Nothing
 10486 ;; This function is called by:
 10487 ;;		_readIR
 10488 ;;		_readMAG
 10489 ;;		_sensorTest
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           	psect	text39
 10494  004746                     __ptext39:
 10495                           	opt stack 0
 10496  004746                     _readADC:
 10497                           	opt stack 19
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;incstack = 0
 10501                           ;readADC@channel stored from wreg
 10502  004746  0100               	movlb	0	; () banked
 10503  004748  6F81               	movwf	readADC@channel& (0+255),b
 10504                           
 10505                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10506  00474A  0100               	movlb	0	; () banked
 10507  00474C  4581               	rlncf	readADC@channel& (0+255),w,b
 10508  00474E  46E8               	rlncf	wreg,f,c
 10509  004750  0BFC               	andlw	252
 10510  004752  6EC2               	movwf	4034,c	;volatile
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10514  004754  80C2               	bsf	4034,0,c	;volatile
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10518  004756  82C2               	bsf	4034,1,c	;volatile
 10519                           
 10520                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10521  004758  D009               	goto	l5347
 10522  00475A                     l5345:
 10523  00475A  0E34               	movlw	52
 10524  00475C  0100               	movlb	0	; () banked
 10525  00475E  6F80               	movwf	??_readADC& (0+255),b
 10526  004760  0EF1               	movlw	241
 10527  004762                     u7887:
 10528  004762  2EE8               	decfsz	wreg,f,c
 10529  004764  D7FE               	bra	u7887
 10530  004766  2F80               	decfsz	??_readADC& (0+255),f,b
 10531  004768  D7FC               	bra	u7887
 10532  00476A  D000               	nop2	
 10533  00476C                     l5347:
 10534  00476C  A2C2               	btfss	4034,1,c	;volatile
 10535  00476E  0012               	return	
 10536  004770  D7F4               	goto	l5345
 10537  004772                     __end_of_readADC:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           intcon2	equ	0xFF1
 10547                           intcon3	equ	0xFF0
 10548                           postinc0	equ	0xFEE
 10549                           wreg	equ	0xFE8
 10550                           postdec1	equ	0xFE5
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _algorithmTest *****************
 10560 ;; Defined at:
 10561 ;;		line 80 in file "Test.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;		None
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;		None
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:        2 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:   10
 10582 ;; This function calls:
 10583 ;;		_lcdInst
 10584 ;;		_printf
 10585 ;; This function is called by:
 10586 ;;		_Test
 10587 ;; This function uses a non-reentrant model
 10588 ;;
 10589                           
 10590                           	psect	text40
 10591  003572                     __ptext40:
 10592                           	opt stack 0
 10593  003572                     _algorithmTest:
 10594                           	opt stack 19
 10595                           
 10596                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10597                           
 10598                           ;incstack = 0
 10599  003572  0E01               	movlw	1
 10600  003574  EC9C  F024         	call	_lcdInst
 10601  003578  0E68               	movlw	104
 10602  00357A  0100               	movlb	0	; () banked
 10603  00357C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10604  00357E  0EE4               	movlw	228
 10605  003580                     u7897:
 10606  003580  2EE8               	decfsz	wreg,f,c
 10607  003582  D7FE               	bra	u7897
 10608  003584  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10609  003586  D7FC               	bra	u7897
 10610  003588  F000               	nop	
 10611  00358A  0E80               	movlw	128
 10612  00358C  EC9C  F024         	call	_lcdInst
 10613                           
 10614                           ;Test.c: 83: printf("ALGORITHM TEST");
 10615  003590  0ED2               	movlw	low STR_70
 10616  003592  0100               	movlb	0	; () banked
 10617  003594  6F8E               	movwf	printf@f& (0+255),b
 10618  003596  0EFE               	movlw	high STR_70
 10619  003598  0100               	movlb	0	; () banked
 10620  00359A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10621  00359C  ECB8  F008         	call	_printf	;wreg free
 10622                           
 10623                           ;Test.c: 84: lcdInst(0b11000000);;
 10624  0035A0  0EC0               	movlw	192
 10625  0035A2  EC9C  F024         	call	_lcdInst
 10626                           
 10627                           ;Test.c: 85: printf("PUSH TO START");
 10628  0035A6  0E0B               	movlw	low STR_71
 10629  0035A8  0100               	movlb	0	; () banked
 10630  0035AA  6F8E               	movwf	printf@f& (0+255),b
 10631  0035AC  0EFF               	movlw	high STR_71
 10632  0035AE  0100               	movlb	0	; () banked
 10633  0035B0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10634  0035B2  ECB8  F008         	call	_printf	;wreg free
 10635                           
 10636                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10637  0035B6  0E05               	movlw	5
 10638  0035B8  0100               	movlb	0	; () banked
 10639  0035BA  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10640  0035BC  0E0F               	movlw	15
 10641  0035BE  0100               	movlb	0	; () banked
 10642  0035C0  6FAB               	movwf	??_algorithmTest& (0+255),b
 10643  0035C2  0EF1               	movlw	241
 10644  0035C4                     u7907:
 10645  0035C4  2EE8               	decfsz	wreg,f,c
 10646  0035C6  D7FE               	bra	u7907
 10647  0035C8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10648  0035CA  D7FC               	bra	u7907
 10649  0035CC  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10650  0035CE  D7FA               	bra	u7907
 10651  0035D0                     l1070:
 10652  0035D0  A281               	btfss	3969,1,c	;volatile
 10653  0035D2  D7FE               	goto	l1070
 10654  0035D4                     l1073:
 10655  0035D4  B281               	btfsc	3969,1,c	;volatile
 10656  0035D6  D7FE               	goto	l1073
 10657                           
 10658                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10659  0035D8  0E01               	movlw	1
 10660  0035DA  EC9C  F024         	call	_lcdInst
 10661  0035DE  0E68               	movlw	104
 10662  0035E0  0100               	movlb	0	; () banked
 10663  0035E2  6FAB               	movwf	??_algorithmTest& (0+255),b
 10664  0035E4  0EE4               	movlw	228
 10665  0035E6                     u7917:
 10666  0035E6  2EE8               	decfsz	wreg,f,c
 10667  0035E8  D7FE               	bra	u7917
 10668  0035EA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10669  0035EC  D7FC               	bra	u7917
 10670  0035EE  F000               	nop	
 10671  0035F0  0E80               	movlw	128
 10672  0035F2  EC9C  F024         	call	_lcdInst
 10673                           
 10674                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 10675  0035F6  0E5F               	movlw	low STR_72
 10676  0035F8  0100               	movlb	0	; () banked
 10677  0035FA  6F8E               	movwf	printf@f& (0+255),b
 10678  0035FC  0EFC               	movlw	high STR_72
 10679  0035FE  0100               	movlb	0	; () banked
 10680  003600  6F8F               	movwf	(printf@f+1)& (0+255),b
 10681  003602  ECB8  F008         	call	_printf	;wreg free
 10682                           
 10683                           ;Test.c: 101: printf("ALG2: 12 CANS");
 10684  003606  0EEF               	movlw	low STR_73
 10685  003608  0100               	movlb	0	; () banked
 10686  00360A  6F8E               	movwf	printf@f& (0+255),b
 10687  00360C  0EFE               	movlw	high STR_73
 10688  00360E  0100               	movlb	0	; () banked
 10689  003610  6F8F               	movwf	(printf@f+1)& (0+255),b
 10690  003612  ECB8  F008         	call	_printf	;wreg free
 10691                           
 10692                           ;Test.c: 110: printf("ALG3: 1 CAN");
 10693  003616  0E4F               	movlw	low STR_74
 10694  003618  0100               	movlb	0	; () banked
 10695  00361A  6F8E               	movwf	printf@f& (0+255),b
 10696  00361C  0EFF               	movlw	high STR_74
 10697  00361E  0100               	movlb	0	; () banked
 10698  003620  6F8F               	movwf	(printf@f+1)& (0+255),b
 10699  003622  ECB8  F008         	call	_printf	;wreg free
 10700                           
 10701                           ;Test.c: 116: printf("ALG4: ALL CANS");
 10702  003626  0EB4               	movlw	low STR_75
 10703  003628  0100               	movlb	0	; () banked
 10704  00362A  6F8E               	movwf	printf@f& (0+255),b
 10705  00362C  0EFE               	movlw	high STR_75
 10706  00362E  0100               	movlb	0	; () banked
 10707  003630  6F8F               	movwf	(printf@f+1)& (0+255),b
 10708  003632  ECB8  F008         	call	_printf	;wreg free
 10709                           
 10710                           ;Test.c: 121: printf("ALG5: NO CANS");
 10711  003636  0EFD               	movlw	low STR_76
 10712  003638  0100               	movlb	0	; () banked
 10713  00363A  6F8E               	movwf	printf@f& (0+255),b
 10714  00363C  0EFE               	movlw	high STR_76
 10715  00363E  0100               	movlb	0	; () banked
 10716  003640  6F8F               	movwf	(printf@f+1)& (0+255),b
 10717  003642  ECB8  F008         	call	_printf	;wreg free
 10718  003646  0012               	return		;funcret
 10719  003648                     __end_of_algorithmTest:
 10720                           	opt stack 0
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           prodh	equ	0xFF4
 10726                           prodl	equ	0xFF3
 10727                           intcon	equ	0xFF2
 10728                           intcon2	equ	0xFF1
 10729                           intcon3	equ	0xFF0
 10730                           postinc0	equ	0xFEE
 10731                           wreg	equ	0xFE8
 10732                           postdec1	equ	0xFE5
 10733                           fsr1l	equ	0xFE1
 10734                           indf2	equ	0xFDF
 10735                           postinc2	equ	0xFDE
 10736                           postdec2	equ	0xFDD
 10737                           fsr2h	equ	0xFDA
 10738                           fsr2l	equ	0xFD9
 10739                           status	equ	0xFD8
 10740                           
 10741 ;; *************** function _actuatorTest *****************
 10742 ;; Defined at:
 10743 ;;		line 201 in file "Test.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;		None
 10746 ;; Auto vars:     Size  Location     Type
 10747 ;;  i               1   45[BANK0 ] unsigned char 
 10748 ;;  i               1   67[BANK0 ] unsigned char 
 10749 ;;  i               1   66[BANK0 ] unsigned char 
 10750 ;;  i               1   65[BANK0 ] unsigned char 
 10751 ;;  i               1   64[BANK0 ] unsigned char 
 10752 ;;  i               1   63[BANK0 ] unsigned char 
 10753 ;;  i               1   62[BANK0 ] unsigned char 
 10754 ;;  i               1   61[BANK0 ] unsigned char 
 10755 ;;  i               1   60[BANK0 ] unsigned char 
 10756 ;;  i               1   59[BANK0 ] unsigned char 
 10757 ;;  i               1   58[BANK0 ] unsigned char 
 10758 ;;  i               1   57[BANK0 ] unsigned char 
 10759 ;;  i               1   56[BANK0 ] unsigned char 
 10760 ;;  i               1   55[BANK0 ] unsigned char 
 10761 ;;  i               1   54[BANK0 ] unsigned char 
 10762 ;;  i               1   53[BANK0 ] unsigned char 
 10763 ;;  i               1   52[BANK0 ] unsigned char 
 10764 ;;  i               1   51[BANK0 ] unsigned char 
 10765 ;;  i               1   50[BANK0 ] unsigned char 
 10766 ;;  i               1   49[BANK0 ] unsigned char 
 10767 ;;  i               1   48[BANK0 ] unsigned char 
 10768 ;;  i               1   47[BANK0 ] unsigned char 
 10769 ;;  i               1   46[BANK0 ] unsigned char 
 10770 ;;  i               2   68[BANK0 ] int 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;                  1    wreg      void 
 10773 ;; Registers used:
 10774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;Total ram usage:       27 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:   10
 10787 ;; This function calls:
 10788 ;;		_lcdInst
 10789 ;;		_printf
 10790 ;;		_updateServoPosition
 10791 ;; This function is called by:
 10792 ;;		_Test
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           	psect	text41
 10797  000012                     __ptext41:
 10798                           	opt stack 0
 10799  000012                     _actuatorTest:
 10800                           	opt stack 19
 10801                           
 10802                           ;Test.c: 203: int i = 0;
 10803                           
 10804                           ;incstack = 0
 10805  000012  0E00               	movlw	0
 10806  000014  0100               	movlb	0	; () banked
 10807  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10808  000018  0E00               	movlw	0
 10809  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;Test.c: 205: (INTCONbits.GIE = 1);
 10813  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10817  00001E  0E01               	movlw	1
 10818  000020  EC9C  F024         	call	_lcdInst
 10819  000024  0E68               	movlw	104
 10820  000026  0100               	movlb	0	; () banked
 10821  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10822  00002A  0EE4               	movlw	228
 10823  00002C                     u7927:
 10824  00002C  2EE8               	decfsz	wreg,f,c
 10825  00002E  D7FE               	bra	u7927
 10826  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10827  000032  D7FC               	bra	u7927
 10828  000034  F000               	nop	
 10829  000036  0E80               	movlw	128
 10830  000038  EC9C  F024         	call	_lcdInst
 10831                           
 10832                           ;Test.c: 207: printf("ACTUATORS");
 10833  00003C  0E91               	movlw	low STR_88
 10834  00003E  0100               	movlb	0	; () banked
 10835  000040  6F8E               	movwf	printf@f& (0+255),b
 10836  000042  0EFF               	movlw	high STR_88
 10837  000044  0100               	movlb	0	; () banked
 10838  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10839  000048  ECB8  F008         	call	_printf	;wreg free
 10840                           
 10841                           ;Test.c: 208: lcdInst(0b11000000);;
 10842  00004C  0EC0               	movlw	192
 10843  00004E  EC9C  F024         	call	_lcdInst
 10844                           
 10845                           ;Test.c: 209: printf("PUSH TO START");
 10846  000052  0E0B               	movlw	low STR_71
 10847  000054  0100               	movlb	0	; () banked
 10848  000056  6F8E               	movwf	printf@f& (0+255),b
 10849  000058  0EFF               	movlw	high STR_71
 10850  00005A  0100               	movlb	0	; () banked
 10851  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10852  00005E  ECB8  F008         	call	_printf	;wreg free
 10853                           
 10854                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 10855  000062  0E05               	movlw	5
 10856  000064  0100               	movlb	0	; () banked
 10857  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10858  000068  0E0F               	movlw	15
 10859  00006A  0100               	movlb	0	; () banked
 10860  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10861  00006E  0EF1               	movlw	241
 10862  000070                     u7937:
 10863  000070  2EE8               	decfsz	wreg,f,c
 10864  000072  D7FE               	bra	u7937
 10865  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10866  000076  D7FC               	bra	u7937
 10867  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10868  00007A  D7FA               	bra	u7937
 10869  00007C                     l1105:
 10870  00007C  A281               	btfss	3969,1,c	;volatile
 10871  00007E  D7FE               	goto	l1105
 10872  000080                     l1108:
 10873  000080  B281               	btfsc	3969,1,c	;volatile
 10874  000082  D7FE               	goto	l1108
 10875                           
 10876                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10877  000084  0E01               	movlw	1
 10878  000086  EC9C  F024         	call	_lcdInst
 10879  00008A  0E68               	movlw	104
 10880  00008C  0100               	movlb	0	; () banked
 10881  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10882  000090  0EE4               	movlw	228
 10883  000092                     u7947:
 10884  000092  2EE8               	decfsz	wreg,f,c
 10885  000094  D7FE               	bra	u7947
 10886  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10887  000098  D7FC               	bra	u7947
 10888  00009A  F000               	nop	
 10889  00009C  0E80               	movlw	128
 10890  00009E  EC9C  F024         	call	_lcdInst
 10891                           
 10892                           ;Test.c: 218: printf("TST: DC MOTORS");
 10893  0000A2  0EC3               	movlw	low STR_90
 10894  0000A4  0100               	movlb	0	; () banked
 10895  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10896  0000A8  0EFE               	movlw	high STR_90
 10897  0000AA  0100               	movlb	0	; () banked
 10898  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10899  0000AE  ECB8  F008         	call	_printf	;wreg free
 10900                           
 10901                           ;Test.c: 219: lcdInst(0b11000000);;
 10902  0000B2  0EC0               	movlw	192
 10903  0000B4  EC9C  F024         	call	_lcdInst
 10904                           
 10905                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 10906  0000B8  0EE1               	movlw	low STR_91
 10907  0000BA  0100               	movlb	0	; () banked
 10908  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10909  0000BE  0EFE               	movlw	high STR_91
 10910  0000C0  0100               	movlb	0	; () banked
 10911  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10912  0000C4  ECB8  F008         	call	_printf	;wreg free
 10913                           
 10914                           ;Test.c: 221: LATAbits.LATA5 = 1;
 10915  0000C8  8A89               	bsf	3977,5,c	;volatile
 10916                           
 10917                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10918  0000CA  0E00               	movlw	0
 10919  0000CC  0100               	movlb	0	; () banked
 10920  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10921  0000D0  0E00               	movlw	0
 10922  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10923                           
 10924                           ; BSR set to: 0
 10925  0000D4  0100               	movlb	0	; () banked
 10926  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10927  0000D8  D008               	goto	l6823
 10928  0000DA  0100               	movlb	0	; () banked
 10929  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10930  0000DE  E123               	bnz	l1112
 10931  0000E0  0E05               	movlw	5
 10932  0000E2  0100               	movlb	0	; () banked
 10933  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10934  0000E6  B0D8               	btfsc	status,0,c
 10935  0000E8  D01E               	goto	l1112
 10936  0000EA                     l6823:
 10937                           
 10938                           ; BSR set to: 0
 10939  0000EA  0E00               	movlw	0
 10940  0000EC  0100               	movlb	0	; () banked
 10941  0000EE  6FAD               	movwf	actuatorTest@i_1643& (0+255),b
 10942  0000F0                     l6825:
 10943                           
 10944                           ; BSR set to: 0
 10945  0000F0  0E63               	movlw	99
 10946  0000F2  0100               	movlb	0	; () banked
 10947  0000F4  65AD               	cpfsgt	actuatorTest@i_1643& (0+255),b
 10948  0000F6  D001               	goto	l6829
 10949  0000F8  D00C               	goto	l6833
 10950  0000FA                     l6829:
 10951                           
 10952                           ; BSR set to: 0
 10953  0000FA  0E68               	movlw	104
 10954  0000FC  0100               	movlb	0	; () banked
 10955  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10956  000100  0EE4               	movlw	228
 10957  000102                     u7957:
 10958  000102  2EE8               	decfsz	wreg,f,c
 10959  000104  D7FE               	bra	u7957
 10960  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10961  000108  D7FC               	bra	u7957
 10962  00010A  F000               	nop	
 10963  00010C  0100               	movlb	0	; () banked
 10964  00010E  2BAD               	incf	actuatorTest@i_1643& (0+255),f,b
 10965  000110  D7EF               	goto	l6825
 10966  000112                     l6833:
 10967                           
 10968                           ; BSR set to: 0
 10969  000112  0100               	movlb	0	; () banked
 10970  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10971  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10972                           
 10973                           ; BSR set to: 0
 10974  000118  0100               	movlb	0	; () banked
 10975  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10976  00011C  D7E6               	goto	l6823
 10977  00011E  0100               	movlb	0	; () banked
 10978  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10979  000122  E101               	bnz	u5340
 10980  000124  D7DD               	goto	L7
 10981  000126                     u5340:
 10982  000126                     l1112:
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;Test.c: 223: LATAbits.LATA5 = 0;
 10986  000126  9A89               	bcf	3977,5,c	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10990  000128  0E01               	movlw	1
 10991  00012A  EC9C  F024         	call	_lcdInst
 10992  00012E  0E68               	movlw	104
 10993  000130  0100               	movlb	0	; () banked
 10994  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10995  000134  0EE4               	movlw	228
 10996  000136                     u7967:
 10997  000136  2EE8               	decfsz	wreg,f,c
 10998  000138  D7FE               	bra	u7967
 10999  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11000  00013C  D7FC               	bra	u7967
 11001  00013E  F000               	nop	
 11002  000140  0E80               	movlw	128
 11003  000142  EC9C  F024         	call	_lcdInst
 11004                           
 11005                           ;Test.c: 230: printf("TST: COND SOLN'D");
 11006  000146  0E81               	movlw	low STR_92
 11007  000148  0100               	movlb	0	; () banked
 11008  00014A  6F8E               	movwf	printf@f& (0+255),b
 11009  00014C  0EFC               	movlw	high STR_92
 11010  00014E  0100               	movlb	0	; () banked
 11011  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11012  000152  ECB8  F008         	call	_printf	;wreg free
 11013                           
 11014                           ;Test.c: 231: lcdInst(0b11000000);;
 11015  000156  0EC0               	movlw	192
 11016  000158  EC9C  F024         	call	_lcdInst
 11017                           
 11018                           ;Test.c: 232: printf("PIN RA3...");
 11019  00015C  0E5B               	movlw	low STR_93
 11020  00015E  0100               	movlb	0	; () banked
 11021  000160  6F8E               	movwf	printf@f& (0+255),b
 11022  000162  0EFF               	movlw	high STR_93
 11023  000164  0100               	movlb	0	; () banked
 11024  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11025  000168  ECB8  F008         	call	_printf	;wreg free
 11026                           
 11027                           ;Test.c: 233: for(i=0;i<5;i++){
 11028  00016C  0E00               	movlw	0
 11029  00016E  0100               	movlb	0	; () banked
 11030  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11031  000172  0E00               	movlw	0
 11032  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11033                           
 11034                           ; BSR set to: 0
 11035  000176  0100               	movlb	0	; () banked
 11036  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11037  00017A  D008               	goto	l1115
 11038  00017C  0100               	movlb	0	; () banked
 11039  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11040  000180  E12C               	bnz	l1116
 11041  000182  0E05               	movlw	5
 11042  000184  0100               	movlb	0	; () banked
 11043  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11044  000188  B0D8               	btfsc	status,0,c
 11045  00018A  D027               	goto	l1116
 11046  00018C                     l1115:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;Test.c: 234: LATAbits.LATA3 = 1;
 11050  00018C  8689               	bsf	3977,3,c	;volatile
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 11054  00018E  0E0D               	movlw	13
 11055  000190  0100               	movlb	0	; () banked
 11056  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11057  000194  0E2D               	movlw	45
 11058  000196  0100               	movlb	0	; () banked
 11059  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11060  00019A  0ED7               	movlw	215
 11061  00019C                     u7977:
 11062  00019C  2EE8               	decfsz	wreg,f,c
 11063  00019E  D7FE               	bra	u7977
 11064  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11065  0001A2  D7FC               	bra	u7977
 11066  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11067  0001A6  D7FA               	bra	u7977
 11068  0001A8  D000               	nop2	
 11069                           
 11070                           ;Test.c: 236: LATAbits.LATA3 = ~1;
 11071  0001AA  9689               	bcf	3977,3,c	;volatile
 11072                           
 11073                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11074  0001AC  0E1D               	movlw	29
 11075  0001AE  0100               	movlb	0	; () banked
 11076  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11077  0001B2  0E69               	movlw	105
 11078  0001B4  0100               	movlb	0	; () banked
 11079  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11080  0001B8  0EA5               	movlw	165
 11081  0001BA                     u7987:
 11082  0001BA  2EE8               	decfsz	wreg,f,c
 11083  0001BC  D7FE               	bra	u7987
 11084  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11085  0001C0  D7FC               	bra	u7987
 11086  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11087  0001C4  D7FA               	bra	u7987
 11088  0001C6  0100               	movlb	0	; () banked
 11089  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11090  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11091  0001CC  0100               	movlb	0	; () banked
 11092  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11093  0001D0  D7DD               	goto	l1115
 11094  0001D2  0100               	movlb	0	; () banked
 11095  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11096  0001D6  E101               	bnz	u5360
 11097  0001D8  D7D4               	goto	L8
 11098  0001DA                     u5360:
 11099  0001DA                     l1116:
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;Test.c: 238: }
 11103                           ;Test.c: 239: LATAbits.LATA3 = ~1;
 11104  0001DA  9689               	bcf	3977,3,c	;volatile
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11108  0001DC  0E01               	movlw	1
 11109  0001DE  EC9C  F024         	call	_lcdInst
 11110  0001E2  0E68               	movlw	104
 11111  0001E4  0100               	movlb	0	; () banked
 11112  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11113  0001E8  0EE4               	movlw	228
 11114  0001EA                     u7997:
 11115  0001EA  2EE8               	decfsz	wreg,f,c
 11116  0001EC  D7FE               	bra	u7997
 11117  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11118  0001F0  D7FC               	bra	u7997
 11119  0001F2  F000               	nop	
 11120  0001F4  0E80               	movlw	128
 11121  0001F6  EC9C  F024         	call	_lcdInst
 11122                           
 11123                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 11124  0001FA  0E92               	movlw	low STR_94
 11125  0001FC  0100               	movlb	0	; () banked
 11126  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11127  000200  0EFC               	movlw	high STR_94
 11128  000202  0100               	movlb	0	; () banked
 11129  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11130  000206  ECB8  F008         	call	_printf	;wreg free
 11131                           
 11132                           ;Test.c: 247: lcdInst(0b11000000);;
 11133  00020A  0EC0               	movlw	192
 11134  00020C  EC9C  F024         	call	_lcdInst
 11135                           
 11136                           ;Test.c: 248: printf("PIN RA4...");
 11137  000210  0E66               	movlw	low STR_95
 11138  000212  0100               	movlb	0	; () banked
 11139  000214  6F8E               	movwf	printf@f& (0+255),b
 11140  000216  0EFF               	movlw	high STR_95
 11141  000218  0100               	movlb	0	; () banked
 11142  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11143  00021C  ECB8  F008         	call	_printf	;wreg free
 11144                           
 11145                           ;Test.c: 249: for(i=0;i<5;i++){
 11146  000220  0E00               	movlw	0
 11147  000222  0100               	movlb	0	; () banked
 11148  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11149  000226  0E00               	movlw	0
 11150  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11151                           
 11152                           ; BSR set to: 0
 11153  00022A  0100               	movlb	0	; () banked
 11154  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11155  00022E  D008               	goto	l1117
 11156  000230  0100               	movlb	0	; () banked
 11157  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11158  000234  E12C               	bnz	l1118
 11159  000236  0E05               	movlw	5
 11160  000238  0100               	movlb	0	; () banked
 11161  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11162  00023C  B0D8               	btfsc	status,0,c
 11163  00023E  D027               	goto	l1118
 11164  000240                     l1117:
 11165                           
 11166                           ; BSR set to: 0
 11167                           ;Test.c: 250: LATAbits.LATA4 = 1;
 11168  000240  8889               	bsf	3977,4,c	;volatile
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 11172  000242  0E0D               	movlw	13
 11173  000244  0100               	movlb	0	; () banked
 11174  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11175  000248  0E2D               	movlw	45
 11176  00024A  0100               	movlb	0	; () banked
 11177  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11178  00024E  0ED7               	movlw	215
 11179  000250                     u8007:
 11180  000250  2EE8               	decfsz	wreg,f,c
 11181  000252  D7FE               	bra	u8007
 11182  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11183  000256  D7FC               	bra	u8007
 11184  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11185  00025A  D7FA               	bra	u8007
 11186  00025C  D000               	nop2	
 11187                           
 11188                           ;Test.c: 252: LATAbits.LATA4 = ~1;
 11189  00025E  9889               	bcf	3977,4,c	;volatile
 11190                           
 11191                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11192  000260  0E1D               	movlw	29
 11193  000262  0100               	movlb	0	; () banked
 11194  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11195  000266  0E69               	movlw	105
 11196  000268  0100               	movlb	0	; () banked
 11197  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11198  00026C  0EA5               	movlw	165
 11199  00026E                     u8017:
 11200  00026E  2EE8               	decfsz	wreg,f,c
 11201  000270  D7FE               	bra	u8017
 11202  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11203  000274  D7FC               	bra	u8017
 11204  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11205  000278  D7FA               	bra	u8017
 11206  00027A  0100               	movlb	0	; () banked
 11207  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11208  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11209  000280  0100               	movlb	0	; () banked
 11210  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11211  000284  D7DD               	goto	l1117
 11212  000286  0100               	movlb	0	; () banked
 11213  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11214  00028A  E101               	bnz	u5380
 11215  00028C  D7D4               	goto	L9
 11216  00028E                     u5380:
 11217  00028E                     l1118:
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;Test.c: 254: }
 11221                           ;Test.c: 255: LATAbits.LATA4 = ~1;
 11222  00028E  9889               	bcf	3977,4,c	;volatile
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11226  000290  0E01               	movlw	1
 11227  000292  EC9C  F024         	call	_lcdInst
 11228  000296  0E68               	movlw	104
 11229  000298  0100               	movlb	0	; () banked
 11230  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11231  00029C  0EE4               	movlw	228
 11232  00029E                     u8027:
 11233  00029E  2EE8               	decfsz	wreg,f,c
 11234  0002A0  D7FE               	bra	u8027
 11235  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11236  0002A4  D7FC               	bra	u8027
 11237  0002A6  F000               	nop	
 11238  0002A8  0E80               	movlw	128
 11239  0002AA  EC9C  F024         	call	_lcdInst
 11240                           
 11241                           ;Test.c: 259: machine_state = Sorting_state;
 11242  0002AE  0E01               	movlw	1
 11243  0002B0  0100               	movlb	0	; () banked
 11244  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;Test.c: 260: was_low_1 = 0;
 11248  0002B4  0E00               	movlw	0
 11249  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11250  0002B8  0E00               	movlw	0
 11251  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;Test.c: 261: was_low_1 = 0;
 11255  0002BC  0E00               	movlw	0
 11256  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11257  0002C0  0E00               	movlw	0
 11258  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;Test.c: 268: printf("TST: PAN SERVO");
 11262  0002C4  0EA5               	movlw	low STR_96
 11263  0002C6  0100               	movlb	0	; () banked
 11264  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11265  0002CA  0EFE               	movlw	high STR_96
 11266  0002CC  0100               	movlb	0	; () banked
 11267  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11268  0002D0  ECB8  F008         	call	_printf	;wreg free
 11269                           
 11270                           ;Test.c: 269: lcdInst(0b11000000);;
 11271  0002D4  0EC0               	movlw	192
 11272  0002D6  EC9C  F024         	call	_lcdInst
 11273                           
 11274                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 11275  0002DA  0E0A               	movlw	low STR_97
 11276  0002DC  0100               	movlb	0	; () banked
 11277  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11278  0002E0  0EFC               	movlw	high STR_97
 11279  0002E2  0100               	movlb	0	; () banked
 11280  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11281  0002E6  ECB8  F008         	call	_printf	;wreg free
 11282                           
 11283                           ;Test.c: 271: updateServoPosition(1200, 1);
 11284  0002EA  0E04               	movlw	4
 11285  0002EC  0100               	movlb	0	; () banked
 11286  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11287  0002F0  0EB0               	movlw	176
 11288  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11289  0002F4  0E00               	movlw	0
 11290  0002F6  0100               	movlb	0	; () banked
 11291  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11292  0002FA  0E01               	movlw	1
 11293  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11294  0002FE  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11295                           
 11296                           ;Test.c: 272: TMR1ON = 1;
 11297  000302  80CD               	bsf	4045,0,c	;volatile
 11298                           
 11299                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11300  000304  0E00               	movlw	0
 11301  000306  0100               	movlb	0	; () banked
 11302  000308  6FAE               	movwf	actuatorTest@i_1650& (0+255),b
 11303  00030A                     l6909:
 11304                           
 11305                           ; BSR set to: 0
 11306  00030A  0E63               	movlw	99
 11307  00030C  0100               	movlb	0	; () banked
 11308  00030E  65AE               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11309  000310  D001               	goto	l6913
 11310  000312  D00C               	goto	l6917
 11311  000314                     l6913:
 11312                           
 11313                           ; BSR set to: 0
 11314  000314  0E68               	movlw	104
 11315  000316  0100               	movlb	0	; () banked
 11316  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11317  00031A  0EE4               	movlw	228
 11318  00031C                     u8037:
 11319  00031C  2EE8               	decfsz	wreg,f,c
 11320  00031E  D7FE               	bra	u8037
 11321  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11322  000322  D7FC               	bra	u8037
 11323  000324  F000               	nop	
 11324  000326  0100               	movlb	0	; () banked
 11325  000328  2BAE               	incf	actuatorTest@i_1650& (0+255),f,b
 11326  00032A  D7EF               	goto	l6909
 11327  00032C                     l6917:
 11328                           
 11329                           ; BSR set to: 0
 11330  00032C  0E00               	movlw	0
 11331  00032E  0100               	movlb	0	; () banked
 11332  000330  6FAF               	movwf	actuatorTest@i_1651& (0+255),b
 11333  000332                     l6919:
 11334                           
 11335                           ; BSR set to: 0
 11336  000332  0E63               	movlw	99
 11337  000334  0100               	movlb	0	; () banked
 11338  000336  65AF               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11339  000338  D001               	goto	l6923
 11340  00033A  D00C               	goto	l6927
 11341  00033C                     l6923:
 11342                           
 11343                           ; BSR set to: 0
 11344  00033C  0E68               	movlw	104
 11345  00033E  0100               	movlb	0	; () banked
 11346  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11347  000342  0EE4               	movlw	228
 11348  000344                     u8047:
 11349  000344  2EE8               	decfsz	wreg,f,c
 11350  000346  D7FE               	bra	u8047
 11351  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11352  00034A  D7FC               	bra	u8047
 11353  00034C  F000               	nop	
 11354  00034E  0100               	movlb	0	; () banked
 11355  000350  2BAF               	incf	actuatorTest@i_1651& (0+255),f,b
 11356  000352  D7EF               	goto	l6919
 11357  000354                     l6927:
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11361  000354  0E80               	movlw	128
 11362  000356  EC9C  F024         	call	_lcdInst
 11363  00035A  0EC0               	movlw	192
 11364  00035C  EC9C  F024         	call	_lcdInst
 11365                           
 11366                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 11367  000360  0EF9               	movlw	low STR_98
 11368  000362  0100               	movlb	0	; () banked
 11369  000364  6F8E               	movwf	printf@f& (0+255),b
 11370  000366  0EFB               	movlw	high STR_98
 11371  000368  0100               	movlb	0	; () banked
 11372  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11373  00036C  ECB8  F008         	call	_printf	;wreg free
 11374                           
 11375                           ;Test.c: 277: updateServoPosition(500, 1);
 11376  000370  0E01               	movlw	1
 11377  000372  0100               	movlb	0	; () banked
 11378  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11379  000376  0EF4               	movlw	244
 11380  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11381  00037A  0E00               	movlw	0
 11382  00037C  0100               	movlb	0	; () banked
 11383  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11384  000380  0E01               	movlw	1
 11385  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11386  000384  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11387                           
 11388                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11389  000388  0E00               	movlw	0
 11390  00038A  0100               	movlb	0	; () banked
 11391  00038C  6FB0               	movwf	actuatorTest@i_1653& (0+255),b
 11392  00038E                     l6935:
 11393                           
 11394                           ; BSR set to: 0
 11395  00038E  0E63               	movlw	99
 11396  000390  0100               	movlb	0	; () banked
 11397  000392  65B0               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11398  000394  D001               	goto	l6939
 11399  000396  D00C               	goto	l6943
 11400  000398                     l6939:
 11401                           
 11402                           ; BSR set to: 0
 11403  000398  0E68               	movlw	104
 11404  00039A  0100               	movlb	0	; () banked
 11405  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11406  00039E  0EE4               	movlw	228
 11407  0003A0                     u8057:
 11408  0003A0  2EE8               	decfsz	wreg,f,c
 11409  0003A2  D7FE               	bra	u8057
 11410  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11411  0003A6  D7FC               	bra	u8057
 11412  0003A8  F000               	nop	
 11413  0003AA  0100               	movlb	0	; () banked
 11414  0003AC  2BB0               	incf	actuatorTest@i_1653& (0+255),f,b
 11415  0003AE  D7EF               	goto	l6935
 11416  0003B0                     l6943:
 11417                           
 11418                           ; BSR set to: 0
 11419  0003B0  0E00               	movlw	0
 11420  0003B2  0100               	movlb	0	; () banked
 11421  0003B4  6FB1               	movwf	actuatorTest@i_1654& (0+255),b
 11422  0003B6                     l6945:
 11423                           
 11424                           ; BSR set to: 0
 11425  0003B6  0E63               	movlw	99
 11426  0003B8  0100               	movlb	0	; () banked
 11427  0003BA  65B1               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11428  0003BC  D001               	goto	l6949
 11429  0003BE  D00C               	goto	l6953
 11430  0003C0                     l6949:
 11431                           
 11432                           ; BSR set to: 0
 11433  0003C0  0E68               	movlw	104
 11434  0003C2  0100               	movlb	0	; () banked
 11435  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11436  0003C6  0EE4               	movlw	228
 11437  0003C8                     u8067:
 11438  0003C8  2EE8               	decfsz	wreg,f,c
 11439  0003CA  D7FE               	bra	u8067
 11440  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11441  0003CE  D7FC               	bra	u8067
 11442  0003D0  F000               	nop	
 11443  0003D2  0100               	movlb	0	; () banked
 11444  0003D4  2BB1               	incf	actuatorTest@i_1654& (0+255),f,b
 11445  0003D6  D7EF               	goto	l6945
 11446  0003D8                     l6953:
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11450  0003D8  0E80               	movlw	128
 11451  0003DA  EC9C  F024         	call	_lcdInst
 11452  0003DE  0EC0               	movlw	192
 11453  0003E0  EC9C  F024         	call	_lcdInst
 11454                           
 11455                           ;Test.c: 281: printf("LEFT -- 2s      ");
 11456  0003E4  0ED7               	movlw	low STR_99
 11457  0003E6  0100               	movlb	0	; () banked
 11458  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11459  0003EA  0EFB               	movlw	high STR_99
 11460  0003EC  0100               	movlb	0	; () banked
 11461  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11462  0003F0  ECB8  F008         	call	_printf	;wreg free
 11463                           
 11464                           ;Test.c: 282: updateServoPosition(2100, 1);
 11465  0003F4  0E08               	movlw	8
 11466  0003F6  0100               	movlb	0	; () banked
 11467  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11468  0003FA  0E34               	movlw	52
 11469  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11470  0003FE  0E00               	movlw	0
 11471  000400  0100               	movlb	0	; () banked
 11472  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11473  000404  0E01               	movlw	1
 11474  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11475  000408  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11476                           
 11477                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11478  00040C  0E00               	movlw	0
 11479  00040E  0100               	movlb	0	; () banked
 11480  000410  6FB2               	movwf	actuatorTest@i_1656& (0+255),b
 11481  000412                     l6961:
 11482                           
 11483                           ; BSR set to: 0
 11484  000412  0E63               	movlw	99
 11485  000414  0100               	movlb	0	; () banked
 11486  000416  65B2               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11487  000418  D001               	goto	l6965
 11488  00041A  D00C               	goto	l6969
 11489  00041C                     l6965:
 11490                           
 11491                           ; BSR set to: 0
 11492  00041C  0E68               	movlw	104
 11493  00041E  0100               	movlb	0	; () banked
 11494  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11495  000422  0EE4               	movlw	228
 11496  000424                     u8077:
 11497  000424  2EE8               	decfsz	wreg,f,c
 11498  000426  D7FE               	bra	u8077
 11499  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11500  00042A  D7FC               	bra	u8077
 11501  00042C  F000               	nop	
 11502  00042E  0100               	movlb	0	; () banked
 11503  000430  2BB2               	incf	actuatorTest@i_1656& (0+255),f,b
 11504  000432  D7EF               	goto	l6961
 11505  000434                     l6969:
 11506                           
 11507                           ; BSR set to: 0
 11508  000434  0E00               	movlw	0
 11509  000436  0100               	movlb	0	; () banked
 11510  000438  6FB3               	movwf	actuatorTest@i_1657& (0+255),b
 11511  00043A                     l6971:
 11512                           
 11513                           ; BSR set to: 0
 11514  00043A  0E63               	movlw	99
 11515  00043C  0100               	movlb	0	; () banked
 11516  00043E  65B3               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11517  000440  D001               	goto	l6975
 11518  000442  D00C               	goto	l6979
 11519  000444                     l6975:
 11520                           
 11521                           ; BSR set to: 0
 11522  000444  0E68               	movlw	104
 11523  000446  0100               	movlb	0	; () banked
 11524  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11525  00044A  0EE4               	movlw	228
 11526  00044C                     u8087:
 11527  00044C  2EE8               	decfsz	wreg,f,c
 11528  00044E  D7FE               	bra	u8087
 11529  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11530  000452  D7FC               	bra	u8087
 11531  000454  F000               	nop	
 11532  000456  0100               	movlb	0	; () banked
 11533  000458  2BB3               	incf	actuatorTest@i_1657& (0+255),f,b
 11534  00045A  D7EF               	goto	l6971
 11535  00045C                     l6979:
 11536                           
 11537                           ; BSR set to: 0
 11538                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11539  00045C  0E80               	movlw	128
 11540  00045E  EC9C  F024         	call	_lcdInst
 11541  000462  0EC0               	movlw	192
 11542  000464  EC9C  F024         	call	_lcdInst
 11543                           
 11544                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 11545  000468  0E2C               	movlw	low STR_100
 11546  00046A  0100               	movlb	0	; () banked
 11547  00046C  6F8E               	movwf	printf@f& (0+255),b
 11548  00046E  0EFC               	movlw	high STR_100
 11549  000470  0100               	movlb	0	; () banked
 11550  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11551  000474  ECB8  F008         	call	_printf	;wreg free
 11552                           
 11553                           ;Test.c: 287: updateServoPosition(1700, 1);
 11554  000478  0E06               	movlw	6
 11555  00047A  0100               	movlb	0	; () banked
 11556  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11557  00047E  0EA4               	movlw	164
 11558  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11559  000482  0E00               	movlw	0
 11560  000484  0100               	movlb	0	; () banked
 11561  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11562  000488  0E01               	movlw	1
 11563  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11564  00048C  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11565                           
 11566                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11567  000490  0E00               	movlw	0
 11568  000492  0100               	movlb	0	; () banked
 11569  000494  6FB4               	movwf	actuatorTest@i_1659& (0+255),b
 11570  000496                     l6987:
 11571                           
 11572                           ; BSR set to: 0
 11573  000496  0E63               	movlw	99
 11574  000498  0100               	movlb	0	; () banked
 11575  00049A  65B4               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11576  00049C  D001               	goto	l6991
 11577  00049E  D00C               	goto	l6995
 11578  0004A0                     l6991:
 11579                           
 11580                           ; BSR set to: 0
 11581  0004A0  0E68               	movlw	104
 11582  0004A2  0100               	movlb	0	; () banked
 11583  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11584  0004A6  0EE4               	movlw	228
 11585  0004A8                     u8097:
 11586  0004A8  2EE8               	decfsz	wreg,f,c
 11587  0004AA  D7FE               	bra	u8097
 11588  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11589  0004AE  D7FC               	bra	u8097
 11590  0004B0  F000               	nop	
 11591  0004B2  0100               	movlb	0	; () banked
 11592  0004B4  2BB4               	incf	actuatorTest@i_1659& (0+255),f,b
 11593  0004B6  D7EF               	goto	l6987
 11594  0004B8                     l6995:
 11595                           
 11596                           ; BSR set to: 0
 11597  0004B8  0E00               	movlw	0
 11598  0004BA  0100               	movlb	0	; () banked
 11599  0004BC  6FB5               	movwf	actuatorTest@i_1660& (0+255),b
 11600  0004BE                     l6997:
 11601                           
 11602                           ; BSR set to: 0
 11603  0004BE  0E63               	movlw	99
 11604  0004C0  0100               	movlb	0	; () banked
 11605  0004C2  65B5               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11606  0004C4  D001               	goto	l7001
 11607  0004C6  D00C               	goto	l7005
 11608  0004C8                     l7001:
 11609                           
 11610                           ; BSR set to: 0
 11611  0004C8  0E68               	movlw	104
 11612  0004CA  0100               	movlb	0	; () banked
 11613  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11614  0004CE  0EE4               	movlw	228
 11615  0004D0                     u8107:
 11616  0004D0  2EE8               	decfsz	wreg,f,c
 11617  0004D2  D7FE               	bra	u8107
 11618  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11619  0004D6  D7FC               	bra	u8107
 11620  0004D8  F000               	nop	
 11621  0004DA  0100               	movlb	0	; () banked
 11622  0004DC  2BB5               	incf	actuatorTest@i_1660& (0+255),f,b
 11623  0004DE  D7EF               	goto	l6997
 11624  0004E0                     l7005:
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11628  0004E0  0E80               	movlw	128
 11629  0004E2  EC9C  F024         	call	_lcdInst
 11630  0004E6  0EC0               	movlw	192
 11631  0004E8  EC9C  F024         	call	_lcdInst
 11632                           
 11633                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 11634  0004EC  0E3D               	movlw	low STR_101
 11635  0004EE  0100               	movlb	0	; () banked
 11636  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11637  0004F2  0EFC               	movlw	high STR_101
 11638  0004F4  0100               	movlb	0	; () banked
 11639  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11640  0004F8  ECB8  F008         	call	_printf	;wreg free
 11641                           
 11642                           ;Test.c: 292: updateServoPosition(750, 1);
 11643  0004FC  0E02               	movlw	2
 11644  0004FE  0100               	movlb	0	; () banked
 11645  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11646  000502  0EEE               	movlw	238
 11647  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11648  000506  0E00               	movlw	0
 11649  000508  0100               	movlb	0	; () banked
 11650  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11651  00050C  0E01               	movlw	1
 11652  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11653  000510  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11654                           
 11655                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11656  000514  0E00               	movlw	0
 11657  000516  0100               	movlb	0	; () banked
 11658  000518  6FB6               	movwf	actuatorTest@i_1662& (0+255),b
 11659  00051A                     l7013:
 11660                           
 11661                           ; BSR set to: 0
 11662  00051A  0E63               	movlw	99
 11663  00051C  0100               	movlb	0	; () banked
 11664  00051E  65B6               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11665  000520  D001               	goto	l7017
 11666  000522  D00C               	goto	l7021
 11667  000524                     l7017:
 11668                           
 11669                           ; BSR set to: 0
 11670  000524  0E68               	movlw	104
 11671  000526  0100               	movlb	0	; () banked
 11672  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11673  00052A  0EE4               	movlw	228
 11674  00052C                     u8117:
 11675  00052C  2EE8               	decfsz	wreg,f,c
 11676  00052E  D7FE               	bra	u8117
 11677  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11678  000532  D7FC               	bra	u8117
 11679  000534  F000               	nop	
 11680  000536  0100               	movlb	0	; () banked
 11681  000538  2BB6               	incf	actuatorTest@i_1662& (0+255),f,b
 11682  00053A  D7EF               	goto	l7013
 11683  00053C                     l7021:
 11684                           
 11685                           ; BSR set to: 0
 11686  00053C  0E00               	movlw	0
 11687  00053E  0100               	movlb	0	; () banked
 11688  000540  6FB7               	movwf	actuatorTest@i_1663& (0+255),b
 11689  000542                     l7023:
 11690                           
 11691                           ; BSR set to: 0
 11692  000542  0E63               	movlw	99
 11693  000544  0100               	movlb	0	; () banked
 11694  000546  65B7               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11695  000548  D001               	goto	l7027
 11696  00054A  D00C               	goto	l7031
 11697  00054C                     l7027:
 11698                           
 11699                           ; BSR set to: 0
 11700  00054C  0E68               	movlw	104
 11701  00054E  0100               	movlb	0	; () banked
 11702  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11703  000552  0EE4               	movlw	228
 11704  000554                     u8127:
 11705  000554  2EE8               	decfsz	wreg,f,c
 11706  000556  D7FE               	bra	u8127
 11707  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11708  00055A  D7FC               	bra	u8127
 11709  00055C  F000               	nop	
 11710  00055E  0100               	movlb	0	; () banked
 11711  000560  2BB7               	incf	actuatorTest@i_1663& (0+255),f,b
 11712  000562  D7EF               	goto	l7023
 11713  000564                     l7031:
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11717  000564  0E80               	movlw	128
 11718  000566  EC9C  F024         	call	_lcdInst
 11719  00056A  0EC0               	movlw	192
 11720  00056C  EC9C  F024         	call	_lcdInst
 11721                           
 11722                           ;Test.c: 296: printf("MID -- 2s       ");
 11723  000570  0EB5               	movlw	low STR_102
 11724  000572  0100               	movlb	0	; () banked
 11725  000574  6F8E               	movwf	printf@f& (0+255),b
 11726  000576  0EFB               	movlw	high STR_102
 11727  000578  0100               	movlb	0	; () banked
 11728  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11729  00057C  ECB8  F008         	call	_printf	;wreg free
 11730                           
 11731                           ;Test.c: 297: updateServoPosition(1200, 1);
 11732  000580  0E04               	movlw	4
 11733  000582  0100               	movlb	0	; () banked
 11734  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11735  000586  0EB0               	movlw	176
 11736  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11737  00058A  0E00               	movlw	0
 11738  00058C  0100               	movlb	0	; () banked
 11739  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11740  000590  0E01               	movlw	1
 11741  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11742  000594  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11743                           
 11744                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11745  000598  0E00               	movlw	0
 11746  00059A  0100               	movlb	0	; () banked
 11747  00059C  6FB8               	movwf	actuatorTest@i_1665& (0+255),b
 11748  00059E                     l7039:
 11749                           
 11750                           ; BSR set to: 0
 11751  00059E  0E63               	movlw	99
 11752  0005A0  0100               	movlb	0	; () banked
 11753  0005A2  65B8               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11754  0005A4  D001               	goto	l7043
 11755  0005A6  D00C               	goto	l7047
 11756  0005A8                     l7043:
 11757                           
 11758                           ; BSR set to: 0
 11759  0005A8  0E68               	movlw	104
 11760  0005AA  0100               	movlb	0	; () banked
 11761  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11762  0005AE  0EE4               	movlw	228
 11763  0005B0                     u8137:
 11764  0005B0  2EE8               	decfsz	wreg,f,c
 11765  0005B2  D7FE               	bra	u8137
 11766  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11767  0005B6  D7FC               	bra	u8137
 11768  0005B8  F000               	nop	
 11769  0005BA  0100               	movlb	0	; () banked
 11770  0005BC  2BB8               	incf	actuatorTest@i_1665& (0+255),f,b
 11771  0005BE  D7EF               	goto	l7039
 11772  0005C0                     l7047:
 11773                           
 11774                           ; BSR set to: 0
 11775  0005C0  0E00               	movlw	0
 11776  0005C2  0100               	movlb	0	; () banked
 11777  0005C4  6FB9               	movwf	actuatorTest@i_1666& (0+255),b
 11778  0005C6                     l7049:
 11779                           
 11780                           ; BSR set to: 0
 11781  0005C6  0E63               	movlw	99
 11782  0005C8  0100               	movlb	0	; () banked
 11783  0005CA  65B9               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11784  0005CC  D001               	goto	l7053
 11785  0005CE  D00C               	goto	l1142
 11786  0005D0                     l7053:
 11787                           
 11788                           ; BSR set to: 0
 11789  0005D0  0E68               	movlw	104
 11790  0005D2  0100               	movlb	0	; () banked
 11791  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11792  0005D6  0EE4               	movlw	228
 11793  0005D8                     u8147:
 11794  0005D8  2EE8               	decfsz	wreg,f,c
 11795  0005DA  D7FE               	bra	u8147
 11796  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11797  0005DE  D7FC               	bra	u8147
 11798  0005E0  F000               	nop	
 11799  0005E2  0100               	movlb	0	; () banked
 11800  0005E4  2BB9               	incf	actuatorTest@i_1666& (0+255),f,b
 11801  0005E6  D7EF               	goto	l7049
 11802  0005E8                     l1142:
 11803                           
 11804                           ; BSR set to: 0
 11805                           ;Test.c: 299: TMR1ON = 0;
 11806  0005E8  90CD               	bcf	4045,0,c	;volatile
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;Test.c: 306: printf("TST: TILT SERVO");
 11810  0005EA  0E3A               	movlw	low STR_103
 11811  0005EC  0100               	movlb	0	; () banked
 11812  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11813  0005F0  0EFE               	movlw	high STR_103
 11814  0005F2  0100               	movlb	0	; () banked
 11815  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11816  0005F6  ECB8  F008         	call	_printf	;wreg free
 11817                           
 11818                           ;Test.c: 307: lcdInst(0b11000000);;
 11819  0005FA  0EC0               	movlw	192
 11820  0005FC  EC9C  F024         	call	_lcdInst
 11821                           
 11822                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 11823  000600  0EE8               	movlw	low STR_104
 11824  000602  0100               	movlb	0	; () banked
 11825  000604  6F8E               	movwf	printf@f& (0+255),b
 11826  000606  0EFB               	movlw	high STR_104
 11827  000608  0100               	movlb	0	; () banked
 11828  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11829  00060C  ECB8  F008         	call	_printf	;wreg free
 11830                           
 11831                           ;Test.c: 309: updateServoPosition(1150, 3);
 11832  000610  0E04               	movlw	4
 11833  000612  0100               	movlb	0	; () banked
 11834  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11835  000616  0E7E               	movlw	126
 11836  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11837  00061A  0E00               	movlw	0
 11838  00061C  0100               	movlb	0	; () banked
 11839  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11840  000620  0E03               	movlw	3
 11841  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11842  000624  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11843                           
 11844                           ;Test.c: 310: TMR3ON = 1;
 11845  000628  80B1               	bsf	4017,0,c	;volatile
 11846                           
 11847                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11848  00062A  0E00               	movlw	0
 11849  00062C  0100               	movlb	0	; () banked
 11850  00062E  6FBA               	movwf	actuatorTest@i_1669& (0+255),b
 11851  000630                     l7067:
 11852                           
 11853                           ; BSR set to: 0
 11854  000630  0E63               	movlw	99
 11855  000632  0100               	movlb	0	; () banked
 11856  000634  65BA               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11857  000636  D001               	goto	l7071
 11858  000638  D00C               	goto	l7075
 11859  00063A                     l7071:
 11860                           
 11861                           ; BSR set to: 0
 11862  00063A  0E68               	movlw	104
 11863  00063C  0100               	movlb	0	; () banked
 11864  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11865  000640  0EE4               	movlw	228
 11866  000642                     u8157:
 11867  000642  2EE8               	decfsz	wreg,f,c
 11868  000644  D7FE               	bra	u8157
 11869  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11870  000648  D7FC               	bra	u8157
 11871  00064A  F000               	nop	
 11872  00064C  0100               	movlb	0	; () banked
 11873  00064E  2BBA               	incf	actuatorTest@i_1669& (0+255),f,b
 11874  000650  D7EF               	goto	l7067
 11875  000652                     l7075:
 11876                           
 11877                           ; BSR set to: 0
 11878  000652  0E00               	movlw	0
 11879  000654  0100               	movlb	0	; () banked
 11880  000656  6FBB               	movwf	actuatorTest@i_1670& (0+255),b
 11881  000658                     l7077:
 11882                           
 11883                           ; BSR set to: 0
 11884  000658  0E63               	movlw	99
 11885  00065A  0100               	movlb	0	; () banked
 11886  00065C  65BB               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11887  00065E  D001               	goto	l7081
 11888  000660  D00C               	goto	l7085
 11889  000662                     l7081:
 11890                           
 11891                           ; BSR set to: 0
 11892  000662  0E68               	movlw	104
 11893  000664  0100               	movlb	0	; () banked
 11894  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11895  000668  0EE4               	movlw	228
 11896  00066A                     u8167:
 11897  00066A  2EE8               	decfsz	wreg,f,c
 11898  00066C  D7FE               	bra	u8167
 11899  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11900  000670  D7FC               	bra	u8167
 11901  000672  F000               	nop	
 11902  000674  0100               	movlb	0	; () banked
 11903  000676  2BBB               	incf	actuatorTest@i_1670& (0+255),f,b
 11904  000678  D7EF               	goto	l7077
 11905  00067A                     l7085:
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11909  00067A  0E80               	movlw	128
 11910  00067C  EC9C  F024         	call	_lcdInst
 11911  000680  0EC0               	movlw	192
 11912  000682  EC9C  F024         	call	_lcdInst
 11913                           
 11914                           ;Test.c: 314: printf("DROP -- 2s      ");
 11915  000686  0EC6               	movlw	low STR_105
 11916  000688  0100               	movlb	0	; () banked
 11917  00068A  6F8E               	movwf	printf@f& (0+255),b
 11918  00068C  0EFB               	movlw	high STR_105
 11919  00068E  0100               	movlb	0	; () banked
 11920  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11921  000692  ECB8  F008         	call	_printf	;wreg free
 11922                           
 11923                           ;Test.c: 315: updateServoPosition(1350, 3);
 11924  000696  0E05               	movlw	5
 11925  000698  0100               	movlb	0	; () banked
 11926  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11927  00069C  0E46               	movlw	70
 11928  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11929  0006A0  0E00               	movlw	0
 11930  0006A2  0100               	movlb	0	; () banked
 11931  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11932  0006A6  0E03               	movlw	3
 11933  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11934  0006AA  ECD4  F01E         	call	_updateServoPosition	;wreg free
 11935                           
 11936                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11937  0006AE  0E00               	movlw	0
 11938  0006B0  0100               	movlb	0	; () banked
 11939  0006B2  6FBC               	movwf	actuatorTest@i_1672& (0+255),b
 11940  0006B4                     l7093:
 11941                           
 11942                           ; BSR set to: 0
 11943  0006B4  0E63               	movlw	99
 11944  0006B6  0100               	movlb	0	; () banked
 11945  0006B8  65BC               	cpfsgt	actuatorTest@i_1672& (0+255),b
 11946  0006BA  D001               	goto	l7097
 11947  0006BC  D00C               	goto	l7101
 11948  0006BE                     l7097:
 11949                           
 11950                           ; BSR set to: 0
 11951  0006BE  0E68               	movlw	104
 11952  0006C0  0100               	movlb	0	; () banked
 11953  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11954  0006C4  0EE4               	movlw	228
 11955  0006C6                     u8177:
 11956  0006C6  2EE8               	decfsz	wreg,f,c
 11957  0006C8  D7FE               	bra	u8177
 11958  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11959  0006CC  D7FC               	bra	u8177
 11960  0006CE  F000               	nop	
 11961  0006D0  0100               	movlb	0	; () banked
 11962  0006D2  2BBC               	incf	actuatorTest@i_1672& (0+255),f,b
 11963  0006D4  D7EF               	goto	l7093
 11964  0006D6                     l7101:
 11965                           
 11966                           ; BSR set to: 0
 11967  0006D6  0E00               	movlw	0
 11968  0006D8  0100               	movlb	0	; () banked
 11969  0006DA  6FBD               	movwf	actuatorTest@i_1673& (0+255),b
 11970  0006DC                     l7103:
 11971                           
 11972                           ; BSR set to: 0
 11973  0006DC  0E63               	movlw	99
 11974  0006DE  0100               	movlb	0	; () banked
 11975  0006E0  65BD               	cpfsgt	actuatorTest@i_1673& (0+255),b
 11976  0006E2  D001               	goto	l7107
 11977  0006E4  D00C               	goto	l7111
 11978  0006E6                     l7107:
 11979                           
 11980                           ; BSR set to: 0
 11981  0006E6  0E68               	movlw	104
 11982  0006E8  0100               	movlb	0	; () banked
 11983  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11984  0006EC  0EE4               	movlw	228
 11985  0006EE                     u8187:
 11986  0006EE  2EE8               	decfsz	wreg,f,c
 11987  0006F0  D7FE               	bra	u8187
 11988  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11989  0006F4  D7FC               	bra	u8187
 11990  0006F6  F000               	nop	
 11991  0006F8  0100               	movlb	0	; () banked
 11992  0006FA  2BBD               	incf	actuatorTest@i_1673& (0+255),f,b
 11993  0006FC  D7EF               	goto	l7103
 11994  0006FE                     l7111:
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11998  0006FE  0E80               	movlw	128
 11999  000700  EC9C  F024         	call	_lcdInst
 12000  000704  0EC0               	movlw	192
 12001  000706  EC9C  F024         	call	_lcdInst
 12002                           
 12003                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 12004  00070A  0EE8               	movlw	low STR_104
 12005  00070C  0100               	movlb	0	; () banked
 12006  00070E  6F8E               	movwf	printf@f& (0+255),b
 12007  000710  0EFB               	movlw	high STR_104
 12008  000712  0100               	movlb	0	; () banked
 12009  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12010  000716  ECB8  F008         	call	_printf	;wreg free
 12011                           
 12012                           ;Test.c: 320: updateServoPosition(1150, 3);
 12013  00071A  0E04               	movlw	4
 12014  00071C  0100               	movlb	0	; () banked
 12015  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12016  000720  0E7E               	movlw	126
 12017  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12018  000724  0E00               	movlw	0
 12019  000726  0100               	movlb	0	; () banked
 12020  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12021  00072A  0E03               	movlw	3
 12022  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12023  00072E  ECD4  F01E         	call	_updateServoPosition	;wreg free
 12024                           
 12025                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12026  000732  0E00               	movlw	0
 12027  000734  0100               	movlb	0	; () banked
 12028  000736  6FBE               	movwf	actuatorTest@i_1675& (0+255),b
 12029  000738                     l7119:
 12030                           
 12031                           ; BSR set to: 0
 12032  000738  0E63               	movlw	99
 12033  00073A  0100               	movlb	0	; () banked
 12034  00073C  65BE               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12035  00073E  D001               	goto	l7123
 12036  000740  D00C               	goto	l7127
 12037  000742                     l7123:
 12038                           
 12039                           ; BSR set to: 0
 12040  000742  0E68               	movlw	104
 12041  000744  0100               	movlb	0	; () banked
 12042  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12043  000748  0EE4               	movlw	228
 12044  00074A                     u8197:
 12045  00074A  2EE8               	decfsz	wreg,f,c
 12046  00074C  D7FE               	bra	u8197
 12047  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12048  000750  D7FC               	bra	u8197
 12049  000752  F000               	nop	
 12050  000754  0100               	movlb	0	; () banked
 12051  000756  2BBE               	incf	actuatorTest@i_1675& (0+255),f,b
 12052  000758  D7EF               	goto	l7119
 12053  00075A                     l7127:
 12054                           
 12055                           ; BSR set to: 0
 12056  00075A  0E00               	movlw	0
 12057  00075C  0100               	movlb	0	; () banked
 12058  00075E  6FBF               	movwf	actuatorTest@i_1676& (0+255),b
 12059  000760                     l7129:
 12060                           
 12061                           ; BSR set to: 0
 12062  000760  0E63               	movlw	99
 12063  000762  0100               	movlb	0	; () banked
 12064  000764  65BF               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12065  000766  D001               	goto	l7133
 12066  000768  D00C               	goto	l1154
 12067  00076A                     l7133:
 12068                           
 12069                           ; BSR set to: 0
 12070  00076A  0E68               	movlw	104
 12071  00076C  0100               	movlb	0	; () banked
 12072  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12073  000770  0EE4               	movlw	228
 12074  000772                     u8207:
 12075  000772  2EE8               	decfsz	wreg,f,c
 12076  000774  D7FE               	bra	u8207
 12077  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12078  000778  D7FC               	bra	u8207
 12079  00077A  F000               	nop	
 12080  00077C  0100               	movlb	0	; () banked
 12081  00077E  2BBF               	incf	actuatorTest@i_1676& (0+255),f,b
 12082  000780  D7EF               	goto	l7129
 12083  000782                     l1154:
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;Test.c: 322: TMR3ON = 0;
 12087  000782  90B1               	bcf	4017,0,c	;volatile
 12088                           
 12089                           ;Test.c: 323: (INTCONbits.GIE = 0);
 12090  000784  9EF2               	bcf	intcon,7,c	;volatile
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12094  000786  0E01               	movlw	1
 12095  000788  EC9C  F024         	call	_lcdInst
 12096  00078C  0E68               	movlw	104
 12097  00078E  0100               	movlb	0	; () banked
 12098  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12099  000792  0EE4               	movlw	228
 12100  000794                     u8217:
 12101  000794  2EE8               	decfsz	wreg,f,c
 12102  000796  D7FE               	bra	u8217
 12103  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12104  00079A  D7FC               	bra	u8217
 12105  00079C  F000               	nop	
 12106  00079E  0E80               	movlw	128
 12107  0007A0  EC9C  F024         	call	_lcdInst
 12108                           
 12109                           ;Test.c: 329: printf("TST: CAM SERVO");
 12110  0007A4  0E96               	movlw	low STR_107
 12111  0007A6  0100               	movlb	0	; () banked
 12112  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12113  0007AA  0EFE               	movlw	high STR_107
 12114  0007AC  0100               	movlb	0	; () banked
 12115  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12116  0007B0  ECB8  F008         	call	_printf	;wreg free
 12117                           
 12118                           ;Test.c: 330: lcdInst(0b11000000);;
 12119  0007B4  0EC0               	movlw	192
 12120  0007B6  EC9C  F024         	call	_lcdInst
 12121                           
 12122                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 12123  0007BA  0E78               	movlw	low STR_108
 12124  0007BC  0100               	movlb	0	; () banked
 12125  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12126  0007C0  0EFE               	movlw	high STR_108
 12127  0007C2  0100               	movlb	0	; () banked
 12128  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12129  0007C6  ECB8  F008         	call	_printf	;wreg free
 12130                           
 12131                           ;Test.c: 332: LATCbits.LATC0 = 1;
 12132  0007CA  808B               	bsf	3979,0,c	;volatile
 12133                           
 12134                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12135  0007CC  0E00               	movlw	0
 12136  0007CE  0100               	movlb	0	; () banked
 12137  0007D0  6FC0               	movwf	actuatorTest@i_1679& (0+255),b
 12138  0007D2                     l7153:
 12139                           
 12140                           ; BSR set to: 0
 12141  0007D2  0E63               	movlw	99
 12142  0007D4  0100               	movlb	0	; () banked
 12143  0007D6  65C0               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12144  0007D8  D001               	goto	l7157
 12145  0007DA  D00C               	goto	l7161
 12146  0007DC                     l7157:
 12147                           
 12148                           ; BSR set to: 0
 12149  0007DC  0E68               	movlw	104
 12150  0007DE  0100               	movlb	0	; () banked
 12151  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12152  0007E2  0EE4               	movlw	228
 12153  0007E4                     u8227:
 12154  0007E4  2EE8               	decfsz	wreg,f,c
 12155  0007E6  D7FE               	bra	u8227
 12156  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12157  0007EA  D7FC               	bra	u8227
 12158  0007EC  F000               	nop	
 12159  0007EE  0100               	movlb	0	; () banked
 12160  0007F0  2BC0               	incf	actuatorTest@i_1679& (0+255),f,b
 12161  0007F2  D7EF               	goto	l7153
 12162  0007F4                     l7161:
 12163                           
 12164                           ; BSR set to: 0
 12165  0007F4  0E00               	movlw	0
 12166  0007F6  0100               	movlb	0	; () banked
 12167  0007F8  6FC1               	movwf	actuatorTest@i_1680& (0+255),b
 12168  0007FA                     l7163:
 12169                           
 12170                           ; BSR set to: 0
 12171  0007FA  0E63               	movlw	99
 12172  0007FC  0100               	movlb	0	; () banked
 12173  0007FE  65C1               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12174  000800  D001               	goto	l7167
 12175  000802  D00C               	goto	l7171
 12176  000804                     l7167:
 12177                           
 12178                           ; BSR set to: 0
 12179  000804  0E68               	movlw	104
 12180  000806  0100               	movlb	0	; () banked
 12181  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12182  00080A  0EE4               	movlw	228
 12183  00080C                     u8237:
 12184  00080C  2EE8               	decfsz	wreg,f,c
 12185  00080E  D7FE               	bra	u8237
 12186  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12187  000812  D7FC               	bra	u8237
 12188  000814  F000               	nop	
 12189  000816  0100               	movlb	0	; () banked
 12190  000818  2BC1               	incf	actuatorTest@i_1680& (0+255),f,b
 12191  00081A  D7EF               	goto	l7163
 12192  00081C                     l7171:
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12196  00081C  0E80               	movlw	128
 12197  00081E  EC9C  F024         	call	_lcdInst
 12198  000822  0EC0               	movlw	192
 12199  000824  EC9C  F024         	call	_lcdInst
 12200                           
 12201                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 12202  000828  0E69               	movlw	low STR_109
 12203  00082A  0100               	movlb	0	; () banked
 12204  00082C  6F8E               	movwf	printf@f& (0+255),b
 12205  00082E  0EFE               	movlw	high STR_109
 12206  000830  0100               	movlb	0	; () banked
 12207  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12208  000834  ECB8  F008         	call	_printf	;wreg free
 12209                           
 12210                           ;Test.c: 338: for(i=0;i<10000;i++)
 12211  000838  0E00               	movlw	0
 12212  00083A  0100               	movlb	0	; () banked
 12213  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12214  00083E  0E00               	movlw	0
 12215  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12216  000842                     l7177:
 12217                           
 12218                           ; BSR set to: 0
 12219  000842  0100               	movlb	0	; () banked
 12220  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12221  000846  D008               	goto	l1159
 12222  000848  0E10               	movlw	16
 12223  00084A  0100               	movlb	0	; () banked
 12224  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12225  00084E  0E27               	movlw	39
 12226  000850  0100               	movlb	0	; () banked
 12227  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12228  000854  B0D8               	btfsc	status,0,c
 12229  000856  D00D               	goto	l7187
 12230  000858                     l1159:
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;Test.c: 339: {
 12234                           ;Test.c: 340: LATCbits.LATC0 = 1;
 12235  000858  808B               	bsf	3979,0,c	;volatile
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12239  00085A  0E1A               	movlw	26
 12240  00085C                     u8247:
 12241  00085C  2EE8               	decfsz	wreg,f,c
 12242  00085E  D7FE               	bra	u8247
 12243  000860  D000               	nop2	
 12244                           
 12245                           ;Test.c: 342: LATCbits.LATC0 = 0;
 12246  000862  908B               	bcf	3979,0,c	;volatile
 12247                           
 12248                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12249  000864  0EF0               	movlw	240
 12250  000866                     u8257:
 12251  000866  2EE8               	decfsz	wreg,f,c
 12252  000868  D7FE               	bra	u8257
 12253  00086A  0100               	movlb	0	; () banked
 12254  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12255  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12256  000870  D7E8               	goto	l7177
 12257  000872                     l7187:
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;Test.c: 344: }
 12261                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12262  000872  0E00               	movlw	0
 12263  000874  0100               	movlb	0	; () banked
 12264  000876  6FC2               	movwf	actuatorTest@i_1682& (0+255),b
 12265  000878                     l7189:
 12266                           
 12267                           ; BSR set to: 0
 12268  000878  0E63               	movlw	99
 12269  00087A  0100               	movlb	0	; () banked
 12270  00087C  65C2               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12271  00087E  D001               	goto	l7193
 12272  000880  D00C               	goto	l7197
 12273  000882                     l7193:
 12274                           
 12275                           ; BSR set to: 0
 12276  000882  0E68               	movlw	104
 12277  000884  0100               	movlb	0	; () banked
 12278  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12279  000888  0EE4               	movlw	228
 12280  00088A                     u8267:
 12281  00088A  2EE8               	decfsz	wreg,f,c
 12282  00088C  D7FE               	bra	u8267
 12283  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12284  000890  D7FC               	bra	u8267
 12285  000892  F000               	nop	
 12286  000894  0100               	movlb	0	; () banked
 12287  000896  2BC2               	incf	actuatorTest@i_1682& (0+255),f,b
 12288  000898  D7EF               	goto	l7189
 12289  00089A                     l7197:
 12290                           
 12291                           ; BSR set to: 0
 12292  00089A  0E00               	movlw	0
 12293  00089C  0100               	movlb	0	; () banked
 12294  00089E  6FC3               	movwf	actuatorTest@i_1683& (0+255),b
 12295  0008A0                     l7199:
 12296                           
 12297                           ; BSR set to: 0
 12298  0008A0  0E63               	movlw	99
 12299  0008A2  0100               	movlb	0	; () banked
 12300  0008A4  65C3               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12301  0008A6  D001               	goto	l7203
 12302  0008A8  D00C               	goto	l7207
 12303  0008AA                     l7203:
 12304                           
 12305                           ; BSR set to: 0
 12306  0008AA  0E68               	movlw	104
 12307  0008AC  0100               	movlb	0	; () banked
 12308  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12309  0008B0  0EE4               	movlw	228
 12310  0008B2                     u8277:
 12311  0008B2  2EE8               	decfsz	wreg,f,c
 12312  0008B4  D7FE               	bra	u8277
 12313  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12314  0008B8  D7FC               	bra	u8277
 12315  0008BA  F000               	nop	
 12316  0008BC  0100               	movlb	0	; () banked
 12317  0008BE  2BC3               	incf	actuatorTest@i_1683& (0+255),f,b
 12318  0008C0  D7EF               	goto	l7199
 12319  0008C2                     l7207:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Test.c: 347: machine_state = Testing_state;
 12323  0008C2  0E03               	movlw	3
 12324  0008C4  0100               	movlb	0	; () banked
 12325  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12326                           
 12327                           ; BSR set to: 0
 12328  0008C8  0012               	return		;funcret
 12329  0008CA                     __end_of_actuatorTest:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           intcon2	equ	0xFF1
 12339                           intcon3	equ	0xFF0
 12340                           postinc0	equ	0xFEE
 12341                           wreg	equ	0xFE8
 12342                           postdec1	equ	0xFE5
 12343                           fsr1l	equ	0xFE1
 12344                           indf2	equ	0xFDF
 12345                           postinc2	equ	0xFDE
 12346                           postdec2	equ	0xFDD
 12347                           fsr2h	equ	0xFDA
 12348                           fsr2l	equ	0xFD9
 12349                           status	equ	0xFD8
 12350                           
 12351 ;; *************** function _SpeedTest *****************
 12352 ;; Defined at:
 12353 ;;		line 522 in file "Test.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;		None
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;		None
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  1    wreg      void 
 12360 ;; Registers used:
 12361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;Total ram usage:        1 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; Hardware stack levels required when called:   10
 12374 ;; This function calls:
 12375 ;;		_lcdInst
 12376 ;;		_printf
 12377 ;; This function is called by:
 12378 ;;		_Test
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text42
 12383  003BAC                     __ptext42:
 12384                           	opt stack 0
 12385  003BAC                     _SpeedTest:
 12386                           	opt stack 19
 12387                           
 12388                           ;Test.c: 524: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;incstack = 0
 12392  003BAC  0E01               	movlw	1
 12393  003BAE  EC9C  F024         	call	_lcdInst
 12394  003BB2  0E68               	movlw	104
 12395  003BB4  0100               	movlb	0	; () banked
 12396  003BB6  6FAB               	movwf	??_SpeedTest& (0+255),b
 12397  003BB8  0EE4               	movlw	228
 12398  003BBA                     u8287:
 12399  003BBA  2EE8               	decfsz	wreg,f,c
 12400  003BBC  D7FE               	bra	u8287
 12401  003BBE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12402  003BC0  D7FC               	bra	u8287
 12403  003BC2  F000               	nop	
 12404  003BC4  0E80               	movlw	128
 12405  003BC6  EC9C  F024         	call	_lcdInst
 12406                           
 12407                           ;Test.c: 525: printf("S: D WILL RETURN ");
 12408  003BCA  0E6D               	movlw	low STR_116
 12409  003BCC  0100               	movlb	0	; () banked
 12410  003BCE  6F8E               	movwf	printf@f& (0+255),b
 12411  003BD0  0EFB               	movlw	high STR_116
 12412  003BD2  0100               	movlb	0	; () banked
 12413  003BD4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12414  003BD6  ECB8  F008         	call	_printf	;wreg free
 12415                           
 12416                           ;Test.c: 526: lcdInst(0b11000000);;
 12417  003BDA  0EC0               	movlw	192
 12418  003BDC  EC9C  F024         	call	_lcdInst
 12419                           
 12420                           ;Test.c: 527: printf("OTHER SETS RA5   ");
 12421  003BE0  0E5B               	movlw	low STR_112
 12422  003BE2  0100               	movlb	0	; () banked
 12423  003BE4  6F8E               	movwf	printf@f& (0+255),b
 12424  003BE6  0EFB               	movlw	high STR_112
 12425  003BE8  0100               	movlb	0	; () banked
 12426  003BEA  6F8F               	movwf	(printf@f+1)& (0+255),b
 12427  003BEC  ECB8  F008         	call	_printf	;wreg free
 12428  003BF0                     l1236:
 12429  003BF0  A281               	btfss	3969,1,c	;volatile
 12430  003BF2  D7FE               	goto	l1236
 12431                           
 12432                           ;Test.c: 532: }
 12433                           ;Test.c: 533: if(PORTB >> 4 == 0b1111){
 12434  003BF4  3881               	swapf	3969,w,c	;volatile
 12435  003BF6  0B0F               	andlw	15
 12436  003BF8  0A0F               	xorlw	15
 12437  003BFA  B4D8               	btfsc	status,2,c
 12438  003BFC  0012               	return	
 12439  003BFE  D014               	goto	l7249
 12440  003C00                     l1243:
 12441                           
 12442                           ;Test.c: 538: LATAbits.LATA5 = 1;
 12443  003C00  8A89               	bsf	3977,5,c	;volatile
 12444                           
 12445                           ;Test.c: 539: _delay((unsigned long)((5)*(32000000/4000.0)));
 12446  003C02  0E34               	movlw	52
 12447  003C04  0100               	movlb	0	; () banked
 12448  003C06  6FAB               	movwf	??_SpeedTest& (0+255),b
 12449  003C08  0EF1               	movlw	241
 12450  003C0A                     u8297:
 12451  003C0A  2EE8               	decfsz	wreg,f,c
 12452  003C0C  D7FE               	bra	u8297
 12453  003C0E  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12454  003C10  D7FC               	bra	u8297
 12455  003C12  D000               	nop2	
 12456                           
 12457                           ;Test.c: 540: LATAbits.LATA5 = 0;
 12458  003C14  9A89               	bcf	3977,5,c	;volatile
 12459                           
 12460                           ;Test.c: 541: _delay((unsigned long)((5)*(32000000/4000.0)));
 12461  003C16  0E34               	movlw	52
 12462  003C18  0100               	movlb	0	; () banked
 12463  003C1A  6FAB               	movwf	??_SpeedTest& (0+255),b
 12464  003C1C  0EF1               	movlw	241
 12465  003C1E                     u8307:
 12466  003C1E  2EE8               	decfsz	wreg,f,c
 12467  003C20  D7FE               	bra	u8307
 12468  003C22  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12469  003C24  D7FC               	bra	u8307
 12470  003C26  D000               	nop2	
 12471  003C28                     l7249:
 12472  003C28  B281               	btfsc	3969,1,c	;volatile
 12473  003C2A  D7EA               	goto	l1243
 12474                           
 12475                           ;Test.c: 544: }
 12476                           ;Test.c: 545: LATAbits.LATA5 = 0;
 12477  003C2C  9A89               	bcf	3977,5,c	;volatile
 12478  003C2E  D7E0               	goto	l1236
 12479  003C30                     __end_of_SpeedTest:
 12480                           	opt stack 0
 12481                           tblptru	equ	0xFF8
 12482                           tblptrh	equ	0xFF7
 12483                           tblptrl	equ	0xFF6
 12484                           tablat	equ	0xFF5
 12485                           prodh	equ	0xFF4
 12486                           prodl	equ	0xFF3
 12487                           intcon	equ	0xFF2
 12488                           intcon2	equ	0xFF1
 12489                           intcon3	equ	0xFF0
 12490                           postinc0	equ	0xFEE
 12491                           wreg	equ	0xFE8
 12492                           postdec1	equ	0xFE5
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           fsr2h	equ	0xFDA
 12498                           fsr2l	equ	0xFD9
 12499                           status	equ	0xFD8
 12500                           
 12501 ;; *************** function _PusherTest *****************
 12502 ;; Defined at:
 12503 ;;		line 465 in file "Test.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;		None
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;  i               2   44[BANK0 ] int 
 12508 ;; Return value:  Size  Location     Type
 12509 ;;                  1    wreg      void 
 12510 ;; Registers used:
 12511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12512 ;; Tracked objects:
 12513 ;;		On entry : 0/0
 12514 ;;		On exit  : 0/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12520 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;Total ram usage:        3 bytes
 12522 ;; Hardware stack levels used:    1
 12523 ;; Hardware stack levels required when called:   10
 12524 ;; This function calls:
 12525 ;;		_lcdInst
 12526 ;;		_printf
 12527 ;; This function is called by:
 12528 ;;		_Test
 12529 ;; This function uses a non-reentrant model
 12530 ;;
 12531                           
 12532                           	psect	text43
 12533  003CB4                     __ptext43:
 12534                           	opt stack 0
 12535  003CB4                     _PusherTest:
 12536                           	opt stack 19
 12537                           
 12538                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12539                           
 12540                           ;incstack = 0
 12541  003CB4  0E01               	movlw	1
 12542  003CB6  EC9C  F024         	call	_lcdInst
 12543  003CBA  0E68               	movlw	104
 12544  003CBC  0100               	movlb	0	; () banked
 12545  003CBE  6FAB               	movwf	??_PusherTest& (0+255),b
 12546  003CC0  0EE4               	movlw	228
 12547  003CC2                     u8317:
 12548  003CC2  2EE8               	decfsz	wreg,f,c
 12549  003CC4  D7FE               	bra	u8317
 12550  003CC6  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12551  003CC8  D7FC               	bra	u8317
 12552  003CCA  F000               	nop	
 12553  003CCC  0E80               	movlw	128
 12554  003CCE  EC9C  F024         	call	_lcdInst
 12555                           
 12556                           ;Test.c: 467: printf("PUSHER TST");
 12557  003CD2  0E71               	movlw	low STR_113
 12558  003CD4  0100               	movlb	0	; () banked
 12559  003CD6  6F8E               	movwf	printf@f& (0+255),b
 12560  003CD8  0EFF               	movlw	high STR_113
 12561  003CDA  0100               	movlb	0	; () banked
 12562  003CDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12563  003CDE  ECB8  F008         	call	_printf	;wreg free
 12564  003CE2                     l1207:
 12565  003CE2  A281               	btfss	3969,1,c	;volatile
 12566  003CE4  D7FE               	goto	l1207
 12567                           
 12568                           ;Test.c: 473: }
 12569                           ;Test.c: 474: if(PORTB >> 4 == 0b1111){
 12570  003CE6  3881               	swapf	3969,w,c	;volatile
 12571  003CE8  0B0F               	andlw	15
 12572  003CEA  0A0F               	xorlw	15
 12573  003CEC  B4D8               	btfsc	status,2,c
 12574  003CEE  0012               	return	
 12575                           
 12576                           ;Test.c: 476: }
 12577                           ;Test.c: 480: for(int i = 0; i<3000; i++){
 12578                           
 12579                           ;Test.c: 475: break;
 12580  003CF0  0E00               	movlw	0
 12581  003CF2  0100               	movlb	0	; () banked
 12582  003CF4  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12583  003CF6  0E00               	movlw	0
 12584  003CF8  6FAC               	movwf	PusherTest@i& (0+255),b
 12585  003CFA                     l7265:
 12586                           
 12587                           ; BSR set to: 0
 12588  003CFA  0100               	movlb	0	; () banked
 12589  003CFC  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12590  003CFE  D008               	goto	l1212
 12591  003D00  0EB8               	movlw	184
 12592  003D02  0100               	movlb	0	; () banked
 12593  003D04  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12594  003D06  0E0B               	movlw	11
 12595  003D08  0100               	movlb	0	; () banked
 12596  003D0A  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12597  003D0C  B0D8               	btfsc	status,0,c
 12598  003D0E  D00D               	goto	l1214
 12599  003D10                     l1212:
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;Test.c: 481: LATAbits.LATA4 = 1;
 12603  003D10  8889               	bsf	3977,4,c	;volatile
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;Test.c: 482: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12607  003D12  0EC8               	movlw	200
 12608  003D14                     u8327:
 12609  003D14  2EE8               	decfsz	wreg,f,c
 12610  003D16  D7FE               	bra	u8327
 12611                           
 12612                           ;Test.c: 483: LATAbits.LATA4 = 0;
 12613  003D18  9889               	bcf	3977,4,c	;volatile
 12614                           
 12615                           ;Test.c: 484: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12616  003D1A  0E42               	movlw	66
 12617  003D1C                     u8337:
 12618  003D1C  2EE8               	decfsz	wreg,f,c
 12619  003D1E  D7FE               	bra	u8337
 12620  003D20  D000               	nop2	
 12621  003D22  0100               	movlb	0	; () banked
 12622  003D24  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12623  003D26  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12624  003D28  D7E8               	goto	l7265
 12625  003D2A                     l1214:
 12626  003D2A  A281               	btfss	3969,1,c	;volatile
 12627  003D2C  D7DA               	goto	l1207
 12628  003D2E  D7FD               	goto	l1214
 12629  003D30                     __end_of_PusherTest:
 12630                           	opt stack 0
 12631                           tblptru	equ	0xFF8
 12632                           tblptrh	equ	0xFF7
 12633                           tblptrl	equ	0xFF6
 12634                           tablat	equ	0xFF5
 12635                           prodh	equ	0xFF4
 12636                           prodl	equ	0xFF3
 12637                           intcon	equ	0xFF2
 12638                           intcon2	equ	0xFF1
 12639                           intcon3	equ	0xFF0
 12640                           postinc0	equ	0xFEE
 12641                           wreg	equ	0xFE8
 12642                           postdec1	equ	0xFE5
 12643                           fsr1l	equ	0xFE1
 12644                           indf2	equ	0xFDF
 12645                           postinc2	equ	0xFDE
 12646                           postdec2	equ	0xFDD
 12647                           fsr2h	equ	0xFDA
 12648                           fsr2l	equ	0xFD9
 12649                           status	equ	0xFD8
 12650                           
 12651 ;; *************** function _PortTests *****************
 12652 ;; Defined at:
 12653 ;;		line 407 in file "Test.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;		None
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      void 
 12660 ;; Registers used:
 12661 ;;		wreg, status,2, status,0
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;Total ram usage:        2 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    7
 12674 ;; This function calls:
 12675 ;;		Nothing
 12676 ;; This function is called by:
 12677 ;;		_Test
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           	psect	text44
 12682  003C30                     __ptext44:
 12683                           	opt stack 0
 12684  003C30                     _PortTests:
 12685                           	opt stack 22
 12686  003C30                     l1172:
 12687  003C30  A281               	btfss	3969,1,c	;volatile
 12688  003C32  D7FE               	goto	l1172
 12689                           
 12690                           ;Test.c: 411: var = PORTB >> 4;
 12691  003C34  CF81 F080          	movff	3969,??_PortTests	;volatile
 12692  003C38  0100               	movlb	0	; () banked
 12693  003C3A  3B80               	swapf	??_PortTests& (0+255),f,b
 12694  003C3C  0E0F               	movlw	15
 12695  003C3E  1780               	andwf	??_PortTests& (0+255),f,b
 12696  003C40  0100               	movlb	0	; () banked
 12697  003C42  5180               	movf	??_PortTests& (0+255),w,b
 12698  003C44  0100               	movlb	0	; () banked
 12699  003C46  6FFA               	movwf	_var& (0+255),b
 12700  003C48  6BFB               	clrf	(_var+1)& (0+255),b
 12701                           
 12702                           ;Test.c: 412: switch(var){
 12703  003C4A  D00C               	goto	l7279
 12704  003C4C                     l1176:
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;Test.c: 414: LATEbits.LATE0 = 1;
 12708  003C4C  808D               	bsf	3981,0,c	;volatile
 12709                           
 12710                           ;Test.c: 415: break;
 12711  003C4E  D027               	goto	l1184
 12712  003C50                     l1178:
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;Test.c: 417: LATEbits.LATE1 = 1;
 12716  003C50  828D               	bsf	3981,1,c	;volatile
 12717                           
 12718                           ;Test.c: 418: break;
 12719  003C52  D025               	goto	l1184
 12720  003C54                     l1179:
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;Test.c: 420: LATDbits.LATD0 = 1;
 12724  003C54  808C               	bsf	3980,0,c	;volatile
 12725                           
 12726                           ;Test.c: 421: break;
 12727  003C56  D023               	goto	l1184
 12728  003C58                     l1180:
 12729                           
 12730                           ; BSR set to: 0
 12731                           ;Test.c: 423: LATAbits.LATA3 = 1;
 12732  003C58  8689               	bsf	3977,3,c	;volatile
 12733                           
 12734                           ;Test.c: 424: break;
 12735  003C5A  D021               	goto	l1184
 12736  003C5C                     l1181:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;Test.c: 426: LATAbits.LATA4 = 1;
 12740  003C5C  8889               	bsf	3977,4,c	;volatile
 12741                           
 12742                           ;Test.c: 427: break;
 12743  003C5E  D01F               	goto	l1184
 12744  003C60                     l1182:
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;Test.c: 429: LATAbits.LATA5 = 1;
 12748  003C60  8A89               	bsf	3977,5,c	;volatile
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;Test.c: 433: }
 12752                           
 12753                           ; BSR set to: 0
 12754                           ;Test.c: 432: break;
 12755                           
 12756                           ;Test.c: 431: default:
 12757                           
 12758                           ;Test.c: 430: break;
 12759  003C62  D01D               	goto	l1184
 12760  003C64                     l7279:
 12761                           
 12762                           ; BSR set to: 0
 12763  003C64  C0FA  F080         	movff	_var,??_PortTests
 12764  003C68  C0FB  F081         	movff	_var+1,??_PortTests+1
 12765                           
 12766                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12767                           ; Switch size 1, requested type "space"
 12768                           ; Number of cases is 1, Range of values is 0 to 0
 12769                           ; switch strategies available:
 12770                           ; Name         Instructions Cycles
 12771                           ; simple_byte            4     3 (average)
 12772                           ;	Chosen strategy is simple_byte
 12773  003C6C  0100               	movlb	0	; () banked
 12774  003C6E  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12775  003C70  0A00               	xorlw	0	; case 0
 12776  003C72  A4D8               	btfss	status,2,c
 12777  003C74  D014               	goto	l1184
 12778                           
 12779                           ; BSR set to: 0
 12780                           ; Switch size 1, requested type "space"
 12781                           ; Number of cases is 6, Range of values is 0 to 5
 12782                           ; switch strategies available:
 12783                           ; Name         Instructions Cycles
 12784                           ; simple_byte           19    10 (average)
 12785                           ;	Chosen strategy is simple_byte
 12786  003C76  0100               	movlb	0	; () banked
 12787  003C78  5180               	movf	??_PortTests& (0+255),w,b
 12788  003C7A  0A00               	xorlw	0	; case 0
 12789  003C7C  B4D8               	btfsc	status,2,c
 12790  003C7E  D7E6               	goto	l1176
 12791  003C80  0A01               	xorlw	1	; case 1
 12792  003C82  B4D8               	btfsc	status,2,c
 12793  003C84  D7E5               	goto	l1178
 12794  003C86  0A03               	xorlw	3	; case 2
 12795  003C88  B4D8               	btfsc	status,2,c
 12796  003C8A  D7E4               	goto	l1179
 12797  003C8C  0A01               	xorlw	1	; case 3
 12798  003C8E  B4D8               	btfsc	status,2,c
 12799  003C90  D7E3               	goto	l1180
 12800  003C92  0A07               	xorlw	7	; case 4
 12801  003C94  B4D8               	btfsc	status,2,c
 12802  003C96  D7E2               	goto	l1181
 12803  003C98  0A01               	xorlw	1	; case 5
 12804  003C9A  B4D8               	btfsc	status,2,c
 12805  003C9C  D7E1               	goto	l1182
 12806  003C9E                     l1184:
 12807  003C9E  B281               	btfsc	3969,1,c	;volatile
 12808  003CA0  D7FE               	goto	l1184
 12809                           
 12810                           ;Test.c: 435: __nop();
 12811  003CA2  F000               	nop	
 12812                           
 12813                           ;Test.c: 436: __nop();
 12814  003CA4  F000               	nop	
 12815                           
 12816                           ;Test.c: 437: LATA = 0x00;
 12817  003CA6  0E00               	movlw	0
 12818  003CA8  6E89               	movwf	3977,c	;volatile
 12819                           
 12820                           ;Test.c: 438: LATE = 0x00;
 12821  003CAA  0E00               	movlw	0
 12822  003CAC  6E8D               	movwf	3981,c	;volatile
 12823                           
 12824                           ;Test.c: 439: LATD = 0x00; }
 12825  003CAE  0E00               	movlw	0
 12826  003CB0  6E8C               	movwf	3980,c	;volatile
 12827  003CB2  D7BE               	goto	l1172
 12828  003CB4                     __end_of_PortTests:
 12829                           	opt stack 0
 12830                           tblptru	equ	0xFF8
 12831                           tblptrh	equ	0xFF7
 12832                           tblptrl	equ	0xFF6
 12833                           tablat	equ	0xFF5
 12834                           prodh	equ	0xFF4
 12835                           prodl	equ	0xFF3
 12836                           intcon	equ	0xFF2
 12837                           intcon2	equ	0xFF1
 12838                           intcon3	equ	0xFF0
 12839                           postinc0	equ	0xFEE
 12840                           wreg	equ	0xFE8
 12841                           postdec1	equ	0xFE5
 12842                           fsr1l	equ	0xFE1
 12843                           indf2	equ	0xFDF
 12844                           postinc2	equ	0xFDE
 12845                           postdec2	equ	0xFDD
 12846                           fsr2h	equ	0xFDA
 12847                           fsr2l	equ	0xFD9
 12848                           status	equ	0xFD8
 12849                           
 12850 ;; *************** function _PortTestA5 *****************
 12851 ;; Defined at:
 12852 ;;		line 442 in file "Test.c"
 12853 ;; Parameters:    Size  Location     Type
 12854 ;;		None
 12855 ;; Auto vars:     Size  Location     Type
 12856 ;;		None
 12857 ;; Return value:  Size  Location     Type
 12858 ;;                  1    wreg      void 
 12859 ;; Registers used:
 12860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12861 ;; Tracked objects:
 12862 ;;		On entry : 0/0
 12863 ;;		On exit  : 0/0
 12864 ;;		Unchanged: 0/0
 12865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12869 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12870 ;;Total ram usage:        1 bytes
 12871 ;; Hardware stack levels used:    1
 12872 ;; Hardware stack levels required when called:   10
 12873 ;; This function calls:
 12874 ;;		_lcdInst
 12875 ;;		_printf
 12876 ;; This function is called by:
 12877 ;;		_Test
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           	psect	text45
 12882  004080                     __ptext45:
 12883                           	opt stack 0
 12884  004080                     _PortTestA5:
 12885                           	opt stack 19
 12886                           
 12887                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12888                           
 12889                           ;incstack = 0
 12890  004080  0E01               	movlw	1
 12891  004082  EC9C  F024         	call	_lcdInst
 12892  004086  0E68               	movlw	104
 12893  004088  0100               	movlb	0	; () banked
 12894  00408A  6FAB               	movwf	??_PortTestA5& (0+255),b
 12895  00408C  0EE4               	movlw	228
 12896  00408E                     u8347:
 12897  00408E  2EE8               	decfsz	wreg,f,c
 12898  004090  D7FE               	bra	u8347
 12899  004092  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12900  004094  D7FC               	bra	u8347
 12901  004096  F000               	nop	
 12902  004098  0E80               	movlw	128
 12903  00409A  EC9C  F024         	call	_lcdInst
 12904                           
 12905                           ;Test.c: 444: printf("D WILL RETURN    ");
 12906  00409E  0E49               	movlw	low STR_111
 12907  0040A0  0100               	movlb	0	; () banked
 12908  0040A2  6F8E               	movwf	printf@f& (0+255),b
 12909  0040A4  0EFB               	movlw	high STR_111
 12910  0040A6  0100               	movlb	0	; () banked
 12911  0040A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12912  0040AA  ECB8  F008         	call	_printf	;wreg free
 12913                           
 12914                           ;Test.c: 445: lcdInst(0b11000000);;
 12915  0040AE  0EC0               	movlw	192
 12916  0040B0  EC9C  F024         	call	_lcdInst
 12917                           
 12918                           ;Test.c: 446: printf("OTHER SETS RA5   ");
 12919  0040B4  0E5B               	movlw	low STR_112
 12920  0040B6  0100               	movlb	0	; () banked
 12921  0040B8  6F8E               	movwf	printf@f& (0+255),b
 12922  0040BA  0EFB               	movlw	high STR_112
 12923  0040BC  0100               	movlb	0	; () banked
 12924  0040BE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12925  0040C0  ECB8  F008         	call	_printf	;wreg free
 12926  0040C4                     l1193:
 12927  0040C4  A281               	btfss	3969,1,c	;volatile
 12928  0040C6  D7FE               	goto	l1193
 12929                           
 12930                           ;Test.c: 451: }
 12931                           ;Test.c: 452: if(PORTB >> 4 == 0b1111){
 12932  0040C8  3881               	swapf	3969,w,c	;volatile
 12933  0040CA  0B0F               	andlw	15
 12934  0040CC  0A0F               	xorlw	15
 12935  0040CE  B4D8               	btfsc	status,2,c
 12936  0040D0  0012               	return	
 12937                           
 12938                           ;Test.c: 455: else{
 12939                           ;Test.c: 456: LATAbits.LATA5 = 1;
 12940                           
 12941                           ;Test.c: 454: }
 12942                           
 12943                           ;Test.c: 453: break;
 12944  0040D2  8A89               	bsf	3977,5,c	;volatile
 12945  0040D4                     l1199:
 12946  0040D4  B281               	btfsc	3969,1,c	;volatile
 12947  0040D6  D7FE               	goto	l1199
 12948                           
 12949                           ;Test.c: 459: }
 12950                           ;Test.c: 460: LATAbits.LATA5 = 0;
 12951  0040D8  9A89               	bcf	3977,5,c	;volatile
 12952  0040DA  D7F4               	goto	l1193
 12953  0040DC                     __end_of_PortTestA5:
 12954                           	opt stack 0
 12955                           tblptru	equ	0xFF8
 12956                           tblptrh	equ	0xFF7
 12957                           tblptrl	equ	0xFF6
 12958                           tablat	equ	0xFF5
 12959                           prodh	equ	0xFF4
 12960                           prodl	equ	0xFF3
 12961                           intcon	equ	0xFF2
 12962                           intcon2	equ	0xFF1
 12963                           intcon3	equ	0xFF0
 12964                           postinc0	equ	0xFEE
 12965                           wreg	equ	0xFE8
 12966                           postdec1	equ	0xFE5
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           fsr2h	equ	0xFDA
 12972                           fsr2l	equ	0xFD9
 12973                           status	equ	0xFD8
 12974                           
 12975 ;; *************** function _EEPROMTest *****************
 12976 ;; Defined at:
 12977 ;;		line 550 in file "Test.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;		None
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;		None
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      void 
 12984 ;; Registers used:
 12985 ;;		None
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;Total ram usage:        0 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    7
 12998 ;; This function calls:
 12999 ;;		Nothing
 13000 ;; This function is called by:
 13001 ;;		_Test
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           	psect	text46
 13006  00499C                     __ptext46:
 13007                           	opt stack 0
 13008  00499C                     _EEPROMTest:
 13009                           	opt stack 22
 13010                           
 13011                           ;incstack = 0
 13012  00499C  0012               	return		;funcret
 13013  00499E                     __end_of_EEPROMTest:
 13014                           	opt stack 0
 13015                           tblptru	equ	0xFF8
 13016                           tblptrh	equ	0xFF7
 13017                           tblptrl	equ	0xFF6
 13018                           tablat	equ	0xFF5
 13019                           prodh	equ	0xFF4
 13020                           prodl	equ	0xFF3
 13021                           intcon	equ	0xFF2
 13022                           intcon2	equ	0xFF1
 13023                           intcon3	equ	0xFF0
 13024                           postinc0	equ	0xFEE
 13025                           wreg	equ	0xFE8
 13026                           postdec1	equ	0xFE5
 13027                           fsr1l	equ	0xFE1
 13028                           indf2	equ	0xFDF
 13029                           postinc2	equ	0xFDE
 13030                           postdec2	equ	0xFDD
 13031                           fsr2h	equ	0xFDA
 13032                           fsr2l	equ	0xFD9
 13033                           status	equ	0xFD8
 13034                           
 13035 ;; *************** function _BothServos *****************
 13036 ;; Defined at:
 13037 ;;		line 350 in file "Test.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;		None
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;		None
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  1    wreg      void 
 13044 ;; Registers used:
 13045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;Total ram usage:        2 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; Hardware stack levels required when called:   10
 13058 ;; This function calls:
 13059 ;;		_initServos
 13060 ;;		_lcdInst
 13061 ;;		_printf
 13062 ;;		_updateServoPosition
 13063 ;; This function is called by:
 13064 ;;		_Test
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           	psect	text47
 13069  0015A8                     __ptext47:
 13070                           	opt stack 0
 13071  0015A8                     _BothServos:
 13072                           	opt stack 19
 13073                           
 13074                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13075                           
 13076                           ;incstack = 0
 13077  0015A8  0E01               	movlw	1
 13078  0015AA  EC9C  F024         	call	_lcdInst
 13079  0015AE  0E68               	movlw	104
 13080  0015B0  0100               	movlb	0	; () banked
 13081  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13082  0015B4  0EE4               	movlw	228
 13083  0015B6                     u8357:
 13084  0015B6  2EE8               	decfsz	wreg,f,c
 13085  0015B8  D7FE               	bra	u8357
 13086  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13087  0015BC  D7FC               	bra	u8357
 13088  0015BE  F000               	nop	
 13089  0015C0  0E80               	movlw	128
 13090  0015C2  EC9C  F024         	call	_lcdInst
 13091                           
 13092                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 13093  0015C6  0EB4               	movlw	low STR_110
 13094  0015C8  0100               	movlb	0	; () banked
 13095  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13096  0015CC  0EFC               	movlw	high STR_110
 13097  0015CE  0100               	movlb	0	; () banked
 13098  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13099  0015D2  ECB8  F008         	call	_printf	;wreg free
 13100                           
 13101                           ;Test.c: 353: TMR1ON = 1;
 13102  0015D6  80CD               	bsf	4045,0,c	;volatile
 13103                           
 13104                           ;Test.c: 354: TMR3ON = 1;
 13105  0015D8  80B1               	bsf	4017,0,c	;volatile
 13106                           
 13107                           ;Test.c: 355: machine_state = Sorting_state;
 13108  0015DA  0E01               	movlw	1
 13109  0015DC  0100               	movlb	0	; () banked
 13110  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;Test.c: 356: was_low_1 = 0;
 13114  0015E0  0E00               	movlw	0
 13115  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13116  0015E4  0E00               	movlw	0
 13117  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;Test.c: 357: was_low_3 = 0;
 13121  0015E8  0E00               	movlw	0
 13122  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13123  0015EC  0E00               	movlw	0
 13124  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;Test.c: 363: initServos();
 13128  0015F0  EC6E  F020         	call	_initServos	;wreg free
 13129                           
 13130                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13131  0015F4  0E3D               	movlw	61
 13132  0015F6  0100               	movlb	0	; () banked
 13133  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13134  0015FA  0EE1               	movlw	225
 13135  0015FC  0100               	movlb	0	; () banked
 13136  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13137  001600  0E3F               	movlw	63
 13138  001602                     u8367:
 13139  001602  2EE8               	decfsz	wreg,f,c
 13140  001604  D7FE               	bra	u8367
 13141  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13142  001608  D7FC               	bra	u8367
 13143  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13144  00160C  D7FA               	bra	u8367
 13145  00160E  D000               	nop2	
 13146                           
 13147                           ;Test.c: 366: updateServoPosition(500, 1);
 13148  001610  0E01               	movlw	1
 13149  001612  0100               	movlb	0	; () banked
 13150  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13151  001616  0EF4               	movlw	244
 13152  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13153  00161A  0E00               	movlw	0
 13154  00161C  0100               	movlb	0	; () banked
 13155  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13156  001620  0E01               	movlw	1
 13157  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13158  001624  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13159                           
 13160                           ;Test.c: 367: updateServoPosition(1150, 3);
 13161  001628  0E04               	movlw	4
 13162  00162A  0100               	movlb	0	; () banked
 13163  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13164  00162E  0E7E               	movlw	126
 13165  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13166  001632  0E00               	movlw	0
 13167  001634  0100               	movlb	0	; () banked
 13168  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13169  001638  0E03               	movlw	3
 13170  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13171  00163C  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13172                           
 13173                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 13174  001640  0E1F               	movlw	31
 13175  001642  0100               	movlb	0	; () banked
 13176  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13177  001646  0E71               	movlw	113
 13178  001648  0100               	movlb	0	; () banked
 13179  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13180  00164C  0E1E               	movlw	30
 13181  00164E                     u8377:
 13182  00164E  2EE8               	decfsz	wreg,f,c
 13183  001650  D7FE               	bra	u8377
 13184  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13185  001654  D7FC               	bra	u8377
 13186  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13187  001658  D7FA               	bra	u8377
 13188  00165A  F000               	nop	
 13189                           
 13190                           ;Test.c: 369: updateServoPosition(1350, 3);
 13191  00165C  0E05               	movlw	5
 13192  00165E  0100               	movlb	0	; () banked
 13193  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13194  001662  0E46               	movlw	70
 13195  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13196  001666  0E00               	movlw	0
 13197  001668  0100               	movlb	0	; () banked
 13198  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13199  00166C  0E03               	movlw	3
 13200  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13201  001670  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13202                           
 13203                           ;Test.c: 370: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13204  001674  0E52               	movlw	82
 13205  001676  0100               	movlb	0	; () banked
 13206  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13207  00167A  0E2B               	movlw	43
 13208  00167C  0100               	movlb	0	; () banked
 13209  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13210  001680  0E00               	movlw	0
 13211  001682                     u8387:
 13212  001682  2EE8               	decfsz	wreg,f,c
 13213  001684  D7FE               	bra	u8387
 13214  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13215  001688  D7FC               	bra	u8387
 13216  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13217  00168C  D7FA               	bra	u8387
 13218  00168E  F000               	nop	
 13219                           
 13220                           ;Test.c: 371: updateServoPosition(1150, 3);
 13221  001690  0E04               	movlw	4
 13222  001692  0100               	movlb	0	; () banked
 13223  001694  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13224  001696  0E7E               	movlw	126
 13225  001698  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13226  00169A  0E00               	movlw	0
 13227  00169C  0100               	movlb	0	; () banked
 13228  00169E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13229  0016A0  0E03               	movlw	3
 13230  0016A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13231  0016A4  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13232                           
 13233                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13234  0016A8  0E1F               	movlw	31
 13235  0016AA  0100               	movlb	0	; () banked
 13236  0016AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13237  0016AE  0E71               	movlw	113
 13238  0016B0  0100               	movlb	0	; () banked
 13239  0016B2  6FAB               	movwf	??_BothServos& (0+255),b
 13240  0016B4  0E1E               	movlw	30
 13241  0016B6                     u8397:
 13242  0016B6  2EE8               	decfsz	wreg,f,c
 13243  0016B8  D7FE               	bra	u8397
 13244  0016BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13245  0016BC  D7FC               	bra	u8397
 13246  0016BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13247  0016C0  D7FA               	bra	u8397
 13248  0016C2  F000               	nop	
 13249                           
 13250                           ;Test.c: 374: updateServoPosition(750, 1);
 13251  0016C4  0E02               	movlw	2
 13252  0016C6  0100               	movlb	0	; () banked
 13253  0016C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13254  0016CA  0EEE               	movlw	238
 13255  0016CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13256  0016CE  0E00               	movlw	0
 13257  0016D0  0100               	movlb	0	; () banked
 13258  0016D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13259  0016D4  0E01               	movlw	1
 13260  0016D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13261  0016D8  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13262                           
 13263                           ;Test.c: 375: updateServoPosition(1150, 3);
 13264  0016DC  0E04               	movlw	4
 13265  0016DE  0100               	movlb	0	; () banked
 13266  0016E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13267  0016E2  0E7E               	movlw	126
 13268  0016E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13269  0016E6  0E00               	movlw	0
 13270  0016E8  0100               	movlb	0	; () banked
 13271  0016EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13272  0016EC  0E03               	movlw	3
 13273  0016EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13274  0016F0  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13275                           
 13276                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13277  0016F4  0E1F               	movlw	31
 13278  0016F6  0100               	movlb	0	; () banked
 13279  0016F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13280  0016FA  0E71               	movlw	113
 13281  0016FC  0100               	movlb	0	; () banked
 13282  0016FE  6FAB               	movwf	??_BothServos& (0+255),b
 13283  001700  0E1E               	movlw	30
 13284  001702                     u8407:
 13285  001702  2EE8               	decfsz	wreg,f,c
 13286  001704  D7FE               	bra	u8407
 13287  001706  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13288  001708  D7FC               	bra	u8407
 13289  00170A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13290  00170C  D7FA               	bra	u8407
 13291  00170E  F000               	nop	
 13292                           
 13293                           ;Test.c: 377: updateServoPosition(1350, 3);
 13294  001710  0E05               	movlw	5
 13295  001712  0100               	movlb	0	; () banked
 13296  001714  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13297  001716  0E46               	movlw	70
 13298  001718  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13299  00171A  0E00               	movlw	0
 13300  00171C  0100               	movlb	0	; () banked
 13301  00171E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13302  001720  0E03               	movlw	3
 13303  001722  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13304  001724  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13305                           
 13306                           ;Test.c: 378: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13307  001728  0E52               	movlw	82
 13308  00172A  0100               	movlb	0	; () banked
 13309  00172C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13310  00172E  0E2B               	movlw	43
 13311  001730  0100               	movlb	0	; () banked
 13312  001732  6FAB               	movwf	??_BothServos& (0+255),b
 13313  001734  0E00               	movlw	0
 13314  001736                     u8417:
 13315  001736  2EE8               	decfsz	wreg,f,c
 13316  001738  D7FE               	bra	u8417
 13317  00173A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13318  00173C  D7FC               	bra	u8417
 13319  00173E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13320  001740  D7FA               	bra	u8417
 13321  001742  F000               	nop	
 13322                           
 13323                           ;Test.c: 379: updateServoPosition(1150, 3);
 13324  001744  0E04               	movlw	4
 13325  001746  0100               	movlb	0	; () banked
 13326  001748  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13327  00174A  0E7E               	movlw	126
 13328  00174C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13329  00174E  0E00               	movlw	0
 13330  001750  0100               	movlb	0	; () banked
 13331  001752  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13332  001754  0E03               	movlw	3
 13333  001756  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13334  001758  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13335                           
 13336                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 13337  00175C  0E1F               	movlw	31
 13338  00175E  0100               	movlb	0	; () banked
 13339  001760  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13340  001762  0E71               	movlw	113
 13341  001764  0100               	movlb	0	; () banked
 13342  001766  6FAB               	movwf	??_BothServos& (0+255),b
 13343  001768  0E1E               	movlw	30
 13344  00176A                     u8427:
 13345  00176A  2EE8               	decfsz	wreg,f,c
 13346  00176C  D7FE               	bra	u8427
 13347  00176E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13348  001770  D7FC               	bra	u8427
 13349  001772  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13350  001774  D7FA               	bra	u8427
 13351  001776  F000               	nop	
 13352                           
 13353                           ;Test.c: 382: updateServoPosition(1200, 1);
 13354  001778  0E04               	movlw	4
 13355  00177A  0100               	movlb	0	; () banked
 13356  00177C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13357  00177E  0EB0               	movlw	176
 13358  001780  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13359  001782  0E00               	movlw	0
 13360  001784  0100               	movlb	0	; () banked
 13361  001786  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13362  001788  0E01               	movlw	1
 13363  00178A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13364  00178C  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13365                           
 13366                           ;Test.c: 383: updateServoPosition(1150, 3);
 13367  001790  0E04               	movlw	4
 13368  001792  0100               	movlb	0	; () banked
 13369  001794  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13370  001796  0E7E               	movlw	126
 13371  001798  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13372  00179A  0E00               	movlw	0
 13373  00179C  0100               	movlb	0	; () banked
 13374  00179E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13375  0017A0  0E03               	movlw	3
 13376  0017A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13377  0017A4  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13378                           
 13379                           ;Test.c: 384: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13380  0017A8  0E3D               	movlw	61
 13381  0017AA  0100               	movlb	0	; () banked
 13382  0017AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13383  0017AE  0EE1               	movlw	225
 13384  0017B0  0100               	movlb	0	; () banked
 13385  0017B2  6FAB               	movwf	??_BothServos& (0+255),b
 13386  0017B4  0E3F               	movlw	63
 13387  0017B6                     u8437:
 13388  0017B6  2EE8               	decfsz	wreg,f,c
 13389  0017B8  D7FE               	bra	u8437
 13390  0017BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13391  0017BC  D7FC               	bra	u8437
 13392  0017BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13393  0017C0  D7FA               	bra	u8437
 13394  0017C2  D000               	nop2	
 13395                           
 13396                           ;Test.c: 386: updateServoPosition(1700, 1);
 13397  0017C4  0E06               	movlw	6
 13398  0017C6  0100               	movlb	0	; () banked
 13399  0017C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13400  0017CA  0EA4               	movlw	164
 13401  0017CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13402  0017CE  0E00               	movlw	0
 13403  0017D0  0100               	movlb	0	; () banked
 13404  0017D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13405  0017D4  0E01               	movlw	1
 13406  0017D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13407  0017D8  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13408                           
 13409                           ;Test.c: 387: updateServoPosition(1150, 3);
 13410  0017DC  0E04               	movlw	4
 13411  0017DE  0100               	movlb	0	; () banked
 13412  0017E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13413  0017E2  0E7E               	movlw	126
 13414  0017E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13415  0017E6  0E00               	movlw	0
 13416  0017E8  0100               	movlb	0	; () banked
 13417  0017EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13418  0017EC  0E03               	movlw	3
 13419  0017EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13420  0017F0  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13421                           
 13422                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13423  0017F4  0E1F               	movlw	31
 13424  0017F6  0100               	movlb	0	; () banked
 13425  0017F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13426  0017FA  0E71               	movlw	113
 13427  0017FC  0100               	movlb	0	; () banked
 13428  0017FE  6FAB               	movwf	??_BothServos& (0+255),b
 13429  001800  0E1E               	movlw	30
 13430  001802                     u8447:
 13431  001802  2EE8               	decfsz	wreg,f,c
 13432  001804  D7FE               	bra	u8447
 13433  001806  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13434  001808  D7FC               	bra	u8447
 13435  00180A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13436  00180C  D7FA               	bra	u8447
 13437  00180E  F000               	nop	
 13438                           
 13439                           ;Test.c: 389: updateServoPosition(1350, 3);
 13440  001810  0E05               	movlw	5
 13441  001812  0100               	movlb	0	; () banked
 13442  001814  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13443  001816  0E46               	movlw	70
 13444  001818  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13445  00181A  0E00               	movlw	0
 13446  00181C  0100               	movlb	0	; () banked
 13447  00181E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13448  001820  0E03               	movlw	3
 13449  001822  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13450  001824  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13451                           
 13452                           ;Test.c: 390: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13453  001828  0E52               	movlw	82
 13454  00182A  0100               	movlb	0	; () banked
 13455  00182C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13456  00182E  0E2B               	movlw	43
 13457  001830  0100               	movlb	0	; () banked
 13458  001832  6FAB               	movwf	??_BothServos& (0+255),b
 13459  001834  0E00               	movlw	0
 13460  001836                     u8457:
 13461  001836  2EE8               	decfsz	wreg,f,c
 13462  001838  D7FE               	bra	u8457
 13463  00183A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13464  00183C  D7FC               	bra	u8457
 13465  00183E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13466  001840  D7FA               	bra	u8457
 13467  001842  F000               	nop	
 13468                           
 13469                           ;Test.c: 391: updateServoPosition(1150, 3);
 13470  001844  0E04               	movlw	4
 13471  001846  0100               	movlb	0	; () banked
 13472  001848  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13473  00184A  0E7E               	movlw	126
 13474  00184C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13475  00184E  0E00               	movlw	0
 13476  001850  0100               	movlb	0	; () banked
 13477  001852  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13478  001854  0E03               	movlw	3
 13479  001856  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13480  001858  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13481                           
 13482                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 13483  00185C  0E1F               	movlw	31
 13484  00185E  0100               	movlb	0	; () banked
 13485  001860  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13486  001862  0E71               	movlw	113
 13487  001864  0100               	movlb	0	; () banked
 13488  001866  6FAB               	movwf	??_BothServos& (0+255),b
 13489  001868  0E1E               	movlw	30
 13490  00186A                     u8467:
 13491  00186A  2EE8               	decfsz	wreg,f,c
 13492  00186C  D7FE               	bra	u8467
 13493  00186E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13494  001870  D7FC               	bra	u8467
 13495  001872  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13496  001874  D7FA               	bra	u8467
 13497  001876  F000               	nop	
 13498                           
 13499                           ;Test.c: 394: updateServoPosition(2100, 1);
 13500  001878  0E08               	movlw	8
 13501  00187A  0100               	movlb	0	; () banked
 13502  00187C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13503  00187E  0E34               	movlw	52
 13504  001880  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13505  001882  0E00               	movlw	0
 13506  001884  0100               	movlb	0	; () banked
 13507  001886  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13508  001888  0E01               	movlw	1
 13509  00188A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13510  00188C  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13511                           
 13512                           ;Test.c: 395: updateServoPosition(1150, 3);
 13513  001890  0E04               	movlw	4
 13514  001892  0100               	movlb	0	; () banked
 13515  001894  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13516  001896  0E7E               	movlw	126
 13517  001898  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13518  00189A  0E00               	movlw	0
 13519  00189C  0100               	movlb	0	; () banked
 13520  00189E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13521  0018A0  0E03               	movlw	3
 13522  0018A2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13523  0018A4  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13524                           
 13525                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 13526  0018A8  0E1F               	movlw	31
 13527  0018AA  0100               	movlb	0	; () banked
 13528  0018AC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13529  0018AE  0E71               	movlw	113
 13530  0018B0  0100               	movlb	0	; () banked
 13531  0018B2  6FAB               	movwf	??_BothServos& (0+255),b
 13532  0018B4  0E1E               	movlw	30
 13533  0018B6                     u8477:
 13534  0018B6  2EE8               	decfsz	wreg,f,c
 13535  0018B8  D7FE               	bra	u8477
 13536  0018BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13537  0018BC  D7FC               	bra	u8477
 13538  0018BE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13539  0018C0  D7FA               	bra	u8477
 13540  0018C2  F000               	nop	
 13541                           
 13542                           ;Test.c: 397: updateServoPosition(1350, 3);
 13543  0018C4  0E05               	movlw	5
 13544  0018C6  0100               	movlb	0	; () banked
 13545  0018C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13546  0018CA  0E46               	movlw	70
 13547  0018CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13548  0018CE  0E00               	movlw	0
 13549  0018D0  0100               	movlb	0	; () banked
 13550  0018D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13551  0018D4  0E03               	movlw	3
 13552  0018D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13553  0018D8  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13554                           
 13555                           ;Test.c: 398: _delay((unsigned long)((2000)*(32000000/4000.0)));
 13556  0018DC  0E52               	movlw	82
 13557  0018DE  0100               	movlb	0	; () banked
 13558  0018E0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13559  0018E2  0E2B               	movlw	43
 13560  0018E4  0100               	movlb	0	; () banked
 13561  0018E6  6FAB               	movwf	??_BothServos& (0+255),b
 13562  0018E8  0E00               	movlw	0
 13563  0018EA                     u8487:
 13564  0018EA  2EE8               	decfsz	wreg,f,c
 13565  0018EC  D7FE               	bra	u8487
 13566  0018EE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13567  0018F0  D7FC               	bra	u8487
 13568  0018F2  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13569  0018F4  D7FA               	bra	u8487
 13570  0018F6  F000               	nop	
 13571                           
 13572                           ;Test.c: 399: updateServoPosition(1150, 3);
 13573  0018F8  0E04               	movlw	4
 13574  0018FA  0100               	movlb	0	; () banked
 13575  0018FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13576  0018FE  0E7E               	movlw	126
 13577  001900  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13578  001902  0E00               	movlw	0
 13579  001904  0100               	movlb	0	; () banked
 13580  001906  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13581  001908  0E03               	movlw	3
 13582  00190A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13583  00190C  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13584                           
 13585                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 13586  001910  0E1F               	movlw	31
 13587  001912  0100               	movlb	0	; () banked
 13588  001914  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13589  001916  0E71               	movlw	113
 13590  001918  0100               	movlb	0	; () banked
 13591  00191A  6FAB               	movwf	??_BothServos& (0+255),b
 13592  00191C  0E1E               	movlw	30
 13593  00191E                     u8497:
 13594  00191E  2EE8               	decfsz	wreg,f,c
 13595  001920  D7FE               	bra	u8497
 13596  001922  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13597  001924  D7FC               	bra	u8497
 13598  001926  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13599  001928  D7FA               	bra	u8497
 13600  00192A  F000               	nop	
 13601                           
 13602                           ;Test.c: 402: TMR1ON = 0;
 13603  00192C  90CD               	bcf	4045,0,c	;volatile
 13604                           
 13605                           ;Test.c: 403: TMR3ON = 0;
 13606  00192E  90B1               	bcf	4017,0,c	;volatile
 13607                           
 13608                           ;Test.c: 404: (INTCONbits.GIE = 0);
 13609  001930  9EF2               	bcf	intcon,7,c	;volatile
 13610  001932  0012               	return		;funcret
 13611  001934                     __end_of_BothServos:
 13612                           	opt stack 0
 13613                           tblptru	equ	0xFF8
 13614                           tblptrh	equ	0xFF7
 13615                           tblptrl	equ	0xFF6
 13616                           tablat	equ	0xFF5
 13617                           prodh	equ	0xFF4
 13618                           prodl	equ	0xFF3
 13619                           intcon	equ	0xFF2
 13620                           intcon2	equ	0xFF1
 13621                           intcon3	equ	0xFF0
 13622                           postinc0	equ	0xFEE
 13623                           wreg	equ	0xFE8
 13624                           postdec1	equ	0xFE5
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           fsr2h	equ	0xFDA
 13630                           fsr2l	equ	0xFD9
 13631                           status	equ	0xFD8
 13632                           
 13633 ;; *************** function _initServos *****************
 13634 ;; Defined at:
 13635 ;;		line 279 in file "sort.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;		None
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      void 
 13642 ;; Registers used:
 13643 ;;		wreg, status,2, status,0, cstack
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;Total ram usage:        1 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    8
 13656 ;; This function calls:
 13657 ;;		_updateServoPosition
 13658 ;; This function is called by:
 13659 ;;		_Loading
 13660 ;;		_BothServos
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           	psect	text48
 13665  0040DC                     __ptext48:
 13666                           	opt stack 0
 13667  0040DC                     _initServos:
 13668                           	opt stack 20
 13669                           
 13670                           ;sort.c: 280: updateServoPosition(1200, 1);
 13671                           
 13672                           ;incstack = 0
 13673  0040DC  0E04               	movlw	4
 13674  0040DE  0100               	movlb	0	; () banked
 13675  0040E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13676  0040E2  0EB0               	movlw	176
 13677  0040E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13678  0040E6  0E00               	movlw	0
 13679  0040E8  0100               	movlb	0	; () banked
 13680  0040EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13681  0040EC  0E01               	movlw	1
 13682  0040EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13683  0040F0  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13684                           
 13685                           ;sort.c: 281: updateServoPosition(1150, 3);
 13686  0040F4  0E04               	movlw	4
 13687  0040F6  0100               	movlb	0	; () banked
 13688  0040F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13689  0040FA  0E7E               	movlw	126
 13690  0040FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13691  0040FE  0E00               	movlw	0
 13692  004100  0100               	movlb	0	; () banked
 13693  004102  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13694  004104  0E03               	movlw	3
 13695  004106  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13696  004108  ECD4  F01E         	call	_updateServoPosition	;wreg free
 13697                           
 13698                           ;sort.c: 282: TMR1ON = 1;
 13699  00410C  80CD               	bsf	4045,0,c	;volatile
 13700                           
 13701                           ;sort.c: 283: was_low_1 = 0;
 13702  00410E  0E00               	movlw	0
 13703  004110  6E7A               	movwf	_was_low_1+1,c	;volatile
 13704  004112  0E00               	movlw	0
 13705  004114  6E79               	movwf	_was_low_1,c	;volatile
 13706                           
 13707                           ;sort.c: 284: _delay((unsigned long)((5)*(32000000/4000.0)));
 13708  004116  0E34               	movlw	52
 13709  004118  0100               	movlb	0	; () banked
 13710  00411A  6F88               	movwf	??_initServos& (0+255),b
 13711  00411C  0EF1               	movlw	241
 13712  00411E                     u8507:
 13713  00411E  2EE8               	decfsz	wreg,f,c
 13714  004120  D7FE               	bra	u8507
 13715  004122  2F88               	decfsz	??_initServos& (0+255),f,b
 13716  004124  D7FC               	bra	u8507
 13717  004126  D000               	nop2	
 13718                           
 13719                           ;sort.c: 285: TMR3ON = 1;
 13720  004128  80B1               	bsf	4017,0,c	;volatile
 13721                           
 13722                           ;sort.c: 286: was_low_3 = 0;
 13723  00412A  0E00               	movlw	0
 13724  00412C  6E7C               	movwf	_was_low_3+1,c	;volatile
 13725  00412E  0E00               	movlw	0
 13726  004130  6E7B               	movwf	_was_low_3,c	;volatile
 13727                           
 13728                           ;sort.c: 288: LATCbits.LATC0 = 1;
 13729  004132  808B               	bsf	3979,0,c	;volatile
 13730  004134  0012               	return		;funcret
 13731  004136                     __end_of_initServos:
 13732                           	opt stack 0
 13733                           tblptru	equ	0xFF8
 13734                           tblptrh	equ	0xFF7
 13735                           tblptrl	equ	0xFF6
 13736                           tablat	equ	0xFF5
 13737                           prodh	equ	0xFF4
 13738                           prodl	equ	0xFF3
 13739                           intcon	equ	0xFF2
 13740                           intcon2	equ	0xFF1
 13741                           intcon3	equ	0xFF0
 13742                           postinc0	equ	0xFEE
 13743                           wreg	equ	0xFE8
 13744                           postdec1	equ	0xFE5
 13745                           fsr1l	equ	0xFE1
 13746                           indf2	equ	0xFDF
 13747                           postinc2	equ	0xFDE
 13748                           postdec2	equ	0xFDD
 13749                           fsr2h	equ	0xFDA
 13750                           fsr2l	equ	0xFD9
 13751                           status	equ	0xFD8
 13752                           
 13753 ;; *************** function _updateServoPosition *****************
 13754 ;; Defined at:
 13755 ;;		line 340 in file "sort.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;  time_us         2    0[BANK0 ] int 
 13758 ;;  timer           2    2[BANK0 ] int 
 13759 ;; Auto vars:     Size  Location     Type
 13760 ;;  my_time         2    6[BANK0 ] unsigned int 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      void 
 13763 ;; Registers used:
 13764 ;;		wreg, status,2, status,0
 13765 ;; Tracked objects:
 13766 ;;		On entry : 0/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13774 ;;Total ram usage:        8 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    7
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_Distribution
 13781 ;;		_initServos
 13782 ;;		_actuatorTest
 13783 ;;		_BothServos
 13784 ;; This function uses a non-reentrant model
 13785 ;;
 13786                           
 13787                           	psect	text49
 13788  003DA8                     __ptext49:
 13789                           	opt stack 0
 13790  003DA8                     _updateServoPosition:
 13791                           	opt stack 20
 13792                           
 13793                           ;sort.c: 341: unsigned int my_time = 65535 - time_us;
 13794                           
 13795                           ;incstack = 0
 13796  003DA8  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 13797  003DAC  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 13798  003DB0  0100               	movlb	0	; () banked
 13799  003DB2  1F84               	comf	??_updateServoPosition& (0+255),f,b
 13800  003DB4  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 13801  003DB6  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 13802  003DB8  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 13803  003DBA  0EFF               	movlw	255
 13804  003DBC  0100               	movlb	0	; () banked
 13805  003DBE  2584               	addwf	??_updateServoPosition& (0+255),w,b
 13806  003DC0  0100               	movlb	0	; () banked
 13807  003DC2  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 13808  003DC4  0EFF               	movlw	255
 13809  003DC6  0100               	movlb	0	; () banked
 13810  003DC8  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 13811  003DCA  0100               	movlb	0	; () banked
 13812  003DCC  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 13813                           
 13814                           ;sort.c: 342: switch(timer){
 13815  003DCE  D015               	goto	l5711
 13816  003DD0                     l5709:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;sort.c: 344: servoTimes[0] = my_time >> 8;
 13820  003DD0  0100               	movlb	0	; () banked
 13821  003DD2  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13822  003DD4  0101               	movlb	1	; () banked
 13823  003DD6  6F1C               	movwf	_servoTimes& (0+255),b
 13824  003DD8  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 13825                           
 13826                           ;sort.c: 345: servoTimes[1] = my_time & 0xFF;
 13827  003DDA  0100               	movlb	0	; () banked
 13828  003DDC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13829  003DDE  0101               	movlb	1	; () banked
 13830  003DE0  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 13831  003DE2  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 13832  003DE4                     l798:
 13833                           
 13834                           ;sort.c: 347: servoTimes[2] = my_time >> 8;
 13835  003DE4  0100               	movlb	0	; () banked
 13836  003DE6  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13837  003DE8  0101               	movlb	1	; () banked
 13838  003DEA  6F20               	movwf	(_servoTimes+4)& (0+255),b
 13839  003DEC  6B21               	clrf	(_servoTimes+5)& (0+255),b
 13840                           
 13841                           ;sort.c: 348: servoTimes[3] = my_time & 0xFF;
 13842  003DEE  0100               	movlb	0	; () banked
 13843  003DF0  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13844  003DF2  0101               	movlb	1	; () banked
 13845  003DF4  6F22               	movwf	(_servoTimes+6)& (0+255),b
 13846  003DF6  6B23               	clrf	(_servoTimes+7)& (0+255),b
 13847                           
 13848                           ;sort.c: 349: }
 13849  003DF8  0012               	return	
 13850  003DFA                     l5711:
 13851  003DFA  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 13852  003DFE  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 13853                           
 13854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13855                           ; Switch size 1, requested type "space"
 13856                           ; Number of cases is 1, Range of values is 0 to 0
 13857                           ; switch strategies available:
 13858                           ; Name         Instructions Cycles
 13859                           ; simple_byte            4     3 (average)
 13860                           ;	Chosen strategy is simple_byte
 13861  003E02  0100               	movlb	0	; () banked
 13862  003E04  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 13863  003E06  0A00               	xorlw	0	; case 0
 13864  003E08  A4D8               	btfss	status,2,c
 13865  003E0A  0012               	return	
 13866                           
 13867                           ; BSR set to: 0
 13868                           ; Switch size 1, requested type "space"
 13869                           ; Number of cases is 2, Range of values is 1 to 3
 13870                           ; switch strategies available:
 13871                           ; Name         Instructions Cycles
 13872                           ; simple_byte            7     4 (average)
 13873                           ;	Chosen strategy is simple_byte
 13874  003E0C  0100               	movlb	0	; () banked
 13875  003E0E  5184               	movf	??_updateServoPosition& (0+255),w,b
 13876  003E10  0A01               	xorlw	1	; case 1
 13877  003E12  B4D8               	btfsc	status,2,c
 13878  003E14  D7DD               	goto	l5709
 13879  003E16  0A02               	xorlw	2	; case 3
 13880  003E18  A4D8               	btfss	status,2,c
 13881  003E1A  0012               	return	
 13882  003E1C  D7E3               	goto	l798
 13883  003E1E                     __end_of_updateServoPosition:
 13884                           	opt stack 0
 13885                           tblptru	equ	0xFF8
 13886                           tblptrh	equ	0xFF7
 13887                           tblptrl	equ	0xFF6
 13888                           tablat	equ	0xFF5
 13889                           prodh	equ	0xFF4
 13890                           prodl	equ	0xFF3
 13891                           intcon	equ	0xFF2
 13892                           intcon2	equ	0xFF1
 13893                           intcon3	equ	0xFF0
 13894                           postinc0	equ	0xFEE
 13895                           wreg	equ	0xFE8
 13896                           postdec1	equ	0xFE5
 13897                           fsr1l	equ	0xFE1
 13898                           indf2	equ	0xFDF
 13899                           postinc2	equ	0xFDE
 13900                           postdec2	equ	0xFDD
 13901                           fsr2h	equ	0xFDA
 13902                           fsr2l	equ	0xFD9
 13903                           status	equ	0xFD8
 13904                           
 13905 ;; *************** function _BlockerTest *****************
 13906 ;; Defined at:
 13907 ;;		line 562 in file "Test.c"
 13908 ;; Parameters:    Size  Location     Type
 13909 ;;		None
 13910 ;; Auto vars:     Size  Location     Type
 13911 ;;  i               2   44[BANK0 ] int 
 13912 ;;  flag            2   46[BANK0 ] int 
 13913 ;; Return value:  Size  Location     Type
 13914 ;;                  1    wreg      void 
 13915 ;; Registers used:
 13916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13917 ;; Tracked objects:
 13918 ;;		On entry : 0/0
 13919 ;;		On exit  : 0/0
 13920 ;;		Unchanged: 0/0
 13921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13923 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13925 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13926 ;;Total ram usage:        5 bytes
 13927 ;; Hardware stack levels used:    1
 13928 ;; Hardware stack levels required when called:   10
 13929 ;; This function calls:
 13930 ;;		_lcdInst
 13931 ;;		_printf
 13932 ;; This function is called by:
 13933 ;;		_Test
 13934 ;; This function uses a non-reentrant model
 13935 ;;
 13936                           
 13937                           	psect	text50
 13938  003648                     __ptext50:
 13939                           	opt stack 0
 13940  003648                     _BlockerTest:
 13941                           	opt stack 19
 13942                           
 13943                           ;Test.c: 563: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13944                           
 13945                           ;incstack = 0
 13946  003648  0E01               	movlw	1
 13947  00364A  EC9C  F024         	call	_lcdInst
 13948  00364E  0E68               	movlw	104
 13949  003650  0100               	movlb	0	; () banked
 13950  003652  6FAB               	movwf	??_BlockerTest& (0+255),b
 13951  003654  0EE4               	movlw	228
 13952  003656                     u8517:
 13953  003656  2EE8               	decfsz	wreg,f,c
 13954  003658  D7FE               	bra	u8517
 13955  00365A  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 13956  00365C  D7FC               	bra	u8517
 13957  00365E  F000               	nop	
 13958  003660  0E80               	movlw	128
 13959  003662  EC9C  F024         	call	_lcdInst
 13960                           
 13961                           ;Test.c: 564: printf("D WILL RETURN    ");
 13962  003666  0E49               	movlw	low STR_111
 13963  003668  0100               	movlb	0	; () banked
 13964  00366A  6F8E               	movwf	printf@f& (0+255),b
 13965  00366C  0EFB               	movlw	high STR_111
 13966  00366E  0100               	movlb	0	; () banked
 13967  003670  6F8F               	movwf	(printf@f+1)& (0+255),b
 13968  003672  ECB8  F008         	call	_printf	;wreg free
 13969                           
 13970                           ;Test.c: 565: lcdInst(0b11000000);;
 13971  003676  0EC0               	movlw	192
 13972  003678  EC9C  F024         	call	_lcdInst
 13973                           
 13974                           ;Test.c: 566: printf("OTHER TOGGLES CAM");
 13975  00367C  0E7F               	movlw	low STR_119
 13976  00367E  0100               	movlb	0	; () banked
 13977  003680  6F8E               	movwf	printf@f& (0+255),b
 13978  003682  0EFB               	movlw	high STR_119
 13979  003684  0100               	movlb	0	; () banked
 13980  003686  6F8F               	movwf	(printf@f+1)& (0+255),b
 13981  003688  ECB8  F008         	call	_printf	;wreg free
 13982                           
 13983                           ;Test.c: 567: int flag = 1;
 13984  00368C  0E00               	movlw	0
 13985  00368E  0100               	movlb	0	; () banked
 13986  003690  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 13987  003692  0E01               	movlw	1
 13988  003694  6FAE               	movwf	BlockerTest@flag& (0+255),b
 13989  003696                     l1253:
 13990  003696  A281               	btfss	3969,1,c	;volatile
 13991  003698  D7FE               	goto	l1253
 13992                           
 13993                           ;Test.c: 570: if(PORTB >> 4 == 0b1111){
 13994  00369A  3881               	swapf	3969,w,c	;volatile
 13995  00369C  0B0F               	andlw	15
 13996  00369E  0A0F               	xorlw	15
 13997  0036A0  B4D8               	btfsc	status,2,c
 13998  0036A2  0012               	return	
 13999                           
 14000                           ;Test.c: 573: else{
 14001                           ;Test.c: 574: if(flag){
 14002                           
 14003                           ;Test.c: 572: }
 14004                           
 14005                           ;Test.c: 571: break;
 14006  0036A4  0100               	movlb	0	; () banked
 14007  0036A6  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14008  0036A8  0100               	movlb	0	; () banked
 14009  0036AA  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14010  0036AC  B4D8               	btfsc	status,2,c
 14011  0036AE  D007               	goto	l7405
 14012                           
 14013                           ; BSR set to: 0
 14014                           ;Test.c: 575: LATCbits.LATC0 = 1;
 14015  0036B0  808B               	bsf	3979,0,c	;volatile
 14016  0036B2  D023               	goto	l7417
 14017  0036B4                     u6011:
 14018  0036B4  0E01               	movlw	1
 14019  0036B6                     u6020:
 14020  0036B6  0100               	movlb	0	; () banked
 14021  0036B8  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14022  0036BA  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14023                           
 14024                           ;Test.c: 577: }
 14025  0036BC  D026               	goto	l1263
 14026  0036BE                     l7405:
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;Test.c: 578: else{
 14030                           ;Test.c: 579: for(int i=0;i<10000;i++)
 14031  0036BE  0E00               	movlw	0
 14032  0036C0  0100               	movlb	0	; () banked
 14033  0036C2  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14034  0036C4  0E00               	movlw	0
 14035  0036C6  6FAC               	movwf	BlockerTest@i& (0+255),b
 14036  0036C8                     l7407:
 14037                           
 14038                           ; BSR set to: 0
 14039  0036C8  0100               	movlb	0	; () banked
 14040  0036CA  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14041  0036CC  D008               	goto	l1261
 14042  0036CE  0E10               	movlw	16
 14043  0036D0  0100               	movlb	0	; () banked
 14044  0036D2  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14045  0036D4  0E27               	movlw	39
 14046  0036D6  0100               	movlb	0	; () banked
 14047  0036D8  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14048  0036DA  B0D8               	btfsc	status,0,c
 14049  0036DC  D00D               	goto	l1262
 14050  0036DE                     l1261:
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;Test.c: 580: {
 14054                           ;Test.c: 581: LATCbits.LATC0 = 1;
 14055  0036DE  808B               	bsf	3979,0,c	;volatile
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;Test.c: 582: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14059  0036E0  0E1A               	movlw	26
 14060  0036E2                     u8527:
 14061  0036E2  2EE8               	decfsz	wreg,f,c
 14062  0036E4  D7FE               	bra	u8527
 14063  0036E6  D000               	nop2	
 14064                           
 14065                           ;Test.c: 583: LATCbits.LATC0 = 0;
 14066  0036E8  908B               	bcf	3979,0,c	;volatile
 14067                           
 14068                           ;Test.c: 584: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14069  0036EA  0EF0               	movlw	240
 14070  0036EC                     u8537:
 14071  0036EC  2EE8               	decfsz	wreg,f,c
 14072  0036EE  D7FE               	bra	u8537
 14073  0036F0  0100               	movlb	0	; () banked
 14074  0036F2  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14075  0036F4  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14076  0036F6  D7E8               	goto	l7407
 14077  0036F8                     l1262:
 14078                           
 14079                           ; BSR set to: 0
 14080                           ;Test.c: 585: }
 14081                           ;Test.c: 586: LATCbits.LATC0 = 0;
 14082  0036F8  908B               	bcf	3979,0,c	;volatile
 14083  0036FA                     l7417:
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;Test.c: 587: flag = !flag;
 14087  0036FA  0100               	movlb	0	; () banked
 14088  0036FC  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14089  0036FE  0100               	movlb	0	; () banked
 14090  003700  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14091  003702  B4D8               	btfsc	status,2,c
 14092  003704  D7D7               	goto	u6011
 14093  003706  0E00               	movlw	0
 14094  003708  D7D6               	goto	u6020
 14095  00370A                     l1263:
 14096  00370A  A281               	btfss	3969,1,c	;volatile
 14097  00370C  D7C4               	goto	l1253
 14098  00370E  D7FD               	goto	l1263
 14099  003710                     __end_of_BlockerTest:
 14100                           	opt stack 0
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           intcon2	equ	0xFF1
 14109                           intcon3	equ	0xFF0
 14110                           postinc0	equ	0xFEE
 14111                           wreg	equ	0xFE8
 14112                           postdec1	equ	0xFE5
 14113                           fsr1l	equ	0xFE1
 14114                           indf2	equ	0xFDF
 14115                           postinc2	equ	0xFDE
 14116                           postdec2	equ	0xFDD
 14117                           fsr2h	equ	0xFDA
 14118                           fsr2l	equ	0xFD9
 14119                           status	equ	0xFD8
 14120                           
 14121 ;; *************** function _printf *****************
 14122 ;; Defined at:
 14123 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14126 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14127 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14128 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14129 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14130 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14131 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14132 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14133 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14134 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14135 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14136 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14137 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14138 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14139 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14140 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14141 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14142 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14143 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14144 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14145 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14146 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14147 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14148 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14149 ;;		 -> STR_2(14), STR_1(18), 
 14150 ;; Auto vars:     Size  Location     Type
 14151 ;;  tmpval          4    0        struct .
 14152 ;;  width           2   41[BANK0 ] int 
 14153 ;;  val             2   37[BANK0 ] unsigned int 
 14154 ;;  len             2   35[BANK0 ] unsigned int 
 14155 ;;  ap              2   33[BANK0 ] PTR void [1]
 14156 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14157 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14158 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14159 ;;  c               1   40[BANK0 ] char 
 14160 ;;  flag            1   39[BANK0 ] unsigned char 
 14161 ;;  prec            1   30[BANK0 ] char 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  2   14[BANK0 ] int 
 14164 ;; Registers used:
 14165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14171 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;Total ram usage:       29 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    9
 14178 ;; This function calls:
 14179 ;;		___lwdiv
 14180 ;;		___lwmod
 14181 ;;		___wmul
 14182 ;;		_isdigit
 14183 ;;		_putch
 14184 ;; This function is called by:
 14185 ;;		_UI
 14186 ;;		_change_state_to_menu_start
 14187 ;;		_change_state_to_menu_12
 14188 ;;		_change_state_to_menu_22
 14189 ;;		_printRTC
 14190 ;;		_EEPROM_write
 14191 ;;		_Test
 14192 ;;		_algorithmTest
 14193 ;;		_sensorTest
 14194 ;;		_actuatorTest
 14195 ;;		_BothServos
 14196 ;;		_PortTestA5
 14197 ;;		_PusherTest
 14198 ;;		_SpeedTest
 14199 ;;		_BlockerTest
 14200 ;;		_ToggleTestA5
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           	psect	text51
 14205  001170                     __ptext51:
 14206                           	opt stack 0
 14207  001170                     _printf:
 14208                           	opt stack 18
 14209                           
 14210                           ;doprnt.c: 466: va_list ap;
 14211                           ;doprnt.c: 499: signed char c;
 14212                           ;doprnt.c: 501: int width;
 14213                           ;doprnt.c: 506: signed char prec;
 14214                           ;doprnt.c: 508: unsigned char flag;
 14215                           ;doprnt.c: 523: union {
 14216                           ;doprnt.c: 524: unsigned long vd;
 14217                           ;doprnt.c: 525: double integ;
 14218                           ;doprnt.c: 526: } tmpval;
 14219                           ;doprnt.c: 528: unsigned int val;
 14220                           ;doprnt.c: 529: unsigned len;
 14221                           ;doprnt.c: 530: const char * cp;
 14222                           ;doprnt.c: 533: *ap = __va_start();
 14223                           
 14224                           ;incstack = 0
 14225  001170  0E90               	movlw	low (?_printf+2)
 14226  001172  0100               	movlb	0	; () banked
 14227  001174  6FA1               	movwf	printf@ap& (0+255),b
 14228  001176  0E00               	movlw	high (?_printf+2)
 14229  001178  0100               	movlb	0	; () banked
 14230  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14231                           
 14232                           ;doprnt.c: 536: while(c = *f++) {
 14233  00117C  D205               	goto	l5669
 14234  00117E                     l5539:
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;doprnt.c: 538: if(c != '%')
 14238  00117E  0E25               	movlw	37
 14239  001180  0100               	movlb	0	; () banked
 14240  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14241  001184  B4D8               	btfsc	status,2,c
 14242  001186  D005               	goto	l5543
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;doprnt.c: 540: {
 14246                           ;doprnt.c: 541: (putch(c) );
 14247  001188  0100               	movlb	0	; () banked
 14248  00118A  51A8               	movf	printf@c& (0+255),w,b
 14249  00118C  EC94  F024         	call	_putch
 14250                           
 14251                           ;doprnt.c: 542: continue;
 14252  001190  D1FB               	goto	l5669
 14253  001192                     l5543:
 14254                           
 14255                           ;doprnt.c: 543: }
 14256                           ;doprnt.c: 546: width = 0;
 14257  001192  0E00               	movlw	0
 14258  001194  0100               	movlb	0	; () banked
 14259  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14260  001198  0E00               	movlw	0
 14261  00119A  6FA9               	movwf	printf@width& (0+255),b
 14262                           
 14263                           ;doprnt.c: 548: flag = 0;
 14264  00119C  0E00               	movlw	0
 14265  00119E  0100               	movlb	0	; () banked
 14266  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14267                           
 14268                           ; BSR set to: 0
 14269                           ;doprnt.c: 551: switch(*f) {
 14270                           
 14271                           ;doprnt.c: 550: for(;;) {
 14272  0011A2  D005               	goto	l5549
 14273  0011A4                     l5545:
 14274                           
 14275                           ;doprnt.c: 580: flag |= 0x04;
 14276  0011A4  0100               	movlb	0	; () banked
 14277  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14278                           
 14279                           ;doprnt.c: 581: f++;
 14280  0011A8  0100               	movlb	0	; () banked
 14281  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14282  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14283  0011AE                     l5549:
 14284  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14285  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14286  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14287  0011B6  6AF8               	clrf	tblptru,c
 14288  0011B8                     	endif
 14289  0011B8                     	if	0	;tblptru may be non-zero
 14290  0011B8                     	endif
 14291  0011B8  0008               	tblrd		*
 14292  0011BA  50F5               	movf	tablat,w,c
 14293                           
 14294                           ; Switch size 1, requested type "space"
 14295                           ; Number of cases is 1, Range of values is 48 to 48
 14296                           ; switch strategies available:
 14297                           ; Name         Instructions Cycles
 14298                           ; simple_byte            4     3 (average)
 14299                           ;	Chosen strategy is simple_byte
 14300  0011BC  0A30               	xorlw	48	; case 48
 14301  0011BE  B4D8               	btfsc	status,2,c
 14302  0011C0  D7F1               	goto	l5545
 14303                           
 14304                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14305                           
 14306                           ;doprnt.c: 586: }
 14307                           
 14308                           ;doprnt.c: 585: break;
 14309  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14310  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14311  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14312  0011CA  6AF8               	clrf	tblptru,c
 14313  0011CC                     	endif
 14314  0011CC                     	if	0	;tblptru may be non-zero
 14315  0011CC                     	endif
 14316  0011CC  0008               	tblrd		*
 14317  0011CE  50F5               	movf	tablat,w,c
 14318  0011D0  ECB9  F023         	call	_isdigit
 14319  0011D4  A0D8               	btfss	status,0,c
 14320  0011D6  D0D2               	goto	l5597
 14321                           
 14322                           ;doprnt.c: 598: width = 0;
 14323  0011D8  0E00               	movlw	0
 14324  0011DA  0100               	movlb	0	; () banked
 14325  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14326  0011DE  0E00               	movlw	0
 14327  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14328  0011E2                     l5555:
 14329                           
 14330                           ;doprnt.c: 600: width *= 10;
 14331  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14332  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14333  0011EA  0E00               	movlw	0
 14334  0011EC  0100               	movlb	0	; () banked
 14335  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14336  0011F0  0E0A               	movlw	10
 14337  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14338  0011F4  EC23  F022         	call	___wmul	;wreg free
 14339  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14340  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14341                           
 14342                           ;doprnt.c: 601: width += *f++ - '0';
 14343  001200  0ED0               	movlw	208
 14344  001202  0100               	movlb	0	; () banked
 14345  001204  6F9A               	movwf	??_printf& (0+255),b
 14346  001206  0EFF               	movlw	255
 14347  001208  0100               	movlb	0	; () banked
 14348  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14349  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14350  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14351  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14352  001214  6AF8               	clrf	tblptru,c
 14353  001216                     	endif
 14354  001216                     	if	0	;tblptru may be non-zero
 14355  001216                     	endif
 14356  001216  0008               	tblrd		*
 14357  001218  50F5               	movf	tablat,w,c
 14358  00121A  0100               	movlb	0	; () banked
 14359  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14360  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14361  001220  0100               	movlb	0	; () banked
 14362  001222  519A               	movf	??_printf& (0+255),w,b
 14363  001224  0100               	movlb	0	; () banked
 14364  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14365  001228  0100               	movlb	0	; () banked
 14366  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14367  00122C  0100               	movlb	0	; () banked
 14368  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14369  001230  0100               	movlb	0	; () banked
 14370  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14371  001234  0100               	movlb	0	; () banked
 14372  001236  27A9               	addwf	printf@width& (0+255),f,b
 14373  001238  0100               	movlb	0	; () banked
 14374  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14375  00123C  0100               	movlb	0	; () banked
 14376  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14377                           
 14378                           ; BSR set to: 0
 14379  001240  0100               	movlb	0	; () banked
 14380  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14381  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14385  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14386  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14387  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14388  00124E  6AF8               	clrf	tblptru,c
 14389  001250                     	endif
 14390  001250                     	if	0	;tblptru may be non-zero
 14391  001250                     	endif
 14392  001250  0008               	tblrd		*
 14393  001252  50F5               	movf	tablat,w,c
 14394  001254  ECB9  F023         	call	_isdigit
 14395  001258  A0D8               	btfss	status,0,c
 14396  00125A  D090               	goto	l5597
 14397  00125C  D7C2               	goto	l5555
 14398  00125E                     l5563:
 14399                           
 14400                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14401  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14402  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14403  001266  CFDE F09F          	movff	postinc2,printf@cp
 14404  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14405  00126E  0E02               	movlw	2
 14406  001270  0100               	movlb	0	; () banked
 14407  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14408  001274  0E00               	movlw	0
 14409  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;doprnt.c: 740: if(!cp)
 14413  001278  0100               	movlb	0	; () banked
 14414  00127A  519F               	movf	printf@cp& (0+255),w,b
 14415  00127C  0100               	movlb	0	; () banked
 14416  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14417  001280  A4D8               	btfss	status,2,c
 14418  001282  D006               	goto	l5571
 14419                           
 14420                           ; BSR set to: 0
 14421                           ;doprnt.c: 741: cp = "(null)";
 14422  001284  0EB6               	movlw	low STR_120
 14423  001286  0100               	movlb	0	; () banked
 14424  001288  6F9F               	movwf	printf@cp& (0+255),b
 14425  00128A  0EFF               	movlw	high STR_120
 14426  00128C  0100               	movlb	0	; () banked
 14427  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14428  001290                     l5571:
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;doprnt.c: 745: len = 0;
 14432  001290  0E00               	movlw	0
 14433  001292  0100               	movlb	0	; () banked
 14434  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14435  001296  0E00               	movlw	0
 14436  001298  6FA3               	movwf	printf@len& (0+255),b
 14437                           
 14438                           ;doprnt.c: 746: while(cp[len])
 14439  00129A  D003               	goto	l5575
 14440  00129C                     l5573:
 14441                           
 14442                           ;doprnt.c: 747: len++;
 14443  00129C  0100               	movlb	0	; () banked
 14444  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14445  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14446  0012A2                     l5575:
 14447                           
 14448                           ; BSR set to: 0
 14449  0012A2  0100               	movlb	0	; () banked
 14450  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14451  0012A6  0100               	movlb	0	; () banked
 14452  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14453  0012AA  0100               	movlb	0	; () banked
 14454  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14455  0012AE  0100               	movlb	0	; () banked
 14456  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14457  0012B2  0100               	movlb	0	; () banked
 14458  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14459  0012B6  0100               	movlb	0	; () banked
 14460  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14461  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14462  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14463  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14464  0012C4  6EF8               	movwf	tblptru,c
 14465  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14466  0012C8  64F7               	cpfsgt	tblptrh,c
 14467  0012CA  D003               	bra	u3997
 14468  0012CC  0008               	tblrd		*
 14469  0012CE  50F5               	movf	tablat,w,c
 14470  0012D0  D005               	bra	u3990
 14471  0012D2                     u3997:
 14472  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14473  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14474  0012DA  50EF               	movf	indf0,w,c
 14475  0012DC                     u3990:
 14476  0012DC  0900               	iorlw	0
 14477  0012DE  A4D8               	btfss	status,2,c
 14478  0012E0  D7DD               	goto	l5573
 14479                           
 14480                           ;doprnt.c: 757: if(width > len)
 14481  0012E2  0100               	movlb	0	; () banked
 14482  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14483  0012E6  0100               	movlb	0	; () banked
 14484  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14485  0012EA  0100               	movlb	0	; () banked
 14486  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14487  0012EE  0100               	movlb	0	; () banked
 14488  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14489  0012F2  B0D8               	btfsc	status,0,c
 14490  0012F4  D009               	goto	l5581
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;doprnt.c: 758: width -= len;
 14494  0012F6  0100               	movlb	0	; () banked
 14495  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14496  0012FA  0100               	movlb	0	; () banked
 14497  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14498  0012FE  0100               	movlb	0	; () banked
 14499  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14500  001302  0100               	movlb	0	; () banked
 14501  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14502  001306  D009               	goto	l5585
 14503  001308                     l5581:
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;doprnt.c: 759: else
 14507                           ;doprnt.c: 760: width = 0;
 14508  001308  0E00               	movlw	0
 14509  00130A  0100               	movlb	0	; () banked
 14510  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14511  00130E  0E00               	movlw	0
 14512  001310  6FA9               	movwf	printf@width& (0+255),b
 14513                           
 14514                           ; BSR set to: 0
 14515                           ;doprnt.c: 764: while(width--)
 14516  001312  D003               	goto	l5585
 14517  001314                     l5583:
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;doprnt.c: 765: (putch(' ') );
 14521  001314  0E20               	movlw	32
 14522  001316  EC94  F024         	call	_putch
 14523  00131A                     l5585:
 14524  00131A  0100               	movlb	0	; () banked
 14525  00131C  07A9               	decf	printf@width& (0+255),f,b
 14526  00131E  A0D8               	btfss	status,0,c
 14527  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14528  001322  0100               	movlb	0	; () banked
 14529  001324  29A9               	incf	printf@width& (0+255),w,b
 14530  001326  E1F6               	bnz	l5583
 14531  001328  0100               	movlb	0	; () banked
 14532  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14533  00132C  B4D8               	btfsc	status,2,c
 14534  00132E  D017               	goto	l5591
 14535  001330  D7F1               	goto	l5583
 14536  001332                     l5587:
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;doprnt.c: 768: (putch(*cp++) );
 14540  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14541  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14542  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14543  00133C  6EF8               	movwf	tblptru,c
 14544  00133E  0E0F               	movlw	(high __ramtop+-1)
 14545  001340  64F7               	cpfsgt	tblptrh,c
 14546  001342  D003               	bra	u4037
 14547  001344  0008               	tblrd		*
 14548  001346  50F5               	movf	tablat,w,c
 14549  001348  D005               	bra	u4030
 14550  00134A                     u4037:
 14551  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14552  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14553  001352  50EF               	movf	indf0,w,c
 14554  001354                     u4030:
 14555  001354  EC94  F024         	call	_putch
 14556  001358  0100               	movlb	0	; () banked
 14557  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14558  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14559  00135E                     l5591:
 14560                           
 14561                           ; BSR set to: 0
 14562  00135E  0100               	movlb	0	; () banked
 14563  001360  07A3               	decf	printf@len& (0+255),f,b
 14564  001362  A0D8               	btfss	status,0,c
 14565  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14566  001366  0100               	movlb	0	; () banked
 14567  001368  29A3               	incf	printf@len& (0+255),w,b
 14568  00136A  E1E3               	bnz	l5587
 14569  00136C  0100               	movlb	0	; () banked
 14570  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14571  001370  B4D8               	btfsc	status,2,c
 14572  001372  D10A               	goto	l5669
 14573  001374  D7DE               	goto	l5587
 14574  001376                     l5593:
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;doprnt.c: 818: flag |= 0x40;
 14578  001376  0100               	movlb	0	; () banked
 14579  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14580                           
 14581                           ; BSR set to: 0
 14582                           ;doprnt.c: 822: }
 14583                           
 14584                           ;doprnt.c: 819: break;
 14585  00137A  D01D               	goto	l1297
 14586  00137C                     l5597:
 14587  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14588  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14589  001384  0100               	movlb	0	; () banked
 14590  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14591  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14592  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14593  00138A  6AF8               	clrf	tblptru,c
 14594  00138C                     	endif
 14595  00138C                     	if	0	;tblptru may be non-zero
 14596  00138C                     	endif
 14597  00138C  0008               	tblrd		*
 14598  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14599  001392  0100               	movlb	0	; () banked
 14600  001394  51A8               	movf	printf@c& (0+255),w,b
 14601                           
 14602                           ; Switch size 1, requested type "space"
 14603                           ; Number of cases is 5, Range of values is 0 to 117
 14604                           ; switch strategies available:
 14605                           ; Name         Instructions Cycles
 14606                           ; simple_byte           16     9 (average)
 14607                           ;	Chosen strategy is simple_byte
 14608  001396  0A00               	xorlw	0	; case 0
 14609  001398  B4D8               	btfsc	status,2,c
 14610  00139A  0012               	return	
 14611  00139C  0A64               	xorlw	100	; case 100
 14612  00139E  B4D8               	btfsc	status,2,c
 14613  0013A0  D00A               	goto	l1297
 14614  0013A2  0A0D               	xorlw	13	; case 105
 14615  0013A4  B4D8               	btfsc	status,2,c
 14616  0013A6  D007               	goto	l1297
 14617  0013A8  0A1A               	xorlw	26	; case 115
 14618  0013AA  B4D8               	btfsc	status,2,c
 14619  0013AC  D758               	goto	l5563
 14620  0013AE  0A06               	xorlw	6	; case 117
 14621  0013B0  B4D8               	btfsc	status,2,c
 14622  0013B2  D7E1               	goto	l5593
 14623  0013B4  D0E9               	goto	l5669
 14624  0013B6                     l1297:
 14625                           
 14626                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14627  0013B6  0100               	movlb	0	; () banked
 14628  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14629  0013BA  D019               	goto	l5609
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;doprnt.c: 1253: {
 14633                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14634  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14635  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14636  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14637  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14638                           
 14639                           ; BSR set to: 0
 14640  0013CC  0E02               	movlw	2
 14641  0013CE  0100               	movlb	0	; () banked
 14642  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14643  0013D2  0E00               	movlw	0
 14644  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14645                           
 14646                           ; BSR set to: 0
 14647                           ;doprnt.c: 1261: if((int)val < 0) {
 14648  0013D6  0100               	movlb	0	; () banked
 14649  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14650  0013DA  D016               	goto	l5613
 14651                           
 14652                           ; BSR set to: 0
 14653                           ;doprnt.c: 1262: flag |= 0x03;
 14654  0013DC  0E03               	movlw	3
 14655  0013DE  0100               	movlb	0	; () banked
 14656  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14657                           
 14658                           ; BSR set to: 0
 14659                           ;doprnt.c: 1263: val = -val;
 14660  0013E2  0100               	movlb	0	; () banked
 14661  0013E4  6DA5               	negf	printf@val& (0+255),b
 14662  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14663  0013E8  B0D8               	btfsc	status,0,c
 14664  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;doprnt.c: 1264: }
 14668                           ;doprnt.c: 1266: }
 14669  0013EC  D00D               	goto	l5613
 14670  0013EE                     l5609:
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;doprnt.c: 1268: else
 14674                           ;doprnt.c: 1273: {
 14675                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14676  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14677  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14678  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14679  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14680                           
 14681                           ; BSR set to: 0
 14682  0013FE  0E02               	movlw	2
 14683  001400  0100               	movlb	0	; () banked
 14684  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14685  001404  0E00               	movlw	0
 14686  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14687  001408                     l5613:
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;doprnt.c: 1287: }
 14691                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14692  001408  0E01               	movlw	1
 14693  00140A  0100               	movlb	0	; () banked
 14694  00140C  6FA8               	movwf	printf@c& (0+255),b
 14695  00140E                     l5615:
 14696                           
 14697                           ; BSR set to: 0
 14698  00140E  0E05               	movlw	5
 14699  001410  0100               	movlb	0	; () banked
 14700  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14701  001414  B4D8               	btfsc	status,2,c
 14702  001416  D019               	goto	l5627
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;doprnt.c: 1306: if(val < dpowers[c])
 14706                           
 14707                           ; BSR set to: 0
 14708                           
 14709                           ; BSR set to: 0
 14710  001418  0100               	movlb	0	; () banked
 14711  00141A  51A8               	movf	printf@c& (0+255),w,b
 14712  00141C  0D02               	mullw	2
 14713  00141E  0E12               	movlw	low _dpowers
 14714  001420  24F3               	addwf	prodl,w,c
 14715  001422  6EF6               	movwf	tblptrl,c
 14716  001424  0EFB               	movlw	high _dpowers
 14717  001426  20F4               	addwfc	prodh,w,c
 14718  001428  6EF7               	movwf	tblptrh,c
 14719  00142A                     	if	1	;There are 3 active tblptr bytes
 14720  00142A  6AF8               	clrf	tblptru,c
 14721  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14722  00142E  22F8               	addwfc	tblptru,f,c
 14723  001430                     	endif
 14724  001430  0009               	tblrd		*+
 14725  001432  50F5               	movf	tablat,w,c
 14726  001434  0100               	movlb	0	; () banked
 14727  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14728  001438  0009               	tblrd		*+
 14729  00143A  50F5               	movf	tablat,w,c
 14730  00143C  0100               	movlb	0	; () banked
 14731  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14732  001440  A0D8               	btfss	status,0,c
 14733  001442  D003               	goto	l5627
 14734                           
 14735                           ; BSR set to: 0
 14736                           
 14737                           ; BSR set to: 0
 14738                           
 14739                           ; BSR set to: 0
 14740                           ;doprnt.c: 1307: break;
 14741  001444  0100               	movlb	0	; () banked
 14742  001446  2BA8               	incf	printf@c& (0+255),f,b
 14743  001448  D7E2               	goto	l5615
 14744  00144A                     l5627:
 14745                           
 14746                           ; BSR set to: 0
 14747                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14748  00144A  0100               	movlb	0	; () banked
 14749  00144C  51A9               	movf	printf@width& (0+255),w,b
 14750  00144E  0100               	movlb	0	; () banked
 14751  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14752  001452  B4D8               	btfsc	status,2,c
 14753  001454  D00B               	goto	l5633
 14754                           
 14755                           ; BSR set to: 0
 14756  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14757  00145A  0E03               	movlw	3
 14758  00145C  0100               	movlb	0	; () banked
 14759  00145E  179A               	andwf	??_printf& (0+255),f,b
 14760  001460  B4D8               	btfsc	status,2,c
 14761  001462  D004               	goto	l5633
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;doprnt.c: 1346: width--;
 14765  001464  0100               	movlb	0	; () banked
 14766  001466  07A9               	decf	printf@width& (0+255),f,b
 14767  001468  A0D8               	btfss	status,0,c
 14768  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14769  00146C                     l5633:
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;doprnt.c: 1381: if(width > c)
 14773  00146C  0E80               	movlw	128
 14774  00146E  0100               	movlb	0	; () banked
 14775  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14776  001472  0E7F               	movlw	127
 14777  001474  0100               	movlb	0	; () banked
 14778  001476  6F9A               	movwf	??_printf& (0+255),b
 14779  001478  0100               	movlb	0	; () banked
 14780  00147A  51A9               	movf	printf@width& (0+255),w,b
 14781  00147C  0100               	movlb	0	; () banked
 14782  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14783  001480  0100               	movlb	0	; () banked
 14784  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14785  001484  0A80               	xorlw	128
 14786  001486  0100               	movlb	0	; () banked
 14787  001488  599A               	subwfb	??_printf& (0+255),w,b
 14788  00148A  B0D8               	btfsc	status,0,c
 14789  00148C  D00B               	goto	l5637
 14790                           
 14791                           ; BSR set to: 0
 14792                           ;doprnt.c: 1382: width -= c;
 14793  00148E  0100               	movlb	0	; () banked
 14794  001490  51A8               	movf	printf@c& (0+255),w,b
 14795  001492  0100               	movlb	0	; () banked
 14796  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14797  001496  0E00               	movlw	0
 14798  001498  0100               	movlb	0	; () banked
 14799  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14800  00149C  0EFF               	movlw	255
 14801  00149E  0100               	movlb	0	; () banked
 14802  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14803  0014A2  D005               	goto	l5639
 14804  0014A4                     l5637:
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;doprnt.c: 1383: else
 14808                           ;doprnt.c: 1384: width = 0;
 14809  0014A4  0E00               	movlw	0
 14810  0014A6  0100               	movlb	0	; () banked
 14811  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14812  0014AA  0E00               	movlw	0
 14813  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14814  0014AE                     l5639:
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;doprnt.c: 1387: if(flag & 0x04) {
 14818  0014AE  0100               	movlb	0	; () banked
 14819  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14820  0014B2  D018               	goto	l5651
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;doprnt.c: 1392: if(flag & 0x03)
 14824  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14825  0014B8  0E03               	movlw	3
 14826  0014BA  0100               	movlb	0	; () banked
 14827  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14828  0014BE  B4D8               	btfsc	status,2,c
 14829  0014C0  D003               	goto	l5645
 14830                           
 14831                           ; BSR set to: 0
 14832                           ;doprnt.c: 1393: (putch('-') );
 14833  0014C2  0E2D               	movlw	45
 14834  0014C4  EC94  F024         	call	_putch
 14835  0014C8                     l5645:
 14836                           
 14837                           ;doprnt.c: 1415: if(width)
 14838  0014C8  0100               	movlb	0	; () banked
 14839  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14840  0014CC  0100               	movlb	0	; () banked
 14841  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14842  0014D0  B4D8               	btfsc	status,2,c
 14843  0014D2  D025               	goto	l5661
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;doprnt.c: 1417: (putch('0') );
 14847                           
 14848                           ; BSR set to: 0
 14849                           
 14850                           ;doprnt.c: 1416: do
 14851  0014D4  0E30               	movlw	48
 14852  0014D6  EC94  F024         	call	_putch
 14853                           
 14854                           ;doprnt.c: 1418: while(--width);
 14855  0014DA  0100               	movlb	0	; () banked
 14856  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14857  0014DE  A0D8               	btfss	status,0,c
 14858  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14859  0014E2  D7F2               	goto	l5645
 14860  0014E4                     l5651:
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;doprnt.c: 1422: {
 14864                           ;doprnt.c: 1424: if(width
 14865                           ;doprnt.c: 1428: )
 14866  0014E4  0100               	movlb	0	; () banked
 14867  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14868  0014E8  0100               	movlb	0	; () banked
 14869  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14870  0014EC  B4D8               	btfsc	status,2,c
 14871  0014EE  D00D               	goto	l5657
 14872  0014F0                     l5653:
 14873                           
 14874                           ; BSR set to: 0
 14875                           ;doprnt.c: 1430: (putch(' ') );
 14876  0014F0  0E20               	movlw	32
 14877  0014F2  EC94  F024         	call	_putch
 14878                           
 14879                           ;doprnt.c: 1431: while(--width);
 14880  0014F6  0100               	movlb	0	; () banked
 14881  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14882  0014FA  A0D8               	btfss	status,0,c
 14883  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14884  0014FE  0100               	movlb	0	; () banked
 14885  001500  51A9               	movf	printf@width& (0+255),w,b
 14886  001502  0100               	movlb	0	; () banked
 14887  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14888  001506  A4D8               	btfss	status,2,c
 14889  001508  D7F3               	goto	l5653
 14890  00150A                     l5657:
 14891                           
 14892                           ; BSR set to: 0
 14893                           ;doprnt.c: 1438: if(flag & 0x03)
 14894  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 14895  00150E  0E03               	movlw	3
 14896  001510  0100               	movlb	0	; () banked
 14897  001512  179A               	andwf	??_printf& (0+255),f,b
 14898  001514  B4D8               	btfsc	status,2,c
 14899  001516  D003               	goto	l5661
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;doprnt.c: 1439: (putch('-') );
 14903  001518  0E2D               	movlw	45
 14904  00151A  EC94  F024         	call	_putch
 14905  00151E                     l5661:
 14906                           
 14907                           ;doprnt.c: 1469: }
 14908                           ;doprnt.c: 1472: prec = c;
 14909  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14910                           
 14911                           ;doprnt.c: 1474: while(prec--) {
 14912  001522  D02C               	goto	l5667
 14913  001524                     l5663:
 14914                           
 14915                           ;doprnt.c: 1478: {
 14916                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14917  001524  0100               	movlb	0	; () banked
 14918  001526  519E               	movf	printf@prec& (0+255),w,b
 14919  001528  0D02               	mullw	2
 14920  00152A  0E12               	movlw	low _dpowers
 14921  00152C  24F3               	addwf	prodl,w,c
 14922  00152E  6EF6               	movwf	tblptrl,c
 14923  001530  0EFB               	movlw	high _dpowers
 14924  001532  20F4               	addwfc	prodh,w,c
 14925  001534  6EF7               	movwf	tblptrh,c
 14926  001536                     	if	1	;There are 3 active tblptr bytes
 14927  001536  6AF8               	clrf	tblptru,c
 14928  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14929  00153A  22F8               	addwfc	tblptru,f,c
 14930  00153C                     	endif
 14931  00153C  0009               	tblrd		*+
 14932  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14933  001542  000A               	tblrd		*-
 14934  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14935  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14936  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14937  001550  EC98  F01E         	call	___lwdiv	;wreg free
 14938  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14939  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14940  00155C  0E00               	movlw	0
 14941  00155E  0100               	movlb	0	; () banked
 14942  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14943  001562  0E0A               	movlw	10
 14944  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14945  001566  ECB1  F01F         	call	___lwmod	;wreg free
 14946  00156A  0100               	movlb	0	; () banked
 14947  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14948  00156E  0F30               	addlw	48
 14949  001570  0100               	movlb	0	; () banked
 14950  001572  6FA8               	movwf	printf@c& (0+255),b
 14951                           
 14952                           ; BSR set to: 0
 14953                           ;doprnt.c: 1523: }
 14954                           ;doprnt.c: 1524: (putch(c) );
 14955  001574  0100               	movlb	0	; () banked
 14956  001576  51A8               	movf	printf@c& (0+255),w,b
 14957  001578  EC94  F024         	call	_putch
 14958  00157C                     l5667:
 14959  00157C  0100               	movlb	0	; () banked
 14960  00157E  079E               	decf	printf@prec& (0+255),f,b
 14961  001580  0100               	movlb	0	; () banked
 14962  001582  299E               	incf	printf@prec& (0+255),w,b
 14963  001584  A4D8               	btfss	status,2,c
 14964  001586  D7CE               	goto	l5663
 14965  001588                     l5669:
 14966  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14967  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14968  001590  0100               	movlb	0	; () banked
 14969  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14970  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14971  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14972  001596  6AF8               	clrf	tblptru,c
 14973  001598                     	endif
 14974  001598                     	if	0	;tblptru may be non-zero
 14975  001598                     	endif
 14976  001598  0008               	tblrd		*
 14977  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14978  00159E  0100               	movlb	0	; () banked
 14979  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14980  0015A2  B4D8               	btfsc	status,2,c
 14981  0015A4  0012               	return	
 14982  0015A6  D5EB               	goto	l5539
 14983  0015A8                     __end_of_printf:
 14984                           	opt stack 0
 14985                           tblptru	equ	0xFF8
 14986                           tblptrh	equ	0xFF7
 14987                           tblptrl	equ	0xFF6
 14988                           tablat	equ	0xFF5
 14989                           prodh	equ	0xFF4
 14990                           prodl	equ	0xFF3
 14991                           intcon	equ	0xFF2
 14992                           intcon2	equ	0xFF1
 14993                           intcon3	equ	0xFF0
 14994                           indf0	equ	0xFEF
 14995                           postinc0	equ	0xFEE
 14996                           fsr0h	equ	0xFEA
 14997                           fsr0l	equ	0xFE9
 14998                           wreg	equ	0xFE8
 14999                           postdec1	equ	0xFE5
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           fsr2h	equ	0xFDA
 15005                           fsr2l	equ	0xFD9
 15006                           status	equ	0xFD8
 15007                           
 15008 ;; *************** function _putch *****************
 15009 ;; Defined at:
 15010 ;;		line 20 in file "lcd.c"
 15011 ;; Parameters:    Size  Location     Type
 15012 ;;  data            1    wreg     unsigned char 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  data            1    2[BANK0 ] unsigned char 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;                  1    wreg      void 
 15017 ;; Registers used:
 15018 ;;		wreg, status,2, status,0, cstack
 15019 ;; Tracked objects:
 15020 ;;		On entry : 0/0
 15021 ;;		On exit  : 0/0
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;Total ram usage:        1 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    8
 15031 ;; This function calls:
 15032 ;;		_lcdNibble
 15033 ;; This function is called by:
 15034 ;;		_printf
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           	psect	text52
 15039  004928                     __ptext52:
 15040                           	opt stack 0
 15041  004928                     _putch:
 15042                           	opt stack 18
 15043                           
 15044                           ;incstack = 0
 15045                           ;putch@data stored from wreg
 15046  004928  0100               	movlb	0	; () banked
 15047  00492A  6F82               	movwf	putch@data& (0+255),b
 15048                           
 15049                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15050  00492C  848C               	bsf	3980,2,c	;volatile
 15051                           
 15052                           ;lcd.c: 22: lcdNibble(data);
 15053  00492E  0100               	movlb	0	; () banked
 15054  004930  5182               	movf	putch@data& (0+255),w,b
 15055  004932  EC7D  F01F         	call	_lcdNibble
 15056  004936  0012               	return		;funcret
 15057  004938                     __end_of_putch:
 15058                           	opt stack 0
 15059                           tblptru	equ	0xFF8
 15060                           tblptrh	equ	0xFF7
 15061                           tblptrl	equ	0xFF6
 15062                           tablat	equ	0xFF5
 15063                           prodh	equ	0xFF4
 15064                           prodl	equ	0xFF3
 15065                           intcon	equ	0xFF2
 15066                           intcon2	equ	0xFF1
 15067                           intcon3	equ	0xFF0
 15068                           indf0	equ	0xFEF
 15069                           postinc0	equ	0xFEE
 15070                           fsr0h	equ	0xFEA
 15071                           fsr0l	equ	0xFE9
 15072                           wreg	equ	0xFE8
 15073                           postdec1	equ	0xFE5
 15074                           fsr1l	equ	0xFE1
 15075                           indf2	equ	0xFDF
 15076                           postinc2	equ	0xFDE
 15077                           postdec2	equ	0xFDD
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8
 15081                           
 15082 ;; *************** function _isdigit *****************
 15083 ;; Defined at:
 15084 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;  c               1    wreg     unsigned char 
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;  c               1    2[BANK0 ] unsigned char 
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, status,2, status,0
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15099 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;Total ram usage:        3 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    7
 15105 ;; This function calls:
 15106 ;;		Nothing
 15107 ;; This function is called by:
 15108 ;;		_printf
 15109 ;; This function uses a non-reentrant model
 15110 ;;
 15111                           
 15112                           	psect	text53
 15113  004772                     __ptext53:
 15114                           	opt stack 0
 15115  004772                     _isdigit:
 15116                           	opt stack 19
 15117                           
 15118                           ;incstack = 0
 15119                           ;isdigit@c stored from wreg
 15120  004772  0100               	movlb	0	; () banked
 15121  004774  6F82               	movwf	isdigit@c& (0+255),b
 15122  004776  0E00               	movlw	0
 15123  004778  0100               	movlb	0	; () banked
 15124  00477A  6F81               	movwf	_isdigit$1957& (0+255),b
 15125                           
 15126                           ; BSR set to: 0
 15127  00477C  0E3A               	movlw	58
 15128  00477E  0100               	movlb	0	; () banked
 15129  004780  6182               	cpfslt	isdigit@c& (0+255),b
 15130  004782  D007               	goto	l5387
 15131                           
 15132                           ; BSR set to: 0
 15133  004784  0E2F               	movlw	47
 15134  004786  0100               	movlb	0	; () banked
 15135  004788  6582               	cpfsgt	isdigit@c& (0+255),b
 15136  00478A  D003               	goto	l5387
 15137                           
 15138                           ; BSR set to: 0
 15139  00478C  0E01               	movlw	1
 15140  00478E  0100               	movlb	0	; () banked
 15141  004790  6F81               	movwf	_isdigit$1957& (0+255),b
 15142  004792                     l5387:
 15143                           
 15144                           ; BSR set to: 0
 15145  004792  C081  F080         	movff	_isdigit$1957,??_isdigit
 15146  004796  0100               	movlb	0	; () banked
 15147  004798  3180               	rrcf	??_isdigit& (0+255),w,b
 15148  00479A  0012               	return	
 15149  00479C                     __end_of_isdigit:
 15150                           	opt stack 0
 15151                           tblptru	equ	0xFF8
 15152                           tblptrh	equ	0xFF7
 15153                           tblptrl	equ	0xFF6
 15154                           tablat	equ	0xFF5
 15155                           prodh	equ	0xFF4
 15156                           prodl	equ	0xFF3
 15157                           intcon	equ	0xFF2
 15158                           intcon2	equ	0xFF1
 15159                           intcon3	equ	0xFF0
 15160                           indf0	equ	0xFEF
 15161                           postinc0	equ	0xFEE
 15162                           fsr0h	equ	0xFEA
 15163                           fsr0l	equ	0xFE9
 15164                           wreg	equ	0xFE8
 15165                           postdec1	equ	0xFE5
 15166                           fsr1l	equ	0xFE1
 15167                           indf2	equ	0xFDF
 15168                           postinc2	equ	0xFDE
 15169                           postdec2	equ	0xFDD
 15170                           fsr2h	equ	0xFDA
 15171                           fsr2l	equ	0xFD9
 15172                           status	equ	0xFD8
 15173                           
 15174 ;; *************** function ___wmul *****************
 15175 ;; Defined at:
 15176 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15179 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15180 ;; Auto vars:     Size  Location     Type
 15181 ;;  product         2    4[BANK0 ] unsigned int 
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  2    0[BANK0 ] unsigned int 
 15184 ;; Registers used:
 15185 ;;		wreg, status,2, status,0, prodl, prodh
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15191 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15194 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15195 ;;Total ram usage:        6 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    7
 15198 ;; This function calls:
 15199 ;;		Nothing
 15200 ;; This function is called by:
 15201 ;;		_printf
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           	psect	text54
 15206  004446                     __ptext54:
 15207                           	opt stack 0
 15208  004446                     ___wmul:
 15209                           	opt stack 19
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;incstack = 0
 15213  004446  0100               	movlb	0	; () banked
 15214  004448  5180               	movf	___wmul@multiplier& (0+255),w,b
 15215  00444A  0100               	movlb	0	; () banked
 15216  00444C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15217  00444E  CFF3 F084          	movff	prodl,___wmul@product
 15218  004452  CFF4 F085          	movff	prodh,___wmul@product+1
 15219  004456  0100               	movlb	0	; () banked
 15220  004458  5180               	movf	___wmul@multiplier& (0+255),w,b
 15221  00445A  0100               	movlb	0	; () banked
 15222  00445C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15223  00445E  50F3               	movf	prodl,w,c
 15224  004460  0100               	movlb	0	; () banked
 15225  004462  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15226  004464  0100               	movlb	0	; () banked
 15227  004466  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15228  004468  0100               	movlb	0	; () banked
 15229  00446A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15230  00446C  50F3               	movf	prodl,w,c
 15231  00446E  0100               	movlb	0	; () banked
 15232  004470  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15233                           
 15234                           ; BSR set to: 0
 15235  004472  C084  F080         	movff	___wmul@product,?___wmul
 15236  004476  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15237  00447A  0012               	return	
 15238  00447C                     __end_of___wmul:
 15239                           	opt stack 0
 15240                           tblptru	equ	0xFF8
 15241                           tblptrh	equ	0xFF7
 15242                           tblptrl	equ	0xFF6
 15243                           tablat	equ	0xFF5
 15244                           prodh	equ	0xFF4
 15245                           prodl	equ	0xFF3
 15246                           intcon	equ	0xFF2
 15247                           intcon2	equ	0xFF1
 15248                           intcon3	equ	0xFF0
 15249                           indf0	equ	0xFEF
 15250                           postinc0	equ	0xFEE
 15251                           fsr0h	equ	0xFEA
 15252                           fsr0l	equ	0xFE9
 15253                           wreg	equ	0xFE8
 15254                           postdec1	equ	0xFE5
 15255                           fsr1l	equ	0xFE1
 15256                           indf2	equ	0xFDF
 15257                           postinc2	equ	0xFDE
 15258                           postdec2	equ	0xFDD
 15259                           fsr2h	equ	0xFDA
 15260                           fsr2l	equ	0xFD9
 15261                           status	equ	0xFD8
 15262                           
 15263 ;; *************** function ___lwmod *****************
 15264 ;; Defined at:
 15265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15266 ;; Parameters:    Size  Location     Type
 15267 ;;  dividend        2    7[BANK0 ] unsigned int 
 15268 ;;  divisor         2    9[BANK0 ] unsigned int 
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;  counter         1   11[BANK0 ] unsigned char 
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  2    7[BANK0 ] unsigned int 
 15273 ;; Registers used:
 15274 ;;		wreg, status,2, status,0
 15275 ;; Tracked objects:
 15276 ;;		On entry : 0/0
 15277 ;;		On exit  : 0/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15280 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15284 ;;Total ram usage:        5 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; Hardware stack levels required when called:    7
 15287 ;; This function calls:
 15288 ;;		Nothing
 15289 ;; This function is called by:
 15290 ;;		_printf
 15291 ;; This function uses a non-reentrant model
 15292 ;;
 15293                           
 15294                           	psect	text55
 15295  003F62                     __ptext55:
 15296                           	opt stack 0
 15297  003F62                     ___lwmod:
 15298                           	opt stack 19
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;incstack = 0
 15302  003F62  0100               	movlb	0	; () banked
 15303  003F64  5189               	movf	___lwmod@divisor& (0+255),w,b
 15304  003F66  0100               	movlb	0	; () banked
 15305  003F68  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15306  003F6A  B4D8               	btfsc	status,2,c
 15307  003F6C  D026               	goto	l1754
 15308                           
 15309                           ; BSR set to: 0
 15310  003F6E  0E01               	movlw	1
 15311  003F70  0100               	movlb	0	; () banked
 15312  003F72  6F8B               	movwf	___lwmod@counter& (0+255),b
 15313  003F74  D006               	goto	l5425
 15314  003F76                     l5423:
 15315                           
 15316                           ; BSR set to: 0
 15317  003F76  0100               	movlb	0	; () banked
 15318  003F78  90D8               	bcf	status,0,c
 15319  003F7A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15320  003F7C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15321  003F7E  0100               	movlb	0	; () banked
 15322  003F80  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15323  003F82                     l5425:
 15324                           
 15325                           ; BSR set to: 0
 15326  003F82  0100               	movlb	0	; () banked
 15327  003F84  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15328  003F86  D7F7               	goto	l5423
 15329  003F88                     l5427:
 15330                           
 15331                           ; BSR set to: 0
 15332  003F88  0100               	movlb	0	; () banked
 15333  003F8A  5189               	movf	___lwmod@divisor& (0+255),w,b
 15334  003F8C  0100               	movlb	0	; () banked
 15335  003F8E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15336  003F90  0100               	movlb	0	; () banked
 15337  003F92  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15338  003F94  0100               	movlb	0	; () banked
 15339  003F96  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15340  003F98  A0D8               	btfss	status,0,c
 15341  003F9A  D008               	goto	l5431
 15342                           
 15343                           ; BSR set to: 0
 15344  003F9C  0100               	movlb	0	; () banked
 15345  003F9E  5189               	movf	___lwmod@divisor& (0+255),w,b
 15346  003FA0  0100               	movlb	0	; () banked
 15347  003FA2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15348  003FA4  0100               	movlb	0	; () banked
 15349  003FA6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15350  003FA8  0100               	movlb	0	; () banked
 15351  003FAA  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15352  003FAC                     l5431:
 15353                           
 15354                           ; BSR set to: 0
 15355  003FAC  0100               	movlb	0	; () banked
 15356  003FAE  90D8               	bcf	status,0,c
 15357  003FB0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15358  003FB2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15359                           
 15360                           ; BSR set to: 0
 15361  003FB4  0100               	movlb	0	; () banked
 15362  003FB6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15363  003FB8  D7E7               	goto	l5427
 15364  003FBA                     l1754:
 15365                           
 15366                           ; BSR set to: 0
 15367  003FBA  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15368  003FBE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15369                           
 15370                           ; BSR set to: 0
 15371  003FC2  0012               	return		;funcret
 15372  003FC4                     __end_of___lwmod:
 15373                           	opt stack 0
 15374                           tblptru	equ	0xFF8
 15375                           tblptrh	equ	0xFF7
 15376                           tblptrl	equ	0xFF6
 15377                           tablat	equ	0xFF5
 15378                           prodh	equ	0xFF4
 15379                           prodl	equ	0xFF3
 15380                           intcon	equ	0xFF2
 15381                           intcon2	equ	0xFF1
 15382                           intcon3	equ	0xFF0
 15383                           indf0	equ	0xFEF
 15384                           postinc0	equ	0xFEE
 15385                           fsr0h	equ	0xFEA
 15386                           fsr0l	equ	0xFE9
 15387                           wreg	equ	0xFE8
 15388                           postdec1	equ	0xFE5
 15389                           fsr1l	equ	0xFE1
 15390                           indf2	equ	0xFDF
 15391                           postinc2	equ	0xFDE
 15392                           postdec2	equ	0xFDD
 15393                           fsr2h	equ	0xFDA
 15394                           fsr2l	equ	0xFD9
 15395                           status	equ	0xFD8
 15396                           
 15397 ;; *************** function ___lwdiv *****************
 15398 ;; Defined at:
 15399 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15400 ;; Parameters:    Size  Location     Type
 15401 ;;  dividend        2    0[BANK0 ] unsigned int 
 15402 ;;  divisor         2    2[BANK0 ] unsigned int 
 15403 ;; Auto vars:     Size  Location     Type
 15404 ;;  quotient        2    4[BANK0 ] unsigned int 
 15405 ;;  counter         1    6[BANK0 ] unsigned char 
 15406 ;; Return value:  Size  Location     Type
 15407 ;;                  2    0[BANK0 ] unsigned int 
 15408 ;; Registers used:
 15409 ;;		wreg, status,2, status,0
 15410 ;; Tracked objects:
 15411 ;;		On entry : 0/0
 15412 ;;		On exit  : 0/0
 15413 ;;		Unchanged: 0/0
 15414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15415 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15418 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;Total ram usage:        7 bytes
 15420 ;; Hardware stack levels used:    1
 15421 ;; Hardware stack levels required when called:    7
 15422 ;; This function calls:
 15423 ;;		Nothing
 15424 ;; This function is called by:
 15425 ;;		_printf
 15426 ;; This function uses a non-reentrant model
 15427 ;;
 15428                           
 15429                           	psect	text56
 15430  003D30                     __ptext56:
 15431                           	opt stack 0
 15432  003D30                     ___lwdiv:
 15433                           	opt stack 19
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;incstack = 0
 15437  003D30  0E00               	movlw	0
 15438  003D32  0100               	movlb	0	; () banked
 15439  003D34  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15440  003D36  0E00               	movlw	0
 15441  003D38  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15442                           
 15443                           ; BSR set to: 0
 15444  003D3A  0100               	movlb	0	; () banked
 15445  003D3C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15446  003D3E  0100               	movlb	0	; () banked
 15447  003D40  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15448  003D42  B4D8               	btfsc	status,2,c
 15449  003D44  D02C               	goto	l1744
 15450                           
 15451                           ; BSR set to: 0
 15452  003D46  0E01               	movlw	1
 15453  003D48  0100               	movlb	0	; () banked
 15454  003D4A  6F86               	movwf	___lwdiv@counter& (0+255),b
 15455  003D4C  D006               	goto	l5405
 15456  003D4E                     l5403:
 15457                           
 15458                           ; BSR set to: 0
 15459  003D4E  0100               	movlb	0	; () banked
 15460  003D50  90D8               	bcf	status,0,c
 15461  003D52  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15462  003D54  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15463  003D56  0100               	movlb	0	; () banked
 15464  003D58  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15465  003D5A                     l5405:
 15466                           
 15467                           ; BSR set to: 0
 15468  003D5A  0100               	movlb	0	; () banked
 15469  003D5C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15470  003D5E  D7F7               	goto	l5403
 15471  003D60                     l5407:
 15472                           
 15473                           ; BSR set to: 0
 15474  003D60  0100               	movlb	0	; () banked
 15475  003D62  90D8               	bcf	status,0,c
 15476  003D64  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15477  003D66  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15478                           
 15479                           ; BSR set to: 0
 15480  003D68  0100               	movlb	0	; () banked
 15481  003D6A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15482  003D6C  0100               	movlb	0	; () banked
 15483  003D6E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15484  003D70  0100               	movlb	0	; () banked
 15485  003D72  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15486  003D74  0100               	movlb	0	; () banked
 15487  003D76  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15488  003D78  A0D8               	btfss	status,0,c
 15489  003D7A  D00A               	goto	l5415
 15490                           
 15491                           ; BSR set to: 0
 15492  003D7C  0100               	movlb	0	; () banked
 15493  003D7E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15494  003D80  0100               	movlb	0	; () banked
 15495  003D82  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15496  003D84  0100               	movlb	0	; () banked
 15497  003D86  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15498  003D88  0100               	movlb	0	; () banked
 15499  003D8A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15500                           
 15501                           ; BSR set to: 0
 15502  003D8C  0100               	movlb	0	; () banked
 15503  003D8E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15504  003D90                     l5415:
 15505                           
 15506                           ; BSR set to: 0
 15507  003D90  0100               	movlb	0	; () banked
 15508  003D92  90D8               	bcf	status,0,c
 15509  003D94  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15510  003D96  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15511                           
 15512                           ; BSR set to: 0
 15513  003D98  0100               	movlb	0	; () banked
 15514  003D9A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15515  003D9C  D7E1               	goto	l5407
 15516  003D9E                     l1744:
 15517                           
 15518                           ; BSR set to: 0
 15519  003D9E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15520  003DA2  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15521                           
 15522                           ; BSR set to: 0
 15523  003DA6  0012               	return		;funcret
 15524  003DA8                     __end_of___lwdiv:
 15525                           	opt stack 0
 15526                           tblptru	equ	0xFF8
 15527                           tblptrh	equ	0xFF7
 15528                           tblptrl	equ	0xFF6
 15529                           tablat	equ	0xFF5
 15530                           prodh	equ	0xFF4
 15531                           prodl	equ	0xFF3
 15532                           intcon	equ	0xFF2
 15533                           intcon2	equ	0xFF1
 15534                           intcon3	equ	0xFF0
 15535                           indf0	equ	0xFEF
 15536                           postinc0	equ	0xFEE
 15537                           fsr0h	equ	0xFEA
 15538                           fsr0l	equ	0xFE9
 15539                           wreg	equ	0xFE8
 15540                           postdec1	equ	0xFE5
 15541                           fsr1l	equ	0xFE1
 15542                           indf2	equ	0xFDF
 15543                           postinc2	equ	0xFDE
 15544                           postdec2	equ	0xFDD
 15545                           fsr2h	equ	0xFDA
 15546                           fsr2l	equ	0xFD9
 15547                           status	equ	0xFD8
 15548                           
 15549 ;; *************** function _lcdInst *****************
 15550 ;; Defined at:
 15551 ;;		line 15 in file "lcd.c"
 15552 ;; Parameters:    Size  Location     Type
 15553 ;;  data            1    wreg     unsigned char 
 15554 ;; Auto vars:     Size  Location     Type
 15555 ;;  data            1    2[BANK0 ] unsigned char 
 15556 ;; Return value:  Size  Location     Type
 15557 ;;                  1    wreg      void 
 15558 ;; Registers used:
 15559 ;;		wreg, status,2, status,0, cstack
 15560 ;; Tracked objects:
 15561 ;;		On entry : 0/0
 15562 ;;		On exit  : 0/0
 15563 ;;		Unchanged: 0/0
 15564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15568 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15569 ;;Total ram usage:        1 bytes
 15570 ;; Hardware stack levels used:    1
 15571 ;; Hardware stack levels required when called:    8
 15572 ;; This function calls:
 15573 ;;		_lcdNibble
 15574 ;; This function is called by:
 15575 ;;		_UI
 15576 ;;		_change_state_to_menu_start
 15577 ;;		_change_state_to_menu_12
 15578 ;;		_change_state_to_menu_22
 15579 ;;		_initLCD
 15580 ;;		_printRTC
 15581 ;;		_Loading
 15582 ;;		_EEPROM_write
 15583 ;;		_Test
 15584 ;;		_algorithmTest
 15585 ;;		_sensorTest
 15586 ;;		_actuatorTest
 15587 ;;		_BothServos
 15588 ;;		_PortTestA5
 15589 ;;		_PusherTest
 15590 ;;		_SpeedTest
 15591 ;;		_BlockerTest
 15592 ;;		_ToggleTestA5
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           	psect	text57
 15597  004938                     __ptext57:
 15598                           	opt stack 0
 15599  004938                     _lcdInst:
 15600                           	opt stack 20
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;incstack = 0
 15604                           ;lcdInst@data stored from wreg
 15605  004938  0100               	movlb	0	; () banked
 15606  00493A  6F82               	movwf	lcdInst@data& (0+255),b
 15607                           
 15608                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15609  00493C  948C               	bcf	3980,2,c	;volatile
 15610                           
 15611                           ;lcd.c: 17: lcdNibble(data);
 15612  00493E  0100               	movlb	0	; () banked
 15613  004940  5182               	movf	lcdInst@data& (0+255),w,b
 15614  004942  EC7D  F01F         	call	_lcdNibble
 15615  004946  0012               	return		;funcret
 15616  004948                     __end_of_lcdInst:
 15617                           	opt stack 0
 15618                           tblptru	equ	0xFF8
 15619                           tblptrh	equ	0xFF7
 15620                           tblptrl	equ	0xFF6
 15621                           tablat	equ	0xFF5
 15622                           prodh	equ	0xFF4
 15623                           prodl	equ	0xFF3
 15624                           intcon	equ	0xFF2
 15625                           intcon2	equ	0xFF1
 15626                           intcon3	equ	0xFF0
 15627                           indf0	equ	0xFEF
 15628                           postinc0	equ	0xFEE
 15629                           fsr0h	equ	0xFEA
 15630                           fsr0l	equ	0xFE9
 15631                           wreg	equ	0xFE8
 15632                           postdec1	equ	0xFE5
 15633                           fsr1l	equ	0xFE1
 15634                           indf2	equ	0xFDF
 15635                           postinc2	equ	0xFDE
 15636                           postdec2	equ	0xFDD
 15637                           fsr2h	equ	0xFDA
 15638                           fsr2l	equ	0xFD9
 15639                           status	equ	0xFD8
 15640                           
 15641 ;; *************** function _lcdNibble *****************
 15642 ;; Defined at:
 15643 ;;		line 25 in file "lcd.c"
 15644 ;; Parameters:    Size  Location     Type
 15645 ;;  data            1    wreg     unsigned char 
 15646 ;; Auto vars:     Size  Location     Type
 15647 ;;  data            1    1[BANK0 ] unsigned char 
 15648 ;;  temp            1    0[BANK0 ] unsigned char 
 15649 ;; Return value:  Size  Location     Type
 15650 ;;                  1    wreg      void 
 15651 ;; Registers used:
 15652 ;;		wreg, status,2, status,0
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15662 ;;Total ram usage:        2 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:    7
 15665 ;; This function calls:
 15666 ;;		Nothing
 15667 ;; This function is called by:
 15668 ;;		_lcdInst
 15669 ;;		_putch
 15670 ;; This function uses a non-reentrant model
 15671 ;;
 15672                           
 15673                           	psect	text58
 15674  003EFA                     __ptext58:
 15675                           	opt stack 0
 15676  003EFA                     _lcdNibble:
 15677                           	opt stack 20
 15678                           
 15679                           ;incstack = 0
 15680                           ;lcdNibble@data stored from wreg
 15681  003EFA  0100               	movlb	0	; () banked
 15682  003EFC  6F81               	movwf	lcdNibble@data& (0+255),b
 15683                           
 15684                           ;lcd.c: 27: char temp = data & 0xF0;
 15685  003EFE  0100               	movlb	0	; () banked
 15686  003F00  5181               	movf	lcdNibble@data& (0+255),w,b
 15687  003F02  0BF0               	andlw	240
 15688  003F04  0100               	movlb	0	; () banked
 15689  003F06  6F80               	movwf	lcdNibble@temp& (0+255),b
 15690                           
 15691                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15692  003F08  508C               	movf	3980,w,c	;volatile
 15693  003F0A  0B0F               	andlw	15
 15694  003F0C  6E8C               	movwf	3980,c	;volatile
 15695                           
 15696                           ;lcd.c: 29: LATD = temp | LATD;
 15697  003F0E  0100               	movlb	0	; () banked
 15698  003F10  5180               	movf	lcdNibble@temp& (0+255),w,b
 15699  003F12  108C               	iorwf	3980,w,c	;volatile
 15700  003F14  6E8C               	movwf	3980,c	;volatile
 15701                           
 15702                           ; BSR set to: 0
 15703                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15704  003F16  868C               	bsf	3980,3,c	;volatile
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15708  003F18  0E42               	movlw	66
 15709  003F1A                     u8547:
 15710  003F1A  2EE8               	decfsz	wreg,f,c
 15711  003F1C  D7FE               	bra	u8547
 15712  003F1E  D000               	nop2	
 15713                           
 15714                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15715  003F20  968C               	bcf	3980,3,c	;volatile
 15716                           
 15717                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15718  003F22  0E42               	movlw	66
 15719  003F24                     u8557:
 15720  003F24  2EE8               	decfsz	wreg,f,c
 15721  003F26  D7FE               	bra	u8557
 15722  003F28  D000               	nop2	
 15723                           
 15724                           ;lcd.c: 36: data = data << 4;
 15725  003F2A  0100               	movlb	0	; () banked
 15726  003F2C  3981               	swapf	lcdNibble@data& (0+255),w,b
 15727  003F2E  0BF0               	andlw	240
 15728  003F30  0100               	movlb	0	; () banked
 15729  003F32  6F81               	movwf	lcdNibble@data& (0+255),b
 15730                           
 15731                           ;lcd.c: 38: temp = data & 0xF0;
 15732  003F34  0100               	movlb	0	; () banked
 15733  003F36  5181               	movf	lcdNibble@data& (0+255),w,b
 15734  003F38  0BF0               	andlw	240
 15735  003F3A  0100               	movlb	0	; () banked
 15736  003F3C  6F80               	movwf	lcdNibble@temp& (0+255),b
 15737                           
 15738                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15739  003F3E  508C               	movf	3980,w,c	;volatile
 15740  003F40  0B0F               	andlw	15
 15741  003F42  6E8C               	movwf	3980,c	;volatile
 15742                           
 15743                           ;lcd.c: 40: LATD = temp | LATD;
 15744  003F44  0100               	movlb	0	; () banked
 15745  003F46  5180               	movf	lcdNibble@temp& (0+255),w,b
 15746  003F48  108C               	iorwf	3980,w,c	;volatile
 15747  003F4A  6E8C               	movwf	3980,c	;volatile
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15751  003F4C  868C               	bsf	3980,3,c	;volatile
 15752                           
 15753                           ; BSR set to: 0
 15754                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15755  003F4E  0E42               	movlw	66
 15756  003F50                     u8567:
 15757  003F50  2EE8               	decfsz	wreg,f,c
 15758  003F52  D7FE               	bra	u8567
 15759  003F54  D000               	nop2	
 15760                           
 15761                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15762  003F56  968C               	bcf	3980,3,c	;volatile
 15763                           
 15764                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15765  003F58  0E42               	movlw	66
 15766  003F5A                     u8577:
 15767  003F5A  2EE8               	decfsz	wreg,f,c
 15768  003F5C  D7FE               	bra	u8577
 15769  003F5E  D000               	nop2	
 15770  003F60  0012               	return		;funcret
 15771  003F62                     __end_of_lcdNibble:
 15772                           	opt stack 0
 15773                           tblptru	equ	0xFF8
 15774                           tblptrh	equ	0xFF7
 15775                           tblptrl	equ	0xFF6
 15776                           tablat	equ	0xFF5
 15777                           prodh	equ	0xFF4
 15778                           prodl	equ	0xFF3
 15779                           intcon	equ	0xFF2
 15780                           intcon2	equ	0xFF1
 15781                           intcon3	equ	0xFF0
 15782                           indf0	equ	0xFEF
 15783                           postinc0	equ	0xFEE
 15784                           fsr0h	equ	0xFEA
 15785                           fsr0l	equ	0xFE9
 15786                           wreg	equ	0xFE8
 15787                           postdec1	equ	0xFE5
 15788                           fsr1l	equ	0xFE1
 15789                           indf2	equ	0xFDF
 15790                           postinc2	equ	0xFDE
 15791                           postdec2	equ	0xFDD
 15792                           fsr2h	equ	0xFDA
 15793                           fsr2l	equ	0xFD9
 15794                           status	equ	0xFD8
 15795                           
 15796 ;; *************** function _handler *****************
 15797 ;; Defined at:
 15798 ;;		line 16 in file "interruptHandler.c"
 15799 ;; Parameters:    Size  Location     Type
 15800 ;;		None
 15801 ;; Auto vars:     Size  Location     Type
 15802 ;;		None
 15803 ;; Return value:  Size  Location     Type
 15804 ;;                  1    wreg      void 
 15805 ;; Registers used:
 15806 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15807 ;; Tracked objects:
 15808 ;;		On entry : 0/0
 15809 ;;		On exit  : 0/0
 15810 ;;		Unchanged: 0/0
 15811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15814 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15815 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15816 ;;Total ram usage:       16 bytes
 15817 ;; Hardware stack levels used:    1
 15818 ;; Hardware stack levels required when called:    6
 15819 ;; This function calls:
 15820 ;;		_printSortTimer
 15821 ;;		_updateMenu
 15822 ;; This function is called by:
 15823 ;;		Interrupt level 2
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           	psect	intcode
 15828  000008                     __pintcode:
 15829                           	opt stack 0
 15830  000008                     _handler:
 15831                           	opt stack 18
 15832                           
 15833                           ;incstack = 0
 15834  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15835  00000A  ED27  F017         	call	int_func,f	;refresh shadow registers
 15836                           tblptru	equ	0xFF8
 15837                           tblptrh	equ	0xFF7
 15838                           tblptrl	equ	0xFF6
 15839                           tablat	equ	0xFF5
 15840                           prodh	equ	0xFF4
 15841                           prodl	equ	0xFF3
 15842                           intcon	equ	0xFF2
 15843                           intcon2	equ	0xFF1
 15844                           intcon3	equ	0xFF0
 15845                           indf0	equ	0xFEF
 15846                           postinc0	equ	0xFEE
 15847                           fsr0h	equ	0xFEA
 15848                           fsr0l	equ	0xFE9
 15849                           wreg	equ	0xFE8
 15850                           postdec1	equ	0xFE5
 15851                           fsr1l	equ	0xFE1
 15852                           indf2	equ	0xFDF
 15853                           postinc2	equ	0xFDE
 15854                           postdec2	equ	0xFDD
 15855                           fsr2h	equ	0xFDA
 15856                           fsr2l	equ	0xFD9
 15857                           status	equ	0xFD8
 15858                           
 15859                           	psect	intcode_body
 15860  002E4E                     __pintcode_body:
 15861                           	opt stack 18
 15862  002E4E                     int_func:
 15863                           	opt stack 18
 15864  002E4E  0006               	pop		; remove dummy address from shadow register refresh
 15865  002E50  CFFA F04D          	movff	pclath,??_handler+2
 15866  002E54  CFFB F04E          	movff	pclatu,??_handler+3
 15867  002E58  CFE9 F04F          	movff	fsr0l,??_handler+4
 15868  002E5C  CFEA F050          	movff	fsr0h,??_handler+5
 15869  002E60  CFE1 F051          	movff	fsr1l,??_handler+6
 15870  002E64  CFE2 F052          	movff	fsr1h,??_handler+7
 15871  002E68  CFD9 F053          	movff	fsr2l,??_handler+8
 15872  002E6C  CFDA F054          	movff	fsr2h,??_handler+9
 15873  002E70  CFF3 F055          	movff	prodl,??_handler+10
 15874  002E74  CFF4 F056          	movff	prodh,??_handler+11
 15875  002E78  CFF6 F057          	movff	tblptrl,??_handler+12
 15876  002E7C  CFF7 F058          	movff	tblptrh,??_handler+13
 15877  002E80  CFF8 F059          	movff	tblptru,??_handler+14
 15878  002E84  CFF5 F05A          	movff	tablat,??_handler+15
 15879                           
 15880                           ;interruptHandler.c: 18: if(INT1IF){
 15881  002E88  A0F0               	btfss	intcon3,0,c	;volatile
 15882  002E8A  D020               	goto	i2l8293
 15883                           
 15884                           ;interruptHandler.c: 19: INT1IF = 0;
 15885  002E8C  90F0               	bcf	intcon3,0,c	;volatile
 15886                           
 15887                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15888  002E8E  0100               	movlb	0	; () banked
 15889  002E90  51FC               	movf	_machine_state& (0+255),w,b
 15890  002E92  A4D8               	btfss	status,2,c
 15891  002E94  D01B               	goto	i2l8293
 15892                           
 15893                           ; BSR set to: 0
 15894                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15895  002E96  3881               	swapf	3969,w,c	;volatile
 15896  002E98  0B0F               	andlw	15
 15897  002E9A  0B0F               	andlw	15
 15898  002E9C  6E4B               	movwf	??_handler& (0+255),c
 15899  002E9E  6A4C               	clrf	(??_handler+1)& (0+255),c
 15900  002EA0  0E01               	movlw	low _keys
 15901  002EA2  244B               	addwf	??_handler,w,c
 15902  002EA4  6EF6               	movwf	tblptrl,c
 15903  002EA6  0EFB               	movlw	high _keys
 15904  002EA8  204C               	addwfc	??_handler+1,w,c
 15905  002EAA  6EF7               	movwf	tblptrh,c
 15906  002EAC                     	if	1	;There are 3 active tblptr bytes
 15907  002EAC  6AF8               	clrf	tblptru,c
 15908  002EAE  0E00               	movlw	low (__mediumconst shr (0+16))
 15909  002EB0  22F8               	addwfc	tblptru,f,c
 15910  002EB2                     	endif
 15911  002EB2  0008               	tblrd		*
 15912  002EB4  CFF5 F07D          	movff	tablat,_input	;volatile
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;interruptHandler.c: 23: if(input == '*'){
 15916  002EB8  0E2A               	movlw	42
 15917  002EBA  187D               	xorwf	_input,w,c	;volatile
 15918  002EBC  A4D8               	btfss	status,2,c
 15919  002EBE  D004               	goto	i2l8291
 15920                           
 15921                           ; BSR set to: 0
 15922                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15923  002EC0  0E03               	movlw	3
 15924  002EC2  0100               	movlb	0	; () banked
 15925  002EC4  6FFC               	movwf	_machine_state& (0+255),b
 15926                           
 15927                           ;interruptHandler.c: 25: }
 15928  002EC6  D002               	goto	i2l8293
 15929  002EC8                     i2l8291:
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;interruptHandler.c: 26: else{
 15933                           ;interruptHandler.c: 27: updateMenu();
 15934  002EC8  EC35  F011         	call	_updateMenu	;wreg free
 15935  002ECC                     i2l8293:
 15936                           
 15937                           ;interruptHandler.c: 28: }
 15938                           ;interruptHandler.c: 29: }
 15939                           ;interruptHandler.c: 30: }
 15940                           ;interruptHandler.c: 33: if(TMR0IF){
 15941  002ECC  A4F2               	btfss	intcon,2,c	;volatile
 15942  002ECE  D00C               	goto	i2l8307
 15943                           
 15944                           ;interruptHandler.c: 34: TMR0IF = 0;
 15945  002ED0  94F2               	bcf	intcon,2,c	;volatile
 15946                           
 15947                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15948  002ED2  0100               	movlb	0	; () banked
 15949  002ED4  05FC               	decf	_machine_state& (0+255),w,b
 15950  002ED6  A4D8               	btfss	status,2,c
 15951  002ED8  D007               	goto	i2l8307
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;interruptHandler.c: 36: printSortTimer();
 15955  002EDA  ECB0  F013         	call	_printSortTimer	;wreg free
 15956                           
 15957                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15958  002EDE  0E85               	movlw	133
 15959  002EE0  6ED7               	movwf	4055,c	;volatile
 15960                           
 15961                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15962  002EE2  0EEE               	movlw	238
 15963  002EE4  6ED6               	movwf	4054,c	;volatile
 15964                           
 15965                           ;interruptHandler.c: 40: TMR0ON = 1;
 15966  002EE6  8ED5               	bsf	4053,7,c	;volatile
 15967  002EE8                     i2l8307:
 15968                           
 15969                           ;interruptHandler.c: 41: }
 15970                           ;interruptHandler.c: 42: }
 15971                           ;interruptHandler.c: 45: if(TMR1IF){
 15972  002EE8  A09E               	btfss	3998,0,c	;volatile
 15973  002EEA  D024               	goto	i2l8331
 15974                           
 15975                           ;interruptHandler.c: 46: TMR1IF = 0;
 15976  002EEC  909E               	bcf	3998,0,c	;volatile
 15977                           
 15978                           ;interruptHandler.c: 47: TMR1ON = 0;
 15979  002EEE  90CD               	bcf	4045,0,c	;volatile
 15980                           
 15981                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15982  002EF0  0100               	movlb	0	; () banked
 15983  002EF2  05FC               	decf	_machine_state& (0+255),w,b
 15984  002EF4  A4D8               	btfss	status,2,c
 15985  002EF6  D01E               	goto	i2l8331
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;interruptHandler.c: 49: if(was_low_1){
 15989  002EF8  5079               	movf	_was_low_1,w,c	;volatile
 15990  002EFA  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15991  002EFC  B4D8               	btfsc	status,2,c
 15992  002EFE  D00A               	goto	i2l863
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15996  002F00  828B               	bsf	3979,1,c	;volatile
 15997                           
 15998                           ; BSR set to: 0
 15999                           ;interruptHandler.c: 51: was_low_1 = 0;
 16000  002F02  0E00               	movlw	0
 16001  002F04  6E7A               	movwf	_was_low_1+1,c	;volatile
 16002  002F06  0E00               	movlw	0
 16003  002F08  6E79               	movwf	_was_low_1,c	;volatile
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16007  002F0A  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16008                           
 16009                           ; BSR set to: 0
 16010                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16011  002F0E  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16012                           
 16013                           ;interruptHandler.c: 54: }
 16014  002F12  D00F               	goto	i2l8329
 16015  002F14                     i2l863:
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;interruptHandler.c: 55: else{
 16019                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16020  002F14  928B               	bcf	3979,1,c	;volatile
 16021                           
 16022                           ; BSR set to: 0
 16023                           ;interruptHandler.c: 57: was_low_1 = 1;
 16024  002F16  0E00               	movlw	0
 16025  002F18  6E7A               	movwf	_was_low_1+1,c	;volatile
 16026  002F1A  0E01               	movlw	1
 16027  002F1C  6E79               	movwf	_was_low_1,c	;volatile
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16031  002F1E  0101               	movlb	1	; () banked
 16032  002F20  511C               	movf	_servoTimes& (0+255),w,b
 16033  002F22  0800               	sublw	0
 16034  002F24  0F20               	addlw	32
 16035  002F26  6ECF               	movwf	4047,c	;volatile
 16036                           
 16037                           ; BSR set to: 1
 16038                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16039  002F28  0101               	movlb	1	; () banked
 16040  002F2A  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16041  002F2C  0800               	sublw	0
 16042  002F2E  0F20               	addlw	32
 16043  002F30  6ECE               	movwf	4046,c	;volatile
 16044  002F32                     i2l8329:
 16045                           
 16046                           ;interruptHandler.c: 60: }
 16047                           ;interruptHandler.c: 61: TMR1ON = 1;
 16048  002F32  80CD               	bsf	4045,0,c	;volatile
 16049  002F34                     i2l8331:
 16050                           
 16051                           ;interruptHandler.c: 62: }
 16052                           ;interruptHandler.c: 63: }
 16053                           ;interruptHandler.c: 65: if(TMR3IF){
 16054  002F34  A2A1               	btfss	4001,1,c	;volatile
 16055  002F36  D024               	goto	i2l869
 16056                           
 16057                           ;interruptHandler.c: 66: TMR3IF = 0;
 16058  002F38  92A1               	bcf	4001,1,c	;volatile
 16059                           
 16060                           ;interruptHandler.c: 67: TMR3ON = 0;
 16061  002F3A  90B1               	bcf	4017,0,c	;volatile
 16062                           
 16063                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16064  002F3C  0100               	movlb	0	; () banked
 16065  002F3E  05FC               	decf	_machine_state& (0+255),w,b
 16066  002F40  A4D8               	btfss	status,2,c
 16067  002F42  D01E               	goto	i2l869
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;interruptHandler.c: 69: if(was_low_3){
 16071  002F44  507B               	movf	_was_low_3,w,c	;volatile
 16072  002F46  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16073  002F48  B4D8               	btfsc	status,2,c
 16074  002F4A  D00A               	goto	i2l867
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16078  002F4C  848B               	bsf	3979,2,c	;volatile
 16079                           
 16080                           ; BSR set to: 0
 16081                           ;interruptHandler.c: 71: was_low_3 = 0;
 16082  002F4E  0E00               	movlw	0
 16083  002F50  6E7C               	movwf	_was_low_3+1,c	;volatile
 16084  002F52  0E00               	movlw	0
 16085  002F54  6E7B               	movwf	_was_low_3,c	;volatile
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16089  002F56  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16093  002F5A  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16094                           
 16095                           ;interruptHandler.c: 74: }
 16096  002F5E  D00F               	goto	i2l8353
 16097  002F60                     i2l867:
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;interruptHandler.c: 75: else{
 16101                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16102  002F60  948B               	bcf	3979,2,c	;volatile
 16103                           
 16104                           ; BSR set to: 0
 16105                           ;interruptHandler.c: 77: was_low_3 = 1;
 16106  002F62  0E00               	movlw	0
 16107  002F64  6E7C               	movwf	_was_low_3+1,c	;volatile
 16108  002F66  0E01               	movlw	1
 16109  002F68  6E7B               	movwf	_was_low_3,c	;volatile
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16113  002F6A  0101               	movlb	1	; () banked
 16114  002F6C  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16115  002F6E  0800               	sublw	0
 16116  002F70  0F20               	addlw	32
 16117  002F72  6EB3               	movwf	4019,c	;volatile
 16118                           
 16119                           ; BSR set to: 1
 16120                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16121  002F74  0101               	movlb	1	; () banked
 16122  002F76  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16123  002F78  0800               	sublw	0
 16124  002F7A  0F20               	addlw	32
 16125  002F7C  6EB2               	movwf	4018,c	;volatile
 16126  002F7E                     i2l8353:
 16127                           
 16128                           ;interruptHandler.c: 80: }
 16129                           ;interruptHandler.c: 81: TMR3ON = 1;
 16130  002F7E  80B1               	bsf	4017,0,c	;volatile
 16131  002F80                     i2l869:
 16132  002F80  C05A  FFF5         	movff	??_handler+15,tablat
 16133  002F84  C059  FFF8         	movff	??_handler+14,tblptru
 16134  002F88  C058  FFF7         	movff	??_handler+13,tblptrh
 16135  002F8C  C057  FFF6         	movff	??_handler+12,tblptrl
 16136  002F90  C056  FFF4         	movff	??_handler+11,prodh
 16137  002F94  C055  FFF3         	movff	??_handler+10,prodl
 16138  002F98  C054  FFDA         	movff	??_handler+9,fsr2h
 16139  002F9C  C053  FFD9         	movff	??_handler+8,fsr2l
 16140  002FA0  C052  FFE2         	movff	??_handler+7,fsr1h
 16141  002FA4  C051  FFE1         	movff	??_handler+6,fsr1l
 16142  002FA8  C050  FFEA         	movff	??_handler+5,fsr0h
 16143  002FAC  C04F  FFE9         	movff	??_handler+4,fsr0l
 16144  002FB0  C04E  FFFB         	movff	??_handler+3,pclatu
 16145  002FB4  C04D  FFFA         	movff	??_handler+2,pclath
 16146  002FB8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16147  002FBA  0011               	retfie		f
 16148  002FBC                     __end_of_handler:
 16149                           	opt stack 0
 16150                           pclatu	equ	0xFFB
 16151                           pclath	equ	0xFFA
 16152                           tblptru	equ	0xFF8
 16153                           tblptrh	equ	0xFF7
 16154                           tblptrl	equ	0xFF6
 16155                           tablat	equ	0xFF5
 16156                           prodh	equ	0xFF4
 16157                           prodl	equ	0xFF3
 16158                           intcon	equ	0xFF2
 16159                           intcon2	equ	0xFF1
 16160                           intcon3	equ	0xFF0
 16161                           indf0	equ	0xFEF
 16162                           postinc0	equ	0xFEE
 16163                           fsr0h	equ	0xFEA
 16164                           fsr0l	equ	0xFE9
 16165                           wreg	equ	0xFE8
 16166                           postdec1	equ	0xFE5
 16167                           fsr1h	equ	0xFE2
 16168                           fsr1l	equ	0xFE1
 16169                           indf2	equ	0xFDF
 16170                           postinc2	equ	0xFDE
 16171                           postdec2	equ	0xFDD
 16172                           fsr2h	equ	0xFDA
 16173                           fsr2l	equ	0xFD9
 16174                           status	equ	0xFD8
 16175                           
 16176 ;; *************** function _updateMenu *****************
 16177 ;; Defined at:
 16178 ;;		line 213 in file "UI.c"
 16179 ;; Parameters:    Size  Location     Type
 16180 ;;		None
 16181 ;; Auto vars:     Size  Location     Type
 16182 ;;		None
 16183 ;; Return value:  Size  Location     Type
 16184 ;;                  1    wreg      void 
 16185 ;; Registers used:
 16186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16187 ;; Tracked objects:
 16188 ;;		On entry : 0/0
 16189 ;;		On exit  : 0/0
 16190 ;;		Unchanged: 0/0
 16191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16196 ;;Total ram usage:        2 bytes
 16197 ;; Hardware stack levels used:    1
 16198 ;; Hardware stack levels required when called:    5
 16199 ;; This function calls:
 16200 ;;		_change_state_to_logs_11
 16201 ;;		_change_state_to_logs_12
 16202 ;;		_change_state_to_logs_22
 16203 ;;		_change_state_to_logs_23
 16204 ;;		_change_state_to_logs_33
 16205 ;;		_change_state_to_logs_34
 16206 ;;		_change_state_to_menu_11
 16207 ;;		_change_state_to_menu_23
 16208 ;;		_dispLogs
 16209 ;;		_inputHandler
 16210 ;;		i2_change_state_to_menu_12
 16211 ;;		i2_change_state_to_menu_22
 16212 ;;		i2_change_state_to_menu_start
 16213 ;; This function is called by:
 16214 ;;		_handler
 16215 ;; This function uses a non-reentrant model
 16216 ;;
 16217                           
 16218                           	psect	text60
 16219  00226A                     __ptext60:
 16220                           	opt stack 0
 16221  00226A                     _updateMenu:
 16222                           	opt stack 18
 16223                           
 16224                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16225                           
 16226                           ;incstack = 0
 16227  00226A  0E00               	movlw	0
 16228  00226C  6E78               	movwf	_up+1,c
 16229  00226E  0E00               	movlw	0
 16230  002270  6E77               	movwf	_up,c
 16231  002272  0E00               	movlw	0
 16232  002274  6E6A               	movwf	_down+1,c
 16233  002276  0E00               	movlw	0
 16234  002278  6E69               	movwf	_down,c
 16235  00227A  0E00               	movlw	0
 16236  00227C  6E6C               	movwf	_enter+1,c
 16237  00227E  0E00               	movlw	0
 16238  002280  6E6B               	movwf	_enter,c
 16239  002282  0E00               	movlw	0
 16240  002284  6E5C               	movwf	_back+1,c
 16241  002286  0E00               	movlw	0
 16242  002288  6E5B               	movwf	_back,c
 16243                           
 16244                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16245  00228A  9EF2               	bcf	intcon,7,c	;volatile
 16246                           
 16247                           ;UI.c: 217: if (inputHandler()
 16248                           ;UI.c: 220: ){
 16249  00228C  ECA9  F014         	call	_inputHandler	;wreg free
 16250  002290  502A               	movf	?_inputHandler,w,c
 16251  002292  102B               	iorwf	?_inputHandler+1,w,c
 16252  002294  A4D8               	btfss	status,2,c
 16253  002296  D112               	goto	i2l8027
 16254  002298  D146               	goto	i2l257
 16255  00229A                     i2l7879:
 16256                           
 16257                           ;UI.c: 224: change_state_to_menu_11();
 16258  00229A  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 16259                           
 16260                           ;UI.c: 225: break;
 16261  00229E  D143               	goto	i2l257
 16262  0022A0                     i2l7881:
 16263                           
 16264                           ;UI.c: 228: if(up){
 16265  0022A0  5077               	movf	_up,w,c
 16266  0022A2  1078               	iorwf	_up+1,w,c
 16267  0022A4  B4D8               	btfsc	status,2,c
 16268  0022A6  D003               	goto	i2l7885
 16269                           
 16270                           ;UI.c: 229: change_state_to_menu_23();
 16271  0022A8  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16272                           
 16273                           ;UI.c: 230: }
 16274  0022AC  D13C               	goto	i2l257
 16275  0022AE                     i2l7885:
 16276                           
 16277                           ;UI.c: 231: else if(down){
 16278  0022AE  5069               	movf	_down,w,c
 16279  0022B0  106A               	iorwf	_down+1,w,c
 16280  0022B2  B4D8               	btfsc	status,2,c
 16281  0022B4  D003               	goto	i2l7889
 16282                           
 16283                           ;UI.c: 232: change_state_to_menu_12();
 16284  0022B6  EC88  F022         	call	i2_change_state_to_menu_12	;wreg free
 16285                           
 16286                           ;UI.c: 233: }
 16287  0022BA  D135               	goto	i2l257
 16288  0022BC                     i2l7889:
 16289                           
 16290                           ;UI.c: 234: else if(enter){
 16291  0022BC  506B               	movf	_enter,w,c
 16292  0022BE  106C               	iorwf	_enter+1,w,c
 16293  0022C0  B4D8               	btfsc	status,2,c
 16294  0022C2  D131               	goto	i2l257
 16295                           
 16296                           ;UI.c: 235: change_state_to_menu_start();
 16297  0022C4  ECE2  F023         	call	i2_change_state_to_menu_start	;wreg free
 16298                           
 16299                           ;UI.c: 236: }
 16300                           ;UI.c: 237: break;
 16301  0022C8  D12E               	goto	i2l257
 16302  0022CA                     i2l7893:
 16303                           
 16304                           ;UI.c: 240: if(up){
 16305  0022CA  5077               	movf	_up,w,c
 16306  0022CC  1078               	iorwf	_up+1,w,c
 16307  0022CE  B4D8               	btfsc	status,2,c
 16308  0022D0  D003               	goto	i2l7897
 16309                           
 16310                           ;UI.c: 241: change_state_to_menu_11();
 16311  0022D2  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 16312                           
 16313                           ;UI.c: 242: }
 16314  0022D6  D127               	goto	i2l257
 16315  0022D8                     i2l7897:
 16316                           
 16317                           ;UI.c: 243: else if(down){
 16318  0022D8  5069               	movf	_down,w,c
 16319  0022DA  106A               	iorwf	_down+1,w,c
 16320  0022DC  B4D8               	btfsc	status,2,c
 16321  0022DE  D011               	goto	i2l7913
 16322                           
 16323                           ;UI.c: 244: change_state_to_menu_23();
 16324  0022E0  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16325                           
 16326                           ;UI.c: 245: }
 16327  0022E4  D120               	goto	i2l257
 16328  0022E6                     i2l7905:
 16329                           
 16330                           ;UI.c: 252: if(up){
 16331  0022E6  5077               	movf	_up,w,c
 16332  0022E8  1078               	iorwf	_up+1,w,c
 16333  0022EA  B4D8               	btfsc	status,2,c
 16334  0022EC  D003               	goto	i2l7909
 16335                           
 16336                           ;UI.c: 253: change_state_to_menu_11();
 16337  0022EE  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 16338                           
 16339                           ;UI.c: 254: }
 16340  0022F2  D119               	goto	i2l257
 16341  0022F4                     i2l7909:
 16342                           
 16343                           ;UI.c: 255: else if(down){
 16344  0022F4  5069               	movf	_down,w,c
 16345  0022F6  106A               	iorwf	_down+1,w,c
 16346  0022F8  B4D8               	btfsc	status,2,c
 16347  0022FA  D003               	goto	i2l7913
 16348                           
 16349                           ;UI.c: 256: change_state_to_menu_23();
 16350  0022FC  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16351                           
 16352                           ;UI.c: 257: }
 16353  002300  D112               	goto	i2l257
 16354  002302                     i2l7913:
 16355                           
 16356                           ;UI.c: 258: else if(enter){
 16357  002302  506B               	movf	_enter,w,c
 16358  002304  106C               	iorwf	_enter+1,w,c
 16359  002306  B4D8               	btfsc	status,2,c
 16360  002308  D10E               	goto	i2l257
 16361                           
 16362                           ;UI.c: 259: machine_state = Sorting_state;
 16363  00230A  0E01               	movlw	1
 16364  00230C  0100               	movlb	0	; () banked
 16365  00230E  6FFC               	movwf	_machine_state& (0+255),b
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;UI.c: 260: }
 16369                           ;UI.c: 261: break;
 16370                           
 16371                           ; BSR set to: 0
 16372                           
 16373                           ; BSR set to: 0
 16374  002310  D10A               	goto	i2l257
 16375  002312                     i2l7917:
 16376                           
 16377                           ;UI.c: 264: if(up){
 16378  002312  5077               	movf	_up,w,c
 16379  002314  1078               	iorwf	_up+1,w,c
 16380  002316  B4D8               	btfsc	status,2,c
 16381  002318  D003               	goto	i2l7921
 16382                           
 16383                           ;UI.c: 265: change_state_to_menu_22();
 16384  00231A  EC70  F022         	call	i2_change_state_to_menu_22	;wreg free
 16385                           
 16386                           ;UI.c: 266: }
 16387  00231E  D103               	goto	i2l257
 16388  002320                     i2l7921:
 16389                           
 16390                           ;UI.c: 267: else if(down){
 16391  002320  5069               	movf	_down,w,c
 16392  002322  106A               	iorwf	_down+1,w,c
 16393  002324  B4D8               	btfsc	status,2,c
 16394  002326  D003               	goto	i2l7925
 16395                           
 16396                           ;UI.c: 268: change_state_to_menu_11();
 16397  002328  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 16398                           
 16399                           ;UI.c: 269: }
 16400  00232C  D0FC               	goto	i2l257
 16401  00232E                     i2l7925:
 16402                           
 16403                           ;UI.c: 270: else if(enter){
 16404  00232E  506B               	movf	_enter,w,c
 16405  002330  106C               	iorwf	_enter+1,w,c
 16406  002332  B4D8               	btfsc	status,2,c
 16407  002334  D0F8               	goto	i2l257
 16408                           
 16409                           ;UI.c: 271: change_state_to_logs_11();
 16410  002336  EC30  F023         	call	_change_state_to_logs_11	;wreg free
 16411                           
 16412                           ;UI.c: 272: }
 16413                           ;UI.c: 273: break;
 16414  00233A  D0F5               	goto	i2l257
 16415  00233C                     i2l7929:
 16416                           
 16417                           ;UI.c: 276: if(up){
 16418  00233C  5077               	movf	_up,w,c
 16419  00233E  1078               	iorwf	_up+1,w,c
 16420  002340  B4D8               	btfsc	status,2,c
 16421  002342  D003               	goto	i2l7933
 16422                           
 16423                           ;UI.c: 277: change_state_to_logs_34();
 16424  002344  ECD0  F022         	call	_change_state_to_logs_34	;wreg free
 16425                           
 16426                           ;UI.c: 278: }
 16427  002348  D0EE               	goto	i2l257
 16428  00234A                     i2l7933:
 16429                           
 16430                           ;UI.c: 279: else if(down){
 16431  00234A  5069               	movf	_down,w,c
 16432  00234C  106A               	iorwf	_down+1,w,c
 16433  00234E  B4D8               	btfsc	status,2,c
 16434  002350  D003               	goto	i2l7937
 16435                           
 16436                           ;UI.c: 280: change_state_to_logs_12();
 16437  002352  EC18  F023         	call	_change_state_to_logs_12	;wreg free
 16438                           
 16439                           ;UI.c: 281: }
 16440  002356  D0E7               	goto	i2l257
 16441  002358                     i2l7937:
 16442                           
 16443                           ;UI.c: 282: else if(enter){
 16444  002358  506B               	movf	_enter,w,c
 16445  00235A  106C               	iorwf	_enter+1,w,c
 16446  00235C  B4D8               	btfsc	status,2,c
 16447  00235E  D007               	goto	i2l7941
 16448                           
 16449                           ;UI.c: 283: dispLogs(1);
 16450  002360  0E00               	movlw	0
 16451  002362  6E13               	movwf	dispLogs@myLog+1,c
 16452  002364  0E01               	movlw	1
 16453  002366  6E12               	movwf	dispLogs@myLog,c
 16454  002368  EC1C  F024         	call	_dispLogs	;wreg free
 16455                           
 16456                           ;UI.c: 284: }
 16457  00236C  D0DC               	goto	i2l257
 16458  00236E                     i2l7941:
 16459                           
 16460                           ;UI.c: 285: else if(back){
 16461  00236E  505B               	movf	_back,w,c
 16462  002370  105C               	iorwf	_back+1,w,c
 16463  002372  B4D8               	btfsc	status,2,c
 16464  002374  D0D8               	goto	i2l257
 16465                           
 16466                           ;UI.c: 286: change_state_to_menu_23();
 16467  002376  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16468                           
 16469                           ;UI.c: 287: }
 16470                           ;UI.c: 288: break;
 16471  00237A  D0D5               	goto	i2l257
 16472  00237C                     i2l7945:
 16473                           
 16474                           ;UI.c: 291: if(up){
 16475  00237C  5077               	movf	_up,w,c
 16476  00237E  1078               	iorwf	_up+1,w,c
 16477  002380  B4D8               	btfsc	status,2,c
 16478  002382  D003               	goto	i2l7949
 16479                           
 16480                           ;UI.c: 292: change_state_to_logs_11();
 16481  002384  EC30  F023         	call	_change_state_to_logs_11	;wreg free
 16482                           
 16483                           ;UI.c: 293: }
 16484  002388  D0CE               	goto	i2l257
 16485  00238A                     i2l7949:
 16486                           
 16487                           ;UI.c: 294: else if(down){
 16488  00238A  5069               	movf	_down,w,c
 16489  00238C  106A               	iorwf	_down+1,w,c
 16490  00238E  B4D8               	btfsc	status,2,c
 16491  002390  D003               	goto	i2l7953
 16492                           
 16493                           ;UI.c: 295: change_state_to_logs_23();
 16494  002392  EC76  F023         	call	_change_state_to_logs_23	;wreg free
 16495                           
 16496                           ;UI.c: 296: }
 16497  002396  D0C7               	goto	i2l257
 16498  002398                     i2l7953:
 16499                           
 16500                           ;UI.c: 297: else if(enter){
 16501  002398  506B               	movf	_enter,w,c
 16502  00239A  106C               	iorwf	_enter+1,w,c
 16503  00239C  B4D8               	btfsc	status,2,c
 16504  00239E  D007               	goto	i2l7957
 16505                           
 16506                           ;UI.c: 298: dispLogs(2);
 16507  0023A0  0E00               	movlw	0
 16508  0023A2  6E13               	movwf	dispLogs@myLog+1,c
 16509  0023A4  0E02               	movlw	2
 16510  0023A6  6E12               	movwf	dispLogs@myLog,c
 16511  0023A8  EC1C  F024         	call	_dispLogs	;wreg free
 16512                           
 16513                           ;UI.c: 299: }
 16514  0023AC  D0BC               	goto	i2l257
 16515  0023AE                     i2l7957:
 16516                           
 16517                           ;UI.c: 300: else if(back){
 16518  0023AE  505B               	movf	_back,w,c
 16519  0023B0  105C               	iorwf	_back+1,w,c
 16520  0023B2  B4D8               	btfsc	status,2,c
 16521  0023B4  D0B8               	goto	i2l257
 16522                           
 16523                           ;UI.c: 301: change_state_to_menu_23();
 16524  0023B6  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16525                           
 16526                           ;UI.c: 302: }
 16527                           ;UI.c: 303: break;
 16528  0023BA  D0B5               	goto	i2l257
 16529  0023BC                     i2l7961:
 16530                           
 16531                           ;UI.c: 306: if(up){
 16532  0023BC  5077               	movf	_up,w,c
 16533  0023BE  1078               	iorwf	_up+1,w,c
 16534  0023C0  B4D8               	btfsc	status,2,c
 16535  0023C2  D003               	goto	i2l7965
 16536                           
 16537                           ;UI.c: 307: change_state_to_logs_11();
 16538  0023C4  EC30  F023         	call	_change_state_to_logs_11	;wreg free
 16539                           
 16540                           ;UI.c: 308: }
 16541  0023C8  D0AE               	goto	i2l257
 16542  0023CA                     i2l7965:
 16543                           
 16544                           ;UI.c: 309: else if(down){
 16545  0023CA  5069               	movf	_down,w,c
 16546  0023CC  106A               	iorwf	_down+1,w,c
 16547  0023CE  B4D8               	btfsc	status,2,c
 16548  0023D0  D003               	goto	i2l7969
 16549                           
 16550                           ;UI.c: 310: change_state_to_logs_23();
 16551  0023D2  EC76  F023         	call	_change_state_to_logs_23	;wreg free
 16552                           
 16553                           ;UI.c: 311: }
 16554  0023D6  D0A7               	goto	i2l257
 16555  0023D8                     i2l7969:
 16556                           
 16557                           ;UI.c: 312: else if(enter){
 16558  0023D8  506B               	movf	_enter,w,c
 16559  0023DA  106C               	iorwf	_enter+1,w,c
 16560  0023DC  B4D8               	btfsc	status,2,c
 16561  0023DE  D007               	goto	i2l7973
 16562                           
 16563                           ;UI.c: 313: dispLogs(2);
 16564  0023E0  0E00               	movlw	0
 16565  0023E2  6E13               	movwf	dispLogs@myLog+1,c
 16566  0023E4  0E02               	movlw	2
 16567  0023E6  6E12               	movwf	dispLogs@myLog,c
 16568  0023E8  EC1C  F024         	call	_dispLogs	;wreg free
 16569                           
 16570                           ;UI.c: 314: }
 16571  0023EC  D09C               	goto	i2l257
 16572  0023EE                     i2l7973:
 16573                           
 16574                           ;UI.c: 315: else if(back){
 16575  0023EE  505B               	movf	_back,w,c
 16576  0023F0  105C               	iorwf	_back+1,w,c
 16577  0023F2  B4D8               	btfsc	status,2,c
 16578  0023F4  D098               	goto	i2l257
 16579                           
 16580                           ;UI.c: 316: change_state_to_menu_23();
 16581  0023F6  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16582                           
 16583                           ;UI.c: 317: }
 16584                           ;UI.c: 318: break;
 16585  0023FA  D095               	goto	i2l257
 16586  0023FC                     i2l7977:
 16587                           
 16588                           ;UI.c: 321: if(up){
 16589  0023FC  5077               	movf	_up,w,c
 16590  0023FE  1078               	iorwf	_up+1,w,c
 16591  002400  B4D8               	btfsc	status,2,c
 16592  002402  D003               	goto	i2l7981
 16593                           
 16594                           ;UI.c: 322: change_state_to_logs_22();
 16595  002404  EC00  F023         	call	_change_state_to_logs_22	;wreg free
 16596                           
 16597                           ;UI.c: 323: }
 16598  002408  D08E               	goto	i2l257
 16599  00240A                     i2l7981:
 16600                           
 16601                           ;UI.c: 324: else if(down){
 16602  00240A  5069               	movf	_down,w,c
 16603  00240C  106A               	iorwf	_down+1,w,c
 16604  00240E  B4D8               	btfsc	status,2,c
 16605  002410  D003               	goto	i2l7985
 16606                           
 16607                           ;UI.c: 325: change_state_to_logs_34();
 16608  002412  ECD0  F022         	call	_change_state_to_logs_34	;wreg free
 16609                           
 16610                           ;UI.c: 326: }
 16611  002416  D087               	goto	i2l257
 16612  002418                     i2l7985:
 16613                           
 16614                           ;UI.c: 327: else if(enter){
 16615  002418  506B               	movf	_enter,w,c
 16616  00241A  106C               	iorwf	_enter+1,w,c
 16617  00241C  B4D8               	btfsc	status,2,c
 16618  00241E  D007               	goto	i2l7989
 16619                           
 16620                           ;UI.c: 328: dispLogs(3);
 16621  002420  0E00               	movlw	0
 16622  002422  6E13               	movwf	dispLogs@myLog+1,c
 16623  002424  0E03               	movlw	3
 16624  002426  6E12               	movwf	dispLogs@myLog,c
 16625  002428  EC1C  F024         	call	_dispLogs	;wreg free
 16626                           
 16627                           ;UI.c: 329: }
 16628  00242C  D07C               	goto	i2l257
 16629  00242E                     i2l7989:
 16630                           
 16631                           ;UI.c: 330: else if(back){
 16632  00242E  505B               	movf	_back,w,c
 16633  002430  105C               	iorwf	_back+1,w,c
 16634  002432  B4D8               	btfsc	status,2,c
 16635  002434  D078               	goto	i2l257
 16636                           
 16637                           ;UI.c: 331: change_state_to_menu_23();
 16638  002436  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16639                           
 16640                           ;UI.c: 332: }
 16641                           ;UI.c: 333: break;
 16642  00243A  D075               	goto	i2l257
 16643  00243C                     i2l7993:
 16644                           
 16645                           ;UI.c: 336: if(up){
 16646  00243C  5077               	movf	_up,w,c
 16647  00243E  1078               	iorwf	_up+1,w,c
 16648  002440  B4D8               	btfsc	status,2,c
 16649  002442  D003               	goto	i2l7997
 16650                           
 16651                           ;UI.c: 337: change_state_to_logs_22();
 16652  002444  EC00  F023         	call	_change_state_to_logs_22	;wreg free
 16653                           
 16654                           ;UI.c: 338: }
 16655  002448  D06E               	goto	i2l257
 16656  00244A                     i2l7997:
 16657                           
 16658                           ;UI.c: 339: else if(down){
 16659  00244A  5069               	movf	_down,w,c
 16660  00244C  106A               	iorwf	_down+1,w,c
 16661  00244E  B4D8               	btfsc	status,2,c
 16662  002450  D003               	goto	i2l8001
 16663                           
 16664                           ;UI.c: 340: change_state_to_logs_34();
 16665  002452  ECD0  F022         	call	_change_state_to_logs_34	;wreg free
 16666                           
 16667                           ;UI.c: 341: }
 16668  002456  D067               	goto	i2l257
 16669  002458                     i2l8001:
 16670                           
 16671                           ;UI.c: 342: else if(enter){
 16672  002458  506B               	movf	_enter,w,c
 16673  00245A  106C               	iorwf	_enter+1,w,c
 16674  00245C  B4D8               	btfsc	status,2,c
 16675  00245E  D007               	goto	i2l8005
 16676                           
 16677                           ;UI.c: 343: dispLogs(3);
 16678  002460  0E00               	movlw	0
 16679  002462  6E13               	movwf	dispLogs@myLog+1,c
 16680  002464  0E03               	movlw	3
 16681  002466  6E12               	movwf	dispLogs@myLog,c
 16682  002468  EC1C  F024         	call	_dispLogs	;wreg free
 16683                           
 16684                           ;UI.c: 344: }
 16685  00246C  D05C               	goto	i2l257
 16686  00246E                     i2l8005:
 16687                           
 16688                           ;UI.c: 345: else if(back){
 16689  00246E  505B               	movf	_back,w,c
 16690  002470  105C               	iorwf	_back+1,w,c
 16691  002472  B4D8               	btfsc	status,2,c
 16692  002474  D058               	goto	i2l257
 16693                           
 16694                           ;UI.c: 346: change_state_to_menu_23();
 16695  002476  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16696                           
 16697                           ;UI.c: 347: }
 16698                           ;UI.c: 348: break;
 16699  00247A  D055               	goto	i2l257
 16700  00247C                     i2l8009:
 16701                           
 16702                           ;UI.c: 351: if(up){
 16703  00247C  5077               	movf	_up,w,c
 16704  00247E  1078               	iorwf	_up+1,w,c
 16705  002480  B4D8               	btfsc	status,2,c
 16706  002482  D003               	goto	i2l8013
 16707                           
 16708                           ;UI.c: 352: change_state_to_logs_33();
 16709  002484  ECE8  F022         	call	_change_state_to_logs_33	;wreg free
 16710                           
 16711                           ;UI.c: 353: }
 16712  002488  D04E               	goto	i2l257
 16713  00248A                     i2l8013:
 16714                           
 16715                           ;UI.c: 354: else if(down){
 16716  00248A  5069               	movf	_down,w,c
 16717  00248C  106A               	iorwf	_down+1,w,c
 16718  00248E  B4D8               	btfsc	status,2,c
 16719  002490  D003               	goto	i2l8017
 16720                           
 16721                           ;UI.c: 355: change_state_to_logs_11();
 16722  002492  EC30  F023         	call	_change_state_to_logs_11	;wreg free
 16723                           
 16724                           ;UI.c: 356: }
 16725  002496  D047               	goto	i2l257
 16726  002498                     i2l8017:
 16727                           
 16728                           ;UI.c: 357: else if(enter){
 16729  002498  506B               	movf	_enter,w,c
 16730  00249A  106C               	iorwf	_enter+1,w,c
 16731  00249C  B4D8               	btfsc	status,2,c
 16732  00249E  D007               	goto	i2l8021
 16733                           
 16734                           ;UI.c: 358: dispLogs(4);
 16735  0024A0  0E00               	movlw	0
 16736  0024A2  6E13               	movwf	dispLogs@myLog+1,c
 16737  0024A4  0E04               	movlw	4
 16738  0024A6  6E12               	movwf	dispLogs@myLog,c
 16739  0024A8  EC1C  F024         	call	_dispLogs	;wreg free
 16740                           
 16741                           ;UI.c: 359: }
 16742  0024AC  D03C               	goto	i2l257
 16743  0024AE                     i2l8021:
 16744                           
 16745                           ;UI.c: 360: else if(back){
 16746  0024AE  505B               	movf	_back,w,c
 16747  0024B0  105C               	iorwf	_back+1,w,c
 16748  0024B2  B4D8               	btfsc	status,2,c
 16749  0024B4  D038               	goto	i2l257
 16750                           
 16751                           ;UI.c: 361: change_state_to_menu_23();
 16752  0024B6  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 16753                           
 16754                           ;UI.c: 367: }
 16755                           
 16756                           ;UI.c: 366: break;
 16757                           
 16758                           ;UI.c: 365: default:
 16759                           
 16760                           ;UI.c: 362: }
 16761                           ;UI.c: 363: break;
 16762  0024BA  D035               	goto	i2l257
 16763  0024BC                     i2l8027:
 16764  0024BC  C0E0  F043         	movff	_cur_state,??_updateMenu
 16765  0024C0  C0E1  F044         	movff	_cur_state+1,??_updateMenu+1
 16766                           
 16767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16768                           ; Switch size 1, requested type "space"
 16769                           ; Number of cases is 3, Range of values is 0 to 4
 16770                           ; switch strategies available:
 16771                           ; Name         Instructions Cycles
 16772                           ; simple_byte           10     6 (average)
 16773                           ;	Chosen strategy is simple_byte
 16774  0024C4  5044               	movf	??_updateMenu+1,w,c
 16775  0024C6  0A00               	xorlw	0	; case 0
 16776  0024C8  B4D8               	btfsc	status,2,c
 16777  0024CA  D007               	goto	i2l8641
 16778  0024CC  0A03               	xorlw	3	; case 3
 16779  0024CE  B4D8               	btfsc	status,2,c
 16780  0024D0  D015               	goto	i2l8643
 16781  0024D2  0A07               	xorlw	7	; case 4
 16782  0024D4  B4D8               	btfsc	status,2,c
 16783  0024D6  D020               	goto	i2l8645
 16784  0024D8  D026               	goto	i2l257
 16785  0024DA                     i2l8641:
 16786                           
 16787                           ; Switch size 1, requested type "space"
 16788                           ; Number of cases is 5, Range of values is 0 to 23
 16789                           ; switch strategies available:
 16790                           ; Name         Instructions Cycles
 16791                           ; simple_byte           16     9 (average)
 16792                           ;	Chosen strategy is simple_byte
 16793  0024DA  5043               	movf	??_updateMenu,w,c
 16794  0024DC  0A00               	xorlw	0	; case 0
 16795  0024DE  B4D8               	btfsc	status,2,c
 16796  0024E0  D6DC               	goto	i2l7879
 16797  0024E2  0A0B               	xorlw	11	; case 11
 16798  0024E4  B4D8               	btfsc	status,2,c
 16799  0024E6  D6DC               	goto	i2l7881
 16800  0024E8  0A07               	xorlw	7	; case 12
 16801  0024EA  B4D8               	btfsc	status,2,c
 16802  0024EC  D6EE               	goto	i2l7893
 16803  0024EE  0A1A               	xorlw	26	; case 22
 16804  0024F0  B4D8               	btfsc	status,2,c
 16805  0024F2  D6F9               	goto	i2l7905
 16806  0024F4  0A01               	xorlw	1	; case 23
 16807  0024F6  B4D8               	btfsc	status,2,c
 16808  0024F8  D70C               	goto	i2l7917
 16809  0024FA  D015               	goto	i2l257
 16810  0024FC                     i2l8643:
 16811                           
 16812                           ; Switch size 1, requested type "space"
 16813                           ; Number of cases is 4, Range of values is 243 to 255
 16814                           ; switch strategies available:
 16815                           ; Name         Instructions Cycles
 16816                           ; simple_byte           13     7 (average)
 16817                           ;	Chosen strategy is simple_byte
 16818  0024FC  5043               	movf	??_updateMenu,w,c
 16819  0024FE  0AF3               	xorlw	243	; case 243
 16820  002500  B4D8               	btfsc	status,2,c
 16821  002502  D71C               	goto	i2l7929
 16822  002504  0A07               	xorlw	7	; case 244
 16823  002506  B4D8               	btfsc	status,2,c
 16824  002508  D739               	goto	i2l7945
 16825  00250A  0A0A               	xorlw	10	; case 254
 16826  00250C  B4D8               	btfsc	status,2,c
 16827  00250E  D756               	goto	i2l7961
 16828  002510  0A01               	xorlw	1	; case 255
 16829  002512  B4D8               	btfsc	status,2,c
 16830  002514  D773               	goto	i2l7977
 16831  002516  D007               	goto	i2l257
 16832  002518                     i2l8645:
 16833                           
 16834                           ; Switch size 1, requested type "space"
 16835                           ; Number of cases is 2, Range of values is 9 to 10
 16836                           ; switch strategies available:
 16837                           ; Name         Instructions Cycles
 16838                           ; simple_byte            7     4 (average)
 16839                           ;	Chosen strategy is simple_byte
 16840  002518  5043               	movf	??_updateMenu,w,c
 16841  00251A  0A09               	xorlw	9	; case 9
 16842  00251C  B4D8               	btfsc	status,2,c
 16843  00251E  D78E               	goto	i2l7993
 16844  002520  0A03               	xorlw	3	; case 10
 16845  002522  B4D8               	btfsc	status,2,c
 16846  002524  D7AB               	goto	i2l8009
 16847  002526                     i2l257:
 16848                           
 16849                           ;UI.c: 368: }
 16850                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16851  002526  8EF2               	bsf	intcon,7,c	;volatile
 16852  002528  0012               	return		;funcret
 16853  00252A                     __end_of_updateMenu:
 16854                           	opt stack 0
 16855                           pclatu	equ	0xFFB
 16856                           pclath	equ	0xFFA
 16857                           tblptru	equ	0xFF8
 16858                           tblptrh	equ	0xFF7
 16859                           tblptrl	equ	0xFF6
 16860                           tablat	equ	0xFF5
 16861                           prodh	equ	0xFF4
 16862                           prodl	equ	0xFF3
 16863                           intcon	equ	0xFF2
 16864                           intcon2	equ	0xFF1
 16865                           intcon3	equ	0xFF0
 16866                           indf0	equ	0xFEF
 16867                           postinc0	equ	0xFEE
 16868                           fsr0h	equ	0xFEA
 16869                           fsr0l	equ	0xFE9
 16870                           wreg	equ	0xFE8
 16871                           postdec1	equ	0xFE5
 16872                           fsr1h	equ	0xFE2
 16873                           fsr1l	equ	0xFE1
 16874                           indf2	equ	0xFDF
 16875                           postinc2	equ	0xFDE
 16876                           postdec2	equ	0xFDD
 16877                           fsr2h	equ	0xFDA
 16878                           fsr2l	equ	0xFD9
 16879                           status	equ	0xFD8
 16880                           
 16881 ;; *************** function i2_change_state_to_menu_start *****************
 16882 ;; Defined at:
 16883 ;;		line 474 in file "UI.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;		None
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;                  1    wreg      void 
 16890 ;; Registers used:
 16891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;Total ram usage:        0 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    4
 16904 ;; This function calls:
 16905 ;;		i2_lcdInst
 16906 ;;		i2_printRTC
 16907 ;;		i2_printf
 16908 ;; This function is called by:
 16909 ;;		_updateMenu
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text61
 16914  0047C4                     __ptext61:
 16915                           	opt stack 0
 16916  0047C4                     i2_change_state_to_menu_start:
 16917                           	opt stack 18
 16918                           
 16919                           ;UI.c: 475: cur_state = 0;
 16920                           
 16921                           ;incstack = 0
 16922  0047C4  0E00               	movlw	0
 16923  0047C6  0100               	movlb	0	; () banked
 16924  0047C8  6FE1               	movwf	(_cur_state+1)& (0+255),b
 16925  0047CA  0E00               	movlw	0
 16926  0047CC  6FE0               	movwf	_cur_state& (0+255),b
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;UI.c: 477: lcdInst(0b10000000);;
 16930  0047CE  0E80               	movlw	128
 16931  0047D0  ECAA  F024         	call	i2_lcdInst
 16932                           
 16933                           ;UI.c: 478: printRTC();
 16934  0047D4  EC95  F012         	call	i2_printRTC	;wreg free
 16935                           
 16936                           ;UI.c: 479: lcdInst(0b11000000);;
 16937  0047D8  0EC0               	movlw	192
 16938  0047DA  ECAA  F024         	call	i2_lcdInst
 16939                           
 16940                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 16941  0047DE  0EF7               	movlw	low STR_30
 16942  0047E0  6E0D               	movwf	i2printf@f,c
 16943  0047E2  0EFD               	movlw	high STR_30
 16944  0047E4  6E0E               	movwf	i2printf@f+1,c
 16945  0047E6  EC9A  F00C         	call	i2_printf	;wreg free
 16946  0047EA  0012               	return		;funcret
 16947  0047EC                     __end_ofi2_change_state_to_menu_start:
 16948                           	opt stack 0
 16949                           pclatu	equ	0xFFB
 16950                           pclath	equ	0xFFA
 16951                           tblptru	equ	0xFF8
 16952                           tblptrh	equ	0xFF7
 16953                           tblptrl	equ	0xFF6
 16954                           tablat	equ	0xFF5
 16955                           prodh	equ	0xFF4
 16956                           prodl	equ	0xFF3
 16957                           intcon	equ	0xFF2
 16958                           intcon2	equ	0xFF1
 16959                           intcon3	equ	0xFF0
 16960                           indf0	equ	0xFEF
 16961                           postinc0	equ	0xFEE
 16962                           fsr0h	equ	0xFEA
 16963                           fsr0l	equ	0xFE9
 16964                           wreg	equ	0xFE8
 16965                           postdec1	equ	0xFE5
 16966                           fsr1h	equ	0xFE2
 16967                           fsr1l	equ	0xFE1
 16968                           indf2	equ	0xFDF
 16969                           postinc2	equ	0xFDE
 16970                           postdec2	equ	0xFDD
 16971                           fsr2h	equ	0xFDA
 16972                           fsr2l	equ	0xFD9
 16973                           status	equ	0xFD8
 16974                           
 16975 ;; *************** function i2_printRTC *****************
 16976 ;; Defined at:
 16977 ;;		line 63 in file "RTC.c"
 16978 ;; Parameters:    Size  Location     Type
 16979 ;;		None
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;  printRTC       14   44[COMRAM] int [7]
 16982 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16983 ;;  printRTC        2   64[COMRAM] int 
 16984 ;;  printRTC        2   58[COMRAM] int 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;                  1    wreg      void 
 16987 ;; Registers used:
 16988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 0/0
 16991 ;;		On exit  : 0/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16995 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;Total ram usage:       25 bytes
 16999 ;; Hardware stack levels used:    1
 17000 ;; Hardware stack levels required when called:    3
 17001 ;; This function calls:
 17002 ;;		i2_getRTC
 17003 ;;		i2_lcdInst
 17004 ;;		i2_printf
 17005 ;;		i2_strcpy
 17006 ;; This function is called by:
 17007 ;;		i2_change_state_to_menu_start
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text62
 17012  00252A                     __ptext62:
 17013                           	opt stack 0
 17014  00252A                     i2_printRTC:
 17015                           	opt stack 18
 17016                           
 17017                           ;RTC.c: 64: getRTC();
 17018                           
 17019                           ;incstack = 0
 17020  00252A  EC0F  F01F         	call	i2_getRTC	;wreg free
 17021                           
 17022                           ;RTC.c: 65: char month[] = "MMM";
 17023  00252E  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 17024  002532  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 17025  002536  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 17026  00253A  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 17027                           
 17028                           ;RTC.c: 66: int INT_time[7];
 17029                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17030  00253E  0E00               	movlw	0
 17031  002540  6E42               	movwf	i2printRTC@i+1,c
 17032  002542  0E00               	movlw	0
 17033  002544  6E41               	movwf	i2printRTC@i,c
 17034  002546  BE42               	btfsc	i2printRTC@i+1,7,c
 17035  002548  D006               	goto	i2l6241
 17036  00254A  5042               	movf	i2printRTC@i+1,w,c
 17037  00254C  E135               	bnz	i2l602
 17038  00254E  0E07               	movlw	7
 17039  002550  5C41               	subwf	i2printRTC@i,w,c
 17040  002552  B0D8               	btfsc	status,0,c
 17041  002554  D031               	goto	i2l602
 17042  002556                     i2l6241:
 17043                           
 17044                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17045  002556  0E24               	movlw	low _time
 17046  002558  2441               	addwf	i2printRTC@i,w,c
 17047  00255A  6ED9               	movwf	fsr2l,c
 17048  00255C  0E01               	movlw	high _time
 17049  00255E  2042               	addwfc	i2printRTC@i+1,w,c
 17050  002560  6EDA               	movwf	fsr2h,c
 17051  002562  50DF               	movf	indf2,w,c
 17052  002564  6E2A               	movwf	??i2_printRTC& (0+255),c
 17053  002566  3A2A               	swapf	??i2_printRTC,f,c
 17054  002568  0E0F               	movlw	15
 17055  00256A  162A               	andwf	??i2_printRTC,f,c
 17056  00256C  0E0F               	movlw	15
 17057  00256E  162A               	andwf	??i2_printRTC,f,c
 17058  002570  502A               	movf	??i2_printRTC,w,c
 17059  002572  0D0A               	mullw	10
 17060  002574  0E24               	movlw	low _time
 17061  002576  2441               	addwf	i2printRTC@i,w,c
 17062  002578  6ED9               	movwf	fsr2l,c
 17063  00257A  0E01               	movlw	high _time
 17064  00257C  2042               	addwfc	i2printRTC@i+1,w,c
 17065  00257E  6EDA               	movwf	fsr2h,c
 17066  002580  50DF               	movf	indf2,w,c
 17067  002582  0B0F               	andlw	15
 17068  002584  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17069  002586  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17070  002588  50F3               	movf	prodl,w,c
 17071  00258A  262B               	addwf	??i2_printRTC+1,f,c
 17072  00258C  50F4               	movf	prodh,w,c
 17073  00258E  222C               	addwfc	??i2_printRTC+2,f,c
 17074  002590  90D8               	bcf	status,0,c
 17075  002592  3441               	rlcf	i2printRTC@i,w,c
 17076  002594  6ED9               	movwf	fsr2l,c
 17077  002596  3442               	rlcf	i2printRTC@i+1,w,c
 17078  002598  6EDA               	movwf	fsr2h,c
 17079  00259A  0E2D               	movlw	low i2printRTC@INT_time
 17080  00259C  26D9               	addwf	fsr2l,f,c
 17081  00259E  0E00               	movlw	high i2printRTC@INT_time
 17082  0025A0  22DA               	addwfc	fsr2h,f,c
 17083  0025A2  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17084  0025A6  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17085  0025AA  4A41               	infsnz	i2printRTC@i,f,c
 17086  0025AC  2A42               	incf	i2printRTC@i+1,f,c
 17087  0025AE  BE42               	btfsc	i2printRTC@i+1,7,c
 17088  0025B0  D7D2               	goto	i2l6241
 17089  0025B2  5042               	movf	i2printRTC@i+1,w,c
 17090  0025B4  E101               	bnz	i2u479_40
 17091  0025B6  D7CB               	goto	L10
 17092  0025B8                     i2u479_40:
 17093  0025B8                     i2l602:
 17094                           
 17095                           ;RTC.c: 69: }
 17096                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17097  0025B8  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17098  0025BC  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17099                           
 17100                           ;RTC.c: 71: switch(RTC_month){
 17101  0025C0  D084               	goto	i2l6273
 17102  0025C2                     i2l6247:
 17103                           
 17104                           ;RTC.c: 73: strcpy(month, "JAN");
 17105  0025C2  0E3D               	movlw	low i2printRTC@month
 17106  0025C4  6E01               	movwf	i2strcpy@to,c
 17107  0025C6  0E00               	movlw	high i2printRTC@month
 17108  0025C8  6E02               	movwf	i2strcpy@to+1,c
 17109  0025CA  0EDB               	movlw	low STR_8
 17110  0025CC  6E03               	movwf	i2strcpy@from,c
 17111  0025CE  0EFF               	movlw	high STR_8
 17112  0025D0  6E04               	movwf	i2strcpy@from+1,c
 17113  0025D2  EC57  F022         	call	i2_strcpy	;wreg free
 17114                           
 17115                           ;RTC.c: 74: break;
 17116  0025D6  D0A6               	goto	i2l6275
 17117  0025D8                     i2l6249:
 17118                           
 17119                           ;RTC.c: 76: strcpy(month, "FEB");
 17120  0025D8  0E3D               	movlw	low i2printRTC@month
 17121  0025DA  6E01               	movwf	i2strcpy@to,c
 17122  0025DC  0E00               	movlw	high i2printRTC@month
 17123  0025DE  6E02               	movwf	i2strcpy@to+1,c
 17124  0025E0  0ECB               	movlw	low STR_9
 17125  0025E2  6E03               	movwf	i2strcpy@from,c
 17126  0025E4  0EFF               	movlw	high STR_9
 17127  0025E6  6E04               	movwf	i2strcpy@from+1,c
 17128  0025E8  EC57  F022         	call	i2_strcpy	;wreg free
 17129                           
 17130                           ;RTC.c: 77: break;
 17131  0025EC  D09B               	goto	i2l6275
 17132  0025EE                     i2l6251:
 17133                           
 17134                           ;RTC.c: 79: strcpy(month, "MAR");
 17135  0025EE  0E3D               	movlw	low i2printRTC@month
 17136  0025F0  6E01               	movwf	i2strcpy@to,c
 17137  0025F2  0E00               	movlw	high i2printRTC@month
 17138  0025F4  6E02               	movwf	i2strcpy@to+1,c
 17139  0025F6  0EE7               	movlw	low STR_10
 17140  0025F8  6E03               	movwf	i2strcpy@from,c
 17141  0025FA  0EFF               	movlw	high STR_10
 17142  0025FC  6E04               	movwf	i2strcpy@from+1,c
 17143  0025FE  EC57  F022         	call	i2_strcpy	;wreg free
 17144                           
 17145                           ;RTC.c: 80: break;
 17146  002602  D090               	goto	i2l6275
 17147  002604                     i2l6253:
 17148                           
 17149                           ;RTC.c: 82: strcpy(month, "APR");
 17150  002604  0E3D               	movlw	low i2printRTC@month
 17151  002606  6E01               	movwf	i2strcpy@to,c
 17152  002608  0E00               	movlw	high i2printRTC@month
 17153  00260A  6E02               	movwf	i2strcpy@to+1,c
 17154  00260C  0EEB               	movlw	low STR_11
 17155  00260E  6E03               	movwf	i2strcpy@from,c
 17156  002610  0EFF               	movlw	high STR_11
 17157  002612  6E04               	movwf	i2strcpy@from+1,c
 17158  002614  EC57  F022         	call	i2_strcpy	;wreg free
 17159                           
 17160                           ;RTC.c: 83: break;
 17161  002618  D085               	goto	i2l6275
 17162  00261A                     i2l6255:
 17163                           
 17164                           ;RTC.c: 85: strcpy(month, "MAY");
 17165  00261A  0E3D               	movlw	low i2printRTC@month
 17166  00261C  6E01               	movwf	i2strcpy@to,c
 17167  00261E  0E00               	movlw	high i2printRTC@month
 17168  002620  6E02               	movwf	i2strcpy@to+1,c
 17169  002622  0EFB               	movlw	low STR_12
 17170  002624  6E03               	movwf	i2strcpy@from,c
 17171  002626  0EFF               	movlw	high STR_12
 17172  002628  6E04               	movwf	i2strcpy@from+1,c
 17173  00262A  EC57  F022         	call	i2_strcpy	;wreg free
 17174                           
 17175                           ;RTC.c: 86: break;
 17176  00262E  D07A               	goto	i2l6275
 17177  002630                     i2l6257:
 17178                           
 17179                           ;RTC.c: 88: strcpy(month, "JUN");
 17180  002630  0E3D               	movlw	low i2printRTC@month
 17181  002632  6E01               	movwf	i2strcpy@to,c
 17182  002634  0E00               	movlw	high i2printRTC@month
 17183  002636  6E02               	movwf	i2strcpy@to+1,c
 17184  002638  0EDF               	movlw	low STR_13
 17185  00263A  6E03               	movwf	i2strcpy@from,c
 17186  00263C  0EFF               	movlw	high STR_13
 17187  00263E  6E04               	movwf	i2strcpy@from+1,c
 17188  002640  EC57  F022         	call	i2_strcpy	;wreg free
 17189                           
 17190                           ;RTC.c: 89: break;
 17191  002644  D06F               	goto	i2l6275
 17192  002646                     i2l6259:
 17193                           
 17194                           ;RTC.c: 91: strcpy(month, "JUL");
 17195  002646  0E3D               	movlw	low i2printRTC@month
 17196  002648  6E01               	movwf	i2strcpy@to,c
 17197  00264A  0E00               	movlw	high i2printRTC@month
 17198  00264C  6E02               	movwf	i2strcpy@to+1,c
 17199  00264E  0ED7               	movlw	low STR_14
 17200  002650  6E03               	movwf	i2strcpy@from,c
 17201  002652  0EFF               	movlw	high STR_14
 17202  002654  6E04               	movwf	i2strcpy@from+1,c
 17203  002656  EC57  F022         	call	i2_strcpy	;wreg free
 17204                           
 17205                           ;RTC.c: 92: break;
 17206  00265A  D064               	goto	i2l6275
 17207  00265C                     i2l6261:
 17208                           
 17209                           ;RTC.c: 94: strcpy(month, "AUG");
 17210  00265C  0E3D               	movlw	low i2printRTC@month
 17211  00265E  6E01               	movwf	i2strcpy@to,c
 17212  002660  0E00               	movlw	high i2printRTC@month
 17213  002662  6E02               	movwf	i2strcpy@to+1,c
 17214  002664  0ED3               	movlw	low STR_15
 17215  002666  6E03               	movwf	i2strcpy@from,c
 17216  002668  0EFF               	movlw	high STR_15
 17217  00266A  6E04               	movwf	i2strcpy@from+1,c
 17218  00266C  EC57  F022         	call	i2_strcpy	;wreg free
 17219                           
 17220                           ;RTC.c: 95: break;
 17221  002670  D059               	goto	i2l6275
 17222  002672                     i2l6263:
 17223                           
 17224                           ;RTC.c: 97: strcpy(month, "SEP");
 17225  002672  0E3D               	movlw	low i2printRTC@month
 17226  002674  6E01               	movwf	i2strcpy@to,c
 17227  002676  0E00               	movlw	high i2printRTC@month
 17228  002678  6E02               	movwf	i2strcpy@to+1,c
 17229  00267A  0EE3               	movlw	low STR_16
 17230  00267C  6E03               	movwf	i2strcpy@from,c
 17231  00267E  0EFF               	movlw	high STR_16
 17232  002680  6E04               	movwf	i2strcpy@from+1,c
 17233  002682  EC57  F022         	call	i2_strcpy	;wreg free
 17234                           
 17235                           ;RTC.c: 98: break;
 17236  002686  D04E               	goto	i2l6275
 17237  002688                     i2l6265:
 17238                           
 17239                           ;RTC.c: 100: strcpy(month, "OCT");
 17240  002688  0E3D               	movlw	low i2printRTC@month
 17241  00268A  6E01               	movwf	i2strcpy@to,c
 17242  00268C  0E00               	movlw	high i2printRTC@month
 17243  00268E  6E02               	movwf	i2strcpy@to+1,c
 17244  002690  0EF3               	movlw	low STR_17
 17245  002692  6E03               	movwf	i2strcpy@from,c
 17246  002694  0EFF               	movlw	high STR_17
 17247  002696  6E04               	movwf	i2strcpy@from+1,c
 17248  002698  EC57  F022         	call	i2_strcpy	;wreg free
 17249                           
 17250                           ;RTC.c: 101: break;
 17251  00269C  D043               	goto	i2l6275
 17252  00269E                     i2l6267:
 17253                           
 17254                           ;RTC.c: 103: strcpy(month, "NOV");
 17255  00269E  0E3D               	movlw	low i2printRTC@month
 17256  0026A0  6E01               	movwf	i2strcpy@to,c
 17257  0026A2  0E00               	movlw	high i2printRTC@month
 17258  0026A4  6E02               	movwf	i2strcpy@to+1,c
 17259  0026A6  0EF7               	movlw	low STR_18
 17260  0026A8  6E03               	movwf	i2strcpy@from,c
 17261  0026AA  0EFF               	movlw	high STR_18
 17262  0026AC  6E04               	movwf	i2strcpy@from+1,c
 17263  0026AE  EC57  F022         	call	i2_strcpy	;wreg free
 17264                           
 17265                           ;RTC.c: 104: break;
 17266  0026B2  D038               	goto	i2l6275
 17267  0026B4                     i2l6269:
 17268                           
 17269                           ;RTC.c: 106: strcpy(month, "DEC");
 17270  0026B4  0E3D               	movlw	low i2printRTC@month
 17271  0026B6  6E01               	movwf	i2strcpy@to,c
 17272  0026B8  0E00               	movlw	high i2printRTC@month
 17273  0026BA  6E02               	movwf	i2strcpy@to+1,c
 17274  0026BC  0ECF               	movlw	low STR_19
 17275  0026BE  6E03               	movwf	i2strcpy@from,c
 17276  0026C0  0EFF               	movlw	high STR_19
 17277  0026C2  6E04               	movwf	i2strcpy@from+1,c
 17278  0026C4  EC57  F022         	call	i2_strcpy	;wreg free
 17279                           
 17280                           ;RTC.c: 108: }
 17281                           
 17282                           ;RTC.c: 107: break;
 17283  0026C8  D02D               	goto	i2l6275
 17284  0026CA                     i2l6273:
 17285  0026CA  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17286  0026CE  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17287                           
 17288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17289                           ; Switch size 1, requested type "space"
 17290                           ; Number of cases is 1, Range of values is 0 to 0
 17291                           ; switch strategies available:
 17292                           ; Name         Instructions Cycles
 17293                           ; simple_byte            4     3 (average)
 17294                           ;	Chosen strategy is simple_byte
 17295  0026D2  502B               	movf	??i2_printRTC+1,w,c
 17296  0026D4  0A00               	xorlw	0	; case 0
 17297  0026D6  A4D8               	btfss	status,2,c
 17298  0026D8  D025               	goto	i2l6275
 17299                           
 17300                           ; Switch size 1, requested type "space"
 17301                           ; Number of cases is 12, Range of values is 1 to 12
 17302                           ; switch strategies available:
 17303                           ; Name         Instructions Cycles
 17304                           ; simple_byte           37    19 (average)
 17305                           ;	Chosen strategy is simple_byte
 17306  0026DA  502A               	movf	??i2_printRTC,w,c
 17307  0026DC  0A01               	xorlw	1	; case 1
 17308  0026DE  B4D8               	btfsc	status,2,c
 17309  0026E0  D770               	goto	i2l6247
 17310  0026E2  0A03               	xorlw	3	; case 2
 17311  0026E4  B4D8               	btfsc	status,2,c
 17312  0026E6  D778               	goto	i2l6249
 17313  0026E8  0A01               	xorlw	1	; case 3
 17314  0026EA  B4D8               	btfsc	status,2,c
 17315  0026EC  D780               	goto	i2l6251
 17316  0026EE  0A07               	xorlw	7	; case 4
 17317  0026F0  B4D8               	btfsc	status,2,c
 17318  0026F2  D788               	goto	i2l6253
 17319  0026F4  0A01               	xorlw	1	; case 5
 17320  0026F6  B4D8               	btfsc	status,2,c
 17321  0026F8  D790               	goto	i2l6255
 17322  0026FA  0A03               	xorlw	3	; case 6
 17323  0026FC  B4D8               	btfsc	status,2,c
 17324  0026FE  D798               	goto	i2l6257
 17325  002700  0A01               	xorlw	1	; case 7
 17326  002702  B4D8               	btfsc	status,2,c
 17327  002704  D7A0               	goto	i2l6259
 17328  002706  0A0F               	xorlw	15	; case 8
 17329  002708  B4D8               	btfsc	status,2,c
 17330  00270A  D7A8               	goto	i2l6261
 17331  00270C  0A01               	xorlw	1	; case 9
 17332  00270E  B4D8               	btfsc	status,2,c
 17333  002710  D7B0               	goto	i2l6263
 17334  002712  0A03               	xorlw	3	; case 10
 17335  002714  B4D8               	btfsc	status,2,c
 17336  002716  D7B8               	goto	i2l6265
 17337  002718  0A01               	xorlw	1	; case 11
 17338  00271A  B4D8               	btfsc	status,2,c
 17339  00271C  D7C0               	goto	i2l6267
 17340  00271E  0A07               	xorlw	7	; case 12
 17341  002720  B4D8               	btfsc	status,2,c
 17342  002722  D7C8               	goto	i2l6269
 17343  002724                     i2l6275:
 17344                           
 17345                           ;RTC.c: 109: lcdInst(0b10000000);;
 17346  002724  0E80               	movlw	128
 17347  002726  ECAA  F024         	call	i2_lcdInst
 17348                           
 17349                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17350  00272A  0E1C               	movlw	low STR_21
 17351  00272C  6E0D               	movwf	i2printf@f,c
 17352  00272E  0EFB               	movlw	high STR_21
 17353  002730  6E0E               	movwf	i2printf@f+1,c
 17354  002732  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17355  002736  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17356  00273A  0E3D               	movlw	low i2printRTC@month
 17357  00273C  6E11               	movwf	?i2_printf+4,c
 17358  00273E  0E00               	movlw	high i2printRTC@month
 17359  002740  6E12               	movwf	?i2_printf+5,c
 17360  002742  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17361  002746  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17362  00274A  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17363  00274E  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17364  002752  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17365  002756  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17366  00275A  EC9A  F00C         	call	i2_printf	;wreg free
 17367  00275E  0012               	return		;funcret
 17368  002760                     __end_ofi2_printRTC:
 17369                           	opt stack 0
 17370                           pclatu	equ	0xFFB
 17371                           pclath	equ	0xFFA
 17372                           tblptru	equ	0xFF8
 17373                           tblptrh	equ	0xFF7
 17374                           tblptrl	equ	0xFF6
 17375                           tablat	equ	0xFF5
 17376                           prodh	equ	0xFF4
 17377                           prodl	equ	0xFF3
 17378                           intcon	equ	0xFF2
 17379                           intcon2	equ	0xFF1
 17380                           intcon3	equ	0xFF0
 17381                           indf0	equ	0xFEF
 17382                           postinc0	equ	0xFEE
 17383                           fsr0h	equ	0xFEA
 17384                           fsr0l	equ	0xFE9
 17385                           wreg	equ	0xFE8
 17386                           postdec1	equ	0xFE5
 17387                           fsr1h	equ	0xFE2
 17388                           fsr1l	equ	0xFE1
 17389                           indf2	equ	0xFDF
 17390                           postinc2	equ	0xFDE
 17391                           postdec2	equ	0xFDD
 17392                           fsr2h	equ	0xFDA
 17393                           fsr2l	equ	0xFD9
 17394                           status	equ	0xFD8
 17395                           
 17396 ;; *************** function i2_strcpy *****************
 17397 ;; Defined at:
 17398 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17399 ;; Parameters:    Size  Location     Type
 17400 ;;  to              2    0[COMRAM] PTR unsigned char 
 17401 ;;		 -> printRTC@month(4), UI@month(4), 
 17402 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17403 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17404 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17405 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17406 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17407 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17408 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17409 ;;		 -> STR_8(4), 
 17410 ;; Auto vars:     Size  Location     Type
 17411 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17412 ;;		 -> printRTC@month(4), UI@month(4), 
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  2    0[COMRAM] PTR unsigned char 
 17415 ;; Registers used:
 17416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17425 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;Total ram usage:        6 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; This function calls:
 17429 ;;		Nothing
 17430 ;; This function is called by:
 17431 ;;		i2_printRTC
 17432 ;; This function uses a non-reentrant model
 17433 ;;
 17434                           
 17435                           	psect	text63
 17436  0044AE                     __ptext63:
 17437                           	opt stack 0
 17438  0044AE                     i2_strcpy:
 17439                           	opt stack 20
 17440                           
 17441                           ;incstack = 0
 17442  0044AE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17443  0044B2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17444  0044B6  D004               	goto	i2l5911
 17445  0044B8                     i2l5909:
 17446  0044B8  4A05               	infsnz	i2strcpy@cp,f,c
 17447  0044BA  2A06               	incf	i2strcpy@cp+1,f,c
 17448  0044BC  4A03               	infsnz	i2strcpy@from,f,c
 17449  0044BE  2A04               	incf	i2strcpy@from+1,f,c
 17450  0044C0                     i2l5911:
 17451  0044C0  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17452  0044C4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17453  0044C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17454  0044C8  6AF8               	clrf	tblptru,c
 17455  0044CA                     	endif
 17456  0044CA                     	if	0	;tblptru may be non-zero
 17457  0044CA                     	endif
 17458  0044CA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17459  0044CE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17460  0044D2  0008               	tblrd		*
 17461  0044D4  CFF5 FFDF          	movff	tablat,indf2
 17462  0044D8  50DF               	movf	indf2,w,c
 17463  0044DA  B4D8               	btfsc	status,2,c
 17464  0044DC  0012               	return	
 17465  0044DE  D7EC               	goto	i2l5909
 17466  0044E0                     __end_ofi2_strcpy:
 17467                           	opt stack 0
 17468                           pclatu	equ	0xFFB
 17469                           pclath	equ	0xFFA
 17470                           tblptru	equ	0xFF8
 17471                           tblptrh	equ	0xFF7
 17472                           tblptrl	equ	0xFF6
 17473                           tablat	equ	0xFF5
 17474                           prodh	equ	0xFF4
 17475                           prodl	equ	0xFF3
 17476                           intcon	equ	0xFF2
 17477                           intcon2	equ	0xFF1
 17478                           intcon3	equ	0xFF0
 17479                           indf0	equ	0xFEF
 17480                           postinc0	equ	0xFEE
 17481                           fsr0h	equ	0xFEA
 17482                           fsr0l	equ	0xFE9
 17483                           wreg	equ	0xFE8
 17484                           postdec1	equ	0xFE5
 17485                           fsr1h	equ	0xFE2
 17486                           fsr1l	equ	0xFE1
 17487                           indf2	equ	0xFDF
 17488                           postinc2	equ	0xFDE
 17489                           postdec2	equ	0xFDD
 17490                           fsr2h	equ	0xFDA
 17491                           fsr2l	equ	0xFD9
 17492                           status	equ	0xFD8
 17493                           
 17494 ;; *************** function _inputHandler *****************
 17495 ;; Defined at:
 17496 ;;		line 372 in file "UI.c"
 17497 ;; Parameters:    Size  Location     Type
 17498 ;;		None
 17499 ;; Auto vars:     Size  Location     Type
 17500 ;;		None
 17501 ;; Return value:  Size  Location     Type
 17502 ;;                  2   41[COMRAM] int 
 17503 ;; Registers used:
 17504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17505 ;; Tracked objects:
 17506 ;;		On entry : 0/0
 17507 ;;		On exit  : 0/0
 17508 ;;		Unchanged: 0/0
 17509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17513 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17514 ;;Total ram usage:        4 bytes
 17515 ;; Hardware stack levels used:    1
 17516 ;; Hardware stack levels required when called:    4
 17517 ;; This function calls:
 17518 ;;		_change_state_to_logs_11
 17519 ;;		_change_state_to_logs_12
 17520 ;;		_change_state_to_logs_22
 17521 ;;		_change_state_to_logs_23
 17522 ;;		_change_state_to_logs_33
 17523 ;;		_change_state_to_logs_34
 17524 ;;		_change_state_to_menu_11
 17525 ;;		_change_state_to_menu_23
 17526 ;;		i2_change_state_to_menu_12
 17527 ;;		i2_change_state_to_menu_22
 17528 ;; This function is called by:
 17529 ;;		_updateMenu
 17530 ;; This function uses a non-reentrant model
 17531 ;;
 17532                           
 17533                           	psect	text64
 17534  002952                     __ptext64:
 17535                           	opt stack 0
 17536  002952                     _inputHandler:
 17537                           	opt stack 18
 17538                           
 17539                           ;UI.c: 377: if(firstboot){
 17540                           
 17541                           ;incstack = 0
 17542  002952  5075               	movf	_firstboot,w,c
 17543  002954  1076               	iorwf	_firstboot+1,w,c
 17544  002956  B4D8               	btfsc	status,2,c
 17545  002958  D00B               	goto	i2l6343
 17546                           
 17547                           ;UI.c: 378: change_state_to_menu_11();
 17548  00295A  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 17549                           
 17550                           ;UI.c: 379: firstboot = 0;
 17551  00295E  0E00               	movlw	0
 17552  002960  6E76               	movwf	_firstboot+1,c
 17553  002962  0E00               	movlw	0
 17554  002964  6E75               	movwf	_firstboot,c
 17555                           
 17556                           ;UI.c: 380: return 0;
 17557  002966  0E00               	movlw	0
 17558  002968  6E2B               	movwf	?_inputHandler+1,c
 17559  00296A  0E00               	movlw	0
 17560  00296C  6E2A               	movwf	?_inputHandler,c
 17561  00296E  0012               	return	
 17562  002970                     i2l6343:
 17563                           
 17564                           ;UI.c: 381: }
 17565                           ;UI.c: 382: if (logstate){
 17566  002970  0100               	movlb	0	; () banked
 17567  002972  51F6               	movf	_logstate& (0+255),w,b
 17568  002974  0100               	movlb	0	; () banked
 17569  002976  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17570  002978  B4D8               	btfsc	status,2,c
 17571  00297A  D0C7               	goto	i2l6461
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17575  00297C  0E43               	movlw	67
 17576  00297E  187D               	xorwf	_input,w,c	;volatile
 17577  002980  A4D8               	btfss	status,2,c
 17578  002982  D012               	goto	i2l6361
 17579                           
 17580                           ; BSR set to: 0
 17581  002984  B281               	btfsc	3969,1,c	;volatile
 17582  002986  D009               	goto	i2l6353
 17583  002988  D00F               	goto	i2l6361
 17584  00298A                     i2l6351:
 17585                           
 17586                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17587  00298A  0E68               	movlw	104
 17588  00298C  6E2C               	movwf	??_inputHandler& (0+255),c
 17589  00298E  0EE4               	movlw	228
 17590  002990                     i2u858_47:
 17591  002990  2EE8               	decfsz	wreg,f,c
 17592  002992  D7FE               	bra	i2u858_47
 17593  002994  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17594  002996  D7FC               	bra	i2u858_47
 17595  002998  D000               	nop2	
 17596  00299A                     i2l6353:
 17597  00299A  B281               	btfsc	3969,1,c	;volatile
 17598  00299C  D7F6               	goto	i2l6351
 17599  00299E                     i2l6355:
 17600                           
 17601                           ;UI.c: 387: }
 17602                           ;UI.c: 388: return 0;
 17603  00299E  0E00               	movlw	0
 17604  0029A0  6E2B               	movwf	?_inputHandler+1,c
 17605  0029A2  0E00               	movlw	0
 17606  0029A4  6E2A               	movwf	?_inputHandler,c
 17607  0029A6  0012               	return	
 17608  0029A8                     i2l6361:
 17609                           
 17610                           ;UI.c: 390: else if (input == 'D'){
 17611  0029A8  0E44               	movlw	68
 17612  0029AA  187D               	xorwf	_input,w,c	;volatile
 17613  0029AC  A4D8               	btfss	status,2,c
 17614  0029AE  D7F7               	goto	i2l6355
 17615                           
 17616                           ;UI.c: 392: logstate = 0;
 17617  0029B0  0E00               	movlw	0
 17618  0029B2  0100               	movlb	0	; () banked
 17619  0029B4  6FF7               	movwf	(_logstate+1)& (0+255),b
 17620  0029B6  0E00               	movlw	0
 17621  0029B8  6FF6               	movwf	_logstate& (0+255),b
 17622                           
 17623                           ;UI.c: 393: switch(cur_state){
 17624  0029BA  D012               	goto	i2l6379
 17625  0029BC                     i2l6365:
 17626                           
 17627                           ;UI.c: 395: change_state_to_logs_11();
 17628  0029BC  EC30  F023         	call	_change_state_to_logs_11	;wreg free
 17629                           
 17630                           ;UI.c: 396: break;
 17631  0029C0  D7EE               	goto	i2l6355
 17632  0029C2                     i2l6367:
 17633                           
 17634                           ;UI.c: 398: change_state_to_logs_12();
 17635  0029C2  EC18  F023         	call	_change_state_to_logs_12	;wreg free
 17636                           
 17637                           ;UI.c: 399: break;
 17638  0029C6  D7EB               	goto	i2l6355
 17639  0029C8                     i2l6369:
 17640                           
 17641                           ;UI.c: 401: change_state_to_logs_22();
 17642  0029C8  EC00  F023         	call	_change_state_to_logs_22	;wreg free
 17643                           
 17644                           ;UI.c: 402: break;
 17645  0029CC  D7E8               	goto	i2l6355
 17646  0029CE                     i2l6371:
 17647                           
 17648                           ;UI.c: 404: change_state_to_logs_23();
 17649  0029CE  EC76  F023         	call	_change_state_to_logs_23	;wreg free
 17650                           
 17651                           ;UI.c: 405: break;
 17652  0029D2  D7E5               	goto	i2l6355
 17653  0029D4                     i2l6373:
 17654                           
 17655                           ;UI.c: 407: change_state_to_logs_33();
 17656  0029D4  ECE8  F022         	call	_change_state_to_logs_33	;wreg free
 17657                           
 17658                           ;UI.c: 408: break;
 17659  0029D8  D7E2               	goto	i2l6355
 17660  0029DA                     i2l6375:
 17661                           
 17662                           ;UI.c: 410: change_state_to_logs_34();
 17663  0029DA  ECD0  F022         	call	_change_state_to_logs_34	;wreg free
 17664                           
 17665                           ;UI.c: 412: }
 17666                           
 17667                           ;UI.c: 411: break;
 17668  0029DE  D7DF               	goto	i2l6355
 17669  0029E0                     i2l6379:
 17670  0029E0  C0E0  F02C         	movff	_cur_state,??_inputHandler
 17671  0029E4  C0E1  F02D         	movff	_cur_state+1,??_inputHandler+1
 17672                           
 17673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17674                           ; Switch size 1, requested type "space"
 17675                           ; Number of cases is 2, Range of values is 3 to 4
 17676                           ; switch strategies available:
 17677                           ; Name         Instructions Cycles
 17678                           ; simple_byte            7     4 (average)
 17679                           ;	Chosen strategy is simple_byte
 17680  0029E8  502D               	movf	??_inputHandler+1,w,c
 17681  0029EA  0A03               	xorlw	3	; case 3
 17682  0029EC  B4D8               	btfsc	status,2,c
 17683  0029EE  D004               	goto	i2l8649
 17684  0029F0  0A07               	xorlw	7	; case 4
 17685  0029F2  B4D8               	btfsc	status,2,c
 17686  0029F4  D00F               	goto	i2l8651
 17687  0029F6  D7D3               	goto	i2l6355
 17688  0029F8                     i2l8649:
 17689                           
 17690                           ; Switch size 1, requested type "space"
 17691                           ; Number of cases is 4, Range of values is 243 to 255
 17692                           ; switch strategies available:
 17693                           ; Name         Instructions Cycles
 17694                           ; simple_byte           13     7 (average)
 17695                           ;	Chosen strategy is simple_byte
 17696  0029F8  502C               	movf	??_inputHandler,w,c
 17697  0029FA  0AF3               	xorlw	243	; case 243
 17698  0029FC  B4D8               	btfsc	status,2,c
 17699  0029FE  D7DE               	goto	i2l6365
 17700  002A00  0A07               	xorlw	7	; case 244
 17701  002A02  B4D8               	btfsc	status,2,c
 17702  002A04  D7DE               	goto	i2l6367
 17703  002A06  0A0A               	xorlw	10	; case 254
 17704  002A08  B4D8               	btfsc	status,2,c
 17705  002A0A  D7DE               	goto	i2l6369
 17706  002A0C  0A01               	xorlw	1	; case 255
 17707  002A0E  B4D8               	btfsc	status,2,c
 17708  002A10  D7DE               	goto	i2l6371
 17709  002A12  D7C5               	goto	i2l6355
 17710  002A14                     i2l8651:
 17711                           
 17712                           ; Switch size 1, requested type "space"
 17713                           ; Number of cases is 2, Range of values is 9 to 10
 17714                           ; switch strategies available:
 17715                           ; Name         Instructions Cycles
 17716                           ; simple_byte            7     4 (average)
 17717                           ;	Chosen strategy is simple_byte
 17718  002A14  502C               	movf	??_inputHandler,w,c
 17719  002A16  0A09               	xorlw	9	; case 9
 17720  002A18  B4D8               	btfsc	status,2,c
 17721  002A1A  D7DC               	goto	i2l6373
 17722  002A1C  0A03               	xorlw	3	; case 10
 17723  002A1E  B4D8               	btfsc	status,2,c
 17724  002A20  D7DC               	goto	i2l6375
 17725  002A22  D7BD               	goto	i2l6355
 17726  002A24                     i2l6391:
 17727                           
 17728                           ;UI.c: 422: if(cur_state == 11){
 17729  002A24  0E0B               	movlw	11
 17730  002A26  0100               	movlb	0	; () banked
 17731  002A28  19E0               	xorwf	_cur_state& (0+255),w,b
 17732  002A2A  0100               	movlb	0	; () banked
 17733  002A2C  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17734  002A2E  A4D8               	btfss	status,2,c
 17735  002A30  D005               	goto	i2l6399
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;UI.c: 423: return 0;
 17739  002A32  0E00               	movlw	0
 17740  002A34  6E2B               	movwf	?_inputHandler+1,c
 17741  002A36  0E00               	movlw	0
 17742  002A38  6E2A               	movwf	?_inputHandler,c
 17743                           
 17744                           ; BSR set to: 0
 17745  002A3A  0012               	return	
 17746  002A3C                     i2l6399:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;UI.c: 425: else{
 17750                           ;UI.c: 426: change_state_to_menu_11();
 17751  002A3C  ECB8  F022         	call	_change_state_to_menu_11	;wreg free
 17752                           
 17753                           ;UI.c: 427: }
 17754                           ;UI.c: 428: return 0;
 17755  002A40  0E00               	movlw	0
 17756  002A42  6E2B               	movwf	?_inputHandler+1,c
 17757  002A44  0E00               	movlw	0
 17758  002A46  6E2A               	movwf	?_inputHandler,c
 17759  002A48  0012               	return	
 17760  002A4A                     i2l6405:
 17761                           
 17762                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17763  002A4A  0E16               	movlw	22
 17764  002A4C  0100               	movlb	0	; () banked
 17765  002A4E  19E0               	xorwf	_cur_state& (0+255),w,b
 17766  002A50  0100               	movlb	0	; () banked
 17767  002A52  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17768  002A54  B4D8               	btfsc	status,2,c
 17769  002A56  D007               	goto	i2l6409
 17770                           
 17771                           ; BSR set to: 0
 17772  002A58  0E0C               	movlw	12
 17773  002A5A  0100               	movlb	0	; () banked
 17774  002A5C  19E0               	xorwf	_cur_state& (0+255),w,b
 17775  002A5E  0100               	movlb	0	; () banked
 17776  002A60  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17777  002A62  A4D8               	btfss	status,2,c
 17778  002A64  D005               	goto	i2l6415
 17779  002A66                     i2l6409:
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;UI.c: 431: return 0;
 17783  002A66  0E00               	movlw	0
 17784  002A68  6E2B               	movwf	?_inputHandler+1,c
 17785  002A6A  0E00               	movlw	0
 17786  002A6C  6E2A               	movwf	?_inputHandler,c
 17787                           
 17788                           ; BSR set to: 0
 17789  002A6E  0012               	return	
 17790  002A70                     i2l6415:
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;UI.c: 433: else if(cur_state == 23){
 17794  002A70  0E17               	movlw	23
 17795  002A72  0100               	movlb	0	; () banked
 17796  002A74  19E0               	xorwf	_cur_state& (0+255),w,b
 17797  002A76  0100               	movlb	0	; () banked
 17798  002A78  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17799  002A7A  A4D8               	btfss	status,2,c
 17800  002A7C  D003               	goto	i2l6419
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;UI.c: 434: change_state_to_menu_22();
 17804  002A7E  EC70  F022         	call	i2_change_state_to_menu_22	;wreg free
 17805                           
 17806                           ;UI.c: 435: }
 17807  002A82  D002               	goto	i2l6421
 17808  002A84                     i2l6419:
 17809                           
 17810                           ;UI.c: 436: else{
 17811                           ;UI.c: 437: change_state_to_menu_12();
 17812  002A84  EC88  F022         	call	i2_change_state_to_menu_12	;wreg free
 17813  002A88                     i2l6421:
 17814                           
 17815                           ;UI.c: 438: }
 17816                           ;UI.c: 439: return 0;
 17817  002A88  0E00               	movlw	0
 17818  002A8A  6E2B               	movwf	?_inputHandler+1,c
 17819  002A8C  0E00               	movlw	0
 17820  002A8E  6E2A               	movwf	?_inputHandler,c
 17821  002A90  0012               	return	
 17822  002A92                     i2l6425:
 17823                           
 17824                           ;UI.c: 441: if(cur_state == 23){
 17825  002A92  0E17               	movlw	23
 17826  002A94  0100               	movlb	0	; () banked
 17827  002A96  19E0               	xorwf	_cur_state& (0+255),w,b
 17828  002A98  0100               	movlb	0	; () banked
 17829  002A9A  11E1               	iorwf	(_cur_state+1)& (0+255),w,b
 17830  002A9C  A4D8               	btfss	status,2,c
 17831  002A9E  D005               	goto	i2l6433
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;UI.c: 442: return 0;
 17835  002AA0  0E00               	movlw	0
 17836  002AA2  6E2B               	movwf	?_inputHandler+1,c
 17837  002AA4  0E00               	movlw	0
 17838  002AA6  6E2A               	movwf	?_inputHandler,c
 17839                           
 17840                           ; BSR set to: 0
 17841  002AA8  0012               	return	
 17842  002AAA                     i2l6433:
 17843                           
 17844                           ; BSR set to: 0
 17845                           ;UI.c: 444: else{
 17846                           ;UI.c: 445: change_state_to_menu_23();
 17847  002AAA  ECA0  F022         	call	_change_state_to_menu_23	;wreg free
 17848                           
 17849                           ;UI.c: 446: }
 17850                           ;UI.c: 447: return 0;
 17851  002AAE  0E00               	movlw	0
 17852  002AB0  6E2B               	movwf	?_inputHandler+1,c
 17853  002AB2  0E00               	movlw	0
 17854  002AB4  6E2A               	movwf	?_inputHandler,c
 17855  002AB6  0012               	return	
 17856  002AB8                     i2l6439:
 17857                           
 17858                           ;UI.c: 450: up = 1;
 17859  002AB8  0E00               	movlw	0
 17860  002ABA  6E78               	movwf	_up+1,c
 17861  002ABC  0E01               	movlw	1
 17862  002ABE  6E77               	movwf	_up,c
 17863                           
 17864                           ;UI.c: 451: return 1;
 17865  002AC0  0E00               	movlw	0
 17866  002AC2  6E2B               	movwf	?_inputHandler+1,c
 17867  002AC4  0E01               	movlw	1
 17868  002AC6  6E2A               	movwf	?_inputHandler,c
 17869  002AC8  0012               	return	
 17870  002ACA                     i2l6443:
 17871                           
 17872                           ;UI.c: 453: down = 1;
 17873  002ACA  0E00               	movlw	0
 17874  002ACC  6E6A               	movwf	_down+1,c
 17875  002ACE  0E01               	movlw	1
 17876  002AD0  6E69               	movwf	_down,c
 17877                           
 17878                           ;UI.c: 454: return 1;
 17879  002AD2  0E00               	movlw	0
 17880  002AD4  6E2B               	movwf	?_inputHandler+1,c
 17881  002AD6  0E01               	movlw	1
 17882  002AD8  6E2A               	movwf	?_inputHandler,c
 17883  002ADA  0012               	return	
 17884  002ADC                     i2l6447:
 17885                           
 17886                           ;UI.c: 456: enter = 1;
 17887  002ADC  0E00               	movlw	0
 17888  002ADE  6E6C               	movwf	_enter+1,c
 17889  002AE0  0E01               	movlw	1
 17890  002AE2  6E6B               	movwf	_enter,c
 17891                           
 17892                           ;UI.c: 457: return 1;
 17893  002AE4  0E00               	movlw	0
 17894  002AE6  6E2B               	movwf	?_inputHandler+1,c
 17895  002AE8  0E01               	movlw	1
 17896  002AEA  6E2A               	movwf	?_inputHandler,c
 17897  002AEC  0012               	return	
 17898  002AEE                     i2l6451:
 17899                           
 17900                           ;UI.c: 459: back = 1;
 17901  002AEE  0E00               	movlw	0
 17902  002AF0  6E5C               	movwf	_back+1,c
 17903  002AF2  0E01               	movlw	1
 17904  002AF4  6E5B               	movwf	_back,c
 17905                           
 17906                           ;UI.c: 460: return 1;
 17907  002AF6  0E00               	movlw	0
 17908  002AF8  6E2B               	movwf	?_inputHandler+1,c
 17909  002AFA  0E01               	movlw	1
 17910  002AFC  6E2A               	movwf	?_inputHandler,c
 17911  002AFE  0012               	return	
 17912  002B00                     i2l6455:
 17913                           
 17914                           ;UI.c: 463: return 1;
 17915  002B00  0E00               	movlw	0
 17916  002B02  6E2B               	movwf	?_inputHandler+1,c
 17917  002B04  0E01               	movlw	1
 17918  002B06  6E2A               	movwf	?_inputHandler,c
 17919                           
 17920                           ;UI.c: 464: }
 17921  002B08  0012               	return	
 17922  002B0A                     i2l6461:
 17923  002B0A  507D               	movf	_input,w,c	;volatile
 17924                           
 17925                           ; Switch size 1, requested type "space"
 17926                           ; Number of cases is 7, Range of values is 49 to 68
 17927                           ; switch strategies available:
 17928                           ; Name         Instructions Cycles
 17929                           ; simple_byte           22    12 (average)
 17930                           ;	Chosen strategy is simple_byte
 17931  002B0C  0A31               	xorlw	49	; case 49
 17932  002B0E  B4D8               	btfsc	status,2,c
 17933  002B10  D789               	goto	i2l6391
 17934  002B12  0A03               	xorlw	3	; case 50
 17935  002B14  B4D8               	btfsc	status,2,c
 17936  002B16  D799               	goto	i2l6405
 17937  002B18  0A01               	xorlw	1	; case 51
 17938  002B1A  B4D8               	btfsc	status,2,c
 17939  002B1C  D7BA               	goto	i2l6425
 17940  002B1E  0A72               	xorlw	114	; case 65
 17941  002B20  B4D8               	btfsc	status,2,c
 17942  002B22  D7CA               	goto	i2l6439
 17943  002B24  0A03               	xorlw	3	; case 66
 17944  002B26  B4D8               	btfsc	status,2,c
 17945  002B28  D7D0               	goto	i2l6443
 17946  002B2A  0A01               	xorlw	1	; case 67
 17947  002B2C  B4D8               	btfsc	status,2,c
 17948  002B2E  D7D6               	goto	i2l6447
 17949  002B30  0A07               	xorlw	7	; case 68
 17950  002B32  B4D8               	btfsc	status,2,c
 17951  002B34  D7DC               	goto	i2l6451
 17952  002B36  D7E4               	goto	i2l6455
 17953  002B38                     __end_of_inputHandler:
 17954                           	opt stack 0
 17955                           pclatu	equ	0xFFB
 17956                           pclath	equ	0xFFA
 17957                           tblptru	equ	0xFF8
 17958                           tblptrh	equ	0xFF7
 17959                           tblptrl	equ	0xFF6
 17960                           tablat	equ	0xFF5
 17961                           prodh	equ	0xFF4
 17962                           prodl	equ	0xFF3
 17963                           intcon	equ	0xFF2
 17964                           intcon2	equ	0xFF1
 17965                           intcon3	equ	0xFF0
 17966                           indf0	equ	0xFEF
 17967                           postinc0	equ	0xFEE
 17968                           fsr0h	equ	0xFEA
 17969                           fsr0l	equ	0xFE9
 17970                           wreg	equ	0xFE8
 17971                           postdec1	equ	0xFE5
 17972                           fsr1h	equ	0xFE2
 17973                           fsr1l	equ	0xFE1
 17974                           indf2	equ	0xFDF
 17975                           postinc2	equ	0xFDE
 17976                           postdec2	equ	0xFDD
 17977                           fsr2h	equ	0xFDA
 17978                           fsr2l	equ	0xFD9
 17979                           status	equ	0xFD8
 17980                           
 17981 ;; *************** function i2_change_state_to_menu_22 *****************
 17982 ;; Defined at:
 17983 ;;		line 498 in file "UI.c"
 17984 ;; Parameters:    Size  Location     Type
 17985 ;;		None
 17986 ;; Auto vars:     Size  Location     Type
 17987 ;;		None
 17988 ;; Return value:  Size  Location     Type
 17989 ;;                  1    wreg      void 
 17990 ;; Registers used:
 17991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17992 ;; Tracked objects:
 17993 ;;		On entry : 0/0
 17994 ;;		On exit  : 0/0
 17995 ;;		Unchanged: 0/0
 17996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18001 ;;Total ram usage:        0 bytes
 18002 ;; Hardware stack levels used:    1
 18003 ;; Hardware stack levels required when called:    3
 18004 ;; This function calls:
 18005 ;;		i2_lcdInst
 18006 ;;		i2_printf
 18007 ;; This function is called by:
 18008 ;;		_updateMenu
 18009 ;;		_inputHandler
 18010 ;; This function uses a non-reentrant model
 18011 ;;
 18012                           
 18013                           	psect	text65
 18014  0044E0                     __ptext65:
 18015                           	opt stack 0
 18016  0044E0                     i2_change_state_to_menu_22:
 18017                           	opt stack 19
 18018                           
 18019                           ;UI.c: 499: cur_state = 22;
 18020                           
 18021                           ;incstack = 0
 18022  0044E0  0E00               	movlw	0
 18023  0044E2  0100               	movlb	0	; () banked
 18024  0044E4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18025  0044E6  0E16               	movlw	22
 18026  0044E8  6FE0               	movwf	_cur_state& (0+255),b
 18027                           
 18028                           ; BSR set to: 0
 18029                           ;UI.c: 501: lcdInst(0b10000000);;
 18030  0044EA  0E80               	movlw	128
 18031  0044EC  ECAA  F024         	call	i2_lcdInst
 18032                           
 18033                           ;UI.c: 502: printf("2. SORT        <");
 18034  0044F0  0EC4               	movlw	low STR_34
 18035  0044F2  6E0D               	movwf	i2printf@f,c
 18036  0044F4  0EFD               	movlw	high STR_34
 18037  0044F6  6E0E               	movwf	i2printf@f+1,c
 18038  0044F8  EC9A  F00C         	call	i2_printf	;wreg free
 18039                           
 18040                           ;UI.c: 503: lcdInst(0b11000000);;
 18041  0044FC  0EC0               	movlw	192
 18042  0044FE  ECAA  F024         	call	i2_lcdInst
 18043                           
 18044                           ;UI.c: 504: printf("3. LOGS         ");
 18045  004502  0E09               	movlw	low STR_36
 18046  004504  6E0D               	movwf	i2printf@f,c
 18047  004506  0EFD               	movlw	high STR_36
 18048  004508  6E0E               	movwf	i2printf@f+1,c
 18049  00450A  EC9A  F00C         	call	i2_printf	;wreg free
 18050  00450E  0012               	return		;funcret
 18051  004510                     __end_ofi2_change_state_to_menu_22:
 18052                           	opt stack 0
 18053                           pclatu	equ	0xFFB
 18054                           pclath	equ	0xFFA
 18055                           tblptru	equ	0xFF8
 18056                           tblptrh	equ	0xFF7
 18057                           tblptrl	equ	0xFF6
 18058                           tablat	equ	0xFF5
 18059                           prodh	equ	0xFF4
 18060                           prodl	equ	0xFF3
 18061                           intcon	equ	0xFF2
 18062                           intcon2	equ	0xFF1
 18063                           intcon3	equ	0xFF0
 18064                           indf0	equ	0xFEF
 18065                           postinc0	equ	0xFEE
 18066                           fsr0h	equ	0xFEA
 18067                           fsr0l	equ	0xFE9
 18068                           wreg	equ	0xFE8
 18069                           postdec1	equ	0xFE5
 18070                           fsr1h	equ	0xFE2
 18071                           fsr1l	equ	0xFE1
 18072                           indf2	equ	0xFDF
 18073                           postinc2	equ	0xFDE
 18074                           postdec2	equ	0xFDD
 18075                           fsr2h	equ	0xFDA
 18076                           fsr2l	equ	0xFD9
 18077                           status	equ	0xFD8
 18078                           
 18079 ;; *************** function i2_change_state_to_menu_12 *****************
 18080 ;; Defined at:
 18081 ;;		line 490 in file "UI.c"
 18082 ;; Parameters:    Size  Location     Type
 18083 ;;		None
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;		None
 18086 ;; Return value:  Size  Location     Type
 18087 ;;                  1    wreg      void 
 18088 ;; Registers used:
 18089 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18099 ;;Total ram usage:        0 bytes
 18100 ;; Hardware stack levels used:    1
 18101 ;; Hardware stack levels required when called:    3
 18102 ;; This function calls:
 18103 ;;		i2_lcdInst
 18104 ;;		i2_printf
 18105 ;; This function is called by:
 18106 ;;		_updateMenu
 18107 ;;		_inputHandler
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           	psect	text66
 18112  004510                     __ptext66:
 18113                           	opt stack 0
 18114  004510                     i2_change_state_to_menu_12:
 18115                           	opt stack 19
 18116                           
 18117                           ;UI.c: 491: cur_state = 12;
 18118                           
 18119                           ;incstack = 0
 18120  004510  0E00               	movlw	0
 18121  004512  0100               	movlb	0	; () banked
 18122  004514  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18123  004516  0E0C               	movlw	12
 18124  004518  6FE0               	movwf	_cur_state& (0+255),b
 18125                           
 18126                           ; BSR set to: 0
 18127                           ;UI.c: 493: lcdInst(0b10000000);;
 18128  00451A  0E80               	movlw	128
 18129  00451C  ECAA  F024         	call	i2_lcdInst
 18130                           
 18131                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18132  004520  0E2B               	movlw	low STR_33
 18133  004522  6E0D               	movwf	i2printf@f,c
 18134  004524  0EFD               	movlw	high STR_33
 18135  004526  6E0E               	movwf	i2printf@f+1,c
 18136  004528  EC9A  F00C         	call	i2_printf	;wreg free
 18137                           
 18138                           ;UI.c: 495: lcdInst(0b11000000);;
 18139  00452C  0EC0               	movlw	192
 18140  00452E  ECAA  F024         	call	i2_lcdInst
 18141                           
 18142                           ;UI.c: 496: printf("2. SORT        <");
 18143  004532  0EC4               	movlw	low STR_34
 18144  004534  6E0D               	movwf	i2printf@f,c
 18145  004536  0EFD               	movlw	high STR_34
 18146  004538  6E0E               	movwf	i2printf@f+1,c
 18147  00453A  EC9A  F00C         	call	i2_printf	;wreg free
 18148  00453E  0012               	return		;funcret
 18149  004540                     __end_ofi2_change_state_to_menu_12:
 18150                           	opt stack 0
 18151                           pclatu	equ	0xFFB
 18152                           pclath	equ	0xFFA
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           intcon2	equ	0xFF1
 18161                           intcon3	equ	0xFF0
 18162                           indf0	equ	0xFEF
 18163                           postinc0	equ	0xFEE
 18164                           fsr0h	equ	0xFEA
 18165                           fsr0l	equ	0xFE9
 18166                           wreg	equ	0xFE8
 18167                           postdec1	equ	0xFE5
 18168                           fsr1h	equ	0xFE2
 18169                           fsr1l	equ	0xFE1
 18170                           indf2	equ	0xFDF
 18171                           postinc2	equ	0xFDE
 18172                           postdec2	equ	0xFDD
 18173                           fsr2h	equ	0xFDA
 18174                           fsr2l	equ	0xFD9
 18175                           status	equ	0xFD8
 18176                           
 18177 ;; *************** function _change_state_to_menu_23 *****************
 18178 ;; Defined at:
 18179 ;;		line 506 in file "UI.c"
 18180 ;; Parameters:    Size  Location     Type
 18181 ;;		None
 18182 ;; Auto vars:     Size  Location     Type
 18183 ;;		None
 18184 ;; Return value:  Size  Location     Type
 18185 ;;                  1    wreg      void 
 18186 ;; Registers used:
 18187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18188 ;; Tracked objects:
 18189 ;;		On entry : 0/0
 18190 ;;		On exit  : 0/0
 18191 ;;		Unchanged: 0/0
 18192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18197 ;;Total ram usage:        0 bytes
 18198 ;; Hardware stack levels used:    1
 18199 ;; Hardware stack levels required when called:    3
 18200 ;; This function calls:
 18201 ;;		i2_lcdInst
 18202 ;;		i2_printf
 18203 ;; This function is called by:
 18204 ;;		_updateMenu
 18205 ;;		_inputHandler
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           	psect	text67
 18210  004540                     __ptext67:
 18211                           	opt stack 0
 18212  004540                     _change_state_to_menu_23:
 18213                           	opt stack 18
 18214                           
 18215                           ;UI.c: 507: cur_state = 23;
 18216                           
 18217                           ;incstack = 0
 18218  004540  0E00               	movlw	0
 18219  004542  0100               	movlb	0	; () banked
 18220  004544  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18221  004546  0E17               	movlw	23
 18222  004548  6FE0               	movwf	_cur_state& (0+255),b
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;UI.c: 509: lcdInst(0b10000000);;
 18226  00454A  0E80               	movlw	128
 18227  00454C  ECAA  F024         	call	i2_lcdInst
 18228                           
 18229                           ;UI.c: 510: printf("2. SORT         ");
 18230  004550  0E1A               	movlw	low STR_32
 18231  004552  6E0D               	movwf	i2printf@f,c
 18232  004554  0EFD               	movlw	high STR_32
 18233  004556  6E0E               	movwf	i2printf@f+1,c
 18234  004558  EC9A  F00C         	call	i2_printf	;wreg free
 18235                           
 18236                           ;UI.c: 511: lcdInst(0b11000000);;
 18237  00455C  0EC0               	movlw	192
 18238  00455E  ECAA  F024         	call	i2_lcdInst
 18239                           
 18240                           ;UI.c: 512: printf("3. LOGS        <");
 18241  004562  0EB3               	movlw	low STR_38
 18242  004564  6E0D               	movwf	i2printf@f,c
 18243  004566  0EFD               	movlw	high STR_38
 18244  004568  6E0E               	movwf	i2printf@f+1,c
 18245  00456A  EC9A  F00C         	call	i2_printf	;wreg free
 18246  00456E  0012               	return		;funcret
 18247  004570                     __end_of_change_state_to_menu_23:
 18248                           	opt stack 0
 18249                           pclatu	equ	0xFFB
 18250                           pclath	equ	0xFFA
 18251                           tblptru	equ	0xFF8
 18252                           tblptrh	equ	0xFF7
 18253                           tblptrl	equ	0xFF6
 18254                           tablat	equ	0xFF5
 18255                           prodh	equ	0xFF4
 18256                           prodl	equ	0xFF3
 18257                           intcon	equ	0xFF2
 18258                           intcon2	equ	0xFF1
 18259                           intcon3	equ	0xFF0
 18260                           indf0	equ	0xFEF
 18261                           postinc0	equ	0xFEE
 18262                           fsr0h	equ	0xFEA
 18263                           fsr0l	equ	0xFE9
 18264                           wreg	equ	0xFE8
 18265                           postdec1	equ	0xFE5
 18266                           fsr1h	equ	0xFE2
 18267                           fsr1l	equ	0xFE1
 18268                           indf2	equ	0xFDF
 18269                           postinc2	equ	0xFDE
 18270                           postdec2	equ	0xFDD
 18271                           fsr2h	equ	0xFDA
 18272                           fsr2l	equ	0xFD9
 18273                           status	equ	0xFD8
 18274                           
 18275 ;; *************** function _change_state_to_menu_11 *****************
 18276 ;; Defined at:
 18277 ;;		line 482 in file "UI.c"
 18278 ;; Parameters:    Size  Location     Type
 18279 ;;		None
 18280 ;; Auto vars:     Size  Location     Type
 18281 ;;		None
 18282 ;; Return value:  Size  Location     Type
 18283 ;;                  1    wreg      void 
 18284 ;; Registers used:
 18285 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18286 ;; Tracked objects:
 18287 ;;		On entry : 0/0
 18288 ;;		On exit  : 0/0
 18289 ;;		Unchanged: 0/0
 18290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18295 ;;Total ram usage:        0 bytes
 18296 ;; Hardware stack levels used:    1
 18297 ;; Hardware stack levels required when called:    3
 18298 ;; This function calls:
 18299 ;;		i2_lcdInst
 18300 ;;		i2_printf
 18301 ;; This function is called by:
 18302 ;;		_updateMenu
 18303 ;;		_inputHandler
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           	psect	text68
 18308  004570                     __ptext68:
 18309                           	opt stack 0
 18310  004570                     _change_state_to_menu_11:
 18311                           	opt stack 18
 18312                           
 18313                           ;UI.c: 483: cur_state = 11;
 18314                           
 18315                           ;incstack = 0
 18316  004570  0E00               	movlw	0
 18317  004572  0100               	movlb	0	; () banked
 18318  004574  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18319  004576  0E0B               	movlw	11
 18320  004578  6FE0               	movwf	_cur_state& (0+255),b
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;UI.c: 485: lcdInst(0b10000000);;
 18324  00457A  0E80               	movlw	128
 18325  00457C  ECAA  F024         	call	i2_lcdInst
 18326                           
 18327                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18328  004580  0ED5               	movlw	low STR_31
 18329  004582  6E0D               	movwf	i2printf@f,c
 18330  004584  0EFD               	movlw	high STR_31
 18331  004586  6E0E               	movwf	i2printf@f+1,c
 18332  004588  EC9A  F00C         	call	i2_printf	;wreg free
 18333                           
 18334                           ;UI.c: 487: lcdInst(0b11000000);;
 18335  00458C  0EC0               	movlw	192
 18336  00458E  ECAA  F024         	call	i2_lcdInst
 18337                           
 18338                           ;UI.c: 488: printf("2. SORT         ");
 18339  004592  0E1A               	movlw	low STR_32
 18340  004594  6E0D               	movwf	i2printf@f,c
 18341  004596  0EFD               	movlw	high STR_32
 18342  004598  6E0E               	movwf	i2printf@f+1,c
 18343  00459A  EC9A  F00C         	call	i2_printf	;wreg free
 18344  00459E  0012               	return		;funcret
 18345  0045A0                     __end_of_change_state_to_menu_11:
 18346                           	opt stack 0
 18347                           pclatu	equ	0xFFB
 18348                           pclath	equ	0xFFA
 18349                           tblptru	equ	0xFF8
 18350                           tblptrh	equ	0xFF7
 18351                           tblptrl	equ	0xFF6
 18352                           tablat	equ	0xFF5
 18353                           prodh	equ	0xFF4
 18354                           prodl	equ	0xFF3
 18355                           intcon	equ	0xFF2
 18356                           intcon2	equ	0xFF1
 18357                           intcon3	equ	0xFF0
 18358                           indf0	equ	0xFEF
 18359                           postinc0	equ	0xFEE
 18360                           fsr0h	equ	0xFEA
 18361                           fsr0l	equ	0xFE9
 18362                           wreg	equ	0xFE8
 18363                           postdec1	equ	0xFE5
 18364                           fsr1h	equ	0xFE2
 18365                           fsr1l	equ	0xFE1
 18366                           indf2	equ	0xFDF
 18367                           postinc2	equ	0xFDE
 18368                           postdec2	equ	0xFDD
 18369                           fsr2h	equ	0xFDA
 18370                           fsr2l	equ	0xFD9
 18371                           status	equ	0xFD8
 18372                           
 18373 ;; *************** function _change_state_to_logs_34 *****************
 18374 ;; Defined at:
 18375 ;;		line 549 in file "UI.c"
 18376 ;; Parameters:    Size  Location     Type
 18377 ;;		None
 18378 ;; Auto vars:     Size  Location     Type
 18379 ;;		None
 18380 ;; Return value:  Size  Location     Type
 18381 ;;                  1    wreg      void 
 18382 ;; Registers used:
 18383 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18384 ;; Tracked objects:
 18385 ;;		On entry : 0/0
 18386 ;;		On exit  : 0/0
 18387 ;;		Unchanged: 0/0
 18388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18393 ;;Total ram usage:        0 bytes
 18394 ;; Hardware stack levels used:    1
 18395 ;; Hardware stack levels required when called:    3
 18396 ;; This function calls:
 18397 ;;		i2_lcdInst
 18398 ;;		i2_printf
 18399 ;; This function is called by:
 18400 ;;		_updateMenu
 18401 ;;		_inputHandler
 18402 ;; This function uses a non-reentrant model
 18403 ;;
 18404                           
 18405                           	psect	text69
 18406  0045A0                     __ptext69:
 18407                           	opt stack 0
 18408  0045A0                     _change_state_to_logs_34:
 18409                           	opt stack 18
 18410                           
 18411                           ;UI.c: 550: cur_state = 1034;
 18412                           
 18413                           ;incstack = 0
 18414  0045A0  0E04               	movlw	4
 18415  0045A2  0100               	movlb	0	; () banked
 18416  0045A4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18417  0045A6  0E0A               	movlw	10
 18418  0045A8  6FE0               	movwf	_cur_state& (0+255),b
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;UI.c: 551: lcdInst(0b10000000);;
 18422  0045AA  0E80               	movlw	128
 18423  0045AC  ECAA  F024         	call	i2_lcdInst
 18424                           
 18425                           ;UI.c: 552: printf("LOG 3           ");
 18426  0045B0  0EE7               	movlw	low STR_44
 18427  0045B2  6E0D               	movwf	i2printf@f,c
 18428  0045B4  0EFC               	movlw	high STR_44
 18429  0045B6  6E0E               	movwf	i2printf@f+1,c
 18430  0045B8  EC9A  F00C         	call	i2_printf	;wreg free
 18431                           
 18432                           ;UI.c: 553: lcdInst(0b11000000);;
 18433  0045BC  0EC0               	movlw	192
 18434  0045BE  ECAA  F024         	call	i2_lcdInst
 18435                           
 18436                           ;UI.c: 554: printf("LOG 4          <");
 18437  0045C2  0EA2               	movlw	low STR_50
 18438  0045C4  6E0D               	movwf	i2printf@f,c
 18439  0045C6  0EFD               	movlw	high STR_50
 18440  0045C8  6E0E               	movwf	i2printf@f+1,c
 18441  0045CA  EC9A  F00C         	call	i2_printf	;wreg free
 18442  0045CE  0012               	return		;funcret
 18443  0045D0                     __end_of_change_state_to_logs_34:
 18444                           	opt stack 0
 18445                           pclatu	equ	0xFFB
 18446                           pclath	equ	0xFFA
 18447                           tblptru	equ	0xFF8
 18448                           tblptrh	equ	0xFF7
 18449                           tblptrl	equ	0xFF6
 18450                           tablat	equ	0xFF5
 18451                           prodh	equ	0xFF4
 18452                           prodl	equ	0xFF3
 18453                           intcon	equ	0xFF2
 18454                           intcon2	equ	0xFF1
 18455                           intcon3	equ	0xFF0
 18456                           indf0	equ	0xFEF
 18457                           postinc0	equ	0xFEE
 18458                           fsr0h	equ	0xFEA
 18459                           fsr0l	equ	0xFE9
 18460                           wreg	equ	0xFE8
 18461                           postdec1	equ	0xFE5
 18462                           fsr1h	equ	0xFE2
 18463                           fsr1l	equ	0xFE1
 18464                           indf2	equ	0xFDF
 18465                           postinc2	equ	0xFDE
 18466                           postdec2	equ	0xFDD
 18467                           fsr2h	equ	0xFDA
 18468                           fsr2l	equ	0xFD9
 18469                           status	equ	0xFD8
 18470                           
 18471 ;; *************** function _change_state_to_logs_33 *****************
 18472 ;; Defined at:
 18473 ;;		line 542 in file "UI.c"
 18474 ;; Parameters:    Size  Location     Type
 18475 ;;		None
 18476 ;; Auto vars:     Size  Location     Type
 18477 ;;		None
 18478 ;; Return value:  Size  Location     Type
 18479 ;;                  1    wreg      void 
 18480 ;; Registers used:
 18481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18482 ;; Tracked objects:
 18483 ;;		On entry : 0/0
 18484 ;;		On exit  : 0/0
 18485 ;;		Unchanged: 0/0
 18486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;Total ram usage:        0 bytes
 18492 ;; Hardware stack levels used:    1
 18493 ;; Hardware stack levels required when called:    3
 18494 ;; This function calls:
 18495 ;;		i2_lcdInst
 18496 ;;		i2_printf
 18497 ;; This function is called by:
 18498 ;;		_updateMenu
 18499 ;;		_inputHandler
 18500 ;; This function uses a non-reentrant model
 18501 ;;
 18502                           
 18503                           	psect	text70
 18504  0045D0                     __ptext70:
 18505                           	opt stack 0
 18506  0045D0                     _change_state_to_logs_33:
 18507                           	opt stack 18
 18508                           
 18509                           ;UI.c: 543: cur_state = 1033;
 18510                           
 18511                           ;incstack = 0
 18512  0045D0  0E04               	movlw	4
 18513  0045D2  0100               	movlb	0	; () banked
 18514  0045D4  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18515  0045D6  0E09               	movlw	9
 18516  0045D8  6FE0               	movwf	_cur_state& (0+255),b
 18517                           
 18518                           ; BSR set to: 0
 18519                           ;UI.c: 544: lcdInst(0b10000000);;
 18520  0045DA  0E80               	movlw	128
 18521  0045DC  ECAA  F024         	call	i2_lcdInst
 18522                           
 18523                           ;UI.c: 545: printf("LOG 3          <");
 18524  0045E0  0E91               	movlw	low STR_46
 18525  0045E2  6E0D               	movwf	i2printf@f,c
 18526  0045E4  0EFD               	movlw	high STR_46
 18527  0045E6  6E0E               	movwf	i2printf@f+1,c
 18528  0045E8  EC9A  F00C         	call	i2_printf	;wreg free
 18529                           
 18530                           ;UI.c: 546: lcdInst(0b11000000);;
 18531  0045EC  0EC0               	movlw	192
 18532  0045EE  ECAA  F024         	call	i2_lcdInst
 18533                           
 18534                           ;UI.c: 547: printf("LOG 4           ");
 18535  0045F2  0EF8               	movlw	low STR_48
 18536  0045F4  6E0D               	movwf	i2printf@f,c
 18537  0045F6  0EFC               	movlw	high STR_48
 18538  0045F8  6E0E               	movwf	i2printf@f+1,c
 18539  0045FA  EC9A  F00C         	call	i2_printf	;wreg free
 18540  0045FE  0012               	return		;funcret
 18541  004600                     __end_of_change_state_to_logs_33:
 18542                           	opt stack 0
 18543                           pclatu	equ	0xFFB
 18544                           pclath	equ	0xFFA
 18545                           tblptru	equ	0xFF8
 18546                           tblptrh	equ	0xFF7
 18547                           tblptrl	equ	0xFF6
 18548                           tablat	equ	0xFF5
 18549                           prodh	equ	0xFF4
 18550                           prodl	equ	0xFF3
 18551                           intcon	equ	0xFF2
 18552                           intcon2	equ	0xFF1
 18553                           intcon3	equ	0xFF0
 18554                           indf0	equ	0xFEF
 18555                           postinc0	equ	0xFEE
 18556                           fsr0h	equ	0xFEA
 18557                           fsr0l	equ	0xFE9
 18558                           wreg	equ	0xFE8
 18559                           postdec1	equ	0xFE5
 18560                           fsr1h	equ	0xFE2
 18561                           fsr1l	equ	0xFE1
 18562                           indf2	equ	0xFDF
 18563                           postinc2	equ	0xFDE
 18564                           postdec2	equ	0xFDD
 18565                           fsr2h	equ	0xFDA
 18566                           fsr2l	equ	0xFD9
 18567                           status	equ	0xFD8
 18568                           
 18569 ;; *************** function _change_state_to_logs_23 *****************
 18570 ;; Defined at:
 18571 ;;		line 535 in file "UI.c"
 18572 ;; Parameters:    Size  Location     Type
 18573 ;;		None
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;		None
 18576 ;; Return value:  Size  Location     Type
 18577 ;;                  1    wreg      void 
 18578 ;; Registers used:
 18579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18580 ;; Tracked objects:
 18581 ;;		On entry : 0/0
 18582 ;;		On exit  : 0/0
 18583 ;;		Unchanged: 0/0
 18584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;Total ram usage:        0 bytes
 18590 ;; Hardware stack levels used:    1
 18591 ;; Hardware stack levels required when called:    3
 18592 ;; This function calls:
 18593 ;;		i2_lcdInst
 18594 ;;		i2_printf
 18595 ;; This function is called by:
 18596 ;;		_updateMenu
 18597 ;;		_inputHandler
 18598 ;; This function uses a non-reentrant model
 18599 ;;
 18600                           
 18601                           	psect	text71
 18602  0046EC                     __ptext71:
 18603                           	opt stack 0
 18604  0046EC                     _change_state_to_logs_23:
 18605                           	opt stack 18
 18606                           
 18607                           ;UI.c: 536: cur_state = 1023;
 18608                           
 18609                           ;incstack = 0
 18610  0046EC  0E03               	movlw	3
 18611  0046EE  0100               	movlb	0	; () banked
 18612  0046F0  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18613  0046F2  69E0               	setf	_cur_state& (0+255),b
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;UI.c: 537: lcdInst(0b10000000);;
 18617  0046F4  0E80               	movlw	128
 18618  0046F6  ECAA  F024         	call	i2_lcdInst
 18619                           
 18620                           ;UI.c: 538: printf("LOG 2           ");
 18621  0046FA  0ED6               	movlw	low STR_40
 18622  0046FC  6E0D               	movwf	i2printf@f,c
 18623  0046FE  0EFC               	movlw	high STR_40
 18624  004700  6E0E               	movwf	i2printf@f+1,c
 18625  004702  EC9A  F00C         	call	i2_printf	;wreg free
 18626                           
 18627                           ;UI.c: 539: lcdInst(0b11000000);;
 18628  004706  0EC0               	movlw	192
 18629  004708  ECAA  F024         	call	i2_lcdInst
 18630                           
 18631                           ;UI.c: 540: printf("LOG 3          <");
 18632  00470C  0E91               	movlw	low STR_46
 18633  00470E  6E0D               	movwf	i2printf@f,c
 18634  004710  0EFD               	movlw	high STR_46
 18635  004712  6E0E               	movwf	i2printf@f+1,c
 18636  004714  EC9A  F00C         	call	i2_printf	;wreg free
 18637  004718  0012               	return		;funcret
 18638  00471A                     __end_of_change_state_to_logs_23:
 18639                           	opt stack 0
 18640                           pclatu	equ	0xFFB
 18641                           pclath	equ	0xFFA
 18642                           tblptru	equ	0xFF8
 18643                           tblptrh	equ	0xFF7
 18644                           tblptrl	equ	0xFF6
 18645                           tablat	equ	0xFF5
 18646                           prodh	equ	0xFF4
 18647                           prodl	equ	0xFF3
 18648                           intcon	equ	0xFF2
 18649                           intcon2	equ	0xFF1
 18650                           intcon3	equ	0xFF0
 18651                           indf0	equ	0xFEF
 18652                           postinc0	equ	0xFEE
 18653                           fsr0h	equ	0xFEA
 18654                           fsr0l	equ	0xFE9
 18655                           wreg	equ	0xFE8
 18656                           postdec1	equ	0xFE5
 18657                           fsr1h	equ	0xFE2
 18658                           fsr1l	equ	0xFE1
 18659                           indf2	equ	0xFDF
 18660                           postinc2	equ	0xFDE
 18661                           postdec2	equ	0xFDD
 18662                           fsr2h	equ	0xFDA
 18663                           fsr2l	equ	0xFD9
 18664                           status	equ	0xFD8
 18665                           
 18666 ;; *************** function _change_state_to_logs_22 *****************
 18667 ;; Defined at:
 18668 ;;		line 528 in file "UI.c"
 18669 ;; Parameters:    Size  Location     Type
 18670 ;;		None
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;		None
 18673 ;; Return value:  Size  Location     Type
 18674 ;;                  1    wreg      void 
 18675 ;; Registers used:
 18676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18677 ;; Tracked objects:
 18678 ;;		On entry : 0/0
 18679 ;;		On exit  : 0/0
 18680 ;;		Unchanged: 0/0
 18681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18686 ;;Total ram usage:        0 bytes
 18687 ;; Hardware stack levels used:    1
 18688 ;; Hardware stack levels required when called:    3
 18689 ;; This function calls:
 18690 ;;		i2_lcdInst
 18691 ;;		i2_printf
 18692 ;; This function is called by:
 18693 ;;		_updateMenu
 18694 ;;		_inputHandler
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           	psect	text72
 18699  004600                     __ptext72:
 18700                           	opt stack 0
 18701  004600                     _change_state_to_logs_22:
 18702                           	opt stack 18
 18703                           
 18704                           ;UI.c: 529: cur_state = 1022;
 18705                           
 18706                           ;incstack = 0
 18707  004600  0E03               	movlw	3
 18708  004602  0100               	movlb	0	; () banked
 18709  004604  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18710  004606  0EFE               	movlw	254
 18711  004608  6FE0               	movwf	_cur_state& (0+255),b
 18712                           
 18713                           ; BSR set to: 0
 18714                           ;UI.c: 530: lcdInst(0b10000000);;
 18715  00460A  0E80               	movlw	128
 18716  00460C  ECAA  F024         	call	i2_lcdInst
 18717                           
 18718                           ;UI.c: 531: printf("LOG 2          <");
 18719  004610  0E80               	movlw	low STR_42
 18720  004612  6E0D               	movwf	i2printf@f,c
 18721  004614  0EFD               	movlw	high STR_42
 18722  004616  6E0E               	movwf	i2printf@f+1,c
 18723  004618  EC9A  F00C         	call	i2_printf	;wreg free
 18724                           
 18725                           ;UI.c: 532: lcdInst(0b11000000);;
 18726  00461C  0EC0               	movlw	192
 18727  00461E  ECAA  F024         	call	i2_lcdInst
 18728                           
 18729                           ;UI.c: 533: printf("LOG 3           ");
 18730  004622  0EE7               	movlw	low STR_44
 18731  004624  6E0D               	movwf	i2printf@f,c
 18732  004626  0EFC               	movlw	high STR_44
 18733  004628  6E0E               	movwf	i2printf@f+1,c
 18734  00462A  EC9A  F00C         	call	i2_printf	;wreg free
 18735  00462E  0012               	return		;funcret
 18736  004630                     __end_of_change_state_to_logs_22:
 18737                           	opt stack 0
 18738                           pclatu	equ	0xFFB
 18739                           pclath	equ	0xFFA
 18740                           tblptru	equ	0xFF8
 18741                           tblptrh	equ	0xFF7
 18742                           tblptrl	equ	0xFF6
 18743                           tablat	equ	0xFF5
 18744                           prodh	equ	0xFF4
 18745                           prodl	equ	0xFF3
 18746                           intcon	equ	0xFF2
 18747                           intcon2	equ	0xFF1
 18748                           intcon3	equ	0xFF0
 18749                           indf0	equ	0xFEF
 18750                           postinc0	equ	0xFEE
 18751                           fsr0h	equ	0xFEA
 18752                           fsr0l	equ	0xFE9
 18753                           wreg	equ	0xFE8
 18754                           postdec1	equ	0xFE5
 18755                           fsr1h	equ	0xFE2
 18756                           fsr1l	equ	0xFE1
 18757                           indf2	equ	0xFDF
 18758                           postinc2	equ	0xFDE
 18759                           postdec2	equ	0xFDD
 18760                           fsr2h	equ	0xFDA
 18761                           fsr2l	equ	0xFD9
 18762                           status	equ	0xFD8
 18763                           
 18764 ;; *************** function _change_state_to_logs_12 *****************
 18765 ;; Defined at:
 18766 ;;		line 521 in file "UI.c"
 18767 ;; Parameters:    Size  Location     Type
 18768 ;;		None
 18769 ;; Auto vars:     Size  Location     Type
 18770 ;;		None
 18771 ;; Return value:  Size  Location     Type
 18772 ;;                  1    wreg      void 
 18773 ;; Registers used:
 18774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18775 ;; Tracked objects:
 18776 ;;		On entry : 0/0
 18777 ;;		On exit  : 0/0
 18778 ;;		Unchanged: 0/0
 18779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18784 ;;Total ram usage:        0 bytes
 18785 ;; Hardware stack levels used:    1
 18786 ;; Hardware stack levels required when called:    3
 18787 ;; This function calls:
 18788 ;;		i2_lcdInst
 18789 ;;		i2_printf
 18790 ;; This function is called by:
 18791 ;;		_updateMenu
 18792 ;;		_inputHandler
 18793 ;; This function uses a non-reentrant model
 18794 ;;
 18795                           
 18796                           	psect	text73
 18797  004630                     __ptext73:
 18798                           	opt stack 0
 18799  004630                     _change_state_to_logs_12:
 18800                           	opt stack 18
 18801                           
 18802                           ;UI.c: 522: cur_state = 1012;
 18803                           
 18804                           ;incstack = 0
 18805  004630  0E03               	movlw	3
 18806  004632  0100               	movlb	0	; () banked
 18807  004634  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18808  004636  0EF4               	movlw	244
 18809  004638  6FE0               	movwf	_cur_state& (0+255),b
 18810                           
 18811                           ; BSR set to: 0
 18812                           ;UI.c: 523: lcdInst(0b10000000);;
 18813  00463A  0E80               	movlw	128
 18814  00463C  ECAA  F024         	call	i2_lcdInst
 18815                           
 18816                           ;UI.c: 524: printf("LOG 1           ");
 18817  004640  0EC5               	movlw	low STR_41
 18818  004642  6E0D               	movwf	i2printf@f,c
 18819  004644  0EFC               	movlw	high STR_41
 18820  004646  6E0E               	movwf	i2printf@f+1,c
 18821  004648  EC9A  F00C         	call	i2_printf	;wreg free
 18822                           
 18823                           ;UI.c: 525: lcdInst(0b11000000);;
 18824  00464C  0EC0               	movlw	192
 18825  00464E  ECAA  F024         	call	i2_lcdInst
 18826                           
 18827                           ;UI.c: 526: printf("LOG 2          <");
 18828  004652  0E80               	movlw	low STR_42
 18829  004654  6E0D               	movwf	i2printf@f,c
 18830  004656  0EFD               	movlw	high STR_42
 18831  004658  6E0E               	movwf	i2printf@f+1,c
 18832  00465A  EC9A  F00C         	call	i2_printf	;wreg free
 18833  00465E  0012               	return		;funcret
 18834  004660                     __end_of_change_state_to_logs_12:
 18835                           	opt stack 0
 18836                           pclatu	equ	0xFFB
 18837                           pclath	equ	0xFFA
 18838                           tblptru	equ	0xFF8
 18839                           tblptrh	equ	0xFF7
 18840                           tblptrl	equ	0xFF6
 18841                           tablat	equ	0xFF5
 18842                           prodh	equ	0xFF4
 18843                           prodl	equ	0xFF3
 18844                           intcon	equ	0xFF2
 18845                           intcon2	equ	0xFF1
 18846                           intcon3	equ	0xFF0
 18847                           indf0	equ	0xFEF
 18848                           postinc0	equ	0xFEE
 18849                           fsr0h	equ	0xFEA
 18850                           fsr0l	equ	0xFE9
 18851                           wreg	equ	0xFE8
 18852                           postdec1	equ	0xFE5
 18853                           fsr1h	equ	0xFE2
 18854                           fsr1l	equ	0xFE1
 18855                           indf2	equ	0xFDF
 18856                           postinc2	equ	0xFDE
 18857                           postdec2	equ	0xFDD
 18858                           fsr2h	equ	0xFDA
 18859                           fsr2l	equ	0xFD9
 18860                           status	equ	0xFD8
 18861                           
 18862 ;; *************** function _change_state_to_logs_11 *****************
 18863 ;; Defined at:
 18864 ;;		line 514 in file "UI.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;		None
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;		None
 18869 ;; Return value:  Size  Location     Type
 18870 ;;                  1    wreg      void 
 18871 ;; Registers used:
 18872 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18873 ;; Tracked objects:
 18874 ;;		On entry : 0/0
 18875 ;;		On exit  : 0/0
 18876 ;;		Unchanged: 0/0
 18877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;Total ram usage:        0 bytes
 18883 ;; Hardware stack levels used:    1
 18884 ;; Hardware stack levels required when called:    3
 18885 ;; This function calls:
 18886 ;;		i2_lcdInst
 18887 ;;		i2_printf
 18888 ;; This function is called by:
 18889 ;;		_updateMenu
 18890 ;;		_inputHandler
 18891 ;; This function uses a non-reentrant model
 18892 ;;
 18893                           
 18894                           	psect	text74
 18895  004660                     __ptext74:
 18896                           	opt stack 0
 18897  004660                     _change_state_to_logs_11:
 18898                           	opt stack 18
 18899                           
 18900                           ;UI.c: 515: cur_state = 1011;
 18901                           
 18902                           ;incstack = 0
 18903  004660  0E03               	movlw	3
 18904  004662  0100               	movlb	0	; () banked
 18905  004664  6FE1               	movwf	(_cur_state+1)& (0+255),b
 18906  004666  0EF3               	movlw	243
 18907  004668  6FE0               	movwf	_cur_state& (0+255),b
 18908                           
 18909                           ; BSR set to: 0
 18910                           ;UI.c: 516: lcdInst(0b10000000);;
 18911  00466A  0E80               	movlw	128
 18912  00466C  ECAA  F024         	call	i2_lcdInst
 18913                           
 18914                           ;UI.c: 517: printf("LOG 1          <");
 18915  004670  0E6F               	movlw	low STR_39
 18916  004672  6E0D               	movwf	i2printf@f,c
 18917  004674  0EFD               	movlw	high STR_39
 18918  004676  6E0E               	movwf	i2printf@f+1,c
 18919  004678  EC9A  F00C         	call	i2_printf	;wreg free
 18920                           
 18921                           ;UI.c: 518: lcdInst(0b11000000);;
 18922  00467C  0EC0               	movlw	192
 18923  00467E  ECAA  F024         	call	i2_lcdInst
 18924                           
 18925                           ;UI.c: 519: printf("LOG 2           ");
 18926  004682  0ED6               	movlw	low STR_40
 18927  004684  6E0D               	movwf	i2printf@f,c
 18928  004686  0EFC               	movlw	high STR_40
 18929  004688  6E0E               	movwf	i2printf@f+1,c
 18930  00468A  EC9A  F00C         	call	i2_printf	;wreg free
 18931  00468E  0012               	return		;funcret
 18932  004690                     __end_of_change_state_to_logs_11:
 18933                           	opt stack 0
 18934                           pclatu	equ	0xFFB
 18935                           pclath	equ	0xFFA
 18936                           tblptru	equ	0xFF8
 18937                           tblptrh	equ	0xFF7
 18938                           tblptrl	equ	0xFF6
 18939                           tablat	equ	0xFF5
 18940                           prodh	equ	0xFF4
 18941                           prodl	equ	0xFF3
 18942                           intcon	equ	0xFF2
 18943                           intcon2	equ	0xFF1
 18944                           intcon3	equ	0xFF0
 18945                           indf0	equ	0xFEF
 18946                           postinc0	equ	0xFEE
 18947                           fsr0h	equ	0xFEA
 18948                           fsr0l	equ	0xFE9
 18949                           wreg	equ	0xFE8
 18950                           postdec1	equ	0xFE5
 18951                           fsr1h	equ	0xFE2
 18952                           fsr1l	equ	0xFE1
 18953                           indf2	equ	0xFDF
 18954                           postinc2	equ	0xFDE
 18955                           postdec2	equ	0xFDD
 18956                           fsr2h	equ	0xFDA
 18957                           fsr2l	equ	0xFD9
 18958                           status	equ	0xFD8
 18959                           
 18960 ;; *************** function _dispLogs *****************
 18961 ;; Defined at:
 18962 ;;		line 467 in file "UI.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;  myLog           2   17[COMRAM] int 
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;		None
 18967 ;; Return value:  Size  Location     Type
 18968 ;;                  1    wreg      void 
 18969 ;; Registers used:
 18970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18971 ;; Tracked objects:
 18972 ;;		On entry : 0/0
 18973 ;;		On exit  : 0/0
 18974 ;;		Unchanged: 0/0
 18975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18979 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18980 ;;Total ram usage:        2 bytes
 18981 ;; Hardware stack levels used:    1
 18982 ;; Hardware stack levels required when called:    2
 18983 ;; This function calls:
 18984 ;;		_retrieveLog
 18985 ;; This function is called by:
 18986 ;;		_updateMenu
 18987 ;; This function uses a non-reentrant model
 18988 ;;
 18989                           
 18990                           	psect	text75
 18991  004838                     __ptext75:
 18992                           	opt stack 0
 18993  004838                     _dispLogs:
 18994                           	opt stack 20
 18995                           
 18996                           ;UI.c: 468: logstate = 1;
 18997                           
 18998                           ;incstack = 0
 18999  004838  0E00               	movlw	0
 19000  00483A  0100               	movlb	0	; () banked
 19001  00483C  6FF7               	movwf	(_logstate+1)& (0+255),b
 19002  00483E  0E01               	movlw	1
 19003  004840  6FF6               	movwf	_logstate& (0+255),b
 19004                           
 19005                           ; BSR set to: 0
 19006                           ;UI.c: 469: log = myLog;
 19007  004842  C012  F0E6         	movff	dispLogs@myLog,_log
 19008  004846  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;UI.c: 470: retrieveLog(myLog - 1);
 19012  00484A  0EFF               	movlw	255
 19013  00484C  2412               	addwf	dispLogs@myLog,w,c
 19014  00484E  6E07               	movwf	retrieveLog@logNum,c
 19015  004850  0EFF               	movlw	255
 19016  004852  2013               	addwfc	dispLogs@myLog+1,w,c
 19017  004854  6E08               	movwf	retrieveLog@logNum+1,c
 19018  004856  EC2A  F019         	call	_retrieveLog	;wreg free
 19019  00485A  0012               	return		;funcret
 19020  00485C                     __end_of_dispLogs:
 19021                           	opt stack 0
 19022                           pclatu	equ	0xFFB
 19023                           pclath	equ	0xFFA
 19024                           tblptru	equ	0xFF8
 19025                           tblptrh	equ	0xFF7
 19026                           tblptrl	equ	0xFF6
 19027                           tablat	equ	0xFF5
 19028                           prodh	equ	0xFF4
 19029                           prodl	equ	0xFF3
 19030                           intcon	equ	0xFF2
 19031                           intcon2	equ	0xFF1
 19032                           intcon3	equ	0xFF0
 19033                           indf0	equ	0xFEF
 19034                           postinc0	equ	0xFEE
 19035                           fsr0h	equ	0xFEA
 19036                           fsr0l	equ	0xFE9
 19037                           wreg	equ	0xFE8
 19038                           postdec1	equ	0xFE5
 19039                           fsr1h	equ	0xFE2
 19040                           fsr1l	equ	0xFE1
 19041                           indf2	equ	0xFDF
 19042                           postinc2	equ	0xFDE
 19043                           postdec2	equ	0xFDD
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function _retrieveLog *****************
 19049 ;; Defined at:
 19050 ;;		line 134 in file "EEPROM.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;  logNum          2    6[COMRAM] int 
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;  i               2   13[COMRAM] int 
 19055 ;;  addr            2   15[COMRAM] unsigned short 
 19056 ;;  byte3           1   12[COMRAM] unsigned char 
 19057 ;;  byte2           1   11[COMRAM] unsigned char 
 19058 ;;  byte1           1   10[COMRAM] unsigned char 
 19059 ;; Return value:  Size  Location     Type
 19060 ;;                  1    wreg      void 
 19061 ;; Registers used:
 19062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19063 ;; Tracked objects:
 19064 ;;		On entry : 0/0
 19065 ;;		On exit  : 0/0
 19066 ;;		Unchanged: 0/0
 19067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19069 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19070 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19071 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19072 ;;Total ram usage:       11 bytes
 19073 ;; Hardware stack levels used:    1
 19074 ;; Hardware stack levels required when called:    1
 19075 ;; This function calls:
 19076 ;;		i2_EEPROM_read
 19077 ;;		i2___wmul
 19078 ;; This function is called by:
 19079 ;;		_dispLogs
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           	psect	text76
 19084  003254                     __ptext76:
 19085                           	opt stack 0
 19086  003254                     _retrieveLog:
 19087                           	opt stack 20
 19088                           
 19089                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19090                           
 19091                           ;incstack = 0
 19092  003254  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19093  003258  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19094  00325C  0E00               	movlw	0
 19095  00325E  6E04               	movwf	i2___wmul@multiplicand+1,c
 19096  003260  0E0B               	movlw	11
 19097  003262  6E03               	movwf	i2___wmul@multiplicand,c
 19098  003264  ECF6  F023         	call	i2___wmul	;wreg free
 19099  003268  0E01               	movlw	1
 19100  00326A  2401               	addwf	?i2___wmul,w,c
 19101  00326C  6E10               	movwf	retrieveLog@addr,c
 19102  00326E  0E00               	movlw	0
 19103  003270  2002               	addwfc	?i2___wmul+1,w,c
 19104  003272  6E11               	movwf	retrieveLog@addr+1,c
 19105                           
 19106                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19107  003274  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19108  003278  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19109  00327C  EC76  F024         	call	i2_EEPROM_read	;wreg free
 19110  003280  6E0B               	movwf	retrieveLog@byte1,c
 19111                           
 19112                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19113  003282  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19114  003286  0E80               	movlw	128
 19115  003288  1609               	andwf	??_retrieveLog,f,c
 19116  00328A  5009               	movf	??_retrieveLog,w,c
 19117  00328C  0100               	movlb	0	; () banked
 19118  00328E  6FE8               	movwf	_log_completion& (0+255),b
 19119  003290  6BE9               	clrf	(_log_completion+1)& (0+255),b
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19123  003292  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19124  003296  0E0F               	movlw	15
 19125  003298  1609               	andwf	??_retrieveLog,f,c
 19126  00329A  5009               	movf	??_retrieveLog,w,c
 19127  00329C  0100               	movlb	0	; () banked
 19128  00329E  6FF2               	movwf	_log_count_total& (0+255),b
 19129  0032A0  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 19130                           
 19131                           ; BSR set to: 0
 19132                           ;EEPROM.c: 146: addr++;
 19133  0032A2  4A10               	infsnz	retrieveLog@addr,f,c
 19134  0032A4  2A11               	incf	retrieveLog@addr+1,f,c
 19135                           
 19136                           ; BSR set to: 0
 19137                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19138  0032A6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19139  0032AA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19140  0032AE  EC76  F024         	call	i2_EEPROM_read	;wreg free
 19141  0032B2  6E0C               	movwf	retrieveLog@byte2,c
 19142                           
 19143                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19144  0032B4  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19145  0032B8  3A09               	swapf	??_retrieveLog,f,c
 19146  0032BA  0E0F               	movlw	15
 19147  0032BC  1609               	andwf	??_retrieveLog,f,c
 19148  0032BE  0E0F               	movlw	15
 19149  0032C0  1609               	andwf	??_retrieveLog,f,c
 19150  0032C2  5009               	movf	??_retrieveLog,w,c
 19151  0032C4  0100               	movlb	0	; () banked
 19152  0032C6  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 19153  0032C8  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19157  0032CA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19158  0032CE  0E0F               	movlw	15
 19159  0032D0  1609               	andwf	??_retrieveLog,f,c
 19160  0032D2  5009               	movf	??_retrieveLog,w,c
 19161  0032D4  0100               	movlb	0	; () banked
 19162  0032D6  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 19163  0032D8  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19164                           
 19165                           ; BSR set to: 0
 19166                           ;EEPROM.c: 152: addr++;
 19167  0032DA  4A10               	infsnz	retrieveLog@addr,f,c
 19168  0032DC  2A11               	incf	retrieveLog@addr+1,f,c
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19172  0032DE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19173  0032E2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19174  0032E6  EC76  F024         	call	i2_EEPROM_read	;wreg free
 19175  0032EA  6E0D               	movwf	retrieveLog@byte3,c
 19176                           
 19177                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19178  0032EC  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19179  0032F0  3A09               	swapf	??_retrieveLog,f,c
 19180  0032F2  0E0F               	movlw	15
 19181  0032F4  1609               	andwf	??_retrieveLog,f,c
 19182  0032F6  0E0F               	movlw	15
 19183  0032F8  1609               	andwf	??_retrieveLog,f,c
 19184  0032FA  5009               	movf	??_retrieveLog,w,c
 19185  0032FC  0100               	movlb	0	; () banked
 19186  0032FE  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 19187  003300  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 19188                           
 19189                           ; BSR set to: 0
 19190                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19191  003302  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19192  003306  0E0F               	movlw	15
 19193  003308  1609               	andwf	??_retrieveLog,f,c
 19194  00330A  5009               	movf	??_retrieveLog,w,c
 19195  00330C  0100               	movlb	0	; () banked
 19196  00330E  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 19197  003310  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;EEPROM.c: 156: addr++;
 19201  003312  4A10               	infsnz	retrieveLog@addr,f,c
 19202  003314  2A11               	incf	retrieveLog@addr+1,f,c
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19206  003316  0E00               	movlw	0
 19207  003318  6E0F               	movwf	retrieveLog@i+1,c
 19208  00331A  0E00               	movlw	0
 19209  00331C  6E0E               	movwf	retrieveLog@i,c
 19210  00331E                     i2l6081:
 19211                           
 19212                           ; BSR set to: 0
 19213  00331E  BE0F               	btfsc	retrieveLog@i+1,7,c
 19214  003320  D006               	goto	i2l6085
 19215  003322  500F               	movf	retrieveLog@i+1,w,c
 19216  003324  E11E               	bnz	i2l6093
 19217  003326  0E07               	movlw	7
 19218  003328  5C0E               	subwf	retrieveLog@i,w,c
 19219  00332A  B0D8               	btfsc	status,0,c
 19220  00332C  D01A               	goto	i2l6093
 19221  00332E                     i2l6085:
 19222                           
 19223                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19224  00332E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19225  003332  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19226  003336  EC76  F024         	call	i2_EEPROM_read	;wreg free
 19227  00333A  6E09               	movwf	??_retrieveLog& (0+255),c
 19228  00333C  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19229  00333E  90D8               	bcf	status,0,c
 19230  003340  340E               	rlcf	retrieveLog@i,w,c
 19231  003342  6ED9               	movwf	fsr2l,c
 19232  003344  340F               	rlcf	retrieveLog@i+1,w,c
 19233  003346  6EDA               	movwf	fsr2h,c
 19234  003348  0E00               	movlw	low _log_startTime
 19235  00334A  26D9               	addwf	fsr2l,f,c
 19236  00334C  0E01               	movlw	high _log_startTime
 19237  00334E  22DA               	addwfc	fsr2h,f,c
 19238  003350  C009  FFDE         	movff	??_retrieveLog,postinc2
 19239  003354  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19240                           
 19241                           ;EEPROM.c: 161: addr++;
 19242  003358  4A10               	infsnz	retrieveLog@addr,f,c
 19243  00335A  2A11               	incf	retrieveLog@addr+1,f,c
 19244  00335C  4A0E               	infsnz	retrieveLog@i,f,c
 19245  00335E  2A0F               	incf	retrieveLog@i+1,f,c
 19246  003360  D7DE               	goto	i2l6081
 19247  003362                     i2l6093:
 19248                           
 19249                           ;EEPROM.c: 162: }
 19250                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19251  003362  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19252  003366  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19253  00336A  EC76  F024         	call	i2_EEPROM_read	;wreg free
 19254  00336E  6E09               	movwf	??_retrieveLog& (0+255),c
 19255  003370  5009               	movf	??_retrieveLog,w,c
 19256  003372  0100               	movlb	0	; () banked
 19257  003374  6FF4               	movwf	_log_total_time& (0+255),b
 19258  003376  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19259                           
 19260                           ; BSR set to: 0
 19261  003378  0012               	return		;funcret
 19262  00337A                     __end_of_retrieveLog:
 19263                           	opt stack 0
 19264                           pclatu	equ	0xFFB
 19265                           pclath	equ	0xFFA
 19266                           tblptru	equ	0xFF8
 19267                           tblptrh	equ	0xFF7
 19268                           tblptrl	equ	0xFF6
 19269                           tablat	equ	0xFF5
 19270                           prodh	equ	0xFF4
 19271                           prodl	equ	0xFF3
 19272                           intcon	equ	0xFF2
 19273                           intcon2	equ	0xFF1
 19274                           intcon3	equ	0xFF0
 19275                           indf0	equ	0xFEF
 19276                           postinc0	equ	0xFEE
 19277                           fsr0h	equ	0xFEA
 19278                           fsr0l	equ	0xFE9
 19279                           wreg	equ	0xFE8
 19280                           postdec1	equ	0xFE5
 19281                           fsr1h	equ	0xFE2
 19282                           fsr1l	equ	0xFE1
 19283                           indf2	equ	0xFDF
 19284                           postinc2	equ	0xFDE
 19285                           postdec2	equ	0xFDD
 19286                           fsr2h	equ	0xFDA
 19287                           fsr2l	equ	0xFD9
 19288                           status	equ	0xFD8
 19289                           
 19290 ;; *************** function i2_EEPROM_read *****************
 19291 ;; Defined at:
 19292 ;;		line 68 in file "EEPROM.c"
 19293 ;; Parameters:    Size  Location     Type
 19294 ;;  address         2    0[COMRAM] unsigned short 
 19295 ;; Auto vars:     Size  Location     Type
 19296 ;;		None
 19297 ;; Return value:  Size  Location     Type
 19298 ;;                  1    wreg      unsigned char 
 19299 ;; Registers used:
 19300 ;;		wreg, status,2
 19301 ;; Tracked objects:
 19302 ;;		On entry : 0/0
 19303 ;;		On exit  : 0/0
 19304 ;;		Unchanged: 0/0
 19305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19310 ;;Total ram usage:        2 bytes
 19311 ;; Hardware stack levels used:    1
 19312 ;; This function calls:
 19313 ;;		Nothing
 19314 ;; This function is called by:
 19315 ;;		_retrieveLog
 19316 ;; This function uses a non-reentrant model
 19317 ;;
 19318                           
 19319                           	psect	text77
 19320  0048EC                     __ptext77:
 19321                           	opt stack 0
 19322  0048EC                     i2_EEPROM_read:
 19323                           	opt stack 20
 19324                           
 19325                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;incstack = 0
 19329  0048EC  5002               	movf	i2EEPROM_read@address+1,w,c
 19330  0048EE  6EAA               	movwf	4010,c	;volatile
 19331                           
 19332                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19333  0048F0  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19334                           
 19335                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19336  0048F4  9EA6               	bcf	4006,7,c	;volatile
 19337                           
 19338                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19339  0048F6  9CA6               	bcf	4006,6,c	;volatile
 19340                           
 19341                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19342  0048F8  80A6               	bsf	4006,0,c	;volatile
 19343  0048FA                     i2l945:
 19344  0048FA  B0A6               	btfsc	4006,0,c	;volatile
 19345  0048FC  D7FE               	goto	i2l945
 19346                           
 19347                           ;EEPROM.c: 81: return EEDATA;
 19348  0048FE  50A8               	movf	4008,w,c	;volatile
 19349  004900  0012               	return	
 19350  004902                     __end_ofi2_EEPROM_read:
 19351                           	opt stack 0
 19352                           pclatu	equ	0xFFB
 19353                           pclath	equ	0xFFA
 19354                           tblptru	equ	0xFF8
 19355                           tblptrh	equ	0xFF7
 19356                           tblptrl	equ	0xFF6
 19357                           tablat	equ	0xFF5
 19358                           prodh	equ	0xFF4
 19359                           prodl	equ	0xFF3
 19360                           intcon	equ	0xFF2
 19361                           intcon2	equ	0xFF1
 19362                           intcon3	equ	0xFF0
 19363                           indf0	equ	0xFEF
 19364                           postinc0	equ	0xFEE
 19365                           fsr0h	equ	0xFEA
 19366                           fsr0l	equ	0xFE9
 19367                           wreg	equ	0xFE8
 19368                           postdec1	equ	0xFE5
 19369                           fsr1h	equ	0xFE2
 19370                           fsr1l	equ	0xFE1
 19371                           indf2	equ	0xFDF
 19372                           postinc2	equ	0xFDE
 19373                           postdec2	equ	0xFDD
 19374                           fsr2h	equ	0xFDA
 19375                           fsr2l	equ	0xFD9
 19376                           status	equ	0xFD8
 19377                           
 19378 ;; *************** function _printSortTimer *****************
 19379 ;; Defined at:
 19380 ;;		line 290 in file "sort.c"
 19381 ;; Parameters:    Size  Location     Type
 19382 ;;		None
 19383 ;; Auto vars:     Size  Location     Type
 19384 ;;  i               2   72[COMRAM] int 
 19385 ;;  curTime        14   46[COMRAM] int [7]
 19386 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19387 ;;  sec             2   66[COMRAM] int 
 19388 ;;  min             2   64[COMRAM] int 
 19389 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19390 ;;  start_sec       2   60[COMRAM] unsigned int 
 19391 ;;  hour            2   44[COMRAM] int 
 19392 ;; Return value:  Size  Location     Type
 19393 ;;                  1    wreg      void 
 19394 ;; Registers used:
 19395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19396 ;; Tracked objects:
 19397 ;;		On entry : 0/0
 19398 ;;		On exit  : 0/0
 19399 ;;		Unchanged: 0/0
 19400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19403 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19404 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19405 ;;Total ram usage:       33 bytes
 19406 ;; Hardware stack levels used:    1
 19407 ;; Hardware stack levels required when called:    3
 19408 ;; This function calls:
 19409 ;;		i2___lwdiv
 19410 ;;		i2___lwmod
 19411 ;;		i2___wmul
 19412 ;;		i2_getRTC
 19413 ;;		i2_lcdInst
 19414 ;;		i2_printf
 19415 ;; This function is called by:
 19416 ;;		_handler
 19417 ;; This function uses a non-reentrant model
 19418 ;;
 19419                           
 19420                           	psect	text78
 19421  002760                     __ptext78:
 19422                           	opt stack 0
 19423  002760                     _printSortTimer:
 19424                           	opt stack 20
 19425                           
 19426                           ;sort.c: 291: getRTC();
 19427                           
 19428                           ;incstack = 0
 19429  002760  EC0F  F01F         	call	i2_getRTC	;wreg free
 19430                           
 19431                           ;sort.c: 292: int curTime[7];
 19432                           ;sort.c: 293: for(int i = 0; i < 7; i++){
 19433  002764  0E00               	movlw	0
 19434  002766  6E4A               	movwf	printSortTimer@i+1,c
 19435  002768  0E00               	movlw	0
 19436  00276A  6E49               	movwf	printSortTimer@i,c
 19437  00276C                     i2l8205:
 19438  00276C  BE4A               	btfsc	printSortTimer@i+1,7,c
 19439  00276E  D006               	goto	i2l8209
 19440  002770  504A               	movf	printSortTimer@i+1,w,c
 19441  002772  E131               	bnz	i2l8215
 19442  002774  0E07               	movlw	7
 19443  002776  5C49               	subwf	printSortTimer@i,w,c
 19444  002778  B0D8               	btfsc	status,0,c
 19445  00277A  D02D               	goto	i2l8215
 19446  00277C                     i2l8209:
 19447                           
 19448                           ;sort.c: 294: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19449  00277C  0E24               	movlw	low _time
 19450  00277E  2449               	addwf	printSortTimer@i,w,c
 19451  002780  6ED9               	movwf	fsr2l,c
 19452  002782  0E01               	movlw	high _time
 19453  002784  204A               	addwfc	printSortTimer@i+1,w,c
 19454  002786  6EDA               	movwf	fsr2h,c
 19455  002788  50DF               	movf	indf2,w,c
 19456  00278A  6E2A               	movwf	??_printSortTimer& (0+255),c
 19457  00278C  3A2A               	swapf	??_printSortTimer,f,c
 19458  00278E  0E0F               	movlw	15
 19459  002790  162A               	andwf	??_printSortTimer,f,c
 19460  002792  0E0F               	movlw	15
 19461  002794  162A               	andwf	??_printSortTimer,f,c
 19462  002796  502A               	movf	??_printSortTimer,w,c
 19463  002798  0D0A               	mullw	10
 19464  00279A  0E24               	movlw	low _time
 19465  00279C  2449               	addwf	printSortTimer@i,w,c
 19466  00279E  6ED9               	movwf	fsr2l,c
 19467  0027A0  0E01               	movlw	high _time
 19468  0027A2  204A               	addwfc	printSortTimer@i+1,w,c
 19469  0027A4  6EDA               	movwf	fsr2h,c
 19470  0027A6  50DF               	movf	indf2,w,c
 19471  0027A8  0B0F               	andlw	15
 19472  0027AA  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19473  0027AC  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19474  0027AE  50F3               	movf	prodl,w,c
 19475  0027B0  262B               	addwf	??_printSortTimer+1,f,c
 19476  0027B2  50F4               	movf	prodh,w,c
 19477  0027B4  222C               	addwfc	??_printSortTimer+2,f,c
 19478  0027B6  90D8               	bcf	status,0,c
 19479  0027B8  3449               	rlcf	printSortTimer@i,w,c
 19480  0027BA  6ED9               	movwf	fsr2l,c
 19481  0027BC  344A               	rlcf	printSortTimer@i+1,w,c
 19482  0027BE  6EDA               	movwf	fsr2h,c
 19483  0027C0  0E2F               	movlw	low printSortTimer@curTime
 19484  0027C2  26D9               	addwf	fsr2l,f,c
 19485  0027C4  0E00               	movlw	high printSortTimer@curTime
 19486  0027C6  22DA               	addwfc	fsr2h,f,c
 19487  0027C8  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19488  0027CC  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19489  0027D0  4A49               	infsnz	printSortTimer@i,f,c
 19490  0027D2  2A4A               	incf	printSortTimer@i+1,f,c
 19491  0027D4  D7CB               	goto	i2l8205
 19492  0027D6                     i2l8215:
 19493                           
 19494                           ;sort.c: 295: }
 19495                           ;sort.c: 296: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19496  0027D6  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19497  0027DA  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19498  0027DE  0E00               	movlw	0
 19499  0027E0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19500  0027E2  0E3C               	movlw	60
 19501  0027E4  6E03               	movwf	i2___wmul@multiplicand,c
 19502  0027E6  ECF6  F023         	call	i2___wmul	;wreg free
 19503  0027EA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19504  0027EE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19505  0027F2  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19506  0027F6  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19507  0027FA  0E0E               	movlw	14
 19508  0027FC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19509  0027FE  0E10               	movlw	16
 19510  002800  6E03               	movwf	i2___wmul@multiplicand,c
 19511  002802  ECF6  F023         	call	i2___wmul	;wreg free
 19512  002806  5001               	movf	?i2___wmul,w,c
 19513  002808  262A               	addwf	??_printSortTimer,f,c
 19514  00280A  5002               	movf	?i2___wmul+1,w,c
 19515  00280C  222B               	addwfc	??_printSortTimer+1,f,c
 19516  00280E  0101               	movlb	1	; () banked
 19517  002810  510E               	movf	_startTime& (0+255),w,b
 19518  002812  242A               	addwf	??_printSortTimer,w,c
 19519  002814  6E3D               	movwf	printSortTimer@start_sec,c
 19520  002816  0101               	movlb	1	; () banked
 19521  002818  510F               	movf	(_startTime+1)& (0+255),w,b
 19522  00281A  202B               	addwfc	??_printSortTimer+1,w,c
 19523  00281C  6E3E               	movwf	printSortTimer@start_sec+1,c
 19524                           
 19525                           ;sort.c: 297: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19526  00281E  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19527  002822  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19528  002826  0E00               	movlw	0
 19529  002828  6E04               	movwf	i2___wmul@multiplicand+1,c
 19530  00282A  0E3C               	movlw	60
 19531  00282C  6E03               	movwf	i2___wmul@multiplicand,c
 19532  00282E  ECF6  F023         	call	i2___wmul	;wreg free
 19533  002832  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19534  002836  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19535  00283A  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19536  00283E  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19537  002842  0E0E               	movlw	14
 19538  002844  6E04               	movwf	i2___wmul@multiplicand+1,c
 19539  002846  0E10               	movlw	16
 19540  002848  6E03               	movwf	i2___wmul@multiplicand,c
 19541  00284A  ECF6  F023         	call	i2___wmul	;wreg free
 19542  00284E  5001               	movf	?i2___wmul,w,c
 19543  002850  262A               	addwf	??_printSortTimer,f,c
 19544  002852  5002               	movf	?i2___wmul+1,w,c
 19545  002854  222B               	addwfc	??_printSortTimer+1,f,c
 19546  002856  502F               	movf	printSortTimer@curTime,w,c
 19547  002858  242A               	addwf	??_printSortTimer,w,c
 19548  00285A  6E3F               	movwf	printSortTimer@cur_sec,c
 19549  00285C  5030               	movf	printSortTimer@curTime+1,w,c
 19550  00285E  202B               	addwfc	??_printSortTimer+1,w,c
 19551  002860  6E40               	movwf	printSortTimer@cur_sec+1,c
 19552                           
 19553                           ;sort.c: 298: unsigned int timeDiff = cur_sec - start_sec;
 19554  002862  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19555  002866  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19556  00286A  1E2A               	comf	??_printSortTimer,f,c
 19557  00286C  1E2B               	comf	??_printSortTimer+1,f,c
 19558  00286E  4A2A               	infsnz	??_printSortTimer,f,c
 19559  002870  2A2B               	incf	??_printSortTimer+1,f,c
 19560  002872  503F               	movf	printSortTimer@cur_sec,w,c
 19561  002874  242A               	addwf	??_printSortTimer,w,c
 19562  002876  6E47               	movwf	printSortTimer@timeDiff,c
 19563  002878  5040               	movf	printSortTimer@cur_sec+1,w,c
 19564  00287A  202B               	addwfc	??_printSortTimer+1,w,c
 19565  00287C  6E48               	movwf	printSortTimer@timeDiff+1,c
 19566                           
 19567                           ;sort.c: 300: total_time = timeDiff;
 19568  00287E  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19569  002882  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19570                           
 19571                           ;sort.c: 302: if(timeDiff >= 179){
 19572  002886  5048               	movf	printSortTimer@timeDiff+1,w,c
 19573  002888  E104               	bnz	i2u716_40
 19574  00288A  0EB3               	movlw	179
 19575  00288C  5C47               	subwf	printSortTimer@timeDiff,w,c
 19576  00288E  A0D8               	btfss	status,0,c
 19577  002890  D003               	goto	i2l8225
 19578  002892                     i2u716_40:
 19579                           
 19580                           ;sort.c: 303: machine_state = DoneSorting_state;
 19581  002892  0E02               	movlw	2
 19582  002894  0100               	movlb	0	; () banked
 19583  002896  6FFC               	movwf	_machine_state& (0+255),b
 19584  002898                     i2l8225:
 19585                           
 19586                           ;sort.c: 305: }
 19587                           ;sort.c: 307: int hour = timeDiff / 3600;
 19588  002898  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19589  00289C  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19590  0028A0  0E0E               	movlw	14
 19591  0028A2  6E09               	movwf	i2___lwdiv@divisor+1,c
 19592  0028A4  0E10               	movlw	16
 19593  0028A6  6E08               	movwf	i2___lwdiv@divisor,c
 19594  0028A8  ECF0  F020         	call	i2___lwdiv	;wreg free
 19595  0028AC  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19596  0028B0  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19597                           
 19598                           ;sort.c: 308: int min = (timeDiff % 3600) / 60;
 19599  0028B4  0E0E               	movlw	14
 19600  0028B6  6E04               	movwf	i2___lwmod@divisor+1,c
 19601  0028B8  0E10               	movlw	16
 19602  0028BA  6E03               	movwf	i2___lwmod@divisor,c
 19603  0028BC  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19604  0028C0  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19605  0028C4  ECAF  F021         	call	i2___lwmod	;wreg free
 19606  0028C8  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19607  0028CC  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19608  0028D0  0E00               	movlw	0
 19609  0028D2  6E09               	movwf	i2___lwdiv@divisor+1,c
 19610  0028D4  0E3C               	movlw	60
 19611  0028D6  6E08               	movwf	i2___lwdiv@divisor,c
 19612  0028D8  ECF0  F020         	call	i2___lwdiv	;wreg free
 19613  0028DC  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19614  0028E0  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19615                           
 19616                           ;sort.c: 309: int sec = (timeDiff % 3600) % 60;
 19617  0028E4  0E0E               	movlw	14
 19618  0028E6  6E04               	movwf	i2___lwmod@divisor+1,c
 19619  0028E8  0E10               	movlw	16
 19620  0028EA  6E03               	movwf	i2___lwmod@divisor,c
 19621  0028EC  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19622  0028F0  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19623  0028F4  ECAF  F021         	call	i2___lwmod	;wreg free
 19624  0028F8  C001  F045         	movff	?i2___lwmod,_printSortTimer$2433
 19625  0028FC  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2433+1
 19626                           
 19627                           ;sort.c: 309: int sec = (timeDiff % 3600) % 60;
 19628  002900  C045  F001         	movff	_printSortTimer$2433,i2___lwmod@dividend
 19629  002904  C046  F002         	movff	_printSortTimer$2433+1,i2___lwmod@dividend+1
 19630  002908  0E00               	movlw	0
 19631  00290A  6E04               	movwf	i2___lwmod@divisor+1,c
 19632  00290C  0E3C               	movlw	60
 19633  00290E  6E03               	movwf	i2___lwmod@divisor,c
 19634  002910  ECAF  F021         	call	i2___lwmod	;wreg free
 19635  002914  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19636  002918  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19637                           
 19638                           ;sort.c: 311: lcdInst(0b10000000);;
 19639  00291C  0E80               	movlw	128
 19640  00291E  ECAA  F024         	call	i2_lcdInst
 19641                           
 19642                           ;sort.c: 312: printf("SORTING...");
 19643  002922  0E7C               	movlw	low STR_64
 19644  002924  6E0D               	movwf	i2printf@f,c
 19645  002926  0EFF               	movlw	high STR_64
 19646  002928  6E0E               	movwf	i2printf@f+1,c
 19647  00292A  EC9A  F00C         	call	i2_printf	;wreg free
 19648                           
 19649                           ;sort.c: 313: lcdInst(0b11000000);;
 19650  00292E  0EC0               	movlw	192
 19651  002930  ECAA  F024         	call	i2_lcdInst
 19652                           
 19653                           ;sort.c: 314: printf("TIME %d:%02d", min, sec);
 19654  002934  0E42               	movlw	low STR_65
 19655  002936  6E0D               	movwf	i2printf@f,c
 19656  002938  0EFF               	movlw	high STR_65
 19657  00293A  6E0E               	movwf	i2printf@f+1,c
 19658  00293C  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19659  002940  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19660  002944  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19661  002948  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19662  00294C  EC9A  F00C         	call	i2_printf	;wreg free
 19663  002950  0012               	return		;funcret
 19664  002952                     __end_of_printSortTimer:
 19665                           	opt stack 0
 19666                           pclatu	equ	0xFFB
 19667                           pclath	equ	0xFFA
 19668                           tblptru	equ	0xFF8
 19669                           tblptrh	equ	0xFF7
 19670                           tblptrl	equ	0xFF6
 19671                           tablat	equ	0xFF5
 19672                           prodh	equ	0xFF4
 19673                           prodl	equ	0xFF3
 19674                           intcon	equ	0xFF2
 19675                           intcon2	equ	0xFF1
 19676                           intcon3	equ	0xFF0
 19677                           indf0	equ	0xFEF
 19678                           postinc0	equ	0xFEE
 19679                           fsr0h	equ	0xFEA
 19680                           fsr0l	equ	0xFE9
 19681                           wreg	equ	0xFE8
 19682                           postdec1	equ	0xFE5
 19683                           fsr1h	equ	0xFE2
 19684                           fsr1l	equ	0xFE1
 19685                           indf2	equ	0xFDF
 19686                           postinc2	equ	0xFDE
 19687                           postdec2	equ	0xFDD
 19688                           fsr2h	equ	0xFDA
 19689                           fsr2l	equ	0xFD9
 19690                           status	equ	0xFD8
 19691                           
 19692 ;; *************** function i2_printf *****************
 19693 ;; Defined at:
 19694 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19695 ;; Parameters:    Size  Location     Type
 19696 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19697 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 19698 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19699 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19700 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19701 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19702 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19703 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19704 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19705 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19706 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19707 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19708 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19709 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19710 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19711 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19712 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19713 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19714 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19715 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19716 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19717 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19718 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19719 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19720 ;;		 -> STR_2(14), STR_1(18), 
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;  printf          4    0        struct .
 19723 ;;  printf          2   39[COMRAM] int 
 19724 ;;  printf          2   35[COMRAM] unsigned int 
 19725 ;;  printf          2   33[COMRAM] unsigned int 
 19726 ;;  printf          2   31[COMRAM] PTR void [1]
 19727 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19728 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19729 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 19730 ;;  printf          1   38[COMRAM] char 
 19731 ;;  printf          1   37[COMRAM] unsigned char 
 19732 ;;  printf          1   28[COMRAM] char 
 19733 ;; Return value:  Size  Location     Type
 19734 ;;                  2   12[COMRAM] int 
 19735 ;; Registers used:
 19736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19737 ;; Tracked objects:
 19738 ;;		On entry : 0/0
 19739 ;;		On exit  : 0/0
 19740 ;;		Unchanged: 0/0
 19741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19742 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19743 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19744 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19745 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19746 ;;Total ram usage:       29 bytes
 19747 ;; Hardware stack levels used:    1
 19748 ;; Hardware stack levels required when called:    2
 19749 ;; This function calls:
 19750 ;;		i2___lwdiv
 19751 ;;		i2___lwmod
 19752 ;;		i2___wmul
 19753 ;;		i2_isdigit
 19754 ;;		i2_putch
 19755 ;; This function is called by:
 19756 ;;		_change_state_to_menu_11
 19757 ;;		_change_state_to_menu_23
 19758 ;;		_change_state_to_logs_11
 19759 ;;		_change_state_to_logs_12
 19760 ;;		_change_state_to_logs_22
 19761 ;;		_change_state_to_logs_23
 19762 ;;		_change_state_to_logs_33
 19763 ;;		_change_state_to_logs_34
 19764 ;;		_printSortTimer
 19765 ;;		i2_change_state_to_menu_start
 19766 ;;		i2_change_state_to_menu_12
 19767 ;;		i2_change_state_to_menu_22
 19768 ;;		i2_printRTC
 19769 ;; This function uses a non-reentrant model
 19770 ;;
 19771                           
 19772                           	psect	text79
 19773  001934                     __ptext79:
 19774                           	opt stack 0
 19775  001934                     i2_printf:
 19776                           	opt stack 19
 19777                           
 19778                           ;doprnt.c: 466: va_list ap;
 19779                           ;doprnt.c: 499: signed char c;
 19780                           ;doprnt.c: 501: int width;
 19781                           ;doprnt.c: 506: signed char prec;
 19782                           ;doprnt.c: 508: unsigned char flag;
 19783                           ;doprnt.c: 523: union {
 19784                           ;doprnt.c: 524: unsigned long vd;
 19785                           ;doprnt.c: 525: double integ;
 19786                           ;doprnt.c: 526: } tmpval;
 19787                           ;doprnt.c: 528: unsigned int val;
 19788                           ;doprnt.c: 529: unsigned len;
 19789                           ;doprnt.c: 530: const char * cp;
 19790                           ;doprnt.c: 533: *ap = __va_start();
 19791                           
 19792                           ;incstack = 0
 19793  001934  0E0F               	movlw	low (?i2_printf+2)
 19794  001936  6E20               	movwf	i2printf@ap,c
 19795  001938  0E00               	movlw	high (?i2_printf+2)
 19796  00193A  6E21               	movwf	i2printf@ap+1,c
 19797                           
 19798                           ;doprnt.c: 536: while(c = *f++) {
 19799  00193C  D1A4               	goto	i2l5905
 19800  00193E                     i2l5775:
 19801                           
 19802                           ;doprnt.c: 538: if(c != '%')
 19803  00193E  0E25               	movlw	37
 19804  001940  1827               	xorwf	i2printf@c,w,c
 19805  001942  B4D8               	btfsc	status,2,c
 19806  001944  D004               	goto	i2l5779
 19807                           
 19808                           ;doprnt.c: 540: {
 19809                           ;doprnt.c: 541: (putch(c) );
 19810  001946  5027               	movf	i2printf@c,w,c
 19811  001948  ECA4  F024         	call	i2_putch
 19812                           
 19813                           ;doprnt.c: 542: continue;
 19814  00194C  D19C               	goto	i2l5905
 19815  00194E                     i2l5779:
 19816                           
 19817                           ;doprnt.c: 543: }
 19818                           ;doprnt.c: 546: width = 0;
 19819  00194E  0E00               	movlw	0
 19820  001950  6E29               	movwf	i2printf@width+1,c
 19821  001952  0E00               	movlw	0
 19822  001954  6E28               	movwf	i2printf@width,c
 19823                           
 19824                           ;doprnt.c: 548: flag = 0;
 19825  001956  0E00               	movlw	0
 19826  001958  6E26               	movwf	i2printf@flag,c
 19827                           
 19828                           ;doprnt.c: 551: switch(*f) {
 19829                           
 19830                           ;doprnt.c: 550: for(;;) {
 19831  00195A  D003               	goto	i2l5785
 19832  00195C                     i2l5781:
 19833                           
 19834                           ;doprnt.c: 580: flag |= 0x04;
 19835  00195C  8426               	bsf	i2printf@flag,2,c
 19836                           
 19837                           ;doprnt.c: 581: f++;
 19838  00195E  4A0D               	infsnz	i2printf@f,f,c
 19839  001960  2A0E               	incf	i2printf@f+1,f,c
 19840  001962                     i2l5785:
 19841  001962  C00D  FFF6         	movff	i2printf@f,tblptrl
 19842  001966  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19843  00196A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19844  00196A  6AF8               	clrf	tblptru,c
 19845  00196C                     	endif
 19846  00196C                     	if	0	;tblptru may be non-zero
 19847  00196C                     	endif
 19848  00196C  0008               	tblrd		*
 19849  00196E  50F5               	movf	tablat,w,c
 19850                           
 19851                           ; Switch size 1, requested type "space"
 19852                           ; Number of cases is 1, Range of values is 48 to 48
 19853                           ; switch strategies available:
 19854                           ; Name         Instructions Cycles
 19855                           ; simple_byte            4     3 (average)
 19856                           ;	Chosen strategy is simple_byte
 19857  001970  0A30               	xorlw	48	; case 48
 19858  001972  B4D8               	btfsc	status,2,c
 19859  001974  D7F3               	goto	i2l5781
 19860                           
 19861                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19862                           
 19863                           ;doprnt.c: 586: }
 19864                           
 19865                           ;doprnt.c: 585: break;
 19866  001976  C00D  FFF6         	movff	i2printf@f,tblptrl
 19867  00197A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19868  00197E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19869  00197E  6AF8               	clrf	tblptru,c
 19870  001980                     	endif
 19871  001980                     	if	0	;tblptru may be non-zero
 19872  001980                     	endif
 19873  001980  0008               	tblrd		*
 19874  001982  50F5               	movf	tablat,w,c
 19875  001984  EC50  F024         	call	i2_isdigit
 19876  001988  A0D8               	btfss	status,0,c
 19877  00198A  D0A6               	goto	i2l5833
 19878                           
 19879                           ;doprnt.c: 598: width = 0;
 19880  00198C  0E00               	movlw	0
 19881  00198E  6E29               	movwf	i2printf@width+1,c
 19882  001990  0E00               	movlw	0
 19883  001992  6E28               	movwf	i2printf@width,c
 19884  001994                     i2l5791:
 19885                           
 19886                           ;doprnt.c: 600: width *= 10;
 19887  001994  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19888  001998  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19889  00199C  0E00               	movlw	0
 19890  00199E  6E04               	movwf	i2___wmul@multiplicand+1,c
 19891  0019A0  0E0A               	movlw	10
 19892  0019A2  6E03               	movwf	i2___wmul@multiplicand,c
 19893  0019A4  ECF6  F023         	call	i2___wmul	;wreg free
 19894  0019A8  C001  F028         	movff	?i2___wmul,i2printf@width
 19895  0019AC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19896                           
 19897                           ;doprnt.c: 601: width += *f++ - '0';
 19898  0019B0  0ED0               	movlw	208
 19899  0019B2  6E19               	movwf	??i2_printf& (0+255),c
 19900  0019B4  0EFF               	movlw	255
 19901  0019B6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19902  0019B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 19903  0019BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19904  0019C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19905  0019C0  6AF8               	clrf	tblptru,c
 19906  0019C2                     	endif
 19907  0019C2                     	if	0	;tblptru may be non-zero
 19908  0019C2                     	endif
 19909  0019C2  0008               	tblrd		*
 19910  0019C4  50F5               	movf	tablat,w,c
 19911  0019C6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19912  0019C8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19913  0019CA  5019               	movf	??i2_printf,w,c
 19914  0019CC  261B               	addwf	??i2_printf+2,f,c
 19915  0019CE  501A               	movf	??i2_printf+1,w,c
 19916  0019D0  221C               	addwfc	??i2_printf+3,f,c
 19917  0019D2  501B               	movf	??i2_printf+2,w,c
 19918  0019D4  2628               	addwf	i2printf@width,f,c
 19919  0019D6  501C               	movf	??i2_printf+3,w,c
 19920  0019D8  2229               	addwfc	i2printf@width+1,f,c
 19921  0019DA  4A0D               	infsnz	i2printf@f,f,c
 19922  0019DC  2A0E               	incf	i2printf@f+1,f,c
 19923                           
 19924                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19925  0019DE  C00D  FFF6         	movff	i2printf@f,tblptrl
 19926  0019E2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19927  0019E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19928  0019E6  6AF8               	clrf	tblptru,c
 19929  0019E8                     	endif
 19930  0019E8                     	if	0	;tblptru may be non-zero
 19931  0019E8                     	endif
 19932  0019E8  0008               	tblrd		*
 19933  0019EA  50F5               	movf	tablat,w,c
 19934  0019EC  EC50  F024         	call	i2_isdigit
 19935  0019F0  A0D8               	btfss	status,0,c
 19936  0019F2  D072               	goto	i2l5833
 19937  0019F4  D7CF               	goto	i2l5791
 19938  0019F6                     i2l5799:
 19939                           
 19940                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19941  0019F6  C020  FFD9         	movff	i2printf@ap,fsr2l
 19942  0019FA  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19943  0019FE  CFDE F01E          	movff	postinc2,i2printf@cp
 19944  001A02  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19945  001A06  0E02               	movlw	2
 19946  001A08  2620               	addwf	i2printf@ap,f,c
 19947  001A0A  0E00               	movlw	0
 19948  001A0C  2221               	addwfc	i2printf@ap+1,f,c
 19949                           
 19950                           ;doprnt.c: 740: if(!cp)
 19951  001A0E  501E               	movf	i2printf@cp,w,c
 19952  001A10  101F               	iorwf	i2printf@cp+1,w,c
 19953  001A12  A4D8               	btfss	status,2,c
 19954  001A14  D004               	goto	i2l5807
 19955                           
 19956                           ;doprnt.c: 741: cp = "(null)";
 19957  001A16  0EB6               	movlw	low STR_120
 19958  001A18  6E1E               	movwf	i2printf@cp,c
 19959  001A1A  0EFF               	movlw	high STR_120
 19960  001A1C  6E1F               	movwf	i2printf@cp+1,c
 19961  001A1E                     i2l5807:
 19962                           
 19963                           ;doprnt.c: 745: len = 0;
 19964  001A1E  0E00               	movlw	0
 19965  001A20  6E23               	movwf	i2printf@len+1,c
 19966  001A22  0E00               	movlw	0
 19967  001A24  6E22               	movwf	i2printf@len,c
 19968                           
 19969                           ;doprnt.c: 746: while(cp[len])
 19970  001A26  D002               	goto	i2l5811
 19971  001A28                     i2l5809:
 19972                           
 19973                           ;doprnt.c: 747: len++;
 19974  001A28  4A22               	infsnz	i2printf@len,f,c
 19975  001A2A  2A23               	incf	i2printf@len+1,f,c
 19976  001A2C                     i2l5811:
 19977  001A2C  5022               	movf	i2printf@len,w,c
 19978  001A2E  241E               	addwf	i2printf@cp,w,c
 19979  001A30  6E19               	movwf	??i2_printf& (0+255),c
 19980  001A32  5023               	movf	i2printf@len+1,w,c
 19981  001A34  201F               	addwfc	i2printf@cp+1,w,c
 19982  001A36  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19983  001A38  C019  FFF6         	movff	??i2_printf,tblptrl
 19984  001A3C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19985  001A40  0E00               	movlw	low (__mediumconst shr (0+16))
 19986  001A42  6EF8               	movwf	tblptru,c
 19987  001A44  0E0F               	movlw	(high __ramtop+-1)
 19988  001A46  64F7               	cpfsgt	tblptrh,c
 19989  001A48  D003               	bra	i2u436_47
 19990  001A4A  0008               	tblrd		*
 19991  001A4C  50F5               	movf	tablat,w,c
 19992  001A4E  D005               	bra	i2u436_40
 19993  001A50                     i2u436_47:
 19994  001A50  CFF6 FFE9          	movff	tblptrl,fsr0l
 19995  001A54  CFF7 FFEA          	movff	tblptrh,fsr0h
 19996  001A58  50EF               	movf	indf0,w,c
 19997  001A5A                     i2u436_40:
 19998  001A5A  0900               	iorlw	0
 19999  001A5C  A4D8               	btfss	status,2,c
 20000  001A5E  D7E4               	goto	i2l5809
 20001                           
 20002                           ;doprnt.c: 757: if(width > len)
 20003  001A60  5028               	movf	i2printf@width,w,c
 20004  001A62  5C22               	subwf	i2printf@len,w,c
 20005  001A64  5029               	movf	i2printf@width+1,w,c
 20006  001A66  5823               	subwfb	i2printf@len+1,w,c
 20007  001A68  B0D8               	btfsc	status,0,c
 20008  001A6A  D005               	goto	i2l5817
 20009                           
 20010                           ;doprnt.c: 758: width -= len;
 20011  001A6C  5022               	movf	i2printf@len,w,c
 20012  001A6E  5E28               	subwf	i2printf@width,f,c
 20013  001A70  5023               	movf	i2printf@len+1,w,c
 20014  001A72  5A29               	subwfb	i2printf@width+1,f,c
 20015  001A74  D008               	goto	i2l5821
 20016  001A76                     i2l5817:
 20017                           
 20018                           ;doprnt.c: 759: else
 20019                           ;doprnt.c: 760: width = 0;
 20020  001A76  0E00               	movlw	0
 20021  001A78  6E29               	movwf	i2printf@width+1,c
 20022  001A7A  0E00               	movlw	0
 20023  001A7C  6E28               	movwf	i2printf@width,c
 20024                           
 20025                           ;doprnt.c: 764: while(width--)
 20026  001A7E  D003               	goto	i2l5821
 20027  001A80                     i2l5819:
 20028                           
 20029                           ;doprnt.c: 765: (putch(' ') );
 20030  001A80  0E20               	movlw	32
 20031  001A82  ECA4  F024         	call	i2_putch
 20032  001A86                     i2l5821:
 20033  001A86  0628               	decf	i2printf@width,f,c
 20034  001A88  A0D8               	btfss	status,0,c
 20035  001A8A  0629               	decf	i2printf@width+1,f,c
 20036  001A8C  2828               	incf	i2printf@width,w,c
 20037  001A8E  E1F8               	bnz	i2l5819
 20038  001A90  2829               	incf	i2printf@width+1,w,c
 20039  001A92  B4D8               	btfsc	status,2,c
 20040  001A94  D016               	goto	i2l5827
 20041  001A96  D7F4               	goto	i2l5819
 20042  001A98                     i2l5823:
 20043                           
 20044                           ;doprnt.c: 768: (putch(*cp++) );
 20045  001A98  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20046  001A9C  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20047  001AA0  0E00               	movlw	low (__mediumconst shr (0+16))
 20048  001AA2  6EF8               	movwf	tblptru,c
 20049  001AA4  0E0F               	movlw	(high __ramtop+-1)
 20050  001AA6  64F7               	cpfsgt	tblptrh,c
 20051  001AA8  D003               	bra	i2u440_47
 20052  001AAA  0008               	tblrd		*
 20053  001AAC  50F5               	movf	tablat,w,c
 20054  001AAE  D005               	bra	i2u440_40
 20055  001AB0                     i2u440_47:
 20056  001AB0  CFF6 FFE9          	movff	tblptrl,fsr0l
 20057  001AB4  CFF7 FFEA          	movff	tblptrh,fsr0h
 20058  001AB8  50EF               	movf	indf0,w,c
 20059  001ABA                     i2u440_40:
 20060  001ABA  ECA4  F024         	call	i2_putch
 20061  001ABE  4A1E               	infsnz	i2printf@cp,f,c
 20062  001AC0  2A1F               	incf	i2printf@cp+1,f,c
 20063  001AC2                     i2l5827:
 20064  001AC2  0622               	decf	i2printf@len,f,c
 20065  001AC4  A0D8               	btfss	status,0,c
 20066  001AC6  0623               	decf	i2printf@len+1,f,c
 20067  001AC8  2822               	incf	i2printf@len,w,c
 20068  001ACA  E1E6               	bnz	i2l5823
 20069  001ACC  2823               	incf	i2printf@len+1,w,c
 20070  001ACE  B4D8               	btfsc	status,2,c
 20071  001AD0  D0DA               	goto	i2l5905
 20072  001AD2  D7E2               	goto	i2l5823
 20073  001AD4                     i2l5829:
 20074                           
 20075                           ;doprnt.c: 818: flag |= 0x40;
 20076  001AD4  8C26               	bsf	i2printf@flag,6,c
 20077                           
 20078                           ;doprnt.c: 822: }
 20079                           
 20080                           ;doprnt.c: 819: break;
 20081  001AD6  D01B               	goto	i2l1297
 20082  001AD8                     i2l5833:
 20083  001AD8  C00D  FFF6         	movff	i2printf@f,tblptrl
 20084  001ADC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20085  001AE0  4A0D               	infsnz	i2printf@f,f,c
 20086  001AE2  2A0E               	incf	i2printf@f+1,f,c
 20087  001AE4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20088  001AE4  6AF8               	clrf	tblptru,c
 20089  001AE6                     	endif
 20090  001AE6                     	if	0	;tblptru may be non-zero
 20091  001AE6                     	endif
 20092  001AE6  0008               	tblrd		*
 20093  001AE8  CFF5 F027          	movff	tablat,i2printf@c
 20094  001AEC  5027               	movf	i2printf@c,w,c
 20095                           
 20096                           ; Switch size 1, requested type "space"
 20097                           ; Number of cases is 5, Range of values is 0 to 117
 20098                           ; switch strategies available:
 20099                           ; Name         Instructions Cycles
 20100                           ; simple_byte           16     9 (average)
 20101                           ;	Chosen strategy is simple_byte
 20102  001AEE  0A00               	xorlw	0	; case 0
 20103  001AF0  B4D8               	btfsc	status,2,c
 20104  001AF2  0012               	return	
 20105  001AF4  0A64               	xorlw	100	; case 100
 20106  001AF6  B4D8               	btfsc	status,2,c
 20107  001AF8  D00A               	goto	i2l1297
 20108  001AFA  0A0D               	xorlw	13	; case 105
 20109  001AFC  B4D8               	btfsc	status,2,c
 20110  001AFE  D007               	goto	i2l1297
 20111  001B00  0A1A               	xorlw	26	; case 115
 20112  001B02  B4D8               	btfsc	status,2,c
 20113  001B04  D778               	goto	i2l5799
 20114  001B06  0A06               	xorlw	6	; case 117
 20115  001B08  B4D8               	btfsc	status,2,c
 20116  001B0A  D7E4               	goto	i2l5829
 20117  001B0C  D0BC               	goto	i2l5905
 20118  001B0E                     i2l1297:
 20119                           
 20120                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20121  001B0E  BC26               	btfsc	i2printf@flag,6,c
 20122  001B10  D015               	goto	i2l5845
 20123                           
 20124                           ;doprnt.c: 1253: {
 20125                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20126  001B12  C020  FFD9         	movff	i2printf@ap,fsr2l
 20127  001B16  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20128  001B1A  CFDE F024          	movff	postinc2,i2printf@val
 20129  001B1E  CFDD F025          	movff	postdec2,i2printf@val+1
 20130  001B22  0E02               	movlw	2
 20131  001B24  2620               	addwf	i2printf@ap,f,c
 20132  001B26  0E00               	movlw	0
 20133  001B28  2221               	addwfc	i2printf@ap+1,f,c
 20134                           
 20135                           ;doprnt.c: 1261: if((int)val < 0) {
 20136  001B2A  AE25               	btfss	i2printf@val+1,7,c
 20137  001B2C  D013               	goto	i2l5849
 20138                           
 20139                           ;doprnt.c: 1262: flag |= 0x03;
 20140  001B2E  0E03               	movlw	3
 20141  001B30  1226               	iorwf	i2printf@flag,f,c
 20142                           
 20143                           ;doprnt.c: 1263: val = -val;
 20144  001B32  6C24               	negf	i2printf@val,c
 20145  001B34  1E25               	comf	i2printf@val+1,f,c
 20146  001B36  B0D8               	btfsc	status,0,c
 20147  001B38  2A25               	incf	i2printf@val+1,f,c
 20148                           
 20149                           ;doprnt.c: 1264: }
 20150                           ;doprnt.c: 1266: }
 20151  001B3A  D00C               	goto	i2l5849
 20152  001B3C                     i2l5845:
 20153                           
 20154                           ;doprnt.c: 1268: else
 20155                           ;doprnt.c: 1273: {
 20156                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20157  001B3C  C020  FFD9         	movff	i2printf@ap,fsr2l
 20158  001B40  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20159  001B44  CFDE F024          	movff	postinc2,i2printf@val
 20160  001B48  CFDD F025          	movff	postdec2,i2printf@val+1
 20161  001B4C  0E02               	movlw	2
 20162  001B4E  2620               	addwf	i2printf@ap,f,c
 20163  001B50  0E00               	movlw	0
 20164  001B52  2221               	addwfc	i2printf@ap+1,f,c
 20165  001B54                     i2l5849:
 20166                           
 20167                           ;doprnt.c: 1287: }
 20168                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20169  001B54  0E01               	movlw	1
 20170  001B56  6E27               	movwf	i2printf@c,c
 20171  001B58                     i2l5851:
 20172  001B58  0E05               	movlw	5
 20173  001B5A  1827               	xorwf	i2printf@c,w,c
 20174  001B5C  B4D8               	btfsc	status,2,c
 20175  001B5E  D015               	goto	i2l5863
 20176                           
 20177                           ;doprnt.c: 1306: if(val < dpowers[c])
 20178  001B60  5027               	movf	i2printf@c,w,c
 20179  001B62  0D02               	mullw	2
 20180  001B64  0E12               	movlw	low _dpowers
 20181  001B66  24F3               	addwf	prodl,w,c
 20182  001B68  6EF6               	movwf	tblptrl,c
 20183  001B6A  0EFB               	movlw	high _dpowers
 20184  001B6C  20F4               	addwfc	prodh,w,c
 20185  001B6E  6EF7               	movwf	tblptrh,c
 20186  001B70                     	if	1	;There are 3 active tblptr bytes
 20187  001B70  6AF8               	clrf	tblptru,c
 20188  001B72  0E00               	movlw	low (__mediumconst shr (0+16))
 20189  001B74  22F8               	addwfc	tblptru,f,c
 20190  001B76                     	endif
 20191  001B76  0009               	tblrd		*+
 20192  001B78  50F5               	movf	tablat,w,c
 20193  001B7A  5C24               	subwf	i2printf@val,w,c
 20194  001B7C  0009               	tblrd		*+
 20195  001B7E  50F5               	movf	tablat,w,c
 20196  001B80  5825               	subwfb	i2printf@val+1,w,c
 20197  001B82  A0D8               	btfss	status,0,c
 20198  001B84  D002               	goto	i2l5863
 20199                           
 20200                           ;doprnt.c: 1307: break;
 20201  001B86  2A27               	incf	i2printf@c,f,c
 20202  001B88  D7E7               	goto	i2l5851
 20203  001B8A                     i2l5863:
 20204                           
 20205                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20206  001B8A  5028               	movf	i2printf@width,w,c
 20207  001B8C  1029               	iorwf	i2printf@width+1,w,c
 20208  001B8E  B4D8               	btfsc	status,2,c
 20209  001B90  D009               	goto	i2l5869
 20210  001B92  C026  F019         	movff	i2printf@flag,??i2_printf
 20211  001B96  0E03               	movlw	3
 20212  001B98  1619               	andwf	??i2_printf,f,c
 20213  001B9A  B4D8               	btfsc	status,2,c
 20214  001B9C  D003               	goto	i2l5869
 20215                           
 20216                           ;doprnt.c: 1346: width--;
 20217  001B9E  0628               	decf	i2printf@width,f,c
 20218  001BA0  A0D8               	btfss	status,0,c
 20219  001BA2  0629               	decf	i2printf@width+1,f,c
 20220  001BA4                     i2l5869:
 20221                           
 20222                           ;doprnt.c: 1381: if(width > c)
 20223  001BA4  0E80               	movlw	128
 20224  001BA6  BE27               	btfsc	i2printf@c,7,c
 20225  001BA8  0E7F               	movlw	127
 20226  001BAA  6E19               	movwf	??i2_printf& (0+255),c
 20227  001BAC  5028               	movf	i2printf@width,w,c
 20228  001BAE  5C27               	subwf	i2printf@c,w,c
 20229  001BB0  5029               	movf	i2printf@width+1,w,c
 20230  001BB2  0A80               	xorlw	128
 20231  001BB4  5819               	subwfb	??i2_printf& (0+255),w,c
 20232  001BB6  B0D8               	btfsc	status,0,c
 20233  001BB8  D007               	goto	i2l5873
 20234                           
 20235                           ;doprnt.c: 1382: width -= c;
 20236  001BBA  5027               	movf	i2printf@c,w,c
 20237  001BBC  5E28               	subwf	i2printf@width,f,c
 20238  001BBE  0E00               	movlw	0
 20239  001BC0  BE27               	btfsc	i2printf@c,7,c
 20240  001BC2  0EFF               	movlw	255
 20241  001BC4  5A29               	subwfb	i2printf@width+1,f,c
 20242  001BC6  D004               	goto	i2l5875
 20243  001BC8                     i2l5873:
 20244                           
 20245                           ;doprnt.c: 1383: else
 20246                           ;doprnt.c: 1384: width = 0;
 20247  001BC8  0E00               	movlw	0
 20248  001BCA  6E29               	movwf	i2printf@width+1,c
 20249  001BCC  0E00               	movlw	0
 20250  001BCE  6E28               	movwf	i2printf@width,c
 20251  001BD0                     i2l5875:
 20252                           
 20253                           ;doprnt.c: 1387: if(flag & 0x04) {
 20254  001BD0  A426               	btfss	i2printf@flag,2,c
 20255  001BD2  D014               	goto	i2l5887
 20256                           
 20257                           ;doprnt.c: 1392: if(flag & 0x03)
 20258  001BD4  C026  F019         	movff	i2printf@flag,??i2_printf
 20259  001BD8  0E03               	movlw	3
 20260  001BDA  1619               	andwf	??i2_printf,f,c
 20261  001BDC  B4D8               	btfsc	status,2,c
 20262  001BDE  D003               	goto	i2l5881
 20263                           
 20264                           ;doprnt.c: 1393: (putch('-') );
 20265  001BE0  0E2D               	movlw	45
 20266  001BE2  ECA4  F024         	call	i2_putch
 20267  001BE6                     i2l5881:
 20268                           
 20269                           ;doprnt.c: 1415: if(width)
 20270  001BE6  5028               	movf	i2printf@width,w,c
 20271  001BE8  1029               	iorwf	i2printf@width+1,w,c
 20272  001BEA  B4D8               	btfsc	status,2,c
 20273  001BEC  D01E               	goto	i2l5897
 20274                           
 20275                           ;doprnt.c: 1417: (putch('0') );
 20276                           
 20277                           ;doprnt.c: 1416: do
 20278  001BEE  0E30               	movlw	48
 20279  001BF0  ECA4  F024         	call	i2_putch
 20280                           
 20281                           ;doprnt.c: 1418: while(--width);
 20282  001BF4  0628               	decf	i2printf@width,f,c
 20283  001BF6  A0D8               	btfss	status,0,c
 20284  001BF8  0629               	decf	i2printf@width+1,f,c
 20285  001BFA  D7F5               	goto	i2l5881
 20286  001BFC                     i2l5887:
 20287                           
 20288                           ;doprnt.c: 1422: {
 20289                           ;doprnt.c: 1424: if(width
 20290                           ;doprnt.c: 1428: )
 20291  001BFC  5028               	movf	i2printf@width,w,c
 20292  001BFE  1029               	iorwf	i2printf@width+1,w,c
 20293  001C00  B4D8               	btfsc	status,2,c
 20294  001C02  D00A               	goto	i2l5893
 20295  001C04                     i2l5889:
 20296                           
 20297                           ;doprnt.c: 1430: (putch(' ') );
 20298  001C04  0E20               	movlw	32
 20299  001C06  ECA4  F024         	call	i2_putch
 20300                           
 20301                           ;doprnt.c: 1431: while(--width);
 20302  001C0A  0628               	decf	i2printf@width,f,c
 20303  001C0C  A0D8               	btfss	status,0,c
 20304  001C0E  0629               	decf	i2printf@width+1,f,c
 20305  001C10  5028               	movf	i2printf@width,w,c
 20306  001C12  1029               	iorwf	i2printf@width+1,w,c
 20307  001C14  A4D8               	btfss	status,2,c
 20308  001C16  D7F6               	goto	i2l5889
 20309  001C18                     i2l5893:
 20310                           
 20311                           ;doprnt.c: 1438: if(flag & 0x03)
 20312  001C18  C026  F019         	movff	i2printf@flag,??i2_printf
 20313  001C1C  0E03               	movlw	3
 20314  001C1E  1619               	andwf	??i2_printf,f,c
 20315  001C20  B4D8               	btfsc	status,2,c
 20316  001C22  D003               	goto	i2l5897
 20317                           
 20318                           ;doprnt.c: 1439: (putch('-') );
 20319  001C24  0E2D               	movlw	45
 20320  001C26  ECA4  F024         	call	i2_putch
 20321  001C2A                     i2l5897:
 20322                           
 20323                           ;doprnt.c: 1469: }
 20324                           ;doprnt.c: 1472: prec = c;
 20325  001C2A  C027  F01D         	movff	i2printf@c,i2printf@prec
 20326                           
 20327                           ;doprnt.c: 1474: while(prec--) {
 20328  001C2E  D027               	goto	i2l5903
 20329  001C30                     i2l5899:
 20330                           
 20331                           ;doprnt.c: 1478: {
 20332                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20333  001C30  501D               	movf	i2printf@prec,w,c
 20334  001C32  0D02               	mullw	2
 20335  001C34  0E12               	movlw	low _dpowers
 20336  001C36  24F3               	addwf	prodl,w,c
 20337  001C38  6EF6               	movwf	tblptrl,c
 20338  001C3A  0EFB               	movlw	high _dpowers
 20339  001C3C  20F4               	addwfc	prodh,w,c
 20340  001C3E  6EF7               	movwf	tblptrh,c
 20341  001C40                     	if	1	;There are 3 active tblptr bytes
 20342  001C40  6AF8               	clrf	tblptru,c
 20343  001C42  0E00               	movlw	low (__mediumconst shr (0+16))
 20344  001C44  22F8               	addwfc	tblptru,f,c
 20345  001C46                     	endif
 20346  001C46  0009               	tblrd		*+
 20347  001C48  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20348  001C4C  000A               	tblrd		*-
 20349  001C4E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20350  001C52  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20351  001C56  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20352  001C5A  ECF0  F020         	call	i2___lwdiv	;wreg free
 20353  001C5E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20354  001C62  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20355  001C66  0E00               	movlw	0
 20356  001C68  6E04               	movwf	i2___lwmod@divisor+1,c
 20357  001C6A  0E0A               	movlw	10
 20358  001C6C  6E03               	movwf	i2___lwmod@divisor,c
 20359  001C6E  ECAF  F021         	call	i2___lwmod	;wreg free
 20360  001C72  5001               	movf	?i2___lwmod,w,c
 20361  001C74  0F30               	addlw	48
 20362  001C76  6E27               	movwf	i2printf@c,c
 20363                           
 20364                           ;doprnt.c: 1523: }
 20365                           ;doprnt.c: 1524: (putch(c) );
 20366  001C78  5027               	movf	i2printf@c,w,c
 20367  001C7A  ECA4  F024         	call	i2_putch
 20368  001C7E                     i2l5903:
 20369  001C7E  061D               	decf	i2printf@prec,f,c
 20370  001C80  281D               	incf	i2printf@prec,w,c
 20371  001C82  A4D8               	btfss	status,2,c
 20372  001C84  D7D5               	goto	i2l5899
 20373  001C86                     i2l5905:
 20374  001C86  C00D  FFF6         	movff	i2printf@f,tblptrl
 20375  001C8A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20376  001C8E  4A0D               	infsnz	i2printf@f,f,c
 20377  001C90  2A0E               	incf	i2printf@f+1,f,c
 20378  001C92                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20379  001C92  6AF8               	clrf	tblptru,c
 20380  001C94                     	endif
 20381  001C94                     	if	0	;tblptru may be non-zero
 20382  001C94                     	endif
 20383  001C94  0008               	tblrd		*
 20384  001C96  CFF5 F027          	movff	tablat,i2printf@c
 20385  001C9A  5027               	movf	i2printf@c,w,c
 20386  001C9C  B4D8               	btfsc	status,2,c
 20387  001C9E  0012               	return	
 20388  001CA0  D64E               	goto	i2l5775
 20389  001CA2                     __end_ofi2_printf:
 20390                           	opt stack 0
 20391                           pclatu	equ	0xFFB
 20392                           pclath	equ	0xFFA
 20393                           tblptru	equ	0xFF8
 20394                           tblptrh	equ	0xFF7
 20395                           tblptrl	equ	0xFF6
 20396                           tablat	equ	0xFF5
 20397                           prodh	equ	0xFF4
 20398                           prodl	equ	0xFF3
 20399                           intcon	equ	0xFF2
 20400                           intcon2	equ	0xFF1
 20401                           intcon3	equ	0xFF0
 20402                           indf0	equ	0xFEF
 20403                           postinc0	equ	0xFEE
 20404                           fsr0h	equ	0xFEA
 20405                           fsr0l	equ	0xFE9
 20406                           wreg	equ	0xFE8
 20407                           postdec1	equ	0xFE5
 20408                           fsr1h	equ	0xFE2
 20409                           fsr1l	equ	0xFE1
 20410                           indf2	equ	0xFDF
 20411                           postinc2	equ	0xFDE
 20412                           postdec2	equ	0xFDD
 20413                           fsr2h	equ	0xFDA
 20414                           fsr2l	equ	0xFD9
 20415                           status	equ	0xFD8
 20416                           
 20417 ;; *************** function i2_putch *****************
 20418 ;; Defined at:
 20419 ;;		line 20 in file "lcd.c"
 20420 ;; Parameters:    Size  Location     Type
 20421 ;;  data            1    wreg     unsigned char 
 20422 ;; Auto vars:     Size  Location     Type
 20423 ;;  data            1    2[COMRAM] unsigned char 
 20424 ;; Return value:  Size  Location     Type
 20425 ;;                  1    wreg      void 
 20426 ;; Registers used:
 20427 ;;		wreg, status,2, status,0, cstack
 20428 ;; Tracked objects:
 20429 ;;		On entry : 0/0
 20430 ;;		On exit  : 0/0
 20431 ;;		Unchanged: 0/0
 20432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20437 ;;Total ram usage:        1 bytes
 20438 ;; Hardware stack levels used:    1
 20439 ;; Hardware stack levels required when called:    1
 20440 ;; This function calls:
 20441 ;;		i2_lcdNibble
 20442 ;; This function is called by:
 20443 ;;		i2_printf
 20444 ;; This function uses a non-reentrant model
 20445 ;;
 20446                           
 20447                           	psect	text80
 20448  004948                     __ptext80:
 20449                           	opt stack 0
 20450  004948                     i2_putch:
 20451                           	opt stack 19
 20452                           
 20453                           ;incstack = 0
 20454                           ;i2putch@data stored from wreg
 20455  004948  6E03               	movwf	i2putch@data,c
 20456                           
 20457                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20458  00494A  848C               	bsf	3980,2,c	;volatile
 20459                           
 20460                           ;lcd.c: 22: lcdNibble(data);
 20461  00494C  5003               	movf	i2putch@data,w,c
 20462  00494E  EC9B  F020         	call	i2_lcdNibble
 20463  004952  0012               	return		;funcret
 20464  004954                     __end_ofi2_putch:
 20465                           	opt stack 0
 20466                           pclatu	equ	0xFFB
 20467                           pclath	equ	0xFFA
 20468                           tblptru	equ	0xFF8
 20469                           tblptrh	equ	0xFF7
 20470                           tblptrl	equ	0xFF6
 20471                           tablat	equ	0xFF5
 20472                           prodh	equ	0xFF4
 20473                           prodl	equ	0xFF3
 20474                           intcon	equ	0xFF2
 20475                           intcon2	equ	0xFF1
 20476                           intcon3	equ	0xFF0
 20477                           indf0	equ	0xFEF
 20478                           postinc0	equ	0xFEE
 20479                           fsr0h	equ	0xFEA
 20480                           fsr0l	equ	0xFE9
 20481                           wreg	equ	0xFE8
 20482                           postdec1	equ	0xFE5
 20483                           fsr1h	equ	0xFE2
 20484                           fsr1l	equ	0xFE1
 20485                           indf2	equ	0xFDF
 20486                           postinc2	equ	0xFDE
 20487                           postdec2	equ	0xFDD
 20488                           fsr2h	equ	0xFDA
 20489                           fsr2l	equ	0xFD9
 20490                           status	equ	0xFD8
 20491                           
 20492 ;; *************** function i2_isdigit *****************
 20493 ;; Defined at:
 20494 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20495 ;; Parameters:    Size  Location     Type
 20496 ;;  c               1    wreg     unsigned char 
 20497 ;; Auto vars:     Size  Location     Type
 20498 ;;  c               1    2[COMRAM] unsigned char 
 20499 ;; Return value:  Size  Location     Type
 20500 ;;		None               void
 20501 ;; Registers used:
 20502 ;;		wreg, status,2, status,0
 20503 ;; Tracked objects:
 20504 ;;		On entry : 0/0
 20505 ;;		On exit  : 0/0
 20506 ;;		Unchanged: 0/0
 20507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20511 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20512 ;;Total ram usage:        3 bytes
 20513 ;; Hardware stack levels used:    1
 20514 ;; This function calls:
 20515 ;;		Nothing
 20516 ;; This function is called by:
 20517 ;;		i2_printf
 20518 ;; This function uses a non-reentrant model
 20519 ;;
 20520                           
 20521                           	psect	text81
 20522  0048A0                     __ptext81:
 20523                           	opt stack 0
 20524  0048A0                     i2_isdigit:
 20525                           	opt stack 20
 20526                           
 20527                           ;incstack = 0
 20528                           ;i2isdigit@c stored from wreg
 20529  0048A0  6E03               	movwf	i2isdigit@c,c
 20530  0048A2  0E00               	movlw	0
 20531  0048A4  6E02               	movwf	i2_isdigit$1957,c
 20532  0048A6  0E3A               	movlw	58
 20533  0048A8  6003               	cpfslt	i2isdigit@c,c
 20534  0048AA  D005               	goto	i2l5479
 20535  0048AC  0E2F               	movlw	47
 20536  0048AE  6403               	cpfsgt	i2isdigit@c,c
 20537  0048B0  D002               	goto	i2l5479
 20538  0048B2  0E01               	movlw	1
 20539  0048B4  6E02               	movwf	i2_isdigit$1957,c
 20540  0048B6                     i2l5479:
 20541  0048B6  C002  F001         	movff	i2_isdigit$1957,??i2_isdigit
 20542  0048BA  3001               	rrcf	??i2_isdigit,w,c
 20543  0048BC  0012               	return	
 20544  0048BE                     __end_ofi2_isdigit:
 20545                           	opt stack 0
 20546                           pclatu	equ	0xFFB
 20547                           pclath	equ	0xFFA
 20548                           tblptru	equ	0xFF8
 20549                           tblptrh	equ	0xFF7
 20550                           tblptrl	equ	0xFF6
 20551                           tablat	equ	0xFF5
 20552                           prodh	equ	0xFF4
 20553                           prodl	equ	0xFF3
 20554                           intcon	equ	0xFF2
 20555                           intcon2	equ	0xFF1
 20556                           intcon3	equ	0xFF0
 20557                           indf0	equ	0xFEF
 20558                           postinc0	equ	0xFEE
 20559                           fsr0h	equ	0xFEA
 20560                           fsr0l	equ	0xFE9
 20561                           wreg	equ	0xFE8
 20562                           postdec1	equ	0xFE5
 20563                           fsr1h	equ	0xFE2
 20564                           fsr1l	equ	0xFE1
 20565                           indf2	equ	0xFDF
 20566                           postinc2	equ	0xFDE
 20567                           postdec2	equ	0xFDD
 20568                           fsr2h	equ	0xFDA
 20569                           fsr2l	equ	0xFD9
 20570                           status	equ	0xFD8
 20571                           
 20572 ;; *************** function i2___wmul *****************
 20573 ;; Defined at:
 20574 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20575 ;; Parameters:    Size  Location     Type
 20576 ;;  multiplier      2    0[COMRAM] unsigned int 
 20577 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20578 ;; Auto vars:     Size  Location     Type
 20579 ;;  __wmul          2    4[COMRAM] unsigned int 
 20580 ;; Return value:  Size  Location     Type
 20581 ;;                  2    0[COMRAM] unsigned int 
 20582 ;; Registers used:
 20583 ;;		wreg, status,2, status,0, prodl, prodh
 20584 ;; Tracked objects:
 20585 ;;		On entry : 0/0
 20586 ;;		On exit  : 0/0
 20587 ;;		Unchanged: 0/0
 20588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20592 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20593 ;;Total ram usage:        6 bytes
 20594 ;; Hardware stack levels used:    1
 20595 ;; This function calls:
 20596 ;;		Nothing
 20597 ;; This function is called by:
 20598 ;;		_printSortTimer
 20599 ;;		_retrieveLog
 20600 ;;		i2_printf
 20601 ;; This function uses a non-reentrant model
 20602 ;;
 20603                           
 20604                           	psect	text82
 20605  0047EC                     __ptext82:
 20606                           	opt stack 0
 20607  0047EC                     i2___wmul:
 20608                           	opt stack 20
 20609                           
 20610                           ;incstack = 0
 20611  0047EC  5001               	movf	i2___wmul@multiplier,w,c
 20612  0047EE  0203               	mulwf	i2___wmul@multiplicand,c
 20613  0047F0  CFF3 F005          	movff	prodl,i2___wmul@product
 20614  0047F4  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20615  0047F8  5001               	movf	i2___wmul@multiplier,w,c
 20616  0047FA  0204               	mulwf	i2___wmul@multiplicand+1,c
 20617  0047FC  50F3               	movf	prodl,w,c
 20618  0047FE  2606               	addwf	i2___wmul@product+1,f,c
 20619  004800  5002               	movf	i2___wmul@multiplier+1,w,c
 20620  004802  0203               	mulwf	i2___wmul@multiplicand,c
 20621  004804  50F3               	movf	prodl,w,c
 20622  004806  2606               	addwf	i2___wmul@product+1,f,c
 20623  004808  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20624  00480C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20625  004810  0012               	return	
 20626  004812                     __end_ofi2___wmul:
 20627                           	opt stack 0
 20628                           pclatu	equ	0xFFB
 20629                           pclath	equ	0xFFA
 20630                           tblptru	equ	0xFF8
 20631                           tblptrh	equ	0xFF7
 20632                           tblptrl	equ	0xFF6
 20633                           tablat	equ	0xFF5
 20634                           prodh	equ	0xFF4
 20635                           prodl	equ	0xFF3
 20636                           intcon	equ	0xFF2
 20637                           intcon2	equ	0xFF1
 20638                           intcon3	equ	0xFF0
 20639                           indf0	equ	0xFEF
 20640                           postinc0	equ	0xFEE
 20641                           fsr0h	equ	0xFEA
 20642                           fsr0l	equ	0xFE9
 20643                           wreg	equ	0xFE8
 20644                           postdec1	equ	0xFE5
 20645                           fsr1h	equ	0xFE2
 20646                           fsr1l	equ	0xFE1
 20647                           indf2	equ	0xFDF
 20648                           postinc2	equ	0xFDE
 20649                           postdec2	equ	0xFDD
 20650                           fsr2h	equ	0xFDA
 20651                           fsr2l	equ	0xFD9
 20652                           status	equ	0xFD8
 20653                           
 20654 ;; *************** function i2___lwmod *****************
 20655 ;; Defined at:
 20656 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20657 ;; Parameters:    Size  Location     Type
 20658 ;;  dividend        2    0[COMRAM] unsigned int 
 20659 ;;  divisor         2    2[COMRAM] unsigned int 
 20660 ;; Auto vars:     Size  Location     Type
 20661 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20662 ;; Return value:  Size  Location     Type
 20663 ;;                  2    0[COMRAM] unsigned int 
 20664 ;; Registers used:
 20665 ;;		wreg, status,2, status,0
 20666 ;; Tracked objects:
 20667 ;;		On entry : 0/0
 20668 ;;		On exit  : 0/0
 20669 ;;		Unchanged: 0/0
 20670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20675 ;;Total ram usage:        5 bytes
 20676 ;; Hardware stack levels used:    1
 20677 ;; This function calls:
 20678 ;;		Nothing
 20679 ;; This function is called by:
 20680 ;;		_printSortTimer
 20681 ;;		i2_printf
 20682 ;; This function uses a non-reentrant model
 20683 ;;
 20684                           
 20685                           	psect	text83
 20686  00435E                     __ptext83:
 20687                           	opt stack 0
 20688  00435E                     i2___lwmod:
 20689                           	opt stack 20
 20690                           
 20691                           ;incstack = 0
 20692  00435E  5003               	movf	i2___lwmod@divisor,w,c
 20693  004360  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20694  004362  B4D8               	btfsc	status,2,c
 20695  004364  D018               	goto	i2l1754
 20696  004366  0E01               	movlw	1
 20697  004368  6E05               	movwf	i2___lwmod@counter,c
 20698  00436A  D004               	goto	i2l5511
 20699  00436C                     i2l5509:
 20700  00436C  90D8               	bcf	status,0,c
 20701  00436E  3603               	rlcf	i2___lwmod@divisor,f,c
 20702  004370  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20703  004372  2A05               	incf	i2___lwmod@counter,f,c
 20704  004374                     i2l5511:
 20705  004374  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20706  004376  D7FA               	goto	i2l5509
 20707  004378                     i2l5513:
 20708  004378  5003               	movf	i2___lwmod@divisor,w,c
 20709  00437A  5C01               	subwf	i2___lwmod@dividend,w,c
 20710  00437C  5004               	movf	i2___lwmod@divisor+1,w,c
 20711  00437E  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20712  004380  A0D8               	btfss	status,0,c
 20713  004382  D004               	goto	i2l5517
 20714  004384  5003               	movf	i2___lwmod@divisor,w,c
 20715  004386  5E01               	subwf	i2___lwmod@dividend,f,c
 20716  004388  5004               	movf	i2___lwmod@divisor+1,w,c
 20717  00438A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20718  00438C                     i2l5517:
 20719  00438C  90D8               	bcf	status,0,c
 20720  00438E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20721  004390  3203               	rrcf	i2___lwmod@divisor,f,c
 20722  004392  2E05               	decfsz	i2___lwmod@counter,f,c
 20723  004394  D7F1               	goto	i2l5513
 20724  004396                     i2l1754:
 20725  004396  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20726  00439A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20727  00439E  0012               	return		;funcret
 20728  0043A0                     __end_ofi2___lwmod:
 20729                           	opt stack 0
 20730                           pclatu	equ	0xFFB
 20731                           pclath	equ	0xFFA
 20732                           tblptru	equ	0xFF8
 20733                           tblptrh	equ	0xFF7
 20734                           tblptrl	equ	0xFF6
 20735                           tablat	equ	0xFF5
 20736                           prodh	equ	0xFF4
 20737                           prodl	equ	0xFF3
 20738                           intcon	equ	0xFF2
 20739                           intcon2	equ	0xFF1
 20740                           intcon3	equ	0xFF0
 20741                           indf0	equ	0xFEF
 20742                           postinc0	equ	0xFEE
 20743                           fsr0h	equ	0xFEA
 20744                           fsr0l	equ	0xFE9
 20745                           wreg	equ	0xFE8
 20746                           postdec1	equ	0xFE5
 20747                           fsr1h	equ	0xFE2
 20748                           fsr1l	equ	0xFE1
 20749                           indf2	equ	0xFDF
 20750                           postinc2	equ	0xFDE
 20751                           postdec2	equ	0xFDD
 20752                           fsr2h	equ	0xFDA
 20753                           fsr2l	equ	0xFD9
 20754                           status	equ	0xFD8
 20755                           
 20756 ;; *************** function i2___lwdiv *****************
 20757 ;; Defined at:
 20758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20759 ;; Parameters:    Size  Location     Type
 20760 ;;  dividend        2    5[COMRAM] unsigned int 
 20761 ;;  divisor         2    7[COMRAM] unsigned int 
 20762 ;; Auto vars:     Size  Location     Type
 20763 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20764 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20765 ;; Return value:  Size  Location     Type
 20766 ;;                  2    5[COMRAM] unsigned int 
 20767 ;; Registers used:
 20768 ;;		wreg, status,2, status,0
 20769 ;; Tracked objects:
 20770 ;;		On entry : 0/0
 20771 ;;		On exit  : 0/0
 20772 ;;		Unchanged: 0/0
 20773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20775 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20777 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20778 ;;Total ram usage:        7 bytes
 20779 ;; Hardware stack levels used:    1
 20780 ;; This function calls:
 20781 ;;		Nothing
 20782 ;; This function is called by:
 20783 ;;		_printSortTimer
 20784 ;;		i2_printf
 20785 ;; This function uses a non-reentrant model
 20786 ;;
 20787                           
 20788                           	psect	text84
 20789  0041E0                     __ptext84:
 20790                           	opt stack 0
 20791  0041E0                     i2___lwdiv:
 20792                           	opt stack 20
 20793                           
 20794                           ;incstack = 0
 20795  0041E0  0E00               	movlw	0
 20796  0041E2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20797  0041E4  0E00               	movlw	0
 20798  0041E6  6E0A               	movwf	i2___lwdiv@quotient,c
 20799  0041E8  5008               	movf	i2___lwdiv@divisor,w,c
 20800  0041EA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20801  0041EC  B4D8               	btfsc	status,2,c
 20802  0041EE  D01C               	goto	i2l1744
 20803  0041F0  0E01               	movlw	1
 20804  0041F2  6E0C               	movwf	i2___lwdiv@counter,c
 20805  0041F4  D004               	goto	i2l5491
 20806  0041F6                     i2l5489:
 20807  0041F6  90D8               	bcf	status,0,c
 20808  0041F8  3608               	rlcf	i2___lwdiv@divisor,f,c
 20809  0041FA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20810  0041FC  2A0C               	incf	i2___lwdiv@counter,f,c
 20811  0041FE                     i2l5491:
 20812  0041FE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20813  004200  D7FA               	goto	i2l5489
 20814  004202                     i2l5493:
 20815  004202  90D8               	bcf	status,0,c
 20816  004204  360A               	rlcf	i2___lwdiv@quotient,f,c
 20817  004206  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20818  004208  5008               	movf	i2___lwdiv@divisor,w,c
 20819  00420A  5C06               	subwf	i2___lwdiv@dividend,w,c
 20820  00420C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20821  00420E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20822  004210  A0D8               	btfss	status,0,c
 20823  004212  D005               	goto	i2l5501
 20824  004214  5008               	movf	i2___lwdiv@divisor,w,c
 20825  004216  5E06               	subwf	i2___lwdiv@dividend,f,c
 20826  004218  5009               	movf	i2___lwdiv@divisor+1,w,c
 20827  00421A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20828  00421C  800A               	bsf	i2___lwdiv@quotient,0,c
 20829  00421E                     i2l5501:
 20830  00421E  90D8               	bcf	status,0,c
 20831  004220  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20832  004222  3208               	rrcf	i2___lwdiv@divisor,f,c
 20833  004224  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20834  004226  D7ED               	goto	i2l5493
 20835  004228                     i2l1744:
 20836  004228  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20837  00422C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20838  004230  0012               	return		;funcret
 20839  004232                     __end_ofi2___lwdiv:
 20840                           	opt stack 0
 20841                           pclatu	equ	0xFFB
 20842                           pclath	equ	0xFFA
 20843                           tblptru	equ	0xFF8
 20844                           tblptrh	equ	0xFF7
 20845                           tblptrl	equ	0xFF6
 20846                           tablat	equ	0xFF5
 20847                           prodh	equ	0xFF4
 20848                           prodl	equ	0xFF3
 20849                           intcon	equ	0xFF2
 20850                           intcon2	equ	0xFF1
 20851                           intcon3	equ	0xFF0
 20852                           indf0	equ	0xFEF
 20853                           postinc0	equ	0xFEE
 20854                           fsr0h	equ	0xFEA
 20855                           fsr0l	equ	0xFE9
 20856                           wreg	equ	0xFE8
 20857                           postdec1	equ	0xFE5
 20858                           fsr1h	equ	0xFE2
 20859                           fsr1l	equ	0xFE1
 20860                           indf2	equ	0xFDF
 20861                           postinc2	equ	0xFDE
 20862                           postdec2	equ	0xFDD
 20863                           fsr2h	equ	0xFDA
 20864                           fsr2l	equ	0xFD9
 20865                           status	equ	0xFD8
 20866                           
 20867 ;; *************** function i2_lcdInst *****************
 20868 ;; Defined at:
 20869 ;;		line 15 in file "lcd.c"
 20870 ;; Parameters:    Size  Location     Type
 20871 ;;  data            1    wreg     unsigned char 
 20872 ;; Auto vars:     Size  Location     Type
 20873 ;;  data            1    2[COMRAM] unsigned char 
 20874 ;; Return value:  Size  Location     Type
 20875 ;;                  1    wreg      void 
 20876 ;; Registers used:
 20877 ;;		wreg, status,2, status,0, cstack
 20878 ;; Tracked objects:
 20879 ;;		On entry : 0/0
 20880 ;;		On exit  : 0/0
 20881 ;;		Unchanged: 0/0
 20882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20887 ;;Total ram usage:        1 bytes
 20888 ;; Hardware stack levels used:    1
 20889 ;; Hardware stack levels required when called:    1
 20890 ;; This function calls:
 20891 ;;		i2_lcdNibble
 20892 ;; This function is called by:
 20893 ;;		_change_state_to_menu_11
 20894 ;;		_change_state_to_menu_23
 20895 ;;		_change_state_to_logs_11
 20896 ;;		_change_state_to_logs_12
 20897 ;;		_change_state_to_logs_22
 20898 ;;		_change_state_to_logs_23
 20899 ;;		_change_state_to_logs_33
 20900 ;;		_change_state_to_logs_34
 20901 ;;		_printSortTimer
 20902 ;;		i2_change_state_to_menu_start
 20903 ;;		i2_change_state_to_menu_12
 20904 ;;		i2_change_state_to_menu_22
 20905 ;;		i2_printRTC
 20906 ;; This function uses a non-reentrant model
 20907 ;;
 20908                           
 20909                           	psect	text85
 20910  004954                     __ptext85:
 20911                           	opt stack 0
 20912  004954                     i2_lcdInst:
 20913                           	opt stack 19
 20914                           
 20915                           ;incstack = 0
 20916                           ;i2lcdInst@data stored from wreg
 20917  004954  6E03               	movwf	i2lcdInst@data,c
 20918                           
 20919                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20920  004956  948C               	bcf	3980,2,c	;volatile
 20921                           
 20922                           ;lcd.c: 17: lcdNibble(data);
 20923  004958  5003               	movf	i2lcdInst@data,w,c
 20924  00495A  EC9B  F020         	call	i2_lcdNibble
 20925  00495E  0012               	return		;funcret
 20926  004960                     __end_ofi2_lcdInst:
 20927                           	opt stack 0
 20928                           pclatu	equ	0xFFB
 20929                           pclath	equ	0xFFA
 20930                           tblptru	equ	0xFF8
 20931                           tblptrh	equ	0xFF7
 20932                           tblptrl	equ	0xFF6
 20933                           tablat	equ	0xFF5
 20934                           prodh	equ	0xFF4
 20935                           prodl	equ	0xFF3
 20936                           intcon	equ	0xFF2
 20937                           intcon2	equ	0xFF1
 20938                           intcon3	equ	0xFF0
 20939                           indf0	equ	0xFEF
 20940                           postinc0	equ	0xFEE
 20941                           fsr0h	equ	0xFEA
 20942                           fsr0l	equ	0xFE9
 20943                           wreg	equ	0xFE8
 20944                           postdec1	equ	0xFE5
 20945                           fsr1h	equ	0xFE2
 20946                           fsr1l	equ	0xFE1
 20947                           indf2	equ	0xFDF
 20948                           postinc2	equ	0xFDE
 20949                           postdec2	equ	0xFDD
 20950                           fsr2h	equ	0xFDA
 20951                           fsr2l	equ	0xFD9
 20952                           status	equ	0xFD8
 20953                           
 20954 ;; *************** function i2_lcdNibble *****************
 20955 ;; Defined at:
 20956 ;;		line 25 in file "lcd.c"
 20957 ;; Parameters:    Size  Location     Type
 20958 ;;  data            1    wreg     unsigned char 
 20959 ;; Auto vars:     Size  Location     Type
 20960 ;;  data            1    1[COMRAM] unsigned char 
 20961 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20962 ;; Return value:  Size  Location     Type
 20963 ;;                  1    wreg      void 
 20964 ;; Registers used:
 20965 ;;		wreg, status,2, status,0
 20966 ;; Tracked objects:
 20967 ;;		On entry : 0/0
 20968 ;;		On exit  : 0/0
 20969 ;;		Unchanged: 0/0
 20970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20975 ;;Total ram usage:        2 bytes
 20976 ;; Hardware stack levels used:    1
 20977 ;; This function calls:
 20978 ;;		Nothing
 20979 ;; This function is called by:
 20980 ;;		i2_lcdInst
 20981 ;;		i2_putch
 20982 ;; This function uses a non-reentrant model
 20983 ;;
 20984                           
 20985                           	psect	text86
 20986  004136                     __ptext86:
 20987                           	opt stack 0
 20988  004136                     i2_lcdNibble:
 20989                           	opt stack 19
 20990                           
 20991                           ;incstack = 0
 20992                           ;i2lcdNibble@data stored from wreg
 20993  004136  6E02               	movwf	i2lcdNibble@data,c
 20994                           
 20995                           ;lcd.c: 27: char temp = data & 0xF0;
 20996  004138  5002               	movf	i2lcdNibble@data,w,c
 20997  00413A  0BF0               	andlw	240
 20998  00413C  6E01               	movwf	i2lcdNibble@temp,c
 20999                           
 21000                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21001  00413E  508C               	movf	3980,w,c	;volatile
 21002  004140  0B0F               	andlw	15
 21003  004142  6E8C               	movwf	3980,c	;volatile
 21004                           
 21005                           ;lcd.c: 29: LATD = temp | LATD;
 21006  004144  5001               	movf	i2lcdNibble@temp,w,c
 21007  004146  108C               	iorwf	3980,w,c	;volatile
 21008  004148  6E8C               	movwf	3980,c	;volatile
 21009                           
 21010                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21011  00414A  868C               	bsf	3980,3,c	;volatile
 21012                           
 21013                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21014  00414C  0E42               	movlw	66
 21015  00414E                     i2u859_47:
 21016  00414E  2EE8               	decfsz	wreg,f,c
 21017  004150  D7FE               	bra	i2u859_47
 21018  004152  D000               	nop2	
 21019                           
 21020                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21021  004154  968C               	bcf	3980,3,c	;volatile
 21022                           
 21023                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21024  004156  0E42               	movlw	66
 21025  004158                     i2u860_47:
 21026  004158  2EE8               	decfsz	wreg,f,c
 21027  00415A  D7FE               	bra	i2u860_47
 21028  00415C  D000               	nop2	
 21029                           
 21030                           ;lcd.c: 36: data = data << 4;
 21031  00415E  3802               	swapf	i2lcdNibble@data,w,c
 21032  004160  0BF0               	andlw	240
 21033  004162  6E02               	movwf	i2lcdNibble@data,c
 21034                           
 21035                           ;lcd.c: 38: temp = data & 0xF0;
 21036  004164  5002               	movf	i2lcdNibble@data,w,c
 21037  004166  0BF0               	andlw	240
 21038  004168  6E01               	movwf	i2lcdNibble@temp,c
 21039                           
 21040                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21041  00416A  508C               	movf	3980,w,c	;volatile
 21042  00416C  0B0F               	andlw	15
 21043  00416E  6E8C               	movwf	3980,c	;volatile
 21044                           
 21045                           ;lcd.c: 40: LATD = temp | LATD;
 21046  004170  5001               	movf	i2lcdNibble@temp,w,c
 21047  004172  108C               	iorwf	3980,w,c	;volatile
 21048  004174  6E8C               	movwf	3980,c	;volatile
 21049                           
 21050                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21051  004176  868C               	bsf	3980,3,c	;volatile
 21052                           
 21053                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21054  004178  0E42               	movlw	66
 21055  00417A                     i2u861_47:
 21056  00417A  2EE8               	decfsz	wreg,f,c
 21057  00417C  D7FE               	bra	i2u861_47
 21058  00417E  D000               	nop2	
 21059                           
 21060                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21061  004180  968C               	bcf	3980,3,c	;volatile
 21062                           
 21063                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21064  004182  0E42               	movlw	66
 21065  004184                     i2u862_47:
 21066  004184  2EE8               	decfsz	wreg,f,c
 21067  004186  D7FE               	bra	i2u862_47
 21068  004188  D000               	nop2	
 21069  00418A  0012               	return		;funcret
 21070  00418C                     __end_ofi2_lcdNibble:
 21071                           	opt stack 0
 21072                           pclatu	equ	0xFFB
 21073                           pclath	equ	0xFFA
 21074                           tblptru	equ	0xFF8
 21075                           tblptrh	equ	0xFF7
 21076                           tblptrl	equ	0xFF6
 21077                           tablat	equ	0xFF5
 21078                           prodh	equ	0xFF4
 21079                           prodl	equ	0xFF3
 21080                           intcon	equ	0xFF2
 21081                           intcon2	equ	0xFF1
 21082                           intcon3	equ	0xFF0
 21083                           indf0	equ	0xFEF
 21084                           postinc0	equ	0xFEE
 21085                           fsr0h	equ	0xFEA
 21086                           fsr0l	equ	0xFE9
 21087                           wreg	equ	0xFE8
 21088                           postdec1	equ	0xFE5
 21089                           fsr1h	equ	0xFE2
 21090                           fsr1l	equ	0xFE1
 21091                           indf2	equ	0xFDF
 21092                           postinc2	equ	0xFDE
 21093                           postdec2	equ	0xFDD
 21094                           fsr2h	equ	0xFDA
 21095                           fsr2l	equ	0xFD9
 21096                           status	equ	0xFD8
 21097                           
 21098 ;; *************** function i2_getRTC *****************
 21099 ;; Defined at:
 21100 ;;		line 44 in file "RTC.c"
 21101 ;; Parameters:    Size  Location     Type
 21102 ;;		None
 21103 ;; Auto vars:     Size  Location     Type
 21104 ;;  getRTC          2    3[COMRAM] int 
 21105 ;; Return value:  Size  Location     Type
 21106 ;;                  1    wreg      void 
 21107 ;; Registers used:
 21108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21109 ;; Tracked objects:
 21110 ;;		On entry : 0/0
 21111 ;;		On exit  : 0/0
 21112 ;;		Unchanged: 0/0
 21113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21117 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21118 ;;Total ram usage:        2 bytes
 21119 ;; Hardware stack levels used:    1
 21120 ;; Hardware stack levels required when called:    2
 21121 ;; This function calls:
 21122 ;;		i2_I2C_Master_Read
 21123 ;;		i2_I2C_Master_Start
 21124 ;;		i2_I2C_Master_Stop
 21125 ;;		i2_I2C_Master_Write
 21126 ;; This function is called by:
 21127 ;;		_printSortTimer
 21128 ;;		i2_printRTC
 21129 ;; This function uses a non-reentrant model
 21130 ;;
 21131                           
 21132                           	psect	text87
 21133  003E1E                     __ptext87:
 21134                           	opt stack 0
 21135  003E1E                     i2_getRTC:
 21136                           	opt stack 18
 21137                           
 21138                           ;RTC.c: 48: I2C_Master_Start();
 21139                           
 21140                           ;incstack = 0
 21141  003E1E  ECCA  F024         	call	i2_I2C_Master_Start	;wreg free
 21142                           
 21143                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21144  003E22  0E00               	movlw	0
 21145  003E24  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21146  003E26  0ED0               	movlw	208
 21147  003E28  6E02               	movwf	i2I2C_Master_Write@d,c
 21148  003E2A  ECB5  F024         	call	i2_I2C_Master_Write	;wreg free
 21149                           
 21150                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21151  003E2E  0E00               	movlw	0
 21152  003E30  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21153  003E32  0E00               	movlw	0
 21154  003E34  6E02               	movwf	i2I2C_Master_Write@d,c
 21155  003E36  ECB5  F024         	call	i2_I2C_Master_Write	;wreg free
 21156                           
 21157                           ;RTC.c: 51: I2C_Master_Stop();
 21158  003E3A  ECC6  F024         	call	i2_I2C_Master_Stop	;wreg free
 21159                           
 21160                           ;RTC.c: 54: I2C_Master_Start();
 21161  003E3E  ECCA  F024         	call	i2_I2C_Master_Start	;wreg free
 21162                           
 21163                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21164  003E42  0E00               	movlw	0
 21165  003E44  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21166  003E46  0ED1               	movlw	209
 21167  003E48  6E02               	movwf	i2I2C_Master_Write@d,c
 21168  003E4A  ECB5  F024         	call	i2_I2C_Master_Write	;wreg free
 21169                           
 21170                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21171  003E4E  0E00               	movlw	0
 21172  003E50  6E05               	movwf	i2getRTC@i+1,c
 21173  003E52  0E00               	movlw	0
 21174  003E54  6E04               	movwf	i2getRTC@i,c
 21175  003E56                     i2l5747:
 21176  003E56  BE05               	btfsc	i2getRTC@i+1,7,c
 21177  003E58  D006               	goto	i2l5751
 21178  003E5A  5005               	movf	i2getRTC@i+1,w,c
 21179  003E5C  E111               	bnz	i2l5757
 21180  003E5E  0E06               	movlw	6
 21181  003E60  5C04               	subwf	i2getRTC@i,w,c
 21182  003E62  B0D8               	btfsc	status,0,c
 21183  003E64  D00D               	goto	i2l5757
 21184  003E66                     i2l5751:
 21185                           
 21186                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21187  003E66  0E24               	movlw	low _time
 21188  003E68  2404               	addwf	i2getRTC@i,w,c
 21189  003E6A  6ED9               	movwf	fsr2l,c
 21190  003E6C  0E01               	movlw	high _time
 21191  003E6E  2005               	addwfc	i2getRTC@i+1,w,c
 21192  003E70  6EDA               	movwf	fsr2h,c
 21193  003E72  0E01               	movlw	1
 21194  003E74  EC09  F024         	call	i2_I2C_Master_Read
 21195  003E78  6EDF               	movwf	indf2,c
 21196  003E7A  4A04               	infsnz	i2getRTC@i,f,c
 21197  003E7C  2A05               	incf	i2getRTC@i+1,f,c
 21198  003E7E  D7EB               	goto	i2l5747
 21199  003E80                     i2l5757:
 21200                           
 21201                           ;RTC.c: 58: }
 21202                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21203  003E80  0E00               	movlw	0
 21204  003E82  EC09  F024         	call	i2_I2C_Master_Read
 21205  003E86  0101               	movlb	1	; () banked
 21206  003E88  6F2A               	movwf	(_time+6)& (0+255),b
 21207                           
 21208                           ;RTC.c: 60: I2C_Master_Stop();
 21209  003E8A  ECC6  F024         	call	i2_I2C_Master_Stop	;wreg free
 21210  003E8E  0012               	return		;funcret
 21211  003E90                     __end_ofi2_getRTC:
 21212                           	opt stack 0
 21213                           pclatu	equ	0xFFB
 21214                           pclath	equ	0xFFA
 21215                           tblptru	equ	0xFF8
 21216                           tblptrh	equ	0xFF7
 21217                           tblptrl	equ	0xFF6
 21218                           tablat	equ	0xFF5
 21219                           prodh	equ	0xFF4
 21220                           prodl	equ	0xFF3
 21221                           intcon	equ	0xFF2
 21222                           intcon2	equ	0xFF1
 21223                           intcon3	equ	0xFF0
 21224                           indf0	equ	0xFEF
 21225                           postinc0	equ	0xFEE
 21226                           fsr0h	equ	0xFEA
 21227                           fsr0l	equ	0xFE9
 21228                           wreg	equ	0xFE8
 21229                           postdec1	equ	0xFE5
 21230                           fsr1h	equ	0xFE2
 21231                           fsr1l	equ	0xFE1
 21232                           indf2	equ	0xFDF
 21233                           postinc2	equ	0xFDE
 21234                           postdec2	equ	0xFDD
 21235                           fsr2h	equ	0xFDA
 21236                           fsr2l	equ	0xFD9
 21237                           status	equ	0xFD8
 21238                           
 21239 ;; *************** function i2_I2C_Master_Write *****************
 21240 ;; Defined at:
 21241 ;;		line 49 in file "I2C.c"
 21242 ;; Parameters:    Size  Location     Type
 21243 ;;  d               2    1[COMRAM] unsigned int 
 21244 ;; Auto vars:     Size  Location     Type
 21245 ;;		None
 21246 ;; Return value:  Size  Location     Type
 21247 ;;                  1    wreg      void 
 21248 ;; Registers used:
 21249 ;;		wreg, status,2, status,0, cstack
 21250 ;; Tracked objects:
 21251 ;;		On entry : 0/0
 21252 ;;		On exit  : 0/0
 21253 ;;		Unchanged: 0/0
 21254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21259 ;;Total ram usage:        2 bytes
 21260 ;; Hardware stack levels used:    1
 21261 ;; Hardware stack levels required when called:    1
 21262 ;; This function calls:
 21263 ;;		i2_I2C_Master_Wait
 21264 ;; This function is called by:
 21265 ;;		i2_getRTC
 21266 ;; This function uses a non-reentrant model
 21267 ;;
 21268                           
 21269                           	psect	text88
 21270  00496A                     __ptext88:
 21271                           	opt stack 0
 21272  00496A                     i2_I2C_Master_Write:
 21273                           	opt stack 18
 21274                           
 21275                           ;I2C.c: 51: I2C_Master_Wait();
 21276                           
 21277                           ;incstack = 0
 21278  00496A  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21279                           
 21280                           ;I2C.c: 52: SSPBUF = d;
 21281  00496E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21282  004972  0012               	return		;funcret
 21283  004974                     __end_ofi2_I2C_Master_Write:
 21284                           	opt stack 0
 21285                           pclatu	equ	0xFFB
 21286                           pclath	equ	0xFFA
 21287                           tblptru	equ	0xFF8
 21288                           tblptrh	equ	0xFF7
 21289                           tblptrl	equ	0xFF6
 21290                           tablat	equ	0xFF5
 21291                           prodh	equ	0xFF4
 21292                           prodl	equ	0xFF3
 21293                           intcon	equ	0xFF2
 21294                           intcon2	equ	0xFF1
 21295                           intcon3	equ	0xFF0
 21296                           indf0	equ	0xFEF
 21297                           postinc0	equ	0xFEE
 21298                           fsr0h	equ	0xFEA
 21299                           fsr0l	equ	0xFE9
 21300                           wreg	equ	0xFE8
 21301                           postdec1	equ	0xFE5
 21302                           fsr1h	equ	0xFE2
 21303                           fsr1l	equ	0xFE1
 21304                           indf2	equ	0xFDF
 21305                           postinc2	equ	0xFDE
 21306                           postdec2	equ	0xFDD
 21307                           fsr2h	equ	0xFDA
 21308                           fsr2l	equ	0xFD9
 21309                           status	equ	0xFD8
 21310                           
 21311 ;; *************** function i2_I2C_Master_Stop *****************
 21312 ;; Defined at:
 21313 ;;		line 43 in file "I2C.c"
 21314 ;; Parameters:    Size  Location     Type
 21315 ;;		None
 21316 ;; Auto vars:     Size  Location     Type
 21317 ;;		None
 21318 ;; Return value:  Size  Location     Type
 21319 ;;                  1    wreg      void 
 21320 ;; Registers used:
 21321 ;;		wreg, status,2, status,0, cstack
 21322 ;; Tracked objects:
 21323 ;;		On entry : 0/0
 21324 ;;		On exit  : 0/0
 21325 ;;		Unchanged: 0/0
 21326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21331 ;;Total ram usage:        0 bytes
 21332 ;; Hardware stack levels used:    1
 21333 ;; Hardware stack levels required when called:    1
 21334 ;; This function calls:
 21335 ;;		i2_I2C_Master_Wait
 21336 ;; This function is called by:
 21337 ;;		i2_getRTC
 21338 ;; This function uses a non-reentrant model
 21339 ;;
 21340                           
 21341                           	psect	text89
 21342  00498C                     __ptext89:
 21343                           	opt stack 0
 21344  00498C                     i2_I2C_Master_Stop:
 21345                           	opt stack 18
 21346                           
 21347                           ;I2C.c: 45: I2C_Master_Wait();
 21348                           
 21349                           ;incstack = 0
 21350  00498C  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21351                           
 21352                           ;I2C.c: 46: PEN = 1;
 21353  004990  84C5               	bsf	4037,2,c	;volatile
 21354  004992  0012               	return		;funcret
 21355  004994                     __end_ofi2_I2C_Master_Stop:
 21356                           	opt stack 0
 21357                           pclatu	equ	0xFFB
 21358                           pclath	equ	0xFFA
 21359                           tblptru	equ	0xFF8
 21360                           tblptrh	equ	0xFF7
 21361                           tblptrl	equ	0xFF6
 21362                           tablat	equ	0xFF5
 21363                           prodh	equ	0xFF4
 21364                           prodl	equ	0xFF3
 21365                           intcon	equ	0xFF2
 21366                           intcon2	equ	0xFF1
 21367                           intcon3	equ	0xFF0
 21368                           indf0	equ	0xFEF
 21369                           postinc0	equ	0xFEE
 21370                           fsr0h	equ	0xFEA
 21371                           fsr0l	equ	0xFE9
 21372                           wreg	equ	0xFE8
 21373                           postdec1	equ	0xFE5
 21374                           fsr1h	equ	0xFE2
 21375                           fsr1l	equ	0xFE1
 21376                           indf2	equ	0xFDF
 21377                           postinc2	equ	0xFDE
 21378                           postdec2	equ	0xFDD
 21379                           fsr2h	equ	0xFDA
 21380                           fsr2l	equ	0xFD9
 21381                           status	equ	0xFD8
 21382                           
 21383 ;; *************** function i2_I2C_Master_Start *****************
 21384 ;; Defined at:
 21385 ;;		line 31 in file "I2C.c"
 21386 ;; Parameters:    Size  Location     Type
 21387 ;;		None
 21388 ;; Auto vars:     Size  Location     Type
 21389 ;;		None
 21390 ;; Return value:  Size  Location     Type
 21391 ;;                  1    wreg      void 
 21392 ;; Registers used:
 21393 ;;		wreg, status,2, status,0, cstack
 21394 ;; Tracked objects:
 21395 ;;		On entry : 0/0
 21396 ;;		On exit  : 0/0
 21397 ;;		Unchanged: 0/0
 21398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21403 ;;Total ram usage:        0 bytes
 21404 ;; Hardware stack levels used:    1
 21405 ;; Hardware stack levels required when called:    1
 21406 ;; This function calls:
 21407 ;;		i2_I2C_Master_Wait
 21408 ;; This function is called by:
 21409 ;;		i2_getRTC
 21410 ;; This function uses a non-reentrant model
 21411 ;;
 21412                           
 21413                           	psect	text90
 21414  004994                     __ptext90:
 21415                           	opt stack 0
 21416  004994                     i2_I2C_Master_Start:
 21417                           	opt stack 18
 21418                           
 21419                           ;I2C.c: 33: I2C_Master_Wait();
 21420                           
 21421                           ;incstack = 0
 21422  004994  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21423                           
 21424                           ;I2C.c: 34: SEN = 1;
 21425  004998  80C5               	bsf	4037,0,c	;volatile
 21426  00499A  0012               	return		;funcret
 21427  00499C                     __end_ofi2_I2C_Master_Start:
 21428                           	opt stack 0
 21429                           pclatu	equ	0xFFB
 21430                           pclath	equ	0xFFA
 21431                           tblptru	equ	0xFF8
 21432                           tblptrh	equ	0xFF7
 21433                           tblptrl	equ	0xFF6
 21434                           tablat	equ	0xFF5
 21435                           prodh	equ	0xFF4
 21436                           prodl	equ	0xFF3
 21437                           intcon	equ	0xFF2
 21438                           intcon2	equ	0xFF1
 21439                           intcon3	equ	0xFF0
 21440                           indf0	equ	0xFEF
 21441                           postinc0	equ	0xFEE
 21442                           fsr0h	equ	0xFEA
 21443                           fsr0l	equ	0xFE9
 21444                           wreg	equ	0xFE8
 21445                           postdec1	equ	0xFE5
 21446                           fsr1h	equ	0xFE2
 21447                           fsr1l	equ	0xFE1
 21448                           indf2	equ	0xFDF
 21449                           postinc2	equ	0xFDE
 21450                           postdec2	equ	0xFDD
 21451                           fsr2h	equ	0xFDA
 21452                           fsr2l	equ	0xFD9
 21453                           status	equ	0xFD8
 21454                           
 21455 ;; *************** function i2_I2C_Master_Read *****************
 21456 ;; Defined at:
 21457 ;;		line 55 in file "I2C.c"
 21458 ;; Parameters:    Size  Location     Type
 21459 ;;  a               1    wreg     unsigned char 
 21460 ;; Auto vars:     Size  Location     Type
 21461 ;;  a               1    1[COMRAM] unsigned char 
 21462 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21463 ;; Return value:  Size  Location     Type
 21464 ;;                  1    wreg      unsigned char 
 21465 ;; Registers used:
 21466 ;;		wreg, status,2, status,0, cstack
 21467 ;; Tracked objects:
 21468 ;;		On entry : 0/0
 21469 ;;		On exit  : 0/0
 21470 ;;		Unchanged: 0/0
 21471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21473 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21476 ;;Total ram usage:        2 bytes
 21477 ;; Hardware stack levels used:    1
 21478 ;; Hardware stack levels required when called:    1
 21479 ;; This function calls:
 21480 ;;		i2_I2C_Master_Wait
 21481 ;; This function is called by:
 21482 ;;		i2_getRTC
 21483 ;; This function uses a non-reentrant model
 21484 ;;
 21485                           
 21486                           	psect	text91
 21487  004812                     __ptext91:
 21488                           	opt stack 0
 21489  004812                     i2_I2C_Master_Read:
 21490                           	opt stack 18
 21491                           
 21492                           ;incstack = 0
 21493                           ;i2I2C_Master_Read@a stored from wreg
 21494  004812  6E02               	movwf	i2I2C_Master_Read@a,c
 21495                           
 21496                           ;I2C.c: 57: unsigned char temp;
 21497                           ;I2C.c: 58: I2C_Master_Wait();
 21498  004814  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21499                           
 21500                           ;I2C.c: 59: RCEN = 1;
 21501  004818  86C5               	bsf	4037,3,c	;volatile
 21502                           
 21503                           ;I2C.c: 60: I2C_Master_Wait();
 21504  00481A  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21505                           
 21506                           ;I2C.c: 61: temp = SSPBUF;
 21507  00481E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21508                           
 21509                           ;I2C.c: 62: I2C_Master_Wait();
 21510  004822  EC8B  F024         	call	i2_I2C_Master_Wait	;wreg free
 21511                           
 21512                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21513  004826  5002               	movf	i2I2C_Master_Read@a,w,c
 21514  004828  A4D8               	btfss	status,2,c
 21515  00482A  D002               	goto	i2u381_40
 21516  00482C  8AC5               	bsf	4037,5,c	;volatile
 21517  00482E  D001               	goto	i2l5455
 21518  004830                     i2u381_40:
 21519  004830  9AC5               	bcf	4037,5,c	;volatile
 21520  004832                     i2l5455:
 21521                           
 21522                           ;I2C.c: 64: ACKEN = 1;
 21523  004832  88C5               	bsf	4037,4,c	;volatile
 21524                           
 21525                           ;I2C.c: 65: return temp;
 21526  004834  5003               	movf	i2I2C_Master_Read@temp,w,c
 21527  004836  0012               	return	
 21528  004838                     __end_ofi2_I2C_Master_Read:
 21529                           	opt stack 0
 21530                           pclatu	equ	0xFFB
 21531                           pclath	equ	0xFFA
 21532                           tblptru	equ	0xFF8
 21533                           tblptrh	equ	0xFF7
 21534                           tblptrl	equ	0xFF6
 21535                           tablat	equ	0xFF5
 21536                           prodh	equ	0xFF4
 21537                           prodl	equ	0xFF3
 21538                           intcon	equ	0xFF2
 21539                           intcon2	equ	0xFF1
 21540                           intcon3	equ	0xFF0
 21541                           indf0	equ	0xFEF
 21542                           postinc0	equ	0xFEE
 21543                           fsr0h	equ	0xFEA
 21544                           fsr0l	equ	0xFE9
 21545                           wreg	equ	0xFE8
 21546                           postdec1	equ	0xFE5
 21547                           fsr1h	equ	0xFE2
 21548                           fsr1l	equ	0xFE1
 21549                           indf2	equ	0xFDF
 21550                           postinc2	equ	0xFDE
 21551                           postdec2	equ	0xFDD
 21552                           fsr2h	equ	0xFDA
 21553                           fsr2l	equ	0xFD9
 21554                           status	equ	0xFD8
 21555                           
 21556 ;; *************** function i2_I2C_Master_Wait *****************
 21557 ;; Defined at:
 21558 ;;		line 26 in file "I2C.c"
 21559 ;; Parameters:    Size  Location     Type
 21560 ;;		None
 21561 ;; Auto vars:     Size  Location     Type
 21562 ;;		None
 21563 ;; Return value:  Size  Location     Type
 21564 ;;                  1    wreg      void 
 21565 ;; Registers used:
 21566 ;;		wreg, status,2, status,0
 21567 ;; Tracked objects:
 21568 ;;		On entry : 0/0
 21569 ;;		On exit  : 0/0
 21570 ;;		Unchanged: 0/0
 21571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21575 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21576 ;;Total ram usage:        1 bytes
 21577 ;; Hardware stack levels used:    1
 21578 ;; This function calls:
 21579 ;;		Nothing
 21580 ;; This function is called by:
 21581 ;;		i2_I2C_Master_Start
 21582 ;;		i2_I2C_Master_Stop
 21583 ;;		i2_I2C_Master_Write
 21584 ;;		i2_I2C_Master_Read
 21585 ;; This function uses a non-reentrant model
 21586 ;;
 21587                           
 21588                           	psect	text92
 21589  004916                     __ptext92:
 21590                           	opt stack 0
 21591  004916                     i2_I2C_Master_Wait:
 21592                           	opt stack 18
 21593  004916                     i2l66:
 21594  004916  B4C7               	btfsc	4039,2,c	;volatile
 21595  004918  D7FE               	goto	i2l66
 21596  00491A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21597  00491E  0E1F               	movlw	31
 21598  004920  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21599  004922  B4D8               	btfsc	status,2,c
 21600  004924  0012               	return	
 21601  004926  D7F7               	goto	i2l66
 21602  004928                     __end_ofi2_I2C_Master_Wait:
 21603                           	opt stack 0
 21604                           pclatu	equ	0xFFB
 21605                           pclath	equ	0xFFA
 21606                           tblptru	equ	0xFF8
 21607                           tblptrh	equ	0xFF7
 21608                           tblptrl	equ	0xFF6
 21609                           tablat	equ	0xFF5
 21610                           prodh	equ	0xFF4
 21611                           prodl	equ	0xFF3
 21612                           intcon	equ	0xFF2
 21613                           intcon2	equ	0xFF1
 21614                           intcon3	equ	0xFF0
 21615                           indf0	equ	0xFEF
 21616                           postinc0	equ	0xFEE
 21617                           fsr0h	equ	0xFEA
 21618                           fsr0l	equ	0xFE9
 21619                           wreg	equ	0xFE8
 21620                           postdec1	equ	0xFE5
 21621                           fsr1h	equ	0xFE2
 21622                           fsr1l	equ	0xFE1
 21623                           indf2	equ	0xFDF
 21624                           postinc2	equ	0xFDE
 21625                           postdec2	equ	0xFDD
 21626                           fsr2h	equ	0xFDA
 21627                           fsr2l	equ	0xFD9
 21628                           status	equ	0xFD8
 21629                           pclatu	equ	0xFFB
 21630                           pclath	equ	0xFFA
 21631                           tblptru	equ	0xFF8
 21632                           tblptrh	equ	0xFF7
 21633                           tblptrl	equ	0xFF6
 21634                           tablat	equ	0xFF5
 21635                           prodh	equ	0xFF4
 21636                           prodl	equ	0xFF3
 21637                           intcon	equ	0xFF2
 21638                           intcon2	equ	0xFF1
 21639                           intcon3	equ	0xFF0
 21640                           indf0	equ	0xFEF
 21641                           postinc0	equ	0xFEE
 21642                           fsr0h	equ	0xFEA
 21643                           fsr0l	equ	0xFE9
 21644                           wreg	equ	0xFE8
 21645                           postdec1	equ	0xFE5
 21646                           fsr1h	equ	0xFE2
 21647                           fsr1l	equ	0xFE1
 21648                           indf2	equ	0xFDF
 21649                           postinc2	equ	0xFDE
 21650                           postdec2	equ	0xFDD
 21651                           fsr2h	equ	0xFDA
 21652                           fsr2l	equ	0xFD9
 21653                           status	equ	0xFD8
 21654                           
 21655                           	psect	rparam
 21656  0000                     pclatu	equ	0xFFB
 21657                           pclath	equ	0xFFA
 21658                           tblptru	equ	0xFF8
 21659                           tblptrh	equ	0xFF7
 21660                           tblptrl	equ	0xFF6
 21661                           tablat	equ	0xFF5
 21662                           prodh	equ	0xFF4
 21663                           prodl	equ	0xFF3
 21664                           intcon	equ	0xFF2
 21665                           intcon2	equ	0xFF1
 21666                           intcon3	equ	0xFF0
 21667                           indf0	equ	0xFEF
 21668                           postinc0	equ	0xFEE
 21669                           fsr0h	equ	0xFEA
 21670                           fsr0l	equ	0xFE9
 21671                           wreg	equ	0xFE8
 21672                           postdec1	equ	0xFE5
 21673                           fsr1h	equ	0xFE2
 21674                           fsr1l	equ	0xFE1
 21675                           indf2	equ	0xFDF
 21676                           postinc2	equ	0xFDE
 21677                           postdec2	equ	0xFDD
 21678                           fsr2h	equ	0xFDA
 21679                           fsr2l	equ	0xFD9
 21680                           status	equ	0xFD8
 21681                           
 21682                           	psect	temp
 21683  00007E                     btemp:
 21684                           	opt stack 0
 21685  00007E                     	ds	1
 21686  0000                     int$flags	set	btemp
 21687                           pclatu	equ	0xFFB
 21688                           pclath	equ	0xFFA
 21689                           tblptru	equ	0xFF8
 21690                           tblptrh	equ	0xFF7
 21691                           tblptrl	equ	0xFF6
 21692                           tablat	equ	0xFF5
 21693                           prodh	equ	0xFF4
 21694                           prodl	equ	0xFF3
 21695                           intcon	equ	0xFF2
 21696                           intcon2	equ	0xFF1
 21697                           intcon3	equ	0xFF0
 21698                           indf0	equ	0xFEF
 21699                           postinc0	equ	0xFEE
 21700                           fsr0h	equ	0xFEA
 21701                           fsr0l	equ	0xFE9
 21702                           wreg	equ	0xFE8
 21703                           postdec1	equ	0xFE5
 21704                           fsr1h	equ	0xFE2
 21705                           fsr1l	equ	0xFE1
 21706                           indf2	equ	0xFDF
 21707                           postinc2	equ	0xFDE
 21708                           postdec2	equ	0xFDD
 21709                           fsr2h	equ	0xFDA
 21710                           fsr2l	equ	0xFD9
 21711                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  193479
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   21642
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0   16520
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              8 BANK0     10    10      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4869
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   92938
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   14647
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           3     3      0    8581
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   18273
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4869
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4869
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Mar 24 22:20:47 2017

                                    _i 012D                     i2_I2C_Master_Start 4994  
                   i2_I2C_Master_Write 496A                                     l66 4902  
                                   _ID 2FBC                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 2056                                    l730 2C08  
                                  l487 37AE                                    l752 30CC  
                                  l753 30E6                                    l739 2CB4  
                                  l932 34B0                                    l945 48CE  
                                  l954 323E                                    l798 3DE4  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3710                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 45A0        __end_of_change_state_to_menu_12 4410  
      __end_of_change_state_to_menu_22 43D8        __end_of_change_state_to_menu_23 4570  
         _f_can_coming_to_distribution 0071                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4690        __end_of_change_state_to_logs_12 4660  
      __end_of_change_state_to_logs_22 4630        __end_of_change_state_to_logs_23 471A  
      __end_of_change_state_to_logs_33 4600        __end_of_change_state_to_logs_34 45D0  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1112 0126                                   l1105 007C  
                                 l1115 018C                                   l1212 3D10  
                                 l1116 01DA                                   l1108 0080  
                                 l1117 0240                                   l1214 3D2A  
                                 l1142 05E8                                   l1118 028E  
                                 l1070 35D0                                   l1046 33D8  
                                 l1207 3CE2                                   l1073 35D4  
                                 l1049 33F8                                   l1154 0782  
                                 l1082 1D04                                   l1243 3C00  
                                 l1180 3C58                                   l1172 3C30  
                                 l1236 3BF0                                   l1261 36DE  
                                 l1253 3696                                   l1181 3C5C  
                                 l1262 36F8                                   l1182 3C60  
                                 l1263 370A                                   l1159 0858  
                                 l1079 1D00                                   l1184 3C9E  
                                 l1176 3C4C                                   l1193 40C4  
                                 l1178 3C50                                   l1179 3C54  
                                 l1199 40D4                                   l1297 13B6  
                                 l1744 3D9E                                   l1754 3FBA  
                                 l1691 393C                                   l6101 395C  
                                 l6111 39E8                                   l7001 04C8  
                                 l6201 41D4                                   l6105 3972  
                                 l5403 3D4E                                   l5405 3D5A  
                                 l7101 06D6                                   l7021 053C  
                                 l7013 051A                                   l7005 04E0  
                                 l5415 3D90                                   l5407 3D60  
                                 l5431 3FAC                                   l5423 3F76  
                                 l7111 06FE                                   l7103 06DC  
                                 l7031 0564                                   l7023 0542  
                                 l6151 3522                                   l5425 3F82  
                                 l7017 0524                                   l5345 475A  
                                 l5427 3F88                                   l7203 08AA  
                                 l7123 0742                                   l7107 06E6  
                                 l7043 05A8                                   l7027 054C  
                                 l5347 476C                                   l6163 355A  
                                 l6147 3518                                   l6155 353A  
                                 l5613 1408                                   l7133 076A  
                                 l7053 05D0                                   l6173 47B8  
                                 l5615 140E                                   l5543 1192  
                                 l5711 3DFA                                   l7207 08C2  
                                 l7127 075A                                   l7119 0738  
                                 l7071 063A                                   l7047 05C0  
                                 l7039 059E                                   l6159 3550  
                                 l5633 146C                                   l5609 13EE  
                                 l5545 11A4                                   l7161 07F4  
                                 l7153 07D2                                   l7129 0760  
                                 l7081 0662                                   l7049 05C6  
                                 l5369 46E4                                   l6169 47A2  
                                 l6505 2BC6                                   l5387 4792  
                                 l5651 14E4                                   l5627 144A  
                                 l5571 1290                                   l5563 125E  
                                 l5555 11E2                                   l5539 117E  
                                 l7171 081C                                   l7163 07FA  
                                 l7075 0652                                   l7067 0630  
                                 l5723 38C0                                   l5653 14F0  
                                 l5661 151E                                   l5645 14C8  
                                 l5637 14A4                                   l5581 1308  
                                 l5573 129C                                   l5549 11AE  
                                 l7405 36BE                                   l5709 3DD0  
                                 l7157 07DC                                   l7093 06B4  
                                 l7085 067A                                   l7077 0658  
                                 l5725 38D0                                   l6293 3AF2  
                                 l8117 3164                                   l6621 2CE2  
                                 l6541 2C9E                                   l6533 2C66  
                                 l6517 2C2C                                   l5663 1524  
                                 l5639 14AE                                   l5591 135E  
                                 l5583 1314                                   l5575 12A2  
                                 l7407 36C8                                   l7167 0804  
                                 l6711 1D54                                   l5735 392A  
                                 l5727 38D6                                   l8143 31F8  
                                 l8119 3178                                   l6623 2CFC  
                                 l6631 2D4A                                   l6551 2CCE  
                                 _ADIE 007CEE                                   l5657 150A  
                                 l5593 1376                                   l5585 131A  
                                 l7417 36FA                                   l7265 3CFA  
                                 l7249 3C28                                   l7193 0882  
                                 l7177 0842                                   l7097 06BE  
                                 l7441 3830                                   l7433 3806  
                                 l5681 3B66                                   l5673 441A  
                                 l6289 3ADC                                   l6625 2D16  
                                 l6633 2D78                                   l5667 157C  
                                 l5587 1332                                   l7187 0872  
                                 l8155 337A                                   l7451 3866  
                                 l7443 3836                                   l7427 37F0  
                                 l5691 3B9C                                   l5675 4426  
                                 l5931 1FD4                                   l6299 3B1E  
                                 l6627 2D30                                   l5597 137C  
                                 l5669 1588                                   l7197 089A  
                                 l7189 0878                                   l6741 1E5C  
                                 l8181 3416                                   l8173 33FE  
                                 l5685 3B7C                                   l5941 209C  
                                 l7613 0B06                                   l7605 0AE4  
                                 l8261 3786                                   l8253 375A  
                                 l7279 3C64                                   l7199 08A0  
                                 l6823 00EA                                   l8191 3434  
                                 l8183 341C                                   l8175 3404  
                                 l7439 3824                                   l7455 3874  
                                 l7471 3A14                                   l5951 2132  
                                 l5943 20BA                                   l7623 0B22  
                                 l7543 09B8                                   l6575 3058  
                                 l8271 37A4                                   l8263 378C  
                                 l8255 3770                                   l6913 0314  
                                 l6833 0112                                   l6825 00F0  
                                 l6729 1E0C                                   l8185 3422  
                                 l8177 340A                                   l7481 3A44  
                                 l5953 2150                                   l5945 20D8  
                                 l5937 2060                                   l7609 0AEE  
                                 l7561 0A04                                   l7553 09DA  
                                 l7545 09BE                                   l6585 3088  
                                 l6593 30A0                                   l8273 37AA  
                                 l6923 033C                                   l6771 1F50  
                                 l6747 1E9E                                   l8187 3428  
                                 l8179 3410                                   l8195 343A  
                                 l7459 3888                                   l7483 3A4A  
                                 l7491 3A7C                                   l7475 3A24  
                                 l5955 216E                                   l5947 20F6  
                                 l5939 207E                                   l5963 21C8  
                                 l7803 1056                                   l7723 0EDE  
                                 l7651 0C04                                   l7643 0B8C  
                                 l7627 0B3A                                   l7619 0B18  
                                 l8259 3780                                   l6917 032C  
                                 l6909 030A                                   l6829 00FA  
                                 l8189 342E                                   l5957 218C  
                                 l5949 2114                                   l5965 2226  
                                 l7821 10A2                                   l7813 1080  
                                 l7741 0F2A                                   l7733 0F08  
                                 l7661 0C9A                                   l7653 0C22  
                                 l7645 0BAA                                   l7581 0A6C  
                                 l7557 09F2                                   l7549 09D0  
                                 l6589 3094                                   l8277 37B0  
                                 l6943 03B0                                   l6935 038E  
                                 l6927 0354                                   l6919 0332  
                                 l6783 1F98                                   l6767 1F1A  
                                 l6759 1EEA                                   l7495 3A90  
                                 l7487 3A6E                                   l7479 3A38  
                                 l5959 21AA                                   l7807 106E  
                                 l7727 0EF6                                   l7719 0ED4  
                                 l7663 0CB8                                   l7655 0C40  
                                 l7647 0BC8                                   l7671 0D12  
                                 l7575 0A5C                                   l7591 0A92  
                                 l6599 30B6                                   l6961 0412  
                                 l6953 03D8                                   l6945 03B6  
                                 l7817 108A                                   l7737 0F12  
                                 l7681 0DC2                                   l7665 0CD6  
                                 l7657 0C5E                                   l7649 0BE6  
                                 l7673 0D76                                   l7585 0A84  
                                 l7577 0A62                                   l6971 043A  
                                 l6939 0398                                   l6779 1F62  
                                 l7843 110A                                   l7763 0F9A  
                                 l7691 0DEC                                   l7667 0CF4  
                                 l7659 0C7C                                   l6965 041C  
                                 l6949 03C0                                   l7861 1156  
                                 l7853 1134                                   l7781 0FE6  
                                 l7773 0FC4                                   l7685 0DDA  
                                 l7677 0DB8                                   l6991 04A0  
                                 l6975 0444                                   l7847 1122  
                                 l7839 1100                                   l7767 0FB2  
                                 l7759 0F90                                   l7695 0DF6  
                                 l6969 0434                                   l7857 113E  
                                 l7777 0FCE                                   l7865 1162  
                                 l6995 04B8                                   l6987 0496  
                                 l6979 045C                                   l7699 0E0E  
                                 l6997 04BE                                   l7799 104C  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u4030 1354                                   u4037 134A  
                                 u5200 1D96                                   u5210 1D98  
                                 u5050 2FEC                                   u6011 36B4  
                                 u6020 36B6                                   u3710 46E2  
                                 u5240 1F3E                                   u5080 3048  
                                 u5058 2FF0                                   _PEIE 007F96  
                                 u5340 0126                                   u4620 2056  
                                 u4605 3FF4                                   u5270 1F86  
                                 u7110 323E                                   u3910 42C2  
                                 u5360 01DA                                   u5248 1F42  
                                 u5088 304C                                   u3920 42C4  
                                 u3930 430E                                   u3931 430A  
                                 u5380 028E                                   u3940 4310  
                                 _RCEN 007E2B                                   u5278 1F8A  
                                 u8007 0250                                   u8017 026E  
                                 u8107 04D0                                   u8027 029E  
                                 u8117 052C                                   u8037 031C  
                                 u7317 2B56                                   u3990 12DC  
                                 u4950 2BD2                                   u8207 0772  
                                 u8127 0554                                   u8047 0344  
                                 u7407 30D0                                   u7327 2C1C  
                                 u8217 0794                                   u8137 05B0  
                                 u8057 03A0                                   u7417 30DA  
                                 u7337 2C86                                   i2l66 4916  
                                 u4970 2C08                                   u8307 3C1E  
                                 u8227 07E4                                   u8147 05D8  
                                 u8067 03C8                                   u7507 4320  
                                 u7427 30FE                                   u7347 2CB8  
                                 u3997 12D2                                   u8317 3CC2  
                                 u8237 080C                                   u8157 0642  
                                 u8077 0424                                   u7517 4354  
                                 u7437 449A                                   u7357 2CC2  
                                 u8407 1702                                   u8327 3D14  
                                 u8247 085C                                   u8167 066A  
                                 u8087 044C                                   u7607 0DCA  
                                 u7527 08E2                                   u7447 2D9E  
                                 u7367 41AA                                   u4968 2BD6  
                                 u8417 1736                                   u8337 3D1C  
                                 u8257 0866                                   u8177 06C6  
                                 u8097 04A8                                   u7617 0DFE  
                                 u7537 09E2                                   u7457 2DD2  
                                 u7377 47AE                                   u8507 411E  
                                 u8427 176A                                   u8347 408E  
                                 u8267 088A                                   u8187 06EE  
                                 u7707 1092                                   u7627 0E28  
                                 u7547 0A1E                                   u7467 2E06  
                                 u7387 2FD2                                   u8517 3656  
                                 u8437 17B6                                   u8357 15B6  
                                 u8277 08B2                                   u8197 074A  
                                 u7717 10BC                                   u7637 0EE6  
                                 u7557 0A74                                   u7477 34CE  
                                 u7397 302E                                   u8527 36E2  
                                 u8447 1802                                   u8367 1602  
                                 u8287 3BBA                                   u7807 1DAC  
                                 u7727 1112                                   u7647 0F1A  
                                 u7567 0AA0                                   u7487 352A  
                                 u8537 36EC                                   u8457 1836  
                                 u8377 164E                                   u8297 3C0A  
                                 u7817 1E00                                   u7737 1146  
                                 u7657 0F44                                   u7577 0AF6  
                                 u7497 3562                                   u8547 3F1A  
                                 u8467 186A                                   u8387 1682  
                                 u7907 35C4                                   u7827 1E20  
                                 u7747 3388                                   u7667 0FA2  
                                 u7587 0B2A                                   u8557 3F24  
                                 u8477 18B6                                   u8397 16B6  
                                 u7917 35E6                                   u7837 1E4E  
                                 u7757 33CC                                   u7677 0FD6  
                                 u7597 0B54                                   u8567 3F50  
                                 u8487 18EA                                   u7927 002C  
                                 u7847 1E92                                   u7767 1CB0  
                                 u7687 1000                                   u8577 3F5A  
                                 u8497 191E                                   u7937 0070  
                                 u7857 1EB0                                   u7777 1CF4  
                                 u7697 105E                                   u7947 0092  
                                 u7867 1EDE                                   u7787 1D16  
                                 u7957 0102                                   u7877 1EF8  
                                 u7797 1D44                                   u7967 0136  
                                 u7887 4762                                   u7977 019C  
                                 u7897 3580                                   u7987 01BA  
                                 u7997 01EA                                   _RSEN 007E29  
                          _stopSignals 48D6                                   _Test 337A  
                                 _back 005B                                   _main 3710  
                                 _down 0069                                   _keys FB01  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 485C                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4954  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 252A  
                          i2_lcdNibble 4136                        __end_of_Loading 2CD8  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3572                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3892                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB1C  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 3A9A  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB1C                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB34  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 394E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3DA8  
                      __end_of___lwmod 3FC4                                  i2l257 2526  
                                i2l602 25B8                                  i2l863 2F14  
                                i2l945 48FA                                  i2l867 2F60  
                      ___awdiv@counter 008A                                  i2l869 2F80  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4948                        __end_of_handler 2FBC  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 4772  
                      __end_of_initLCD 435E                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 418C                        __end_of_loadRTC 3B26  
                      __end_of_readMAG 4318                        __end_of_dpowers FB1C  
                                _first 00E4                                  _enter 006B  
                      __end_of_isdigit 479C                                  _input 007D  
                                _putch 4928                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4812  
                     __end_ofi2_getRTC 3E90                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1CA2  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 44E0                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 4232                           __end_of_Test 348E  
                   __size_ofi2_lcdInst 000C                           __end_of_main 37D4  
                         __end_of_keys FB12                           __end_of_sort 487E  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3648  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00BA                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB49  
                               STR_120 FFB6                                 STR_104 FBE8  
                               STR_112 FB5B                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB6D  
                               _EEADRH 000FAA                                 STR_117 FB5B  
                               STR_109 FE69                                 STR_118 FB49  
                               _ADRESL 000FC3                                 STR_119 FB7F  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4510  
            i2_change_state_to_menu_22 44E0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1297 1B0E                                 i2l1744 4228  
                               i2l1754 4396                                 i2l5501 421E  
                               i2l5511 4374                                 i2l5513 4378  
                               i2l6081 331E                                 i2l6241 2556  
                               i2l8001 2458                                 i2l6251 25EE  
                               i2l5517 438C                                 i2l5509 436C  
                               i2l6093 3362                                 i2l6085 332E  
                               i2l6421 2A88                                 i2l6405 2A4A  
                               i2l6261 265C                                 i2l6253 2604  
                               i2l8021 24AE                                 i2l8013 248A  
                               i2l8005 246E                                 i2l5455 4832  
                               i2l6415 2A70                                 i2l6351 298A  
                               i2l6343 2970                                 i2l6263 2672  
                               i2l6255 261A                                 i2l6247 25C2  
                               i2l6433 2AAA                                 i2l6425 2A92  
                               i2l6409 2A66                                 i2l6353 299A  
                               i2l6361 29A8                                 i2l6265 2688  
                               i2l6257 2630                                 i2l6249 25D8  
                               i2l6273 26CA                                 i2l8017 2498  
                               i2l8009 247C                                 i2l5491 41FE  
                               i2l5811 1A2C                                 i2l6451 2AEE  
                               i2l6443 2ACA                                 i2l6419 2A84  
                               i2l6371 29CE                                 i2l6355 299E  
                               i2l6267 269E                                 i2l6259 2646  
                               i2l6275 2724                                 i2l8027 24BC  
                               i2l5493 4202                                 i2l5821 1A86  
                               i2l8205 276C                                 i2l6373 29D4  
                               i2l6365 29BC                                 i2l6461 2B0A  
                               i2l6269 26B4                                 i2l5751 3E66  
                               i2l5479 48B6                                 i2l5903 1C7E  
                               i2l5823 1A98                                 i2l5807 1A1E  
                               i2l8215 27D6                                 i2l6455 2B00  
                               i2l6447 2ADC                                 i2l6439 2AB8  
                               i2l6391 2A24                                 i2l6375 29DA  
                               i2l6367 29C2                                 i2l5911 44C0  
                               i2l5489 41F6                                 i2l5817 1A76  
                               i2l5809 1A28                                 i2l5833 1AD8  
                               i2l5905 1C86                                 i2l8225 2898  
                               i2l8209 277C                                 i2l6369 29C8  
                               i2l5747 3E56                                 i2l5851 1B58  
                               i2l5827 1AC2                                 i2l5819 1A80  
                               i2l6379 29E0                                 i2l8331 2F34  
                               i2l8307 2EE8                                 i2l5757 3E80  
                               i2l5845 1B3C                                 i2l5829 1AD4  
                               i2l5781 195C                                 i2l5909 44B8  
                               i2l5863 1B8A                                 i2l5791 1994  
                               i2l5775 193E                                 i2l6399 2A3C  
                               i2l5881 1BE6                                 i2l5873 1BC8  
                               i2l5849 1B54                                 i2l5785 1962  
                               i2l8353 2F7E                                 i2l8329 2F32  
                               i2l5875 1BD0                                 i2l5779 194E  
                               i2l8291 2EC8                                 i2l5893 1C18  
                               i2l5869 1BA4                                 i2l8293 2ECC  
                               i2l5887 1BFC                                 i2l5799 19F6  
                               i2l5889 1C04                                 i2l5897 1C2A  
                               i2l8641 24DA                                 i2l7921 2320  
                               i2l7913 2302                                 i2l7905 22E6  
                               i2l5899 1C30                                 i2l8651 2A14  
                               i2l8643 24FC                                 i2l8645 2518  
                               i2l7941 236E                                 i2l7933 234A  
                               i2l7925 232E                                 i2l7917 2312  
                               i2l7909 22F4                                 i2l8649 29F8  
                               i2l7961 23BC                                 i2l7953 2398  
                               i2l7945 237C                                 i2l7937 2358  
                               i2l7929 233C                                 i2l7881 22A0  
                               i2l7981 240A                                 i2l7973 23EE  
                               i2l7965 23CA                                 i2l7957 23AE  
                               i2l7949 238A                                 i2l7893 22CA  
                               i2l7885 22AE                                 i2l7879 229A  
                               i2l7993 243C                                 i2l7985 2418  
                               i2l7977 23FC                                 i2l7969 23D8  
                               i2l7897 22D8                                 i2l7889 22BC  
                               i2l7997 244A                                 i2l7989 242E  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 47C4  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 008C                       __end_of_dispLogs 485C  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2E4E                                 ___wmul 4446  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 447C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3B26  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 48A0                                 _initUI 4690  
                               _readIR 4280                                 _logRun 3118  
                               clear_0 4258                                 clear_1 4264  
                               clear_2 4270                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4080  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 004B  
              __size_of_initGlobalVars 006A                           ?_retrieveLog 0007  
                               _strcpy 4410                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 47EC  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 47C4                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4232  
                     __end_of_printRTC 226A                           __mediumconst FB00  
                    __end_ofi2___lwmod 43A0                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 3648  
                    __end_ofi2_lcdInst 4960                             _PusherTest 3CB4  
                    __end_ofi2_isdigit 48BE                             __accesstop 0080  
              __end_of__initialization 4276                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 48EC  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 499E                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 4974  
                        __end_of_getIR 41E0                            i2printRTC@i 0041  
                        _initSortTimer 394E            __end_of_updateServoPosition 3E1E  
                        __end_of_putch 4938                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 3118  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 4746  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 471A  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 0061                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 348E               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001                                UI@F3225 012F  
             ?_change_state_to_menu_22 0001               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 3C30                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 038C                      __end_of_PortTests 3CB4  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2313 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00DE                                i2_putch 4948  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 0176  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3F62  
                              _Loading 2B38            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 37D4                                ___awmod 39F8  
                           _initServos 40DC                                ___lldiv 3892  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 3D30                                ___lwmod 3F62  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 4232                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3E90  
                              _lcdInst 4938                                _handler 0008  
                              __ptext0 3710                                __ptext1 48D6  
                              __ptext2 485C                                __ptext3 2B38  
                              __ptext4 394E                                __ptext5 3E90  
                              __ptext6 418C                                __ptext7 4280  
                              __ptext8 479C                                __ptext9 2FBC  
                      __size_of_printf 0438                                _readADC 4746  
                      __size_of_strcpy 0036                                _initLCD 4318  
                              _cur_can 0065                                _loadRTC 3A9A  
                              _readMAG 42CC                                _dpowers FB12  
                   actuatorTest@i_1650 00AE                     actuatorTest@i_1651 00AF  
                   actuatorTest@i_1643 00AD                     actuatorTest@i_1660 00B5  
                   actuatorTest@i_1653 00B0                     actuatorTest@i_1670 00BB  
                   actuatorTest@i_1662 00B6                     actuatorTest@i_1654 00B1  
                   actuatorTest@i_1663 00B7                     actuatorTest@i_1680 00C1  
                   actuatorTest@i_1672 00BC                     actuatorTest@i_1656 00B2  
                   actuatorTest@i_1673 00BD                     actuatorTest@i_1665 00B8  
                   actuatorTest@i_1657 00B3                     actuatorTest@i_1682 00C2  
                   actuatorTest@i_1666 00B9                     actuatorTest@i_1683 00C3  
                   actuatorTest@i_1675 00BE                     actuatorTest@i_1659 00B4  
                   actuatorTest@i_1676 00BF                     actuatorTest@i_1669 00BA  
                   actuatorTest@i_1679 00C0                                _isdigit 4772  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0126                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2CD8                         __pintcode_body 2E4E  
                 end_of_initialization 4276                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 2E4E                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3EFA  
                           _sensorTest 1CA2                    __size_of_PusherTest 007C  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2B38  
                         ??_BothServos 00AB                  __end_of_machineConfig 4080  
                           _updateMenu 226A                      i2_I2C_Master_Read 4812  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4916  
                    i2_I2C_Master_Stop 498C                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 41E0  
                            i2___lwmod 435E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2760                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4954                          Loading@i_1098 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 48A0                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1934                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 48D6                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 447C  
                       __end_of_getMAG 44AE                         __end_of_getRTC 3BAC  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 46BE  
                       __end_of_readIR 42CC                         __end_of_logRun 3254  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 4446  
            __end_ofi2_I2C_Master_Read 4838              __end_ofi2_I2C_Master_Wait 4928  
                         i2printf@prec 001D                    start_initialization 4232  
            __end_ofi2_I2C_Master_Stop 4994                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1329 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3BAC                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3C30  
                          ?_sensorTest 0001                            __pdataBANK1 012F  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2433 0045                   __size_of_BlockerTest 00C8  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1957 0081  
                         ??_PusherTest 00AB                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 48BE  
                   __end_of_PortTestA5 40DC                       _I2C_Master_Start 4984  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4960  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FB00  
                            _lcdNibble 3EFA                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 3D30  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00E0  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0054  
                        _algorithmTest 3572                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 015C                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 499C  
           __end_ofi2_I2C_Master_Write 4974                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2952  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u440_40 1ABA                               i2u440_47 1AB0  
                             _PIR2bits 000FA1                               i2u436_40 1A5A  
                             i2u436_47 1A50                               i2u381_40 4830  
                             i2u716_40 2892                               i2u479_40 25B8  
                             i2u860_47 4158                               i2u861_47 417A  
                             i2u862_47 4184                               i2u858_47 2990  
                             i2u859_47 414E                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 47EC  
                        lcdNibble@data 0081                               i2_getRTC 3E1E  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B8  
                             i2_printf 1934                               i2_strcpy 44AE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4246                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4902                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 01A0                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 39F8  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4570             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 43D8             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 43A0                _change_state_to_menu_23 4540  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4660  
              _change_state_to_logs_12 4630                _change_state_to_logs_22 4600  
              _change_state_to_logs_23 46EC                _change_state_to_logs_33 45D0  
              _change_state_to_logs_34 45A0                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2FB4  
                           _EEPROMTest 499C                        _I2C_Master_Init 3FC4  
                     __size_of_readADC 002C                        _I2C_Master_Read 46BE  
                     __size_of_initLCD 0046                           _f_ID_receive 006D  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4902                        _I2C_Master_Stop 497C  
                      BlockerTest@flag 00AE                       __size_of_isdigit 002A  
                             _delay_ms 479C                         _printSortTimer 2760  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 337A                               __ptext10 447C  
                             __ptext11 2CD8                               __ptext20 471A  
                             __ptext12 4024                               __ptext21 487E  
                             __ptext13 3118                               __ptext30 46BE  
                             __ptext22 4318                               __ptext14 348E  
                             __ptext31 4902                               __ptext23 08CA  
                             __ptext15 48BE                               __ptext40 3572  
                             __ptext32 43A0                               __ptext24 1FA0  
                             __ptext16 4690                               __ptext41 0012  
                             __ptext33 43D8                               __ptext25 4410  
                             __ptext17 3A9A                               __ptext50 3648  
                             __ptext42 3BAC                               __ptext34 39F8  
                             __ptext26 3B26                               __ptext18 3FC4  
                             __ptext51 1170                               __ptext43 3CB4  
                             __ptext35 37D4                               __ptext27 4960  
                             __ptext19 3892                               __ptext60 226A  
                             __ptext52 4928                               __ptext44 3C30  
                             __ptext36 337A                               __ptext28 497C  
                             __ptext61 47C4                               __ptext53 4772  
                             __ptext45 4080                               __ptext37 1CA2  
                             __ptext29 4984                               __ptext70 45D0  
                             __ptext62 252A                               __ptext54 4446  
                             __ptext46 499C                               __ptext38 42CC  
                             __ptext71 46EC                               __ptext63 44AE  
                             __ptext55 3F62                               __ptext47 15A8  
                             __ptext39 4746                               __ptext80 4948  
                             __ptext72 4600                               __ptext64 2952  
                             __ptext56 3D30                               __ptext48 40DC  
                             __ptext81 48A0                               __ptext73 4630  
                             __ptext65 44E0                               __ptext57 4938  
                             __ptext49 3DA8                               __ptext90 4994  
                             __ptext82 47EC                               __ptext74 4660  
                             __ptext66 4510                               __ptext58 3EFA  
                             __ptext91 4812                               __ptext83 435E  
                             __ptext75 4838                               __ptext67 4540  
                             __ptext92 4916                               __ptext84 41E0  
                             __ptext76 3254                               __ptext68 4570  
                             __ptext85 4954                               __ptext77 48EC  
                             __ptext69 45A0                               __ptext86 4136  
                             __ptext78 2760                               __ptext87 3E1E  
                             __ptext79 1934                               __ptext88 496A  
                             __ptext89 498C                               _dispLogs 4838  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1957 0002  
                   __end_of_initServos 4136                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 487E  
                        __size_of_main 00C4                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3DA8                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1FA0  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006F  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4540      __end_ofi2_change_state_to_menu_22 4510  
                             loadRTC@i 0096                 __end_of_printSortTimer 2952  
                            putch@data 0082               __end_of_I2C_Master_Start 498C  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 496A  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1FA0                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 48EC              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 252A  
              __end_of_I2C_Master_Init 4024                __end_of_I2C_Master_Read 46EC  
              __end_of_I2C_Master_Wait 4916                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4984                            lcdInst@data 0082  
                        printRTC@F3216 0133                           retrieveLog@i 000E  
                          _retrieveLog 3254                    __end_ofi2_lcdNibble 418C  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4024  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
