

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 13:50:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  0046A4                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3223
   150  0046A4  4D                 	db	77
   151  0046A5  4D                 	db	77
   152  0046A6  4D                 	db	77
   153  0046A7  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3214
   156  0046A8  4D                 	db	77
   157  0046A9  4D                 	db	77
   158  0046AA  4D                 	db	77
   159  0046AB  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB26                     __pmediumconst:
   163                           	opt stack 0
   164  00FB26  00                 	db	0
   165  00FB27                     _keys:
   166                           	opt stack 0
   167  00FB27  31                 	db	49
   168  00FB28  32                 	db	50
   169  00FB29  33                 	db	51
   170  00FB2A  41                 	db	65
   171  00FB2B  34                 	db	52
   172  00FB2C  35                 	db	53
   173  00FB2D  36                 	db	54
   174  00FB2E  42                 	db	66
   175  00FB2F  37                 	db	55
   176  00FB30  38                 	db	56
   177  00FB31  39                 	db	57
   178  00FB32  43                 	db	67
   179  00FB33  2A                 	db	42
   180  00FB34  30                 	db	48
   181  00FB35  23                 	db	35
   182  00FB36  44                 	db	68
   183  00FB37  00                 	db	0
   184  00FB38                     __end_of_keys:
   185                           	opt stack 0
   186  00FB38                     _dpowers:
   187                           	opt stack 0
   188  00FB38  0001               	dw	1
   189  00FB3A  000A               	dw	10
   190  00FB3C  0064               	dw	100
   191  00FB3E  03E8               	dw	1000
   192  00FB40  2710               	dw	10000
   193  00FB42                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB42                     STR_21:
   267  00FB42  25                 	db	37
   268  00FB43  30                 	db	48	;'0'
   269  00FB44  32                 	db	50	;'2'
   270  00FB45  64                 	db	100	;'d'
   271  00FB46  25                 	db	37
   272  00FB47  73                 	db	115	;'s'
   273  00FB48  20                 	db	32
   274  00FB49  7C                 	db	124
   275  00FB4A  20                 	db	32
   276  00FB4B  25                 	db	37
   277  00FB4C  30                 	db	48	;'0'
   278  00FB4D  32                 	db	50	;'2'
   279  00FB4E  64                 	db	100	;'d'
   280  00FB4F  3A                 	db	58	;':'
   281  00FB50  25                 	db	37
   282  00FB51  30                 	db	48	;'0'
   283  00FB52  32                 	db	50	;'2'
   284  00FB53  64                 	db	100	;'d'
   285  00FB54  3A                 	db	58	;':'
   286  00FB55  25                 	db	37
   287  00FB56  30                 	db	48	;'0'
   288  00FB57  32                 	db	50	;'2'
   289  00FB58  64                 	db	100	;'d'
   290  00FB59  00                 	db	0
   291  00FB5A                     STR_66:
   292  00FB5A  28                 	db	40
   293  00FB5B  64                 	db	100	;'d'
   294  00FB5C  61                 	db	97	;'a'
   295  00FB5D  74                 	db	116	;'t'
   296  00FB5E  61                 	db	97	;'a'
   297  00FB5F  3A                 	db	58	;':'
   298  00FB60  20                 	db	32
   299  00FB61  25                 	db	37
   300  00FB62  75                 	db	117	;'u'
   301  00FB63  2C                 	db	44
   302  00FB64  20                 	db	32
   303  00FB65  61                 	db	97	;'a'
   304  00FB66  64                 	db	100	;'d'
   305  00FB67  64                 	db	100	;'d'
   306  00FB68  72                 	db	114	;'r'
   307  00FB69  3A                 	db	58	;':'
   308  00FB6A  20                 	db	32
   309  00FB6B  25                 	db	37
   310  00FB6C  75                 	db	117	;'u'
   311  00FB6D  29                 	db	41
   312  00FB6E  00                 	db	0
   313  00FB6F                     STR_27:
   314  00FB6F  4E                 	db	78	;'N'
   315  00FB70  4F                 	db	79	;'O'
   316  00FB71  20                 	db	32
   317  00FB72  4C                 	db	76	;'L'
   318  00FB73  41                 	db	65	;'A'
   319  00FB74  42                 	db	66	;'B'
   320  00FB75  3A                 	db	58	;':'
   321  00FB76  20                 	db	32
   322  00FB77  25                 	db	37
   323  00FB78  64                 	db	100	;'d'
   324  00FB79  7C                 	db	124
   325  00FB7A  4C                 	db	76	;'L'
   326  00FB7B  41                 	db	65	;'A'
   327  00FB7C  42                 	db	66	;'B'
   328  00FB7D  3A                 	db	58	;':'
   329  00FB7E  20                 	db	32
   330  00FB7F  25                 	db	37
   331  00FB80  64                 	db	100	;'d'
   332  00FB81  00                 	db	0
   333  00FB82                     STR_25:
   334  00FB82  4E                 	db	78	;'N'
   335  00FB83  4F                 	db	79	;'O'
   336  00FB84  20                 	db	32
   337  00FB85  54                 	db	84	;'T'
   338  00FB86  41                 	db	65	;'A'
   339  00FB87  42                 	db	66	;'B'
   340  00FB88  3A                 	db	58	;':'
   341  00FB89  20                 	db	32
   342  00FB8A  25                 	db	37
   343  00FB8B  64                 	db	100	;'d'
   344  00FB8C  7C                 	db	124
   345  00FB8D  54                 	db	84	;'T'
   346  00FB8E  41                 	db	65	;'A'
   347  00FB8F  42                 	db	66	;'B'
   348  00FB90  3A                 	db	58	;':'
   349  00FB91  20                 	db	32
   350  00FB92  25                 	db	37
   351  00FB93  64                 	db	100	;'d'
   352  00FB94  00                 	db	0
   353  00FB95                     STR_107:
   354  00FB95  44                 	db	68	;'D'
   355  00FB96  20                 	db	32
   356  00FB97  57                 	db	87	;'W'
   357  00FB98  49                 	db	73	;'I'
   358  00FB99  4C                 	db	76	;'L'
   359  00FB9A  4C                 	db	76	;'L'
   360  00FB9B  20                 	db	32
   361  00FB9C  52                 	db	82	;'R'
   362  00FB9D  45                 	db	69	;'E'
   363  00FB9E  54                 	db	84	;'T'
   364  00FB9F  55                 	db	85	;'U'
   365  00FBA0  52                 	db	82	;'R'
   366  00FBA1  4E                 	db	78	;'N'
   367  00FBA2  20                 	db	32
   368  00FBA3  20                 	db	32
   369  00FBA4  20                 	db	32
   370  00FBA5  20                 	db	32
   371  00FBA6  00                 	db	0
   372  00FBA7                     STR_108:
   373  00FBA7  4F                 	db	79	;'O'
   374  00FBA8  54                 	db	84	;'T'
   375  00FBA9  48                 	db	72	;'H'
   376  00FBAA  45                 	db	69	;'E'
   377  00FBAB  52                 	db	82	;'R'
   378  00FBAC  20                 	db	32
   379  00FBAD  53                 	db	83	;'S'
   380  00FBAE  45                 	db	69	;'E'
   381  00FBAF  54                 	db	84	;'T'
   382  00FBB0  53                 	db	83	;'S'
   383  00FBB1  20                 	db	32
   384  00FBB2  52                 	db	82	;'R'
   385  00FBB3  41                 	db	65	;'A'
   386  00FBB4  35                 	db	53	;'5'
   387  00FBB5  20                 	db	32
   388  00FBB6  20                 	db	32
   389  00FBB7  20                 	db	32
   390  00FBB8  00                 	db	0
   391  00FBB9                     STR_3:
   392  00FBB9  2D                 	db	45
   393  00FBBA  2D                 	db	45
   394  00FBBB  20                 	db	32
   395  00FBBC  4C                 	db	76	;'L'
   396  00FBBD  4F                 	db	79	;'O'
   397  00FBBE  47                 	db	71	;'G'
   398  00FBBF  20                 	db	32
   399  00FBC0  25                 	db	37
   400  00FBC1  32                 	db	50	;'2'
   401  00FBC2  64                 	db	100	;'d'
   402  00FBC3  20                 	db	32
   403  00FBC4  48                 	db	72	;'H'
   404  00FBC5  45                 	db	69	;'E'
   405  00FBC6  52                 	db	82	;'R'
   406  00FBC7  45                 	db	69	;'E'
   407  00FBC8  2D                 	db	45
   408  00FBC9  2D                 	db	45
   409  00FBCA  00                 	db	0
   410  00FBCB                     STR_1:
   411  00FBCB  52                 	db	82	;'R'
   412  00FBCC  45                 	db	69	;'E'
   413  00FBCD  53                 	db	83	;'S'
   414  00FBCE  55                 	db	85	;'U'
   415  00FBCF  4C                 	db	76	;'L'
   416  00FBD0  54                 	db	84	;'T'
   417  00FBD1  53                 	db	83	;'S'
   418  00FBD2  20                 	db	32
   419  00FBD3  49                 	db	73	;'I'
   420  00FBD4  4E                 	db	78	;'N'
   421  00FBD5  20                 	db	32
   422  00FBD6  4C                 	db	76	;'L'
   423  00FBD7  4F                 	db	79	;'O'
   424  00FBD8  47                 	db	71	;'G'
   425  00FBD9  20                 	db	32
   426  00FBDA  25                 	db	37
   427  00FBDB  64                 	db	100	;'d'
   428  00FBDC  00                 	db	0
   429  00FBDD                     STR_98:
   430  00FBDD  4D                 	db	77	;'M'
   431  00FBDE  49                 	db	73	;'I'
   432  00FBDF  44                 	db	68	;'D'
   433  00FBE0  20                 	db	32
   434  00FBE1  2D                 	db	45
   435  00FBE2  2D                 	db	45
   436  00FBE3  20                 	db	32
   437  00FBE4  32                 	db	50	;'2'
   438  00FBE5  73                 	db	115	;'s'
   439  00FBE6  20                 	db	32
   440  00FBE7  20                 	db	32
   441  00FBE8  20                 	db	32
   442  00FBE9  20                 	db	32
   443  00FBEA  20                 	db	32
   444  00FBEB  20                 	db	32
   445  00FBEC  20                 	db	32
   446  00FBED  00                 	db	0
   447  00FBEE                     STR_101:
   448  00FBEE  44                 	db	68	;'D'
   449  00FBEF  52                 	db	82	;'R'
   450  00FBF0  4F                 	db	79	;'O'
   451  00FBF1  50                 	db	80	;'P'
   452  00FBF2  20                 	db	32
   453  00FBF3  2D                 	db	45
   454  00FBF4  2D                 	db	45
   455  00FBF5  20                 	db	32
   456  00FBF6  32                 	db	50	;'2'
   457  00FBF7  73                 	db	115	;'s'
   458  00FBF8  20                 	db	32
   459  00FBF9  20                 	db	32
   460  00FBFA  20                 	db	32
   461  00FBFB  20                 	db	32
   462  00FBFC  20                 	db	32
   463  00FBFD  20                 	db	32
   464  00FBFE  00                 	db	0
   465  00FBFF                     STR_95:
   466  00FBFF  4C                 	db	76	;'L'
   467  00FC00  45                 	db	69	;'E'
   468  00FC01  46                 	db	70	;'F'
   469  00FC02  54                 	db	84	;'T'
   470  00FC03  20                 	db	32
   471  00FC04  2D                 	db	45
   472  00FC05  2D                 	db	45
   473  00FC06  20                 	db	32
   474  00FC07  32                 	db	50	;'2'
   475  00FC08  73                 	db	115	;'s'
   476  00FC09  20                 	db	32
   477  00FC0A  20                 	db	32
   478  00FC0B  20                 	db	32
   479  00FC0C  20                 	db	32
   480  00FC0D  20                 	db	32
   481  00FC0E  20                 	db	32
   482  00FC0F  00                 	db	0
   483  00FC10                     STR_100:
   484  00FC10  4C                 	db	76	;'L'
   485  00FC11  45                 	db	69	;'E'
   486  00FC12  56                 	db	86	;'V'
   487  00FC13  45                 	db	69	;'E'
   488  00FC14  4C                 	db	76	;'L'
   489  00FC15  20                 	db	32
   490  00FC16  2D                 	db	45
   491  00FC17  2D                 	db	45
   492  00FC18  20                 	db	32
   493  00FC19  32                 	db	50	;'2'
   494  00FC1A  73                 	db	115	;'s'
   495  00FC1B  20                 	db	32
   496  00FC1C  20                 	db	32
   497  00FC1D  20                 	db	32
   498  00FC1E  20                 	db	32
   499  00FC1F  20                 	db	32
   500  00FC20  00                 	db	0
   501  00FC21                     STR_94:
   502  00FC21  52                 	db	82	;'R'
   503  00FC22  49                 	db	73	;'I'
   504  00FC23  47                 	db	71	;'G'
   505  00FC24  48                 	db	72	;'H'
   506  00FC25  54                 	db	84	;'T'
   507  00FC26  20                 	db	32
   508  00FC27  2D                 	db	45
   509  00FC28  2D                 	db	45
   510  00FC29  20                 	db	32
   511  00FC2A  32                 	db	50	;'2'
   512  00FC2B  73                 	db	115	;'s'
   513  00FC2C  20                 	db	32
   514  00FC2D  20                 	db	32
   515  00FC2E  20                 	db	32
   516  00FC2F  20                 	db	32
   517  00FC30  20                 	db	32
   518  00FC31  00                 	db	0
   519  00FC32                     STR_93:
   520  00FC32  4D                 	db	77	;'M'
   521  00FC33  49                 	db	73	;'I'
   522  00FC34  44                 	db	68	;'D'
   523  00FC35  44                 	db	68	;'D'
   524  00FC36  4C                 	db	76	;'L'
   525  00FC37  45                 	db	69	;'E'
   526  00FC38  20                 	db	32
   527  00FC39  2D                 	db	45
   528  00FC3A  2D                 	db	45
   529  00FC3B  20                 	db	32
   530  00FC3C  32                 	db	50	;'2'
   531  00FC3D  73                 	db	115	;'s'
   532  00FC3E  20                 	db	32
   533  00FC3F  20                 	db	32
   534  00FC40  20                 	db	32
   535  00FC41  20                 	db	32
   536  00FC42  00                 	db	0
   537  00FC43                     STR_111:
   538  00FC43  44                 	db	68	;'D'
   539  00FC44  20                 	db	32
   540  00FC45  57                 	db	87	;'W'
   541  00FC46  49                 	db	73	;'I'
   542  00FC47  4C                 	db	76	;'L'
   543  00FC48  4C                 	db	76	;'L'
   544  00FC49  20                 	db	32
   545  00FC4A  52                 	db	82	;'R'
   546  00FC4B  45                 	db	69	;'E'
   547  00FC4C  54                 	db	84	;'T'
   548  00FC4D  55                 	db	85	;'U'
   549  00FC4E  52                 	db	82	;'R'
   550  00FC4F  4E                 	db	78	;'N'
   551  00FC50  20                 	db	32
   552  00FC51  20                 	db	32
   553  00FC52  20                 	db	32
   554  00FC53  00                 	db	0
   555  00FC54                     STR_96:
   556  00FC54  4D                 	db	77	;'M'
   557  00FC55  49                 	db	73	;'I'
   558  00FC56  44                 	db	68	;'D'
   559  00FC57  2D                 	db	45
   560  00FC58  4C                 	db	76	;'L'
   561  00FC59  45                 	db	69	;'E'
   562  00FC5A  46                 	db	70	;'F'
   563  00FC5B  54                 	db	84	;'T'
   564  00FC5C  20                 	db	32
   565  00FC5D  2D                 	db	45
   566  00FC5E  2D                 	db	45
   567  00FC5F  20                 	db	32
   568  00FC60  32                 	db	50	;'2'
   569  00FC61  73                 	db	115	;'s'
   570  00FC62  20                 	db	32
   571  00FC63  20                 	db	32
   572  00FC64  00                 	db	0
   573  00FC65                     STR_97:
   574  00FC65  4D                 	db	77	;'M'
   575  00FC66  49                 	db	73	;'I'
   576  00FC67  44                 	db	68	;'D'
   577  00FC68  2D                 	db	45
   578  00FC69  52                 	db	82	;'R'
   579  00FC6A  49                 	db	73	;'I'
   580  00FC6B  47                 	db	71	;'G'
   581  00FC6C  48                 	db	72	;'H'
   582  00FC6D  54                 	db	84	;'T'
   583  00FC6E  20                 	db	32
   584  00FC6F  2D                 	db	45
   585  00FC70  2D                 	db	45
   586  00FC71  20                 	db	32
   587  00FC72  32                 	db	50	;'2'
   588  00FC73  73                 	db	115	;'s'
   589  00FC74  20                 	db	32
   590  00FC75  00                 	db	0
   591  00FC76                     STR_112:
   592  00FC76  45                 	db	69	;'E'
   593  00FC77  4C                 	db	76	;'L'
   594  00FC78  53                 	db	83	;'S'
   595  00FC79  45                 	db	69	;'E'
   596  00FC7A  20                 	db	32
   597  00FC7B  54                 	db	84	;'T'
   598  00FC7C  4F                 	db	79	;'O'
   599  00FC7D  47                 	db	71	;'G'
   600  00FC7E  47                 	db	71	;'G'
   601  00FC7F  4C                 	db	76	;'L'
   602  00FC80  45                 	db	69	;'E'
   603  00FC81  53                 	db	83	;'S'
   604  00FC82  20                 	db	32
   605  00FC83  52                 	db	82	;'R'
   606  00FC84  41                 	db	65	;'A'
   607  00FC85  35                 	db	53	;'5'
   608  00FC86  00                 	db	0
   609  00FC87                     STR_72:
   610  00FC87  41                 	db	65	;'A'
   611  00FC88  4C                 	db	76	;'L'
   612  00FC89  47                 	db	71	;'G'
   613  00FC8A  31                 	db	49	;'1'
   614  00FC8B  3A                 	db	58	;':'
   615  00FC8C  20                 	db	32
   616  00FC8D  39                 	db	57	;'9'
   617  00FC8E  20                 	db	32
   618  00FC8F  50                 	db	80	;'P'
   619  00FC90  4F                 	db	79	;'O'
   620  00FC91  50                 	db	80	;'P'
   621  00FC92  4E                 	db	78	;'N'
   622  00FC93  4F                 	db	79	;'O'
   623  00FC94  54                 	db	84	;'T'
   624  00FC95  41                 	db	65	;'A'
   625  00FC96  42                 	db	66	;'B'
   626  00FC97  00                 	db	0
   627  00FC98                     STR_68:
   628  00FC98  31                 	db	49	;'1'
   629  00FC99  2E                 	db	46
   630  00FC9A  41                 	db	65	;'A'
   631  00FC9B  4C                 	db	76	;'L'
   632  00FC9C  47                 	db	71	;'G'
   633  00FC9D  7C                 	db	124
   634  00FC9E  32                 	db	50	;'2'
   635  00FC9F  2E                 	db	46
   636  00FCA0  53                 	db	83	;'S'
   637  00FCA1  4E                 	db	78	;'N'
   638  00FCA2  52                 	db	82	;'R'
   639  00FCA3  7C                 	db	124
   640  00FCA4  33                 	db	51	;'3'
   641  00FCA5  2E                 	db	46
   642  00FCA6  41                 	db	65	;'A'
   643  00FCA7  43                 	db	67	;'C'
   644  00FCA8  00                 	db	0
   645  00FCA9                     STR_88:
   646  00FCA9  54                 	db	84	;'T'
   647  00FCAA  53                 	db	83	;'S'
   648  00FCAB  54                 	db	84	;'T'
   649  00FCAC  3A                 	db	58	;':'
   650  00FCAD  20                 	db	32
   651  00FCAE  43                 	db	67	;'C'
   652  00FCAF  4F                 	db	79	;'O'
   653  00FCB0  4E                 	db	78	;'N'
   654  00FCB1  44                 	db	68	;'D'
   655  00FCB2  20                 	db	32
   656  00FCB3  53                 	db	83	;'S'
   657  00FCB4  4F                 	db	79	;'O'
   658  00FCB5  4C                 	db	76	;'L'
   659  00FCB6  4E                 	db	78	;'N'
   660  00FCB7  27                 	db	39
   661  00FCB8  44                 	db	68	;'D'
   662  00FCB9  00                 	db	0
   663  00FCBA                     STR_90:
   664  00FCBA  54                 	db	84	;'T'
   665  00FCBB  53                 	db	83	;'S'
   666  00FCBC  54                 	db	84	;'T'
   667  00FCBD  3A                 	db	58	;':'
   668  00FCBE  20                 	db	32
   669  00FCBF  50                 	db	80	;'P'
   670  00FCC0  55                 	db	85	;'U'
   671  00FCC1  53                 	db	83	;'S'
   672  00FCC2  48                 	db	72	;'H'
   673  00FCC3  20                 	db	32
   674  00FCC4  53                 	db	83	;'S'
   675  00FCC5  4F                 	db	79	;'O'
   676  00FCC6  4C                 	db	76	;'L'
   677  00FCC7  4E                 	db	78	;'N'
   678  00FCC8  27                 	db	39
   679  00FCC9  44                 	db	68	;'D'
   680  00FCCA  00                 	db	0
   681  00FCCB                     STR_69:
   682  00FCCB  34                 	db	52	;'4'
   683  00FCCC  2E                 	db	46
   684  00FCCD  48                 	db	72	;'H'
   685  00FCCE  49                 	db	73	;'I'
   686  00FCCF  7C                 	db	124
   687  00FCD0  35                 	db	53	;'5'
   688  00FCD1  2E                 	db	46
   689  00FCD2  54                 	db	84	;'T'
   690  00FCD3  4F                 	db	79	;'O'
   691  00FCD4  47                 	db	71	;'G'
   692  00FCD5  7C                 	db	124
   693  00FCD6  36                 	db	54	;'6'
   694  00FCD7  2E                 	db	46
   695  00FCD8  45                 	db	69	;'E'
   696  00FCD9  45                 	db	69	;'E'
   697  00FCDA  50                 	db	80	;'P'
   698  00FCDB  00                 	db	0
   699  00FCDC                     STR_106:
   700  00FCDC  54                 	db	84	;'T'
   701  00FCDD  53                 	db	83	;'S'
   702  00FCDE  54                 	db	84	;'T'
   703  00FCDF  3A                 	db	58	;':'
   704  00FCE0  20                 	db	32
   705  00FCE1  42                 	db	66	;'B'
   706  00FCE2  4F                 	db	79	;'O'
   707  00FCE3  54                 	db	84	;'T'
   708  00FCE4  48                 	db	72	;'H'
   709  00FCE5  20                 	db	32
   710  00FCE6  53                 	db	83	;'S'
   711  00FCE7  45                 	db	69	;'E'
   712  00FCE8  52                 	db	82	;'R'
   713  00FCE9  56                 	db	86	;'V'
   714  00FCEA  4F                 	db	79	;'O'
   715  00FCEB  53                 	db	83	;'S'
   716  00FCEC  00                 	db	0
   717  00FCED                     STR_41:
   718  00FCED  4C                 	db	76	;'L'
   719  00FCEE  4F                 	db	79	;'O'
   720  00FCEF  47                 	db	71	;'G'
   721  00FCF0  20                 	db	32
   722  00FCF1  31                 	db	49	;'1'
   723  00FCF2  20                 	db	32
   724  00FCF3  20                 	db	32
   725  00FCF4  20                 	db	32
   726  00FCF5  20                 	db	32
   727  00FCF6  20                 	db	32
   728  00FCF7  20                 	db	32
   729  00FCF8  20                 	db	32
   730  00FCF9  20                 	db	32
   731  00FCFA  20                 	db	32
   732  00FCFB  20                 	db	32
   733  00FCFC  20                 	db	32
   734  00FCFD  00                 	db	0
   735  00FCFE                     STR_40:
   736  00FCFE  4C                 	db	76	;'L'
   737  00FCFF  4F                 	db	79	;'O'
   738  00FD00  47                 	db	71	;'G'
   739  00FD01  20                 	db	32
   740  00FD02  32                 	db	50	;'2'
   741  00FD03  20                 	db	32
   742  00FD04  20                 	db	32
   743  00FD05  20                 	db	32
   744  00FD06  20                 	db	32
   745  00FD07  20                 	db	32
   746  00FD08  20                 	db	32
   747  00FD09  20                 	db	32
   748  00FD0A  20                 	db	32
   749  00FD0B  20                 	db	32
   750  00FD0C  20                 	db	32
   751  00FD0D  20                 	db	32
   752  00FD0E  00                 	db	0
   753  00FD0F                     STR_44:
   754  00FD0F  4C                 	db	76	;'L'
   755  00FD10  4F                 	db	79	;'O'
   756  00FD11  47                 	db	71	;'G'
   757  00FD12  20                 	db	32
   758  00FD13  33                 	db	51	;'3'
   759  00FD14  20                 	db	32
   760  00FD15  20                 	db	32
   761  00FD16  20                 	db	32
   762  00FD17  20                 	db	32
   763  00FD18  20                 	db	32
   764  00FD19  20                 	db	32
   765  00FD1A  20                 	db	32
   766  00FD1B  20                 	db	32
   767  00FD1C  20                 	db	32
   768  00FD1D  20                 	db	32
   769  00FD1E  20                 	db	32
   770  00FD1F  00                 	db	0
   771  00FD20                     STR_48:
   772  00FD20  4C                 	db	76	;'L'
   773  00FD21  4F                 	db	79	;'O'
   774  00FD22  47                 	db	71	;'G'
   775  00FD23  20                 	db	32
   776  00FD24  34                 	db	52	;'4'
   777  00FD25  20                 	db	32
   778  00FD26  20                 	db	32
   779  00FD27  20                 	db	32
   780  00FD28  20                 	db	32
   781  00FD29  20                 	db	32
   782  00FD2A  20                 	db	32
   783  00FD2B  20                 	db	32
   784  00FD2C  20                 	db	32
   785  00FD2D  20                 	db	32
   786  00FD2E  20                 	db	32
   787  00FD2F  20                 	db	32
   788  00FD30  00                 	db	0
   789  00FD31                     STR_36:
   790  00FD31  33                 	db	51	;'3'
   791  00FD32  2E                 	db	46
   792  00FD33  20                 	db	32
   793  00FD34  4C                 	db	76	;'L'
   794  00FD35  4F                 	db	79	;'O'
   795  00FD36  47                 	db	71	;'G'
   796  00FD37  53                 	db	83	;'S'
   797  00FD38  20                 	db	32
   798  00FD39  20                 	db	32
   799  00FD3A  20                 	db	32
   800  00FD3B  20                 	db	32
   801  00FD3C  20                 	db	32
   802  00FD3D  20                 	db	32
   803  00FD3E  20                 	db	32
   804  00FD3F  20                 	db	32
   805  00FD40  20                 	db	32
   806  00FD41  00                 	db	0
   807  00FD42                     STR_32:
   808  00FD42  32                 	db	50	;'2'
   809  00FD43  2E                 	db	46
   810  00FD44  20                 	db	32
   811  00FD45  53                 	db	83	;'S'
   812  00FD46  4F                 	db	79	;'O'
   813  00FD47  52                 	db	82	;'R'
   814  00FD48  54                 	db	84	;'T'
   815  00FD49  20                 	db	32
   816  00FD4A  20                 	db	32
   817  00FD4B  20                 	db	32
   818  00FD4C  20                 	db	32
   819  00FD4D  20                 	db	32
   820  00FD4E  20                 	db	32
   821  00FD4F  20                 	db	32
   822  00FD50  20                 	db	32
   823  00FD51  20                 	db	32
   824  00FD52  00                 	db	0
   825  00FD53                     STR_33:
   826  00FD53  31                 	db	49	;'1'
   827  00FD54  2E                 	db	46
   828  00FD55  20                 	db	32
   829  00FD56  44                 	db	68	;'D'
   830  00FD57  41                 	db	65	;'A'
   831  00FD58  54                 	db	84	;'T'
   832  00FD59  45                 	db	69	;'E'
   833  00FD5A  2F                 	db	47
   834  00FD5B  54                 	db	84	;'T'
   835  00FD5C  49                 	db	73	;'I'
   836  00FD5D  4D                 	db	77	;'M'
   837  00FD5E  45                 	db	69	;'E'
   838  00FD5F  20                 	db	32
   839  00FD60  20                 	db	32
   840  00FD61  20                 	db	32
   841  00FD62  20                 	db	32
   842  00FD63  00                 	db	0
   843  00FD64                     STR_24:
   844  00FD64  20                 	db	32
   845  00FD65  2D                 	db	45
   846  00FD66  2D                 	db	45
   847  00FD67  20                 	db	32
   848  00FD68  50                 	db	80	;'P'
   849  00FD69  4F                 	db	79	;'O'
   850  00FD6A  50                 	db	80	;'P'
   851  00FD6B  20                 	db	32
   852  00FD6C  20                 	db	32
   853  00FD6D  43                 	db	67	;'C'
   854  00FD6E  41                 	db	65	;'A'
   855  00FD6F  4E                 	db	78	;'N'
   856  00FD70  20                 	db	32
   857  00FD71  2D                 	db	45
   858  00FD72  2D                 	db	45
   859  00FD73  20                 	db	32
   860  00FD74  00                 	db	0
   861  00FD75                     STR_26:
   862  00FD75  20                 	db	32
   863  00FD76  2D                 	db	45
   864  00FD77  2D                 	db	45
   865  00FD78  20                 	db	32
   866  00FD79  53                 	db	83	;'S'
   867  00FD7A  4F                 	db	79	;'O'
   868  00FD7B  55                 	db	85	;'U'
   869  00FD7C  50                 	db	80	;'P'
   870  00FD7D  20                 	db	32
   871  00FD7E  43                 	db	67	;'C'
   872  00FD7F  41                 	db	65	;'A'
   873  00FD80  4E                 	db	78	;'N'
   874  00FD81  20                 	db	32
   875  00FD82  2D                 	db	45
   876  00FD83  2D                 	db	45
   877  00FD84  20                 	db	32
   878  00FD85  00                 	db	0
   879  00FD86                     STR_28:
   880  00FD86  2D                 	db	45
   881  00FD87  2D                 	db	45
   882  00FD88  20                 	db	32
   883  00FD89  54                 	db	84	;'T'
   884  00FD8A  4F                 	db	79	;'O'
   885  00FD8B  54                 	db	84	;'T'
   886  00FD8C  41                 	db	65	;'A'
   887  00FD8D  4C                 	db	76	;'L'
   888  00FD8E  20                 	db	32
   889  00FD8F  43                 	db	67	;'C'
   890  00FD90  41                 	db	65	;'A'
   891  00FD91  4E                 	db	78	;'N'
   892  00FD92  53                 	db	83	;'S'
   893  00FD93  20                 	db	32
   894  00FD94  2D                 	db	45
   895  00FD95  2D                 	db	45
   896  00FD96  00                 	db	0
   897  00FD97                     STR_39:
   898  00FD97  4C                 	db	76	;'L'
   899  00FD98  4F                 	db	79	;'O'
   900  00FD99  47                 	db	71	;'G'
   901  00FD9A  20                 	db	32
   902  00FD9B  31                 	db	49	;'1'
   903  00FD9C  20                 	db	32
   904  00FD9D  20                 	db	32
   905  00FD9E  20                 	db	32
   906  00FD9F  20                 	db	32
   907  00FDA0  20                 	db	32
   908  00FDA1  20                 	db	32
   909  00FDA2  20                 	db	32
   910  00FDA3  20                 	db	32
   911  00FDA4  20                 	db	32
   912  00FDA5  20                 	db	32
   913  00FDA6  3C                 	db	60	;'<'
   914  00FDA7  00                 	db	0
   915  00FDA8                     STR_42:
   916  00FDA8  4C                 	db	76	;'L'
   917  00FDA9  4F                 	db	79	;'O'
   918  00FDAA  47                 	db	71	;'G'
   919  00FDAB  20                 	db	32
   920  00FDAC  32                 	db	50	;'2'
   921  00FDAD  20                 	db	32
   922  00FDAE  20                 	db	32
   923  00FDAF  20                 	db	32
   924  00FDB0  20                 	db	32
   925  00FDB1  20                 	db	32
   926  00FDB2  20                 	db	32
   927  00FDB3  20                 	db	32
   928  00FDB4  20                 	db	32
   929  00FDB5  20                 	db	32
   930  00FDB6  20                 	db	32
   931  00FDB7  3C                 	db	60	;'<'
   932  00FDB8  00                 	db	0
   933  00FDB9                     STR_46:
   934  00FDB9  4C                 	db	76	;'L'
   935  00FDBA  4F                 	db	79	;'O'
   936  00FDBB  47                 	db	71	;'G'
   937  00FDBC  20                 	db	32
   938  00FDBD  33                 	db	51	;'3'
   939  00FDBE  20                 	db	32
   940  00FDBF  20                 	db	32
   941  00FDC0  20                 	db	32
   942  00FDC1  20                 	db	32
   943  00FDC2  20                 	db	32
   944  00FDC3  20                 	db	32
   945  00FDC4  20                 	db	32
   946  00FDC5  20                 	db	32
   947  00FDC6  20                 	db	32
   948  00FDC7  20                 	db	32
   949  00FDC8  3C                 	db	60	;'<'
   950  00FDC9  00                 	db	0
   951  00FDCA                     STR_50:
   952  00FDCA  4C                 	db	76	;'L'
   953  00FDCB  4F                 	db	79	;'O'
   954  00FDCC  47                 	db	71	;'G'
   955  00FDCD  20                 	db	32
   956  00FDCE  34                 	db	52	;'4'
   957  00FDCF  20                 	db	32
   958  00FDD0  20                 	db	32
   959  00FDD1  20                 	db	32
   960  00FDD2  20                 	db	32
   961  00FDD3  20                 	db	32
   962  00FDD4  20                 	db	32
   963  00FDD5  20                 	db	32
   964  00FDD6  20                 	db	32
   965  00FDD7  20                 	db	32
   966  00FDD8  20                 	db	32
   967  00FDD9  3C                 	db	60	;'<'
   968  00FDDA  00                 	db	0
   969  00FDDB                     STR_38:
   970  00FDDB  33                 	db	51	;'3'
   971  00FDDC  2E                 	db	46
   972  00FDDD  20                 	db	32
   973  00FDDE  4C                 	db	76	;'L'
   974  00FDDF  4F                 	db	79	;'O'
   975  00FDE0  47                 	db	71	;'G'
   976  00FDE1  53                 	db	83	;'S'
   977  00FDE2  20                 	db	32
   978  00FDE3  20                 	db	32
   979  00FDE4  20                 	db	32
   980  00FDE5  20                 	db	32
   981  00FDE6  20                 	db	32
   982  00FDE7  20                 	db	32
   983  00FDE8  20                 	db	32
   984  00FDE9  20                 	db	32
   985  00FDEA  3C                 	db	60	;'<'
   986  00FDEB  00                 	db	0
   987  00FDEC                     STR_34:
   988  00FDEC  32                 	db	50	;'2'
   989  00FDED  2E                 	db	46
   990  00FDEE  20                 	db	32
   991  00FDEF  53                 	db	83	;'S'
   992  00FDF0  4F                 	db	79	;'O'
   993  00FDF1  52                 	db	82	;'R'
   994  00FDF2  54                 	db	84	;'T'
   995  00FDF3  20                 	db	32
   996  00FDF4  20                 	db	32
   997  00FDF5  20                 	db	32
   998  00FDF6  20                 	db	32
   999  00FDF7  20                 	db	32
  1000  00FDF8  20                 	db	32
  1001  00FDF9  20                 	db	32
  1002  00FDFA  20                 	db	32
  1003  00FDFB  3C                 	db	60	;'<'
  1004  00FDFC  00                 	db	0
  1005  00FDFD                     STR_31:
  1006  00FDFD  31                 	db	49	;'1'
  1007  00FDFE  2E                 	db	46
  1008  00FDFF  20                 	db	32
  1009  00FE00  44                 	db	68	;'D'
  1010  00FE01  41                 	db	65	;'A'
  1011  00FE02  54                 	db	84	;'T'
  1012  00FE03  45                 	db	69	;'E'
  1013  00FE04  2F                 	db	47
  1014  00FE05  54                 	db	84	;'T'
  1015  00FE06  49                 	db	73	;'I'
  1016  00FE07  4D                 	db	77	;'M'
  1017  00FE08  45                 	db	69	;'E'
  1018  00FE09  20                 	db	32
  1019  00FE0A  20                 	db	32
  1020  00FE0B  20                 	db	32
  1021  00FE0C  3C                 	db	60	;'<'
  1022  00FE0D  00                 	db	0
  1023  00FE0E                     STR_6:
  1024  00FE0E  50                 	db	80	;'P'
  1025  00FE0F  41                 	db	65	;'A'
  1026  00FE10  55                 	db	85	;'U'
  1027  00FE11  53                 	db	83	;'S'
  1028  00FE12  45                 	db	69	;'E'
  1029  00FE13  20                 	db	32
  1030  00FE14  3C                 	db	60	;'<'
  1031  00FE15  20                 	db	32
  1032  00FE16  7C                 	db	124
  1033  00FE17  20                 	db	32
  1034  00FE18  42                 	db	66	;'B'
  1035  00FE19  41                 	db	65	;'A'
  1036  00FE1A  43                 	db	67	;'C'
  1037  00FE1B  4B                 	db	75	;'K'
  1038  00FE1C  20                 	db	32
  1039  00FE1D  3E                 	db	62	;'>'
  1040  00FE1E  00                 	db	0
  1041  00FE1F                     STR_30:
  1042  00FE1F  50                 	db	80	;'P'
  1043  00FE20  55                 	db	85	;'U'
  1044  00FE21  53                 	db	83	;'S'
  1045  00FE22  48                 	db	72	;'H'
  1046  00FE23  20                 	db	32
  1047  00FE24  54                 	db	84	;'T'
  1048  00FE25  4F                 	db	79	;'O'
  1049  00FE26  20                 	db	32
  1050  00FE27  43                 	db	67	;'C'
  1051  00FE28  4F                 	db	79	;'O'
  1052  00FE29  4E                 	db	78	;'N'
  1053  00FE2A  54                 	db	84	;'T'
  1054  00FE2B  49                 	db	73	;'I'
  1055  00FE2C  4E                 	db	78	;'N'
  1056  00FE2D  55                 	db	85	;'U'
  1057  00FE2E  45                 	db	69	;'E'
  1058  00FE2F  00                 	db	0
  1059  00FE30                     STR_83:
  1060  00FE30  4D                 	db	77	;'M'
  1061  00FE31  41                 	db	65	;'A'
  1062  00FE32  47                 	db	71	;'G'
  1063  00FE33  5F                 	db	95	;'_'
  1064  00FE34  73                 	db	115	;'s'
  1065  00FE35  69                 	db	105	;'i'
  1066  00FE36  67                 	db	103	;'g'
  1067  00FE37  6E                 	db	110	;'n'
  1068  00FE38  61                 	db	97	;'a'
  1069  00FE39  6C                 	db	108	;'l'
  1070  00FE3A  3A                 	db	58	;':'
  1071  00FE3B  20                 	db	32
  1072  00FE3C  25                 	db	37
  1073  00FE3D  64                 	db	100	;'d'
  1074  00FE3E  20                 	db	32
  1075  00FE3F  00                 	db	0
  1076  00FE40                     STR_99:
  1077  00FE40  54                 	db	84	;'T'
  1078  00FE41  53                 	db	83	;'S'
  1079  00FE42  54                 	db	84	;'T'
  1080  00FE43  3A                 	db	58	;':'
  1081  00FE44  20                 	db	32
  1082  00FE45  54                 	db	84	;'T'
  1083  00FE46  49                 	db	73	;'I'
  1084  00FE47  4C                 	db	76	;'L'
  1085  00FE48  54                 	db	84	;'T'
  1086  00FE49  20                 	db	32
  1087  00FE4A  53                 	db	83	;'S'
  1088  00FE4B  45                 	db	69	;'E'
  1089  00FE4C  52                 	db	82	;'R'
  1090  00FE4D  56                 	db	86	;'V'
  1091  00FE4E  4F                 	db	79	;'O'
  1092  00FE4F  00                 	db	0
  1093  00FE50                     STR_4:
  1094  00FE50  44                 	db	68	;'D'
  1095  00FE51  49                 	db	73	;'I'
  1096  00FE52  44                 	db	68	;'D'
  1097  00FE53  4E                 	db	78	;'N'
  1098  00FE54  27                 	db	39
  1099  00FE55  54                 	db	84	;'T'
  1100  00FE56  20                 	db	32
  1101  00FE57  43                 	db	67	;'C'
  1102  00FE58  4F                 	db	79	;'O'
  1103  00FE59  4D                 	db	77	;'M'
  1104  00FE5A  50                 	db	80	;'P'
  1105  00FE5B  4C                 	db	76	;'L'
  1106  00FE5C  45                 	db	69	;'E'
  1107  00FE5D  54                 	db	84	;'T'
  1108  00FE5E  45                 	db	69	;'E'
  1109  00FE5F  00                 	db	0
  1110  00FE60                     STR_80:
  1111  00FE60  49                 	db	73	;'I'
  1112  00FE61  52                 	db	82	;'R'
  1113  00FE62  5F                 	db	95	;'_'
  1114  00FE63  73                 	db	115	;'s'
  1115  00FE64  69                 	db	105	;'i'
  1116  00FE65  67                 	db	103	;'g'
  1117  00FE66  6E                 	db	110	;'n'
  1118  00FE67  61                 	db	97	;'a'
  1119  00FE68  6C                 	db	108	;'l'
  1120  00FE69  3A                 	db	58	;':'
  1121  00FE6A  20                 	db	32
  1122  00FE6B  25                 	db	37
  1123  00FE6C  64                 	db	100	;'d'
  1124  00FE6D  20                 	db	32
  1125  00FE6E  00                 	db	0
  1126  00FE6F                     STR_105:
  1127  00FE6F  43                 	db	67	;'C'
  1128  00FE70  41                 	db	65	;'A'
  1129  00FE71  4D                 	db	77	;'M'
  1130  00FE72  20                 	db	32
  1131  00FE73  44                 	db	68	;'D'
  1132  00FE74  57                 	db	87	;'W'
  1133  00FE75  4E                 	db	78	;'N'
  1134  00FE76  20                 	db	32
  1135  00FE77  7C                 	db	124
  1136  00FE78  52                 	db	82	;'R'
  1137  00FE79  43                 	db	67	;'C'
  1138  00FE7A  30                 	db	48	;'0'
  1139  00FE7B  3D                 	db	61	;'='
  1140  00FE7C  30                 	db	48	;'0'
  1141  00FE7D  00                 	db	0
  1142  00FE7E                     STR_104:
  1143  00FE7E  43                 	db	67	;'C'
  1144  00FE7F  41                 	db	65	;'A'
  1145  00FE80  4D                 	db	77	;'M'
  1146  00FE81  20                 	db	32
  1147  00FE82  55                 	db	85	;'U'
  1148  00FE83  50                 	db	80	;'P'
  1149  00FE84  20                 	db	32
  1150  00FE85  20                 	db	32
  1151  00FE86  7C                 	db	124
  1152  00FE87  52                 	db	82	;'R'
  1153  00FE88  43                 	db	67	;'C'
  1154  00FE89  30                 	db	48	;'0'
  1155  00FE8A  3D                 	db	61	;'='
  1156  00FE8B  31                 	db	49	;'1'
  1157  00FE8C  00                 	db	0
  1158  00FE8D                     STR_82:
  1159  00FE8D  54                 	db	84	;'T'
  1160  00FE8E  53                 	db	83	;'S'
  1161  00FE8F  54                 	db	84	;'T'
  1162  00FE90  3A                 	db	58	;':'
  1163  00FE91  20                 	db	32
  1164  00FE92  4D                 	db	77	;'M'
  1165  00FE93  41                 	db	65	;'A'
  1166  00FE94  47                 	db	71	;'G'
  1167  00FE95  4E                 	db	78	;'N'
  1168  00FE96  45                 	db	69	;'E'
  1169  00FE97  54                 	db	84	;'T'
  1170  00FE98  49                 	db	73	;'I'
  1171  00FE99  53                 	db	83	;'S'
  1172  00FE9A  4D                 	db	77	;'M'
  1173  00FE9B  00                 	db	0
  1174  00FE9C                     STR_103:
  1175  00FE9C  54                 	db	84	;'T'
  1176  00FE9D  53                 	db	83	;'S'
  1177  00FE9E  54                 	db	84	;'T'
  1178  00FE9F  3A                 	db	58	;':'
  1179  00FEA0  20                 	db	32
  1180  00FEA1  43                 	db	67	;'C'
  1181  00FEA2  41                 	db	65	;'A'
  1182  00FEA3  4D                 	db	77	;'M'
  1183  00FEA4  20                 	db	32
  1184  00FEA5  53                 	db	83	;'S'
  1185  00FEA6  45                 	db	69	;'E'
  1186  00FEA7  52                 	db	82	;'R'
  1187  00FEA8  56                 	db	86	;'V'
  1188  00FEA9  4F                 	db	79	;'O'
  1189  00FEAA  00                 	db	0
  1190  00FEAB                     STR_92:
  1191  00FEAB  54                 	db	84	;'T'
  1192  00FEAC  53                 	db	83	;'S'
  1193  00FEAD  54                 	db	84	;'T'
  1194  00FEAE  3A                 	db	58	;':'
  1195  00FEAF  20                 	db	32
  1196  00FEB0  50                 	db	80	;'P'
  1197  00FEB1  41                 	db	65	;'A'
  1198  00FEB2  4E                 	db	78	;'N'
  1199  00FEB3  20                 	db	32
  1200  00FEB4  53                 	db	83	;'S'
  1201  00FEB5  45                 	db	69	;'E'
  1202  00FEB6  52                 	db	82	;'R'
  1203  00FEB7  56                 	db	86	;'V'
  1204  00FEB8  4F                 	db	79	;'O'
  1205  00FEB9  00                 	db	0
  1206  00FEBA                     STR_75:
  1207  00FEBA  41                 	db	65	;'A'
  1208  00FEBB  4C                 	db	76	;'L'
  1209  00FEBC  47                 	db	71	;'G'
  1210  00FEBD  34                 	db	52	;'4'
  1211  00FEBE  3A                 	db	58	;':'
  1212  00FEBF  20                 	db	32
  1213  00FEC0  41                 	db	65	;'A'
  1214  00FEC1  4C                 	db	76	;'L'
  1215  00FEC2  4C                 	db	76	;'L'
  1216  00FEC3  20                 	db	32
  1217  00FEC4  43                 	db	67	;'C'
  1218  00FEC5  41                 	db	65	;'A'
  1219  00FEC6  4E                 	db	78	;'N'
  1220  00FEC7  53                 	db	83	;'S'
  1221  00FEC8  00                 	db	0
  1222  00FEC9                     STR_86:
  1223  00FEC9  54                 	db	84	;'T'
  1224  00FECA  53                 	db	83	;'S'
  1225  00FECB  54                 	db	84	;'T'
  1226  00FECC  3A                 	db	58	;':'
  1227  00FECD  20                 	db	32
  1228  00FECE  44                 	db	68	;'D'
  1229  00FECF  43                 	db	67	;'C'
  1230  00FED0  20                 	db	32
  1231  00FED1  4D                 	db	77	;'M'
  1232  00FED2  4F                 	db	79	;'O'
  1233  00FED3  54                 	db	84	;'T'
  1234  00FED4  4F                 	db	79	;'O'
  1235  00FED5  52                 	db	82	;'R'
  1236  00FED6  53                 	db	83	;'S'
  1237  00FED7  00                 	db	0
  1238  00FED8                     STR_70:
  1239  00FED8  41                 	db	65	;'A'
  1240  00FED9  4C                 	db	76	;'L'
  1241  00FEDA  47                 	db	71	;'G'
  1242  00FEDB  4F                 	db	79	;'O'
  1243  00FEDC  52                 	db	82	;'R'
  1244  00FEDD  49                 	db	73	;'I'
  1245  00FEDE  54                 	db	84	;'T'
  1246  00FEDF  48                 	db	72	;'H'
  1247  00FEE0  4D                 	db	77	;'M'
  1248  00FEE1  20                 	db	32
  1249  00FEE2  54                 	db	84	;'T'
  1250  00FEE3  45                 	db	69	;'E'
  1251  00FEE4  53                 	db	83	;'S'
  1252  00FEE5  54                 	db	84	;'T'
  1253  00FEE6  00                 	db	0
  1254  00FEE7                     STR_87:
  1255  00FEE7  50                 	db	80	;'P'
  1256  00FEE8  49                 	db	73	;'I'
  1257  00FEE9  4E                 	db	78	;'N'
  1258  00FEEA  20                 	db	32
  1259  00FEEB  52                 	db	82	;'R'
  1260  00FEEC  41                 	db	65	;'A'
  1261  00FEED  35                 	db	53	;'5'
  1262  00FEEE  20                 	db	32
  1263  00FEEF  48                 	db	72	;'H'
  1264  00FEF0  49                 	db	73	;'I'
  1265  00FEF1  47                 	db	71	;'G'
  1266  00FEF2  48                 	db	72	;'H'
  1267  00FEF3  2E                 	db	46
  1268  00FEF4  00                 	db	0
  1269  00FEF5                     STR_73:
  1270  00FEF5  41                 	db	65	;'A'
  1271  00FEF6  4C                 	db	76	;'L'
  1272  00FEF7  47                 	db	71	;'G'
  1273  00FEF8  32                 	db	50	;'2'
  1274  00FEF9  3A                 	db	58	;':'
  1275  00FEFA  20                 	db	32
  1276  00FEFB  31                 	db	49	;'1'
  1277  00FEFC  32                 	db	50	;'2'
  1278  00FEFD  20                 	db	32
  1279  00FEFE  43                 	db	67	;'C'
  1280  00FEFF  41                 	db	65	;'A'
  1281  00FF00  4E                 	db	78	;'N'
  1282  00FF01  53                 	db	83	;'S'
  1283  00FF02  00                 	db	0
  1284  00FF03                     STR_76:
  1285  00FF03  41                 	db	65	;'A'
  1286  00FF04  4C                 	db	76	;'L'
  1287  00FF05  47                 	db	71	;'G'
  1288  00FF06  35                 	db	53	;'5'
  1289  00FF07  3A                 	db	58	;':'
  1290  00FF08  20                 	db	32
  1291  00FF09  4E                 	db	78	;'N'
  1292  00FF0A  4F                 	db	79	;'O'
  1293  00FF0B  20                 	db	32
  1294  00FF0C  43                 	db	67	;'C'
  1295  00FF0D  41                 	db	65	;'A'
  1296  00FF0E  4E                 	db	78	;'N'
  1297  00FF0F  53                 	db	83	;'S'
  1298  00FF10  00                 	db	0
  1299  00FF11                     STR_71:
  1300  00FF11  50                 	db	80	;'P'
  1301  00FF12  55                 	db	85	;'U'
  1302  00FF13  53                 	db	83	;'S'
  1303  00FF14  48                 	db	72	;'H'
  1304  00FF15  20                 	db	32
  1305  00FF16  54                 	db	84	;'T'
  1306  00FF17  4F                 	db	79	;'O'
  1307  00FF18  20                 	db	32
  1308  00FF19  53                 	db	83	;'S'
  1309  00FF1A  54                 	db	84	;'T'
  1310  00FF1B  41                 	db	65	;'A'
  1311  00FF1C  52                 	db	82	;'R'
  1312  00FF1D  54                 	db	84	;'T'
  1313  00FF1E  00                 	db	0
  1314  00FF1F                     STR_23:
  1315  00FF1F  25                 	db	37
  1316  00FF20  64                 	db	100	;'d'
  1317  00FF21  20                 	db	32
  1318  00FF22  4D                 	db	77	;'M'
  1319  00FF23  49                 	db	73	;'I'
  1320  00FF24  4E                 	db	78	;'N'
  1321  00FF25  20                 	db	32
  1322  00FF26  25                 	db	37
  1323  00FF27  64                 	db	100	;'d'
  1324  00FF28  20                 	db	32
  1325  00FF29  53                 	db	83	;'S'
  1326  00FF2A  45                 	db	69	;'E'
  1327  00FF2B  43                 	db	67	;'C'
  1328  00FF2C  00                 	db	0
  1329  00FF2D                     STR_2:
  1330  00FF2D  54                 	db	84	;'T'
  1331  00FF2E  49                 	db	73	;'I'
  1332  00FF2F  4D                 	db	77	;'M'
  1333  00FF30  45                 	db	69	;'E'
  1334  00FF31  3A                 	db	58	;':'
  1335  00FF32  20                 	db	32
  1336  00FF33  25                 	db	37
  1337  00FF34  64                 	db	100	;'d'
  1338  00FF35  3A                 	db	58	;':'
  1339  00FF36  25                 	db	37
  1340  00FF37  30                 	db	48	;'0'
  1341  00FF38  32                 	db	50	;'2'
  1342  00FF39  64                 	db	100	;'d'
  1343  00FF3A  00                 	db	0
  1344  00FF3B                     STR_79:
  1345  00FF3B  54                 	db	84	;'T'
  1346  00FF3C  53                 	db	83	;'S'
  1347  00FF3D  54                 	db	84	;'T'
  1348  00FF3E  3A                 	db	58	;':'
  1349  00FF3F  20                 	db	32
  1350  00FF40  49                 	db	73	;'I'
  1351  00FF41  52                 	db	82	;'R'
  1352  00FF42  20                 	db	32
  1353  00FF43  53                 	db	83	;'S'
  1354  00FF44  4E                 	db	78	;'N'
  1355  00FF45  53                 	db	83	;'S'
  1356  00FF46  52                 	db	82	;'R'
  1357  00FF47  00                 	db	0
  1358  00FF48                     STR_109:
  1359  00FF48  53                 	db	83	;'S'
  1360  00FF49  4F                 	db	79	;'O'
  1361  00FF4A  4C                 	db	76	;'L'
  1362  00FF4B  45                 	db	69	;'E'
  1363  00FF4C  4E                 	db	78	;'N'
  1364  00FF4D  4F                 	db	79	;'O'
  1365  00FF4E  49                 	db	73	;'I'
  1366  00FF4F  44                 	db	68	;'D'
  1367  00FF50  20                 	db	32
  1368  00FF51  54                 	db	84	;'T'
  1369  00FF52  53                 	db	83	;'S'
  1370  00FF53  54                 	db	84	;'T'
  1371  00FF54  00                 	db	0
  1372  00FF55                     STR_65:
  1373  00FF55  54                 	db	84	;'T'
  1374  00FF56  49                 	db	73	;'I'
  1375  00FF57  4D                 	db	77	;'M'
  1376  00FF58  45                 	db	69	;'E'
  1377  00FF59  20                 	db	32
  1378  00FF5A  25                 	db	37
  1379  00FF5B  64                 	db	100	;'d'
  1380  00FF5C  3A                 	db	58	;':'
  1381  00FF5D  25                 	db	37
  1382  00FF5E  30                 	db	48	;'0'
  1383  00FF5F  32                 	db	50	;'2'
  1384  00FF60  64                 	db	100	;'d'
  1385  00FF61  00                 	db	0
  1386  00FF62                     STR_74:
  1387  00FF62  41                 	db	65	;'A'
  1388  00FF63  4C                 	db	76	;'L'
  1389  00FF64  47                 	db	71	;'G'
  1390  00FF65  33                 	db	51	;'3'
  1391  00FF66  3A                 	db	58	;':'
  1392  00FF67  20                 	db	32
  1393  00FF68  31                 	db	49	;'1'
  1394  00FF69  20                 	db	32
  1395  00FF6A  43                 	db	67	;'C'
  1396  00FF6B  41                 	db	65	;'A'
  1397  00FF6C  4E                 	db	78	;'N'
  1398  00FF6D  00                 	db	0
  1399  00FF6E                     STR_89:
  1400  00FF6E  50                 	db	80	;'P'
  1401  00FF6F  49                 	db	73	;'I'
  1402  00FF70  4E                 	db	78	;'N'
  1403  00FF71  20                 	db	32
  1404  00FF72  52                 	db	82	;'R'
  1405  00FF73  41                 	db	65	;'A'
  1406  00FF74  33                 	db	51	;'3'
  1407  00FF75  2E                 	db	46
  1408  00FF76  2E                 	db	46
  1409  00FF77  2E                 	db	46
  1410  00FF78  00                 	db	0
  1411  00FF79                     STR_91:
  1412  00FF79  50                 	db	80	;'P'
  1413  00FF7A  49                 	db	73	;'I'
  1414  00FF7B  4E                 	db	78	;'N'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  52                 	db	82	;'R'
  1417  00FF7E  41                 	db	65	;'A'
  1418  00FF7F  34                 	db	52	;'4'
  1419  00FF80  2E                 	db	46
  1420  00FF81  2E                 	db	46
  1421  00FF82  2E                 	db	46
  1422  00FF83  00                 	db	0
  1423  00FF84                     STR_64:
  1424  00FF84  53                 	db	83	;'S'
  1425  00FF85  4F                 	db	79	;'O'
  1426  00FF86  52                 	db	82	;'R'
  1427  00FF87  54                 	db	84	;'T'
  1428  00FF88  49                 	db	73	;'I'
  1429  00FF89  4E                 	db	78	;'N'
  1430  00FF8A  47                 	db	71	;'G'
  1431  00FF8B  2E                 	db	46
  1432  00FF8C  2E                 	db	46
  1433  00FF8D  2E                 	db	46
  1434  00FF8E  00                 	db	0
  1435  00FF8F                     STR_110:
  1436  00FF8F  50                 	db	80	;'P'
  1437  00FF90  55                 	db	85	;'U'
  1438  00FF91  53                 	db	83	;'S'
  1439  00FF92  48                 	db	72	;'H'
  1440  00FF93  20                 	db	32
  1441  00FF94  44                 	db	68	;'D'
  1442  00FF95  4F                 	db	79	;'O'
  1443  00FF96  4E                 	db	78	;'N'
  1444  00FF97  45                 	db	69	;'E'
  1445  00FF98  00                 	db	0
  1446  00FF99                     STR_84:
  1447  00FF99  41                 	db	65	;'A'
  1448  00FF9A  43                 	db	67	;'C'
  1449  00FF9B  54                 	db	84	;'T'
  1450  00FF9C  55                 	db	85	;'U'
  1451  00FF9D  41                 	db	65	;'A'
  1452  00FF9E  54                 	db	84	;'T'
  1453  00FF9F  4F                 	db	79	;'O'
  1454  00FFA0  52                 	db	82	;'R'
  1455  00FFA1  53                 	db	83	;'S'
  1456  00FFA2  00                 	db	0
  1457  00FFA3                     STR_22:
  1458  00FFA3  44                 	db	68	;'D'
  1459  00FFA4  55                 	db	85	;'U'
  1460  00FFA5  52                 	db	82	;'R'
  1461  00FFA6  41                 	db	65	;'A'
  1462  00FFA7  54                 	db	84	;'T'
  1463  00FFA8  49                 	db	73	;'I'
  1464  00FFA9  4F                 	db	79	;'O'
  1465  00FFAA  4E                 	db	78	;'N'
  1466  00FFAB  3A                 	db	58	;':'
  1467  00FFAC  00                 	db	0
  1468  00FFAD                     STR_77:
  1469  00FFAD  53                 	db	83	;'S'
  1470  00FFAE  45                 	db	69	;'E'
  1471  00FFAF  4E                 	db	78	;'N'
  1472  00FFB0  53                 	db	83	;'S'
  1473  00FFB1  4F                 	db	79	;'O'
  1474  00FFB2  52                 	db	82	;'R'
  1475  00FFB3  53                 	db	83	;'S'
  1476  00FFB4  00                 	db	0
  1477  00FFB5                     STR_113:
  1478  00FFB5  28                 	db	40
  1479  00FFB6  6E                 	db	110	;'n'
  1480  00FFB7  75                 	db	117	;'u'
  1481  00FFB8  6C                 	db	108	;'l'
  1482  00FFB9  6C                 	db	108	;'l'
  1483  00FFBA  29                 	db	41
  1484  00FFBB  00                 	db	0
  1485  00FFBC                     STR_67:
  1486  00FFBC  46                 	db	70	;'F'
  1487  00FFBD  41                 	db	65	;'A'
  1488  00FFBE  49                 	db	73	;'I'
  1489  00FFBF  4C                 	db	76	;'L'
  1490  00FFC0  45                 	db	69	;'E'
  1491  00FFC1  44                 	db	68	;'D'
  1492  00FFC2  00                 	db	0
  1493  00FFC3                     STR_7:
  1494  00FFC3  53                 	db	83	;'S'
  1495  00FFC4  54                 	db	84	;'T'
  1496  00FFC5  41                 	db	65	;'A'
  1497  00FFC6  52                 	db	82	;'R'
  1498  00FFC7  54                 	db	84	;'T'
  1499  00FFC8  3A                 	db	58	;':'
  1500  00FFC9  00                 	db	0
  1501  00FFCA                     STR_9:
  1502  00FFCA  46                 	db	70	;'F'
  1503  00FFCB  45                 	db	69	;'E'
  1504  00FFCC  42                 	db	66	;'B'
  1505  00FFCD  00                 	db	0
  1506  00FFCE                     STR_19:
  1507  00FFCE  44                 	db	68	;'D'
  1508  00FFCF  45                 	db	69	;'E'
  1509  00FFD0  43                 	db	67	;'C'
  1510  00FFD1  00                 	db	0
  1511  00FFD2                     STR_15:
  1512  00FFD2  41                 	db	65	;'A'
  1513  00FFD3  55                 	db	85	;'U'
  1514  00FFD4  47                 	db	71	;'G'
  1515  00FFD5  00                 	db	0
  1516  00FFD6                     STR_14:
  1517  00FFD6  4A                 	db	74	;'J'
  1518  00FFD7  55                 	db	85	;'U'
  1519  00FFD8  4C                 	db	76	;'L'
  1520  00FFD9  00                 	db	0
  1521  00FFDA                     STR_8:
  1522  00FFDA  4A                 	db	74	;'J'
  1523  00FFDB  41                 	db	65	;'A'
  1524  00FFDC  4E                 	db	78	;'N'
  1525  00FFDD  00                 	db	0
  1526  00FFDE                     STR_13:
  1527  00FFDE  4A                 	db	74	;'J'
  1528  00FFDF  55                 	db	85	;'U'
  1529  00FFE0  4E                 	db	78	;'N'
  1530  00FFE1  00                 	db	0
  1531  00FFE2                     STR_16:
  1532  00FFE2  53                 	db	83	;'S'
  1533  00FFE3  45                 	db	69	;'E'
  1534  00FFE4  50                 	db	80	;'P'
  1535  00FFE5  00                 	db	0
  1536  00FFE6                     STR_10:
  1537  00FFE6  4D                 	db	77	;'M'
  1538  00FFE7  41                 	db	65	;'A'
  1539  00FFE8  52                 	db	82	;'R'
  1540  00FFE9  00                 	db	0
  1541  00FFEA                     STR_11:
  1542  00FFEA  41                 	db	65	;'A'
  1543  00FFEB  50                 	db	80	;'P'
  1544  00FFEC  52                 	db	82	;'R'
  1545  00FFED  00                 	db	0
  1546  00FFEE                     STR_20:
  1547  00FFEE  45                 	db	69	;'E'
  1548  00FFEF  52                 	db	82	;'R'
  1549  00FFF0  52                 	db	82	;'R'
  1550  00FFF1  00                 	db	0
  1551  00FFF2                     STR_17:
  1552  00FFF2  4F                 	db	79	;'O'
  1553  00FFF3  43                 	db	67	;'C'
  1554  00FFF4  54                 	db	84	;'T'
  1555  00FFF5  00                 	db	0
  1556  00FFF6                     STR_18:
  1557  00FFF6  4E                 	db	78	;'N'
  1558  00FFF7  4F                 	db	79	;'O'
  1559  00FFF8  56                 	db	86	;'V'
  1560  00FFF9  00                 	db	0
  1561  00FFFA                     STR_12:
  1562  00FFFA  4D                 	db	77	;'M'
  1563  00FFFB  41                 	db	65	;'A'
  1564  00FFFC  59                 	db	89	;'Y'
  1565  00FFFD  00                 	db	0
  1566  0000                     
  1567                           ; #config settings
  1568  00FFFE  00                 	db	0	; dummy byte at the end
  1569  0000                     
  1570                           	psect	cinit
  1571  003F50                     __pcinit:
  1572                           	opt stack 0
  1573  003F50                     start_initialization:
  1574                           	opt stack 0
  1575  003F50                     __initialization:
  1576                           	opt stack 0
  1577                           
  1578                           ; Initialize objects allocated to BANK1 (8 bytes)
  1579                           ; load TBLPTR registers with __pidataBANK1
  1580  003F50  0EA4               	movlw	low __pidataBANK1
  1581  003F52  6EF6               	movwf	tblptrl,c
  1582  003F54  0E46               	movlw	high __pidataBANK1
  1583  003F56  6EF7               	movwf	tblptrh,c
  1584  003F58  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1585  003F5A  6EF8               	movwf	tblptru,c
  1586  003F5C  EE01  F02F         	lfsr	0,__pdataBANK1
  1587  003F60  EE10 F008          	lfsr	1,8
  1588  003F64                     copy_data0:
  1589  003F64  0009               	tblrd		*+
  1590  003F66  CFF5 FFEE          	movff	tablat,postinc0
  1591  003F6A  50E5               	movf	postdec1,w,c
  1592  003F6C  50E1               	movf	fsr1l,w,c
  1593  003F6E  E1FA               	bnz	copy_data0
  1594                           
  1595                           ; Clear objects allocated to BANK1 (47 bytes)
  1596  003F70  EE01  F000         	lfsr	0,__pbssBANK1
  1597  003F74  0E2F               	movlw	47
  1598  003F76                     clear_0:
  1599  003F76  6AEE               	clrf	postinc0,c
  1600  003F78  06E8               	decf	wreg,f,c
  1601  003F7A  E1FD               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK0 (38 bytes)
  1604  003F7C  EE00  F0DA         	lfsr	0,__pbssBANK0
  1605  003F80  0E26               	movlw	38
  1606  003F82                     clear_1:
  1607  003F82  6AEE               	clrf	postinc0,c
  1608  003F84  06E8               	decf	wreg,f,c
  1609  003F86  E1FD               	bnz	clear_1
  1610                           
  1611                           ; Clear objects allocated to COMRAM (35 bytes)
  1612  003F88  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1613  003F8C  0E23               	movlw	35
  1614  003F8E                     clear_2:
  1615  003F8E  6AEE               	clrf	postinc0,c
  1616  003F90  06E8               	decf	wreg,f,c
  1617  003F92  E1FD               	bnz	clear_2
  1618  003F94                     end_of_initialization:
  1619                           	opt stack 0
  1620  003F94                     __end_of__initialization:
  1621                           	opt stack 0
  1622  003F94  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1623  003F96  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1624  003F98  0100               	movlb	0
  1625  003F9A  EFDA  F01B         	goto	_main	;jump to C main() function
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssCOMRAM
  1636  00005B                     __pbssCOMRAM:
  1637                           	opt stack 0
  1638  00005B                     _back:
  1639                           	opt stack 0
  1640  00005B                     	ds	2
  1641  00005D                     _count_can_no_lab:
  1642                           	opt stack 0
  1643  00005D                     	ds	2
  1644  00005F                     _count_can_w_lab:
  1645                           	opt stack 0
  1646  00005F                     	ds	2
  1647  000061                     _count_pop_no_tab:
  1648                           	opt stack 0
  1649  000061                     	ds	2
  1650  000063                     _count_pop_w_tab:
  1651                           	opt stack 0
  1652  000063                     	ds	2
  1653  000065                     _cur_can:
  1654                           	opt stack 0
  1655  000065                     	ds	2
  1656  000067                     _debug:
  1657                           	opt stack 0
  1658  000067                     	ds	2
  1659  000069                     _down:
  1660                           	opt stack 0
  1661  000069                     	ds	2
  1662  00006B                     _enter:
  1663                           	opt stack 0
  1664  00006B                     	ds	2
  1665  00006D                     _f_ID_receive:
  1666                           	opt stack 0
  1667  00006D                     	ds	2
  1668  00006F                     _f_can_coming_to_ID:
  1669                           	opt stack 0
  1670  00006F                     	ds	2
  1671  000071                     _f_can_coming_to_distribution:
  1672                           	opt stack 0
  1673  000071                     	ds	2
  1674  000073                     _f_lastCan:
  1675                           	opt stack 0
  1676  000073                     	ds	2
  1677  000075                     _firstboot:
  1678                           	opt stack 0
  1679  000075                     	ds	2
  1680  000077                     _up:
  1681                           	opt stack 0
  1682  000077                     	ds	2
  1683  000079                     _was_low_1:
  1684                           	opt stack 0
  1685  000079                     	ds	2
  1686  00007B                     _was_low_3:
  1687                           	opt stack 0
  1688  00007B                     	ds	2
  1689  00007D                     _input:
  1690                           	opt stack 0
  1691  00007D                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBANK0
  1702  0000DA                     __pbssBANK0:
  1703                           	opt stack 0
  1704  0000DA                     _IR_signal:
  1705                           	opt stack 0
  1706  0000DA                     	ds	2
  1707  0000DC                     _MAG_signal:
  1708                           	opt stack 0
  1709  0000DC                     	ds	2
  1710  0000DE                     _cur_state:
  1711                           	opt stack 0
  1712  0000DE                     	ds	2
  1713  0000E0                     _f_loadingNewCan:
  1714                           	opt stack 0
  1715  0000E0                     	ds	2
  1716  0000E2                     _first:
  1717                           	opt stack 0
  1718  0000E2                     	ds	2
  1719  0000E4                     _i:
  1720                           	opt stack 0
  1721  0000E4                     	ds	2
  1722  0000E6                     _log:
  1723                           	opt stack 0
  1724  0000E6                     	ds	2
  1725  0000E8                     _log_completion:
  1726                           	opt stack 0
  1727  0000E8                     	ds	2
  1728  0000EA                     _log_count_can_no_lab:
  1729                           	opt stack 0
  1730  0000EA                     	ds	2
  1731  0000EC                     _log_count_can_w_lab:
  1732                           	opt stack 0
  1733  0000EC                     	ds	2
  1734  0000EE                     _log_count_pop_no_tab:
  1735                           	opt stack 0
  1736  0000EE                     	ds	2
  1737  0000F0                     _log_count_pop_w_tab:
  1738                           	opt stack 0
  1739  0000F0                     	ds	2
  1740  0000F2                     _log_count_total:
  1741                           	opt stack 0
  1742  0000F2                     	ds	2
  1743  0000F4                     _log_total_time:
  1744                           	opt stack 0
  1745  0000F4                     	ds	2
  1746  0000F6                     _logstate:
  1747                           	opt stack 0
  1748  0000F6                     	ds	2
  1749  0000F8                     _total_time:
  1750                           	opt stack 0
  1751  0000F8                     	ds	2
  1752  0000FA                     _var:
  1753                           	opt stack 0
  1754  0000FA                     	ds	2
  1755  0000FC                     _machine_state:
  1756                           	opt stack 0
  1757  0000FC                     	ds	1
  1758  0000FD                     _sel:
  1759                           	opt stack 0
  1760  0000FD                     	ds	1
  1761  0000FE                     _count_total:
  1762                           	opt stack 0
  1763  0000FE                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	bssBANK1
  1774  000100                     __pbssBANK1:
  1775                           	opt stack 0
  1776  000100                     _log_startTime:
  1777                           	opt stack 0
  1778  000100                     	ds	14
  1779  00010E                     _startTime:
  1780                           	opt stack 0
  1781  00010E                     	ds	14
  1782  00011C                     _servoTimes:
  1783                           	opt stack 0
  1784  00011C                     	ds	8
  1785  000124                     _time:
  1786                           	opt stack 0
  1787  000124                     	ds	7
  1788  00012B                     _RTCflag:
  1789                           	opt stack 0
  1790  00012B                     	ds	2
  1791  00012D                     _f_can_distributed:
  1792                           	opt stack 0
  1793  00012D                     	ds	2
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           
  1803                           	psect	dataBANK1
  1804  00012F                     __pdataBANK1:
  1805                           	opt stack 0
  1806  00012F                     UI@F3223:
  1807                           	opt stack 0
  1808  00012F                     	ds	4
  1809  000133                     printRTC@F3214:
  1810                           	opt stack 0
  1811  000133                     	ds	4
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postdec1	equ	0xFE5
  1819                           fsr1l	equ	0xFE1
  1820                           
  1821                           	psect	cstackBANK0
  1822  000080                     __pcstackBANK0:
  1823                           	opt stack 0
  1824  000080                     ??_delay_ms:
  1825  000080                     ??_PortTests:
  1826  000080                     ??_isdigit:
  1827  000080                     ??_readADC:
  1828  000080                     ??_I2C_Master_Wait:
  1829  000080                     ?___wmul:
  1830                           	opt stack 0
  1831  000080                     ?___awmod:
  1832                           	opt stack 0
  1833  000080                     ?___lwdiv:
  1834                           	opt stack 0
  1835  000080                     ?___lldiv:
  1836                           	opt stack 0
  1837  000080                     lcdNibble@temp:
  1838                           	opt stack 0
  1839  000080                     initTime@m:
  1840                           	opt stack 0
  1841  000080                     updateServoPosition@time_us:
  1842                           	opt stack 0
  1843  000080                     EEPROM_read@address:
  1844                           	opt stack 0
  1845  000080                     ___wmul@multiplier:
  1846                           	opt stack 0
  1847  000080                     ___awmod@dividend:
  1848                           	opt stack 0
  1849  000080                     ___lwdiv@dividend:
  1850                           	opt stack 0
  1851  000080                     strcpy@to:
  1852                           	opt stack 0
  1853  000080                     ___lldiv@dividend:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x0
  1857  000080                     	ds	1
  1858  000081                     readADC@channel:
  1859                           	opt stack 0
  1860  000081                     I2C_Master_Read@a:
  1861                           	opt stack 0
  1862  000081                     lcdNibble@data:
  1863                           	opt stack 0
  1864  000081                     initTime@h:
  1865                           	opt stack 0
  1866  000081                     delay_ms@milliseconds:
  1867                           	opt stack 0
  1868  000081                     _isdigit$1893:
  1869                           	opt stack 0
  1870  000081                     I2C_Master_Write@d:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x1
  1874  000081                     	ds	1
  1875  000082                     ??_readIR:
  1876  000082                     ??_readMAG:
  1877  000082                     I2C_Master_Read@temp:
  1878                           	opt stack 0
  1879  000082                     lcdInst@data:
  1880                           	opt stack 0
  1881  000082                     putch@data:
  1882                           	opt stack 0
  1883  000082                     initTime@w:
  1884                           	opt stack 0
  1885  000082                     isdigit@c:
  1886                           	opt stack 0
  1887  000082                     updateServoPosition@timer:
  1888                           	opt stack 0
  1889  000082                     ___wmul@multiplicand:
  1890                           	opt stack 0
  1891  000082                     ___awmod@divisor:
  1892                           	opt stack 0
  1893  000082                     ___lwdiv@divisor:
  1894                           	opt stack 0
  1895  000082                     strcpy@from:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x2
  1899  000082                     	ds	1
  1900  000083                     ??_initLCD:
  1901  000083                     initTime@DD:
  1902                           	opt stack 0
  1903  000083                     getRTC@i:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x3
  1907  000083                     	ds	1
  1908  000084                     ??_updateServoPosition:
  1909  000084                     initTime@MM:
  1910                           	opt stack 0
  1911  000084                     ___awmod@counter:
  1912                           	opt stack 0
  1913  000084                     readIR@res:
  1914                           	opt stack 0
  1915  000084                     readMAG@res:
  1916                           	opt stack 0
  1917  000084                     ___wmul@product:
  1918                           	opt stack 0
  1919  000084                     ___lwdiv@quotient:
  1920                           	opt stack 0
  1921  000084                     strcpy@cp:
  1922                           	opt stack 0
  1923  000084                     ___lldiv@divisor:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x4
  1927  000084                     	ds	1
  1928  000085                     ??_initSortTimer:
  1929  000085                     initTime@YY:
  1930                           	opt stack 0
  1931  000085                     ___awmod@sign:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x5
  1935  000085                     	ds	1
  1936  000086                     ??_ID:
  1937  000086                     ??_getIR:
  1938  000086                     ?___awdiv:
  1939                           	opt stack 0
  1940  000086                     initTime@s:
  1941                           	opt stack 0
  1942  000086                     ___lwdiv@counter:
  1943                           	opt stack 0
  1944  000086                     updateServoPosition@my_time:
  1945                           	opt stack 0
  1946  000086                     ___awdiv@dividend:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x6
  1950  000086                     	ds	1
  1951  000087                     ?___lwmod:
  1952                           	opt stack 0
  1953  000087                     ___lwmod@dividend:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x7
  1957  000087                     	ds	1
  1958  000088                     ??_Distribution:
  1959  000088                     ??_initServos:
  1960  000088                     ID@i:
  1961                           	opt stack 0
  1962  000088                     initSortTimer@i:
  1963                           	opt stack 0
  1964  000088                     ___awdiv@divisor:
  1965                           	opt stack 0
  1966  000088                     ___lldiv@quotient:
  1967                           	opt stack 0
  1968                           
  1969                           ; 4 bytes @ 0x8
  1970  000088                     	ds	1
  1971  000089                     ___lwmod@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x9
  1975  000089                     	ds	1
  1976  00008A                     ___awdiv@counter:
  1977                           	opt stack 0
  1978  00008A                     ID@sensor_outputs:
  1979                           	opt stack 0
  1980                           
  1981                           ; 6 bytes @ 0xA
  1982  00008A                     	ds	1
  1983  00008B                     ___awdiv@sign:
  1984                           	opt stack 0
  1985  00008B                     ___lwmod@counter:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0xB
  1989  00008B                     	ds	1
  1990  00008C                     ___lldiv@counter:
  1991                           	opt stack 0
  1992  00008C                     ___awdiv@quotient:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0xC
  1996  00008C                     	ds	1
  1997  00008D                     I2C_Master_Init@c:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0xD
  2001  00008D                     	ds	1
  2002  00008E                     ?_printf:
  2003                           	opt stack 0
  2004  00008E                     printf@f:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0xE
  2008  00008E                     	ds	3
  2009  000091                     ??_I2C_Master_Init:
  2010                           
  2011                           ; 1 bytes @ 0x11
  2012  000091                     	ds	4
  2013  000095                     ??_loadRTC:
  2014                           
  2015                           ; 1 bytes @ 0x15
  2016  000095                     	ds	1
  2017  000096                     loadRTC@i:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x16
  2021  000096                     	ds	4
  2022  00009A                     ??_printf:
  2023                           
  2024                           ; 1 bytes @ 0x1A
  2025  00009A                     	ds	4
  2026  00009E                     printf@prec:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x1E
  2030  00009E                     	ds	1
  2031  00009F                     printf@cp:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x1F
  2035  00009F                     	ds	2
  2036  0000A1                     printf@ap:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x21
  2040  0000A1                     	ds	2
  2041  0000A3                     printf@len:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x23
  2045  0000A3                     	ds	2
  2046  0000A5                     printf@val:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x25
  2050  0000A5                     	ds	2
  2051  0000A7                     printf@flag:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x27
  2055  0000A7                     	ds	1
  2056  0000A8                     printf@c:
  2057                           	opt stack 0
  2058                           
  2059                           ; 1 bytes @ 0x28
  2060  0000A8                     	ds	1
  2061  0000A9                     printf@width:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x29
  2065  0000A9                     	ds	2
  2066  0000AB                     ??_printRTC:
  2067  0000AB                     ??_algorithmTest:
  2068  0000AB                     ??_sensorTest:
  2069  0000AB                     ??_actuatorTest:
  2070  0000AB                     ??_PortTestA5:
  2071  0000AB                     ??_ToggleTestA5:
  2072  0000AB                     ??_SolenoidTestA5:
  2073  0000AB                     ??_BothServos:
  2074  0000AB                     EEPROM_write@address:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x2B
  2078  0000AB                     	ds	1
  2079  0000AC                     ToggleTestA5@on:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x2C
  2083  0000AC                     	ds	1
  2084  0000AD                     EEPROM_write@data:
  2085                           	opt stack 0
  2086  0000AD                     actuatorTest@i_1584:
  2087                           	opt stack 0
  2088  0000AD                     sensorTest@res:
  2089                           	opt stack 0
  2090  0000AD                     SolenoidTestA5@i:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x2D
  2094  0000AD                     	ds	1
  2095  0000AE                     ??_EEPROM_write:
  2096  0000AE                     actuatorTest@i_1591:
  2097                           	opt stack 0
  2098  0000AE                     printRTC@INT_time:
  2099                           	opt stack 0
  2100                           
  2101                           ; 14 bytes @ 0x2E
  2102  0000AE                     	ds	1
  2103  0000AF                     EEPROM_write@i:
  2104                           	opt stack 0
  2105  0000AF                     actuatorTest@i_1592:
  2106                           	opt stack 0
  2107  0000AF                     SolenoidTestA5@i_1637:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0x2F
  2111  0000AF                     	ds	1
  2112  0000B0                     EEPROM_write@i_1321:
  2113                           	opt stack 0
  2114  0000B0                     actuatorTest@i_1594:
  2115                           	opt stack 0
  2116  0000B0                     SolenoidTestA5@i_1639:
  2117                           	opt stack 0
  2118                           
  2119                           ; 1 bytes @ 0x30
  2120  0000B0                     	ds	1
  2121  0000B1                     ??_Loading:
  2122  0000B1                     logRun@num:
  2123                           	opt stack 0
  2124  0000B1                     actuatorTest@i_1595:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x31
  2128  0000B1                     	ds	1
  2129  0000B2                     logRun@byte1:
  2130                           	opt stack 0
  2131  0000B2                     actuatorTest@i_1597:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x32
  2135  0000B2                     	ds	1
  2136  0000B3                     logRun@byte2:
  2137                           	opt stack 0
  2138  0000B3                     actuatorTest@i_1598:
  2139                           	opt stack 0
  2140  0000B3                     Loading@addr:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x33
  2144  0000B3                     	ds	1
  2145  0000B4                     logRun@byte3:
  2146                           	opt stack 0
  2147  0000B4                     actuatorTest@i_1600:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x34
  2151  0000B4                     	ds	1
  2152  0000B5                     Loading@byte1:
  2153                           	opt stack 0
  2154  0000B5                     logRun@byte_i:
  2155                           	opt stack 0
  2156  0000B5                     actuatorTest@i_1601:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x35
  2160  0000B5                     	ds	1
  2161  0000B6                     logRun@byte11:
  2162                           	opt stack 0
  2163  0000B6                     actuatorTest@i_1603:
  2164                           	opt stack 0
  2165  0000B6                     Loading@i:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x36
  2169  0000B6                     	ds	1
  2170  0000B7                     actuatorTest@i_1604:
  2171                           	opt stack 0
  2172  0000B7                     logRun@i:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x37
  2176  0000B7                     	ds	1
  2177  0000B8                     actuatorTest@i_1606:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x38
  2181  0000B8                     	ds	1
  2182  0000B9                     actuatorTest@i_1607:
  2183                           	opt stack 0
  2184  0000B9                     logRun@addr:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x39
  2188  0000B9                     	ds	1
  2189  0000BA                     actuatorTest@i_1610:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x3A
  2193  0000BA                     	ds	1
  2194  0000BB                     actuatorTest@i_1611:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x3B
  2198  0000BB                     	ds	1
  2199  0000BC                     actuatorTest@i_1613:
  2200                           	opt stack 0
  2201  0000BC                     printRTC@RTC_month:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x3C
  2205  0000BC                     	ds	1
  2206  0000BD                     actuatorTest@i_1614:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x3D
  2210  0000BD                     	ds	1
  2211  0000BE                     actuatorTest@i_1616:
  2212                           	opt stack 0
  2213  0000BE                     printRTC@month:
  2214                           	opt stack 0
  2215                           
  2216                           ; 4 bytes @ 0x3E
  2217  0000BE                     	ds	1
  2218  0000BF                     actuatorTest@i_1617:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x3F
  2222  0000BF                     	ds	1
  2223  0000C0                     actuatorTest@i_1620:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x40
  2227  0000C0                     	ds	1
  2228  0000C1                     actuatorTest@i_1621:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x41
  2232  0000C1                     	ds	1
  2233  0000C2                     actuatorTest@i_1623:
  2234                           	opt stack 0
  2235  0000C2                     printRTC@i:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x42
  2239  0000C2                     	ds	1
  2240  0000C3                     actuatorTest@i_1624:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x43
  2244  0000C3                     	ds	1
  2245  0000C4                     ??_UI:
  2246  0000C4                     actuatorTest@i:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x44
  2250  0000C4                     	ds	2
  2251  0000C6                     ??_Test:
  2252  0000C6                     _UI$2246:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x46
  2256  0000C6                     	ds	2
  2257  0000C8                     UI@i:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x48
  2261  0000C8                     	ds	1
  2262  0000C9                     UI@i_408:
  2263                           	opt stack 0
  2264                           
  2265                           ; 1 bytes @ 0x49
  2266  0000C9                     	ds	1
  2267  0000CA                     UI@i_411:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x4A
  2271  0000CA                     	ds	1
  2272  0000CB                     UI@i_412:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x4B
  2276  0000CB                     	ds	1
  2277  0000CC                     UI@i_430:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x4C
  2281  0000CC                     	ds	1
  2282  0000CD                     UI@i_431:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x4D
  2286  0000CD                     	ds	1
  2287  0000CE                     UI@i_434:
  2288                           	opt stack 0
  2289                           
  2290                           ; 1 bytes @ 0x4E
  2291  0000CE                     	ds	1
  2292  0000CF                     UI@i_435:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x4F
  2296  0000CF                     	ds	1
  2297  0000D0                     UI@i_438:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x50
  2301  0000D0                     	ds	1
  2302  0000D1                     UI@i_439:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x51
  2306  0000D1                     	ds	1
  2307  0000D2                     UI@i_442:
  2308                           	opt stack 0
  2309                           
  2310                           ; 1 bytes @ 0x52
  2311  0000D2                     	ds	1
  2312  0000D3                     UI@i_443:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x53
  2316  0000D3                     	ds	1
  2317  0000D4                     UI@i_446:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x54
  2321  0000D4                     	ds	1
  2322  0000D5                     UI@i_447:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x55
  2326  0000D5                     	ds	1
  2327  0000D6                     UI@month:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0x56
  2331  0000D6                     	ds	4
  2332  0000DA                     tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           postinc0	equ	0xFEE
  2337                           wreg	equ	0xFE8
  2338                           postdec1	equ	0xFE5
  2339                           fsr1l	equ	0xFE1
  2340                           
  2341                           ; 1 bytes @ 0x5A
  2342                           
  2343                           	psect	cstackCOMRAM
  2344  000001                     __pcstackCOMRAM:
  2345                           	opt stack 0
  2346  000001                     ??i2_I2C_Master_Wait:
  2347  000001                     ??i2_isdigit:
  2348  000001                     ?i2___wmul:
  2349                           	opt stack 0
  2350  000001                     ?i2___lwmod:
  2351                           	opt stack 0
  2352  000001                     i2lcdNibble@temp:
  2353                           	opt stack 0
  2354  000001                     i2EEPROM_read@address:
  2355                           	opt stack 0
  2356  000001                     i2___wmul@multiplier:
  2357                           	opt stack 0
  2358  000001                     i2___lwmod@dividend:
  2359                           	opt stack 0
  2360  000001                     i2strcpy@to:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x0
  2364  000001                     	ds	1
  2365  000002                     i2I2C_Master_Read@a:
  2366                           	opt stack 0
  2367  000002                     i2lcdNibble@data:
  2368                           	opt stack 0
  2369  000002                     i2_isdigit$1893:
  2370                           	opt stack 0
  2371  000002                     i2I2C_Master_Write@d:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x1
  2375  000002                     	ds	1
  2376  000003                     i2I2C_Master_Read@temp:
  2377                           	opt stack 0
  2378  000003                     i2lcdInst@data:
  2379                           	opt stack 0
  2380  000003                     i2putch@data:
  2381                           	opt stack 0
  2382  000003                     i2isdigit@c:
  2383                           	opt stack 0
  2384  000003                     i2___wmul@multiplicand:
  2385                           	opt stack 0
  2386  000003                     i2___lwmod@divisor:
  2387                           	opt stack 0
  2388  000003                     i2strcpy@from:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x2
  2392  000003                     	ds	1
  2393  000004                     i2getRTC@i:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x3
  2397  000004                     	ds	1
  2398  000005                     i2___lwmod@counter:
  2399                           	opt stack 0
  2400  000005                     i2___wmul@product:
  2401                           	opt stack 0
  2402  000005                     i2strcpy@cp:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x4
  2406  000005                     	ds	1
  2407  000006                     ?i2___lwdiv:
  2408                           	opt stack 0
  2409  000006                     i2___lwdiv@dividend:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x5
  2413  000006                     	ds	1
  2414  000007                     retrieveLog@logNum:
  2415                           	opt stack 0
  2416                           
  2417                           ; 2 bytes @ 0x6
  2418  000007                     	ds	1
  2419  000008                     i2___lwdiv@divisor:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x7
  2423  000008                     	ds	1
  2424  000009                     ??_retrieveLog:
  2425                           
  2426                           ; 1 bytes @ 0x8
  2427  000009                     	ds	1
  2428  00000A                     i2___lwdiv@quotient:
  2429                           	opt stack 0
  2430                           
  2431                           ; 2 bytes @ 0x9
  2432  00000A                     	ds	1
  2433  00000B                     retrieveLog@byte1:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0xA
  2437  00000B                     	ds	1
  2438  00000C                     retrieveLog@byte2:
  2439                           	opt stack 0
  2440  00000C                     i2___lwdiv@counter:
  2441                           	opt stack 0
  2442                           
  2443                           ; 1 bytes @ 0xB
  2444  00000C                     	ds	1
  2445  00000D                     ?i2_printf:
  2446                           	opt stack 0
  2447  00000D                     retrieveLog@byte3:
  2448                           	opt stack 0
  2449  00000D                     i2printf@f:
  2450                           	opt stack 0
  2451                           
  2452                           ; 2 bytes @ 0xC
  2453  00000D                     	ds	1
  2454  00000E                     retrieveLog@i:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xD
  2458  00000E                     	ds	2
  2459  000010                     retrieveLog@addr:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0xF
  2463  000010                     	ds	2
  2464  000012                     dispLogs@myLog:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x11
  2468  000012                     	ds	2
  2469  000014                     
  2470                           ; 1 bytes @ 0x13
  2471  000014                     	ds	5
  2472  000019                     ??i2_printf:
  2473                           
  2474                           ; 1 bytes @ 0x18
  2475  000019                     	ds	4
  2476  00001D                     i2printf@prec:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x1C
  2480  00001D                     	ds	1
  2481  00001E                     i2printf@cp:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x1D
  2485  00001E                     	ds	2
  2486  000020                     i2printf@ap:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x1F
  2490  000020                     	ds	2
  2491  000022                     i2printf@len:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x21
  2495  000022                     	ds	2
  2496  000024                     i2printf@val:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x23
  2500  000024                     	ds	2
  2501  000026                     i2printf@flag:
  2502                           	opt stack 0
  2503                           
  2504                           ; 1 bytes @ 0x25
  2505  000026                     	ds	1
  2506  000027                     i2printf@c:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0x26
  2510  000027                     	ds	1
  2511  000028                     i2printf@width:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x27
  2515  000028                     	ds	2
  2516  00002A                     ??_printSortTimer:
  2517  00002A                     ??i2_printRTC:
  2518  00002A                     ?_inputHandler:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x29
  2522  00002A                     	ds	2
  2523  00002C                     ??_inputHandler:
  2524                           
  2525                           ; 1 bytes @ 0x2B
  2526  00002C                     	ds	1
  2527  00002D                     printSortTimer@hour:
  2528                           	opt stack 0
  2529  00002D                     i2printRTC@INT_time:
  2530                           	opt stack 0
  2531                           
  2532                           ; 14 bytes @ 0x2C
  2533  00002D                     	ds	2
  2534  00002F                     printSortTimer@curTime:
  2535                           	opt stack 0
  2536                           
  2537                           ; 14 bytes @ 0x2E
  2538  00002F                     	ds	12
  2539  00003B                     i2printRTC@RTC_month:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x3A
  2543  00003B                     	ds	2
  2544  00003D                     printSortTimer@start_sec:
  2545                           	opt stack 0
  2546  00003D                     i2printRTC@month:
  2547                           	opt stack 0
  2548                           
  2549                           ; 4 bytes @ 0x3C
  2550  00003D                     	ds	2
  2551  00003F                     printSortTimer@cur_sec:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x3E
  2555  00003F                     	ds	2
  2556  000041                     printSortTimer@min:
  2557                           	opt stack 0
  2558  000041                     i2printRTC@i:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x40
  2562  000041                     	ds	2
  2563  000043                     ??_updateMenu:
  2564  000043                     printSortTimer@sec:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x42
  2568  000043                     	ds	2
  2569  000045                     _printSortTimer$2366:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x44
  2573  000045                     	ds	2
  2574  000047                     printSortTimer@timeDiff:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x46
  2578  000047                     	ds	2
  2579  000049                     printSortTimer@i:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x48
  2583  000049                     	ds	2
  2584  00004B                     ??_handler:
  2585                           
  2586                           ; 1 bytes @ 0x4A
  2587  00004B                     	ds	16
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1l	equ	0xFE1
  2596                           
  2597 ;;
  2598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2599 ;;
  2600 ;; *************** function _main *****************
  2601 ;; Defined at:
  2602 ;;		line 19 in file "main.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:        0 bytes
  2621 ;; Hardware stack levels required when called:   13
  2622 ;; This function calls:
  2623 ;;		_Test
  2624 ;;		_UI
  2625 ;;		_initLCD
  2626 ;;		_initTime
  2627 ;;		_initUI
  2628 ;;		_logRun
  2629 ;;		_machineConfig
  2630 ;;		_sort
  2631 ;;		_stopSignals
  2632 ;; This function is called by:
  2633 ;;		Startup code after reset
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text0
  2638  0037B4                     __ptext0:
  2639                           	opt stack 0
  2640  0037B4                     _main:
  2641                           	opt stack 18
  2642                           
  2643                           ;main.c: 20: machineConfig();
  2644                           
  2645                           ;incstack = 0
  2646  0037B4  ECF9  F01E         	call	_machineConfig	;wreg free
  2647                           
  2648                           ;main.c: 21: initLCD();
  2649  0037B8  EC42  F020         	call	_initLCD	;wreg free
  2650                           
  2651                           ;main.c: 25: initTime(0x42, 0x25, 0x13, 0x04, 0x15, 0x03, 0x17);
  2652  0037BC  0E25               	movlw	37
  2653  0037BE  0100               	movlb	0	; () banked
  2654  0037C0  6F80               	movwf	initTime@m& (0+255),b
  2655  0037C2  0E13               	movlw	19
  2656  0037C4  0100               	movlb	0	; () banked
  2657  0037C6  6F81               	movwf	initTime@h& (0+255),b
  2658  0037C8  0E04               	movlw	4
  2659  0037CA  0100               	movlb	0	; () banked
  2660  0037CC  6F82               	movwf	initTime@w& (0+255),b
  2661  0037CE  0E15               	movlw	21
  2662  0037D0  0100               	movlb	0	; () banked
  2663  0037D2  6F83               	movwf	initTime@DD& (0+255),b
  2664  0037D4  0E03               	movlw	3
  2665  0037D6  0100               	movlb	0	; () banked
  2666  0037D8  6F84               	movwf	initTime@MM& (0+255),b
  2667  0037DA  0E17               	movlw	23
  2668  0037DC  0100               	movlb	0	; () banked
  2669  0037DE  6F85               	movwf	initTime@YY& (0+255),b
  2670  0037E0  0E42               	movlw	66
  2671  0037E2  ECD7  F022         	call	_initTime
  2672                           
  2673                           ;main.c: 27: initUI();
  2674  0037E6  ECA2  F022         	call	_initUI	;wreg free
  2675                           
  2676                           ;main.c: 28: first = 1;
  2677  0037EA  0E00               	movlw	0
  2678  0037EC  0100               	movlb	0	; () banked
  2679  0037EE  6FE3               	movwf	(_first+1)& (0+255),b
  2680  0037F0  0E01               	movlw	1
  2681  0037F2  6FE2               	movwf	_first& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 39: switch(machine_state){
  2685                           
  2686                           ;main.c: 38: while(1){
  2687  0037F4  D018               	goto	l8024
  2688  0037F6                     l8006:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 41: UI();
  2692  0037F6  EC65  F004         	call	_UI	;wreg free
  2693                           
  2694                           ;main.c: 42: break;
  2695  0037FA  D015               	goto	l8024
  2696  0037FC                     l8008:
  2697                           
  2698                           ;main.c: 44: sort();
  2699  0037FC  ECC6  F022         	call	_sort	;wreg free
  2700                           
  2701                           ;main.c: 45: break;
  2702  003800  D012               	goto	l8024
  2703  003802                     l8010:
  2704                           
  2705                           ;main.c: 47: stopSignals();
  2706  003802  EC03  F023         	call	_stopSignals	;wreg free
  2707                           
  2708                           ;main.c: 48: logRun();
  2709  003806  EC6C  F017         	call	_logRun	;wreg free
  2710                           
  2711                           ;main.c: 49: first = 1;
  2712  00380A  0E00               	movlw	0
  2713  00380C  0100               	movlb	0	; () banked
  2714  00380E  6FE3               	movwf	(_first+1)& (0+255),b
  2715  003810  0E01               	movlw	1
  2716  003812  6FE2               	movwf	_first& (0+255),b
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 50: UI();
  2720  003814  EC65  F004         	call	_UI	;wreg free
  2721                           
  2722                           ;main.c: 51: break;
  2723  003818  D006               	goto	l8024
  2724  00381A                     l8018:
  2725                           
  2726                           ;main.c: 53: Test();
  2727  00381A  EC97  F018         	call	_Test	;wreg free
  2728                           
  2729                           ;main.c: 54: break;
  2730  00381E  D003               	goto	l8024
  2731  003820                     l8020:
  2732                           
  2733                           ;main.c: 56: stopSignals();
  2734  003820  EC03  F023         	call	_stopSignals	;wreg free
  2735  003824                     l480:
  2736  003824  D7FF               	goto	l480
  2737  003826                     l8024:
  2738  003826  0100               	movlb	0	; () banked
  2739  003828  51FC               	movf	_machine_state& (0+255),w,b
  2740                           
  2741                           ; Switch size 1, requested type "space"
  2742                           ; Number of cases is 5, Range of values is 0 to 4
  2743                           ; switch strategies available:
  2744                           ; Name         Instructions Cycles
  2745                           ; simple_byte           16     9 (average)
  2746                           ;	Chosen strategy is simple_byte
  2747  00382A  0A00               	xorlw	0	; case 0
  2748  00382C  B4D8               	btfsc	status,2,c
  2749  00382E  D7E3               	goto	l8006
  2750  003830  0A01               	xorlw	1	; case 1
  2751  003832  B4D8               	btfsc	status,2,c
  2752  003834  D7E3               	goto	l8008
  2753  003836  0A03               	xorlw	3	; case 2
  2754  003838  B4D8               	btfsc	status,2,c
  2755  00383A  D7E3               	goto	l8010
  2756  00383C  0A01               	xorlw	1	; case 3
  2757  00383E  B4D8               	btfsc	status,2,c
  2758  003840  D7EC               	goto	l8018
  2759  003842  0A07               	xorlw	7	; case 4
  2760  003844  B4D8               	btfsc	status,2,c
  2761  003846  D7EC               	goto	l8020
  2762                           
  2763                           ; BSR set to: 0
  2764                           
  2765                           ; BSR set to: 0
  2766  003848  D7EE               	goto	l8024
  2767  00384A                     __end_of_main:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           postinc0	equ	0xFEE
  2774                           wreg	equ	0xFE8
  2775                           postdec1	equ	0xFE5
  2776                           fsr1l	equ	0xFE1
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _stopSignals *****************
  2780 ;; Defined at:
  2781 ;;		line 65 in file "main.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        0 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    7
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text1
  2810  004606                     __ptext1:
  2811                           	opt stack 0
  2812  004606                     _stopSignals:
  2813                           	opt stack 23
  2814                           
  2815                           ;main.c: 66: LATA = 0x00;
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;incstack = 0
  2819  004606  0E00               	movlw	0
  2820  004608  6E89               	movwf	3977,c	;volatile
  2821                           
  2822                           ;main.c: 67: LATB = 0x00;
  2823  00460A  0E00               	movlw	0
  2824  00460C  6E8A               	movwf	3978,c	;volatile
  2825                           
  2826                           ;main.c: 68: LATC = 0x00;
  2827  00460E  0E00               	movlw	0
  2828  004610  6E8B               	movwf	3979,c	;volatile
  2829                           
  2830                           ;main.c: 69: LATD = 0x00;
  2831  004612  0E00               	movlw	0
  2832  004614  6E8C               	movwf	3980,c	;volatile
  2833                           
  2834                           ;main.c: 70: LATE = 0x00;
  2835  004616  0E00               	movlw	0
  2836  004618  6E8D               	movwf	3981,c	;volatile
  2837  00461A  0012               	return		;funcret
  2838  00461C                     __end_of_stopSignals:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1l	equ	0xFE1
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _sort *****************
  2851 ;; Defined at:
  2852 ;;		line 55 in file "sort.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;		None
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;Total ram usage:        0 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:   12
  2873 ;; This function calls:
  2874 ;;		_Distribution
  2875 ;;		_ID
  2876 ;;		_Loading
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text2
  2883  00458C                     __ptext2:
  2884                           	opt stack 0
  2885  00458C                     _sort:
  2886                           	opt stack 18
  2887                           
  2888                           ;sort.c: 56: if(machine_state == Sorting_state){
  2889                           
  2890                           ;incstack = 0
  2891  00458C  0100               	movlb	0	; () banked
  2892  00458E  05FC               	decf	_machine_state& (0+255),w,b
  2893  004590  B4D8               	btfsc	status,2,c
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;sort.c: 57: Loading();
  2897  004592  EC25  F016         	call	_Loading	;wreg free
  2898                           
  2899                           ;sort.c: 58: }
  2900                           ;sort.c: 59: if(machine_state == Sorting_state){
  2901  004596  0100               	movlb	0	; () banked
  2902  004598  05FC               	decf	_machine_state& (0+255),w,b
  2903  00459A  B4D8               	btfsc	status,2,c
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;sort.c: 60: ID();
  2907  00459C  EC78  F015         	call	_ID	;wreg free
  2908                           
  2909                           ;sort.c: 61: }
  2910                           ;sort.c: 62: if(machine_state == Sorting_state){
  2911  0045A0  0100               	movlb	0	; () banked
  2912  0045A2  05FC               	decf	_machine_state& (0+255),w,b
  2913  0045A4  A4D8               	btfss	status,2,c
  2914  0045A6  0012               	return	
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;sort.c: 63: Distribution();
  2918  0045A8  ECCC  F016         	call	_Distribution	;wreg free
  2919  0045AC  0012               	return	
  2920  0045AE                     __end_of_sort:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           postdec1	equ	0xFE5
  2929                           fsr1l	equ	0xFE1
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _Loading *****************
  2933 ;; Defined at:
  2934 ;;		line 67 in file "sort.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  i               2   54[BANK0 ] int 
  2939 ;;  addr            2   51[BANK0 ] unsigned short 
  2940 ;;  byte1           1   53[BANK0 ] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        7 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:   11
  2957 ;; This function calls:
  2958 ;;		_EEPROM_read
  2959 ;;		_EEPROM_write
  2960 ;;		_delay_ms
  2961 ;;		_getIR
  2962 ;;		_initGlobalVars
  2963 ;;		_initServos
  2964 ;;		_initSortTimer
  2965 ;;		_lcdInst
  2966 ;; This function is called by:
  2967 ;;		_sort
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text3
  2972  002C4A                     __ptext3:
  2973                           	opt stack 0
  2974  002C4A                     _Loading:
  2975                           	opt stack 18
  2976                           
  2977                           ;sort.c: 68: if(first){
  2978                           
  2979                           ;incstack = 0
  2980  002C4A  0100               	movlb	0	; () banked
  2981  002C4C  51E2               	movf	_first& (0+255),w,b
  2982  002C4E  0100               	movlb	0	; () banked
  2983  002C50  11E3               	iorwf	(_first+1)& (0+255),w,b
  2984  002C52  B4D8               	btfsc	status,2,c
  2985  002C54  D066               	goto	l6336
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;sort.c: 69: initGlobalVars();
  2989  002C56  EC2F  F01E         	call	_initGlobalVars	;wreg free
  2990                           
  2991                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2992  002C5A  0E01               	movlw	1
  2993  002C5C  EC34  F023         	call	_lcdInst
  2994  002C60  0E68               	movlw	104
  2995  002C62  0100               	movlb	0	; () banked
  2996  002C64  6FB1               	movwf	??_Loading& (0+255),b
  2997  002C66  0EE4               	movlw	228
  2998  002C68                     u6977:
  2999  002C68  2EE8               	decfsz	wreg,f,c
  3000  002C6A  D7FE               	bra	u6977
  3001  002C6C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3002  002C6E  D7FC               	bra	u6977
  3003  002C70  F000               	nop	
  3004                           
  3005                           ;sort.c: 71: initSortTimer();
  3006  002C72  EC34  F01B         	call	_initSortTimer	;wreg free
  3007                           
  3008                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3009  002C76  8A8B               	bsf	3979,5,c	;volatile
  3010                           
  3011                           ;sort.c: 77: sel = EEPROM_read(0);
  3012  002C78  0E00               	movlw	0
  3013  002C7A  0100               	movlb	0	; () banked
  3014  002C7C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3015  002C7E  0E00               	movlw	0
  3016  002C80  6F80               	movwf	EEPROM_read@address& (0+255),b
  3017  002C82  ECF7  F022         	call	_EEPROM_read	;wreg free
  3018  002C86  0100               	movlb	0	; () banked
  3019  002C88  6FFD               	movwf	_sel& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3023  002C8A  0100               	movlb	0	; () banked
  3024  002C8C  51FD               	movf	_sel& (0+255),w,b
  3025  002C8E  0D0B               	mullw	11
  3026  002C90  0E01               	movlw	1
  3027  002C92  24F3               	addwf	prodl,w,c
  3028  002C94  0100               	movlb	0	; () banked
  3029  002C96  6FB3               	movwf	Loading@addr& (0+255),b
  3030  002C98  0E00               	movlw	0
  3031  002C9A  20F4               	addwfc	prodh,w,c
  3032  002C9C  0100               	movlb	0	; () banked
  3033  002C9E  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3037  002CA0  0E7F               	movlw	127
  3038  002CA2  0100               	movlb	0	; () banked
  3039  002CA4  6FB5               	movwf	Loading@byte1& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3043  002CA6  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3044  002CAA  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3045  002CAE  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3046  002CB2  EC9A  F019         	call	_EEPROM_write	;wreg free
  3047                           
  3048                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3049  002CB6  9A89               	bcf	3977,5,c	;volatile
  3050                           
  3051                           ;sort.c: 84: for(int i=0; i<46; i++){
  3052  002CB8  0E00               	movlw	0
  3053  002CBA  0100               	movlb	0	; () banked
  3054  002CBC  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3055  002CBE  0E00               	movlw	0
  3056  002CC0  6FB6               	movwf	Loading@i& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059  002CC2  0100               	movlb	0	; () banked
  3060  002CC4  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3061  002CC6  D008               	goto	l6326
  3062  002CC8  0100               	movlb	0	; () banked
  3063  002CCA  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3064  002CCC  E126               	bnz	l721
  3065  002CCE  0E2E               	movlw	46
  3066  002CD0  0100               	movlb	0	; () banked
  3067  002CD2  5DB6               	subwf	Loading@i& (0+255),w,b
  3068  002CD4  B0D8               	btfsc	status,0,c
  3069  002CD6  D021               	goto	l721
  3070  002CD8                     l6326:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3074  002CD8  BA89               	btfsc	3977,5,c	;volatile
  3075  002CDA  D004               	goto	u4770
  3076  002CDC  0100               	movlb	0	; () banked
  3077  002CDE  6BB1               	clrf	??_Loading& (0+255),b
  3078  002CE0  2BB1               	incf	??_Loading& (0+255),f,b
  3079  002CE2  D002               	goto	u4788
  3080  002CE4                     u4770:
  3081  002CE4  0100               	movlb	0	; () banked
  3082  002CE6  6BB1               	clrf	??_Loading& (0+255),b
  3083  002CE8                     u4788:
  3084  002CE8  0100               	movlb	0	; () banked
  3085  002CEA  3BB1               	swapf	??_Loading& (0+255),f,b
  3086  002CEC  47B1               	rlncf	??_Loading& (0+255),f,b
  3087  002CEE  5089               	movf	3977,w,c	;volatile
  3088  002CF0  0100               	movlb	0	; () banked
  3089  002CF2  19B1               	xorwf	??_Loading& (0+255),w,b
  3090  002CF4  0BDF               	andlw	-33
  3091  002CF6  19B1               	xorwf	??_Loading& (0+255),w,b
  3092  002CF8  6E89               	movwf	3977,c	;volatile
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;sort.c: 86: delay_ms(45-i);
  3096  002CFA  0100               	movlb	0	; () banked
  3097  002CFC  51B6               	movf	Loading@i& (0+255),w,b
  3098  002CFE  0800               	sublw	0
  3099  002D00  0F2D               	addlw	45
  3100  002D02  EC54  F022         	call	_delay_ms
  3101  002D06  0100               	movlb	0	; () banked
  3102  002D08  4BB6               	infsnz	Loading@i& (0+255),f,b
  3103  002D0A  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3104                           
  3105                           ; BSR set to: 0
  3106  002D0C  0100               	movlb	0	; () banked
  3107  002D0E  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3108  002D10  D7E3               	goto	l6326
  3109  002D12  0100               	movlb	0	; () banked
  3110  002D14  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3111  002D16  E101               	bnz	u4790
  3112  002D18  D7DA               	goto	L1
  3113  002D1A                     u4790:
  3114  002D1A                     l721:
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 87: }
  3118                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3119  002D1A  8A89               	bsf	3977,5,c	;volatile
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;sort.c: 91: initServos();
  3123  002D1C  EC27  F01F         	call	_initServos	;wreg free
  3124                           
  3125                           ;sort.c: 92: }
  3126  002D20  0012               	return	
  3127  002D22                     l6336:
  3128                           
  3129                           ;sort.c: 93: else{
  3130                           ;sort.c: 96: if(!f_loadingNewCan){
  3131  002D22  0100               	movlb	0	; () banked
  3132  002D24  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3133  002D26  0100               	movlb	0	; () banked
  3134  002D28  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3135  002D2A  A4D8               	btfss	status,2,c
  3136  002D2C  D017               	goto	l6352
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;sort.c: 98: getIR();
  3140  002D2E  ECCF  F01F         	call	_getIR	;wreg free
  3141                           
  3142                           ;sort.c: 100: if(!f_loadingNewCan){
  3143  002D32  0100               	movlb	0	; () banked
  3144  002D34  51E0               	movf	_f_loadingNewCan& (0+255),w,b
  3145  002D36  0100               	movlb	0	; () banked
  3146  002D38  11E1               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3147  002D3A  B4D8               	btfsc	status,2,c
  3148  002D3C  0012               	return	
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;sort.c: 104: else{
  3152                           ;sort.c: 105: count_total++;
  3153                           
  3154                           ; BSR set to: 0
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;sort.c: 102: }
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;sort.c: 101: return;
  3161  002D3E  0100               	movlb	0	; () banked
  3162  002D40  4BFE               	infsnz	_count_total& (0+255),f,b
  3163  002D42  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;sort.c: 106: if(count_total == 12){
  3167  002D44  0E0C               	movlw	12
  3168  002D46  0100               	movlb	0	; () banked
  3169  002D48  19FE               	xorwf	_count_total& (0+255),w,b
  3170  002D4A  0100               	movlb	0	; () banked
  3171  002D4C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3172  002D4E  A4D8               	btfss	status,2,c
  3173  002D50  0012               	return	
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 107: f_lastCan = 1;
  3177  002D52  0E00               	movlw	0
  3178  002D54  6E74               	movwf	_f_lastCan+1,c
  3179  002D56  0E01               	movlw	1
  3180  002D58  6E73               	movwf	_f_lastCan,c
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;sort.c: 108: }
  3184                           ;sort.c: 109: }
  3185                           ;sort.c: 110: }
  3186                           
  3187                           ; BSR set to: 0
  3188  002D5A  0012               	return	
  3189  002D5C                     l6352:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 113: else if(f_ID_receive){
  3193  002D5C  506D               	movf	_f_ID_receive,w,c
  3194  002D5E  106E               	iorwf	_f_ID_receive+1,w,c
  3195  002D60  B4D8               	btfsc	status,2,c
  3196  002D62  0012               	return	
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 114: f_loadingNewCan = 0;
  3200  002D64  0E00               	movlw	0
  3201  002D66  0100               	movlb	0	; () banked
  3202  002D68  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3203  002D6A  0E00               	movlw	0
  3204  002D6C  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3208  002D6E  8889               	bsf	3977,4,c	;volatile
  3209                           
  3210                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3211  002D70  0E00               	movlw	0
  3212  002D72  6E70               	movwf	_f_can_coming_to_ID+1,c
  3213  002D74  0E01               	movlw	1
  3214  002D76  6E6F               	movwf	_f_can_coming_to_ID,c
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3218  002D78  0E0D               	movlw	13
  3219  002D7A  0100               	movlb	0	; () banked
  3220  002D7C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3221  002D7E  0E2D               	movlw	45
  3222  002D80  0100               	movlb	0	; () banked
  3223  002D82  6FB1               	movwf	??_Loading& (0+255),b
  3224  002D84  0ED7               	movlw	215
  3225  002D86                     u6987:
  3226  002D86  2EE8               	decfsz	wreg,f,c
  3227  002D88  D7FE               	bra	u6987
  3228  002D8A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3229  002D8C  D7FC               	bra	u6987
  3230  002D8E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3231  002D90  D7FA               	bra	u6987
  3232  002D92  D000               	nop2	
  3233                           
  3234                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3235  002D94  9889               	bcf	3977,4,c	;volatile
  3236  002D96  0012               	return	
  3237  002D98                     __end_of_Loading:
  3238                           	opt stack 0
  3239                           tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           prodh	equ	0xFF4
  3244                           prodl	equ	0xFF3
  3245                           postinc0	equ	0xFEE
  3246                           wreg	equ	0xFE8
  3247                           postdec1	equ	0xFE5
  3248                           fsr1l	equ	0xFE1
  3249                           status	equ	0xFD8
  3250                           
  3251 ;; *************** function _initSortTimer *****************
  3252 ;; Defined at:
  3253 ;;		line 243 in file "sort.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  i               2    8[BANK0 ] int 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;Total ram usage:        5 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:   10
  3274 ;; This function calls:
  3275 ;;		_getRTC
  3276 ;; This function is called by:
  3277 ;;		_Loading
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text4
  3282  003668                     __ptext4:
  3283                           	opt stack 0
  3284  003668                     _initSortTimer:
  3285                           	opt stack 18
  3286                           
  3287                           ;sort.c: 245: getRTC();
  3288                           
  3289                           ;incstack = 0
  3290  003668  ECFA  F01C         	call	_getRTC	;wreg free
  3291                           
  3292                           ;sort.c: 246: for(int i = 0; i < 7; i++){
  3293  00366C  0E00               	movlw	0
  3294  00366E  0100               	movlb	0	; () banked
  3295  003670  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3296  003672  0E00               	movlw	0
  3297  003674  6F88               	movwf	initSortTimer@i& (0+255),b
  3298  003676                     l5932:
  3299                           
  3300                           ; BSR set to: 0
  3301  003676  0100               	movlb	0	; () banked
  3302  003678  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3303  00367A  D008               	goto	l5936
  3304  00367C  0100               	movlb	0	; () banked
  3305  00367E  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3306  003680  E140               	bnz	l5942
  3307  003682  0E07               	movlw	7
  3308  003684  0100               	movlb	0	; () banked
  3309  003686  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3310  003688  B0D8               	btfsc	status,0,c
  3311  00368A  D03B               	goto	l5942
  3312  00368C                     l5936:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;sort.c: 247: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3316  00368C  0E24               	movlw	low _time
  3317  00368E  0100               	movlb	0	; () banked
  3318  003690  2588               	addwf	initSortTimer@i& (0+255),w,b
  3319  003692  6ED9               	movwf	fsr2l,c
  3320  003694  0E01               	movlw	high _time
  3321  003696  0100               	movlb	0	; () banked
  3322  003698  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3323  00369A  6EDA               	movwf	fsr2h,c
  3324  00369C  50DF               	movf	indf2,w,c
  3325  00369E  0100               	movlb	0	; () banked
  3326  0036A0  6F85               	movwf	??_initSortTimer& (0+255),b
  3327  0036A2  0100               	movlb	0	; () banked
  3328  0036A4  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3329  0036A6  0E0F               	movlw	15
  3330  0036A8  1785               	andwf	??_initSortTimer& (0+255),f,b
  3331  0036AA  0E0F               	movlw	15
  3332  0036AC  0100               	movlb	0	; () banked
  3333  0036AE  1785               	andwf	??_initSortTimer& (0+255),f,b
  3334  0036B0  0100               	movlb	0	; () banked
  3335  0036B2  5185               	movf	??_initSortTimer& (0+255),w,b
  3336  0036B4  0D0A               	mullw	10
  3337  0036B6  0E24               	movlw	low _time
  3338  0036B8  0100               	movlb	0	; () banked
  3339  0036BA  2588               	addwf	initSortTimer@i& (0+255),w,b
  3340  0036BC  6ED9               	movwf	fsr2l,c
  3341  0036BE  0E01               	movlw	high _time
  3342  0036C0  0100               	movlb	0	; () banked
  3343  0036C2  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3344  0036C4  6EDA               	movwf	fsr2h,c
  3345  0036C6  50DF               	movf	indf2,w,c
  3346  0036C8  0B0F               	andlw	15
  3347  0036CA  0100               	movlb	0	; () banked
  3348  0036CC  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3349  0036CE  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3350  0036D0  50F3               	movf	prodl,w,c
  3351  0036D2  0100               	movlb	0	; () banked
  3352  0036D4  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3353  0036D6  50F4               	movf	prodh,w,c
  3354  0036D8  0100               	movlb	0	; () banked
  3355  0036DA  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3356  0036DC  90D8               	bcf	status,0,c
  3357  0036DE  0100               	movlb	0	; () banked
  3358  0036E0  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3359  0036E2  6ED9               	movwf	fsr2l,c
  3360  0036E4  0100               	movlb	0	; () banked
  3361  0036E6  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3362  0036E8  6EDA               	movwf	fsr2h,c
  3363  0036EA  0E0E               	movlw	low _startTime
  3364  0036EC  26D9               	addwf	fsr2l,f,c
  3365  0036EE  0E01               	movlw	high _startTime
  3366  0036F0  22DA               	addwfc	fsr2h,f,c
  3367  0036F2  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3368  0036F6  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3369                           
  3370                           ; BSR set to: 0
  3371  0036FA  0100               	movlb	0	; () banked
  3372  0036FC  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3373  0036FE  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3374  003700  D7BA               	goto	l5932
  3375  003702                     l5942:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;sort.c: 248: }
  3379                           ;sort.c: 250: T0CON = 0b00010111;
  3380  003702  0E17               	movlw	23
  3381  003704  6ED5               	movwf	4053,c	;volatile
  3382                           
  3383                           ;sort.c: 259: TMR0H = 0b10000101;
  3384  003706  0E85               	movlw	133
  3385  003708  6ED7               	movwf	4055,c	;volatile
  3386                           
  3387                           ;sort.c: 260: TMR0L = 0b11101110;
  3388  00370A  0EEE               	movlw	238
  3389  00370C  6ED6               	movwf	4054,c	;volatile
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;sort.c: 261: TMR0ON = 1;
  3393  00370E  8ED5               	bsf	4053,7,c	;volatile
  3394                           
  3395                           ; BSR set to: 0
  3396  003710  0012               	return		;funcret
  3397  003712                     __end_of_initSortTimer:
  3398                           	opt stack 0
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _initGlobalVars *****************
  3417 ;; Defined at:
  3418 ;;		line 224 in file "sort.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;Total ram usage:        0 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    7
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_Loading
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text5
  3447  003C5E                     __ptext5:
  3448                           	opt stack 0
  3449  003C5E                     _initGlobalVars:
  3450                           	opt stack 21
  3451                           
  3452                           ;sort.c: 226: first = 0;
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;incstack = 0
  3456  003C5E  0E00               	movlw	0
  3457  003C60  0100               	movlb	0	; () banked
  3458  003C62  6FE3               	movwf	(_first+1)& (0+255),b
  3459  003C64  0E00               	movlw	0
  3460  003C66  6FE2               	movwf	_first& (0+255),b
  3461                           
  3462                           ;sort.c: 229: f_loadingNewCan = 0;
  3463  003C68  0E00               	movlw	0
  3464  003C6A  0100               	movlb	0	; () banked
  3465  003C6C  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3466  003C6E  0E00               	movlw	0
  3467  003C70  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3468                           
  3469                           ;sort.c: 230: f_lastCan = 0;
  3470  003C72  0E00               	movlw	0
  3471  003C74  6E74               	movwf	_f_lastCan+1,c
  3472  003C76  0E00               	movlw	0
  3473  003C78  6E73               	movwf	_f_lastCan,c
  3474                           
  3475                           ;sort.c: 231: f_ID_receive = 1;
  3476  003C7A  0E00               	movlw	0
  3477  003C7C  6E6E               	movwf	_f_ID_receive+1,c
  3478  003C7E  0E01               	movlw	1
  3479  003C80  6E6D               	movwf	_f_ID_receive,c
  3480                           
  3481                           ;sort.c: 232: f_can_coming_to_ID = 0;
  3482  003C82  0E00               	movlw	0
  3483  003C84  6E70               	movwf	_f_can_coming_to_ID+1,c
  3484  003C86  0E00               	movlw	0
  3485  003C88  6E6F               	movwf	_f_can_coming_to_ID,c
  3486                           
  3487                           ;sort.c: 233: f_can_coming_to_distribution = 0;
  3488  003C8A  0E00               	movlw	0
  3489  003C8C  6E72               	movwf	_f_can_coming_to_distribution+1,c
  3490  003C8E  0E00               	movlw	0
  3491  003C90  6E71               	movwf	_f_can_coming_to_distribution,c
  3492                           
  3493                           ;sort.c: 234: f_can_distributed = 0;
  3494  003C92  0E00               	movlw	0
  3495  003C94  0101               	movlb	1	; () banked
  3496  003C96  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  3497  003C98  0E00               	movlw	0
  3498  003C9A  6F2D               	movwf	_f_can_distributed& (0+255),b
  3499                           
  3500                           ;sort.c: 237: count_total = 0;
  3501  003C9C  0E00               	movlw	0
  3502  003C9E  0100               	movlb	0	; () banked
  3503  003CA0  6FFF               	movwf	(_count_total+1)& (0+255),b
  3504  003CA2  0E00               	movlw	0
  3505  003CA4  6FFE               	movwf	_count_total& (0+255),b
  3506                           
  3507                           ;sort.c: 238: count_pop_no_tab = 0;
  3508  003CA6  0E00               	movlw	0
  3509  003CA8  6E62               	movwf	_count_pop_no_tab+1,c
  3510  003CAA  0E00               	movlw	0
  3511  003CAC  6E61               	movwf	_count_pop_no_tab,c
  3512                           
  3513                           ;sort.c: 239: count_pop_w_tab = 0;
  3514  003CAE  0E00               	movlw	0
  3515  003CB0  6E64               	movwf	_count_pop_w_tab+1,c
  3516  003CB2  0E00               	movlw	0
  3517  003CB4  6E63               	movwf	_count_pop_w_tab,c
  3518                           
  3519                           ;sort.c: 240: count_can_w_lab = 0;
  3520  003CB6  0E00               	movlw	0
  3521  003CB8  6E60               	movwf	_count_can_w_lab+1,c
  3522  003CBA  0E00               	movlw	0
  3523  003CBC  6E5F               	movwf	_count_can_w_lab,c
  3524                           
  3525                           ;sort.c: 241: count_can_no_lab = 0;
  3526  003CBE  0E00               	movlw	0
  3527  003CC0  6E5E               	movwf	_count_can_no_lab+1,c
  3528  003CC2  0E00               	movlw	0
  3529  003CC4  6E5D               	movwf	_count_can_no_lab,c
  3530                           
  3531                           ; BSR set to: 0
  3532  003CC6  0012               	return		;funcret
  3533  003CC8                     __end_of_initGlobalVars:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _getIR *****************
  3553 ;; Defined at:
  3554 ;;		line 300 in file "sort.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;Total ram usage:        2 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    9
  3575 ;; This function calls:
  3576 ;;		_readIR
  3577 ;; This function is called by:
  3578 ;;		_Loading
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text6
  3583  003F9E                     __ptext6:
  3584                           	opt stack 0
  3585  003F9E                     _getIR:
  3586                           	opt stack 19
  3587                           
  3588                           ;sort.c: 301: readIR();
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;incstack = 0
  3592  003F9E  ECF6  F01F         	call	_readIR	;wreg free
  3593                           
  3594                           ;sort.c: 302: if(IR_signal==1){
  3595  003FA2  0100               	movlb	0	; () banked
  3596  003FA4  05DA               	decf	_IR_signal& (0+255),w,b
  3597  003FA6  0100               	movlb	0	; () banked
  3598  003FA8  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3599  003FAA  A4D8               	btfss	status,2,c
  3600  003FAC  0012               	return	
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;sort.c: 303: _delay((unsigned long)((100)*(32000000/4000.0)));
  3604  003FAE  0E05               	movlw	5
  3605  003FB0  0100               	movlb	0	; () banked
  3606  003FB2  6F87               	movwf	(??_getIR+1)& (0+255),b
  3607  003FB4  0E0F               	movlw	15
  3608  003FB6  0100               	movlb	0	; () banked
  3609  003FB8  6F86               	movwf	??_getIR& (0+255),b
  3610  003FBA  0EF1               	movlw	241
  3611  003FBC                     u6997:
  3612  003FBC  2EE8               	decfsz	wreg,f,c
  3613  003FBE  D7FE               	bra	u6997
  3614  003FC0  2F86               	decfsz	??_getIR& (0+255),f,b
  3615  003FC2  D7FC               	bra	u6997
  3616  003FC4  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3617  003FC6  D7FA               	bra	u6997
  3618                           
  3619                           ;sort.c: 304: if(IR_signal==1){
  3620  003FC8  0100               	movlb	0	; () banked
  3621  003FCA  05DA               	decf	_IR_signal& (0+255),w,b
  3622  003FCC  0100               	movlb	0	; () banked
  3623  003FCE  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3624  003FD0  A4D8               	btfss	status,2,c
  3625  003FD2  D006               	goto	l6030
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;sort.c: 305: f_loadingNewCan = 1;
  3629  003FD4  0E00               	movlw	0
  3630  003FD6  0100               	movlb	0	; () banked
  3631  003FD8  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3632  003FDA  0E01               	movlw	1
  3633  003FDC  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3634                           
  3635                           ;sort.c: 306: }
  3636  003FDE  0012               	return	
  3637  003FE0                     l6030:
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;sort.c: 307: else{
  3641                           ;sort.c: 308: f_loadingNewCan = 0;
  3642  003FE0  0E00               	movlw	0
  3643  003FE2  0100               	movlb	0	; () banked
  3644  003FE4  6FE1               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3645  003FE6  0E00               	movlw	0
  3646  003FE8  6FE0               	movwf	_f_loadingNewCan& (0+255),b
  3647                           
  3648                           ; BSR set to: 0
  3649  003FEA  0012               	return	
  3650  003FEC                     __end_of_getIR:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           postdec1	equ	0xFE5
  3661                           fsr1l	equ	0xFE1
  3662                           indf2	equ	0xFDF
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _readIR *****************
  3670 ;; Defined at:
  3671 ;;		line 23 in file "ADCFunctionality.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  res             2    4[BANK0 ] int 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;Total ram usage:        4 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    8
  3692 ;; This function calls:
  3693 ;;		_readADC
  3694 ;; This function is called by:
  3695 ;;		_getIR
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text7
  3700  003FEC                     __ptext7:
  3701                           	opt stack 0
  3702  003FEC                     _readIR:
  3703                           	opt stack 19
  3704                           
  3705                           ;ADCFunctionality.c: 24: readADC(0);
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;incstack = 0
  3709  003FEC  0E00               	movlw	0
  3710  003FEE  EC29  F022         	call	_readADC
  3711                           
  3712                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3713  003FF2  50C3               	movf	4035,w,c	;volatile
  3714  003FF4  CFC4 F082          	movff	4036,??_readIR	;volatile
  3715  003FF8  0100               	movlb	0	; () banked
  3716  003FFA  6B83               	clrf	(??_readIR+1)& (0+255),b
  3717  003FFC  C082  F083         	movff	??_readIR,??_readIR+1
  3718  004000  0100               	movlb	0	; () banked
  3719  004002  6B82               	clrf	??_readIR& (0+255),b
  3720  004004  0100               	movlb	0	; () banked
  3721  004006  1182               	iorwf	??_readIR& (0+255),w,b
  3722  004008  0100               	movlb	0	; () banked
  3723  00400A  6F84               	movwf	readIR@res& (0+255),b
  3724  00400C  0100               	movlb	0	; () banked
  3725  00400E  5183               	movf	(??_readIR+1)& (0+255),w,b
  3726  004010  0100               	movlb	0	; () banked
  3727  004012  6F85               	movwf	(readIR@res+1)& (0+255),b
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  3731  004014  0100               	movlb	0	; () banked
  3732  004016  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3733  004018  D00A               	goto	u3740
  3734  00401A  0E85               	movlw	133
  3735  00401C  0100               	movlb	0	; () banked
  3736  00401E  5D84               	subwf	readIR@res& (0+255),w,b
  3737  004020  0E03               	movlw	3
  3738  004022  0100               	movlb	0	; () banked
  3739  004024  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3740  004026  A0D8               	btfss	status,0,c
  3741  004028  D002               	goto	u3740
  3742  00402A  0E01               	movlw	1
  3743  00402C  D001               	goto	u3750
  3744  00402E                     u3740:
  3745  00402E  0E00               	movlw	0
  3746  004030                     u3750:
  3747  004030  0100               	movlb	0	; () banked
  3748  004032  6FDA               	movwf	_IR_signal& (0+255),b
  3749  004034  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3750                           
  3751                           ; BSR set to: 0
  3752  004036  0012               	return		;funcret
  3753  004038                     __end_of_readIR:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           postdec1	equ	0xFE5
  3764                           fsr1l	equ	0xFE1
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _delay_ms *****************
  3773 ;; Defined at:
  3774 ;;		line 325 in file "sort.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  milliseconds    1    wreg     unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;Total ram usage:        2 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    7
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_Loading
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text8
  3803  0044A8                     __ptext8:
  3804                           	opt stack 0
  3805  0044A8                     _delay_ms:
  3806                           	opt stack 21
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;incstack = 0
  3810                           ;delay_ms@milliseconds stored from wreg
  3811  0044A8  0100               	movlb	0	; () banked
  3812  0044AA  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3813                           
  3814                           ;sort.c: 326: while(milliseconds > 0)
  3815  0044AC  D00B               	goto	l6004
  3816  0044AE                     l6000:
  3817                           
  3818                           ;sort.c: 327: {
  3819                           ;sort.c: 328: milliseconds--;
  3820  0044AE  0100               	movlb	0	; () banked
  3821  0044B0  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;sort.c: 329: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3825  0044B2  0E0B               	movlw	11
  3826  0044B4  0100               	movlb	0	; () banked
  3827  0044B6  6F80               	movwf	??_delay_ms& (0+255),b
  3828  0044B8  0E47               	movlw	71
  3829  0044BA                     u7007:
  3830  0044BA  2EE8               	decfsz	wreg,f,c
  3831  0044BC  D7FE               	bra	u7007
  3832  0044BE  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3833  0044C0  D7FC               	bra	u7007
  3834  0044C2  D000               	nop2	
  3835  0044C4                     l6004:
  3836  0044C4  0100               	movlb	0	; () banked
  3837  0044C6  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3838  0044C8  0100               	movlb	0	; () banked
  3839  0044CA  B4D8               	btfsc	status,2,c
  3840  0044CC  0012               	return	
  3841  0044CE  D7EF               	goto	l6000
  3842  0044D0                     __end_of_delay_ms:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           indf2	equ	0xFDF
  3855                           postinc2	equ	0xFDE
  3856                           postdec2	equ	0xFDD
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _ID *****************
  3862 ;; Defined at:
  3863 ;;		line 122 in file "sort.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  i               2    8[BANK0 ] int 
  3868 ;;  sensor_outpu    6   10[BANK0 ] int [3]
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;Total ram usage:       10 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    9
  3885 ;; This function calls:
  3886 ;;		_readMAG
  3887 ;; This function is called by:
  3888 ;;		_sort
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text9
  3893  002AF0                     __ptext9:
  3894                           	opt stack 0
  3895  002AF0                     _ID:
  3896                           	opt stack 20
  3897                           
  3898                           ;sort.c: 123: if(f_can_coming_to_ID){
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;incstack = 0
  3902  002AF0  506F               	movf	_f_can_coming_to_ID,w,c
  3903  002AF2  1070               	iorwf	_f_can_coming_to_ID+1,w,c
  3904  002AF4  B4D8               	btfsc	status,2,c
  3905  002AF6  0012               	return	
  3906                           
  3907                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3908  002AF8  0E15               	movlw	21
  3909  002AFA  0100               	movlb	0	; () banked
  3910  002AFC  6F87               	movwf	(??_ID+1)& (0+255),b
  3911  002AFE  0E4B               	movlw	75
  3912  002B00  0100               	movlb	0	; () banked
  3913  002B02  6F86               	movwf	??_ID& (0+255),b
  3914  002B04  0EBE               	movlw	190
  3915  002B06                     u7017:
  3916  002B06  2EE8               	decfsz	wreg,f,c
  3917  002B08  D7FE               	bra	u7017
  3918  002B0A  2F86               	decfsz	??_ID& (0+255),f,b
  3919  002B0C  D7FC               	bra	u7017
  3920  002B0E  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3921  002B10  D7FA               	bra	u7017
  3922  002B12  F000               	nop	
  3923                           
  3924                           ;sort.c: 130: int sensor_outputs[3];
  3925                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3926  002B14  A480               	btfss	3968,2,c	;volatile
  3927  002B16  D004               	goto	u4850
  3928  002B18  0100               	movlb	0	; () banked
  3929  002B1A  6B86               	clrf	??_ID& (0+255),b
  3930  002B1C  2B86               	incf	??_ID& (0+255),f,b
  3931  002B1E  D002               	goto	u4858
  3932  002B20                     u4850:
  3933  002B20  0100               	movlb	0	; () banked
  3934  002B22  6B86               	clrf	??_ID& (0+255),b
  3935  002B24                     u4858:
  3936  002B24  0100               	movlb	0	; () banked
  3937  002B26  5186               	movf	??_ID& (0+255),w,b
  3938  002B28  0100               	movlb	0	; () banked
  3939  002B2A  6F8A               	movwf	ID@sensor_outputs& (0+255),b
  3940  002B2C  6B8B               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;sort.c: 136: if(!sensor_outputs[0]){
  3944  002B2E  0100               	movlb	0	; () banked
  3945  002B30  518A               	movf	ID@sensor_outputs& (0+255),w,b
  3946  002B32  0100               	movlb	0	; () banked
  3947  002B34  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3948  002B36  A4D8               	btfss	status,2,c
  3949  002B38  D029               	goto	l6384
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;sort.c: 137: readMAG();
  3953  002B3A  EC1C  F020         	call	_readMAG	;wreg free
  3954                           
  3955                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3956  002B3E  C0DC  F08C         	movff	_MAG_signal,ID@sensor_outputs+2
  3957  002B42  C0DD  F08D         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3958                           
  3959                           ;sort.c: 139: if(!sensor_outputs[1]){
  3960  002B46  0100               	movlb	0	; () banked
  3961  002B48  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3962  002B4A  0100               	movlb	0	; () banked
  3963  002B4C  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3964  002B4E  A4D8               	btfss	status,2,c
  3965  002B50  D01D               	goto	l6384
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3969  002B52  8689               	bsf	3977,3,c	;volatile
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3973  002B54  0E0D               	movlw	13
  3974  002B56  0100               	movlb	0	; () banked
  3975  002B58  6F87               	movwf	(??_ID+1)& (0+255),b
  3976  002B5A  0E2D               	movlw	45
  3977  002B5C  0100               	movlb	0	; () banked
  3978  002B5E  6F86               	movwf	??_ID& (0+255),b
  3979  002B60  0ED7               	movlw	215
  3980  002B62                     u7027:
  3981  002B62  2EE8               	decfsz	wreg,f,c
  3982  002B64  D7FE               	bra	u7027
  3983  002B66  2F86               	decfsz	??_ID& (0+255),f,b
  3984  002B68  D7FC               	bra	u7027
  3985  002B6A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3986  002B6C  D7FA               	bra	u7027
  3987  002B6E  D000               	nop2	
  3988                           
  3989                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  3990  002B70  A480               	btfss	3968,2,c	;volatile
  3991  002B72  D004               	goto	u4880
  3992  002B74  0100               	movlb	0	; () banked
  3993  002B76  6B86               	clrf	??_ID& (0+255),b
  3994  002B78  2B86               	incf	??_ID& (0+255),f,b
  3995  002B7A  D002               	goto	u4888
  3996  002B7C                     u4880:
  3997  002B7C  0100               	movlb	0	; () banked
  3998  002B7E  6B86               	clrf	??_ID& (0+255),b
  3999  002B80                     u4888:
  4000  002B80  0100               	movlb	0	; () banked
  4001  002B82  5186               	movf	??_ID& (0+255),w,b
  4002  002B84  0100               	movlb	0	; () banked
  4003  002B86  6F8E               	movwf	(ID@sensor_outputs+4)& (0+255),b
  4004  002B88  6B8F               	clrf	(ID@sensor_outputs+5)& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;sort.c: 144: LATAbits.LATA3 = 0;
  4008  002B8A  9689               	bcf	3977,3,c	;volatile
  4009  002B8C                     l6384:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;sort.c: 145: }
  4013                           ;sort.c: 146: }
  4014                           ;sort.c: 149: if(!sensor_outputs[0]){
  4015  002B8C  0100               	movlb	0	; () banked
  4016  002B8E  518A               	movf	ID@sensor_outputs& (0+255),w,b
  4017  002B90  0100               	movlb	0	; () banked
  4018  002B92  118B               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4019  002B94  A4D8               	btfss	status,2,c
  4020  002B96  D01E               	goto	l6402
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;sort.c: 150: if(!sensor_outputs[1]){
  4024  002B98  0100               	movlb	0	; () banked
  4025  002B9A  518C               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4026  002B9C  0100               	movlb	0	; () banked
  4027  002B9E  118D               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4028  002BA0  A4D8               	btfss	status,2,c
  4029  002BA2  D012               	goto	l6398
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;sort.c: 151: if(!sensor_outputs[2]){
  4033  002BA4  0100               	movlb	0	; () banked
  4034  002BA6  518E               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  4035  002BA8  0100               	movlb	0	; () banked
  4036  002BAA  118F               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  4037  002BAC  A4D8               	btfss	status,2,c
  4038  002BAE  D006               	goto	l6394
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 152: count_pop_no_tab++;
  4042  002BB0  4A61               	infsnz	_count_pop_no_tab,f,c
  4043  002BB2  2A62               	incf	_count_pop_no_tab+1,f,c
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;sort.c: 153: cur_can = 0;
  4047  002BB4  0E00               	movlw	0
  4048  002BB6  6E66               	movwf	_cur_can+1,c
  4049  002BB8  0E00               	movlw	0
  4050  002BBA  D011               	goto	L4
  4051  002BBC                     l6394:
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;sort.c: 155: else{
  4055                           ;sort.c: 156: count_pop_w_tab++;
  4056  002BBC  4A63               	infsnz	_count_pop_w_tab,f,c
  4057  002BBE  2A64               	incf	_count_pop_w_tab+1,f,c
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;sort.c: 157: cur_can = 1;
  4061  002BC0  0E00               	movlw	0
  4062  002BC2  6E66               	movwf	_cur_can+1,c
  4063  002BC4  0E01               	movlw	1
  4064  002BC6  D00B               	goto	L4
  4065  002BC8                     l6398:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;sort.c: 160: else{
  4069                           ;sort.c: 161: count_can_w_lab++;
  4070  002BC8  4A5F               	infsnz	_count_can_w_lab,f,c
  4071  002BCA  2A60               	incf	_count_can_w_lab+1,f,c
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;sort.c: 162: cur_can = 2;
  4075  002BCC  0E00               	movlw	0
  4076  002BCE  6E66               	movwf	_cur_can+1,c
  4077  002BD0  0E02               	movlw	2
  4078  002BD2  D005               	goto	L4
  4079  002BD4                     l6402:
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;sort.c: 165: else{
  4083                           ;sort.c: 166: count_can_no_lab++;
  4084  002BD4  4A5D               	infsnz	_count_can_no_lab,f,c
  4085  002BD6  2A5E               	incf	_count_can_no_lab+1,f,c
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;sort.c: 167: cur_can = 3;
  4089  002BD8  0E00               	movlw	0
  4090  002BDA  6E66               	movwf	_cur_can+1,c
  4091  002BDC  0E03               	movlw	3
  4092  002BDE                     L4:
  4093  002BDE  6E65               	movwf	_cur_can,c
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;sort.c: 168: }
  4097                           ;sort.c: 172: for(int i=0;i<10000;i++)
  4098                           
  4099                           ; BSR set to: 0
  4100  002BE0  0E00               	movlw	0
  4101  002BE2  0100               	movlb	0	; () banked
  4102  002BE4  6F89               	movwf	(ID@i+1)& (0+255),b
  4103  002BE6  0E00               	movlw	0
  4104  002BE8  6F88               	movwf	ID@i& (0+255),b
  4105  002BEA                     l6408:
  4106                           
  4107                           ; BSR set to: 0
  4108  002BEA  0100               	movlb	0	; () banked
  4109  002BEC  BF89               	btfsc	(ID@i+1)& (0+255),7,b
  4110  002BEE  D008               	goto	l741
  4111  002BF0  0E10               	movlw	16
  4112  002BF2  0100               	movlb	0	; () banked
  4113  002BF4  5D88               	subwf	ID@i& (0+255),w,b
  4114  002BF6  0E27               	movlw	39
  4115  002BF8  0100               	movlb	0	; () banked
  4116  002BFA  5989               	subwfb	(ID@i+1)& (0+255),w,b
  4117  002BFC  B0D8               	btfsc	status,0,c
  4118  002BFE  D00D               	goto	l6418
  4119  002C00                     l741:
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;sort.c: 173: {
  4123                           ;sort.c: 174: LATCbits.LATC0 = 1;
  4124  002C00  808B               	bsf	3979,0,c	;volatile
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;sort.c: 175: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4128  002C02  0E1A               	movlw	26
  4129  002C04                     u7037:
  4130  002C04  2EE8               	decfsz	wreg,f,c
  4131  002C06  D7FE               	bra	u7037
  4132  002C08  D000               	nop2	
  4133                           
  4134                           ;sort.c: 176: LATCbits.LATC0 = 0;
  4135  002C0A  908B               	bcf	3979,0,c	;volatile
  4136                           
  4137                           ;sort.c: 177: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4138  002C0C  0EF0               	movlw	240
  4139  002C0E                     u7047:
  4140  002C0E  2EE8               	decfsz	wreg,f,c
  4141  002C10  D7FE               	bra	u7047
  4142  002C12  0100               	movlb	0	; () banked
  4143  002C14  4B88               	infsnz	ID@i& (0+255),f,b
  4144  002C16  2B89               	incf	(ID@i+1)& (0+255),f,b
  4145  002C18  D7E8               	goto	l6408
  4146  002C1A                     l6418:
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;sort.c: 178: }
  4150                           ;sort.c: 180: f_can_coming_to_distribution = 1;
  4151  002C1A  0E00               	movlw	0
  4152  002C1C  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4153  002C1E  0E01               	movlw	1
  4154  002C20  6E71               	movwf	_f_can_coming_to_distribution,c
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;sort.c: 181: _delay((unsigned long)((500)*(32000000/4000.0)));
  4158  002C22  0E15               	movlw	21
  4159  002C24  0100               	movlb	0	; () banked
  4160  002C26  6F87               	movwf	(??_ID+1)& (0+255),b
  4161  002C28  0E4B               	movlw	75
  4162  002C2A  0100               	movlb	0	; () banked
  4163  002C2C  6F86               	movwf	??_ID& (0+255),b
  4164  002C2E  0EBE               	movlw	190
  4165  002C30                     u7057:
  4166  002C30  2EE8               	decfsz	wreg,f,c
  4167  002C32  D7FE               	bra	u7057
  4168  002C34  2F86               	decfsz	??_ID& (0+255),f,b
  4169  002C36  D7FC               	bra	u7057
  4170  002C38  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4171  002C3A  D7FA               	bra	u7057
  4172  002C3C  F000               	nop	
  4173                           
  4174                           ;sort.c: 182: LATCbits.LATC0 = 1;
  4175  002C3E  808B               	bsf	3979,0,c	;volatile
  4176                           
  4177                           ;sort.c: 184: f_can_coming_to_ID = 0;
  4178  002C40  0E00               	movlw	0
  4179  002C42  6E70               	movwf	_f_can_coming_to_ID+1,c
  4180  002C44  0E00               	movlw	0
  4181  002C46  6E6F               	movwf	_f_can_coming_to_ID,c
  4182  002C48  0012               	return	
  4183  002C4A                     __end_of_ID:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _Distribution *****************
  4203 ;; Defined at:
  4204 ;;		line 187 in file "sort.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2, status,0, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;Total ram usage:        2 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    8
  4225 ;; This function calls:
  4226 ;;		_updateServoPosition
  4227 ;; This function is called by:
  4228 ;;		_sort
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text10
  4233  002D98                     __ptext10:
  4234                           	opt stack 0
  4235  002D98                     _Distribution:
  4236                           	opt stack 21
  4237                           
  4238                           ;sort.c: 188: if(f_can_coming_to_distribution){
  4239                           
  4240                           ;incstack = 0
  4241  002D98  5071               	movf	_f_can_coming_to_distribution,w,c
  4242  002D9A  1072               	iorwf	_f_can_coming_to_distribution+1,w,c
  4243  002D9C  B4D8               	btfsc	status,2,c
  4244  002D9E  0012               	return	
  4245  002DA0  D034               	goto	l6440
  4246  002DA2                     l6430:
  4247                           
  4248                           ;sort.c: 193: updateServoPosition(500, 1);
  4249  002DA2  0E01               	movlw	1
  4250  002DA4  0100               	movlb	0	; () banked
  4251  002DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4252  002DA8  0EF4               	movlw	244
  4253  002DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4254  002DAC  0E00               	movlw	0
  4255  002DAE  0100               	movlb	0	; () banked
  4256  002DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4257  002DB2  0E01               	movlw	1
  4258  002DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4259  002DB6  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4260                           
  4261                           ;sort.c: 194: break;
  4262  002DBA  D03E               	goto	l6442
  4263  002DBC                     l6432:
  4264                           
  4265                           ;sort.c: 196: updateServoPosition(750, 1);
  4266  002DBC  0E02               	movlw	2
  4267  002DBE  0100               	movlb	0	; () banked
  4268  002DC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4269  002DC2  0EEE               	movlw	238
  4270  002DC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4271  002DC6  0E00               	movlw	0
  4272  002DC8  0100               	movlb	0	; () banked
  4273  002DCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4274  002DCC  0E01               	movlw	1
  4275  002DCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4276  002DD0  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4277                           
  4278                           ;sort.c: 197: break;
  4279  002DD4  D031               	goto	l6442
  4280  002DD6                     l6434:
  4281                           
  4282                           ;sort.c: 199: updateServoPosition(1700, 1);
  4283  002DD6  0E06               	movlw	6
  4284  002DD8  0100               	movlb	0	; () banked
  4285  002DDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4286  002DDC  0EA4               	movlw	164
  4287  002DDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4288  002DE0  0E00               	movlw	0
  4289  002DE2  0100               	movlb	0	; () banked
  4290  002DE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4291  002DE6  0E01               	movlw	1
  4292  002DE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4293  002DEA  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4294                           
  4295                           ;sort.c: 200: break;
  4296  002DEE  D024               	goto	l6442
  4297  002DF0                     l6436:
  4298                           
  4299                           ;sort.c: 202: updateServoPosition(2000, 1);
  4300  002DF0  0E07               	movlw	7
  4301  002DF2  0100               	movlb	0	; () banked
  4302  002DF4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4303  002DF6  0ED0               	movlw	208
  4304  002DF8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4305  002DFA  0E00               	movlw	0
  4306  002DFC  0100               	movlb	0	; () banked
  4307  002DFE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4308  002E00  0E01               	movlw	1
  4309  002E02  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4310  002E04  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4311                           
  4312                           ;sort.c: 206: }
  4313                           
  4314                           ;sort.c: 205: break;
  4315                           
  4316                           ;sort.c: 204: default:
  4317                           
  4318                           ;sort.c: 203: break;
  4319  002E08  D017               	goto	l6442
  4320  002E0A                     l6440:
  4321  002E0A  C065  F088         	movff	_cur_can,??_Distribution
  4322  002E0E  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4323                           
  4324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4325                           ; Switch size 1, requested type "space"
  4326                           ; Number of cases is 1, Range of values is 0 to 0
  4327                           ; switch strategies available:
  4328                           ; Name         Instructions Cycles
  4329                           ; simple_byte            4     3 (average)
  4330                           ;	Chosen strategy is simple_byte
  4331  002E12  0100               	movlb	0	; () banked
  4332  002E14  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4333  002E16  0A00               	xorlw	0	; case 0
  4334  002E18  A4D8               	btfss	status,2,c
  4335  002E1A  D00E               	goto	l6442
  4336                           
  4337                           ; BSR set to: 0
  4338                           ; Switch size 1, requested type "space"
  4339                           ; Number of cases is 4, Range of values is 0 to 3
  4340                           ; switch strategies available:
  4341                           ; Name         Instructions Cycles
  4342                           ; simple_byte           13     7 (average)
  4343                           ;	Chosen strategy is simple_byte
  4344  002E1C  0100               	movlb	0	; () banked
  4345  002E1E  5188               	movf	??_Distribution& (0+255),w,b
  4346  002E20  0A00               	xorlw	0	; case 0
  4347  002E22  B4D8               	btfsc	status,2,c
  4348  002E24  D7BE               	goto	l6430
  4349  002E26  0A01               	xorlw	1	; case 1
  4350  002E28  B4D8               	btfsc	status,2,c
  4351  002E2A  D7C8               	goto	l6432
  4352  002E2C  0A03               	xorlw	3	; case 2
  4353  002E2E  B4D8               	btfsc	status,2,c
  4354  002E30  D7D2               	goto	l6434
  4355  002E32  0A01               	xorlw	1	; case 3
  4356  002E34  B4D8               	btfsc	status,2,c
  4357  002E36  D7DC               	goto	l6436
  4358  002E38                     l6442:
  4359                           
  4360                           ;sort.c: 207: _delay((unsigned long)((1000)*(32000000/4000.0)));
  4361  002E38  0E29               	movlw	41
  4362  002E3A  0100               	movlb	0	; () banked
  4363  002E3C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4364  002E3E  0E96               	movlw	150
  4365  002E40  0100               	movlb	0	; () banked
  4366  002E42  6F88               	movwf	??_Distribution& (0+255),b
  4367  002E44  0E7F               	movlw	127
  4368  002E46                     u7067:
  4369  002E46  2EE8               	decfsz	wreg,f,c
  4370  002E48  D7FE               	bra	u7067
  4371  002E4A  2F88               	decfsz	??_Distribution& (0+255),f,b
  4372  002E4C  D7FC               	bra	u7067
  4373  002E4E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4374  002E50  D7FA               	bra	u7067
  4375                           
  4376                           ;sort.c: 210: updateServoPosition(1350, 3);
  4377  002E52  0E05               	movlw	5
  4378  002E54  0100               	movlb	0	; () banked
  4379  002E56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4380  002E58  0E46               	movlw	70
  4381  002E5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4382  002E5C  0E00               	movlw	0
  4383  002E5E  0100               	movlb	0	; () banked
  4384  002E60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4385  002E62  0E03               	movlw	3
  4386  002E64  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4387  002E66  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4388                           
  4389                           ;sort.c: 211: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4390  002E6A  0E3D               	movlw	61
  4391  002E6C  0100               	movlb	0	; () banked
  4392  002E6E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4393  002E70  0EE1               	movlw	225
  4394  002E72  0100               	movlb	0	; () banked
  4395  002E74  6F88               	movwf	??_Distribution& (0+255),b
  4396  002E76  0E3F               	movlw	63
  4397  002E78                     u7077:
  4398  002E78  2EE8               	decfsz	wreg,f,c
  4399  002E7A  D7FE               	bra	u7077
  4400  002E7C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4401  002E7E  D7FC               	bra	u7077
  4402  002E80  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4403  002E82  D7FA               	bra	u7077
  4404  002E84  D000               	nop2	
  4405                           
  4406                           ;sort.c: 214: updateServoPosition(1200, 1);
  4407  002E86  0E04               	movlw	4
  4408  002E88  0100               	movlb	0	; () banked
  4409  002E8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4410  002E8C  0EB0               	movlw	176
  4411  002E8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4412  002E90  0E00               	movlw	0
  4413  002E92  0100               	movlb	0	; () banked
  4414  002E94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4415  002E96  0E01               	movlw	1
  4416  002E98  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4417  002E9A  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4418                           
  4419                           ;sort.c: 215: updateServoPosition(1190, 3);
  4420  002E9E  0E04               	movlw	4
  4421  002EA0  0100               	movlb	0	; () banked
  4422  002EA2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4423  002EA4  0EA6               	movlw	166
  4424  002EA6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4425  002EA8  0E00               	movlw	0
  4426  002EAA  0100               	movlb	0	; () banked
  4427  002EAC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4428  002EAE  0E03               	movlw	3
  4429  002EB0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4430  002EB2  ECBB  F01D         	call	_updateServoPosition	;wreg free
  4431                           
  4432                           ;sort.c: 216: f_can_coming_to_distribution = 0;
  4433  002EB6  0E00               	movlw	0
  4434  002EB8  6E72               	movwf	_f_can_coming_to_distribution+1,c
  4435  002EBA  0E00               	movlw	0
  4436  002EBC  6E71               	movwf	_f_can_coming_to_distribution,c
  4437                           
  4438                           ;sort.c: 217: f_can_distributed = 1;
  4439  002EBE  0E00               	movlw	0
  4440  002EC0  0101               	movlb	1	; () banked
  4441  002EC2  6F2E               	movwf	(_f_can_distributed+1)& (0+255),b
  4442  002EC4  0E01               	movlw	1
  4443  002EC6  6F2D               	movwf	_f_can_distributed& (0+255),b
  4444                           
  4445                           ; BSR set to: 1
  4446                           ;sort.c: 218: if(f_lastCan == 1){
  4447  002EC8  0473               	decf	_f_lastCan,w,c
  4448  002ECA  1074               	iorwf	_f_lastCan+1,w,c
  4449  002ECC  A4D8               	btfss	status,2,c
  4450  002ECE  0012               	return	
  4451                           
  4452                           ; BSR set to: 1
  4453                           ;sort.c: 219: machine_state = DoneSorting_state;
  4454  002ED0  0E02               	movlw	2
  4455  002ED2  0100               	movlb	0	; () banked
  4456  002ED4  6FFC               	movwf	_machine_state& (0+255),b
  4457                           
  4458                           ; BSR set to: 0
  4459  002ED6  0012               	return	
  4460  002ED8                     __end_of_Distribution:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1l	equ	0xFE1
  4472                           indf2	equ	0xFDF
  4473                           postinc2	equ	0xFDE
  4474                           postdec2	equ	0xFDD
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _machineConfig *****************
  4480 ;; Defined at:
  4481 ;;		line 15 in file "MachineConfig.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;		None
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      void 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:        0 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    7
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text11
  4510  003DF2                     __ptext11:
  4511                           	opt stack 0
  4512  003DF2                     _machineConfig:
  4513                           	opt stack 23
  4514                           
  4515                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4516                           
  4517                           ;incstack = 0
  4518  003DF2  0EF0               	movlw	240
  4519  003DF4  6ED3               	movwf	4051,c	;volatile
  4520                           
  4521                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4522  003DF6  8C9B               	bsf	3995,6,c	;volatile
  4523                           
  4524                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4525  003DF8  0E07               	movlw	7
  4526  003DFA  6E92               	movwf	3986,c	;volatile
  4527                           
  4528                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4529  003DFC  0EF2               	movlw	242
  4530  003DFE  6E93               	movwf	3987,c	;volatile
  4531                           
  4532                           ;MachineConfig.c: 27: TRISC = 0x00;
  4533  003E00  0E00               	movlw	0
  4534  003E02  6E94               	movwf	3988,c	;volatile
  4535                           
  4536                           ;MachineConfig.c: 31: TRISD = 0x00;
  4537  003E04  0E00               	movlw	0
  4538  003E06  6E95               	movwf	3989,c	;volatile
  4539                           
  4540                           ;MachineConfig.c: 34: TRISE = 0x00;
  4541  003E08  0E00               	movlw	0
  4542  003E0A  6E96               	movwf	3990,c	;volatile
  4543                           
  4544                           ;MachineConfig.c: 37: LATA = 0x00;
  4545  003E0C  0E00               	movlw	0
  4546  003E0E  6E89               	movwf	3977,c	;volatile
  4547                           
  4548                           ;MachineConfig.c: 38: LATB = 0x00;
  4549  003E10  0E00               	movlw	0
  4550  003E12  6E8A               	movwf	3978,c	;volatile
  4551                           
  4552                           ;MachineConfig.c: 39: LATC = 0x00;
  4553  003E14  0E00               	movlw	0
  4554  003E16  6E8B               	movwf	3979,c	;volatile
  4555                           
  4556                           ;MachineConfig.c: 40: LATD = 0x00;
  4557  003E18  0E00               	movlw	0
  4558  003E1A  6E8C               	movwf	3980,c	;volatile
  4559                           
  4560                           ;MachineConfig.c: 41: LATE = 0x00;
  4561  003E1C  0E00               	movlw	0
  4562  003E1E  6E8D               	movwf	3981,c	;volatile
  4563                           
  4564                           ;MachineConfig.c: 43: nRBPU = 0;
  4565  003E20  9EF1               	bcf	intcon2,7,c	;volatile
  4566                           
  4567                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4568  003E22  0E00               	movlw	0
  4569  003E24  6EC2               	movwf	4034,c	;volatile
  4570                           
  4571                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4572  003E26  0E0D               	movlw	13
  4573  003E28  6EC1               	movwf	4033,c	;volatile
  4574                           
  4575                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4576  003E2A  0E00               	movlw	0
  4577  003E2C  6EB5               	movwf	4021,c	;volatile
  4578                           
  4579                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4580  003E2E  96B4               	bcf	4020,3,c	;volatile
  4581                           
  4582                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4583  003E30  0EB1               	movlw	177
  4584  003E32  6EC0               	movwf	4032,c	;volatile
  4585                           
  4586                           ;MachineConfig.c: 55: INT1IE = 1;
  4587  003E34  86F0               	bsf	intcon3,3,c	;volatile
  4588                           
  4589                           ;MachineConfig.c: 57: TMR0IE = 1;
  4590  003E36  8AF2               	bsf	intcon,5,c	;volatile
  4591                           
  4592                           ;MachineConfig.c: 58: TMR1IE = 1;
  4593  003E38  809D               	bsf	3997,0,c	;volatile
  4594                           
  4595                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4596  003E3A  0EB0               	movlw	176
  4597  003E3C  6ECD               	movwf	4045,c	;volatile
  4598                           
  4599                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4600  003E3E  0EB0               	movlw	176
  4601  003E40  6EB1               	movwf	4017,c	;volatile
  4602                           
  4603                           ;MachineConfig.c: 61: TMR2IE = 1;
  4604  003E42  829D               	bsf	3997,1,c	;volatile
  4605                           
  4606                           ;MachineConfig.c: 62: TMR3IE = 1;
  4607  003E44  82A0               	bsf	4000,1,c	;volatile
  4608                           
  4609                           ;MachineConfig.c: 63: PEIE = 1;
  4610  003E46  8CF2               	bsf	intcon,6,c	;volatile
  4611                           
  4612                           ;MachineConfig.c: 64: ADIE = 0;
  4613  003E48  9C9D               	bcf	3997,6,c	;volatile
  4614                           
  4615                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4616  003E4A  9EF2               	bcf	intcon,7,c	;volatile
  4617  003E4C  0012               	return		;funcret
  4618  003E4E                     __end_of_machineConfig:
  4619                           	opt stack 0
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           intcon	equ	0xFF2
  4627                           intcon2	equ	0xFF1
  4628                           intcon3	equ	0xFF0
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           postdec1	equ	0xFE5
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           postinc2	equ	0xFDE
  4635                           postdec2	equ	0xFDD
  4636                           fsr2h	equ	0xFDA
  4637                           fsr2l	equ	0xFD9
  4638                           status	equ	0xFD8
  4639                           
  4640 ;; *************** function _logRun *****************
  4641 ;; Defined at:
  4642 ;;		line 84 in file "EEPROM.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4647 ;;  i               2   55[BANK0 ] int 
  4648 ;;  num             1   49[BANK0 ] unsigned char 
  4649 ;;  addr            2   57[BANK0 ] unsigned short 
  4650 ;;  byte11          1   54[BANK0 ] unsigned char 
  4651 ;;  byte3           1   52[BANK0 ] unsigned char 
  4652 ;;  byte2           1   51[BANK0 ] unsigned char 
  4653 ;;  byte1           1   50[BANK0 ] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;Total ram usage:       10 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:   11
  4670 ;; This function calls:
  4671 ;;		_EEPROM_read
  4672 ;;		_EEPROM_write
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text12
  4679  002ED8                     __ptext12:
  4680                           	opt stack 0
  4681  002ED8                     _logRun:
  4682                           	opt stack 19
  4683                           
  4684                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4685                           
  4686                           ;incstack = 0
  4687  002ED8  0E00               	movlw	0
  4688  002EDA  0100               	movlb	0	; () banked
  4689  002EDC  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4690  002EDE  0E00               	movlw	0
  4691  002EE0  6F80               	movwf	EEPROM_read@address& (0+255),b
  4692  002EE2  ECF7  F022         	call	_EEPROM_read	;wreg free
  4693  002EE6  0100               	movlb	0	; () banked
  4694  002EE8  6FFD               	movwf	_sel& (0+255),b
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4698  002EEA  0100               	movlb	0	; () banked
  4699  002EEC  51FD               	movf	_sel& (0+255),w,b
  4700  002EEE  0D0B               	mullw	11
  4701  002EF0  0E01               	movlw	1
  4702  002EF2  24F3               	addwf	prodl,w,c
  4703  002EF4  0100               	movlb	0	; () banked
  4704  002EF6  6FB9               	movwf	logRun@addr& (0+255),b
  4705  002EF8  0E00               	movlw	0
  4706  002EFA  20F4               	addwfc	prodh,w,c
  4707  002EFC  0100               	movlb	0	; () banked
  4708  002EFE  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;EEPROM.c: 101: if (sel < 3){
  4712  002F00  0E03               	movlw	3
  4713  002F02  0100               	movlb	0	; () banked
  4714  002F04  61FD               	cpfslt	_sel& (0+255),b
  4715  002F06  D00E               	goto	l7870
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4719  002F08  0100               	movlb	0	; () banked
  4720  002F0A  29FD               	incf	_sel& (0+255),w,b
  4721  002F0C  0100               	movlb	0	; () banked
  4722  002F0E  6FB1               	movwf	logRun@num& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4726  002F10  0E00               	movlw	0
  4727  002F12  0100               	movlb	0	; () banked
  4728  002F14  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4729  002F16  0E00               	movlw	0
  4730  002F18  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4731  002F1A  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4732  002F1E  EC9A  F019         	call	_EEPROM_write	;wreg free
  4733                           
  4734                           ;EEPROM.c: 104: }
  4735  002F22  D00A               	goto	l7872
  4736  002F24                     l7870:
  4737                           
  4738                           ;EEPROM.c: 105: else{
  4739                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4740  002F24  0E00               	movlw	0
  4741  002F26  0100               	movlb	0	; () banked
  4742  002F28  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4743  002F2A  0E00               	movlw	0
  4744  002F2C  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4745  002F2E  0E00               	movlw	0
  4746  002F30  0100               	movlb	0	; () banked
  4747  002F32  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4748  002F34  EC9A  F019         	call	_EEPROM_write	;wreg free
  4749  002F38                     l7872:
  4750                           
  4751                           ;EEPROM.c: 107: }
  4752                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4753  002F38  0100               	movlb	0	; () banked
  4754  002F3A  51FE               	movf	_count_total& (0+255),w,b
  4755  002F3C  0980               	iorlw	128
  4756  002F3E  0100               	movlb	0	; () banked
  4757  002F40  6FB2               	movwf	logRun@byte1& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4761  002F42  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4762  002F46  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4763  002F4A  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4764  002F4E  EC9A  F019         	call	_EEPROM_write	;wreg free
  4765                           
  4766                           ;EEPROM.c: 112: addr++;
  4767  002F52  0100               	movlb	0	; () banked
  4768  002F54  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4769  002F56  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4773  002F58  3861               	swapf	_count_pop_no_tab,w,c
  4774  002F5A  0BF0               	andlw	240
  4775  002F5C  1063               	iorwf	_count_pop_w_tab,w,c
  4776  002F5E  0100               	movlb	0	; () banked
  4777  002F60  6FB3               	movwf	logRun@byte2& (0+255),b
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4781  002F62  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4782  002F66  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4783  002F6A  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4784  002F6E  EC9A  F019         	call	_EEPROM_write	;wreg free
  4785                           
  4786                           ;EEPROM.c: 117: addr++;
  4787  002F72  0100               	movlb	0	; () banked
  4788  002F74  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4789  002F76  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4793  002F78  385F               	swapf	_count_can_w_lab,w,c
  4794  002F7A  0BF0               	andlw	240
  4795  002F7C  105D               	iorwf	_count_can_no_lab,w,c
  4796  002F7E  0100               	movlb	0	; () banked
  4797  002F80  6FB4               	movwf	logRun@byte3& (0+255),b
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4801  002F82  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4802  002F86  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4803  002F8A  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4804  002F8E  EC9A  F019         	call	_EEPROM_write	;wreg free
  4805                           
  4806                           ;EEPROM.c: 120: addr++;
  4807  002F92  0100               	movlb	0	; () banked
  4808  002F94  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4809  002F96  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4813  002F98  0E00               	movlw	0
  4814  002F9A  0100               	movlb	0	; () banked
  4815  002F9C  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4816  002F9E  0E00               	movlw	0
  4817  002FA0  6FB7               	movwf	logRun@i& (0+255),b
  4818                           
  4819                           ; BSR set to: 0
  4820  002FA2  0100               	movlb	0	; () banked
  4821  002FA4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4822  002FA6  D008               	goto	l7896
  4823  002FA8  0100               	movlb	0	; () banked
  4824  002FAA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4825  002FAC  E128               	bnz	l939
  4826  002FAE  0E07               	movlw	7
  4827  002FB0  0100               	movlb	0	; () banked
  4828  002FB2  5DB7               	subwf	logRun@i& (0+255),w,b
  4829  002FB4  B0D8               	btfsc	status,0,c
  4830  002FB6  D023               	goto	l939
  4831  002FB8                     l7896:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4835  002FB8  90D8               	bcf	status,0,c
  4836  002FBA  0100               	movlb	0	; () banked
  4837  002FBC  35B7               	rlcf	logRun@i& (0+255),w,b
  4838  002FBE  6ED9               	movwf	fsr2l,c
  4839  002FC0  0100               	movlb	0	; () banked
  4840  002FC2  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4841  002FC4  6EDA               	movwf	fsr2h,c
  4842  002FC6  0E0E               	movlw	low _startTime
  4843  002FC8  26D9               	addwf	fsr2l,f,c
  4844  002FCA  0E01               	movlw	high _startTime
  4845  002FCC  22DA               	addwfc	fsr2h,f,c
  4846  002FCE  50DF               	movf	indf2,w,c
  4847  002FD0  0100               	movlb	0	; () banked
  4848  002FD2  6FB5               	movwf	logRun@byte_i& (0+255),b
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4852  002FD4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4853  002FD8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4854  002FDC  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4855  002FE0  EC9A  F019         	call	_EEPROM_write	;wreg free
  4856                           
  4857                           ;EEPROM.c: 126: addr++;
  4858  002FE4  0100               	movlb	0	; () banked
  4859  002FE6  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4860  002FE8  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4861                           
  4862                           ; BSR set to: 0
  4863  002FEA  0100               	movlb	0	; () banked
  4864  002FEC  4BB7               	infsnz	logRun@i& (0+255),f,b
  4865  002FEE  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4866                           
  4867                           ; BSR set to: 0
  4868  002FF0  0100               	movlb	0	; () banked
  4869  002FF2  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4870  002FF4  D7E1               	goto	l7896
  4871  002FF6  0100               	movlb	0	; () banked
  4872  002FF8  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4873  002FFA  E101               	bnz	u6800
  4874  002FFC  D7D8               	goto	L5
  4875  002FFE                     u6800:
  4876  002FFE                     l939:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;EEPROM.c: 127: }
  4880                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4881  002FFE  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4885  003002  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4886  003006  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4887  00300A  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4888  00300E  EC9A  F019         	call	_EEPROM_write	;wreg free
  4889  003012  0012               	return		;funcret
  4890  003014                     __end_of_logRun:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           intcon	equ	0xFF2
  4899                           intcon2	equ	0xFF1
  4900                           intcon3	equ	0xFF0
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           postinc2	equ	0xFDE
  4907                           postdec2	equ	0xFDD
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function _EEPROM_write *****************
  4913 ;; Defined at:
  4914 ;;		line 32 in file "EEPROM.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  address         2   43[BANK0 ] unsigned short 
  4917 ;;  data            1   45[BANK0 ] unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  i               1   48[BANK0 ] unsigned char 
  4920 ;;  i               1   47[BANK0 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      void 
  4923 ;; Registers used:
  4924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        6 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:   10
  4937 ;; This function calls:
  4938 ;;		_EEPROM_read
  4939 ;;		_lcdInst
  4940 ;;		_printf
  4941 ;; This function is called by:
  4942 ;;		_Loading
  4943 ;;		_logRun
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text13
  4948  003334                     __ptext13:
  4949                           	opt stack 0
  4950  003334                     _EEPROM_write:
  4951                           	opt stack 18
  4952                           
  4953                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4954                           
  4955                           ;incstack = 0
  4956  003334  84A6               	bsf	4006,2,c	;volatile
  4957                           
  4958                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4959  003336  0100               	movlb	0	; () banked
  4960  003338  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4961  00333A  6EAA               	movwf	4010,c	;volatile
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4965  00333C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;EEPROM.c: 39: EEDATA = data;
  4969  003340  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4973  003344  9EA6               	bcf	4006,7,c	;volatile
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4977  003346  9CA6               	bcf	4006,6,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4981  003348  9EF2               	bcf	intcon,7,c	;volatile
  4982                           
  4983                           ;EEPROM.c: 45: EECON2 = 0x55;
  4984  00334A  0E55               	movlw	85
  4985  00334C  6EA7               	movwf	4007,c	;volatile
  4986                           
  4987                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4988  00334E  0EAA               	movlw	170
  4989  003350  6EA7               	movwf	4007,c	;volatile
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4993  003352  82A6               	bsf	4006,1,c	;volatile
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4997  003354  8EF2               	bsf	intcon,7,c	;volatile
  4998  003356                     l917:
  4999  003356  A8A1               	btfss	4001,4,c	;volatile
  5000  003358  D7FE               	goto	l917
  5001                           
  5002                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5003  00335A  98A1               	bcf	4001,4,c	;volatile
  5004                           
  5005                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5006  00335C  94A6               	bcf	4006,2,c	;volatile
  5007                           
  5008                           ;EEPROM.c: 57: if(debug){
  5009  00335E  5067               	movf	_debug,w,c
  5010  003360  1068               	iorwf	_debug+1,w,c
  5011  003362  B4D8               	btfsc	status,2,c
  5012  003364  0012               	return	
  5013                           
  5014                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5015  003366  0E01               	movlw	1
  5016  003368  EC34  F023         	call	_lcdInst
  5017  00336C  0E68               	movlw	104
  5018  00336E  0100               	movlb	0	; () banked
  5019  003370  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5020  003372  0EE4               	movlw	228
  5021  003374                     u7087:
  5022  003374  2EE8               	decfsz	wreg,f,c
  5023  003376  D7FE               	bra	u7087
  5024  003378  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5025  00337A  D7FC               	bra	u7087
  5026  00337C  F000               	nop	
  5027                           
  5028                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5029  00337E  0E80               	movlw	128
  5030  003380  EC34  F023         	call	_lcdInst
  5031                           
  5032                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5033  003384  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5034  003388  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5035  00338C  ECF7  F022         	call	_EEPROM_read	;wreg free
  5036  003390  0100               	movlb	0	; () banked
  5037  003392  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5038  003394  A4D8               	btfss	status,2,c
  5039  003396  D024               	goto	l5986
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5043  003398  0E5A               	movlw	low STR_66
  5044  00339A  0100               	movlb	0	; () banked
  5045  00339C  6F8E               	movwf	printf@f& (0+255),b
  5046  00339E  0EFB               	movlw	high STR_66
  5047  0033A0  0100               	movlb	0	; () banked
  5048  0033A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5049  0033A4  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5050  0033A8  0100               	movlb	0	; () banked
  5051  0033AA  6B91               	clrf	(?_printf+3)& (0+255),b
  5052  0033AC  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5053  0033B0  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5054  0033B4  ECB8  F008         	call	_printf	;wreg free
  5055                           
  5056                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5057  0033B8  0E00               	movlw	0
  5058  0033BA  0100               	movlb	0	; () banked
  5059  0033BC  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5060  0033BE                     l5978:
  5061                           
  5062                           ; BSR set to: 0
  5063  0033BE  0E63               	movlw	99
  5064  0033C0  0100               	movlb	0	; () banked
  5065  0033C2  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5066  0033C4  D001               	goto	l5982
  5067  0033C6  0012               	return	
  5068  0033C8                     l5982:
  5069                           
  5070                           ; BSR set to: 0
  5071  0033C8  0E68               	movlw	104
  5072  0033CA  0100               	movlb	0	; () banked
  5073  0033CC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5074  0033CE  0EE4               	movlw	228
  5075  0033D0                     u7097:
  5076  0033D0  2EE8               	decfsz	wreg,f,c
  5077  0033D2  D7FE               	bra	u7097
  5078  0033D4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5079  0033D6  D7FC               	bra	u7097
  5080  0033D8  F000               	nop	
  5081  0033DA  0100               	movlb	0	; () banked
  5082  0033DC  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5083  0033DE  D7EF               	goto	l5978
  5084  0033E0                     l5986:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5088  0033E0  0EBC               	movlw	low STR_67
  5089  0033E2  0100               	movlb	0	; () banked
  5090  0033E4  6F8E               	movwf	printf@f& (0+255),b
  5091  0033E6  0EFF               	movlw	high STR_67
  5092  0033E8  0100               	movlb	0	; () banked
  5093  0033EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5094  0033EC  ECB8  F008         	call	_printf	;wreg free
  5095  0033F0  0E00               	movlw	0
  5096  0033F2  0100               	movlb	0	; () banked
  5097  0033F4  6FB0               	movwf	EEPROM_write@i_1321& (0+255),b
  5098  0033F6                     l5990:
  5099                           
  5100                           ; BSR set to: 0
  5101  0033F6  0E63               	movlw	99
  5102  0033F8  0100               	movlb	0	; () banked
  5103  0033FA  65B0               	cpfsgt	EEPROM_write@i_1321& (0+255),b
  5104  0033FC  D001               	goto	l5994
  5105  0033FE  0012               	return	
  5106  003400                     l5994:
  5107                           
  5108                           ; BSR set to: 0
  5109  003400  0E68               	movlw	104
  5110  003402  0100               	movlb	0	; () banked
  5111  003404  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5112  003406  0EE4               	movlw	228
  5113  003408                     u7107:
  5114  003408  2EE8               	decfsz	wreg,f,c
  5115  00340A  D7FE               	bra	u7107
  5116  00340C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5117  00340E  D7FC               	bra	u7107
  5118  003410  F000               	nop	
  5119  003412  0100               	movlb	0	; () banked
  5120  003414  2BB0               	incf	EEPROM_write@i_1321& (0+255),f,b
  5121  003416  D7EF               	goto	l5990
  5122  003418                     __end_of_EEPROM_write:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           intcon	equ	0xFF2
  5131                           intcon2	equ	0xFF1
  5132                           intcon3	equ	0xFF0
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _EEPROM_read *****************
  5145 ;; Defined at:
  5146 ;;		line 68 in file "EEPROM.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  address         2    0[BANK0 ] unsigned short 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      unsigned char 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5160 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;Total ram usage:        2 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    7
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_Loading
  5171 ;;		_EEPROM_write
  5172 ;;		_logRun
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text14
  5177  0045EE                     __ptext14:
  5178                           	opt stack 0
  5179  0045EE                     _EEPROM_read:
  5180                           	opt stack 20
  5181                           
  5182                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5183                           
  5184                           ;incstack = 0
  5185  0045EE  0100               	movlb	0	; () banked
  5186  0045F0  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5187  0045F2  6EAA               	movwf	4010,c	;volatile
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5191  0045F4  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5195  0045F8  9EA6               	bcf	4006,7,c	;volatile
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5199  0045FA  9CA6               	bcf	4006,6,c	;volatile
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5203  0045FC  80A6               	bsf	4006,0,c	;volatile
  5204  0045FE                     l930:
  5205  0045FE  B0A6               	btfsc	4006,0,c	;volatile
  5206  004600  D7FE               	goto	l930
  5207                           
  5208                           ;EEPROM.c: 81: return EEDATA;
  5209  004602  50A8               	movf	4008,w,c	;volatile
  5210  004604  0012               	return	
  5211  004606                     __end_of_EEPROM_read:
  5212                           	opt stack 0
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           intcon2	equ	0xFF1
  5221                           intcon3	equ	0xFF0
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           postdec1	equ	0xFE5
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           postdec2	equ	0xFDD
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _initUI *****************
  5234 ;; Defined at:
  5235 ;;		line 62 in file "UI.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      void 
  5242 ;; Registers used:
  5243 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;Total ram usage:        0 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:   12
  5256 ;; This function calls:
  5257 ;;		_change_state_to_menu_start
  5258 ;;		_loadRTC
  5259 ;; This function is called by:
  5260 ;;		_main
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text15
  5265  004544                     __ptext15:
  5266                           	opt stack 0
  5267  004544                     _initUI:
  5268                           	opt stack 18
  5269                           
  5270                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5271                           
  5272                           ;incstack = 0
  5273  004544  8EF2               	bsf	intcon,7,c	;volatile
  5274                           
  5275                           ;UI.c: 64: machine_state = UI_state;
  5276  004546  0E00               	movlw	0
  5277  004548  0100               	movlb	0	; () banked
  5278  00454A  6FFC               	movwf	_machine_state& (0+255),b
  5279                           
  5280                           ;UI.c: 65: logstate = 0;
  5281  00454C  0E00               	movlw	0
  5282  00454E  0100               	movlb	0	; () banked
  5283  004550  6FF7               	movwf	(_logstate+1)& (0+255),b
  5284  004552  0E00               	movlw	0
  5285  004554  6FF6               	movwf	_logstate& (0+255),b
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;UI.c: 67: loadRTC();
  5289  004556  EC70  F01C         	call	_loadRTC	;wreg free
  5290                           
  5291                           ;UI.c: 69: change_state_to_menu_start();
  5292  00455A  EC13  F022         	call	_change_state_to_menu_start	;wreg free
  5293                           
  5294                           ;UI.c: 70: firstboot = 1;
  5295  00455E  0E00               	movlw	0
  5296  004560  6E76               	movwf	_firstboot+1,c
  5297  004562  0E01               	movlw	1
  5298  004564  6E75               	movwf	_firstboot,c
  5299  004566  0012               	return		;funcret
  5300  004568                     __end_of_initUI:
  5301                           	opt stack 0
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           intcon	equ	0xFF2
  5309                           intcon2	equ	0xFF1
  5310                           intcon3	equ	0xFF0
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _loadRTC *****************
  5323 ;; Defined at:
  5324 ;;		line 28 in file "RTC.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  i               2   22[BANK0 ] int 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;Total ram usage:        3 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    9
  5345 ;; This function calls:
  5346 ;;		_I2C_Master_Init
  5347 ;;		_I2C_Master_Start
  5348 ;;		_I2C_Master_Stop
  5349 ;;		_I2C_Master_Write
  5350 ;; This function is called by:
  5351 ;;		_initUI
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           	psect	text16
  5356  0038E0                     __ptext16:
  5357                           	opt stack 0
  5358  0038E0                     _loadRTC:
  5359                           	opt stack 20
  5360                           
  5361                           ;RTC.c: 30: I2C_Master_Init(10000);
  5362                           
  5363                           ;incstack = 0
  5364  0038E0  0E10               	movlw	16
  5365  0038E2  0100               	movlb	0	; () banked
  5366  0038E4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5367  0038E6  0E27               	movlw	39
  5368  0038E8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5369  0038EA  0E00               	movlw	0
  5370  0038EC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5371  0038EE  0E00               	movlw	0
  5372  0038F0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5373  0038F2  ECC9  F01E         	call	_I2C_Master_Init	;wreg free
  5374                           
  5375                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5376  0038F6  9EF2               	bcf	intcon,7,c	;volatile
  5377                           
  5378                           ;RTC.c: 34: I2C_Master_Start();
  5379  0038F8  EC5A  F023         	call	_I2C_Master_Start	;wreg free
  5380                           
  5381                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5382  0038FC  0E00               	movlw	0
  5383  0038FE  0100               	movlb	0	; () banked
  5384  003900  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5385  003902  0ED0               	movlw	208
  5386  003904  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5387  003906  EC48  F023         	call	_I2C_Master_Write	;wreg free
  5388                           
  5389                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5390  00390A  0E00               	movlw	0
  5391  00390C  0100               	movlb	0	; () banked
  5392  00390E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5393  003910  0E00               	movlw	0
  5394  003912  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5395  003914  EC48  F023         	call	_I2C_Master_Write	;wreg free
  5396                           
  5397                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5398  003918  0E00               	movlw	0
  5399  00391A  0100               	movlb	0	; () banked
  5400  00391C  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5401  00391E  0E00               	movlw	0
  5402  003920  6F96               	movwf	loadRTC@i& (0+255),b
  5403  003922                     l6110:
  5404                           
  5405                           ; BSR set to: 0
  5406  003922  0100               	movlb	0	; () banked
  5407  003924  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5408  003926  D008               	goto	l6114
  5409  003928  0100               	movlb	0	; () banked
  5410  00392A  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5411  00392C  E11B               	bnz	l6120
  5412  00392E  0E07               	movlw	7
  5413  003930  0100               	movlb	0	; () banked
  5414  003932  5D96               	subwf	loadRTC@i& (0+255),w,b
  5415  003934  B0D8               	btfsc	status,0,c
  5416  003936  D016               	goto	l6120
  5417  003938                     l6114:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5421  003938  0E24               	movlw	low _time
  5422  00393A  0100               	movlb	0	; () banked
  5423  00393C  2596               	addwf	loadRTC@i& (0+255),w,b
  5424  00393E  6ED9               	movwf	fsr2l,c
  5425  003940  0E01               	movlw	high _time
  5426  003942  0100               	movlb	0	; () banked
  5427  003944  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5428  003946  6EDA               	movwf	fsr2h,c
  5429  003948  50DF               	movf	indf2,w,c
  5430  00394A  0100               	movlb	0	; () banked
  5431  00394C  6F95               	movwf	??_loadRTC& (0+255),b
  5432  00394E  0100               	movlb	0	; () banked
  5433  003950  5195               	movf	??_loadRTC& (0+255),w,b
  5434  003952  0100               	movlb	0	; () banked
  5435  003954  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5436  003956  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5437  003958  EC48  F023         	call	_I2C_Master_Write	;wreg free
  5438  00395C  0100               	movlb	0	; () banked
  5439  00395E  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5440  003960  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5441  003962  D7DF               	goto	l6110
  5442  003964                     l6120:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;RTC.c: 39: }
  5446                           ;RTC.c: 40: I2C_Master_Stop();
  5447  003964  EC56  F023         	call	_I2C_Master_Stop	;wreg free
  5448                           
  5449                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5450  003968  8EF2               	bsf	intcon,7,c	;volatile
  5451  00396A  0012               	return		;funcret
  5452  00396C                     __end_of_loadRTC:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           prodh	equ	0xFF4
  5459                           prodl	equ	0xFF3
  5460                           intcon	equ	0xFF2
  5461                           intcon2	equ	0xFF1
  5462                           intcon3	equ	0xFF0
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           postdec1	equ	0xFE5
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _I2C_Master_Init *****************
  5475 ;; Defined at:
  5476 ;;		line 15 in file "I2C.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  c               4   13[BANK0 ] const unsigned long 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        8 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    8
  5497 ;; This function calls:
  5498 ;;		___lldiv
  5499 ;; This function is called by:
  5500 ;;		_loadRTC
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text17
  5505  003D92                     __ptext17:
  5506                           	opt stack 0
  5507  003D92                     _I2C_Master_Init:
  5508                           	opt stack 20
  5509                           
  5510                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5511                           
  5512                           ;incstack = 0
  5513  003D92  0E00               	movlw	0
  5514  003D94  6EC7               	movwf	4039,c	;volatile
  5515                           
  5516                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5517  003D96  0E28               	movlw	40
  5518  003D98  6EC6               	movwf	4038,c	;volatile
  5519                           
  5520                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5521  003D9A  0E00               	movlw	0
  5522  003D9C  6EC5               	movwf	4037,c	;volatile
  5523                           
  5524                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5525  003D9E  0E00               	movlw	0
  5526  003DA0  0100               	movlb	0	; () banked
  5527  003DA2  6F80               	movwf	___lldiv@dividend& (0+255),b
  5528  003DA4  0E48               	movlw	72
  5529  003DA6  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5530  003DA8  0EE8               	movlw	232
  5531  003DAA  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5532  003DAC  0E01               	movlw	1
  5533  003DAE  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5534  003DB0  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5535  003DB4  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5536  003DB8  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5537  003DBC  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5538  003DC0  0E02               	movlw	2
  5539  003DC2                     u4435:
  5540  003DC2  90D8               	bcf	status,0,c
  5541  003DC4  0100               	movlb	0	; () banked
  5542  003DC6  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5543  003DC8  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5544  003DCA  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5545  003DCC  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5546  003DCE  2EE8               	decfsz	wreg,f,c
  5547  003DD0  D7F8               	goto	u4435
  5548  003DD2  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5549  003DD6  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5550  003DDA  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5551  003DDE  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5552  003DE2  ECD6  F01A         	call	___lldiv	;wreg free
  5553  003DE6  0100               	movlb	0	; () banked
  5554  003DE8  0580               	decf	?___lldiv& (0+255),w,b
  5555  003DEA  6EC8               	movwf	4040,c	;volatile
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;I2C.c: 22: TRISC3 = 1;
  5559  003DEC  8694               	bsf	3988,3,c	;volatile
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;I2C.c: 23: TRISC4 = 1;
  5563  003DEE  8894               	bsf	3988,4,c	;volatile
  5564                           
  5565                           ; BSR set to: 0
  5566  003DF0  0012               	return		;funcret
  5567  003DF2                     __end_of_I2C_Master_Init:
  5568                           	opt stack 0
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           intcon	equ	0xFF2
  5576                           intcon2	equ	0xFF1
  5577                           intcon3	equ	0xFF0
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           postdec1	equ	0xFE5
  5581                           fsr1l	equ	0xFE1
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function ___lldiv *****************
  5590 ;; Defined at:
  5591 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  dividend        4    0[BANK0 ] unsigned long 
  5594 ;;  divisor         4    4[BANK0 ] unsigned long 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  quotient        4    8[BANK0 ] unsigned long 
  5597 ;;  counter         1   12[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  4    0[BANK0 ] unsigned long 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5607 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;Total ram usage:       13 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    7
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_I2C_Master_Init
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text18
  5622  0035AC                     __ptext18:
  5623                           	opt stack 0
  5624  0035AC                     ___lldiv:
  5625                           	opt stack 20
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;incstack = 0
  5629  0035AC  0E00               	movlw	0
  5630  0035AE  0100               	movlb	0	; () banked
  5631  0035B0  6F88               	movwf	___lldiv@quotient& (0+255),b
  5632  0035B2  0E00               	movlw	0
  5633  0035B4  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5634  0035B6  0E00               	movlw	0
  5635  0035B8  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5636  0035BA  0E00               	movlw	0
  5637  0035BC  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5638                           
  5639                           ; BSR set to: 0
  5640  0035BE  0100               	movlb	0	; () banked
  5641  0035C0  5184               	movf	___lldiv@divisor& (0+255),w,b
  5642  0035C2  0100               	movlb	0	; () banked
  5643  0035C4  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5644  0035C6  0100               	movlb	0	; () banked
  5645  0035C8  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5646  0035CA  0100               	movlb	0	; () banked
  5647  0035CC  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5648  0035CE  B4D8               	btfsc	status,2,c
  5649  0035D0  D042               	goto	l1630
  5650                           
  5651                           ; BSR set to: 0
  5652  0035D2  0E01               	movlw	1
  5653  0035D4  0100               	movlb	0	; () banked
  5654  0035D6  6F8C               	movwf	___lldiv@counter& (0+255),b
  5655  0035D8  D008               	goto	l5550
  5656  0035DA                     l5548:
  5657                           
  5658                           ; BSR set to: 0
  5659  0035DA  0100               	movlb	0	; () banked
  5660  0035DC  90D8               	bcf	status,0,c
  5661  0035DE  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5662  0035E0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5663  0035E2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5664  0035E4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5665  0035E6  0100               	movlb	0	; () banked
  5666  0035E8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5667  0035EA                     l5550:
  5668                           
  5669                           ; BSR set to: 0
  5670  0035EA  0100               	movlb	0	; () banked
  5671  0035EC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5672  0035EE  D7F5               	goto	l5548
  5673  0035F0                     l5552:
  5674                           
  5675                           ; BSR set to: 0
  5676  0035F0  0100               	movlb	0	; () banked
  5677  0035F2  90D8               	bcf	status,0,c
  5678  0035F4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5679  0035F6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5680  0035F8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5681  0035FA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5682                           
  5683                           ; BSR set to: 0
  5684  0035FC  0100               	movlb	0	; () banked
  5685  0035FE  5184               	movf	___lldiv@divisor& (0+255),w,b
  5686  003600  0100               	movlb	0	; () banked
  5687  003602  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5688  003604  0100               	movlb	0	; () banked
  5689  003606  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5690  003608  0100               	movlb	0	; () banked
  5691  00360A  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5692  00360C  0100               	movlb	0	; () banked
  5693  00360E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5694  003610  0100               	movlb	0	; () banked
  5695  003612  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5696  003614  0100               	movlb	0	; () banked
  5697  003616  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5698  003618  0100               	movlb	0	; () banked
  5699  00361A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5700  00361C  A0D8               	btfss	status,0,c
  5701  00361E  D012               	goto	l5560
  5702                           
  5703                           ; BSR set to: 0
  5704  003620  0100               	movlb	0	; () banked
  5705  003622  5184               	movf	___lldiv@divisor& (0+255),w,b
  5706  003624  0100               	movlb	0	; () banked
  5707  003626  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5708  003628  0100               	movlb	0	; () banked
  5709  00362A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5710  00362C  0100               	movlb	0	; () banked
  5711  00362E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5712  003630  0100               	movlb	0	; () banked
  5713  003632  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5714  003634  0100               	movlb	0	; () banked
  5715  003636  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5716  003638  0100               	movlb	0	; () banked
  5717  00363A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5718  00363C  0100               	movlb	0	; () banked
  5719  00363E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5720                           
  5721                           ; BSR set to: 0
  5722  003640  0100               	movlb	0	; () banked
  5723  003642  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5724  003644                     l5560:
  5725                           
  5726                           ; BSR set to: 0
  5727  003644  0100               	movlb	0	; () banked
  5728  003646  90D8               	bcf	status,0,c
  5729  003648  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5730  00364A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5731  00364C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5732  00364E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5733                           
  5734                           ; BSR set to: 0
  5735  003650  0100               	movlb	0	; () banked
  5736  003652  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5737  003654  D7CD               	goto	l5552
  5738  003656                     l1630:
  5739                           
  5740                           ; BSR set to: 0
  5741  003656  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5742  00365A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5743  00365E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5744  003662  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5745                           
  5746                           ; BSR set to: 0
  5747  003666  0012               	return		;funcret
  5748  003668                     __end_of___lldiv:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           intcon2	equ	0xFF1
  5758                           intcon3	equ	0xFF0
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           postdec1	equ	0xFE5
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _change_state_to_menu_start *****************
  5771 ;; Defined at:
  5772 ;;		line 472 in file "UI.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;Total ram usage:        0 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:   11
  5793 ;; This function calls:
  5794 ;;		_lcdInst
  5795 ;;		_printRTC
  5796 ;;		_printf
  5797 ;; This function is called by:
  5798 ;;		_initUI
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text19
  5803  004426                     __ptext19:
  5804                           	opt stack 0
  5805  004426                     _change_state_to_menu_start:
  5806                           	opt stack 18
  5807                           
  5808                           ;UI.c: 473: cur_state = 0;
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;incstack = 0
  5812  004426  0E00               	movlw	0
  5813  004428  0100               	movlb	0	; () banked
  5814  00442A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5815  00442C  0E00               	movlw	0
  5816  00442E  6FDE               	movwf	_cur_state& (0+255),b
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;UI.c: 475: lcdInst(0b10000000);;
  5820  004430  0E80               	movlw	128
  5821  004432  EC34  F023         	call	_lcdInst
  5822                           
  5823                           ;UI.c: 476: printRTC();
  5824  004436  EC03  F00E         	call	_printRTC	;wreg free
  5825                           
  5826                           ;UI.c: 477: lcdInst(0b11000000);;
  5827  00443A  0EC0               	movlw	192
  5828  00443C  EC34  F023         	call	_lcdInst
  5829                           
  5830                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5831  004440  0E1F               	movlw	low STR_30
  5832  004442  0100               	movlb	0	; () banked
  5833  004444  6F8E               	movwf	printf@f& (0+255),b
  5834  004446  0EFE               	movlw	high STR_30
  5835  004448  0100               	movlb	0	; () banked
  5836  00444A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5837  00444C  ECB8  F008         	call	_printf	;wreg free
  5838  004450  0012               	return		;funcret
  5839  004452                     __end_of_change_state_to_menu_start:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           intcon2	equ	0xFF1
  5849                           intcon3	equ	0xFF0
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           postdec1	equ	0xFE5
  5853                           fsr1l	equ	0xFE1
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           fsr2h	equ	0xFDA
  5858                           fsr2l	equ	0xFD9
  5859                           status	equ	0xFD8
  5860                           
  5861 ;; *************** function _initTime *****************
  5862 ;; Defined at:
  5863 ;;		line 17 in file "RTC.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  s               1    wreg     unsigned char 
  5866 ;;  m               1    0[BANK0 ] unsigned char 
  5867 ;;  h               1    1[BANK0 ] unsigned char 
  5868 ;;  w               1    2[BANK0 ] unsigned char 
  5869 ;;  DD              1    3[BANK0 ] unsigned char 
  5870 ;;  MM              1    4[BANK0 ] unsigned char 
  5871 ;;  YY              1    5[BANK0 ] unsigned char 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  s               1    6[BANK0 ] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:        7 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    7
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_main
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text20
  5898  0045AE                     __ptext20:
  5899                           	opt stack 0
  5900  0045AE                     _initTime:
  5901                           	opt stack 23
  5902                           
  5903                           ;incstack = 0
  5904                           ;initTime@s stored from wreg
  5905  0045AE  0100               	movlb	0	; () banked
  5906  0045B0  6F86               	movwf	initTime@s& (0+255),b
  5907                           
  5908                           ;RTC.c: 19: time[0] = s;
  5909  0045B2  C086  F124         	movff	initTime@s,_time
  5910                           
  5911                           ;RTC.c: 20: time[1] = m;
  5912  0045B6  C080  F125         	movff	initTime@m,_time+1
  5913                           
  5914                           ;RTC.c: 21: time[2] = h;
  5915  0045BA  C081  F126         	movff	initTime@h,_time+2
  5916                           
  5917                           ;RTC.c: 22: time[3] = w;
  5918  0045BE  C082  F127         	movff	initTime@w,_time+3
  5919                           
  5920                           ;RTC.c: 23: time[4] = DD;
  5921  0045C2  C083  F128         	movff	initTime@DD,_time+4
  5922                           
  5923                           ;RTC.c: 24: time[5] = MM;
  5924  0045C6  C084  F129         	movff	initTime@MM,_time+5
  5925                           
  5926                           ;RTC.c: 25: time[6] = YY;
  5927  0045CA  C085  F12A         	movff	initTime@YY,_time+6
  5928  0045CE  0012               	return		;funcret
  5929  0045D0                     __end_of_initTime:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           prodh	equ	0xFF4
  5936                           prodl	equ	0xFF3
  5937                           intcon	equ	0xFF2
  5938                           intcon2	equ	0xFF1
  5939                           intcon3	equ	0xFF0
  5940                           postinc0	equ	0xFEE
  5941                           wreg	equ	0xFE8
  5942                           postdec1	equ	0xFE5
  5943                           fsr1l	equ	0xFE1
  5944                           indf2	equ	0xFDF
  5945                           postinc2	equ	0xFDE
  5946                           postdec2	equ	0xFDD
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _initLCD *****************
  5952 ;; Defined at:
  5953 ;;		line 48 in file "lcd.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;Total ram usage:        1 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    9
  5974 ;; This function calls:
  5975 ;;		_lcdInst
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text21
  5982  004084                     __ptext21:
  5983                           	opt stack 0
  5984  004084                     _initLCD:
  5985                           	opt stack 21
  5986                           
  5987                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5988                           
  5989                           ;incstack = 0
  5990  004084  0E9C               	movlw	156
  5991  004086  0100               	movlb	0	; () banked
  5992  004088  6F83               	movwf	??_initLCD& (0+255),b
  5993  00408A  0ED7               	movlw	215
  5994  00408C                     u7117:
  5995  00408C  2EE8               	decfsz	wreg,f,c
  5996  00408E  D7FE               	bra	u7117
  5997  004090  2F83               	decfsz	??_initLCD& (0+255),f,b
  5998  004092  D7FC               	bra	u7117
  5999                           
  6000                           ;lcd.c: 50: lcdInst(0b00110011);
  6001  004094  0E33               	movlw	51
  6002  004096  EC34  F023         	call	_lcdInst
  6003                           
  6004                           ;lcd.c: 51: lcdInst(0b00110010);
  6005  00409A  0E32               	movlw	50
  6006  00409C  EC34  F023         	call	_lcdInst
  6007                           
  6008                           ;lcd.c: 53: lcdInst(0b00101000);
  6009  0040A0  0E28               	movlw	40
  6010  0040A2  EC34  F023         	call	_lcdInst
  6011                           
  6012                           ;lcd.c: 54: lcdInst(0b00001100);
  6013  0040A6  0E0C               	movlw	12
  6014  0040A8  EC34  F023         	call	_lcdInst
  6015                           
  6016                           ;lcd.c: 55: lcdInst(0b00000110);
  6017  0040AC  0E06               	movlw	6
  6018  0040AE  EC34  F023         	call	_lcdInst
  6019                           
  6020                           ;lcd.c: 56: lcdInst(0b00000001);
  6021  0040B2  0E01               	movlw	1
  6022  0040B4  EC34  F023         	call	_lcdInst
  6023                           
  6024                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6025  0040B8  0E9C               	movlw	156
  6026  0040BA  0100               	movlb	0	; () banked
  6027  0040BC  6F83               	movwf	??_initLCD& (0+255),b
  6028  0040BE  0ED7               	movlw	215
  6029  0040C0                     u7127:
  6030  0040C0  2EE8               	decfsz	wreg,f,c
  6031  0040C2  D7FE               	bra	u7127
  6032  0040C4  2F83               	decfsz	??_initLCD& (0+255),f,b
  6033  0040C6  D7FC               	bra	u7127
  6034  0040C8  0012               	return		;funcret
  6035  0040CA                     __end_of_initLCD:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           intcon2	equ	0xFF1
  6045                           intcon3	equ	0xFF0
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           postdec1	equ	0xFE5
  6049                           fsr1l	equ	0xFE1
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _UI *****************
  6058 ;; Defined at:
  6059 ;;		line 74 in file "UI.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  i               1   73[BANK0 ] unsigned char 
  6064 ;;  i               1   85[BANK0 ] unsigned char 
  6065 ;;  i               1   84[BANK0 ] unsigned char 
  6066 ;;  i               1   83[BANK0 ] unsigned char 
  6067 ;;  i               1   82[BANK0 ] unsigned char 
  6068 ;;  i               1   81[BANK0 ] unsigned char 
  6069 ;;  i               1   80[BANK0 ] unsigned char 
  6070 ;;  i               1   79[BANK0 ] unsigned char 
  6071 ;;  i               1   78[BANK0 ] unsigned char 
  6072 ;;  i               1   77[BANK0 ] unsigned char 
  6073 ;;  i               1   76[BANK0 ] unsigned char 
  6074 ;;  i               1   75[BANK0 ] unsigned char 
  6075 ;;  i               1   74[BANK0 ] unsigned char 
  6076 ;;  month           4   86[BANK0 ] unsigned char [4]
  6077 ;;  i               1   72[BANK0 ] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;Total ram usage:       22 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:   11
  6094 ;; This function calls:
  6095 ;;		___awdiv
  6096 ;;		___awmod
  6097 ;;		_change_state_to_menu_12
  6098 ;;		_change_state_to_menu_22
  6099 ;;		_lcdInst
  6100 ;;		_printRTC
  6101 ;;		_printf
  6102 ;;		_strcpy
  6103 ;; This function is called by:
  6104 ;;		_main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text22
  6109  0008CA                     __ptext22:
  6110                           	opt stack 0
  6111  0008CA                     _UI:
  6112                           	opt stack 19
  6113                           
  6114                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  6115                           
  6116                           ;incstack = 0
  6117  0008CA  0E02               	movlw	2
  6118  0008CC  0100               	movlb	0	; () banked
  6119  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6120  0008D0  A4D8               	btfss	status,2,c
  6121  0008D2  D075               	goto	l7298
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6125  0008D4  0E01               	movlw	1
  6126  0008D6  EC34  F023         	call	_lcdInst
  6127  0008DA  0E68               	movlw	104
  6128  0008DC  0100               	movlb	0	; () banked
  6129  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6130  0008E0  0EE4               	movlw	228
  6131  0008E2                     u7137:
  6132  0008E2  2EE8               	decfsz	wreg,f,c
  6133  0008E4  D7FE               	bra	u7137
  6134  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6135  0008E8  D7FC               	bra	u7137
  6136  0008EA  F000               	nop	
  6137                           
  6138                           ;UI.c: 77: lcdInst(0b10000000);;
  6139  0008EC  0E80               	movlw	128
  6140  0008EE  EC34  F023         	call	_lcdInst
  6141                           
  6142                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  6143  0008F2  0ECB               	movlw	low STR_1
  6144  0008F4  0100               	movlb	0	; () banked
  6145  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6146  0008F8  0EFB               	movlw	high STR_1
  6147  0008FA  0100               	movlb	0	; () banked
  6148  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6149  0008FE  0E01               	movlw	1
  6150  000900  0100               	movlb	0	; () banked
  6151  000902  25FD               	addwf	_sel& (0+255),w,b
  6152  000904  0100               	movlb	0	; () banked
  6153  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6154  000908  0100               	movlb	0	; () banked
  6155  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6156  00090C  0E00               	movlw	0
  6157  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6158  000910  ECB8  F008         	call	_printf	;wreg free
  6159                           
  6160                           ;UI.c: 79: lcdInst(0b11000000);;
  6161  000914  0EC0               	movlw	192
  6162  000916  EC34  F023         	call	_lcdInst
  6163                           
  6164                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6165  00091A  0E0E               	movlw	14
  6166  00091C  0100               	movlb	0	; () banked
  6167  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6168  000920  0E10               	movlw	16
  6169  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6170  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6171  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6172  00092C  EC89  F01B         	call	___awmod	;wreg free
  6173  000930  C080  F0C6         	movff	?___awmod,_UI$2246
  6174  000934  C081  F0C7         	movff	?___awmod+1,_UI$2246+1
  6175                           
  6176                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6177  000938  0E2D               	movlw	low STR_2
  6178  00093A  0100               	movlb	0	; () banked
  6179  00093C  6F8E               	movwf	printf@f& (0+255),b
  6180  00093E  0EFF               	movlw	high STR_2
  6181  000940  0100               	movlb	0	; () banked
  6182  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6183  000944  0E0E               	movlw	14
  6184  000946  0100               	movlb	0	; () banked
  6185  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6186  00094A  0E10               	movlw	16
  6187  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6188  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6189  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6190  000956  EC89  F01B         	call	___awmod	;wreg free
  6191  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6192  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6193  000962  0E00               	movlw	0
  6194  000964  0100               	movlb	0	; () banked
  6195  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6196  000968  0E3C               	movlw	60
  6197  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6198  00096C  EC77  F01A         	call	___awdiv	;wreg free
  6199  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6200  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6201  000978  C0C6  F080         	movff	_UI$2246,___awmod@dividend
  6202  00097C  C0C7  F081         	movff	_UI$2246+1,___awmod@dividend+1
  6203  000980  0E00               	movlw	0
  6204  000982  0100               	movlb	0	; () banked
  6205  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6206  000986  0E3C               	movlw	60
  6207  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6208  00098A  EC89  F01B         	call	___awmod	;wreg free
  6209  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6210  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6211  000996  ECB8  F008         	call	_printf	;wreg free
  6212                           
  6213                           ;UI.c: 81: machine_state = UI_state;
  6214  00099A  0E00               	movlw	0
  6215  00099C  0100               	movlb	0	; () banked
  6216  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6217  0009A0                     l177:
  6218  0009A0  A281               	btfss	3969,1,c	;volatile
  6219  0009A2  D7FE               	goto	l177
  6220                           
  6221                           ;UI.c: 84: }
  6222                           ;UI.c: 85: if(cur_state==12){
  6223  0009A4  0E0C               	movlw	12
  6224  0009A6  0100               	movlb	0	; () banked
  6225  0009A8  19DE               	xorwf	_cur_state& (0+255),w,b
  6226  0009AA  0100               	movlb	0	; () banked
  6227  0009AC  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6228  0009AE  A4D8               	btfss	status,2,c
  6229  0009B0  D003               	goto	l7296
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;UI.c: 86: change_state_to_menu_12();
  6233  0009B2  ECA2  F020         	call	_change_state_to_menu_12	;wreg free
  6234                           
  6235                           ;UI.c: 87: }
  6236  0009B6  D3D5               	goto	l7618
  6237  0009B8                     l7296:
  6238                           
  6239                           ;UI.c: 88: else{
  6240                           ;UI.c: 89: change_state_to_menu_22();
  6241  0009B8  EC86  F020         	call	_change_state_to_menu_22	;wreg free
  6242                           
  6243                           ;UI.c: 90: }
  6244                           ;UI.c: 91: }
  6245  0009BC  D3D2               	goto	l7618
  6246  0009BE                     l7298:
  6247                           
  6248                           ;UI.c: 92: else if(cur_state == 0){
  6249  0009BE  0100               	movlb	0	; () banked
  6250  0009C0  51DE               	movf	_cur_state& (0+255),w,b
  6251  0009C2  0100               	movlb	0	; () banked
  6252  0009C4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6253  0009C6  A4D8               	btfss	status,2,c
  6254  0009C8  D3CC               	goto	l7618
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6258  0009CA  0E00               	movlw	0
  6259  0009CC  0100               	movlb	0	; () banked
  6260  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6261  0009D0                     l7302:
  6262                           
  6263                           ; BSR set to: 0
  6264  0009D0  0E63               	movlw	99
  6265  0009D2  0100               	movlb	0	; () banked
  6266  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6267  0009D6  D001               	goto	l7306
  6268  0009D8  D00C               	goto	l7310
  6269  0009DA                     l7306:
  6270                           
  6271                           ; BSR set to: 0
  6272  0009DA  0E68               	movlw	104
  6273  0009DC  0100               	movlb	0	; () banked
  6274  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6275  0009E0  0EE4               	movlw	228
  6276  0009E2                     u7147:
  6277  0009E2  2EE8               	decfsz	wreg,f,c
  6278  0009E4  D7FE               	bra	u7147
  6279  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6280  0009E8  D7FC               	bra	u7147
  6281  0009EA  F000               	nop	
  6282  0009EC  0100               	movlb	0	; () banked
  6283  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6284  0009F0  D7EF               	goto	l7302
  6285  0009F2                     l7310:
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;UI.c: 94: if(cur_state == 0){
  6289  0009F2  0100               	movlb	0	; () banked
  6290  0009F4  51DE               	movf	_cur_state& (0+255),w,b
  6291  0009F6  0100               	movlb	0	; () banked
  6292  0009F8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6293  0009FA  A4D8               	btfss	status,2,c
  6294  0009FC  D3B2               	goto	l7618
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;UI.c: 95: printRTC();
  6298  0009FE  EC03  F00E         	call	_printRTC	;wreg free
  6299                           
  6300                           ;UI.c: 96: }
  6301                           ;UI.c: 97: }
  6302                           ;UI.c: 98: while(logstate){
  6303  000A02  D3AF               	goto	l7618
  6304  000A04                     l7314:
  6305                           
  6306                           ;UI.c: 100: if(!log_completion){
  6307  000A04  0100               	movlb	0	; () banked
  6308  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6309  000A08  0100               	movlb	0	; () banked
  6310  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6311  000A0C  A4D8               	btfss	status,2,c
  6312  000A0E  D041               	goto	l7344
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6316  000A10  0E01               	movlw	1
  6317  000A12  EC34  F023         	call	_lcdInst
  6318  000A16  0E68               	movlw	104
  6319  000A18  0100               	movlb	0	; () banked
  6320  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6321  000A1C  0EE4               	movlw	228
  6322  000A1E                     u7157:
  6323  000A1E  2EE8               	decfsz	wreg,f,c
  6324  000A20  D7FE               	bra	u7157
  6325  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6326  000A24  D7FC               	bra	u7157
  6327  000A26  F000               	nop	
  6328                           
  6329                           ;UI.c: 102: lcdInst(0b10000000);;
  6330  000A28  0E80               	movlw	128
  6331  000A2A  EC34  F023         	call	_lcdInst
  6332                           
  6333                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6334  000A2E  0EB9               	movlw	low STR_3
  6335  000A30  0100               	movlb	0	; () banked
  6336  000A32  6F8E               	movwf	printf@f& (0+255),b
  6337  000A34  0EFB               	movlw	high STR_3
  6338  000A36  0100               	movlb	0	; () banked
  6339  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6340  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6341  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6342  000A42  ECB8  F008         	call	_printf	;wreg free
  6343                           
  6344                           ;UI.c: 104: lcdInst(0b11000000);;
  6345  000A46  0EC0               	movlw	192
  6346  000A48  EC34  F023         	call	_lcdInst
  6347                           
  6348                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6349  000A4C  0E50               	movlw	low STR_4
  6350  000A4E  0100               	movlb	0	; () banked
  6351  000A50  6F8E               	movwf	printf@f& (0+255),b
  6352  000A52  0EFE               	movlw	high STR_4
  6353  000A54  0100               	movlb	0	; () banked
  6354  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6355  000A58  ECB8  F008         	call	_printf	;wreg free
  6356  000A5C                     l7328:
  6357  000A5C  0E00               	movlw	0
  6358  000A5E  0100               	movlb	0	; () banked
  6359  000A60  6FC9               	movwf	UI@i_408& (0+255),b
  6360  000A62                     l7330:
  6361                           
  6362                           ; BSR set to: 0
  6363  000A62  0E63               	movlw	99
  6364  000A64  0100               	movlb	0	; () banked
  6365  000A66  65C9               	cpfsgt	UI@i_408& (0+255),b
  6366  000A68  D001               	goto	l7334
  6367  000A6A  D00C               	goto	l7338
  6368  000A6C                     l7334:
  6369                           
  6370                           ; BSR set to: 0
  6371  000A6C  0E68               	movlw	104
  6372  000A6E  0100               	movlb	0	; () banked
  6373  000A70  6FC4               	movwf	??_UI& (0+255),b
  6374  000A72  0EE4               	movlw	228
  6375  000A74                     u7167:
  6376  000A74  2EE8               	decfsz	wreg,f,c
  6377  000A76  D7FE               	bra	u7167
  6378  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6379  000A7A  D7FC               	bra	u7167
  6380  000A7C  F000               	nop	
  6381  000A7E  0100               	movlb	0	; () banked
  6382  000A80  2BC9               	incf	UI@i_408& (0+255),f,b
  6383  000A82  D7EF               	goto	l7330
  6384  000A84                     l7338:
  6385                           
  6386                           ; BSR set to: 0
  6387  000A84  0100               	movlb	0	; () banked
  6388  000A86  51F6               	movf	_logstate& (0+255),w,b
  6389  000A88  0100               	movlb	0	; () banked
  6390  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6391  000A8C  B4D8               	btfsc	status,2,c
  6392  000A8E  0012               	return	
  6393  000A90  D7E5               	goto	l7328
  6394  000A92                     l7344:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;UI.c: 109: else{
  6398                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6399  000A92  0E01               	movlw	1
  6400  000A94  EC34  F023         	call	_lcdInst
  6401  000A98  0E68               	movlw	104
  6402  000A9A  0100               	movlb	0	; () banked
  6403  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6404  000A9E  0EE4               	movlw	228
  6405  000AA0                     u7177:
  6406  000AA0  2EE8               	decfsz	wreg,f,c
  6407  000AA2  D7FE               	bra	u7177
  6408  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6409  000AA6  D7FC               	bra	u7177
  6410  000AA8  F000               	nop	
  6411                           
  6412                           ;UI.c: 111: lcdInst(0b10000000);;
  6413  000AAA  0E80               	movlw	128
  6414  000AAC  EC34  F023         	call	_lcdInst
  6415                           
  6416                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6417  000AB0  0EB9               	movlw	low STR_3
  6418  000AB2  0100               	movlb	0	; () banked
  6419  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6420  000AB6  0EFB               	movlw	high STR_3
  6421  000AB8  0100               	movlb	0	; () banked
  6422  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6423  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6424  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6425  000AC4  ECB8  F008         	call	_printf	;wreg free
  6426                           
  6427                           ;UI.c: 113: lcdInst(0b11000000);;
  6428  000AC8  0EC0               	movlw	192
  6429  000ACA  EC34  F023         	call	_lcdInst
  6430                           
  6431                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6432  000ACE  0E0E               	movlw	low STR_6
  6433  000AD0  0100               	movlb	0	; () banked
  6434  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6435  000AD4  0EFE               	movlw	high STR_6
  6436  000AD6  0100               	movlb	0	; () banked
  6437  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6438  000ADA  ECB8  F008         	call	_printf	;wreg free
  6439                           
  6440                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6441  000ADE  0E00               	movlw	0
  6442  000AE0  0100               	movlb	0	; () banked
  6443  000AE2  6FCA               	movwf	UI@i_411& (0+255),b
  6444  000AE4                     l7358:
  6445                           
  6446                           ; BSR set to: 0
  6447  000AE4  0E63               	movlw	99
  6448  000AE6  0100               	movlb	0	; () banked
  6449  000AE8  65CA               	cpfsgt	UI@i_411& (0+255),b
  6450  000AEA  D001               	goto	l7362
  6451  000AEC  D00C               	goto	l7366
  6452  000AEE                     l7362:
  6453                           
  6454                           ; BSR set to: 0
  6455  000AEE  0E68               	movlw	104
  6456  000AF0  0100               	movlb	0	; () banked
  6457  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6458  000AF4  0EE4               	movlw	228
  6459  000AF6                     u7187:
  6460  000AF6  2EE8               	decfsz	wreg,f,c
  6461  000AF8  D7FE               	bra	u7187
  6462  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6463  000AFC  D7FC               	bra	u7187
  6464  000AFE  F000               	nop	
  6465  000B00  0100               	movlb	0	; () banked
  6466  000B02  2BCA               	incf	UI@i_411& (0+255),f,b
  6467  000B04  D7EF               	goto	l7358
  6468  000B06                     l7366:
  6469                           
  6470                           ; BSR set to: 0
  6471  000B06  0100               	movlb	0	; () banked
  6472  000B08  51F6               	movf	_logstate& (0+255),w,b
  6473  000B0A  0100               	movlb	0	; () banked
  6474  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6475  000B0E  B4D8               	btfsc	status,2,c
  6476  000B10  0012               	return	
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6480                           
  6481                           ; BSR set to: 0
  6482                           
  6483                           ; BSR set to: 0
  6484  000B12  0E00               	movlw	0
  6485  000B14  0100               	movlb	0	; () banked
  6486  000B16  6FCB               	movwf	UI@i_412& (0+255),b
  6487  000B18                     l7372:
  6488                           
  6489                           ; BSR set to: 0
  6490  000B18  0E63               	movlw	99
  6491  000B1A  0100               	movlb	0	; () banked
  6492  000B1C  65CB               	cpfsgt	UI@i_412& (0+255),b
  6493  000B1E  D001               	goto	l7376
  6494  000B20  D00C               	goto	l7380
  6495  000B22                     l7376:
  6496                           
  6497                           ; BSR set to: 0
  6498  000B22  0E68               	movlw	104
  6499  000B24  0100               	movlb	0	; () banked
  6500  000B26  6FC4               	movwf	??_UI& (0+255),b
  6501  000B28  0EE4               	movlw	228
  6502  000B2A                     u7197:
  6503  000B2A  2EE8               	decfsz	wreg,f,c
  6504  000B2C  D7FE               	bra	u7197
  6505  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6506  000B30  D7FC               	bra	u7197
  6507  000B32  F000               	nop	
  6508  000B34  0100               	movlb	0	; () banked
  6509  000B36  2BCB               	incf	UI@i_412& (0+255),f,b
  6510  000B38  D7EF               	goto	l7372
  6511  000B3A                     l7380:
  6512                           
  6513                           ; BSR set to: 0
  6514  000B3A  0100               	movlb	0	; () banked
  6515  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6516  000B3E  0100               	movlb	0	; () banked
  6517  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6518  000B42  B4D8               	btfsc	status,2,c
  6519  000B44  0012               	return	
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6523                           
  6524                           ; BSR set to: 0
  6525                           
  6526                           ; BSR set to: 0
  6527  000B46  0E01               	movlw	1
  6528  000B48  EC34  F023         	call	_lcdInst
  6529  000B4C  0E68               	movlw	104
  6530  000B4E  0100               	movlb	0	; () banked
  6531  000B50  6FC4               	movwf	??_UI& (0+255),b
  6532  000B52  0EE4               	movlw	228
  6533  000B54                     u7207:
  6534  000B54  2EE8               	decfsz	wreg,f,c
  6535  000B56  D7FE               	bra	u7207
  6536  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6537  000B5A  D7FC               	bra	u7207
  6538  000B5C  F000               	nop	
  6539                           
  6540                           ;UI.c: 120: lcdInst(0b10000000);;
  6541  000B5E  0E80               	movlw	128
  6542  000B60  EC34  F023         	call	_lcdInst
  6543                           
  6544                           ;UI.c: 121: printf("START:");
  6545  000B64  0EC3               	movlw	low STR_7
  6546  000B66  0100               	movlb	0	; () banked
  6547  000B68  6F8E               	movwf	printf@f& (0+255),b
  6548  000B6A  0EFF               	movlw	high STR_7
  6549  000B6C  0100               	movlb	0	; () banked
  6550  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6551  000B70  ECB8  F008         	call	_printf	;wreg free
  6552                           
  6553                           ;UI.c: 122: lcdInst(0b11000000);;
  6554  000B74  0EC0               	movlw	192
  6555  000B76  EC34  F023         	call	_lcdInst
  6556                           
  6557                           ;UI.c: 123: char month[] = "MMM";
  6558  000B7A  C12F  F0D6         	movff	UI@F3223,UI@month
  6559  000B7E  C130  F0D7         	movff	UI@F3223+1,UI@month+1
  6560  000B82  C131  F0D8         	movff	UI@F3223+2,UI@month+2
  6561  000B86  C132  F0D9         	movff	UI@F3223+3,UI@month+3
  6562                           
  6563                           ;UI.c: 124: switch(log_startTime[5]){
  6564  000B8A  D0C3               	goto	l7424
  6565  000B8C                     l7396:
  6566                           
  6567                           ;UI.c: 126: strcpy(month, "JAN");
  6568  000B8C  0ED6               	movlw	low UI@month
  6569  000B8E  0100               	movlb	0	; () banked
  6570  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6571  000B92  0E00               	movlw	high UI@month
  6572  000B94  0100               	movlb	0	; () banked
  6573  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6574  000B98  0EDA               	movlw	low STR_8
  6575  000B9A  0100               	movlb	0	; () banked
  6576  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6577  000B9E  0EFF               	movlw	high STR_8
  6578  000BA0  0100               	movlb	0	; () banked
  6579  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6580  000BA4  ECBE  F020         	call	_strcpy	;wreg free
  6581                           
  6582                           ;UI.c: 127: break;
  6583  000BA8  D0E6               	goto	l7426
  6584  000BAA                     l7398:
  6585                           
  6586                           ;UI.c: 129: strcpy(month, "FEB");
  6587  000BAA  0ED6               	movlw	low UI@month
  6588  000BAC  0100               	movlb	0	; () banked
  6589  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6590  000BB0  0E00               	movlw	high UI@month
  6591  000BB2  0100               	movlb	0	; () banked
  6592  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6593  000BB6  0ECA               	movlw	low STR_9
  6594  000BB8  0100               	movlb	0	; () banked
  6595  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6596  000BBC  0EFF               	movlw	high STR_9
  6597  000BBE  0100               	movlb	0	; () banked
  6598  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6599  000BC2  ECBE  F020         	call	_strcpy	;wreg free
  6600                           
  6601                           ;UI.c: 130: break;
  6602  000BC6  D0D7               	goto	l7426
  6603  000BC8                     l7400:
  6604                           
  6605                           ;UI.c: 132: strcpy(month, "MAR");
  6606  000BC8  0ED6               	movlw	low UI@month
  6607  000BCA  0100               	movlb	0	; () banked
  6608  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6609  000BCE  0E00               	movlw	high UI@month
  6610  000BD0  0100               	movlb	0	; () banked
  6611  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6612  000BD4  0EE6               	movlw	low STR_10
  6613  000BD6  0100               	movlb	0	; () banked
  6614  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6615  000BDA  0EFF               	movlw	high STR_10
  6616  000BDC  0100               	movlb	0	; () banked
  6617  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6618  000BE0  ECBE  F020         	call	_strcpy	;wreg free
  6619                           
  6620                           ;UI.c: 133: break;
  6621  000BE4  D0C8               	goto	l7426
  6622  000BE6                     l7402:
  6623                           
  6624                           ;UI.c: 135: strcpy(month, "APR");
  6625  000BE6  0ED6               	movlw	low UI@month
  6626  000BE8  0100               	movlb	0	; () banked
  6627  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6628  000BEC  0E00               	movlw	high UI@month
  6629  000BEE  0100               	movlb	0	; () banked
  6630  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6631  000BF2  0EEA               	movlw	low STR_11
  6632  000BF4  0100               	movlb	0	; () banked
  6633  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6634  000BF8  0EFF               	movlw	high STR_11
  6635  000BFA  0100               	movlb	0	; () banked
  6636  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6637  000BFE  ECBE  F020         	call	_strcpy	;wreg free
  6638                           
  6639                           ;UI.c: 136: break;
  6640  000C02  D0B9               	goto	l7426
  6641  000C04                     l7404:
  6642                           
  6643                           ;UI.c: 138: strcpy(month, "MAY");
  6644  000C04  0ED6               	movlw	low UI@month
  6645  000C06  0100               	movlb	0	; () banked
  6646  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6647  000C0A  0E00               	movlw	high UI@month
  6648  000C0C  0100               	movlb	0	; () banked
  6649  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6650  000C10  0EFA               	movlw	low STR_12
  6651  000C12  0100               	movlb	0	; () banked
  6652  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6653  000C16  0EFF               	movlw	high STR_12
  6654  000C18  0100               	movlb	0	; () banked
  6655  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6656  000C1C  ECBE  F020         	call	_strcpy	;wreg free
  6657                           
  6658                           ;UI.c: 139: break;
  6659  000C20  D0AA               	goto	l7426
  6660  000C22                     l7406:
  6661                           
  6662                           ;UI.c: 141: strcpy(month, "JUN");
  6663  000C22  0ED6               	movlw	low UI@month
  6664  000C24  0100               	movlb	0	; () banked
  6665  000C26  6F80               	movwf	strcpy@to& (0+255),b
  6666  000C28  0E00               	movlw	high UI@month
  6667  000C2A  0100               	movlb	0	; () banked
  6668  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6669  000C2E  0EDE               	movlw	low STR_13
  6670  000C30  0100               	movlb	0	; () banked
  6671  000C32  6F82               	movwf	strcpy@from& (0+255),b
  6672  000C34  0EFF               	movlw	high STR_13
  6673  000C36  0100               	movlb	0	; () banked
  6674  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6675  000C3A  ECBE  F020         	call	_strcpy	;wreg free
  6676                           
  6677                           ;UI.c: 142: break;
  6678  000C3E  D09B               	goto	l7426
  6679  000C40                     l7408:
  6680                           
  6681                           ;UI.c: 144: strcpy(month, "JUL");
  6682  000C40  0ED6               	movlw	low UI@month
  6683  000C42  0100               	movlb	0	; () banked
  6684  000C44  6F80               	movwf	strcpy@to& (0+255),b
  6685  000C46  0E00               	movlw	high UI@month
  6686  000C48  0100               	movlb	0	; () banked
  6687  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6688  000C4C  0ED6               	movlw	low STR_14
  6689  000C4E  0100               	movlb	0	; () banked
  6690  000C50  6F82               	movwf	strcpy@from& (0+255),b
  6691  000C52  0EFF               	movlw	high STR_14
  6692  000C54  0100               	movlb	0	; () banked
  6693  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6694  000C58  ECBE  F020         	call	_strcpy	;wreg free
  6695                           
  6696                           ;UI.c: 145: break;
  6697  000C5C  D08C               	goto	l7426
  6698  000C5E                     l7410:
  6699                           
  6700                           ;UI.c: 147: strcpy(month, "AUG");
  6701  000C5E  0ED6               	movlw	low UI@month
  6702  000C60  0100               	movlb	0	; () banked
  6703  000C62  6F80               	movwf	strcpy@to& (0+255),b
  6704  000C64  0E00               	movlw	high UI@month
  6705  000C66  0100               	movlb	0	; () banked
  6706  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6707  000C6A  0ED2               	movlw	low STR_15
  6708  000C6C  0100               	movlb	0	; () banked
  6709  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  6710  000C70  0EFF               	movlw	high STR_15
  6711  000C72  0100               	movlb	0	; () banked
  6712  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6713  000C76  ECBE  F020         	call	_strcpy	;wreg free
  6714                           
  6715                           ;UI.c: 148: break;
  6716  000C7A  D07D               	goto	l7426
  6717  000C7C                     l7412:
  6718                           
  6719                           ;UI.c: 150: strcpy(month, "SEP");
  6720  000C7C  0ED6               	movlw	low UI@month
  6721  000C7E  0100               	movlb	0	; () banked
  6722  000C80  6F80               	movwf	strcpy@to& (0+255),b
  6723  000C82  0E00               	movlw	high UI@month
  6724  000C84  0100               	movlb	0	; () banked
  6725  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6726  000C88  0EE2               	movlw	low STR_16
  6727  000C8A  0100               	movlb	0	; () banked
  6728  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  6729  000C8E  0EFF               	movlw	high STR_16
  6730  000C90  0100               	movlb	0	; () banked
  6731  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6732  000C94  ECBE  F020         	call	_strcpy	;wreg free
  6733                           
  6734                           ;UI.c: 151: break;
  6735  000C98  D06E               	goto	l7426
  6736  000C9A                     l7414:
  6737                           
  6738                           ;UI.c: 153: strcpy(month, "OCT");
  6739  000C9A  0ED6               	movlw	low UI@month
  6740  000C9C  0100               	movlb	0	; () banked
  6741  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  6742  000CA0  0E00               	movlw	high UI@month
  6743  000CA2  0100               	movlb	0	; () banked
  6744  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6745  000CA6  0EF2               	movlw	low STR_17
  6746  000CA8  0100               	movlb	0	; () banked
  6747  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  6748  000CAC  0EFF               	movlw	high STR_17
  6749  000CAE  0100               	movlb	0	; () banked
  6750  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6751  000CB2  ECBE  F020         	call	_strcpy	;wreg free
  6752                           
  6753                           ;UI.c: 154: break;
  6754  000CB6  D05F               	goto	l7426
  6755  000CB8                     l7416:
  6756                           
  6757                           ;UI.c: 156: strcpy(month, "NOV");
  6758  000CB8  0ED6               	movlw	low UI@month
  6759  000CBA  0100               	movlb	0	; () banked
  6760  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  6761  000CBE  0E00               	movlw	high UI@month
  6762  000CC0  0100               	movlb	0	; () banked
  6763  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6764  000CC4  0EF6               	movlw	low STR_18
  6765  000CC6  0100               	movlb	0	; () banked
  6766  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  6767  000CCA  0EFF               	movlw	high STR_18
  6768  000CCC  0100               	movlb	0	; () banked
  6769  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6770  000CD0  ECBE  F020         	call	_strcpy	;wreg free
  6771                           
  6772                           ;UI.c: 157: break;
  6773  000CD4  D050               	goto	l7426
  6774  000CD6                     l7418:
  6775                           
  6776                           ;UI.c: 159: strcpy(month, "DEC");
  6777  000CD6  0ED6               	movlw	low UI@month
  6778  000CD8  0100               	movlb	0	; () banked
  6779  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  6780  000CDC  0E00               	movlw	high UI@month
  6781  000CDE  0100               	movlb	0	; () banked
  6782  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6783  000CE2  0ECE               	movlw	low STR_19
  6784  000CE4  0100               	movlb	0	; () banked
  6785  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  6786  000CE8  0EFF               	movlw	high STR_19
  6787  000CEA  0100               	movlb	0	; () banked
  6788  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6789  000CEE  ECBE  F020         	call	_strcpy	;wreg free
  6790                           
  6791                           ;UI.c: 160: break;
  6792  000CF2  D041               	goto	l7426
  6793  000CF4                     l7420:
  6794                           
  6795                           ;UI.c: 162: strcpy(month, "ERR");
  6796  000CF4  0ED6               	movlw	low UI@month
  6797  000CF6  0100               	movlb	0	; () banked
  6798  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  6799  000CFA  0E00               	movlw	high UI@month
  6800  000CFC  0100               	movlb	0	; () banked
  6801  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6802  000D00  0EEE               	movlw	low STR_20
  6803  000D02  0100               	movlb	0	; () banked
  6804  000D04  6F82               	movwf	strcpy@from& (0+255),b
  6805  000D06  0EFF               	movlw	high STR_20
  6806  000D08  0100               	movlb	0	; () banked
  6807  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6808  000D0C  ECBE  F020         	call	_strcpy	;wreg free
  6809                           
  6810                           ;UI.c: 164: }
  6811                           
  6812                           ;UI.c: 163: break;
  6813  000D10  D032               	goto	l7426
  6814  000D12                     l7424:
  6815  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  6816  000D16  CFDE F0C4          	movff	postinc2,??_UI
  6817  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  6818                           
  6819                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6820                           ; Switch size 1, requested type "space"
  6821                           ; Number of cases is 1, Range of values is 0 to 0
  6822                           ; switch strategies available:
  6823                           ; Name         Instructions Cycles
  6824                           ; simple_byte            4     3 (average)
  6825                           ;	Chosen strategy is simple_byte
  6826  000D1E  0100               	movlb	0	; () banked
  6827  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  6828  000D22  0A00               	xorlw	0	; case 0
  6829  000D24  A4D8               	btfss	status,2,c
  6830  000D26  D7E6               	goto	l7420
  6831                           
  6832                           ; BSR set to: 0
  6833                           ; Switch size 1, requested type "space"
  6834                           ; Number of cases is 12, Range of values is 1 to 12
  6835                           ; switch strategies available:
  6836                           ; Name         Instructions Cycles
  6837                           ; simple_byte           37    19 (average)
  6838                           ;	Chosen strategy is simple_byte
  6839  000D28  0100               	movlb	0	; () banked
  6840  000D2A  51C4               	movf	??_UI& (0+255),w,b
  6841  000D2C  0A01               	xorlw	1	; case 1
  6842  000D2E  B4D8               	btfsc	status,2,c
  6843  000D30  D72D               	goto	l7396
  6844  000D32  0A03               	xorlw	3	; case 2
  6845  000D34  B4D8               	btfsc	status,2,c
  6846  000D36  D739               	goto	l7398
  6847  000D38  0A01               	xorlw	1	; case 3
  6848  000D3A  B4D8               	btfsc	status,2,c
  6849  000D3C  D745               	goto	l7400
  6850  000D3E  0A07               	xorlw	7	; case 4
  6851  000D40  B4D8               	btfsc	status,2,c
  6852  000D42  D751               	goto	l7402
  6853  000D44  0A01               	xorlw	1	; case 5
  6854  000D46  B4D8               	btfsc	status,2,c
  6855  000D48  D75D               	goto	l7404
  6856  000D4A  0A03               	xorlw	3	; case 6
  6857  000D4C  B4D8               	btfsc	status,2,c
  6858  000D4E  D769               	goto	l7406
  6859  000D50  0A01               	xorlw	1	; case 7
  6860  000D52  B4D8               	btfsc	status,2,c
  6861  000D54  D775               	goto	l7408
  6862  000D56  0A0F               	xorlw	15	; case 8
  6863  000D58  B4D8               	btfsc	status,2,c
  6864  000D5A  D781               	goto	l7410
  6865  000D5C  0A01               	xorlw	1	; case 9
  6866  000D5E  B4D8               	btfsc	status,2,c
  6867  000D60  D78D               	goto	l7412
  6868  000D62  0A03               	xorlw	3	; case 10
  6869  000D64  B4D8               	btfsc	status,2,c
  6870  000D66  D799               	goto	l7414
  6871  000D68  0A01               	xorlw	1	; case 11
  6872  000D6A  B4D8               	btfsc	status,2,c
  6873  000D6C  D7A5               	goto	l7416
  6874  000D6E  0A07               	xorlw	7	; case 12
  6875  000D70  B4D8               	btfsc	status,2,c
  6876  000D72  D7B1               	goto	l7418
  6877  000D74  D7BF               	goto	l7420
  6878  000D76                     l7426:
  6879                           
  6880                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6881  000D76  0E42               	movlw	low STR_21
  6882  000D78  0100               	movlb	0	; () banked
  6883  000D7A  6F8E               	movwf	printf@f& (0+255),b
  6884  000D7C  0EFB               	movlw	high STR_21
  6885  000D7E  0100               	movlb	0	; () banked
  6886  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  6887  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  6888  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  6889  000D8A  0ED6               	movlw	low UI@month
  6890  000D8C  0100               	movlb	0	; () banked
  6891  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  6892  000D90  0E00               	movlw	high UI@month
  6893  000D92  0100               	movlb	0	; () banked
  6894  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  6895  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  6896  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  6897  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  6898  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  6899  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  6900  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  6901  000DAE  ECB8  F008         	call	_printf	;wreg free
  6902                           
  6903                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6904  000DB2  0E00               	movlw	0
  6905  000DB4  0100               	movlb	0	; () banked
  6906  000DB6  6FCC               	movwf	UI@i_430& (0+255),b
  6907  000DB8                     l7430:
  6908                           
  6909                           ; BSR set to: 0
  6910  000DB8  0E63               	movlw	99
  6911  000DBA  0100               	movlb	0	; () banked
  6912  000DBC  65CC               	cpfsgt	UI@i_430& (0+255),b
  6913  000DBE  D001               	goto	l7434
  6914  000DC0  D00C               	goto	l7438
  6915  000DC2                     l7434:
  6916                           
  6917                           ; BSR set to: 0
  6918  000DC2  0E68               	movlw	104
  6919  000DC4  0100               	movlb	0	; () banked
  6920  000DC6  6FC4               	movwf	??_UI& (0+255),b
  6921  000DC8  0EE4               	movlw	228
  6922  000DCA                     u7217:
  6923  000DCA  2EE8               	decfsz	wreg,f,c
  6924  000DCC  D7FE               	bra	u7217
  6925  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  6926  000DD0  D7FC               	bra	u7217
  6927  000DD2  F000               	nop	
  6928  000DD4  0100               	movlb	0	; () banked
  6929  000DD6  2BCC               	incf	UI@i_430& (0+255),f,b
  6930  000DD8  D7EF               	goto	l7430
  6931  000DDA                     l7438:
  6932                           
  6933                           ; BSR set to: 0
  6934  000DDA  0100               	movlb	0	; () banked
  6935  000DDC  51F6               	movf	_logstate& (0+255),w,b
  6936  000DDE  0100               	movlb	0	; () banked
  6937  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6938  000DE2  B4D8               	btfsc	status,2,c
  6939  000DE4  0012               	return	
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6943                           
  6944                           ; BSR set to: 0
  6945                           
  6946                           ; BSR set to: 0
  6947  000DE6  0E00               	movlw	0
  6948  000DE8  0100               	movlb	0	; () banked
  6949  000DEA  6FCD               	movwf	UI@i_431& (0+255),b
  6950  000DEC                     l7444:
  6951                           
  6952                           ; BSR set to: 0
  6953  000DEC  0E63               	movlw	99
  6954  000DEE  0100               	movlb	0	; () banked
  6955  000DF0  65CD               	cpfsgt	UI@i_431& (0+255),b
  6956  000DF2  D001               	goto	l7448
  6957  000DF4  D00C               	goto	l7452
  6958  000DF6                     l7448:
  6959                           
  6960                           ; BSR set to: 0
  6961  000DF6  0E68               	movlw	104
  6962  000DF8  0100               	movlb	0	; () banked
  6963  000DFA  6FC4               	movwf	??_UI& (0+255),b
  6964  000DFC  0EE4               	movlw	228
  6965  000DFE                     u7227:
  6966  000DFE  2EE8               	decfsz	wreg,f,c
  6967  000E00  D7FE               	bra	u7227
  6968  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  6969  000E04  D7FC               	bra	u7227
  6970  000E06  F000               	nop	
  6971  000E08  0100               	movlb	0	; () banked
  6972  000E0A  2BCD               	incf	UI@i_431& (0+255),f,b
  6973  000E0C  D7EF               	goto	l7444
  6974  000E0E                     l7452:
  6975                           
  6976                           ; BSR set to: 0
  6977  000E0E  0100               	movlb	0	; () banked
  6978  000E10  51F6               	movf	_logstate& (0+255),w,b
  6979  000E12  0100               	movlb	0	; () banked
  6980  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6981  000E16  B4D8               	btfsc	status,2,c
  6982  000E18  0012               	return	
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990  000E1A  0E01               	movlw	1
  6991  000E1C  EC34  F023         	call	_lcdInst
  6992  000E20  0E68               	movlw	104
  6993  000E22  0100               	movlb	0	; () banked
  6994  000E24  6FC4               	movwf	??_UI& (0+255),b
  6995  000E26  0EE4               	movlw	228
  6996  000E28                     u7237:
  6997  000E28  2EE8               	decfsz	wreg,f,c
  6998  000E2A  D7FE               	bra	u7237
  6999  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7000  000E2E  D7FC               	bra	u7237
  7001  000E30  F000               	nop	
  7002                           
  7003                           ;UI.c: 171: lcdInst(0b10000000);;
  7004  000E32  0E80               	movlw	128
  7005  000E34  EC34  F023         	call	_lcdInst
  7006                           
  7007                           ;UI.c: 172: printf("DURATION:");
  7008  000E38  0EA3               	movlw	low STR_22
  7009  000E3A  0100               	movlb	0	; () banked
  7010  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7011  000E3E  0EFF               	movlw	high STR_22
  7012  000E40  0100               	movlb	0	; () banked
  7013  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7014  000E44  ECB8  F008         	call	_printf	;wreg free
  7015                           
  7016                           ;UI.c: 173: lcdInst(0b11000000);;
  7017  000E48  0EC0               	movlw	192
  7018  000E4A  EC34  F023         	call	_lcdInst
  7019                           
  7020                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7021  000E4E  0E0E               	movlw	14
  7022  000E50  0100               	movlb	0	; () banked
  7023  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7024  000E54  0E10               	movlw	16
  7025  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7026  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7027  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7028  000E60  EC89  F01B         	call	___awmod	;wreg free
  7029  000E64  C080  F0C6         	movff	?___awmod,_UI$2246
  7030  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2246+1
  7031                           
  7032                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7033  000E6C  0E1F               	movlw	low STR_23
  7034  000E6E  0100               	movlb	0	; () banked
  7035  000E70  6F8E               	movwf	printf@f& (0+255),b
  7036  000E72  0EFF               	movlw	high STR_23
  7037  000E74  0100               	movlb	0	; () banked
  7038  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7039  000E78  0E0E               	movlw	14
  7040  000E7A  0100               	movlb	0	; () banked
  7041  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7042  000E7E  0E10               	movlw	16
  7043  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7044  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7045  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7046  000E8A  EC89  F01B         	call	___awmod	;wreg free
  7047  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7048  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7049  000E96  0E00               	movlw	0
  7050  000E98  0100               	movlb	0	; () banked
  7051  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7052  000E9C  0E3C               	movlw	60
  7053  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7054  000EA0  EC77  F01A         	call	___awdiv	;wreg free
  7055  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7056  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7057  000EAC  C0C6  F080         	movff	_UI$2246,___awmod@dividend
  7058  000EB0  C0C7  F081         	movff	_UI$2246+1,___awmod@dividend+1
  7059  000EB4  0E00               	movlw	0
  7060  000EB6  0100               	movlb	0	; () banked
  7061  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7062  000EBA  0E3C               	movlw	60
  7063  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7064  000EBE  EC89  F01B         	call	___awmod	;wreg free
  7065  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7066  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7067  000ECA  ECB8  F008         	call	_printf	;wreg free
  7068                           
  7069                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7070  000ECE  0E00               	movlw	0
  7071  000ED0  0100               	movlb	0	; () banked
  7072  000ED2  6FCE               	movwf	UI@i_434& (0+255),b
  7073  000ED4                     l7472:
  7074                           
  7075                           ; BSR set to: 0
  7076  000ED4  0E63               	movlw	99
  7077  000ED6  0100               	movlb	0	; () banked
  7078  000ED8  65CE               	cpfsgt	UI@i_434& (0+255),b
  7079  000EDA  D001               	goto	l7476
  7080  000EDC  D00C               	goto	l7480
  7081  000EDE                     l7476:
  7082                           
  7083                           ; BSR set to: 0
  7084  000EDE  0E68               	movlw	104
  7085  000EE0  0100               	movlb	0	; () banked
  7086  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7087  000EE4  0EE4               	movlw	228
  7088  000EE6                     u7247:
  7089  000EE6  2EE8               	decfsz	wreg,f,c
  7090  000EE8  D7FE               	bra	u7247
  7091  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7092  000EEC  D7FC               	bra	u7247
  7093  000EEE  F000               	nop	
  7094  000EF0  0100               	movlb	0	; () banked
  7095  000EF2  2BCE               	incf	UI@i_434& (0+255),f,b
  7096  000EF4  D7EF               	goto	l7472
  7097  000EF6                     l7480:
  7098                           
  7099                           ; BSR set to: 0
  7100  000EF6  0100               	movlb	0	; () banked
  7101  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7102  000EFA  0100               	movlb	0	; () banked
  7103  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7104  000EFE  B4D8               	btfsc	status,2,c
  7105  000F00  0012               	return	
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7109                           
  7110                           ; BSR set to: 0
  7111                           
  7112                           ; BSR set to: 0
  7113  000F02  0E00               	movlw	0
  7114  000F04  0100               	movlb	0	; () banked
  7115  000F06  6FCF               	movwf	UI@i_435& (0+255),b
  7116  000F08                     l7486:
  7117                           
  7118                           ; BSR set to: 0
  7119  000F08  0E63               	movlw	99
  7120  000F0A  0100               	movlb	0	; () banked
  7121  000F0C  65CF               	cpfsgt	UI@i_435& (0+255),b
  7122  000F0E  D001               	goto	l7490
  7123  000F10  D00C               	goto	l7494
  7124  000F12                     l7490:
  7125                           
  7126                           ; BSR set to: 0
  7127  000F12  0E68               	movlw	104
  7128  000F14  0100               	movlb	0	; () banked
  7129  000F16  6FC4               	movwf	??_UI& (0+255),b
  7130  000F18  0EE4               	movlw	228
  7131  000F1A                     u7257:
  7132  000F1A  2EE8               	decfsz	wreg,f,c
  7133  000F1C  D7FE               	bra	u7257
  7134  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7135  000F20  D7FC               	bra	u7257
  7136  000F22  F000               	nop	
  7137  000F24  0100               	movlb	0	; () banked
  7138  000F26  2BCF               	incf	UI@i_435& (0+255),f,b
  7139  000F28  D7EF               	goto	l7486
  7140  000F2A                     l7494:
  7141                           
  7142                           ; BSR set to: 0
  7143  000F2A  0100               	movlb	0	; () banked
  7144  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7145  000F2E  0100               	movlb	0	; () banked
  7146  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7147  000F32  B4D8               	btfsc	status,2,c
  7148  000F34  0012               	return	
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7152                           
  7153                           ; BSR set to: 0
  7154                           
  7155                           ; BSR set to: 0
  7156  000F36  0E01               	movlw	1
  7157  000F38  EC34  F023         	call	_lcdInst
  7158  000F3C  0E68               	movlw	104
  7159  000F3E  0100               	movlb	0	; () banked
  7160  000F40  6FC4               	movwf	??_UI& (0+255),b
  7161  000F42  0EE4               	movlw	228
  7162  000F44                     u7267:
  7163  000F44  2EE8               	decfsz	wreg,f,c
  7164  000F46  D7FE               	bra	u7267
  7165  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7166  000F4A  D7FC               	bra	u7267
  7167  000F4C  F000               	nop	
  7168                           
  7169                           ;UI.c: 180: lcdInst(0b10000000);;
  7170  000F4E  0E80               	movlw	128
  7171  000F50  EC34  F023         	call	_lcdInst
  7172                           
  7173                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7174  000F54  0E64               	movlw	low STR_24
  7175  000F56  0100               	movlb	0	; () banked
  7176  000F58  6F8E               	movwf	printf@f& (0+255),b
  7177  000F5A  0EFD               	movlw	high STR_24
  7178  000F5C  0100               	movlb	0	; () banked
  7179  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7180  000F60  ECB8  F008         	call	_printf	;wreg free
  7181                           
  7182                           ;UI.c: 182: lcdInst(0b11000000);;
  7183  000F64  0EC0               	movlw	192
  7184  000F66  EC34  F023         	call	_lcdInst
  7185                           
  7186                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7187  000F6A  0E82               	movlw	low STR_25
  7188  000F6C  0100               	movlb	0	; () banked
  7189  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7190  000F70  0EFB               	movlw	high STR_25
  7191  000F72  0100               	movlb	0	; () banked
  7192  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7193  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7194  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7195  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7196  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7197  000F86  ECB8  F008         	call	_printf	;wreg free
  7198                           
  7199                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7200  000F8A  0E00               	movlw	0
  7201  000F8C  0100               	movlb	0	; () banked
  7202  000F8E  6FD0               	movwf	UI@i_438& (0+255),b
  7203  000F90                     l7512:
  7204                           
  7205                           ; BSR set to: 0
  7206  000F90  0E63               	movlw	99
  7207  000F92  0100               	movlb	0	; () banked
  7208  000F94  65D0               	cpfsgt	UI@i_438& (0+255),b
  7209  000F96  D001               	goto	l7516
  7210  000F98  D00C               	goto	l7520
  7211  000F9A                     l7516:
  7212                           
  7213                           ; BSR set to: 0
  7214  000F9A  0E68               	movlw	104
  7215  000F9C  0100               	movlb	0	; () banked
  7216  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7217  000FA0  0EE4               	movlw	228
  7218  000FA2                     u7277:
  7219  000FA2  2EE8               	decfsz	wreg,f,c
  7220  000FA4  D7FE               	bra	u7277
  7221  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7222  000FA8  D7FC               	bra	u7277
  7223  000FAA  F000               	nop	
  7224  000FAC  0100               	movlb	0	; () banked
  7225  000FAE  2BD0               	incf	UI@i_438& (0+255),f,b
  7226  000FB0  D7EF               	goto	l7512
  7227  000FB2                     l7520:
  7228                           
  7229                           ; BSR set to: 0
  7230  000FB2  0100               	movlb	0	; () banked
  7231  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7232  000FB6  0100               	movlb	0	; () banked
  7233  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7234  000FBA  B4D8               	btfsc	status,2,c
  7235  000FBC  0012               	return	
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7239                           
  7240                           ; BSR set to: 0
  7241                           
  7242                           ; BSR set to: 0
  7243  000FBE  0E00               	movlw	0
  7244  000FC0  0100               	movlb	0	; () banked
  7245  000FC2  6FD1               	movwf	UI@i_439& (0+255),b
  7246  000FC4                     l7526:
  7247                           
  7248                           ; BSR set to: 0
  7249  000FC4  0E63               	movlw	99
  7250  000FC6  0100               	movlb	0	; () banked
  7251  000FC8  65D1               	cpfsgt	UI@i_439& (0+255),b
  7252  000FCA  D001               	goto	l7530
  7253  000FCC  D00C               	goto	l7534
  7254  000FCE                     l7530:
  7255                           
  7256                           ; BSR set to: 0
  7257  000FCE  0E68               	movlw	104
  7258  000FD0  0100               	movlb	0	; () banked
  7259  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7260  000FD4  0EE4               	movlw	228
  7261  000FD6                     u7287:
  7262  000FD6  2EE8               	decfsz	wreg,f,c
  7263  000FD8  D7FE               	bra	u7287
  7264  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7265  000FDC  D7FC               	bra	u7287
  7266  000FDE  F000               	nop	
  7267  000FE0  0100               	movlb	0	; () banked
  7268  000FE2  2BD1               	incf	UI@i_439& (0+255),f,b
  7269  000FE4  D7EF               	goto	l7526
  7270  000FE6                     l7534:
  7271                           
  7272                           ; BSR set to: 0
  7273  000FE6  0100               	movlb	0	; () banked
  7274  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7275  000FEA  0100               	movlb	0	; () banked
  7276  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7277  000FEE  B4D8               	btfsc	status,2,c
  7278  000FF0  0012               	return	
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7282                           
  7283                           ; BSR set to: 0
  7284                           
  7285                           ; BSR set to: 0
  7286  000FF2  0E01               	movlw	1
  7287  000FF4  EC34  F023         	call	_lcdInst
  7288  000FF8  0E68               	movlw	104
  7289  000FFA  0100               	movlb	0	; () banked
  7290  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7291  000FFE  0EE4               	movlw	228
  7292  001000                     u7297:
  7293  001000  2EE8               	decfsz	wreg,f,c
  7294  001002  D7FE               	bra	u7297
  7295  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7296  001006  D7FC               	bra	u7297
  7297  001008  F000               	nop	
  7298                           
  7299                           ;UI.c: 189: lcdInst(0b10000000);;
  7300  00100A  0E80               	movlw	128
  7301  00100C  EC34  F023         	call	_lcdInst
  7302                           
  7303                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7304  001010  0E75               	movlw	low STR_26
  7305  001012  0100               	movlb	0	; () banked
  7306  001014  6F8E               	movwf	printf@f& (0+255),b
  7307  001016  0EFD               	movlw	high STR_26
  7308  001018  0100               	movlb	0	; () banked
  7309  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7310  00101C  ECB8  F008         	call	_printf	;wreg free
  7311                           
  7312                           ;UI.c: 191: lcdInst(0b11000000);;
  7313  001020  0EC0               	movlw	192
  7314  001022  EC34  F023         	call	_lcdInst
  7315                           
  7316                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7317  001026  0E6F               	movlw	low STR_27
  7318  001028  0100               	movlb	0	; () banked
  7319  00102A  6F8E               	movwf	printf@f& (0+255),b
  7320  00102C  0EFB               	movlw	high STR_27
  7321  00102E  0100               	movlb	0	; () banked
  7322  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7323  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7324  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7325  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7326  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7327  001042  ECB8  F008         	call	_printf	;wreg free
  7328                           
  7329                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7330  001046  0E00               	movlw	0
  7331  001048  0100               	movlb	0	; () banked
  7332  00104A  6FD2               	movwf	UI@i_442& (0+255),b
  7333  00104C                     l7552:
  7334                           
  7335                           ; BSR set to: 0
  7336  00104C  0E63               	movlw	99
  7337  00104E  0100               	movlb	0	; () banked
  7338  001050  65D2               	cpfsgt	UI@i_442& (0+255),b
  7339  001052  D001               	goto	l7556
  7340  001054  D00C               	goto	l7560
  7341  001056                     l7556:
  7342                           
  7343                           ; BSR set to: 0
  7344  001056  0E68               	movlw	104
  7345  001058  0100               	movlb	0	; () banked
  7346  00105A  6FC4               	movwf	??_UI& (0+255),b
  7347  00105C  0EE4               	movlw	228
  7348  00105E                     u7307:
  7349  00105E  2EE8               	decfsz	wreg,f,c
  7350  001060  D7FE               	bra	u7307
  7351  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7352  001064  D7FC               	bra	u7307
  7353  001066  F000               	nop	
  7354  001068  0100               	movlb	0	; () banked
  7355  00106A  2BD2               	incf	UI@i_442& (0+255),f,b
  7356  00106C  D7EF               	goto	l7552
  7357  00106E                     l7560:
  7358                           
  7359                           ; BSR set to: 0
  7360  00106E  0100               	movlb	0	; () banked
  7361  001070  51F6               	movf	_logstate& (0+255),w,b
  7362  001072  0100               	movlb	0	; () banked
  7363  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7364  001076  B4D8               	btfsc	status,2,c
  7365  001078  0012               	return	
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7369                           
  7370                           ; BSR set to: 0
  7371                           
  7372                           ; BSR set to: 0
  7373  00107A  0E00               	movlw	0
  7374  00107C  0100               	movlb	0	; () banked
  7375  00107E  6FD3               	movwf	UI@i_443& (0+255),b
  7376  001080                     l7566:
  7377                           
  7378                           ; BSR set to: 0
  7379  001080  0E63               	movlw	99
  7380  001082  0100               	movlb	0	; () banked
  7381  001084  65D3               	cpfsgt	UI@i_443& (0+255),b
  7382  001086  D001               	goto	l7570
  7383  001088  D00C               	goto	l7574
  7384  00108A                     l7570:
  7385                           
  7386                           ; BSR set to: 0
  7387  00108A  0E68               	movlw	104
  7388  00108C  0100               	movlb	0	; () banked
  7389  00108E  6FC4               	movwf	??_UI& (0+255),b
  7390  001090  0EE4               	movlw	228
  7391  001092                     u7317:
  7392  001092  2EE8               	decfsz	wreg,f,c
  7393  001094  D7FE               	bra	u7317
  7394  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7395  001098  D7FC               	bra	u7317
  7396  00109A  F000               	nop	
  7397  00109C  0100               	movlb	0	; () banked
  7398  00109E  2BD3               	incf	UI@i_443& (0+255),f,b
  7399  0010A0  D7EF               	goto	l7566
  7400  0010A2                     l7574:
  7401                           
  7402                           ; BSR set to: 0
  7403  0010A2  0100               	movlb	0	; () banked
  7404  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7405  0010A6  0100               	movlb	0	; () banked
  7406  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7407  0010AA  B4D8               	btfsc	status,2,c
  7408  0010AC  0012               	return	
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7412                           
  7413                           ; BSR set to: 0
  7414                           
  7415                           ; BSR set to: 0
  7416  0010AE  0E01               	movlw	1
  7417  0010B0  EC34  F023         	call	_lcdInst
  7418  0010B4  0E68               	movlw	104
  7419  0010B6  0100               	movlb	0	; () banked
  7420  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7421  0010BA  0EE4               	movlw	228
  7422  0010BC                     u7327:
  7423  0010BC  2EE8               	decfsz	wreg,f,c
  7424  0010BE  D7FE               	bra	u7327
  7425  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7426  0010C2  D7FC               	bra	u7327
  7427  0010C4  F000               	nop	
  7428                           
  7429                           ;UI.c: 198: lcdInst(0b10000000);;
  7430  0010C6  0E80               	movlw	128
  7431  0010C8  EC34  F023         	call	_lcdInst
  7432                           
  7433                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7434  0010CC  0E86               	movlw	low STR_28
  7435  0010CE  0100               	movlb	0	; () banked
  7436  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7437  0010D2  0EFD               	movlw	high STR_28
  7438  0010D4  0100               	movlb	0	; () banked
  7439  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7440  0010D8  ECB8  F008         	call	_printf	;wreg free
  7441                           
  7442                           ;UI.c: 200: lcdInst(0b11000000);;
  7443  0010DC  0EC0               	movlw	192
  7444  0010DE  EC34  F023         	call	_lcdInst
  7445                           
  7446                           ;UI.c: 201: printf("%d", log_count_total);
  7447  0010E2  0E7F               	movlw	low (STR_27+16)
  7448  0010E4  0100               	movlb	0	; () banked
  7449  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7450  0010E8  0EFB               	movlw	high (STR_27+16)
  7451  0010EA  0100               	movlb	0	; () banked
  7452  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7453  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7454  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7455  0010F6  ECB8  F008         	call	_printf	;wreg free
  7456                           
  7457                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7458  0010FA  0E00               	movlw	0
  7459  0010FC  0100               	movlb	0	; () banked
  7460  0010FE  6FD4               	movwf	UI@i_446& (0+255),b
  7461  001100                     l7592:
  7462                           
  7463                           ; BSR set to: 0
  7464  001100  0E63               	movlw	99
  7465  001102  0100               	movlb	0	; () banked
  7466  001104  65D4               	cpfsgt	UI@i_446& (0+255),b
  7467  001106  D001               	goto	l7596
  7468  001108  D00C               	goto	l7600
  7469  00110A                     l7596:
  7470                           
  7471                           ; BSR set to: 0
  7472  00110A  0E68               	movlw	104
  7473  00110C  0100               	movlb	0	; () banked
  7474  00110E  6FC4               	movwf	??_UI& (0+255),b
  7475  001110  0EE4               	movlw	228
  7476  001112                     u7337:
  7477  001112  2EE8               	decfsz	wreg,f,c
  7478  001114  D7FE               	bra	u7337
  7479  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7480  001118  D7FC               	bra	u7337
  7481  00111A  F000               	nop	
  7482  00111C  0100               	movlb	0	; () banked
  7483  00111E  2BD4               	incf	UI@i_446& (0+255),f,b
  7484  001120  D7EF               	goto	l7592
  7485  001122                     l7600:
  7486                           
  7487                           ; BSR set to: 0
  7488  001122  0100               	movlb	0	; () banked
  7489  001124  51F6               	movf	_logstate& (0+255),w,b
  7490  001126  0100               	movlb	0	; () banked
  7491  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7492  00112A  B4D8               	btfsc	status,2,c
  7493  00112C  0012               	return	
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7497                           
  7498                           ; BSR set to: 0
  7499                           
  7500                           ; BSR set to: 0
  7501  00112E  0E00               	movlw	0
  7502  001130  0100               	movlb	0	; () banked
  7503  001132  6FD5               	movwf	UI@i_447& (0+255),b
  7504  001134                     l7606:
  7505                           
  7506                           ; BSR set to: 0
  7507  001134  0E63               	movlw	99
  7508  001136  0100               	movlb	0	; () banked
  7509  001138  65D5               	cpfsgt	UI@i_447& (0+255),b
  7510  00113A  D001               	goto	l7610
  7511  00113C  D00C               	goto	l7614
  7512  00113E                     l7610:
  7513                           
  7514                           ; BSR set to: 0
  7515  00113E  0E68               	movlw	104
  7516  001140  0100               	movlb	0	; () banked
  7517  001142  6FC4               	movwf	??_UI& (0+255),b
  7518  001144  0EE4               	movlw	228
  7519  001146                     u7347:
  7520  001146  2EE8               	decfsz	wreg,f,c
  7521  001148  D7FE               	bra	u7347
  7522  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7523  00114C  D7FC               	bra	u7347
  7524  00114E  F000               	nop	
  7525  001150  0100               	movlb	0	; () banked
  7526  001152  2BD5               	incf	UI@i_447& (0+255),f,b
  7527  001154  D7EF               	goto	l7606
  7528  001156                     l7614:
  7529                           
  7530                           ; BSR set to: 0
  7531  001156  0100               	movlb	0	; () banked
  7532  001158  51F6               	movf	_logstate& (0+255),w,b
  7533  00115A  0100               	movlb	0	; () banked
  7534  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7535  00115E  B4D8               	btfsc	status,2,c
  7536  001160  0012               	return	
  7537  001162                     l7618:
  7538  001162  0100               	movlb	0	; () banked
  7539  001164  51F6               	movf	_logstate& (0+255),w,b
  7540  001166  0100               	movlb	0	; () banked
  7541  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7542  00116A  B4D8               	btfsc	status,2,c
  7543  00116C  0012               	return	
  7544  00116E  D44A               	goto	l7314
  7545  001170                     __end_of_UI:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           intcon	equ	0xFF2
  7554                           intcon2	equ	0xFF1
  7555                           intcon3	equ	0xFF0
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           postdec1	equ	0xFE5
  7559                           fsr1l	equ	0xFE1
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           postdec2	equ	0xFDD
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _printRTC *****************
  7568 ;; Defined at:
  7569 ;;		line 63 in file "RTC.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;		None
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  i               2   66[BANK0 ] int 
  7574 ;;  INT_time       14   46[BANK0 ] int [7]
  7575 ;;  month           4   62[BANK0 ] unsigned char [4]
  7576 ;;  RTC_month       2   60[BANK0 ] int 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7587 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;Total ram usage:       25 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:   10
  7593 ;; This function calls:
  7594 ;;		_getRTC
  7595 ;;		_lcdInst
  7596 ;;		_printf
  7597 ;;		_strcpy
  7598 ;; This function is called by:
  7599 ;;		_UI
  7600 ;;		_change_state_to_menu_start
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           	psect	text23
  7605  001C06                     __ptext23:
  7606                           	opt stack 0
  7607  001C06                     _printRTC:
  7608                           	opt stack 18
  7609                           
  7610                           ;RTC.c: 64: getRTC();
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;incstack = 0
  7614  001C06  ECFA  F01C         	call	_getRTC	;wreg free
  7615                           
  7616                           ;RTC.c: 65: char month[] = "MMM";
  7617  001C0A  C133  F0BE         	movff	printRTC@F3214,printRTC@month
  7618  001C0E  C134  F0BF         	movff	printRTC@F3214+1,printRTC@month+1
  7619  001C12  C135  F0C0         	movff	printRTC@F3214+2,printRTC@month+2
  7620  001C16  C136  F0C1         	movff	printRTC@F3214+3,printRTC@month+3
  7621                           
  7622                           ;RTC.c: 66: int INT_time[7];
  7623                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7624  001C1A  0E00               	movlw	0
  7625  001C1C  0100               	movlb	0	; () banked
  7626  001C1E  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7627  001C20  0E00               	movlw	0
  7628  001C22  6FC2               	movwf	printRTC@i& (0+255),b
  7629                           
  7630                           ; BSR set to: 0
  7631  001C24  0100               	movlb	0	; () banked
  7632  001C26  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7633  001C28  D008               	goto	l5762
  7634  001C2A  0100               	movlb	0	; () banked
  7635  001C2C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7636  001C2E  E146               	bnz	l595
  7637  001C30  0E07               	movlw	7
  7638  001C32  0100               	movlb	0	; () banked
  7639  001C34  5DC2               	subwf	printRTC@i& (0+255),w,b
  7640  001C36  B0D8               	btfsc	status,0,c
  7641  001C38  D041               	goto	l595
  7642  001C3A                     l5762:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7646  001C3A  0E24               	movlw	low _time
  7647  001C3C  0100               	movlb	0	; () banked
  7648  001C3E  25C2               	addwf	printRTC@i& (0+255),w,b
  7649  001C40  6ED9               	movwf	fsr2l,c
  7650  001C42  0E01               	movlw	high _time
  7651  001C44  0100               	movlb	0	; () banked
  7652  001C46  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7653  001C48  6EDA               	movwf	fsr2h,c
  7654  001C4A  50DF               	movf	indf2,w,c
  7655  001C4C  0100               	movlb	0	; () banked
  7656  001C4E  6FAB               	movwf	??_printRTC& (0+255),b
  7657  001C50  0100               	movlb	0	; () banked
  7658  001C52  3BAB               	swapf	??_printRTC& (0+255),f,b
  7659  001C54  0E0F               	movlw	15
  7660  001C56  17AB               	andwf	??_printRTC& (0+255),f,b
  7661  001C58  0E0F               	movlw	15
  7662  001C5A  0100               	movlb	0	; () banked
  7663  001C5C  17AB               	andwf	??_printRTC& (0+255),f,b
  7664  001C5E  0100               	movlb	0	; () banked
  7665  001C60  51AB               	movf	??_printRTC& (0+255),w,b
  7666  001C62  0D0A               	mullw	10
  7667  001C64  0E24               	movlw	low _time
  7668  001C66  0100               	movlb	0	; () banked
  7669  001C68  25C2               	addwf	printRTC@i& (0+255),w,b
  7670  001C6A  6ED9               	movwf	fsr2l,c
  7671  001C6C  0E01               	movlw	high _time
  7672  001C6E  0100               	movlb	0	; () banked
  7673  001C70  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7674  001C72  6EDA               	movwf	fsr2h,c
  7675  001C74  50DF               	movf	indf2,w,c
  7676  001C76  0B0F               	andlw	15
  7677  001C78  0100               	movlb	0	; () banked
  7678  001C7A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7679  001C7C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7680  001C7E  50F3               	movf	prodl,w,c
  7681  001C80  0100               	movlb	0	; () banked
  7682  001C82  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7683  001C84  50F4               	movf	prodh,w,c
  7684  001C86  0100               	movlb	0	; () banked
  7685  001C88  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7686  001C8A  90D8               	bcf	status,0,c
  7687  001C8C  0100               	movlb	0	; () banked
  7688  001C8E  35C2               	rlcf	printRTC@i& (0+255),w,b
  7689  001C90  6ED9               	movwf	fsr2l,c
  7690  001C92  0100               	movlb	0	; () banked
  7691  001C94  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7692  001C96  6EDA               	movwf	fsr2h,c
  7693  001C98  0EAE               	movlw	low printRTC@INT_time
  7694  001C9A  26D9               	addwf	fsr2l,f,c
  7695  001C9C  0E00               	movlw	high printRTC@INT_time
  7696  001C9E  22DA               	addwfc	fsr2h,f,c
  7697  001CA0  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7698  001CA4  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7699                           
  7700                           ; BSR set to: 0
  7701  001CA8  0100               	movlb	0	; () banked
  7702  001CAA  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7703  001CAC  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7704                           
  7705                           ; BSR set to: 0
  7706  001CAE  0100               	movlb	0	; () banked
  7707  001CB0  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7708  001CB2  D7C3               	goto	l5762
  7709  001CB4  0100               	movlb	0	; () banked
  7710  001CB6  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7711  001CB8  E101               	bnz	u4450
  7712  001CBA  D7BA               	goto	L6
  7713  001CBC                     u4450:
  7714  001CBC                     l595:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;RTC.c: 69: }
  7718                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7719  001CBC  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7720  001CC0  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7721                           
  7722                           ;RTC.c: 71: switch(RTC_month){
  7723  001CC4  D0B4               	goto	l5794
  7724  001CC6                     l5768:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;RTC.c: 73: strcpy(month, "JAN");
  7728  001CC6  0EBE               	movlw	low printRTC@month
  7729  001CC8  0100               	movlb	0	; () banked
  7730  001CCA  6F80               	movwf	strcpy@to& (0+255),b
  7731  001CCC  0E00               	movlw	high printRTC@month
  7732  001CCE  0100               	movlb	0	; () banked
  7733  001CD0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7734  001CD2  0EDA               	movlw	low STR_8
  7735  001CD4  0100               	movlb	0	; () banked
  7736  001CD6  6F82               	movwf	strcpy@from& (0+255),b
  7737  001CD8  0EFF               	movlw	high STR_8
  7738  001CDA  0100               	movlb	0	; () banked
  7739  001CDC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7740  001CDE  ECBE  F020         	call	_strcpy	;wreg free
  7741                           
  7742                           ;RTC.c: 74: break;
  7743  001CE2  D0D4               	goto	l5796
  7744  001CE4                     l5770:
  7745                           
  7746                           ;RTC.c: 76: strcpy(month, "FEB");
  7747  001CE4  0EBE               	movlw	low printRTC@month
  7748  001CE6  0100               	movlb	0	; () banked
  7749  001CE8  6F80               	movwf	strcpy@to& (0+255),b
  7750  001CEA  0E00               	movlw	high printRTC@month
  7751  001CEC  0100               	movlb	0	; () banked
  7752  001CEE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7753  001CF0  0ECA               	movlw	low STR_9
  7754  001CF2  0100               	movlb	0	; () banked
  7755  001CF4  6F82               	movwf	strcpy@from& (0+255),b
  7756  001CF6  0EFF               	movlw	high STR_9
  7757  001CF8  0100               	movlb	0	; () banked
  7758  001CFA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7759  001CFC  ECBE  F020         	call	_strcpy	;wreg free
  7760                           
  7761                           ;RTC.c: 77: break;
  7762  001D00  D0C5               	goto	l5796
  7763  001D02                     l5772:
  7764                           
  7765                           ;RTC.c: 79: strcpy(month, "MAR");
  7766  001D02  0EBE               	movlw	low printRTC@month
  7767  001D04  0100               	movlb	0	; () banked
  7768  001D06  6F80               	movwf	strcpy@to& (0+255),b
  7769  001D08  0E00               	movlw	high printRTC@month
  7770  001D0A  0100               	movlb	0	; () banked
  7771  001D0C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7772  001D0E  0EE6               	movlw	low STR_10
  7773  001D10  0100               	movlb	0	; () banked
  7774  001D12  6F82               	movwf	strcpy@from& (0+255),b
  7775  001D14  0EFF               	movlw	high STR_10
  7776  001D16  0100               	movlb	0	; () banked
  7777  001D18  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7778  001D1A  ECBE  F020         	call	_strcpy	;wreg free
  7779                           
  7780                           ;RTC.c: 80: break;
  7781  001D1E  D0B6               	goto	l5796
  7782  001D20                     l5774:
  7783                           
  7784                           ;RTC.c: 82: strcpy(month, "APR");
  7785  001D20  0EBE               	movlw	low printRTC@month
  7786  001D22  0100               	movlb	0	; () banked
  7787  001D24  6F80               	movwf	strcpy@to& (0+255),b
  7788  001D26  0E00               	movlw	high printRTC@month
  7789  001D28  0100               	movlb	0	; () banked
  7790  001D2A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7791  001D2C  0EEA               	movlw	low STR_11
  7792  001D2E  0100               	movlb	0	; () banked
  7793  001D30  6F82               	movwf	strcpy@from& (0+255),b
  7794  001D32  0EFF               	movlw	high STR_11
  7795  001D34  0100               	movlb	0	; () banked
  7796  001D36  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7797  001D38  ECBE  F020         	call	_strcpy	;wreg free
  7798                           
  7799                           ;RTC.c: 83: break;
  7800  001D3C  D0A7               	goto	l5796
  7801  001D3E                     l5776:
  7802                           
  7803                           ;RTC.c: 85: strcpy(month, "MAY");
  7804  001D3E  0EBE               	movlw	low printRTC@month
  7805  001D40  0100               	movlb	0	; () banked
  7806  001D42  6F80               	movwf	strcpy@to& (0+255),b
  7807  001D44  0E00               	movlw	high printRTC@month
  7808  001D46  0100               	movlb	0	; () banked
  7809  001D48  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7810  001D4A  0EFA               	movlw	low STR_12
  7811  001D4C  0100               	movlb	0	; () banked
  7812  001D4E  6F82               	movwf	strcpy@from& (0+255),b
  7813  001D50  0EFF               	movlw	high STR_12
  7814  001D52  0100               	movlb	0	; () banked
  7815  001D54  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7816  001D56  ECBE  F020         	call	_strcpy	;wreg free
  7817                           
  7818                           ;RTC.c: 86: break;
  7819  001D5A  D098               	goto	l5796
  7820  001D5C                     l5778:
  7821                           
  7822                           ;RTC.c: 88: strcpy(month, "JUN");
  7823  001D5C  0EBE               	movlw	low printRTC@month
  7824  001D5E  0100               	movlb	0	; () banked
  7825  001D60  6F80               	movwf	strcpy@to& (0+255),b
  7826  001D62  0E00               	movlw	high printRTC@month
  7827  001D64  0100               	movlb	0	; () banked
  7828  001D66  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7829  001D68  0EDE               	movlw	low STR_13
  7830  001D6A  0100               	movlb	0	; () banked
  7831  001D6C  6F82               	movwf	strcpy@from& (0+255),b
  7832  001D6E  0EFF               	movlw	high STR_13
  7833  001D70  0100               	movlb	0	; () banked
  7834  001D72  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7835  001D74  ECBE  F020         	call	_strcpy	;wreg free
  7836                           
  7837                           ;RTC.c: 89: break;
  7838  001D78  D089               	goto	l5796
  7839  001D7A                     l5780:
  7840                           
  7841                           ;RTC.c: 91: strcpy(month, "JUL");
  7842  001D7A  0EBE               	movlw	low printRTC@month
  7843  001D7C  0100               	movlb	0	; () banked
  7844  001D7E  6F80               	movwf	strcpy@to& (0+255),b
  7845  001D80  0E00               	movlw	high printRTC@month
  7846  001D82  0100               	movlb	0	; () banked
  7847  001D84  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7848  001D86  0ED6               	movlw	low STR_14
  7849  001D88  0100               	movlb	0	; () banked
  7850  001D8A  6F82               	movwf	strcpy@from& (0+255),b
  7851  001D8C  0EFF               	movlw	high STR_14
  7852  001D8E  0100               	movlb	0	; () banked
  7853  001D90  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7854  001D92  ECBE  F020         	call	_strcpy	;wreg free
  7855                           
  7856                           ;RTC.c: 92: break;
  7857  001D96  D07A               	goto	l5796
  7858  001D98                     l5782:
  7859                           
  7860                           ;RTC.c: 94: strcpy(month, "AUG");
  7861  001D98  0EBE               	movlw	low printRTC@month
  7862  001D9A  0100               	movlb	0	; () banked
  7863  001D9C  6F80               	movwf	strcpy@to& (0+255),b
  7864  001D9E  0E00               	movlw	high printRTC@month
  7865  001DA0  0100               	movlb	0	; () banked
  7866  001DA2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7867  001DA4  0ED2               	movlw	low STR_15
  7868  001DA6  0100               	movlb	0	; () banked
  7869  001DA8  6F82               	movwf	strcpy@from& (0+255),b
  7870  001DAA  0EFF               	movlw	high STR_15
  7871  001DAC  0100               	movlb	0	; () banked
  7872  001DAE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7873  001DB0  ECBE  F020         	call	_strcpy	;wreg free
  7874                           
  7875                           ;RTC.c: 95: break;
  7876  001DB4  D06B               	goto	l5796
  7877  001DB6                     l5784:
  7878                           
  7879                           ;RTC.c: 97: strcpy(month, "SEP");
  7880  001DB6  0EBE               	movlw	low printRTC@month
  7881  001DB8  0100               	movlb	0	; () banked
  7882  001DBA  6F80               	movwf	strcpy@to& (0+255),b
  7883  001DBC  0E00               	movlw	high printRTC@month
  7884  001DBE  0100               	movlb	0	; () banked
  7885  001DC0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7886  001DC2  0EE2               	movlw	low STR_16
  7887  001DC4  0100               	movlb	0	; () banked
  7888  001DC6  6F82               	movwf	strcpy@from& (0+255),b
  7889  001DC8  0EFF               	movlw	high STR_16
  7890  001DCA  0100               	movlb	0	; () banked
  7891  001DCC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7892  001DCE  ECBE  F020         	call	_strcpy	;wreg free
  7893                           
  7894                           ;RTC.c: 98: break;
  7895  001DD2  D05C               	goto	l5796
  7896  001DD4                     l5786:
  7897                           
  7898                           ;RTC.c: 100: strcpy(month, "OCT");
  7899  001DD4  0EBE               	movlw	low printRTC@month
  7900  001DD6  0100               	movlb	0	; () banked
  7901  001DD8  6F80               	movwf	strcpy@to& (0+255),b
  7902  001DDA  0E00               	movlw	high printRTC@month
  7903  001DDC  0100               	movlb	0	; () banked
  7904  001DDE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7905  001DE0  0EF2               	movlw	low STR_17
  7906  001DE2  0100               	movlb	0	; () banked
  7907  001DE4  6F82               	movwf	strcpy@from& (0+255),b
  7908  001DE6  0EFF               	movlw	high STR_17
  7909  001DE8  0100               	movlb	0	; () banked
  7910  001DEA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7911  001DEC  ECBE  F020         	call	_strcpy	;wreg free
  7912                           
  7913                           ;RTC.c: 101: break;
  7914  001DF0  D04D               	goto	l5796
  7915  001DF2                     l5788:
  7916                           
  7917                           ;RTC.c: 103: strcpy(month, "NOV");
  7918  001DF2  0EBE               	movlw	low printRTC@month
  7919  001DF4  0100               	movlb	0	; () banked
  7920  001DF6  6F80               	movwf	strcpy@to& (0+255),b
  7921  001DF8  0E00               	movlw	high printRTC@month
  7922  001DFA  0100               	movlb	0	; () banked
  7923  001DFC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7924  001DFE  0EF6               	movlw	low STR_18
  7925  001E00  0100               	movlb	0	; () banked
  7926  001E02  6F82               	movwf	strcpy@from& (0+255),b
  7927  001E04  0EFF               	movlw	high STR_18
  7928  001E06  0100               	movlb	0	; () banked
  7929  001E08  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7930  001E0A  ECBE  F020         	call	_strcpy	;wreg free
  7931                           
  7932                           ;RTC.c: 104: break;
  7933  001E0E  D03E               	goto	l5796
  7934  001E10                     l5790:
  7935                           
  7936                           ;RTC.c: 106: strcpy(month, "DEC");
  7937  001E10  0EBE               	movlw	low printRTC@month
  7938  001E12  0100               	movlb	0	; () banked
  7939  001E14  6F80               	movwf	strcpy@to& (0+255),b
  7940  001E16  0E00               	movlw	high printRTC@month
  7941  001E18  0100               	movlb	0	; () banked
  7942  001E1A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7943  001E1C  0ECE               	movlw	low STR_19
  7944  001E1E  0100               	movlb	0	; () banked
  7945  001E20  6F82               	movwf	strcpy@from& (0+255),b
  7946  001E22  0EFF               	movlw	high STR_19
  7947  001E24  0100               	movlb	0	; () banked
  7948  001E26  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7949  001E28  ECBE  F020         	call	_strcpy	;wreg free
  7950                           
  7951                           ;RTC.c: 108: }
  7952                           
  7953                           ;RTC.c: 107: break;
  7954  001E2C  D02F               	goto	l5796
  7955  001E2E                     l5794:
  7956  001E2E  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7957  001E32  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7958                           
  7959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7960                           ; Switch size 1, requested type "space"
  7961                           ; Number of cases is 1, Range of values is 0 to 0
  7962                           ; switch strategies available:
  7963                           ; Name         Instructions Cycles
  7964                           ; simple_byte            4     3 (average)
  7965                           ;	Chosen strategy is simple_byte
  7966  001E36  0100               	movlb	0	; () banked
  7967  001E38  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7968  001E3A  0A00               	xorlw	0	; case 0
  7969  001E3C  A4D8               	btfss	status,2,c
  7970  001E3E  D026               	goto	l5796
  7971                           
  7972                           ; BSR set to: 0
  7973                           ; Switch size 1, requested type "space"
  7974                           ; Number of cases is 12, Range of values is 1 to 12
  7975                           ; switch strategies available:
  7976                           ; Name         Instructions Cycles
  7977                           ; simple_byte           37    19 (average)
  7978                           ;	Chosen strategy is simple_byte
  7979  001E40  0100               	movlb	0	; () banked
  7980  001E42  51AB               	movf	??_printRTC& (0+255),w,b
  7981  001E44  0A01               	xorlw	1	; case 1
  7982  001E46  B4D8               	btfsc	status,2,c
  7983  001E48  D73E               	goto	l5768
  7984  001E4A  0A03               	xorlw	3	; case 2
  7985  001E4C  B4D8               	btfsc	status,2,c
  7986  001E4E  D74A               	goto	l5770
  7987  001E50  0A01               	xorlw	1	; case 3
  7988  001E52  B4D8               	btfsc	status,2,c
  7989  001E54  D756               	goto	l5772
  7990  001E56  0A07               	xorlw	7	; case 4
  7991  001E58  B4D8               	btfsc	status,2,c
  7992  001E5A  D762               	goto	l5774
  7993  001E5C  0A01               	xorlw	1	; case 5
  7994  001E5E  B4D8               	btfsc	status,2,c
  7995  001E60  D76E               	goto	l5776
  7996  001E62  0A03               	xorlw	3	; case 6
  7997  001E64  B4D8               	btfsc	status,2,c
  7998  001E66  D77A               	goto	l5778
  7999  001E68  0A01               	xorlw	1	; case 7
  8000  001E6A  B4D8               	btfsc	status,2,c
  8001  001E6C  D786               	goto	l5780
  8002  001E6E  0A0F               	xorlw	15	; case 8
  8003  001E70  B4D8               	btfsc	status,2,c
  8004  001E72  D792               	goto	l5782
  8005  001E74  0A01               	xorlw	1	; case 9
  8006  001E76  B4D8               	btfsc	status,2,c
  8007  001E78  D79E               	goto	l5784
  8008  001E7A  0A03               	xorlw	3	; case 10
  8009  001E7C  B4D8               	btfsc	status,2,c
  8010  001E7E  D7AA               	goto	l5786
  8011  001E80  0A01               	xorlw	1	; case 11
  8012  001E82  B4D8               	btfsc	status,2,c
  8013  001E84  D7B6               	goto	l5788
  8014  001E86  0A07               	xorlw	7	; case 12
  8015  001E88  B4D8               	btfsc	status,2,c
  8016  001E8A  D7C2               	goto	l5790
  8017  001E8C                     l5796:
  8018                           
  8019                           ;RTC.c: 109: lcdInst(0b10000000);;
  8020  001E8C  0E80               	movlw	128
  8021  001E8E  EC34  F023         	call	_lcdInst
  8022                           
  8023                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8024  001E92  0E42               	movlw	low STR_21
  8025  001E94  0100               	movlb	0	; () banked
  8026  001E96  6F8E               	movwf	printf@f& (0+255),b
  8027  001E98  0EFB               	movlw	high STR_21
  8028  001E9A  0100               	movlb	0	; () banked
  8029  001E9C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8030  001E9E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8031  001EA2  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8032  001EA6  0EBE               	movlw	low printRTC@month
  8033  001EA8  0100               	movlb	0	; () banked
  8034  001EAA  6F92               	movwf	(?_printf+4)& (0+255),b
  8035  001EAC  0E00               	movlw	high printRTC@month
  8036  001EAE  0100               	movlb	0	; () banked
  8037  001EB0  6F93               	movwf	(?_printf+5)& (0+255),b
  8038  001EB2  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8039  001EB6  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8040  001EBA  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8041  001EBE  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8042  001EC2  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8043  001EC6  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8044  001ECA  ECB8  F008         	call	_printf	;wreg free
  8045  001ECE  0012               	return		;funcret
  8046  001ED0                     __end_of_printRTC:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           intcon2	equ	0xFF1
  8056                           intcon3	equ	0xFF0
  8057                           postinc0	equ	0xFEE
  8058                           wreg	equ	0xFE8
  8059                           postdec1	equ	0xFE5
  8060                           fsr1l	equ	0xFE1
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           postdec2	equ	0xFDD
  8064                           fsr2h	equ	0xFDA
  8065                           fsr2l	equ	0xFD9
  8066                           status	equ	0xFD8
  8067                           
  8068 ;; *************** function _strcpy *****************
  8069 ;; Defined at:
  8070 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8073 ;;		 -> printRTC@month(4), UI@month(4), 
  8074 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8075 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8076 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8077 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8078 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8079 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8080 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8081 ;;		 -> STR_8(4), 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8084 ;;		 -> printRTC@month(4), UI@month(4), 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  2    0[BANK0 ] PTR unsigned char 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8094 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;Total ram usage:        6 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    7
  8101 ;; This function calls:
  8102 ;;		Nothing
  8103 ;; This function is called by:
  8104 ;;		_UI
  8105 ;;		_printRTC
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text24
  8110  00417C                     __ptext24:
  8111                           	opt stack 0
  8112  00417C                     _strcpy:
  8113                           	opt stack 20
  8114                           
  8115                           ;incstack = 0
  8116  00417C  C080  F084         	movff	strcpy@to,strcpy@cp
  8117  004180  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8118  004184  D006               	goto	l5500
  8119  004186                     l5498:
  8120  004186  0100               	movlb	0	; () banked
  8121  004188  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8122  00418A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8123  00418C  0100               	movlb	0	; () banked
  8124  00418E  4B82               	infsnz	strcpy@from& (0+255),f,b
  8125  004190  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8126  004192                     l5500:
  8127  004192  C082  FFF6         	movff	strcpy@from,tblptrl
  8128  004196  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8129  00419A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8130  00419A  6AF8               	clrf	tblptru,c
  8131  00419C                     	endif
  8132  00419C                     	if	0	;tblptru may be non-zero
  8133  00419C                     	endif
  8134  00419C  C084  FFD9         	movff	strcpy@cp,fsr2l
  8135  0041A0  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8136  0041A4  0008               	tblrd		*
  8137  0041A6  CFF5 FFDF          	movff	tablat,indf2
  8138  0041AA  50DF               	movf	indf2,w,c
  8139  0041AC  B4D8               	btfsc	status,2,c
  8140  0041AE  0012               	return	
  8141  0041B0  D7EA               	goto	l5498
  8142  0041B2                     __end_of_strcpy:
  8143                           	opt stack 0
  8144                           tblptru	equ	0xFF8
  8145                           tblptrh	equ	0xFF7
  8146                           tblptrl	equ	0xFF6
  8147                           tablat	equ	0xFF5
  8148                           prodh	equ	0xFF4
  8149                           prodl	equ	0xFF3
  8150                           intcon	equ	0xFF2
  8151                           intcon2	equ	0xFF1
  8152                           intcon3	equ	0xFF0
  8153                           postinc0	equ	0xFEE
  8154                           wreg	equ	0xFE8
  8155                           postdec1	equ	0xFE5
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           postdec2	equ	0xFDD
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function _getRTC *****************
  8165 ;; Defined at:
  8166 ;;		line 44 in file "RTC.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;  i               2    3[BANK0 ] int 
  8171 ;; Return value:  Size  Location     Type
  8172 ;;                  1    wreg      void 
  8173 ;; Registers used:
  8174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;Total ram usage:        2 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    9
  8187 ;; This function calls:
  8188 ;;		_I2C_Master_Read
  8189 ;;		_I2C_Master_Start
  8190 ;;		_I2C_Master_Stop
  8191 ;;		_I2C_Master_Write
  8192 ;; This function is called by:
  8193 ;;		_printRTC
  8194 ;;		_initSortTimer
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text25
  8199  0039F4                     __ptext25:
  8200                           	opt stack 0
  8201  0039F4                     _getRTC:
  8202                           	opt stack 18
  8203                           
  8204                           ;RTC.c: 48: I2C_Master_Start();
  8205                           
  8206                           ;incstack = 0
  8207  0039F4  EC5A  F023         	call	_I2C_Master_Start	;wreg free
  8208                           
  8209                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8210  0039F8  0E00               	movlw	0
  8211  0039FA  0100               	movlb	0	; () banked
  8212  0039FC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8213  0039FE  0ED0               	movlw	208
  8214  003A00  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8215  003A02  EC48  F023         	call	_I2C_Master_Write	;wreg free
  8216                           
  8217                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8218  003A06  0E00               	movlw	0
  8219  003A08  0100               	movlb	0	; () banked
  8220  003A0A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8221  003A0C  0E00               	movlw	0
  8222  003A0E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8223  003A10  EC48  F023         	call	_I2C_Master_Write	;wreg free
  8224                           
  8225                           ;RTC.c: 51: I2C_Master_Stop();
  8226  003A14  EC56  F023         	call	_I2C_Master_Stop	;wreg free
  8227                           
  8228                           ;RTC.c: 54: I2C_Master_Start();
  8229  003A18  EC5A  F023         	call	_I2C_Master_Start	;wreg free
  8230                           
  8231                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8232  003A1C  0E00               	movlw	0
  8233  003A1E  0100               	movlb	0	; () banked
  8234  003A20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8235  003A22  0ED1               	movlw	209
  8236  003A24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8237  003A26  EC48  F023         	call	_I2C_Master_Write	;wreg free
  8238                           
  8239                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8240  003A2A  0E00               	movlw	0
  8241  003A2C  0100               	movlb	0	; () banked
  8242  003A2E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8243  003A30  0E00               	movlw	0
  8244  003A32  6F83               	movwf	getRTC@i& (0+255),b
  8245  003A34                     l5506:
  8246                           
  8247                           ; BSR set to: 0
  8248  003A34  0100               	movlb	0	; () banked
  8249  003A36  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8250  003A38  D008               	goto	l5510
  8251  003A3A  0100               	movlb	0	; () banked
  8252  003A3C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8253  003A3E  E115               	bnz	l5516
  8254  003A40  0E06               	movlw	6
  8255  003A42  0100               	movlb	0	; () banked
  8256  003A44  5D83               	subwf	getRTC@i& (0+255),w,b
  8257  003A46  B0D8               	btfsc	status,0,c
  8258  003A48  D010               	goto	l5516
  8259  003A4A                     l5510:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8263  003A4A  0E24               	movlw	low _time
  8264  003A4C  0100               	movlb	0	; () banked
  8265  003A4E  2583               	addwf	getRTC@i& (0+255),w,b
  8266  003A50  6ED9               	movwf	fsr2l,c
  8267  003A52  0E01               	movlw	high _time
  8268  003A54  0100               	movlb	0	; () banked
  8269  003A56  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8270  003A58  6EDA               	movwf	fsr2h,c
  8271  003A5A  0E01               	movlw	1
  8272  003A5C  ECE5  F021         	call	_I2C_Master_Read
  8273  003A60  6EDF               	movwf	indf2,c
  8274  003A62  0100               	movlb	0	; () banked
  8275  003A64  4B83               	infsnz	getRTC@i& (0+255),f,b
  8276  003A66  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8277  003A68  D7E5               	goto	l5506
  8278  003A6A                     l5516:
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;RTC.c: 58: }
  8282                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8283  003A6A  0E00               	movlw	0
  8284  003A6C  ECE5  F021         	call	_I2C_Master_Read
  8285  003A70  0101               	movlb	1	; () banked
  8286  003A72  6F2A               	movwf	(_time+6)& (0+255),b
  8287                           
  8288                           ;RTC.c: 60: I2C_Master_Stop();
  8289  003A74  EC56  F023         	call	_I2C_Master_Stop	;wreg free
  8290  003A78  0012               	return		;funcret
  8291  003A7A                     __end_of_getRTC:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           intcon3	equ	0xFF0
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _I2C_Master_Write *****************
  8314 ;; Defined at:
  8315 ;;		line 49 in file "I2C.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  d               2    1[BANK0 ] unsigned int 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;		None
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, status,2, status,0, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;Total ram usage:        2 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    8
  8336 ;; This function calls:
  8337 ;;		_I2C_Master_Wait
  8338 ;; This function is called by:
  8339 ;;		_loadRTC
  8340 ;;		_getRTC
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text26
  8345  004690                     __ptext26:
  8346                           	opt stack 0
  8347  004690                     _I2C_Master_Write:
  8348                           	opt stack 18
  8349                           
  8350                           ;I2C.c: 51: I2C_Master_Wait();
  8351                           
  8352                           ;incstack = 0
  8353  004690  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8354                           
  8355                           ;I2C.c: 52: SSPBUF = d;
  8356  004694  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8357  004698  0012               	return		;funcret
  8358  00469A                     __end_of_I2C_Master_Write:
  8359                           	opt stack 0
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           intcon	equ	0xFF2
  8367                           intcon2	equ	0xFF1
  8368                           intcon3	equ	0xFF0
  8369                           postinc0	equ	0xFEE
  8370                           wreg	equ	0xFE8
  8371                           postdec1	equ	0xFE5
  8372                           fsr1l	equ	0xFE1
  8373                           indf2	equ	0xFDF
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _I2C_Master_Stop *****************
  8381 ;; Defined at:
  8382 ;;		line 43 in file "I2C.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;		None
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      void 
  8389 ;; Registers used:
  8390 ;;		wreg, status,2, status,0, cstack
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;Total ram usage:        0 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    8
  8403 ;; This function calls:
  8404 ;;		_I2C_Master_Wait
  8405 ;; This function is called by:
  8406 ;;		_loadRTC
  8407 ;;		_getRTC
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text27
  8412  0046AC                     __ptext27:
  8413                           	opt stack 0
  8414  0046AC                     _I2C_Master_Stop:
  8415                           	opt stack 18
  8416                           
  8417                           ;I2C.c: 45: I2C_Master_Wait();
  8418                           
  8419                           ;incstack = 0
  8420  0046AC  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8421                           
  8422                           ;I2C.c: 46: PEN = 1;
  8423  0046B0  84C5               	bsf	4037,2,c	;volatile
  8424  0046B2  0012               	return		;funcret
  8425  0046B4                     __end_of_I2C_Master_Stop:
  8426                           	opt stack 0
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           intcon2	equ	0xFF1
  8435                           intcon3	equ	0xFF0
  8436                           postinc0	equ	0xFEE
  8437                           wreg	equ	0xFE8
  8438                           postdec1	equ	0xFE5
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           postdec2	equ	0xFDD
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _I2C_Master_Start *****************
  8448 ;; Defined at:
  8449 ;;		line 31 in file "I2C.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        0 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    8
  8470 ;; This function calls:
  8471 ;;		_I2C_Master_Wait
  8472 ;; This function is called by:
  8473 ;;		_loadRTC
  8474 ;;		_getRTC
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text28
  8479  0046B4                     __ptext28:
  8480                           	opt stack 0
  8481  0046B4                     _I2C_Master_Start:
  8482                           	opt stack 18
  8483                           
  8484                           ;I2C.c: 33: I2C_Master_Wait();
  8485                           
  8486                           ;incstack = 0
  8487  0046B4  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8488                           
  8489                           ;I2C.c: 34: SEN = 1;
  8490  0046B8  80C5               	bsf	4037,0,c	;volatile
  8491  0046BA  0012               	return		;funcret
  8492  0046BC                     __end_of_I2C_Master_Start:
  8493                           	opt stack 0
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           intcon2	equ	0xFF1
  8502                           intcon3	equ	0xFF0
  8503                           postinc0	equ	0xFEE
  8504                           wreg	equ	0xFE8
  8505                           postdec1	equ	0xFE5
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _I2C_Master_Read *****************
  8515 ;; Defined at:
  8516 ;;		line 55 in file "I2C.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  a               1    wreg     unsigned char 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  a               1    1[BANK0 ] unsigned char 
  8521 ;;  temp            1    2[BANK0 ] unsigned char 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      unsigned char 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;Total ram usage:        2 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    8
  8538 ;; This function calls:
  8539 ;;		_I2C_Master_Wait
  8540 ;; This function is called by:
  8541 ;;		_getRTC
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text29
  8546  0043CA                     __ptext29:
  8547                           	opt stack 0
  8548  0043CA                     _I2C_Master_Read:
  8549                           	opt stack 18
  8550                           
  8551                           ;incstack = 0
  8552                           ;I2C_Master_Read@a stored from wreg
  8553  0043CA  0100               	movlb	0	; () banked
  8554  0043CC  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8555                           
  8556                           ;I2C.c: 57: unsigned char temp;
  8557                           ;I2C.c: 58: I2C_Master_Wait();
  8558  0043CE  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8559                           
  8560                           ;I2C.c: 59: RCEN = 1;
  8561  0043D2  86C5               	bsf	4037,3,c	;volatile
  8562                           
  8563                           ;I2C.c: 60: I2C_Master_Wait();
  8564  0043D4  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8565                           
  8566                           ;I2C.c: 61: temp = SSPBUF;
  8567  0043D8  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8568                           
  8569                           ;I2C.c: 62: I2C_Master_Wait();
  8570  0043DC  EC19  F023         	call	_I2C_Master_Wait	;wreg free
  8571                           
  8572                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8573  0043E0  0100               	movlb	0	; () banked
  8574  0043E2  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8575  0043E4  0100               	movlb	0	; () banked
  8576  0043E6  A4D8               	btfss	status,2,c
  8577  0043E8  D002               	goto	u3540
  8578  0043EA  8AC5               	bsf	4037,5,c	;volatile
  8579  0043EC  D001               	goto	l5200
  8580  0043EE                     u3540:
  8581  0043EE  9AC5               	bcf	4037,5,c	;volatile
  8582  0043F0                     l5200:
  8583                           
  8584                           ;I2C.c: 64: ACKEN = 1;
  8585  0043F0  88C5               	bsf	4037,4,c	;volatile
  8586                           
  8587                           ;I2C.c: 65: return temp;
  8588  0043F2  0100               	movlb	0	; () banked
  8589  0043F4  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8590  0043F6  0012               	return	
  8591  0043F8                     __end_of_I2C_Master_Read:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           prodh	equ	0xFF4
  8598                           prodl	equ	0xFF3
  8599                           intcon	equ	0xFF2
  8600                           intcon2	equ	0xFF1
  8601                           intcon3	equ	0xFF0
  8602                           postinc0	equ	0xFEE
  8603                           wreg	equ	0xFE8
  8604                           postdec1	equ	0xFE5
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function _I2C_Master_Wait *****************
  8614 ;; Defined at:
  8615 ;;		line 26 in file "I2C.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;		None
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;		None
  8620 ;; Return value:  Size  Location     Type
  8621 ;;                  1    wreg      void 
  8622 ;; Registers used:
  8623 ;;		wreg, status,2, status,0
  8624 ;; Tracked objects:
  8625 ;;		On entry : 0/0
  8626 ;;		On exit  : 0/0
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8633 ;;Total ram usage:        1 bytes
  8634 ;; Hardware stack levels used:    1
  8635 ;; Hardware stack levels required when called:    7
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		_I2C_Master_Start
  8640 ;;		_I2C_Master_Stop
  8641 ;;		_I2C_Master_Write
  8642 ;;		_I2C_Master_Read
  8643 ;;		_I2C_Master_RepeatedStart
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text30
  8648  004632                     __ptext30:
  8649                           	opt stack 0
  8650  004632                     _I2C_Master_Wait:
  8651                           	opt stack 18
  8652  004632                     l66:
  8653  004632  B4C7               	btfsc	4039,2,c	;volatile
  8654  004634  D7FE               	goto	l66
  8655  004636  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8656  00463A  0E1F               	movlw	31
  8657  00463C  0100               	movlb	0	; () banked
  8658  00463E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8659  004640  B4D8               	btfsc	status,2,c
  8660  004642  0012               	return	
  8661  004644  D7F6               	goto	l66
  8662  004646                     __end_of_I2C_Master_Wait:
  8663                           	opt stack 0
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           intcon2	equ	0xFF1
  8672                           intcon3	equ	0xFF0
  8673                           postinc0	equ	0xFEE
  8674                           wreg	equ	0xFE8
  8675                           postdec1	equ	0xFE5
  8676                           fsr1l	equ	0xFE1
  8677                           indf2	equ	0xFDF
  8678                           postinc2	equ	0xFDE
  8679                           postdec2	equ	0xFDD
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function _change_state_to_menu_22 *****************
  8685 ;; Defined at:
  8686 ;;		line 496 in file "UI.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:   10
  8707 ;; This function calls:
  8708 ;;		_lcdInst
  8709 ;;		_printf
  8710 ;; This function is called by:
  8711 ;;		_UI
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text31
  8716  00410C                     __ptext31:
  8717                           	opt stack 0
  8718  00410C                     _change_state_to_menu_22:
  8719                           	opt stack 19
  8720                           
  8721                           ;UI.c: 497: cur_state = 22;
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;incstack = 0
  8725  00410C  0E00               	movlw	0
  8726  00410E  0100               	movlb	0	; () banked
  8727  004110  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8728  004112  0E16               	movlw	22
  8729  004114  6FDE               	movwf	_cur_state& (0+255),b
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;UI.c: 499: lcdInst(0b10000000);;
  8733  004116  0E80               	movlw	128
  8734  004118  EC34  F023         	call	_lcdInst
  8735                           
  8736                           ;UI.c: 500: printf("2. SORT        <");
  8737  00411C  0EEC               	movlw	low STR_34
  8738  00411E  0100               	movlb	0	; () banked
  8739  004120  6F8E               	movwf	printf@f& (0+255),b
  8740  004122  0EFD               	movlw	high STR_34
  8741  004124  0100               	movlb	0	; () banked
  8742  004126  6F8F               	movwf	(printf@f+1)& (0+255),b
  8743  004128  ECB8  F008         	call	_printf	;wreg free
  8744                           
  8745                           ;UI.c: 501: lcdInst(0b11000000);;
  8746  00412C  0EC0               	movlw	192
  8747  00412E  EC34  F023         	call	_lcdInst
  8748                           
  8749                           ;UI.c: 502: printf("3. LOGS         ");
  8750  004132  0E31               	movlw	low STR_36
  8751  004134  0100               	movlb	0	; () banked
  8752  004136  6F8E               	movwf	printf@f& (0+255),b
  8753  004138  0EFD               	movlw	high STR_36
  8754  00413A  0100               	movlb	0	; () banked
  8755  00413C  6F8F               	movwf	(printf@f+1)& (0+255),b
  8756  00413E  ECB8  F008         	call	_printf	;wreg free
  8757  004142  0012               	return		;funcret
  8758  004144                     __end_of_change_state_to_menu_22:
  8759                           	opt stack 0
  8760                           tblptru	equ	0xFF8
  8761                           tblptrh	equ	0xFF7
  8762                           tblptrl	equ	0xFF6
  8763                           tablat	equ	0xFF5
  8764                           prodh	equ	0xFF4
  8765                           prodl	equ	0xFF3
  8766                           intcon	equ	0xFF2
  8767                           intcon2	equ	0xFF1
  8768                           intcon3	equ	0xFF0
  8769                           postinc0	equ	0xFEE
  8770                           wreg	equ	0xFE8
  8771                           postdec1	equ	0xFE5
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _change_state_to_menu_12 *****************
  8781 ;; Defined at:
  8782 ;;		line 488 in file "UI.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  1    wreg      void 
  8789 ;; Registers used:
  8790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;Total ram usage:        0 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:   10
  8803 ;; This function calls:
  8804 ;;		_lcdInst
  8805 ;;		_printf
  8806 ;; This function is called by:
  8807 ;;		_UI
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text32
  8812  004144                     __ptext32:
  8813                           	opt stack 0
  8814  004144                     _change_state_to_menu_12:
  8815                           	opt stack 19
  8816                           
  8817                           ;UI.c: 489: cur_state = 12;
  8818                           
  8819                           ;incstack = 0
  8820  004144  0E00               	movlw	0
  8821  004146  0100               	movlb	0	; () banked
  8822  004148  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8823  00414A  0E0C               	movlw	12
  8824  00414C  6FDE               	movwf	_cur_state& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;UI.c: 491: lcdInst(0b10000000);;
  8828  00414E  0E80               	movlw	128
  8829  004150  EC34  F023         	call	_lcdInst
  8830                           
  8831                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8832  004154  0E53               	movlw	low STR_33
  8833  004156  0100               	movlb	0	; () banked
  8834  004158  6F8E               	movwf	printf@f& (0+255),b
  8835  00415A  0EFD               	movlw	high STR_33
  8836  00415C  0100               	movlb	0	; () banked
  8837  00415E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8838  004160  ECB8  F008         	call	_printf	;wreg free
  8839                           
  8840                           ;UI.c: 493: lcdInst(0b11000000);;
  8841  004164  0EC0               	movlw	192
  8842  004166  EC34  F023         	call	_lcdInst
  8843                           
  8844                           ;UI.c: 494: printf("2. SORT        <");
  8845  00416A  0EEC               	movlw	low STR_34
  8846  00416C  0100               	movlb	0	; () banked
  8847  00416E  6F8E               	movwf	printf@f& (0+255),b
  8848  004170  0EFD               	movlw	high STR_34
  8849  004172  0100               	movlb	0	; () banked
  8850  004174  6F8F               	movwf	(printf@f+1)& (0+255),b
  8851  004176  ECB8  F008         	call	_printf	;wreg free
  8852  00417A  0012               	return		;funcret
  8853  00417C                     __end_of_change_state_to_menu_12:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           intcon	equ	0xFF2
  8862                           intcon2	equ	0xFF1
  8863                           intcon3	equ	0xFF0
  8864                           postinc0	equ	0xFEE
  8865                           wreg	equ	0xFE8
  8866                           postdec1	equ	0xFE5
  8867                           fsr1l	equ	0xFE1
  8868                           indf2	equ	0xFDF
  8869                           postinc2	equ	0xFDE
  8870                           postdec2	equ	0xFDD
  8871                           fsr2h	equ	0xFDA
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function ___awmod *****************
  8876 ;; Defined at:
  8877 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;  dividend        2    0[BANK0 ] int 
  8880 ;;  divisor         2    2[BANK0 ] int 
  8881 ;; Auto vars:     Size  Location     Type
  8882 ;;  sign            1    5[BANK0 ] unsigned char 
  8883 ;;  counter         1    4[BANK0 ] unsigned char 
  8884 ;; Return value:  Size  Location     Type
  8885 ;;                  2    0[BANK0 ] int 
  8886 ;; Registers used:
  8887 ;;		wreg, status,2, status,0
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8893 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;Total ram usage:        6 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    7
  8900 ;; This function calls:
  8901 ;;		Nothing
  8902 ;; This function is called by:
  8903 ;;		_UI
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text33
  8908  003712                     __ptext33:
  8909                           	opt stack 0
  8910  003712                     ___awmod:
  8911                           	opt stack 22
  8912                           
  8913                           ;incstack = 0
  8914  003712  0E00               	movlw	0
  8915  003714  0100               	movlb	0	; () banked
  8916  003716  6F85               	movwf	___awmod@sign& (0+255),b
  8917                           
  8918                           ; BSR set to: 0
  8919  003718  0100               	movlb	0	; () banked
  8920  00371A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8921  00371C  D008               	goto	l7226
  8922                           
  8923                           ; BSR set to: 0
  8924  00371E  0100               	movlb	0	; () banked
  8925  003720  6D80               	negf	___awmod@dividend& (0+255),b
  8926  003722  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8927  003724  B0D8               	btfsc	status,0,c
  8928  003726  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8929                           
  8930                           ; BSR set to: 0
  8931  003728  0E01               	movlw	1
  8932  00372A  0100               	movlb	0	; () banked
  8933  00372C  6F85               	movwf	___awmod@sign& (0+255),b
  8934  00372E                     l7226:
  8935                           
  8936                           ; BSR set to: 0
  8937  00372E  0100               	movlb	0	; () banked
  8938  003730  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8939  003732  D005               	goto	l7230
  8940                           
  8941                           ; BSR set to: 0
  8942  003734  0100               	movlb	0	; () banked
  8943  003736  6D82               	negf	___awmod@divisor& (0+255),b
  8944  003738  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8945  00373A  B0D8               	btfsc	status,0,c
  8946  00373C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8947  00373E                     l7230:
  8948                           
  8949                           ; BSR set to: 0
  8950  00373E  0100               	movlb	0	; () banked
  8951  003740  5182               	movf	___awmod@divisor& (0+255),w,b
  8952  003742  0100               	movlb	0	; () banked
  8953  003744  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8954  003746  B4D8               	btfsc	status,2,c
  8955  003748  D026               	goto	l7246
  8956                           
  8957                           ; BSR set to: 0
  8958  00374A  0E01               	movlw	1
  8959  00374C  0100               	movlb	0	; () banked
  8960  00374E  6F84               	movwf	___awmod@counter& (0+255),b
  8961  003750  D006               	goto	l7236
  8962  003752                     l7234:
  8963                           
  8964                           ; BSR set to: 0
  8965  003752  0100               	movlb	0	; () banked
  8966  003754  90D8               	bcf	status,0,c
  8967  003756  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8968  003758  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8969  00375A  0100               	movlb	0	; () banked
  8970  00375C  2B84               	incf	___awmod@counter& (0+255),f,b
  8971  00375E                     l7236:
  8972                           
  8973                           ; BSR set to: 0
  8974  00375E  0100               	movlb	0	; () banked
  8975  003760  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8976  003762  D7F7               	goto	l7234
  8977  003764                     l7238:
  8978                           
  8979                           ; BSR set to: 0
  8980  003764  0100               	movlb	0	; () banked
  8981  003766  5182               	movf	___awmod@divisor& (0+255),w,b
  8982  003768  0100               	movlb	0	; () banked
  8983  00376A  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8984  00376C  0100               	movlb	0	; () banked
  8985  00376E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8986  003770  0100               	movlb	0	; () banked
  8987  003772  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8988  003774  A0D8               	btfss	status,0,c
  8989  003776  D008               	goto	l7242
  8990                           
  8991                           ; BSR set to: 0
  8992  003778  0100               	movlb	0	; () banked
  8993  00377A  5182               	movf	___awmod@divisor& (0+255),w,b
  8994  00377C  0100               	movlb	0	; () banked
  8995  00377E  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8996  003780  0100               	movlb	0	; () banked
  8997  003782  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8998  003784  0100               	movlb	0	; () banked
  8999  003786  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9000  003788                     l7242:
  9001                           
  9002                           ; BSR set to: 0
  9003  003788  0100               	movlb	0	; () banked
  9004  00378A  90D8               	bcf	status,0,c
  9005  00378C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9006  00378E  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9007                           
  9008                           ; BSR set to: 0
  9009  003790  0100               	movlb	0	; () banked
  9010  003792  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9011  003794  D7E7               	goto	l7238
  9012  003796                     l7246:
  9013                           
  9014                           ; BSR set to: 0
  9015  003796  0100               	movlb	0	; () banked
  9016  003798  5185               	movf	___awmod@sign& (0+255),w,b
  9017  00379A  0100               	movlb	0	; () banked
  9018  00379C  B4D8               	btfsc	status,2,c
  9019  00379E  D005               	goto	l7250
  9020                           
  9021                           ; BSR set to: 0
  9022  0037A0  0100               	movlb	0	; () banked
  9023  0037A2  6D80               	negf	___awmod@dividend& (0+255),b
  9024  0037A4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9025  0037A6  B0D8               	btfsc	status,0,c
  9026  0037A8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9027  0037AA                     l7250:
  9028                           
  9029                           ; BSR set to: 0
  9030  0037AA  C080  F080         	movff	___awmod@dividend,?___awmod
  9031  0037AE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9032  0037B2  0012               	return	
  9033  0037B4                     __end_of___awmod:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           intcon	equ	0xFF2
  9042                           intcon2	equ	0xFF1
  9043                           intcon3	equ	0xFF0
  9044                           postinc0	equ	0xFEE
  9045                           wreg	equ	0xFE8
  9046                           postdec1	equ	0xFE5
  9047                           fsr1l	equ	0xFE1
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           fsr2h	equ	0xFDA
  9052                           fsr2l	equ	0xFD9
  9053                           status	equ	0xFD8
  9054                           
  9055 ;; *************** function ___awdiv *****************
  9056 ;; Defined at:
  9057 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;  dividend        2    6[BANK0 ] int 
  9060 ;;  divisor         2    8[BANK0 ] int 
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  quotient        2   12[BANK0 ] int 
  9063 ;;  sign            1   11[BANK0 ] unsigned char 
  9064 ;;  counter         1   10[BANK0 ] unsigned char 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  2    6[BANK0 ] int 
  9067 ;; Registers used:
  9068 ;;		wreg, status,2, status,0
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9074 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;Total ram usage:        8 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    7
  9081 ;; This function calls:
  9082 ;;		Nothing
  9083 ;; This function is called by:
  9084 ;;		_UI
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           	psect	text34
  9089  0034EE                     __ptext34:
  9090                           	opt stack 0
  9091  0034EE                     ___awdiv:
  9092                           	opt stack 22
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;incstack = 0
  9096  0034EE  0E00               	movlw	0
  9097  0034F0  0100               	movlb	0	; () banked
  9098  0034F2  6F8B               	movwf	___awdiv@sign& (0+255),b
  9099                           
  9100                           ; BSR set to: 0
  9101  0034F4  0100               	movlb	0	; () banked
  9102  0034F6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9103  0034F8  D008               	goto	l7182
  9104                           
  9105                           ; BSR set to: 0
  9106  0034FA  0100               	movlb	0	; () banked
  9107  0034FC  6D88               	negf	___awdiv@divisor& (0+255),b
  9108  0034FE  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9109  003500  B0D8               	btfsc	status,0,c
  9110  003502  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9111                           
  9112                           ; BSR set to: 0
  9113  003504  0E01               	movlw	1
  9114  003506  0100               	movlb	0	; () banked
  9115  003508  6F8B               	movwf	___awdiv@sign& (0+255),b
  9116  00350A                     l7182:
  9117                           
  9118                           ; BSR set to: 0
  9119  00350A  0100               	movlb	0	; () banked
  9120  00350C  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9121  00350E  D008               	goto	l7188
  9122                           
  9123                           ; BSR set to: 0
  9124  003510  0100               	movlb	0	; () banked
  9125  003512  6D86               	negf	___awdiv@dividend& (0+255),b
  9126  003514  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9127  003516  B0D8               	btfsc	status,0,c
  9128  003518  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9129                           
  9130                           ; BSR set to: 0
  9131  00351A  0E01               	movlw	1
  9132  00351C  0100               	movlb	0	; () banked
  9133  00351E  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9134  003520                     l7188:
  9135                           
  9136                           ; BSR set to: 0
  9137  003520  0E00               	movlw	0
  9138  003522  0100               	movlb	0	; () banked
  9139  003524  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9140  003526  0E00               	movlw	0
  9141  003528  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9142                           
  9143                           ; BSR set to: 0
  9144  00352A  0100               	movlb	0	; () banked
  9145  00352C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9146  00352E  0100               	movlb	0	; () banked
  9147  003530  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9148  003532  B4D8               	btfsc	status,2,c
  9149  003534  D02C               	goto	l7210
  9150                           
  9151                           ; BSR set to: 0
  9152  003536  0E01               	movlw	1
  9153  003538  0100               	movlb	0	; () banked
  9154  00353A  6F8A               	movwf	___awdiv@counter& (0+255),b
  9155  00353C  D006               	goto	l7196
  9156  00353E                     l7194:
  9157                           
  9158                           ; BSR set to: 0
  9159  00353E  0100               	movlb	0	; () banked
  9160  003540  90D8               	bcf	status,0,c
  9161  003542  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9162  003544  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9163  003546  0100               	movlb	0	; () banked
  9164  003548  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9165  00354A                     l7196:
  9166                           
  9167                           ; BSR set to: 0
  9168  00354A  0100               	movlb	0	; () banked
  9169  00354C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9170  00354E  D7F7               	goto	l7194
  9171  003550                     l7198:
  9172                           
  9173                           ; BSR set to: 0
  9174  003550  0100               	movlb	0	; () banked
  9175  003552  90D8               	bcf	status,0,c
  9176  003554  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9177  003556  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9178                           
  9179                           ; BSR set to: 0
  9180  003558  0100               	movlb	0	; () banked
  9181  00355A  5188               	movf	___awdiv@divisor& (0+255),w,b
  9182  00355C  0100               	movlb	0	; () banked
  9183  00355E  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9184  003560  0100               	movlb	0	; () banked
  9185  003562  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9186  003564  0100               	movlb	0	; () banked
  9187  003566  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9188  003568  A0D8               	btfss	status,0,c
  9189  00356A  D00A               	goto	l7206
  9190                           
  9191                           ; BSR set to: 0
  9192  00356C  0100               	movlb	0	; () banked
  9193  00356E  5188               	movf	___awdiv@divisor& (0+255),w,b
  9194  003570  0100               	movlb	0	; () banked
  9195  003572  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9196  003574  0100               	movlb	0	; () banked
  9197  003576  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9198  003578  0100               	movlb	0	; () banked
  9199  00357A  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9200                           
  9201                           ; BSR set to: 0
  9202  00357C  0100               	movlb	0	; () banked
  9203  00357E  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9204  003580                     l7206:
  9205                           
  9206                           ; BSR set to: 0
  9207  003580  0100               	movlb	0	; () banked
  9208  003582  90D8               	bcf	status,0,c
  9209  003584  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9210  003586  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9211                           
  9212                           ; BSR set to: 0
  9213  003588  0100               	movlb	0	; () banked
  9214  00358A  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9215  00358C  D7E1               	goto	l7198
  9216  00358E                     l7210:
  9217                           
  9218                           ; BSR set to: 0
  9219  00358E  0100               	movlb	0	; () banked
  9220  003590  518B               	movf	___awdiv@sign& (0+255),w,b
  9221  003592  0100               	movlb	0	; () banked
  9222  003594  B4D8               	btfsc	status,2,c
  9223  003596  D005               	goto	l7214
  9224                           
  9225                           ; BSR set to: 0
  9226  003598  0100               	movlb	0	; () banked
  9227  00359A  6D8C               	negf	___awdiv@quotient& (0+255),b
  9228  00359C  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9229  00359E  B0D8               	btfsc	status,0,c
  9230  0035A0  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9231  0035A2                     l7214:
  9232                           
  9233                           ; BSR set to: 0
  9234  0035A2  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9235  0035A6  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9236  0035AA  0012               	return	
  9237  0035AC                     __end_of___awdiv:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           intcon3	equ	0xFF0
  9248                           postinc0	equ	0xFEE
  9249                           wreg	equ	0xFE8
  9250                           postdec1	equ	0xFE5
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _Test *****************
  9260 ;; Defined at:
  9261 ;;		line 28 in file "Test.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  1    wreg      void 
  9268 ;; Registers used:
  9269 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;Total ram usage:        2 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:   11
  9282 ;; This function calls:
  9283 ;;		_BothServos
  9284 ;;		_EEPROMTest
  9285 ;;		_PortTestA5
  9286 ;;		_PortTests
  9287 ;;		_SolenoidTestA5
  9288 ;;		_ToggleTestA5
  9289 ;;		_actuatorTest
  9290 ;;		_algorithmTest
  9291 ;;		_lcdInst
  9292 ;;		_printf
  9293 ;;		_sensorTest
  9294 ;; This function is called by:
  9295 ;;		_main
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text35
  9300  00312E                     __ptext35:
  9301                           	opt stack 0
  9302  00312E                     _Test:
  9303                           	opt stack 19
  9304  00312E                     
  9305                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9306  00312E  0E01               	movlw	1
  9307  003130  EC34  F023         	call	_lcdInst
  9308  003134  0E68               	movlw	104
  9309  003136  0100               	movlb	0	; () banked
  9310  003138  6FC6               	movwf	??_Test& (0+255),b
  9311  00313A  0EE4               	movlw	228
  9312  00313C                     u7357:
  9313  00313C  2EE8               	decfsz	wreg,f,c
  9314  00313E  D7FE               	bra	u7357
  9315  003140  2FC6               	decfsz	??_Test& (0+255),f,b
  9316  003142  D7FC               	bra	u7357
  9317  003144  F000               	nop	
  9318  003146  0E80               	movlw	128
  9319  003148  EC34  F023         	call	_lcdInst
  9320                           
  9321                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9322  00314C  0E98               	movlw	low STR_68
  9323  00314E  0100               	movlb	0	; () banked
  9324  003150  6F8E               	movwf	printf@f& (0+255),b
  9325  003152  0EFC               	movlw	high STR_68
  9326  003154  0100               	movlb	0	; () banked
  9327  003156  6F8F               	movwf	(printf@f+1)& (0+255),b
  9328  003158  ECB8  F008         	call	_printf	;wreg free
  9329                           
  9330                           ;Test.c: 33: lcdInst(0b11000000);;
  9331  00315C  0EC0               	movlw	192
  9332  00315E  EC34  F023         	call	_lcdInst
  9333                           
  9334                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9335  003162  0ECB               	movlw	low STR_69
  9336  003164  0100               	movlb	0	; () banked
  9337  003166  6F8E               	movwf	printf@f& (0+255),b
  9338  003168  0EFC               	movlw	high STR_69
  9339  00316A  0100               	movlb	0	; () banked
  9340  00316C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9341  00316E  ECB8  F008         	call	_printf	;wreg free
  9342                           
  9343                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9344  003172  0E05               	movlw	5
  9345  003174  0100               	movlb	0	; () banked
  9346  003176  6FC7               	movwf	(??_Test+1)& (0+255),b
  9347  003178  0E0F               	movlw	15
  9348  00317A  0100               	movlb	0	; () banked
  9349  00317C  6FC6               	movwf	??_Test& (0+255),b
  9350  00317E  0EF1               	movlw	241
  9351  003180                     u7367:
  9352  003180  2EE8               	decfsz	wreg,f,c
  9353  003182  D7FE               	bra	u7367
  9354  003184  2FC6               	decfsz	??_Test& (0+255),f,b
  9355  003186  D7FC               	bra	u7367
  9356  003188  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9357  00318A  D7FA               	bra	u7367
  9358  00318C                     l1025:
  9359  00318C  A281               	btfss	3969,1,c	;volatile
  9360  00318E  D7FE               	goto	l1025
  9361                           
  9362                           ;Test.c: 37: var = PORTB >> 4;
  9363  003190  CF81 F0C6          	movff	3969,??_Test	;volatile
  9364  003194  0100               	movlb	0	; () banked
  9365  003196  3BC6               	swapf	??_Test& (0+255),f,b
  9366  003198  0E0F               	movlw	15
  9367  00319A  17C6               	andwf	??_Test& (0+255),f,b
  9368  00319C  0100               	movlb	0	; () banked
  9369  00319E  51C6               	movf	??_Test& (0+255),w,b
  9370  0031A0  0100               	movlb	0	; () banked
  9371  0031A2  6FFA               	movwf	_var& (0+255),b
  9372  0031A4  6BFB               	clrf	(_var+1)& (0+255),b
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;Test.c: 38: var++;
  9376  0031A6  0100               	movlb	0	; () banked
  9377  0031A8  4BFA               	infsnz	_var& (0+255),f,b
  9378  0031AA  2BFB               	incf	(_var+1)& (0+255),f,b
  9379  0031AC                     l1028:
  9380  0031AC  A281               	btfss	3969,1,c	;volatile
  9381  0031AE  D01C               	goto	l7946
  9382  0031B0  D7FD               	goto	l1028
  9383  0031B2                     l7926:
  9384                           
  9385                           ;Test.c: 42: algorithmTest();
  9386  0031B2  EC0C  F01A         	call	_algorithmTest	;wreg free
  9387                           
  9388                           ;Test.c: 43: break;
  9389  0031B6  D7BB               	goto	l7908
  9390  0031B8                     l7928:
  9391                           
  9392                           ;Test.c: 45: sensorTest();
  9393  0031B8  ECCF  F013         	call	_sensorTest	;wreg free
  9394                           
  9395                           ;Test.c: 46: break;
  9396  0031BC  D7B8               	goto	l7908
  9397  0031BE                     l7930:
  9398                           
  9399                           ;Test.c: 48: actuatorTest();
  9400  0031BE  EC09  F000         	call	_actuatorTest	;wreg free
  9401                           
  9402                           ;Test.c: 49: break;
  9403  0031C2  D7B5               	goto	l7908
  9404  0031C4                     l7932:
  9405                           
  9406                           ;Test.c: 51: PortTestA5();
  9407  0031C4  EC25  F01C         	call	_PortTestA5	;wreg free
  9408                           
  9409                           ;Test.c: 52: break;
  9410  0031C8  D7B2               	goto	l7908
  9411  0031CA                     l7934:
  9412                           
  9413                           ;Test.c: 54: ToggleTestA5();
  9414  0031CA  ECB6  F01C         	call	_ToggleTestA5	;wreg free
  9415                           
  9416                           ;Test.c: 55: break;
  9417  0031CE  D7AF               	goto	l7908
  9418  0031D0                     l7936:
  9419                           
  9420                           ;Test.c: 57: EEPROMTest();
  9421  0031D0  EC66  F023         	call	_EEPROMTest	;wreg free
  9422                           
  9423                           ;Test.c: 58: break;
  9424  0031D4  D7AC               	goto	l7908
  9425  0031D6                     l7938:
  9426                           
  9427                           ;Test.c: 60: SolenoidTestA5();
  9428  0031D6  EC1B  F019         	call	_SolenoidTestA5	;wreg free
  9429                           
  9430                           ;Test.c: 61: break;
  9431  0031DA  D7A9               	goto	l7908
  9432  0031DC                     l7940:
  9433                           
  9434                           ;Test.c: 63: PortTests();
  9435  0031DC  EC3D  F01D         	call	_PortTests	;wreg free
  9436                           
  9437                           ;Test.c: 64: break;
  9438  0031E0  D7A6               	goto	l7908
  9439  0031E2                     l7942:
  9440                           
  9441                           ;Test.c: 66: BothServos();
  9442  0031E2  EC8B  F00C         	call	_BothServos	;wreg free
  9443                           
  9444                           ;Test.c: 70: }
  9445                           
  9446                           ;Test.c: 69: break;
  9447                           
  9448                           ;Test.c: 68: default:
  9449                           
  9450                           ;Test.c: 67: break;
  9451  0031E6  D7A3               	goto	l7908
  9452  0031E8                     l7946:
  9453  0031E8  C0FA  F0C6         	movff	_var,??_Test
  9454  0031EC  C0FB  F0C7         	movff	_var+1,??_Test+1
  9455                           
  9456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9457                           ; Switch size 1, requested type "space"
  9458                           ; Number of cases is 1, Range of values is 0 to 0
  9459                           ; switch strategies available:
  9460                           ; Name         Instructions Cycles
  9461                           ; simple_byte            4     3 (average)
  9462                           ;	Chosen strategy is simple_byte
  9463  0031F0  0100               	movlb	0	; () banked
  9464  0031F2  51C7               	movf	(??_Test+1)& (0+255),w,b
  9465  0031F4  0A00               	xorlw	0	; case 0
  9466  0031F6  A4D8               	btfss	status,2,c
  9467  0031F8  D79A               	goto	l7908
  9468                           
  9469                           ; BSR set to: 0
  9470                           ; Switch size 1, requested type "space"
  9471                           ; Number of cases is 9, Range of values is 1 to 10
  9472                           ; switch strategies available:
  9473                           ; Name         Instructions Cycles
  9474                           ; simple_byte           28    15 (average)
  9475                           ;	Chosen strategy is simple_byte
  9476  0031FA  0100               	movlb	0	; () banked
  9477  0031FC  51C6               	movf	??_Test& (0+255),w,b
  9478  0031FE  0A01               	xorlw	1	; case 1
  9479  003200  B4D8               	btfsc	status,2,c
  9480  003202  D7D7               	goto	l7926
  9481  003204  0A03               	xorlw	3	; case 2
  9482  003206  B4D8               	btfsc	status,2,c
  9483  003208  D7D7               	goto	l7928
  9484  00320A  0A01               	xorlw	1	; case 3
  9485  00320C  B4D8               	btfsc	status,2,c
  9486  00320E  D7D7               	goto	l7930
  9487  003210  0A06               	xorlw	6	; case 5
  9488  003212  B4D8               	btfsc	status,2,c
  9489  003214  D7D7               	goto	l7932
  9490  003216  0A03               	xorlw	3	; case 6
  9491  003218  B4D8               	btfsc	status,2,c
  9492  00321A  D7D7               	goto	l7934
  9493  00321C  0A01               	xorlw	1	; case 7
  9494  00321E  B4D8               	btfsc	status,2,c
  9495  003220  D7D7               	goto	l7936
  9496  003222  0A0F               	xorlw	15	; case 8
  9497  003224  B4D8               	btfsc	status,2,c
  9498  003226  D7D7               	goto	l7938
  9499  003228  0A01               	xorlw	1	; case 9
  9500  00322A  B4D8               	btfsc	status,2,c
  9501  00322C  D7D7               	goto	l7940
  9502  00322E  0A03               	xorlw	3	; case 10
  9503  003230  B4D8               	btfsc	status,2,c
  9504  003232  D7D7               	goto	l7942
  9505                           
  9506                           ; BSR set to: 0
  9507                           
  9508                           ; BSR set to: 0
  9509  003234  D77C               	goto	l7908
  9510  003236                     __end_of_Test:
  9511                           	opt stack 0
  9512                           tblptru	equ	0xFF8
  9513                           tblptrh	equ	0xFF7
  9514                           tblptrl	equ	0xFF6
  9515                           tablat	equ	0xFF5
  9516                           prodh	equ	0xFF4
  9517                           prodl	equ	0xFF3
  9518                           intcon	equ	0xFF2
  9519                           intcon2	equ	0xFF1
  9520                           intcon3	equ	0xFF0
  9521                           postinc0	equ	0xFEE
  9522                           wreg	equ	0xFE8
  9523                           postdec1	equ	0xFE5
  9524                           fsr1l	equ	0xFE1
  9525                           indf2	equ	0xFDF
  9526                           postinc2	equ	0xFDE
  9527                           postdec2	equ	0xFDD
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function _sensorTest *****************
  9533 ;; Defined at:
  9534 ;;		line 118 in file "Test.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  res             2   45[BANK0 ] int 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      void 
  9541 ;; Registers used:
  9542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;Total ram usage:        4 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:   10
  9555 ;; This function calls:
  9556 ;;		_lcdInst
  9557 ;;		_printf
  9558 ;;		_readADC
  9559 ;;		_readMAG
  9560 ;; This function is called by:
  9561 ;;		_Test
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           	psect	text36
  9566  00279E                     __ptext36:
  9567                           	opt stack 0
  9568  00279E                     _sensorTest:
  9569                           	opt stack 19
  9570                           
  9571                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;incstack = 0
  9575  00279E  0E01               	movlw	1
  9576  0027A0  EC34  F023         	call	_lcdInst
  9577  0027A4  0E68               	movlw	104
  9578  0027A6  0100               	movlb	0	; () banked
  9579  0027A8  6FAB               	movwf	??_sensorTest& (0+255),b
  9580  0027AA  0EE4               	movlw	228
  9581  0027AC                     u7377:
  9582  0027AC  2EE8               	decfsz	wreg,f,c
  9583  0027AE  D7FE               	bra	u7377
  9584  0027B0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9585  0027B2  D7FC               	bra	u7377
  9586  0027B4  F000               	nop	
  9587  0027B6  0E80               	movlw	128
  9588  0027B8  EC34  F023         	call	_lcdInst
  9589                           
  9590                           ;Test.c: 121: printf("SENSORS");
  9591  0027BC  0EAD               	movlw	low STR_77
  9592  0027BE  0100               	movlb	0	; () banked
  9593  0027C0  6F8E               	movwf	printf@f& (0+255),b
  9594  0027C2  0EFF               	movlw	high STR_77
  9595  0027C4  0100               	movlb	0	; () banked
  9596  0027C6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9597  0027C8  ECB8  F008         	call	_printf	;wreg free
  9598                           
  9599                           ;Test.c: 122: lcdInst(0b11000000);;
  9600  0027CC  0EC0               	movlw	192
  9601  0027CE  EC34  F023         	call	_lcdInst
  9602                           
  9603                           ;Test.c: 123: printf("PUSH TO START");
  9604  0027D2  0E11               	movlw	low STR_71
  9605  0027D4  0100               	movlb	0	; () banked
  9606  0027D6  6F8E               	movwf	printf@f& (0+255),b
  9607  0027D8  0EFF               	movlw	high STR_71
  9608  0027DA  0100               	movlb	0	; () banked
  9609  0027DC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9610  0027DE  ECB8  F008         	call	_printf	;wreg free
  9611                           
  9612                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9613  0027E2  0E05               	movlw	5
  9614  0027E4  0100               	movlb	0	; () banked
  9615  0027E6  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9616  0027E8  0E0F               	movlw	15
  9617  0027EA  0100               	movlb	0	; () banked
  9618  0027EC  6FAB               	movwf	??_sensorTest& (0+255),b
  9619  0027EE  0EF1               	movlw	241
  9620  0027F0                     u7387:
  9621  0027F0  2EE8               	decfsz	wreg,f,c
  9622  0027F2  D7FE               	bra	u7387
  9623  0027F4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9624  0027F6  D7FC               	bra	u7387
  9625  0027F8  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9626  0027FA  D7FA               	bra	u7387
  9627  0027FC                     l1057:
  9628  0027FC  A281               	btfss	3969,1,c	;volatile
  9629  0027FE  D7FE               	goto	l1057
  9630  002800                     l1060:
  9631  002800  B281               	btfsc	3969,1,c	;volatile
  9632  002802  D7FE               	goto	l1060
  9633                           
  9634                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9635  002804  0E01               	movlw	1
  9636  002806  EC34  F023         	call	_lcdInst
  9637  00280A  0E68               	movlw	104
  9638  00280C  0100               	movlb	0	; () banked
  9639  00280E  6FAB               	movwf	??_sensorTest& (0+255),b
  9640  002810  0EE4               	movlw	228
  9641  002812                     u7397:
  9642  002812  2EE8               	decfsz	wreg,f,c
  9643  002814  D7FE               	bra	u7397
  9644  002816  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9645  002818  D7FC               	bra	u7397
  9646  00281A  F000               	nop	
  9647  00281C  0E80               	movlw	128
  9648  00281E  EC34  F023         	call	_lcdInst
  9649                           
  9650                           ;Test.c: 132: printf("TST: IR SNSR");
  9651  002822  0E3B               	movlw	low STR_79
  9652  002824  0100               	movlb	0	; () banked
  9653  002826  6F8E               	movwf	printf@f& (0+255),b
  9654  002828  0EFF               	movlw	high STR_79
  9655  00282A  0100               	movlb	0	; () banked
  9656  00282C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9657  00282E  ECB8  F008         	call	_printf	;wreg free
  9658                           
  9659                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9660  002832  0E05               	movlw	5
  9661  002834  0100               	movlb	0	; () banked
  9662  002836  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9663  002838  0E0F               	movlw	15
  9664  00283A  0100               	movlb	0	; () banked
  9665  00283C  6FAB               	movwf	??_sensorTest& (0+255),b
  9666  00283E  0EF1               	movlw	241
  9667  002840                     u7407:
  9668  002840  2EE8               	decfsz	wreg,f,c
  9669  002842  D7FE               	bra	u7407
  9670  002844  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9671  002846  D7FC               	bra	u7407
  9672  002848  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9673  00284A  D7FA               	bra	u7407
  9674                           
  9675                           ;Test.c: 134: LATCbits.LATC5 = 1;
  9676  00284C  8A8B               	bsf	3979,5,c	;volatile
  9677                           
  9678                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9679  00284E  D05C               	goto	l6534
  9680  002850                     l6516:
  9681                           
  9682                           ;Test.c: 136: readADC(0);
  9683  002850  0E00               	movlw	0
  9684  002852  EC29  F022         	call	_readADC
  9685                           
  9686                           ;Test.c: 137: int res = ADRESH<<8 | ADRESL;
  9687  002856  50C3               	movf	4035,w,c	;volatile
  9688  002858  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
  9689  00285C  0100               	movlb	0	; () banked
  9690  00285E  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
  9691  002860  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
  9692  002864  0100               	movlb	0	; () banked
  9693  002866  6BAB               	clrf	??_sensorTest& (0+255),b
  9694  002868  0100               	movlb	0	; () banked
  9695  00286A  11AB               	iorwf	??_sensorTest& (0+255),w,b
  9696  00286C  0100               	movlb	0	; () banked
  9697  00286E  6FAD               	movwf	sensorTest@res& (0+255),b
  9698  002870  0100               	movlb	0	; () banked
  9699  002872  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
  9700  002874  0100               	movlb	0	; () banked
  9701  002876  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
  9702                           
  9703                           ; BSR set to: 0
  9704                           ;Test.c: 138: IR_signal = (res > 900) ? 1 : 0;
  9705  002878  0100               	movlb	0	; () banked
  9706  00287A  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
  9707  00287C  D00A               	goto	u5000
  9708  00287E  0E85               	movlw	133
  9709  002880  0100               	movlb	0	; () banked
  9710  002882  5DAD               	subwf	sensorTest@res& (0+255),w,b
  9711  002884  0E03               	movlw	3
  9712  002886  0100               	movlb	0	; () banked
  9713  002888  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
  9714  00288A  A0D8               	btfss	status,0,c
  9715  00288C  D002               	goto	u5000
  9716  00288E  0E01               	movlw	1
  9717  002890  D001               	goto	u5010
  9718  002892                     u5000:
  9719  002892  0E00               	movlw	0
  9720  002894                     u5010:
  9721  002894  0100               	movlb	0	; () banked
  9722  002896  6FDA               	movwf	_IR_signal& (0+255),b
  9723  002898  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9724                           
  9725                           ;Test.c: 140: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9726  00289A  0E01               	movlw	1
  9727  00289C  EC34  F023         	call	_lcdInst
  9728  0028A0  0E68               	movlw	104
  9729  0028A2  0100               	movlb	0	; () banked
  9730  0028A4  6FAB               	movwf	??_sensorTest& (0+255),b
  9731  0028A6  0EE4               	movlw	228
  9732  0028A8                     u7417:
  9733  0028A8  2EE8               	decfsz	wreg,f,c
  9734  0028AA  D7FE               	bra	u7417
  9735  0028AC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9736  0028AE  D7FC               	bra	u7417
  9737  0028B0  F000               	nop	
  9738  0028B2  0E80               	movlw	128
  9739  0028B4  EC34  F023         	call	_lcdInst
  9740                           
  9741                           ;Test.c: 141: printf("IR_signal: %d ", IR_signal);
  9742  0028B8  0E60               	movlw	low STR_80
  9743  0028BA  0100               	movlb	0	; () banked
  9744  0028BC  6F8E               	movwf	printf@f& (0+255),b
  9745  0028BE  0EFE               	movlw	high STR_80
  9746  0028C0  0100               	movlb	0	; () banked
  9747  0028C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9748  0028C4  C0DA  F090         	movff	_IR_signal,?_printf+2
  9749  0028C8  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9750  0028CC  ECB8  F008         	call	_printf	;wreg free
  9751                           
  9752                           ;Test.c: 142: lcdInst(0b11000000);;
  9753  0028D0  0EC0               	movlw	192
  9754  0028D2  EC34  F023         	call	_lcdInst
  9755                           
  9756                           ;Test.c: 143: printf("%d", res);
  9757  0028D6  0E7F               	movlw	low (STR_27+16)
  9758  0028D8  0100               	movlb	0	; () banked
  9759  0028DA  6F8E               	movwf	printf@f& (0+255),b
  9760  0028DC  0EFB               	movlw	high (STR_27+16)
  9761  0028DE  0100               	movlb	0	; () banked
  9762  0028E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9763  0028E2  C0AD  F090         	movff	sensorTest@res,?_printf+2
  9764  0028E6  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
  9765  0028EA  ECB8  F008         	call	_printf	;wreg free
  9766                           
  9767                           ;Test.c: 144: _delay((unsigned long)((100)*(32000000/4000.0)));
  9768  0028EE  0E05               	movlw	5
  9769  0028F0  0100               	movlb	0	; () banked
  9770  0028F2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9771  0028F4  0E0F               	movlw	15
  9772  0028F6  0100               	movlb	0	; () banked
  9773  0028F8  6FAB               	movwf	??_sensorTest& (0+255),b
  9774  0028FA  0EF1               	movlw	241
  9775  0028FC                     u7427:
  9776  0028FC  2EE8               	decfsz	wreg,f,c
  9777  0028FE  D7FE               	bra	u7427
  9778  002900  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9779  002902  D7FC               	bra	u7427
  9780  002904  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9781  002906  D7FA               	bra	u7427
  9782  002908                     l6534:
  9783  002908  A281               	btfss	3969,1,c	;volatile
  9784  00290A  D7A2               	goto	l6516
  9785                           
  9786                           ;Test.c: 145: }
  9787                           ;Test.c: 146: LATCbits.LATC5 = 0;
  9788  00290C  9A8B               	bcf	3979,5,c	;volatile
  9789                           
  9790                           ;Test.c: 153: printf("TST: MAGNETISM");
  9791  00290E  0E8D               	movlw	low STR_82
  9792  002910  0100               	movlb	0	; () banked
  9793  002912  6F8E               	movwf	printf@f& (0+255),b
  9794  002914  0EFE               	movlw	high STR_82
  9795  002916  0100               	movlb	0	; () banked
  9796  002918  6F8F               	movwf	(printf@f+1)& (0+255),b
  9797  00291A  ECB8  F008         	call	_printf	;wreg free
  9798                           
  9799                           ;Test.c: 154: _delay((unsigned long)((100)*(32000000/4000.0)));
  9800  00291E  0E05               	movlw	5
  9801  002920  0100               	movlb	0	; () banked
  9802  002922  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9803  002924  0E0F               	movlw	15
  9804  002926  0100               	movlb	0	; () banked
  9805  002928  6FAB               	movwf	??_sensorTest& (0+255),b
  9806  00292A  0EF1               	movlw	241
  9807  00292C                     u7437:
  9808  00292C  2EE8               	decfsz	wreg,f,c
  9809  00292E  D7FE               	bra	u7437
  9810  002930  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9811  002932  D7FC               	bra	u7437
  9812  002934  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9813  002936  D7FA               	bra	u7437
  9814                           
  9815                           ;Test.c: 155: while(PORTBbits.RB1 == 0){
  9816  002938  D021               	goto	l6546
  9817  00293A                     l6540:
  9818                           
  9819                           ;Test.c: 156: readMAG();
  9820  00293A  EC1C  F020         	call	_readMAG	;wreg free
  9821                           
  9822                           ;Test.c: 157: lcdInst(0b10000000);;
  9823  00293E  0E80               	movlw	128
  9824  002940  EC34  F023         	call	_lcdInst
  9825                           
  9826                           ;Test.c: 158: lcdInst(0b11000000);;
  9827  002944  0EC0               	movlw	192
  9828  002946  EC34  F023         	call	_lcdInst
  9829                           
  9830                           ;Test.c: 159: printf("MAG_signal: %d ", MAG_signal);
  9831  00294A  0E30               	movlw	low STR_83
  9832  00294C  0100               	movlb	0	; () banked
  9833  00294E  6F8E               	movwf	printf@f& (0+255),b
  9834  002950  0EFE               	movlw	high STR_83
  9835  002952  0100               	movlb	0	; () banked
  9836  002954  6F8F               	movwf	(printf@f+1)& (0+255),b
  9837  002956  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9838  00295A  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9839  00295E  ECB8  F008         	call	_printf	;wreg free
  9840                           
  9841                           ;Test.c: 160: _delay((unsigned long)((100)*(32000000/4000.0)));
  9842  002962  0E05               	movlw	5
  9843  002964  0100               	movlb	0	; () banked
  9844  002966  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9845  002968  0E0F               	movlw	15
  9846  00296A  0100               	movlb	0	; () banked
  9847  00296C  6FAB               	movwf	??_sensorTest& (0+255),b
  9848  00296E  0EF1               	movlw	241
  9849  002970                     u7447:
  9850  002970  2EE8               	decfsz	wreg,f,c
  9851  002972  D7FE               	bra	u7447
  9852  002974  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9853  002976  D7FC               	bra	u7447
  9854  002978  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9855  00297A  D7FA               	bra	u7447
  9856  00297C                     l6546:
  9857  00297C  B281               	btfsc	3969,1,c	;volatile
  9858  00297E  0012               	return	
  9859  002980  D7DC               	goto	l6540
  9860  002982                     __end_of_sensorTest:
  9861                           	opt stack 0
  9862                           tblptru	equ	0xFF8
  9863                           tblptrh	equ	0xFF7
  9864                           tblptrl	equ	0xFF6
  9865                           tablat	equ	0xFF5
  9866                           prodh	equ	0xFF4
  9867                           prodl	equ	0xFF3
  9868                           intcon	equ	0xFF2
  9869                           intcon2	equ	0xFF1
  9870                           intcon3	equ	0xFF0
  9871                           postinc0	equ	0xFEE
  9872                           wreg	equ	0xFE8
  9873                           postdec1	equ	0xFE5
  9874                           fsr1l	equ	0xFE1
  9875                           indf2	equ	0xFDF
  9876                           postinc2	equ	0xFDE
  9877                           postdec2	equ	0xFDD
  9878                           fsr2h	equ	0xFDA
  9879                           fsr2l	equ	0xFD9
  9880                           status	equ	0xFD8
  9881                           
  9882 ;; *************** function _readMAG *****************
  9883 ;; Defined at:
  9884 ;;		line 29 in file "ADCFunctionality.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;		None
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  res             2    4[BANK0 ] int 
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      void 
  9891 ;; Registers used:
  9892 ;;		wreg, status,2, status,0, cstack
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;Total ram usage:        4 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    8
  9905 ;; This function calls:
  9906 ;;		_readADC
  9907 ;; This function is called by:
  9908 ;;		_ID
  9909 ;;		_sensorTest
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text37
  9914  004038                     __ptext37:
  9915                           	opt stack 0
  9916  004038                     _readMAG:
  9917                           	opt stack 20
  9918                           
  9919                           ;ADCFunctionality.c: 30: readADC(1);
  9920                           
  9921                           ;incstack = 0
  9922  004038  0E01               	movlw	1
  9923  00403A  EC29  F022         	call	_readADC
  9924                           
  9925                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9926  00403E  50C3               	movf	4035,w,c	;volatile
  9927  004040  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9928  004044  0100               	movlb	0	; () banked
  9929  004046  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9930  004048  C082  F083         	movff	??_readMAG,??_readMAG+1
  9931  00404C  0100               	movlb	0	; () banked
  9932  00404E  6B82               	clrf	??_readMAG& (0+255),b
  9933  004050  0100               	movlb	0	; () banked
  9934  004052  1182               	iorwf	??_readMAG& (0+255),w,b
  9935  004054  0100               	movlb	0	; () banked
  9936  004056  6F84               	movwf	readMAG@res& (0+255),b
  9937  004058  0100               	movlb	0	; () banked
  9938  00405A  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9939  00405C  0100               	movlb	0	; () banked
  9940  00405E  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9944  004060  0100               	movlb	0	; () banked
  9945  004062  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9946  004064  D008               	goto	u4411
  9947  004066  0100               	movlb	0	; () banked
  9948  004068  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9949  00406A  E107               	bnz	u4410
  9950  00406C  0E96               	movlw	150
  9951  00406E  0100               	movlb	0	; () banked
  9952  004070  5D84               	subwf	readMAG@res& (0+255),w,b
  9953  004072  B0D8               	btfsc	status,0,c
  9954  004074  D002               	goto	u4410
  9955  004076                     u4411:
  9956  004076  0E01               	movlw	1
  9957  004078  D001               	goto	u4420
  9958  00407A                     u4410:
  9959  00407A  0E00               	movlw	0
  9960  00407C                     u4420:
  9961  00407C  0100               	movlb	0	; () banked
  9962  00407E  6FDC               	movwf	_MAG_signal& (0+255),b
  9963  004080  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9964                           
  9965                           ; BSR set to: 0
  9966  004082  0012               	return		;funcret
  9967  004084                     __end_of_readMAG:
  9968                           	opt stack 0
  9969                           tblptru	equ	0xFF8
  9970                           tblptrh	equ	0xFF7
  9971                           tblptrl	equ	0xFF6
  9972                           tablat	equ	0xFF5
  9973                           prodh	equ	0xFF4
  9974                           prodl	equ	0xFF3
  9975                           intcon	equ	0xFF2
  9976                           intcon2	equ	0xFF1
  9977                           intcon3	equ	0xFF0
  9978                           postinc0	equ	0xFEE
  9979                           wreg	equ	0xFE8
  9980                           postdec1	equ	0xFE5
  9981                           fsr1l	equ	0xFE1
  9982                           indf2	equ	0xFDF
  9983                           postinc2	equ	0xFDE
  9984                           postdec2	equ	0xFDD
  9985                           fsr2h	equ	0xFDA
  9986                           fsr2l	equ	0xFD9
  9987                           status	equ	0xFD8
  9988                           
  9989 ;; *************** function _readADC *****************
  9990 ;; Defined at:
  9991 ;;		line 15 in file "ADCFunctionality.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;  channel         1    wreg     unsigned char 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  channel         1    1[BANK0 ] unsigned char 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0, cstack
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:        2 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    7
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_readIR
 10016 ;;		_readMAG
 10017 ;;		_sensorTest
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text38
 10022  004452                     __ptext38:
 10023                           	opt stack 0
 10024  004452                     _readADC:
 10025                           	opt stack 19
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;incstack = 0
 10029                           ;readADC@channel stored from wreg
 10030  004452  0100               	movlb	0	; () banked
 10031  004454  6F81               	movwf	readADC@channel& (0+255),b
 10032                           
 10033                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10034  004456  0100               	movlb	0	; () banked
 10035  004458  4581               	rlncf	readADC@channel& (0+255),w,b
 10036  00445A  46E8               	rlncf	wreg,f,c
 10037  00445C  0BFC               	andlw	252
 10038  00445E  6EC2               	movwf	4034,c	;volatile
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10042  004460  80C2               	bsf	4034,0,c	;volatile
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10046  004462  82C2               	bsf	4034,1,c	;volatile
 10047                           
 10048                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10049  004464  D009               	goto	l5178
 10050  004466                     l5176:
 10051  004466  0E34               	movlw	52
 10052  004468  0100               	movlb	0	; () banked
 10053  00446A  6F80               	movwf	??_readADC& (0+255),b
 10054  00446C  0EF1               	movlw	241
 10055  00446E                     u7457:
 10056  00446E  2EE8               	decfsz	wreg,f,c
 10057  004470  D7FE               	bra	u7457
 10058  004472  2F80               	decfsz	??_readADC& (0+255),f,b
 10059  004474  D7FC               	bra	u7457
 10060  004476  D000               	nop2	
 10061  004478                     l5178:
 10062  004478  A2C2               	btfss	4034,1,c	;volatile
 10063  00447A  0012               	return	
 10064  00447C  D7F4               	goto	l5176
 10065  00447E                     __end_of_readADC:
 10066                           	opt stack 0
 10067                           tblptru	equ	0xFF8
 10068                           tblptrh	equ	0xFF7
 10069                           tblptrl	equ	0xFF6
 10070                           tablat	equ	0xFF5
 10071                           prodh	equ	0xFF4
 10072                           prodl	equ	0xFF3
 10073                           intcon	equ	0xFF2
 10074                           intcon2	equ	0xFF1
 10075                           intcon3	equ	0xFF0
 10076                           postinc0	equ	0xFEE
 10077                           wreg	equ	0xFE8
 10078                           postdec1	equ	0xFE5
 10079                           fsr1l	equ	0xFE1
 10080                           indf2	equ	0xFDF
 10081                           postinc2	equ	0xFDE
 10082                           postdec2	equ	0xFDD
 10083                           fsr2h	equ	0xFDA
 10084                           fsr2l	equ	0xFD9
 10085                           status	equ	0xFD8
 10086                           
 10087 ;; *************** function _algorithmTest *****************
 10088 ;; Defined at:
 10089 ;;		line 74 in file "Test.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;		None
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  1    wreg      void 
 10096 ;; Registers used:
 10097 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/0
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;Total ram usage:        2 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:   10
 10110 ;; This function calls:
 10111 ;;		_lcdInst
 10112 ;;		_printf
 10113 ;; This function is called by:
 10114 ;;		_Test
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text39
 10119  003418                     __ptext39:
 10120                           	opt stack 0
 10121  003418                     _algorithmTest:
 10122                           	opt stack 19
 10123                           
 10124                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10125                           
 10126                           ;incstack = 0
 10127  003418  0E01               	movlw	1
 10128  00341A  EC34  F023         	call	_lcdInst
 10129  00341E  0E68               	movlw	104
 10130  003420  0100               	movlb	0	; () banked
 10131  003422  6FAB               	movwf	??_algorithmTest& (0+255),b
 10132  003424  0EE4               	movlw	228
 10133  003426                     u7467:
 10134  003426  2EE8               	decfsz	wreg,f,c
 10135  003428  D7FE               	bra	u7467
 10136  00342A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10137  00342C  D7FC               	bra	u7467
 10138  00342E  F000               	nop	
 10139  003430  0E80               	movlw	128
 10140  003432  EC34  F023         	call	_lcdInst
 10141                           
 10142                           ;Test.c: 77: printf("ALGORITHM TEST");
 10143  003436  0ED8               	movlw	low STR_70
 10144  003438  0100               	movlb	0	; () banked
 10145  00343A  6F8E               	movwf	printf@f& (0+255),b
 10146  00343C  0EFE               	movlw	high STR_70
 10147  00343E  0100               	movlb	0	; () banked
 10148  003440  6F8F               	movwf	(printf@f+1)& (0+255),b
 10149  003442  ECB8  F008         	call	_printf	;wreg free
 10150                           
 10151                           ;Test.c: 78: lcdInst(0b11000000);;
 10152  003446  0EC0               	movlw	192
 10153  003448  EC34  F023         	call	_lcdInst
 10154                           
 10155                           ;Test.c: 79: printf("PUSH TO START");
 10156  00344C  0E11               	movlw	low STR_71
 10157  00344E  0100               	movlb	0	; () banked
 10158  003450  6F8E               	movwf	printf@f& (0+255),b
 10159  003452  0EFF               	movlw	high STR_71
 10160  003454  0100               	movlb	0	; () banked
 10161  003456  6F8F               	movwf	(printf@f+1)& (0+255),b
 10162  003458  ECB8  F008         	call	_printf	;wreg free
 10163                           
 10164                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10165  00345C  0E05               	movlw	5
 10166  00345E  0100               	movlb	0	; () banked
 10167  003460  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10168  003462  0E0F               	movlw	15
 10169  003464  0100               	movlb	0	; () banked
 10170  003466  6FAB               	movwf	??_algorithmTest& (0+255),b
 10171  003468  0EF1               	movlw	241
 10172  00346A                     u7477:
 10173  00346A  2EE8               	decfsz	wreg,f,c
 10174  00346C  D7FE               	bra	u7477
 10175  00346E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10176  003470  D7FC               	bra	u7477
 10177  003472  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10178  003474  D7FA               	bra	u7477
 10179  003476                     l1048:
 10180  003476  A281               	btfss	3969,1,c	;volatile
 10181  003478  D7FE               	goto	l1048
 10182  00347A                     l1051:
 10183  00347A  B281               	btfsc	3969,1,c	;volatile
 10184  00347C  D7FE               	goto	l1051
 10185                           
 10186                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10187  00347E  0E01               	movlw	1
 10188  003480  EC34  F023         	call	_lcdInst
 10189  003484  0E68               	movlw	104
 10190  003486  0100               	movlb	0	; () banked
 10191  003488  6FAB               	movwf	??_algorithmTest& (0+255),b
 10192  00348A  0EE4               	movlw	228
 10193  00348C                     u7487:
 10194  00348C  2EE8               	decfsz	wreg,f,c
 10195  00348E  D7FE               	bra	u7487
 10196  003490  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10197  003492  D7FC               	bra	u7487
 10198  003494  F000               	nop	
 10199  003496  0E80               	movlw	128
 10200  003498  EC34  F023         	call	_lcdInst
 10201                           
 10202                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10203  00349C  0E87               	movlw	low STR_72
 10204  00349E  0100               	movlb	0	; () banked
 10205  0034A0  6F8E               	movwf	printf@f& (0+255),b
 10206  0034A2  0EFC               	movlw	high STR_72
 10207  0034A4  0100               	movlb	0	; () banked
 10208  0034A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10209  0034A8  ECB8  F008         	call	_printf	;wreg free
 10210                           
 10211                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10212  0034AC  0EF5               	movlw	low STR_73
 10213  0034AE  0100               	movlb	0	; () banked
 10214  0034B0  6F8E               	movwf	printf@f& (0+255),b
 10215  0034B2  0EFE               	movlw	high STR_73
 10216  0034B4  0100               	movlb	0	; () banked
 10217  0034B6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10218  0034B8  ECB8  F008         	call	_printf	;wreg free
 10219                           
 10220                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10221  0034BC  0E62               	movlw	low STR_74
 10222  0034BE  0100               	movlb	0	; () banked
 10223  0034C0  6F8E               	movwf	printf@f& (0+255),b
 10224  0034C2  0EFF               	movlw	high STR_74
 10225  0034C4  0100               	movlb	0	; () banked
 10226  0034C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10227  0034C8  ECB8  F008         	call	_printf	;wreg free
 10228                           
 10229                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10230  0034CC  0EBA               	movlw	low STR_75
 10231  0034CE  0100               	movlb	0	; () banked
 10232  0034D0  6F8E               	movwf	printf@f& (0+255),b
 10233  0034D2  0EFE               	movlw	high STR_75
 10234  0034D4  0100               	movlb	0	; () banked
 10235  0034D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10236  0034D8  ECB8  F008         	call	_printf	;wreg free
 10237                           
 10238                           ;Test.c: 115: printf("ALG5: NO CANS");
 10239  0034DC  0E03               	movlw	low STR_76
 10240  0034DE  0100               	movlb	0	; () banked
 10241  0034E0  6F8E               	movwf	printf@f& (0+255),b
 10242  0034E2  0EFF               	movlw	high STR_76
 10243  0034E4  0100               	movlb	0	; () banked
 10244  0034E6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10245  0034E8  ECB8  F008         	call	_printf	;wreg free
 10246  0034EC  0012               	return		;funcret
 10247  0034EE                     __end_of_algorithmTest:
 10248                           	opt stack 0
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           intcon	equ	0xFF2
 10256                           intcon2	equ	0xFF1
 10257                           intcon3	equ	0xFF0
 10258                           postinc0	equ	0xFEE
 10259                           wreg	equ	0xFE8
 10260                           postdec1	equ	0xFE5
 10261                           fsr1l	equ	0xFE1
 10262                           indf2	equ	0xFDF
 10263                           postinc2	equ	0xFDE
 10264                           postdec2	equ	0xFDD
 10265                           fsr2h	equ	0xFDA
 10266                           fsr2l	equ	0xFD9
 10267                           status	equ	0xFD8
 10268                           
 10269 ;; *************** function _actuatorTest *****************
 10270 ;; Defined at:
 10271 ;;		line 164 in file "Test.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;		None
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  i               1   45[BANK0 ] unsigned char 
 10276 ;;  i               1   67[BANK0 ] unsigned char 
 10277 ;;  i               1   66[BANK0 ] unsigned char 
 10278 ;;  i               1   65[BANK0 ] unsigned char 
 10279 ;;  i               1   64[BANK0 ] unsigned char 
 10280 ;;  i               1   63[BANK0 ] unsigned char 
 10281 ;;  i               1   62[BANK0 ] unsigned char 
 10282 ;;  i               1   61[BANK0 ] unsigned char 
 10283 ;;  i               1   60[BANK0 ] unsigned char 
 10284 ;;  i               1   59[BANK0 ] unsigned char 
 10285 ;;  i               1   58[BANK0 ] unsigned char 
 10286 ;;  i               1   57[BANK0 ] unsigned char 
 10287 ;;  i               1   56[BANK0 ] unsigned char 
 10288 ;;  i               1   55[BANK0 ] unsigned char 
 10289 ;;  i               1   54[BANK0 ] unsigned char 
 10290 ;;  i               1   53[BANK0 ] unsigned char 
 10291 ;;  i               1   52[BANK0 ] unsigned char 
 10292 ;;  i               1   51[BANK0 ] unsigned char 
 10293 ;;  i               1   50[BANK0 ] unsigned char 
 10294 ;;  i               1   49[BANK0 ] unsigned char 
 10295 ;;  i               1   48[BANK0 ] unsigned char 
 10296 ;;  i               1   47[BANK0 ] unsigned char 
 10297 ;;  i               1   46[BANK0 ] unsigned char 
 10298 ;;  i               2   68[BANK0 ] int 
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  1    wreg      void 
 10301 ;; Registers used:
 10302 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;Total ram usage:       27 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:   10
 10315 ;; This function calls:
 10316 ;;		_lcdInst
 10317 ;;		_printf
 10318 ;;		_updateServoPosition
 10319 ;; This function is called by:
 10320 ;;		_Test
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text40
 10325  000012                     __ptext40:
 10326                           	opt stack 0
 10327  000012                     _actuatorTest:
 10328                           	opt stack 19
 10329                           
 10330                           ;Test.c: 166: int i = 0;
 10331                           
 10332                           ;incstack = 0
 10333  000012  0E00               	movlw	0
 10334  000014  0100               	movlb	0	; () banked
 10335  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10336  000018  0E00               	movlw	0
 10337  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;Test.c: 168: (INTCONbits.GIE = 1);
 10341  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;Test.c: 169: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10345  00001E  0E01               	movlw	1
 10346  000020  EC34  F023         	call	_lcdInst
 10347  000024  0E68               	movlw	104
 10348  000026  0100               	movlb	0	; () banked
 10349  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10350  00002A  0EE4               	movlw	228
 10351  00002C                     u7497:
 10352  00002C  2EE8               	decfsz	wreg,f,c
 10353  00002E  D7FE               	bra	u7497
 10354  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10355  000032  D7FC               	bra	u7497
 10356  000034  F000               	nop	
 10357  000036  0E80               	movlw	128
 10358  000038  EC34  F023         	call	_lcdInst
 10359                           
 10360                           ;Test.c: 170: printf("ACTUATORS");
 10361  00003C  0E99               	movlw	low STR_84
 10362  00003E  0100               	movlb	0	; () banked
 10363  000040  6F8E               	movwf	printf@f& (0+255),b
 10364  000042  0EFF               	movlw	high STR_84
 10365  000044  0100               	movlb	0	; () banked
 10366  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10367  000048  ECB8  F008         	call	_printf	;wreg free
 10368                           
 10369                           ;Test.c: 171: lcdInst(0b11000000);;
 10370  00004C  0EC0               	movlw	192
 10371  00004E  EC34  F023         	call	_lcdInst
 10372                           
 10373                           ;Test.c: 172: printf("PUSH TO START");
 10374  000052  0E11               	movlw	low STR_71
 10375  000054  0100               	movlb	0	; () banked
 10376  000056  6F8E               	movwf	printf@f& (0+255),b
 10377  000058  0EFF               	movlw	high STR_71
 10378  00005A  0100               	movlb	0	; () banked
 10379  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10380  00005E  ECB8  F008         	call	_printf	;wreg free
 10381                           
 10382                           ;Test.c: 173: _delay((unsigned long)((100)*(32000000/4000.0)));
 10383  000062  0E05               	movlw	5
 10384  000064  0100               	movlb	0	; () banked
 10385  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10386  000068  0E0F               	movlw	15
 10387  00006A  0100               	movlb	0	; () banked
 10388  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10389  00006E  0EF1               	movlw	241
 10390  000070                     u7507:
 10391  000070  2EE8               	decfsz	wreg,f,c
 10392  000072  D7FE               	bra	u7507
 10393  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10394  000076  D7FC               	bra	u7507
 10395  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10396  00007A  D7FA               	bra	u7507
 10397  00007C                     l1072:
 10398  00007C  A281               	btfss	3969,1,c	;volatile
 10399  00007E  D7FE               	goto	l1072
 10400  000080                     l1075:
 10401  000080  B281               	btfsc	3969,1,c	;volatile
 10402  000082  D7FE               	goto	l1075
 10403                           
 10404                           ;Test.c: 176: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10405  000084  0E01               	movlw	1
 10406  000086  EC34  F023         	call	_lcdInst
 10407  00008A  0E68               	movlw	104
 10408  00008C  0100               	movlb	0	; () banked
 10409  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10410  000090  0EE4               	movlw	228
 10411  000092                     u7517:
 10412  000092  2EE8               	decfsz	wreg,f,c
 10413  000094  D7FE               	bra	u7517
 10414  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10415  000098  D7FC               	bra	u7517
 10416  00009A  F000               	nop	
 10417  00009C  0E80               	movlw	128
 10418  00009E  EC34  F023         	call	_lcdInst
 10419                           
 10420                           ;Test.c: 181: printf("TST: DC MOTORS");
 10421  0000A2  0EC9               	movlw	low STR_86
 10422  0000A4  0100               	movlb	0	; () banked
 10423  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10424  0000A8  0EFE               	movlw	high STR_86
 10425  0000AA  0100               	movlb	0	; () banked
 10426  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10427  0000AE  ECB8  F008         	call	_printf	;wreg free
 10428                           
 10429                           ;Test.c: 182: lcdInst(0b11000000);;
 10430  0000B2  0EC0               	movlw	192
 10431  0000B4  EC34  F023         	call	_lcdInst
 10432                           
 10433                           ;Test.c: 183: printf("PIN RA5 HIGH.");
 10434  0000B8  0EE7               	movlw	low STR_87
 10435  0000BA  0100               	movlb	0	; () banked
 10436  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10437  0000BE  0EFE               	movlw	high STR_87
 10438  0000C0  0100               	movlb	0	; () banked
 10439  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10440  0000C4  ECB8  F008         	call	_printf	;wreg free
 10441                           
 10442                           ;Test.c: 184: LATAbits.LATA5 = 1;
 10443  0000C8  8A89               	bsf	3977,5,c	;volatile
 10444                           
 10445                           ;Test.c: 185: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10446  0000CA  0E00               	movlw	0
 10447  0000CC  0100               	movlb	0	; () banked
 10448  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10449  0000D0  0E00               	movlw	0
 10450  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453  0000D4  0100               	movlb	0	; () banked
 10454  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10455  0000D8  D008               	goto	l6586
 10456  0000DA  0100               	movlb	0	; () banked
 10457  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10458  0000DE  E123               	bnz	l1079
 10459  0000E0  0E05               	movlw	5
 10460  0000E2  0100               	movlb	0	; () banked
 10461  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10462  0000E6  B0D8               	btfsc	status,0,c
 10463  0000E8  D01E               	goto	l1079
 10464  0000EA                     l6586:
 10465                           
 10466                           ; BSR set to: 0
 10467  0000EA  0E00               	movlw	0
 10468  0000EC  0100               	movlb	0	; () banked
 10469  0000EE  6FAD               	movwf	actuatorTest@i_1584& (0+255),b
 10470  0000F0                     l6588:
 10471                           
 10472                           ; BSR set to: 0
 10473  0000F0  0E63               	movlw	99
 10474  0000F2  0100               	movlb	0	; () banked
 10475  0000F4  65AD               	cpfsgt	actuatorTest@i_1584& (0+255),b
 10476  0000F6  D001               	goto	l6592
 10477  0000F8  D00C               	goto	l6596
 10478  0000FA                     l6592:
 10479                           
 10480                           ; BSR set to: 0
 10481  0000FA  0E68               	movlw	104
 10482  0000FC  0100               	movlb	0	; () banked
 10483  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10484  000100  0EE4               	movlw	228
 10485  000102                     u7527:
 10486  000102  2EE8               	decfsz	wreg,f,c
 10487  000104  D7FE               	bra	u7527
 10488  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10489  000108  D7FC               	bra	u7527
 10490  00010A  F000               	nop	
 10491  00010C  0100               	movlb	0	; () banked
 10492  00010E  2BAD               	incf	actuatorTest@i_1584& (0+255),f,b
 10493  000110  D7EF               	goto	l6588
 10494  000112                     l6596:
 10495                           
 10496                           ; BSR set to: 0
 10497  000112  0100               	movlb	0	; () banked
 10498  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10499  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10500                           
 10501                           ; BSR set to: 0
 10502  000118  0100               	movlb	0	; () banked
 10503  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10504  00011C  D7E6               	goto	l6586
 10505  00011E  0100               	movlb	0	; () banked
 10506  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10507  000122  E101               	bnz	u5090
 10508  000124  D7DD               	goto	L7
 10509  000126                     u5090:
 10510  000126                     l1079:
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;Test.c: 186: LATAbits.LATA5 = 0;
 10514  000126  9A89               	bcf	3977,5,c	;volatile
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;Test.c: 187: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10518  000128  0E01               	movlw	1
 10519  00012A  EC34  F023         	call	_lcdInst
 10520  00012E  0E68               	movlw	104
 10521  000130  0100               	movlb	0	; () banked
 10522  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 10523  000134  0EE4               	movlw	228
 10524  000136                     u7537:
 10525  000136  2EE8               	decfsz	wreg,f,c
 10526  000138  D7FE               	bra	u7537
 10527  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10528  00013C  D7FC               	bra	u7537
 10529  00013E  F000               	nop	
 10530  000140  0E80               	movlw	128
 10531  000142  EC34  F023         	call	_lcdInst
 10532                           
 10533                           ;Test.c: 193: printf("TST: COND SOLN'D");
 10534  000146  0EA9               	movlw	low STR_88
 10535  000148  0100               	movlb	0	; () banked
 10536  00014A  6F8E               	movwf	printf@f& (0+255),b
 10537  00014C  0EFC               	movlw	high STR_88
 10538  00014E  0100               	movlb	0	; () banked
 10539  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 10540  000152  ECB8  F008         	call	_printf	;wreg free
 10541                           
 10542                           ;Test.c: 194: lcdInst(0b11000000);;
 10543  000156  0EC0               	movlw	192
 10544  000158  EC34  F023         	call	_lcdInst
 10545                           
 10546                           ;Test.c: 195: printf("PIN RA3...");
 10547  00015C  0E6E               	movlw	low STR_89
 10548  00015E  0100               	movlb	0	; () banked
 10549  000160  6F8E               	movwf	printf@f& (0+255),b
 10550  000162  0EFF               	movlw	high STR_89
 10551  000164  0100               	movlb	0	; () banked
 10552  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 10553  000168  ECB8  F008         	call	_printf	;wreg free
 10554                           
 10555                           ;Test.c: 196: for(i=0;i<5;i++){
 10556  00016C  0E00               	movlw	0
 10557  00016E  0100               	movlb	0	; () banked
 10558  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10559  000172  0E00               	movlw	0
 10560  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 10561                           
 10562                           ; BSR set to: 0
 10563  000176  0100               	movlb	0	; () banked
 10564  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10565  00017A  D008               	goto	l1082
 10566  00017C  0100               	movlb	0	; () banked
 10567  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10568  000180  E12C               	bnz	l1083
 10569  000182  0E05               	movlw	5
 10570  000184  0100               	movlb	0	; () banked
 10571  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10572  000188  B0D8               	btfsc	status,0,c
 10573  00018A  D027               	goto	l1083
 10574  00018C                     l1082:
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;Test.c: 197: LATAbits.LATA3 = 1;
 10578  00018C  8689               	bsf	3977,3,c	;volatile
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;Test.c: 198: _delay((unsigned long)((300)*(32000000/4000.0)));
 10582  00018E  0E0D               	movlw	13
 10583  000190  0100               	movlb	0	; () banked
 10584  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10585  000194  0E2D               	movlw	45
 10586  000196  0100               	movlb	0	; () banked
 10587  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 10588  00019A  0ED7               	movlw	215
 10589  00019C                     u7547:
 10590  00019C  2EE8               	decfsz	wreg,f,c
 10591  00019E  D7FE               	bra	u7547
 10592  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10593  0001A2  D7FC               	bra	u7547
 10594  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10595  0001A6  D7FA               	bra	u7547
 10596  0001A8  D000               	nop2	
 10597                           
 10598                           ;Test.c: 199: LATAbits.LATA3 = ~1;
 10599  0001AA  9689               	bcf	3977,3,c	;volatile
 10600                           
 10601                           ;Test.c: 200: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10602  0001AC  0E1D               	movlw	29
 10603  0001AE  0100               	movlb	0	; () banked
 10604  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10605  0001B2  0E69               	movlw	105
 10606  0001B4  0100               	movlb	0	; () banked
 10607  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10608  0001B8  0EA5               	movlw	165
 10609  0001BA                     u7557:
 10610  0001BA  2EE8               	decfsz	wreg,f,c
 10611  0001BC  D7FE               	bra	u7557
 10612  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10613  0001C0  D7FC               	bra	u7557
 10614  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10615  0001C4  D7FA               	bra	u7557
 10616  0001C6  0100               	movlb	0	; () banked
 10617  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10618  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10619  0001CC  0100               	movlb	0	; () banked
 10620  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10621  0001D0  D7DD               	goto	l1082
 10622  0001D2  0100               	movlb	0	; () banked
 10623  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10624  0001D6  E101               	bnz	u5110
 10625  0001D8  D7D4               	goto	L8
 10626  0001DA                     u5110:
 10627  0001DA                     l1083:
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;Test.c: 201: }
 10631                           ;Test.c: 202: LATAbits.LATA3 = ~1;
 10632  0001DA  9689               	bcf	3977,3,c	;volatile
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;Test.c: 203: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10636  0001DC  0E01               	movlw	1
 10637  0001DE  EC34  F023         	call	_lcdInst
 10638  0001E2  0E68               	movlw	104
 10639  0001E4  0100               	movlb	0	; () banked
 10640  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10641  0001E8  0EE4               	movlw	228
 10642  0001EA                     u7567:
 10643  0001EA  2EE8               	decfsz	wreg,f,c
 10644  0001EC  D7FE               	bra	u7567
 10645  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10646  0001F0  D7FC               	bra	u7567
 10647  0001F2  F000               	nop	
 10648  0001F4  0E80               	movlw	128
 10649  0001F6  EC34  F023         	call	_lcdInst
 10650                           
 10651                           ;Test.c: 209: printf("TST: PUSH SOLN'D");
 10652  0001FA  0EBA               	movlw	low STR_90
 10653  0001FC  0100               	movlb	0	; () banked
 10654  0001FE  6F8E               	movwf	printf@f& (0+255),b
 10655  000200  0EFC               	movlw	high STR_90
 10656  000202  0100               	movlb	0	; () banked
 10657  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 10658  000206  ECB8  F008         	call	_printf	;wreg free
 10659                           
 10660                           ;Test.c: 210: lcdInst(0b11000000);;
 10661  00020A  0EC0               	movlw	192
 10662  00020C  EC34  F023         	call	_lcdInst
 10663                           
 10664                           ;Test.c: 211: printf("PIN RA4...");
 10665  000210  0E79               	movlw	low STR_91
 10666  000212  0100               	movlb	0	; () banked
 10667  000214  6F8E               	movwf	printf@f& (0+255),b
 10668  000216  0EFF               	movlw	high STR_91
 10669  000218  0100               	movlb	0	; () banked
 10670  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10671  00021C  ECB8  F008         	call	_printf	;wreg free
 10672                           
 10673                           ;Test.c: 212: for(i=0;i<5;i++){
 10674  000220  0E00               	movlw	0
 10675  000222  0100               	movlb	0	; () banked
 10676  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10677  000226  0E00               	movlw	0
 10678  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 10679                           
 10680                           ; BSR set to: 0
 10681  00022A  0100               	movlb	0	; () banked
 10682  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10683  00022E  D008               	goto	l1084
 10684  000230  0100               	movlb	0	; () banked
 10685  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10686  000234  E12C               	bnz	l1085
 10687  000236  0E05               	movlw	5
 10688  000238  0100               	movlb	0	; () banked
 10689  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10690  00023C  B0D8               	btfsc	status,0,c
 10691  00023E  D027               	goto	l1085
 10692  000240                     l1084:
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;Test.c: 213: LATAbits.LATA4 = 1;
 10696  000240  8889               	bsf	3977,4,c	;volatile
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;Test.c: 214: _delay((unsigned long)((300)*(32000000/4000.0)));
 10700  000242  0E0D               	movlw	13
 10701  000244  0100               	movlb	0	; () banked
 10702  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10703  000248  0E2D               	movlw	45
 10704  00024A  0100               	movlb	0	; () banked
 10705  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10706  00024E  0ED7               	movlw	215
 10707  000250                     u7577:
 10708  000250  2EE8               	decfsz	wreg,f,c
 10709  000252  D7FE               	bra	u7577
 10710  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10711  000256  D7FC               	bra	u7577
 10712  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10713  00025A  D7FA               	bra	u7577
 10714  00025C  D000               	nop2	
 10715                           
 10716                           ;Test.c: 215: LATAbits.LATA4 = ~1;
 10717  00025E  9889               	bcf	3977,4,c	;volatile
 10718                           
 10719                           ;Test.c: 216: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10720  000260  0E1D               	movlw	29
 10721  000262  0100               	movlb	0	; () banked
 10722  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10723  000266  0E69               	movlw	105
 10724  000268  0100               	movlb	0	; () banked
 10725  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10726  00026C  0EA5               	movlw	165
 10727  00026E                     u7587:
 10728  00026E  2EE8               	decfsz	wreg,f,c
 10729  000270  D7FE               	bra	u7587
 10730  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10731  000274  D7FC               	bra	u7587
 10732  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10733  000278  D7FA               	bra	u7587
 10734  00027A  0100               	movlb	0	; () banked
 10735  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10736  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10737  000280  0100               	movlb	0	; () banked
 10738  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10739  000284  D7DD               	goto	l1084
 10740  000286  0100               	movlb	0	; () banked
 10741  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10742  00028A  E101               	bnz	u5130
 10743  00028C  D7D4               	goto	L9
 10744  00028E                     u5130:
 10745  00028E                     l1085:
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;Test.c: 217: }
 10749                           ;Test.c: 218: LATAbits.LATA4 = ~1;
 10750  00028E  9889               	bcf	3977,4,c	;volatile
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;Test.c: 219: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10754  000290  0E01               	movlw	1
 10755  000292  EC34  F023         	call	_lcdInst
 10756  000296  0E68               	movlw	104
 10757  000298  0100               	movlb	0	; () banked
 10758  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10759  00029C  0EE4               	movlw	228
 10760  00029E                     u7597:
 10761  00029E  2EE8               	decfsz	wreg,f,c
 10762  0002A0  D7FE               	bra	u7597
 10763  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10764  0002A4  D7FC               	bra	u7597
 10765  0002A6  F000               	nop	
 10766  0002A8  0E80               	movlw	128
 10767  0002AA  EC34  F023         	call	_lcdInst
 10768                           
 10769                           ;Test.c: 222: machine_state = Sorting_state;
 10770  0002AE  0E01               	movlw	1
 10771  0002B0  0100               	movlb	0	; () banked
 10772  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;Test.c: 223: was_low_1 = 0;
 10776  0002B4  0E00               	movlw	0
 10777  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 10778  0002B8  0E00               	movlw	0
 10779  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;Test.c: 224: was_low_1 = 0;
 10783  0002BC  0E00               	movlw	0
 10784  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 10785  0002C0  0E00               	movlw	0
 10786  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;Test.c: 231: printf("TST: PAN SERVO");
 10790  0002C4  0EAB               	movlw	low STR_92
 10791  0002C6  0100               	movlb	0	; () banked
 10792  0002C8  6F8E               	movwf	printf@f& (0+255),b
 10793  0002CA  0EFE               	movlw	high STR_92
 10794  0002CC  0100               	movlb	0	; () banked
 10795  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10796  0002D0  ECB8  F008         	call	_printf	;wreg free
 10797                           
 10798                           ;Test.c: 232: lcdInst(0b11000000);;
 10799  0002D4  0EC0               	movlw	192
 10800  0002D6  EC34  F023         	call	_lcdInst
 10801                           
 10802                           ;Test.c: 233: printf("MIDDLE -- 2s    ");
 10803  0002DA  0E32               	movlw	low STR_93
 10804  0002DC  0100               	movlb	0	; () banked
 10805  0002DE  6F8E               	movwf	printf@f& (0+255),b
 10806  0002E0  0EFC               	movlw	high STR_93
 10807  0002E2  0100               	movlb	0	; () banked
 10808  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10809  0002E6  ECB8  F008         	call	_printf	;wreg free
 10810                           
 10811                           ;Test.c: 234: updateServoPosition(1200, 1);
 10812  0002EA  0E04               	movlw	4
 10813  0002EC  0100               	movlb	0	; () banked
 10814  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10815  0002F0  0EB0               	movlw	176
 10816  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10817  0002F4  0E00               	movlw	0
 10818  0002F6  0100               	movlb	0	; () banked
 10819  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10820  0002FA  0E01               	movlw	1
 10821  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10822  0002FE  ECBB  F01D         	call	_updateServoPosition	;wreg free
 10823                           
 10824                           ;Test.c: 235: TMR1ON = 1;
 10825  000302  80CD               	bsf	4045,0,c	;volatile
 10826                           
 10827                           ;Test.c: 236: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10828  000304  0E00               	movlw	0
 10829  000306  0100               	movlb	0	; () banked
 10830  000308  6FAE               	movwf	actuatorTest@i_1591& (0+255),b
 10831  00030A                     l6672:
 10832                           
 10833                           ; BSR set to: 0
 10834  00030A  0E63               	movlw	99
 10835  00030C  0100               	movlb	0	; () banked
 10836  00030E  65AE               	cpfsgt	actuatorTest@i_1591& (0+255),b
 10837  000310  D001               	goto	l6676
 10838  000312  D00C               	goto	l6680
 10839  000314                     l6676:
 10840                           
 10841                           ; BSR set to: 0
 10842  000314  0E68               	movlw	104
 10843  000316  0100               	movlb	0	; () banked
 10844  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 10845  00031A  0EE4               	movlw	228
 10846  00031C                     u7607:
 10847  00031C  2EE8               	decfsz	wreg,f,c
 10848  00031E  D7FE               	bra	u7607
 10849  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10850  000322  D7FC               	bra	u7607
 10851  000324  F000               	nop	
 10852  000326  0100               	movlb	0	; () banked
 10853  000328  2BAE               	incf	actuatorTest@i_1591& (0+255),f,b
 10854  00032A  D7EF               	goto	l6672
 10855  00032C                     l6680:
 10856                           
 10857                           ; BSR set to: 0
 10858  00032C  0E00               	movlw	0
 10859  00032E  0100               	movlb	0	; () banked
 10860  000330  6FAF               	movwf	actuatorTest@i_1592& (0+255),b
 10861  000332                     l6682:
 10862                           
 10863                           ; BSR set to: 0
 10864  000332  0E63               	movlw	99
 10865  000334  0100               	movlb	0	; () banked
 10866  000336  65AF               	cpfsgt	actuatorTest@i_1592& (0+255),b
 10867  000338  D001               	goto	l6686
 10868  00033A  D00C               	goto	l6690
 10869  00033C                     l6686:
 10870                           
 10871                           ; BSR set to: 0
 10872  00033C  0E68               	movlw	104
 10873  00033E  0100               	movlb	0	; () banked
 10874  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 10875  000342  0EE4               	movlw	228
 10876  000344                     u7617:
 10877  000344  2EE8               	decfsz	wreg,f,c
 10878  000346  D7FE               	bra	u7617
 10879  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10880  00034A  D7FC               	bra	u7617
 10881  00034C  F000               	nop	
 10882  00034E  0100               	movlb	0	; () banked
 10883  000350  2BAF               	incf	actuatorTest@i_1592& (0+255),f,b
 10884  000352  D7EF               	goto	l6682
 10885  000354                     l6690:
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;Test.c: 238: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10889  000354  0E80               	movlw	128
 10890  000356  EC34  F023         	call	_lcdInst
 10891  00035A  0EC0               	movlw	192
 10892  00035C  EC34  F023         	call	_lcdInst
 10893                           
 10894                           ;Test.c: 239: printf("RIGHT -- 2s     ");
 10895  000360  0E21               	movlw	low STR_94
 10896  000362  0100               	movlb	0	; () banked
 10897  000364  6F8E               	movwf	printf@f& (0+255),b
 10898  000366  0EFC               	movlw	high STR_94
 10899  000368  0100               	movlb	0	; () banked
 10900  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10901  00036C  ECB8  F008         	call	_printf	;wreg free
 10902                           
 10903                           ;Test.c: 240: updateServoPosition(500, 1);
 10904  000370  0E01               	movlw	1
 10905  000372  0100               	movlb	0	; () banked
 10906  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10907  000376  0EF4               	movlw	244
 10908  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10909  00037A  0E00               	movlw	0
 10910  00037C  0100               	movlb	0	; () banked
 10911  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10912  000380  0E01               	movlw	1
 10913  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10914  000384  ECBB  F01D         	call	_updateServoPosition	;wreg free
 10915                           
 10916                           ;Test.c: 241: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10917  000388  0E00               	movlw	0
 10918  00038A  0100               	movlb	0	; () banked
 10919  00038C  6FB0               	movwf	actuatorTest@i_1594& (0+255),b
 10920  00038E                     l6698:
 10921                           
 10922                           ; BSR set to: 0
 10923  00038E  0E63               	movlw	99
 10924  000390  0100               	movlb	0	; () banked
 10925  000392  65B0               	cpfsgt	actuatorTest@i_1594& (0+255),b
 10926  000394  D001               	goto	l6702
 10927  000396  D00C               	goto	l6706
 10928  000398                     l6702:
 10929                           
 10930                           ; BSR set to: 0
 10931  000398  0E68               	movlw	104
 10932  00039A  0100               	movlb	0	; () banked
 10933  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10934  00039E  0EE4               	movlw	228
 10935  0003A0                     u7627:
 10936  0003A0  2EE8               	decfsz	wreg,f,c
 10937  0003A2  D7FE               	bra	u7627
 10938  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10939  0003A6  D7FC               	bra	u7627
 10940  0003A8  F000               	nop	
 10941  0003AA  0100               	movlb	0	; () banked
 10942  0003AC  2BB0               	incf	actuatorTest@i_1594& (0+255),f,b
 10943  0003AE  D7EF               	goto	l6698
 10944  0003B0                     l6706:
 10945                           
 10946                           ; BSR set to: 0
 10947  0003B0  0E00               	movlw	0
 10948  0003B2  0100               	movlb	0	; () banked
 10949  0003B4  6FB1               	movwf	actuatorTest@i_1595& (0+255),b
 10950  0003B6                     l6708:
 10951                           
 10952                           ; BSR set to: 0
 10953  0003B6  0E63               	movlw	99
 10954  0003B8  0100               	movlb	0	; () banked
 10955  0003BA  65B1               	cpfsgt	actuatorTest@i_1595& (0+255),b
 10956  0003BC  D001               	goto	l6712
 10957  0003BE  D00C               	goto	l6716
 10958  0003C0                     l6712:
 10959                           
 10960                           ; BSR set to: 0
 10961  0003C0  0E68               	movlw	104
 10962  0003C2  0100               	movlb	0	; () banked
 10963  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10964  0003C6  0EE4               	movlw	228
 10965  0003C8                     u7637:
 10966  0003C8  2EE8               	decfsz	wreg,f,c
 10967  0003CA  D7FE               	bra	u7637
 10968  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10969  0003CE  D7FC               	bra	u7637
 10970  0003D0  F000               	nop	
 10971  0003D2  0100               	movlb	0	; () banked
 10972  0003D4  2BB1               	incf	actuatorTest@i_1595& (0+255),f,b
 10973  0003D6  D7EF               	goto	l6708
 10974  0003D8                     l6716:
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;Test.c: 243: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10978  0003D8  0E80               	movlw	128
 10979  0003DA  EC34  F023         	call	_lcdInst
 10980  0003DE  0EC0               	movlw	192
 10981  0003E0  EC34  F023         	call	_lcdInst
 10982                           
 10983                           ;Test.c: 244: printf("LEFT -- 2s      ");
 10984  0003E4  0EFF               	movlw	low STR_95
 10985  0003E6  0100               	movlb	0	; () banked
 10986  0003E8  6F8E               	movwf	printf@f& (0+255),b
 10987  0003EA  0EFB               	movlw	high STR_95
 10988  0003EC  0100               	movlb	0	; () banked
 10989  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10990  0003F0  ECB8  F008         	call	_printf	;wreg free
 10991                           
 10992                           ;Test.c: 245: updateServoPosition(2000, 1);
 10993  0003F4  0E07               	movlw	7
 10994  0003F6  0100               	movlb	0	; () banked
 10995  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10996  0003FA  0ED0               	movlw	208
 10997  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10998  0003FE  0E00               	movlw	0
 10999  000400  0100               	movlb	0	; () banked
 11000  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11001  000404  0E01               	movlw	1
 11002  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11003  000408  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11004                           
 11005                           ;Test.c: 246: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11006  00040C  0E00               	movlw	0
 11007  00040E  0100               	movlb	0	; () banked
 11008  000410  6FB2               	movwf	actuatorTest@i_1597& (0+255),b
 11009  000412                     l6724:
 11010                           
 11011                           ; BSR set to: 0
 11012  000412  0E63               	movlw	99
 11013  000414  0100               	movlb	0	; () banked
 11014  000416  65B2               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11015  000418  D001               	goto	l6728
 11016  00041A  D00C               	goto	l6732
 11017  00041C                     l6728:
 11018                           
 11019                           ; BSR set to: 0
 11020  00041C  0E68               	movlw	104
 11021  00041E  0100               	movlb	0	; () banked
 11022  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11023  000422  0EE4               	movlw	228
 11024  000424                     u7647:
 11025  000424  2EE8               	decfsz	wreg,f,c
 11026  000426  D7FE               	bra	u7647
 11027  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11028  00042A  D7FC               	bra	u7647
 11029  00042C  F000               	nop	
 11030  00042E  0100               	movlb	0	; () banked
 11031  000430  2BB2               	incf	actuatorTest@i_1597& (0+255),f,b
 11032  000432  D7EF               	goto	l6724
 11033  000434                     l6732:
 11034                           
 11035                           ; BSR set to: 0
 11036  000434  0E00               	movlw	0
 11037  000436  0100               	movlb	0	; () banked
 11038  000438  6FB3               	movwf	actuatorTest@i_1598& (0+255),b
 11039  00043A                     l6734:
 11040                           
 11041                           ; BSR set to: 0
 11042  00043A  0E63               	movlw	99
 11043  00043C  0100               	movlb	0	; () banked
 11044  00043E  65B3               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11045  000440  D001               	goto	l6738
 11046  000442  D00C               	goto	l6742
 11047  000444                     l6738:
 11048                           
 11049                           ; BSR set to: 0
 11050  000444  0E68               	movlw	104
 11051  000446  0100               	movlb	0	; () banked
 11052  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11053  00044A  0EE4               	movlw	228
 11054  00044C                     u7657:
 11055  00044C  2EE8               	decfsz	wreg,f,c
 11056  00044E  D7FE               	bra	u7657
 11057  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11058  000452  D7FC               	bra	u7657
 11059  000454  F000               	nop	
 11060  000456  0100               	movlb	0	; () banked
 11061  000458  2BB3               	incf	actuatorTest@i_1598& (0+255),f,b
 11062  00045A  D7EF               	goto	l6734
 11063  00045C                     l6742:
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;Test.c: 248: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11067  00045C  0E80               	movlw	128
 11068  00045E  EC34  F023         	call	_lcdInst
 11069  000462  0EC0               	movlw	192
 11070  000464  EC34  F023         	call	_lcdInst
 11071                           
 11072                           ;Test.c: 249: printf("MID-LEFT -- 2s  ");
 11073  000468  0E54               	movlw	low STR_96
 11074  00046A  0100               	movlb	0	; () banked
 11075  00046C  6F8E               	movwf	printf@f& (0+255),b
 11076  00046E  0EFC               	movlw	high STR_96
 11077  000470  0100               	movlb	0	; () banked
 11078  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11079  000474  ECB8  F008         	call	_printf	;wreg free
 11080                           
 11081                           ;Test.c: 250: updateServoPosition(1700, 1);
 11082  000478  0E06               	movlw	6
 11083  00047A  0100               	movlb	0	; () banked
 11084  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11085  00047E  0EA4               	movlw	164
 11086  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11087  000482  0E00               	movlw	0
 11088  000484  0100               	movlb	0	; () banked
 11089  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11090  000488  0E01               	movlw	1
 11091  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11092  00048C  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11093                           
 11094                           ;Test.c: 251: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11095  000490  0E00               	movlw	0
 11096  000492  0100               	movlb	0	; () banked
 11097  000494  6FB4               	movwf	actuatorTest@i_1600& (0+255),b
 11098  000496                     l6750:
 11099                           
 11100                           ; BSR set to: 0
 11101  000496  0E63               	movlw	99
 11102  000498  0100               	movlb	0	; () banked
 11103  00049A  65B4               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11104  00049C  D001               	goto	l6754
 11105  00049E  D00C               	goto	l6758
 11106  0004A0                     l6754:
 11107                           
 11108                           ; BSR set to: 0
 11109  0004A0  0E68               	movlw	104
 11110  0004A2  0100               	movlb	0	; () banked
 11111  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11112  0004A6  0EE4               	movlw	228
 11113  0004A8                     u7667:
 11114  0004A8  2EE8               	decfsz	wreg,f,c
 11115  0004AA  D7FE               	bra	u7667
 11116  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11117  0004AE  D7FC               	bra	u7667
 11118  0004B0  F000               	nop	
 11119  0004B2  0100               	movlb	0	; () banked
 11120  0004B4  2BB4               	incf	actuatorTest@i_1600& (0+255),f,b
 11121  0004B6  D7EF               	goto	l6750
 11122  0004B8                     l6758:
 11123                           
 11124                           ; BSR set to: 0
 11125  0004B8  0E00               	movlw	0
 11126  0004BA  0100               	movlb	0	; () banked
 11127  0004BC  6FB5               	movwf	actuatorTest@i_1601& (0+255),b
 11128  0004BE                     l6760:
 11129                           
 11130                           ; BSR set to: 0
 11131  0004BE  0E63               	movlw	99
 11132  0004C0  0100               	movlb	0	; () banked
 11133  0004C2  65B5               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11134  0004C4  D001               	goto	l6764
 11135  0004C6  D00C               	goto	l6768
 11136  0004C8                     l6764:
 11137                           
 11138                           ; BSR set to: 0
 11139  0004C8  0E68               	movlw	104
 11140  0004CA  0100               	movlb	0	; () banked
 11141  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11142  0004CE  0EE4               	movlw	228
 11143  0004D0                     u7677:
 11144  0004D0  2EE8               	decfsz	wreg,f,c
 11145  0004D2  D7FE               	bra	u7677
 11146  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11147  0004D6  D7FC               	bra	u7677
 11148  0004D8  F000               	nop	
 11149  0004DA  0100               	movlb	0	; () banked
 11150  0004DC  2BB5               	incf	actuatorTest@i_1601& (0+255),f,b
 11151  0004DE  D7EF               	goto	l6760
 11152  0004E0                     l6768:
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;Test.c: 253: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11156  0004E0  0E80               	movlw	128
 11157  0004E2  EC34  F023         	call	_lcdInst
 11158  0004E6  0EC0               	movlw	192
 11159  0004E8  EC34  F023         	call	_lcdInst
 11160                           
 11161                           ;Test.c: 254: printf("MID-RIGHT -- 2s ");
 11162  0004EC  0E65               	movlw	low STR_97
 11163  0004EE  0100               	movlb	0	; () banked
 11164  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11165  0004F2  0EFC               	movlw	high STR_97
 11166  0004F4  0100               	movlb	0	; () banked
 11167  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11168  0004F8  ECB8  F008         	call	_printf	;wreg free
 11169                           
 11170                           ;Test.c: 255: updateServoPosition(750, 1);
 11171  0004FC  0E02               	movlw	2
 11172  0004FE  0100               	movlb	0	; () banked
 11173  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11174  000502  0EEE               	movlw	238
 11175  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11176  000506  0E00               	movlw	0
 11177  000508  0100               	movlb	0	; () banked
 11178  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11179  00050C  0E01               	movlw	1
 11180  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11181  000510  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11182                           
 11183                           ;Test.c: 256: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11184  000514  0E00               	movlw	0
 11185  000516  0100               	movlb	0	; () banked
 11186  000518  6FB6               	movwf	actuatorTest@i_1603& (0+255),b
 11187  00051A                     l6776:
 11188                           
 11189                           ; BSR set to: 0
 11190  00051A  0E63               	movlw	99
 11191  00051C  0100               	movlb	0	; () banked
 11192  00051E  65B6               	cpfsgt	actuatorTest@i_1603& (0+255),b
 11193  000520  D001               	goto	l6780
 11194  000522  D00C               	goto	l6784
 11195  000524                     l6780:
 11196                           
 11197                           ; BSR set to: 0
 11198  000524  0E68               	movlw	104
 11199  000526  0100               	movlb	0	; () banked
 11200  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11201  00052A  0EE4               	movlw	228
 11202  00052C                     u7687:
 11203  00052C  2EE8               	decfsz	wreg,f,c
 11204  00052E  D7FE               	bra	u7687
 11205  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11206  000532  D7FC               	bra	u7687
 11207  000534  F000               	nop	
 11208  000536  0100               	movlb	0	; () banked
 11209  000538  2BB6               	incf	actuatorTest@i_1603& (0+255),f,b
 11210  00053A  D7EF               	goto	l6776
 11211  00053C                     l6784:
 11212                           
 11213                           ; BSR set to: 0
 11214  00053C  0E00               	movlw	0
 11215  00053E  0100               	movlb	0	; () banked
 11216  000540  6FB7               	movwf	actuatorTest@i_1604& (0+255),b
 11217  000542                     l6786:
 11218                           
 11219                           ; BSR set to: 0
 11220  000542  0E63               	movlw	99
 11221  000544  0100               	movlb	0	; () banked
 11222  000546  65B7               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11223  000548  D001               	goto	l6790
 11224  00054A  D00C               	goto	l6794
 11225  00054C                     l6790:
 11226                           
 11227                           ; BSR set to: 0
 11228  00054C  0E68               	movlw	104
 11229  00054E  0100               	movlb	0	; () banked
 11230  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11231  000552  0EE4               	movlw	228
 11232  000554                     u7697:
 11233  000554  2EE8               	decfsz	wreg,f,c
 11234  000556  D7FE               	bra	u7697
 11235  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11236  00055A  D7FC               	bra	u7697
 11237  00055C  F000               	nop	
 11238  00055E  0100               	movlb	0	; () banked
 11239  000560  2BB7               	incf	actuatorTest@i_1604& (0+255),f,b
 11240  000562  D7EF               	goto	l6786
 11241  000564                     l6794:
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;Test.c: 258: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11245  000564  0E80               	movlw	128
 11246  000566  EC34  F023         	call	_lcdInst
 11247  00056A  0EC0               	movlw	192
 11248  00056C  EC34  F023         	call	_lcdInst
 11249                           
 11250                           ;Test.c: 259: printf("MID -- 2s       ");
 11251  000570  0EDD               	movlw	low STR_98
 11252  000572  0100               	movlb	0	; () banked
 11253  000574  6F8E               	movwf	printf@f& (0+255),b
 11254  000576  0EFB               	movlw	high STR_98
 11255  000578  0100               	movlb	0	; () banked
 11256  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11257  00057C  ECB8  F008         	call	_printf	;wreg free
 11258                           
 11259                           ;Test.c: 260: updateServoPosition(1200, 1);
 11260  000580  0E04               	movlw	4
 11261  000582  0100               	movlb	0	; () banked
 11262  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11263  000586  0EB0               	movlw	176
 11264  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11265  00058A  0E00               	movlw	0
 11266  00058C  0100               	movlb	0	; () banked
 11267  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11268  000590  0E01               	movlw	1
 11269  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11270  000594  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11271                           
 11272                           ;Test.c: 261: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11273  000598  0E00               	movlw	0
 11274  00059A  0100               	movlb	0	; () banked
 11275  00059C  6FB8               	movwf	actuatorTest@i_1606& (0+255),b
 11276  00059E                     l6802:
 11277                           
 11278                           ; BSR set to: 0
 11279  00059E  0E63               	movlw	99
 11280  0005A0  0100               	movlb	0	; () banked
 11281  0005A2  65B8               	cpfsgt	actuatorTest@i_1606& (0+255),b
 11282  0005A4  D001               	goto	l6806
 11283  0005A6  D00C               	goto	l6810
 11284  0005A8                     l6806:
 11285                           
 11286                           ; BSR set to: 0
 11287  0005A8  0E68               	movlw	104
 11288  0005AA  0100               	movlb	0	; () banked
 11289  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11290  0005AE  0EE4               	movlw	228
 11291  0005B0                     u7707:
 11292  0005B0  2EE8               	decfsz	wreg,f,c
 11293  0005B2  D7FE               	bra	u7707
 11294  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11295  0005B6  D7FC               	bra	u7707
 11296  0005B8  F000               	nop	
 11297  0005BA  0100               	movlb	0	; () banked
 11298  0005BC  2BB8               	incf	actuatorTest@i_1606& (0+255),f,b
 11299  0005BE  D7EF               	goto	l6802
 11300  0005C0                     l6810:
 11301                           
 11302                           ; BSR set to: 0
 11303  0005C0  0E00               	movlw	0
 11304  0005C2  0100               	movlb	0	; () banked
 11305  0005C4  6FB9               	movwf	actuatorTest@i_1607& (0+255),b
 11306  0005C6                     l6812:
 11307                           
 11308                           ; BSR set to: 0
 11309  0005C6  0E63               	movlw	99
 11310  0005C8  0100               	movlb	0	; () banked
 11311  0005CA  65B9               	cpfsgt	actuatorTest@i_1607& (0+255),b
 11312  0005CC  D001               	goto	l6816
 11313  0005CE  D00C               	goto	l1109
 11314  0005D0                     l6816:
 11315                           
 11316                           ; BSR set to: 0
 11317  0005D0  0E68               	movlw	104
 11318  0005D2  0100               	movlb	0	; () banked
 11319  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11320  0005D6  0EE4               	movlw	228
 11321  0005D8                     u7717:
 11322  0005D8  2EE8               	decfsz	wreg,f,c
 11323  0005DA  D7FE               	bra	u7717
 11324  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11325  0005DE  D7FC               	bra	u7717
 11326  0005E0  F000               	nop	
 11327  0005E2  0100               	movlb	0	; () banked
 11328  0005E4  2BB9               	incf	actuatorTest@i_1607& (0+255),f,b
 11329  0005E6  D7EF               	goto	l6812
 11330  0005E8                     l1109:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;Test.c: 262: TMR1ON = 0;
 11334  0005E8  90CD               	bcf	4045,0,c	;volatile
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;Test.c: 269: printf("TST: TILT SERVO");
 11338  0005EA  0E40               	movlw	low STR_99
 11339  0005EC  0100               	movlb	0	; () banked
 11340  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11341  0005F0  0EFE               	movlw	high STR_99
 11342  0005F2  0100               	movlb	0	; () banked
 11343  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11344  0005F6  ECB8  F008         	call	_printf	;wreg free
 11345                           
 11346                           ;Test.c: 270: lcdInst(0b11000000);;
 11347  0005FA  0EC0               	movlw	192
 11348  0005FC  EC34  F023         	call	_lcdInst
 11349                           
 11350                           ;Test.c: 271: printf("LEVEL -- 2s     ");
 11351  000600  0E10               	movlw	low STR_100
 11352  000602  0100               	movlb	0	; () banked
 11353  000604  6F8E               	movwf	printf@f& (0+255),b
 11354  000606  0EFC               	movlw	high STR_100
 11355  000608  0100               	movlb	0	; () banked
 11356  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11357  00060C  ECB8  F008         	call	_printf	;wreg free
 11358                           
 11359                           ;Test.c: 272: updateServoPosition(1190, 3);
 11360  000610  0E04               	movlw	4
 11361  000612  0100               	movlb	0	; () banked
 11362  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11363  000616  0EA6               	movlw	166
 11364  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11365  00061A  0E00               	movlw	0
 11366  00061C  0100               	movlb	0	; () banked
 11367  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11368  000620  0E03               	movlw	3
 11369  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11370  000624  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11371                           
 11372                           ;Test.c: 273: TMR3ON = 1;
 11373  000628  80B1               	bsf	4017,0,c	;volatile
 11374                           
 11375                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11376  00062A  0E00               	movlw	0
 11377  00062C  0100               	movlb	0	; () banked
 11378  00062E  6FBA               	movwf	actuatorTest@i_1610& (0+255),b
 11379  000630                     l6830:
 11380                           
 11381                           ; BSR set to: 0
 11382  000630  0E63               	movlw	99
 11383  000632  0100               	movlb	0	; () banked
 11384  000634  65BA               	cpfsgt	actuatorTest@i_1610& (0+255),b
 11385  000636  D001               	goto	l6834
 11386  000638  D00C               	goto	l6838
 11387  00063A                     l6834:
 11388                           
 11389                           ; BSR set to: 0
 11390  00063A  0E68               	movlw	104
 11391  00063C  0100               	movlb	0	; () banked
 11392  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11393  000640  0EE4               	movlw	228
 11394  000642                     u7727:
 11395  000642  2EE8               	decfsz	wreg,f,c
 11396  000644  D7FE               	bra	u7727
 11397  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11398  000648  D7FC               	bra	u7727
 11399  00064A  F000               	nop	
 11400  00064C  0100               	movlb	0	; () banked
 11401  00064E  2BBA               	incf	actuatorTest@i_1610& (0+255),f,b
 11402  000650  D7EF               	goto	l6830
 11403  000652                     l6838:
 11404                           
 11405                           ; BSR set to: 0
 11406  000652  0E00               	movlw	0
 11407  000654  0100               	movlb	0	; () banked
 11408  000656  6FBB               	movwf	actuatorTest@i_1611& (0+255),b
 11409  000658                     l6840:
 11410                           
 11411                           ; BSR set to: 0
 11412  000658  0E63               	movlw	99
 11413  00065A  0100               	movlb	0	; () banked
 11414  00065C  65BB               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11415  00065E  D001               	goto	l6844
 11416  000660  D00C               	goto	l6848
 11417  000662                     l6844:
 11418                           
 11419                           ; BSR set to: 0
 11420  000662  0E68               	movlw	104
 11421  000664  0100               	movlb	0	; () banked
 11422  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11423  000668  0EE4               	movlw	228
 11424  00066A                     u7737:
 11425  00066A  2EE8               	decfsz	wreg,f,c
 11426  00066C  D7FE               	bra	u7737
 11427  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11428  000670  D7FC               	bra	u7737
 11429  000672  F000               	nop	
 11430  000674  0100               	movlb	0	; () banked
 11431  000676  2BBB               	incf	actuatorTest@i_1611& (0+255),f,b
 11432  000678  D7EF               	goto	l6840
 11433  00067A                     l6848:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11437  00067A  0E80               	movlw	128
 11438  00067C  EC34  F023         	call	_lcdInst
 11439  000680  0EC0               	movlw	192
 11440  000682  EC34  F023         	call	_lcdInst
 11441                           
 11442                           ;Test.c: 277: printf("DROP -- 2s      ");
 11443  000686  0EEE               	movlw	low STR_101
 11444  000688  0100               	movlb	0	; () banked
 11445  00068A  6F8E               	movwf	printf@f& (0+255),b
 11446  00068C  0EFB               	movlw	high STR_101
 11447  00068E  0100               	movlb	0	; () banked
 11448  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11449  000692  ECB8  F008         	call	_printf	;wreg free
 11450                           
 11451                           ;Test.c: 278: updateServoPosition(1350, 3);
 11452  000696  0E05               	movlw	5
 11453  000698  0100               	movlb	0	; () banked
 11454  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11455  00069C  0E46               	movlw	70
 11456  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11457  0006A0  0E00               	movlw	0
 11458  0006A2  0100               	movlb	0	; () banked
 11459  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11460  0006A6  0E03               	movlw	3
 11461  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11462  0006AA  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11463                           
 11464                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11465  0006AE  0E00               	movlw	0
 11466  0006B0  0100               	movlb	0	; () banked
 11467  0006B2  6FBC               	movwf	actuatorTest@i_1613& (0+255),b
 11468  0006B4                     l6856:
 11469                           
 11470                           ; BSR set to: 0
 11471  0006B4  0E63               	movlw	99
 11472  0006B6  0100               	movlb	0	; () banked
 11473  0006B8  65BC               	cpfsgt	actuatorTest@i_1613& (0+255),b
 11474  0006BA  D001               	goto	l6860
 11475  0006BC  D00C               	goto	l6864
 11476  0006BE                     l6860:
 11477                           
 11478                           ; BSR set to: 0
 11479  0006BE  0E68               	movlw	104
 11480  0006C0  0100               	movlb	0	; () banked
 11481  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11482  0006C4  0EE4               	movlw	228
 11483  0006C6                     u7747:
 11484  0006C6  2EE8               	decfsz	wreg,f,c
 11485  0006C8  D7FE               	bra	u7747
 11486  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11487  0006CC  D7FC               	bra	u7747
 11488  0006CE  F000               	nop	
 11489  0006D0  0100               	movlb	0	; () banked
 11490  0006D2  2BBC               	incf	actuatorTest@i_1613& (0+255),f,b
 11491  0006D4  D7EF               	goto	l6856
 11492  0006D6                     l6864:
 11493                           
 11494                           ; BSR set to: 0
 11495  0006D6  0E00               	movlw	0
 11496  0006D8  0100               	movlb	0	; () banked
 11497  0006DA  6FBD               	movwf	actuatorTest@i_1614& (0+255),b
 11498  0006DC                     l6866:
 11499                           
 11500                           ; BSR set to: 0
 11501  0006DC  0E63               	movlw	99
 11502  0006DE  0100               	movlb	0	; () banked
 11503  0006E0  65BD               	cpfsgt	actuatorTest@i_1614& (0+255),b
 11504  0006E2  D001               	goto	l6870
 11505  0006E4  D00C               	goto	l6874
 11506  0006E6                     l6870:
 11507                           
 11508                           ; BSR set to: 0
 11509  0006E6  0E68               	movlw	104
 11510  0006E8  0100               	movlb	0	; () banked
 11511  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11512  0006EC  0EE4               	movlw	228
 11513  0006EE                     u7757:
 11514  0006EE  2EE8               	decfsz	wreg,f,c
 11515  0006F0  D7FE               	bra	u7757
 11516  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11517  0006F4  D7FC               	bra	u7757
 11518  0006F6  F000               	nop	
 11519  0006F8  0100               	movlb	0	; () banked
 11520  0006FA  2BBD               	incf	actuatorTest@i_1614& (0+255),f,b
 11521  0006FC  D7EF               	goto	l6866
 11522  0006FE                     l6874:
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11526  0006FE  0E80               	movlw	128
 11527  000700  EC34  F023         	call	_lcdInst
 11528  000704  0EC0               	movlw	192
 11529  000706  EC34  F023         	call	_lcdInst
 11530                           
 11531                           ;Test.c: 282: printf("LEVEL -- 2s     ");
 11532  00070A  0E10               	movlw	low STR_100
 11533  00070C  0100               	movlb	0	; () banked
 11534  00070E  6F8E               	movwf	printf@f& (0+255),b
 11535  000710  0EFC               	movlw	high STR_100
 11536  000712  0100               	movlb	0	; () banked
 11537  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 11538  000716  ECB8  F008         	call	_printf	;wreg free
 11539                           
 11540                           ;Test.c: 283: updateServoPosition(1190, 3);
 11541  00071A  0E04               	movlw	4
 11542  00071C  0100               	movlb	0	; () banked
 11543  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11544  000720  0EA6               	movlw	166
 11545  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11546  000724  0E00               	movlw	0
 11547  000726  0100               	movlb	0	; () banked
 11548  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11549  00072A  0E03               	movlw	3
 11550  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11551  00072E  ECBB  F01D         	call	_updateServoPosition	;wreg free
 11552                           
 11553                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11554  000732  0E00               	movlw	0
 11555  000734  0100               	movlb	0	; () banked
 11556  000736  6FBE               	movwf	actuatorTest@i_1616& (0+255),b
 11557  000738                     l6882:
 11558                           
 11559                           ; BSR set to: 0
 11560  000738  0E63               	movlw	99
 11561  00073A  0100               	movlb	0	; () banked
 11562  00073C  65BE               	cpfsgt	actuatorTest@i_1616& (0+255),b
 11563  00073E  D001               	goto	l6886
 11564  000740  D00C               	goto	l6890
 11565  000742                     l6886:
 11566                           
 11567                           ; BSR set to: 0
 11568  000742  0E68               	movlw	104
 11569  000744  0100               	movlb	0	; () banked
 11570  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 11571  000748  0EE4               	movlw	228
 11572  00074A                     u7767:
 11573  00074A  2EE8               	decfsz	wreg,f,c
 11574  00074C  D7FE               	bra	u7767
 11575  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11576  000750  D7FC               	bra	u7767
 11577  000752  F000               	nop	
 11578  000754  0100               	movlb	0	; () banked
 11579  000756  2BBE               	incf	actuatorTest@i_1616& (0+255),f,b
 11580  000758  D7EF               	goto	l6882
 11581  00075A                     l6890:
 11582                           
 11583                           ; BSR set to: 0
 11584  00075A  0E00               	movlw	0
 11585  00075C  0100               	movlb	0	; () banked
 11586  00075E  6FBF               	movwf	actuatorTest@i_1617& (0+255),b
 11587  000760                     l6892:
 11588                           
 11589                           ; BSR set to: 0
 11590  000760  0E63               	movlw	99
 11591  000762  0100               	movlb	0	; () banked
 11592  000764  65BF               	cpfsgt	actuatorTest@i_1617& (0+255),b
 11593  000766  D001               	goto	l6896
 11594  000768  D00C               	goto	l1121
 11595  00076A                     l6896:
 11596                           
 11597                           ; BSR set to: 0
 11598  00076A  0E68               	movlw	104
 11599  00076C  0100               	movlb	0	; () banked
 11600  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11601  000770  0EE4               	movlw	228
 11602  000772                     u7777:
 11603  000772  2EE8               	decfsz	wreg,f,c
 11604  000774  D7FE               	bra	u7777
 11605  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11606  000778  D7FC               	bra	u7777
 11607  00077A  F000               	nop	
 11608  00077C  0100               	movlb	0	; () banked
 11609  00077E  2BBF               	incf	actuatorTest@i_1617& (0+255),f,b
 11610  000780  D7EF               	goto	l6892
 11611  000782                     l1121:
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;Test.c: 285: TMR3ON = 0;
 11615  000782  90B1               	bcf	4017,0,c	;volatile
 11616                           
 11617                           ;Test.c: 286: (INTCONbits.GIE = 0);
 11618  000784  9EF2               	bcf	intcon,7,c	;volatile
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;Test.c: 291: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11622  000786  0E01               	movlw	1
 11623  000788  EC34  F023         	call	_lcdInst
 11624  00078C  0E68               	movlw	104
 11625  00078E  0100               	movlb	0	; () banked
 11626  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 11627  000792  0EE4               	movlw	228
 11628  000794                     u7787:
 11629  000794  2EE8               	decfsz	wreg,f,c
 11630  000796  D7FE               	bra	u7787
 11631  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11632  00079A  D7FC               	bra	u7787
 11633  00079C  F000               	nop	
 11634  00079E  0E80               	movlw	128
 11635  0007A0  EC34  F023         	call	_lcdInst
 11636                           
 11637                           ;Test.c: 292: printf("TST: CAM SERVO");
 11638  0007A4  0E9C               	movlw	low STR_103
 11639  0007A6  0100               	movlb	0	; () banked
 11640  0007A8  6F8E               	movwf	printf@f& (0+255),b
 11641  0007AA  0EFE               	movlw	high STR_103
 11642  0007AC  0100               	movlb	0	; () banked
 11643  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11644  0007B0  ECB8  F008         	call	_printf	;wreg free
 11645                           
 11646                           ;Test.c: 293: lcdInst(0b11000000);;
 11647  0007B4  0EC0               	movlw	192
 11648  0007B6  EC34  F023         	call	_lcdInst
 11649                           
 11650                           ;Test.c: 294: printf("CAM UP  |RC0=1");
 11651  0007BA  0E7E               	movlw	low STR_104
 11652  0007BC  0100               	movlb	0	; () banked
 11653  0007BE  6F8E               	movwf	printf@f& (0+255),b
 11654  0007C0  0EFE               	movlw	high STR_104
 11655  0007C2  0100               	movlb	0	; () banked
 11656  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11657  0007C6  ECB8  F008         	call	_printf	;wreg free
 11658                           
 11659                           ;Test.c: 295: LATCbits.LATC0 = 1;
 11660  0007CA  808B               	bsf	3979,0,c	;volatile
 11661                           
 11662                           ;Test.c: 296: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11663  0007CC  0E00               	movlw	0
 11664  0007CE  0100               	movlb	0	; () banked
 11665  0007D0  6FC0               	movwf	actuatorTest@i_1620& (0+255),b
 11666  0007D2                     l6916:
 11667                           
 11668                           ; BSR set to: 0
 11669  0007D2  0E63               	movlw	99
 11670  0007D4  0100               	movlb	0	; () banked
 11671  0007D6  65C0               	cpfsgt	actuatorTest@i_1620& (0+255),b
 11672  0007D8  D001               	goto	l6920
 11673  0007DA  D00C               	goto	l6924
 11674  0007DC                     l6920:
 11675                           
 11676                           ; BSR set to: 0
 11677  0007DC  0E68               	movlw	104
 11678  0007DE  0100               	movlb	0	; () banked
 11679  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 11680  0007E2  0EE4               	movlw	228
 11681  0007E4                     u7797:
 11682  0007E4  2EE8               	decfsz	wreg,f,c
 11683  0007E6  D7FE               	bra	u7797
 11684  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11685  0007EA  D7FC               	bra	u7797
 11686  0007EC  F000               	nop	
 11687  0007EE  0100               	movlb	0	; () banked
 11688  0007F0  2BC0               	incf	actuatorTest@i_1620& (0+255),f,b
 11689  0007F2  D7EF               	goto	l6916
 11690  0007F4                     l6924:
 11691                           
 11692                           ; BSR set to: 0
 11693  0007F4  0E00               	movlw	0
 11694  0007F6  0100               	movlb	0	; () banked
 11695  0007F8  6FC1               	movwf	actuatorTest@i_1621& (0+255),b
 11696  0007FA                     l6926:
 11697                           
 11698                           ; BSR set to: 0
 11699  0007FA  0E63               	movlw	99
 11700  0007FC  0100               	movlb	0	; () banked
 11701  0007FE  65C1               	cpfsgt	actuatorTest@i_1621& (0+255),b
 11702  000800  D001               	goto	l6930
 11703  000802  D00C               	goto	l6934
 11704  000804                     l6930:
 11705                           
 11706                           ; BSR set to: 0
 11707  000804  0E68               	movlw	104
 11708  000806  0100               	movlb	0	; () banked
 11709  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 11710  00080A  0EE4               	movlw	228
 11711  00080C                     u7807:
 11712  00080C  2EE8               	decfsz	wreg,f,c
 11713  00080E  D7FE               	bra	u7807
 11714  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11715  000812  D7FC               	bra	u7807
 11716  000814  F000               	nop	
 11717  000816  0100               	movlb	0	; () banked
 11718  000818  2BC1               	incf	actuatorTest@i_1621& (0+255),f,b
 11719  00081A  D7EF               	goto	l6926
 11720  00081C                     l6934:
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11724  00081C  0E80               	movlw	128
 11725  00081E  EC34  F023         	call	_lcdInst
 11726  000822  0EC0               	movlw	192
 11727  000824  EC34  F023         	call	_lcdInst
 11728                           
 11729                           ;Test.c: 298: printf("CAM DWN |RC0=0");
 11730  000828  0E6F               	movlw	low STR_105
 11731  00082A  0100               	movlb	0	; () banked
 11732  00082C  6F8E               	movwf	printf@f& (0+255),b
 11733  00082E  0EFE               	movlw	high STR_105
 11734  000830  0100               	movlb	0	; () banked
 11735  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11736  000834  ECB8  F008         	call	_printf	;wreg free
 11737                           
 11738                           ;Test.c: 301: for(i=0;i<10000;i++)
 11739  000838  0E00               	movlw	0
 11740  00083A  0100               	movlb	0	; () banked
 11741  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11742  00083E  0E00               	movlw	0
 11743  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 11744  000842                     l6940:
 11745                           
 11746                           ; BSR set to: 0
 11747  000842  0100               	movlb	0	; () banked
 11748  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11749  000846  D008               	goto	l1126
 11750  000848  0E10               	movlw	16
 11751  00084A  0100               	movlb	0	; () banked
 11752  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11753  00084E  0E27               	movlw	39
 11754  000850  0100               	movlb	0	; () banked
 11755  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 11756  000854  B0D8               	btfsc	status,0,c
 11757  000856  D00D               	goto	l6950
 11758  000858                     l1126:
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;Test.c: 302: {
 11762                           ;Test.c: 303: LATCbits.LATC0 = 1;
 11763  000858  808B               	bsf	3979,0,c	;volatile
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;Test.c: 304: _delay((unsigned long)((10)*(32000000/4000000.0)));
 11767  00085A  0E1A               	movlw	26
 11768  00085C                     u7817:
 11769  00085C  2EE8               	decfsz	wreg,f,c
 11770  00085E  D7FE               	bra	u7817
 11771  000860  D000               	nop2	
 11772                           
 11773                           ;Test.c: 305: LATCbits.LATC0 = 0;
 11774  000862  908B               	bcf	3979,0,c	;volatile
 11775                           
 11776                           ;Test.c: 306: _delay((unsigned long)((90)*(32000000/4000000.0)));
 11777  000864  0EF0               	movlw	240
 11778  000866                     u7827:
 11779  000866  2EE8               	decfsz	wreg,f,c
 11780  000868  D7FE               	bra	u7827
 11781  00086A  0100               	movlb	0	; () banked
 11782  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11783  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11784  000870  D7E8               	goto	l6940
 11785  000872                     l6950:
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;Test.c: 307: }
 11789                           ;Test.c: 309: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11790  000872  0E00               	movlw	0
 11791  000874  0100               	movlb	0	; () banked
 11792  000876  6FC2               	movwf	actuatorTest@i_1623& (0+255),b
 11793  000878                     l6952:
 11794                           
 11795                           ; BSR set to: 0
 11796  000878  0E63               	movlw	99
 11797  00087A  0100               	movlb	0	; () banked
 11798  00087C  65C2               	cpfsgt	actuatorTest@i_1623& (0+255),b
 11799  00087E  D001               	goto	l6956
 11800  000880  D00C               	goto	l6960
 11801  000882                     l6956:
 11802                           
 11803                           ; BSR set to: 0
 11804  000882  0E68               	movlw	104
 11805  000884  0100               	movlb	0	; () banked
 11806  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 11807  000888  0EE4               	movlw	228
 11808  00088A                     u7837:
 11809  00088A  2EE8               	decfsz	wreg,f,c
 11810  00088C  D7FE               	bra	u7837
 11811  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11812  000890  D7FC               	bra	u7837
 11813  000892  F000               	nop	
 11814  000894  0100               	movlb	0	; () banked
 11815  000896  2BC2               	incf	actuatorTest@i_1623& (0+255),f,b
 11816  000898  D7EF               	goto	l6952
 11817  00089A                     l6960:
 11818                           
 11819                           ; BSR set to: 0
 11820  00089A  0E00               	movlw	0
 11821  00089C  0100               	movlb	0	; () banked
 11822  00089E  6FC3               	movwf	actuatorTest@i_1624& (0+255),b
 11823  0008A0                     l6962:
 11824                           
 11825                           ; BSR set to: 0
 11826  0008A0  0E63               	movlw	99
 11827  0008A2  0100               	movlb	0	; () banked
 11828  0008A4  65C3               	cpfsgt	actuatorTest@i_1624& (0+255),b
 11829  0008A6  D001               	goto	l6966
 11830  0008A8  D00C               	goto	l6970
 11831  0008AA                     l6966:
 11832                           
 11833                           ; BSR set to: 0
 11834  0008AA  0E68               	movlw	104
 11835  0008AC  0100               	movlb	0	; () banked
 11836  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11837  0008B0  0EE4               	movlw	228
 11838  0008B2                     u7847:
 11839  0008B2  2EE8               	decfsz	wreg,f,c
 11840  0008B4  D7FE               	bra	u7847
 11841  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11842  0008B8  D7FC               	bra	u7847
 11843  0008BA  F000               	nop	
 11844  0008BC  0100               	movlb	0	; () banked
 11845  0008BE  2BC3               	incf	actuatorTest@i_1624& (0+255),f,b
 11846  0008C0  D7EF               	goto	l6962
 11847  0008C2                     l6970:
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;Test.c: 310: machine_state = Testing_state;
 11851  0008C2  0E03               	movlw	3
 11852  0008C4  0100               	movlb	0	; () banked
 11853  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 11854                           
 11855                           ; BSR set to: 0
 11856  0008C8  0012               	return		;funcret
 11857  0008CA                     __end_of_actuatorTest:
 11858                           	opt stack 0
 11859                           tblptru	equ	0xFF8
 11860                           tblptrh	equ	0xFF7
 11861                           tblptrl	equ	0xFF6
 11862                           tablat	equ	0xFF5
 11863                           prodh	equ	0xFF4
 11864                           prodl	equ	0xFF3
 11865                           intcon	equ	0xFF2
 11866                           intcon2	equ	0xFF1
 11867                           intcon3	equ	0xFF0
 11868                           postinc0	equ	0xFEE
 11869                           wreg	equ	0xFE8
 11870                           postdec1	equ	0xFE5
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function _ToggleTestA5 *****************
 11880 ;; Defined at:
 11881 ;;		line 454 in file "Test.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;		None
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;  on              2   44[BANK0 ] int 
 11886 ;; Return value:  Size  Location     Type
 11887 ;;                  1    wreg      void 
 11888 ;; Registers used:
 11889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;Total ram usage:        3 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:   10
 11902 ;; This function calls:
 11903 ;;		_lcdInst
 11904 ;;		_printf
 11905 ;; This function is called by:
 11906 ;;		_Test
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           	psect	text41
 11911  00396C                     __ptext41:
 11912                           	opt stack 0
 11913  00396C                     _ToggleTestA5:
 11914                           	opt stack 19
 11915                           
 11916                           ;Test.c: 455: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;incstack = 0
 11920  00396C  0E01               	movlw	1
 11921  00396E  EC34  F023         	call	_lcdInst
 11922  003972  0E68               	movlw	104
 11923  003974  0100               	movlb	0	; () banked
 11924  003976  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11925  003978  0EE4               	movlw	228
 11926  00397A                     u7857:
 11927  00397A  2EE8               	decfsz	wreg,f,c
 11928  00397C  D7FE               	bra	u7857
 11929  00397E  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11930  003980  D7FC               	bra	u7857
 11931  003982  F000               	nop	
 11932  003984  0E80               	movlw	128
 11933  003986  EC34  F023         	call	_lcdInst
 11934                           
 11935                           ;Test.c: 456: printf("D WILL RETURN   ");
 11936  00398A  0E43               	movlw	low STR_111
 11937  00398C  0100               	movlb	0	; () banked
 11938  00398E  6F8E               	movwf	printf@f& (0+255),b
 11939  003990  0EFC               	movlw	high STR_111
 11940  003992  0100               	movlb	0	; () banked
 11941  003994  6F8F               	movwf	(printf@f+1)& (0+255),b
 11942  003996  ECB8  F008         	call	_printf	;wreg free
 11943                           
 11944                           ;Test.c: 457: lcdInst(0b11000000);;
 11945  00399A  0EC0               	movlw	192
 11946  00399C  EC34  F023         	call	_lcdInst
 11947                           
 11948                           ;Test.c: 458: printf("ELSE TOGGLES RA5");
 11949  0039A0  0E76               	movlw	low STR_112
 11950  0039A2  0100               	movlb	0	; () banked
 11951  0039A4  6F8E               	movwf	printf@f& (0+255),b
 11952  0039A6  0EFC               	movlw	high STR_112
 11953  0039A8  0100               	movlb	0	; () banked
 11954  0039AA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11955  0039AC  ECB8  F008         	call	_printf	;wreg free
 11956                           
 11957                           ;Test.c: 459: int on = 0;
 11958  0039B0  0E00               	movlw	0
 11959  0039B2  0100               	movlb	0	; () banked
 11960  0039B4  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11961  0039B6  0E00               	movlw	0
 11962  0039B8  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11963  0039BA                     l1191:
 11964  0039BA  A281               	btfss	3969,1,c	;volatile
 11965  0039BC  D7FE               	goto	l1191
 11966                           
 11967                           ;Test.c: 464: }
 11968                           ;Test.c: 465: if(PORTB >> 4 == 0b1111){
 11969  0039BE  3881               	swapf	3969,w,c	;volatile
 11970  0039C0  0B0F               	andlw	15
 11971  0039C2  0A0F               	xorlw	15
 11972  0039C4  B4D8               	btfsc	status,2,c
 11973  0039C6  0012               	return	
 11974                           
 11975                           ;Test.c: 468: else{
 11976                           ;Test.c: 469: if(on == 0){
 11977                           
 11978                           ;Test.c: 467: }
 11979                           
 11980                           ;Test.c: 466: break;
 11981  0039C8  0100               	movlb	0	; () banked
 11982  0039CA  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11983  0039CC  0100               	movlb	0	; () banked
 11984  0039CE  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11985  0039D0  A4D8               	btfss	status,2,c
 11986  0039D2  D007               	goto	l7028
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;Test.c: 470: on = 1;
 11990  0039D4  0E00               	movlw	0
 11991  0039D6  0100               	movlb	0	; () banked
 11992  0039D8  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11993  0039DA  0E01               	movlw	1
 11994  0039DC  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;Test.c: 471: LATAbits.LATA5 = 1;
 11998  0039DE  8A89               	bsf	3977,5,c	;volatile
 11999                           
 12000                           ;Test.c: 472: }
 12001  0039E0  D006               	goto	l1199
 12002  0039E2                     l7028:
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;Test.c: 473: else{
 12006                           ;Test.c: 474: on = 0;
 12007  0039E2  0E00               	movlw	0
 12008  0039E4  0100               	movlb	0	; () banked
 12009  0039E6  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 12010  0039E8  0E00               	movlw	0
 12011  0039EA  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 12012                           
 12013                           ; BSR set to: 0
 12014                           ;Test.c: 475: LATAbits.LATA5 = 0;
 12015  0039EC  9A89               	bcf	3977,5,c	;volatile
 12016  0039EE                     l1199:
 12017  0039EE  A281               	btfss	3969,1,c	;volatile
 12018  0039F0  D7E4               	goto	l1191
 12019  0039F2  D7FD               	goto	l1199
 12020  0039F4                     __end_of_ToggleTestA5:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           intcon2	equ	0xFF1
 12030                           intcon3	equ	0xFF0
 12031                           postinc0	equ	0xFEE
 12032                           wreg	equ	0xFE8
 12033                           postdec1	equ	0xFE5
 12034                           fsr1l	equ	0xFE1
 12035                           indf2	equ	0xFDF
 12036                           postinc2	equ	0xFDE
 12037                           postdec2	equ	0xFDD
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _SolenoidTestA5 *****************
 12043 ;; Defined at:
 12044 ;;		line 430 in file "Test.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;		None
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  i               1   47[BANK0 ] unsigned char 
 12049 ;;  i               1   48[BANK0 ] unsigned char 
 12050 ;;  i               2   45[BANK0 ] int 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;                  1    wreg      void 
 12053 ;; Registers used:
 12054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12055 ;; Tracked objects:
 12056 ;;		On entry : 0/0
 12057 ;;		On exit  : 0/0
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;Total ram usage:        6 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:   10
 12067 ;; This function calls:
 12068 ;;		_lcdInst
 12069 ;;		_printf
 12070 ;; This function is called by:
 12071 ;;		_Test
 12072 ;; This function uses a non-reentrant model
 12073 ;;
 12074                           
 12075                           	psect	text42
 12076  003236                     __ptext42:
 12077                           	opt stack 0
 12078  003236                     _SolenoidTestA5:
 12079                           	opt stack 19
 12080  003236                     
 12081                           ;Test.c: 432: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12082  003236  0E01               	movlw	1
 12083  003238  EC34  F023         	call	_lcdInst
 12084  00323C  0E68               	movlw	104
 12085  00323E  0100               	movlb	0	; () banked
 12086  003240  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12087  003242  0EE4               	movlw	228
 12088  003244                     u7867:
 12089  003244  2EE8               	decfsz	wreg,f,c
 12090  003246  D7FE               	bra	u7867
 12091  003248  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12092  00324A  D7FC               	bra	u7867
 12093  00324C  F000               	nop	
 12094  00324E  0E80               	movlw	128
 12095  003250  EC34  F023         	call	_lcdInst
 12096                           
 12097                           ;Test.c: 433: printf("SOLENOID TST");
 12098  003254  0E48               	movlw	low STR_109
 12099  003256  0100               	movlb	0	; () banked
 12100  003258  6F8E               	movwf	printf@f& (0+255),b
 12101  00325A  0EFF               	movlw	high STR_109
 12102  00325C  0100               	movlb	0	; () banked
 12103  00325E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12104  003260  ECB8  F008         	call	_printf	;wreg free
 12105                           
 12106                           ;Test.c: 434: lcdInst(0b11000000);;
 12107  003264  0EC0               	movlw	192
 12108  003266  EC34  F023         	call	_lcdInst
 12109  00326A                     l1176:
 12110  00326A  A281               	btfss	3969,1,c	;volatile
 12111  00326C  D7FE               	goto	l1176
 12112                           
 12113                           ;Test.c: 439: }
 12114                           ;Test.c: 441: for(int i = 0; i < 3; i++){
 12115  00326E  0E00               	movlw	0
 12116  003270  0100               	movlb	0	; () banked
 12117  003272  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 12118  003274  0E00               	movlw	0
 12119  003276  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 12120  003278                     l7044:
 12121                           
 12122                           ; BSR set to: 0
 12123  003278  0100               	movlb	0	; () banked
 12124  00327A  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 12125  00327C  D008               	goto	l7048
 12126  00327E  0100               	movlb	0	; () banked
 12127  003280  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 12128  003282  E12D               	bnz	l7064
 12129  003284  0E03               	movlw	3
 12130  003286  0100               	movlb	0	; () banked
 12131  003288  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 12132  00328A  B0D8               	btfsc	status,0,c
 12133  00328C  D028               	goto	l7064
 12134  00328E                     l7048:
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;Test.c: 442: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12138  00328E  0E00               	movlw	0
 12139  003290  0100               	movlb	0	; () banked
 12140  003292  6FAF               	movwf	SolenoidTestA5@i_1637& (0+255),b
 12141  003294                     l7050:
 12142                           
 12143                           ; BSR set to: 0
 12144  003294  0E63               	movlw	99
 12145  003296  0100               	movlb	0	; () banked
 12146  003298  65AF               	cpfsgt	SolenoidTestA5@i_1637& (0+255),b
 12147  00329A  D001               	goto	l7054
 12148  00329C  D00C               	goto	l1182
 12149  00329E                     l7054:
 12150                           
 12151                           ; BSR set to: 0
 12152  00329E  0E68               	movlw	104
 12153  0032A0  0100               	movlb	0	; () banked
 12154  0032A2  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12155  0032A4  0EE4               	movlw	228
 12156  0032A6                     u7877:
 12157  0032A6  2EE8               	decfsz	wreg,f,c
 12158  0032A8  D7FE               	bra	u7877
 12159  0032AA  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12160  0032AC  D7FC               	bra	u7877
 12161  0032AE  F000               	nop	
 12162  0032B0  0100               	movlb	0	; () banked
 12163  0032B2  2BAF               	incf	SolenoidTestA5@i_1637& (0+255),f,b
 12164  0032B4  D7EF               	goto	l7050
 12165  0032B6                     l1182:
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;Test.c: 443: LATAbits.LATA5 = 1;
 12169  0032B6  8A89               	bsf	3977,5,c	;volatile
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;Test.c: 444: _delay((unsigned long)((150)*(32000000/4000.0)));
 12173  0032B8  0E07               	movlw	7
 12174  0032BA  0100               	movlb	0	; () banked
 12175  0032BC  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12176  0032BE  0E17               	movlw	23
 12177  0032C0  0100               	movlb	0	; () banked
 12178  0032C2  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12179  0032C4  0E6A               	movlw	106
 12180  0032C6                     u7887:
 12181  0032C6  2EE8               	decfsz	wreg,f,c
 12182  0032C8  D7FE               	bra	u7887
 12183  0032CA  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12184  0032CC  D7FC               	bra	u7887
 12185  0032CE  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12186  0032D0  D7FA               	bra	u7887
 12187  0032D2  F000               	nop	
 12188                           
 12189                           ;Test.c: 445: LATAbits.LATA5 = 0;
 12190  0032D4  9A89               	bcf	3977,5,c	;volatile
 12191  0032D6  0100               	movlb	0	; () banked
 12192  0032D8  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12193  0032DA  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12194  0032DC  D7CD               	goto	l7044
 12195  0032DE                     l7064:
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;Test.c: 446: }
 12199                           ;Test.c: 448: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12200  0032DE  0E01               	movlw	1
 12201  0032E0  EC34  F023         	call	_lcdInst
 12202  0032E4  0E68               	movlw	104
 12203  0032E6  0100               	movlb	0	; () banked
 12204  0032E8  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12205  0032EA  0EE4               	movlw	228
 12206  0032EC                     u7897:
 12207  0032EC  2EE8               	decfsz	wreg,f,c
 12208  0032EE  D7FE               	bra	u7897
 12209  0032F0  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12210  0032F2  D7FC               	bra	u7897
 12211  0032F4  F000               	nop	
 12212  0032F6  0E80               	movlw	128
 12213  0032F8  EC34  F023         	call	_lcdInst
 12214                           
 12215                           ;Test.c: 449: printf("PUSH DONE");
 12216  0032FC  0E8F               	movlw	low STR_110
 12217  0032FE  0100               	movlb	0	; () banked
 12218  003300  6F8E               	movwf	printf@f& (0+255),b
 12219  003302  0EFF               	movlw	high STR_110
 12220  003304  0100               	movlb	0	; () banked
 12221  003306  6F8F               	movwf	(printf@f+1)& (0+255),b
 12222  003308  ECB8  F008         	call	_printf	;wreg free
 12223                           
 12224                           ;Test.c: 450: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12225  00330C  0E00               	movlw	0
 12226  00330E  0100               	movlb	0	; () banked
 12227  003310  6FB0               	movwf	SolenoidTestA5@i_1639& (0+255),b
 12228  003312                     l7074:
 12229                           
 12230                           ; BSR set to: 0
 12231  003312  0E63               	movlw	99
 12232  003314  0100               	movlb	0	; () banked
 12233  003316  65B0               	cpfsgt	SolenoidTestA5@i_1639& (0+255),b
 12234  003318  D001               	goto	l7078
 12235  00331A  D78D               	goto	l7032
 12236  00331C                     l7078:
 12237                           
 12238                           ; BSR set to: 0
 12239  00331C  0E68               	movlw	104
 12240  00331E  0100               	movlb	0	; () banked
 12241  003320  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12242  003322  0EE4               	movlw	228
 12243  003324                     u7907:
 12244  003324  2EE8               	decfsz	wreg,f,c
 12245  003326  D7FE               	bra	u7907
 12246  003328  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12247  00332A  D7FC               	bra	u7907
 12248  00332C  F000               	nop	
 12249  00332E  0100               	movlb	0	; () banked
 12250  003330  2BB0               	incf	SolenoidTestA5@i_1639& (0+255),f,b
 12251  003332  D7EF               	goto	l7074
 12252  003334                     __end_of_SolenoidTestA5:
 12253                           	opt stack 0
 12254                           tblptru	equ	0xFF8
 12255                           tblptrh	equ	0xFF7
 12256                           tblptrl	equ	0xFF6
 12257                           tablat	equ	0xFF5
 12258                           prodh	equ	0xFF4
 12259                           prodl	equ	0xFF3
 12260                           intcon	equ	0xFF2
 12261                           intcon2	equ	0xFF1
 12262                           intcon3	equ	0xFF0
 12263                           postinc0	equ	0xFEE
 12264                           wreg	equ	0xFE8
 12265                           postdec1	equ	0xFE5
 12266                           fsr1l	equ	0xFE1
 12267                           indf2	equ	0xFDF
 12268                           postinc2	equ	0xFDE
 12269                           postdec2	equ	0xFDD
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274 ;; *************** function _PortTests *****************
 12275 ;; Defined at:
 12276 ;;		line 362 in file "Test.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;		None
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;		None
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      void 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2, status,0
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12294 ;;Total ram usage:        2 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    7
 12297 ;; This function calls:
 12298 ;;		Nothing
 12299 ;; This function is called by:
 12300 ;;		_Test
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           	psect	text43
 12305  003A7A                     __ptext43:
 12306                           	opt stack 0
 12307  003A7A                     _PortTests:
 12308                           	opt stack 22
 12309  003A7A                     l1139:
 12310  003A7A  A281               	btfss	3969,1,c	;volatile
 12311  003A7C  D7FE               	goto	l1139
 12312                           
 12313                           ;Test.c: 366: var = PORTB >> 4;
 12314  003A7E  CF81 F080          	movff	3969,??_PortTests	;volatile
 12315  003A82  0100               	movlb	0	; () banked
 12316  003A84  3B80               	swapf	??_PortTests& (0+255),f,b
 12317  003A86  0E0F               	movlw	15
 12318  003A88  1780               	andwf	??_PortTests& (0+255),f,b
 12319  003A8A  0100               	movlb	0	; () banked
 12320  003A8C  5180               	movf	??_PortTests& (0+255),w,b
 12321  003A8E  0100               	movlb	0	; () banked
 12322  003A90  6FFA               	movwf	_var& (0+255),b
 12323  003A92  6BFB               	clrf	(_var+1)& (0+255),b
 12324                           
 12325                           ;Test.c: 367: switch(var){
 12326  003A94  D00C               	goto	l7086
 12327  003A96                     l1143:
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;Test.c: 369: LATEbits.LATE0 = 1;
 12331  003A96  808D               	bsf	3981,0,c	;volatile
 12332                           
 12333                           ;Test.c: 370: break;
 12334  003A98  D027               	goto	l1151
 12335  003A9A                     l1145:
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;Test.c: 372: LATEbits.LATE1 = 1;
 12339  003A9A  828D               	bsf	3981,1,c	;volatile
 12340                           
 12341                           ;Test.c: 373: break;
 12342  003A9C  D025               	goto	l1151
 12343  003A9E                     l1146:
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;Test.c: 375: LATDbits.LATD0 = 1;
 12347  003A9E  808C               	bsf	3980,0,c	;volatile
 12348                           
 12349                           ;Test.c: 376: break;
 12350  003AA0  D023               	goto	l1151
 12351  003AA2                     l1147:
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;Test.c: 378: LATAbits.LATA3 = 1;
 12355  003AA2  8689               	bsf	3977,3,c	;volatile
 12356                           
 12357                           ;Test.c: 379: break;
 12358  003AA4  D021               	goto	l1151
 12359  003AA6                     l1148:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;Test.c: 381: LATAbits.LATA4 = 1;
 12363  003AA6  8889               	bsf	3977,4,c	;volatile
 12364                           
 12365                           ;Test.c: 382: break;
 12366  003AA8  D01F               	goto	l1151
 12367  003AAA                     l1149:
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;Test.c: 384: LATAbits.LATA5 = 1;
 12371  003AAA  8A89               	bsf	3977,5,c	;volatile
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;Test.c: 388: }
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;Test.c: 387: break;
 12378                           
 12379                           ;Test.c: 386: default:
 12380                           
 12381                           ;Test.c: 385: break;
 12382  003AAC  D01D               	goto	l1151
 12383  003AAE                     l7086:
 12384                           
 12385                           ; BSR set to: 0
 12386  003AAE  C0FA  F080         	movff	_var,??_PortTests
 12387  003AB2  C0FB  F081         	movff	_var+1,??_PortTests+1
 12388                           
 12389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12390                           ; Switch size 1, requested type "space"
 12391                           ; Number of cases is 1, Range of values is 0 to 0
 12392                           ; switch strategies available:
 12393                           ; Name         Instructions Cycles
 12394                           ; simple_byte            4     3 (average)
 12395                           ;	Chosen strategy is simple_byte
 12396  003AB6  0100               	movlb	0	; () banked
 12397  003AB8  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12398  003ABA  0A00               	xorlw	0	; case 0
 12399  003ABC  A4D8               	btfss	status,2,c
 12400  003ABE  D014               	goto	l1151
 12401                           
 12402                           ; BSR set to: 0
 12403                           ; Switch size 1, requested type "space"
 12404                           ; Number of cases is 6, Range of values is 0 to 5
 12405                           ; switch strategies available:
 12406                           ; Name         Instructions Cycles
 12407                           ; simple_byte           19    10 (average)
 12408                           ;	Chosen strategy is simple_byte
 12409  003AC0  0100               	movlb	0	; () banked
 12410  003AC2  5180               	movf	??_PortTests& (0+255),w,b
 12411  003AC4  0A00               	xorlw	0	; case 0
 12412  003AC6  B4D8               	btfsc	status,2,c
 12413  003AC8  D7E6               	goto	l1143
 12414  003ACA  0A01               	xorlw	1	; case 1
 12415  003ACC  B4D8               	btfsc	status,2,c
 12416  003ACE  D7E5               	goto	l1145
 12417  003AD0  0A03               	xorlw	3	; case 2
 12418  003AD2  B4D8               	btfsc	status,2,c
 12419  003AD4  D7E4               	goto	l1146
 12420  003AD6  0A01               	xorlw	1	; case 3
 12421  003AD8  B4D8               	btfsc	status,2,c
 12422  003ADA  D7E3               	goto	l1147
 12423  003ADC  0A07               	xorlw	7	; case 4
 12424  003ADE  B4D8               	btfsc	status,2,c
 12425  003AE0  D7E2               	goto	l1148
 12426  003AE2  0A01               	xorlw	1	; case 5
 12427  003AE4  B4D8               	btfsc	status,2,c
 12428  003AE6  D7E1               	goto	l1149
 12429  003AE8                     l1151:
 12430  003AE8  B281               	btfsc	3969,1,c	;volatile
 12431  003AEA  D7FE               	goto	l1151
 12432                           
 12433                           ;Test.c: 390: __nop();
 12434  003AEC  F000               	nop	
 12435                           
 12436                           ;Test.c: 391: __nop();
 12437  003AEE  F000               	nop	
 12438                           
 12439                           ;Test.c: 392: LATA = 0x00;
 12440  003AF0  0E00               	movlw	0
 12441  003AF2  6E89               	movwf	3977,c	;volatile
 12442                           
 12443                           ;Test.c: 393: LATE = 0x00;
 12444  003AF4  0E00               	movlw	0
 12445  003AF6  6E8D               	movwf	3981,c	;volatile
 12446                           
 12447                           ;Test.c: 394: LATD = 0x00; }
 12448  003AF8  0E00               	movlw	0
 12449  003AFA  6E8C               	movwf	3980,c	;volatile
 12450  003AFC  D7BE               	goto	l1139
 12451  003AFE                     __end_of_PortTests:
 12452                           	opt stack 0
 12453                           tblptru	equ	0xFF8
 12454                           tblptrh	equ	0xFF7
 12455                           tblptrl	equ	0xFF6
 12456                           tablat	equ	0xFF5
 12457                           prodh	equ	0xFF4
 12458                           prodl	equ	0xFF3
 12459                           intcon	equ	0xFF2
 12460                           intcon2	equ	0xFF1
 12461                           intcon3	equ	0xFF0
 12462                           postinc0	equ	0xFEE
 12463                           wreg	equ	0xFE8
 12464                           postdec1	equ	0xFE5
 12465                           fsr1l	equ	0xFE1
 12466                           indf2	equ	0xFDF
 12467                           postinc2	equ	0xFDE
 12468                           postdec2	equ	0xFDD
 12469                           fsr2h	equ	0xFDA
 12470                           fsr2l	equ	0xFD9
 12471                           status	equ	0xFD8
 12472                           
 12473 ;; *************** function _PortTestA5 *****************
 12474 ;; Defined at:
 12475 ;;		line 397 in file "Test.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;		None
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;		None
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  1    wreg      void 
 12482 ;; Registers used:
 12483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12484 ;; Tracked objects:
 12485 ;;		On entry : 0/0
 12486 ;;		On exit  : 0/0
 12487 ;;		Unchanged: 0/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;Total ram usage:        1 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:   10
 12496 ;; This function calls:
 12497 ;;		_lcdInst
 12498 ;;		_printf
 12499 ;; This function is called by:
 12500 ;;		_Test
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text44
 12505  00384A                     __ptext44:
 12506                           	opt stack 0
 12507  00384A                     _PortTestA5:
 12508                           	opt stack 19
 12509                           
 12510                           ;Test.c: 398: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12511                           
 12512                           ;incstack = 0
 12513  00384A  0E01               	movlw	1
 12514  00384C  EC34  F023         	call	_lcdInst
 12515  003850  0E68               	movlw	104
 12516  003852  0100               	movlb	0	; () banked
 12517  003854  6FAB               	movwf	??_PortTestA5& (0+255),b
 12518  003856  0EE4               	movlw	228
 12519  003858                     u7917:
 12520  003858  2EE8               	decfsz	wreg,f,c
 12521  00385A  D7FE               	bra	u7917
 12522  00385C  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12523  00385E  D7FC               	bra	u7917
 12524  003860  F000               	nop	
 12525  003862  0E80               	movlw	128
 12526  003864  EC34  F023         	call	_lcdInst
 12527                           
 12528                           ;Test.c: 399: printf("D WILL RETURN    ");
 12529  003868  0E95               	movlw	low STR_107
 12530  00386A  0100               	movlb	0	; () banked
 12531  00386C  6F8E               	movwf	printf@f& (0+255),b
 12532  00386E  0EFB               	movlw	high STR_107
 12533  003870  0100               	movlb	0	; () banked
 12534  003872  6F8F               	movwf	(printf@f+1)& (0+255),b
 12535  003874  ECB8  F008         	call	_printf	;wreg free
 12536                           
 12537                           ;Test.c: 400: lcdInst(0b11000000);;
 12538  003878  0EC0               	movlw	192
 12539  00387A  EC34  F023         	call	_lcdInst
 12540                           
 12541                           ;Test.c: 401: printf("OTHER SETS RA5   ");
 12542  00387E  0EA7               	movlw	low STR_108
 12543  003880  0100               	movlb	0	; () banked
 12544  003882  6F8E               	movwf	printf@f& (0+255),b
 12545  003884  0EFB               	movlw	high STR_108
 12546  003886  0100               	movlb	0	; () banked
 12547  003888  6F8F               	movwf	(printf@f+1)& (0+255),b
 12548  00388A  ECB8  F008         	call	_printf	;wreg free
 12549  00388E                     l1160:
 12550  00388E  A281               	btfss	3969,1,c	;volatile
 12551  003890  D7FE               	goto	l1160
 12552                           
 12553                           ;Test.c: 406: }
 12554                           ;Test.c: 407: if(PORTB >> 4 == 0b1111){
 12555  003892  3881               	swapf	3969,w,c	;volatile
 12556  003894  0B0F               	andlw	15
 12557  003896  0A0F               	xorlw	15
 12558  003898  B4D8               	btfsc	status,2,c
 12559  00389A  0012               	return	
 12560                           
 12561                           ;Test.c: 410: else{
 12562                           ;Test.c: 411: LATAbits.LATA5 = 1;
 12563                           
 12564                           ;Test.c: 409: }
 12565                           
 12566                           ;Test.c: 408: break;
 12567  00389C  8A89               	bsf	3977,5,c	;volatile
 12568  00389E                     l1166:
 12569  00389E  B281               	btfsc	3969,1,c	;volatile
 12570  0038A0  D7FE               	goto	l1166
 12571                           
 12572                           ;Test.c: 414: }
 12573                           ;Test.c: 417: for(i=0;i<10000;i++)
 12574  0038A2  0E00               	movlw	0
 12575  0038A4  0100               	movlb	0	; () banked
 12576  0038A6  6FE5               	movwf	(_i+1)& (0+255),b
 12577  0038A8  0E00               	movlw	0
 12578  0038AA  6FE4               	movwf	_i& (0+255),b
 12579  0038AC                     l6992:
 12580                           
 12581                           ; BSR set to: 0
 12582  0038AC  0100               	movlb	0	; () banked
 12583  0038AE  BFE5               	btfsc	(_i+1)& (0+255),7,b
 12584  0038B0  D008               	goto	l1169
 12585  0038B2  0E10               	movlw	16
 12586  0038B4  0100               	movlb	0	; () banked
 12587  0038B6  5DE4               	subwf	_i& (0+255),w,b
 12588  0038B8  0E27               	movlw	39
 12589  0038BA  0100               	movlb	0	; () banked
 12590  0038BC  59E5               	subwfb	(_i+1)& (0+255),w,b
 12591  0038BE  B0D8               	btfsc	status,0,c
 12592  0038C0  D00D               	goto	l1170
 12593  0038C2                     l1169:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;Test.c: 418: {
 12597                           ;Test.c: 419: LATAbits.LATA5 = 1;
 12598  0038C2  8A89               	bsf	3977,5,c	;volatile
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;Test.c: 420: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12602  0038C4  0E1A               	movlw	26
 12603  0038C6                     u7927:
 12604  0038C6  2EE8               	decfsz	wreg,f,c
 12605  0038C8  D7FE               	bra	u7927
 12606  0038CA  D000               	nop2	
 12607                           
 12608                           ;Test.c: 421: LATAbits.LATA5 = 0;
 12609  0038CC  9A89               	bcf	3977,5,c	;volatile
 12610                           
 12611                           ;Test.c: 422: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12612  0038CE  0EF0               	movlw	240
 12613  0038D0                     u7937:
 12614  0038D0  2EE8               	decfsz	wreg,f,c
 12615  0038D2  D7FE               	bra	u7937
 12616  0038D4  0100               	movlb	0	; () banked
 12617  0038D6  4BE4               	infsnz	_i& (0+255),f,b
 12618  0038D8  2BE5               	incf	(_i+1)& (0+255),f,b
 12619  0038DA  D7E8               	goto	l6992
 12620  0038DC                     l1170:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;Test.c: 423: }
 12624                           ;Test.c: 425: LATAbits.LATA5 = 0;
 12625  0038DC  9A89               	bcf	3977,5,c	;volatile
 12626                           
 12627                           ; BSR set to: 0
 12628                           
 12629                           ; BSR set to: 0
 12630  0038DE  D7D7               	goto	l1160
 12631  0038E0                     __end_of_PortTestA5:
 12632                           	opt stack 0
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           intcon3	equ	0xFF0
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           postdec1	equ	0xFE5
 12645                           fsr1l	equ	0xFE1
 12646                           indf2	equ	0xFDF
 12647                           postinc2	equ	0xFDE
 12648                           postdec2	equ	0xFDD
 12649                           fsr2h	equ	0xFDA
 12650                           fsr2l	equ	0xFD9
 12651                           status	equ	0xFD8
 12652                           
 12653 ;; *************** function _EEPROMTest *****************
 12654 ;; Defined at:
 12655 ;;		line 482 in file "Test.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;		None
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;		None
 12660 ;; Return value:  Size  Location     Type
 12661 ;;                  1    wreg      void 
 12662 ;; Registers used:
 12663 ;;		None
 12664 ;; Tracked objects:
 12665 ;;		On entry : 0/0
 12666 ;;		On exit  : 0/0
 12667 ;;		Unchanged: 0/0
 12668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;Total ram usage:        0 bytes
 12674 ;; Hardware stack levels used:    1
 12675 ;; Hardware stack levels required when called:    7
 12676 ;; This function calls:
 12677 ;;		Nothing
 12678 ;; This function is called by:
 12679 ;;		_Test
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           	psect	text45
 12684  0046CC                     __ptext45:
 12685                           	opt stack 0
 12686  0046CC                     _EEPROMTest:
 12687                           	opt stack 22
 12688                           
 12689                           ;incstack = 0
 12690  0046CC  0012               	return		;funcret
 12691  0046CE                     __end_of_EEPROMTest:
 12692                           	opt stack 0
 12693                           tblptru	equ	0xFF8
 12694                           tblptrh	equ	0xFF7
 12695                           tblptrl	equ	0xFF6
 12696                           tablat	equ	0xFF5
 12697                           prodh	equ	0xFF4
 12698                           prodl	equ	0xFF3
 12699                           intcon	equ	0xFF2
 12700                           intcon2	equ	0xFF1
 12701                           intcon3	equ	0xFF0
 12702                           postinc0	equ	0xFEE
 12703                           wreg	equ	0xFE8
 12704                           postdec1	equ	0xFE5
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function _BothServos *****************
 12714 ;; Defined at:
 12715 ;;		line 313 in file "Test.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;		None
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;		None
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      void 
 12722 ;; Registers used:
 12723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;Total ram usage:        2 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:   10
 12736 ;; This function calls:
 12737 ;;		_initServos
 12738 ;;		_lcdInst
 12739 ;;		_printf
 12740 ;;		_updateServoPosition
 12741 ;; This function is called by:
 12742 ;;		_Test
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           	psect	text46
 12747  001916                     __ptext46:
 12748                           	opt stack 0
 12749  001916                     _BothServos:
 12750                           	opt stack 19
 12751                           
 12752                           ;Test.c: 314: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12753                           
 12754                           ;incstack = 0
 12755  001916  0E01               	movlw	1
 12756  001918  EC34  F023         	call	_lcdInst
 12757  00191C  0E68               	movlw	104
 12758  00191E  0100               	movlb	0	; () banked
 12759  001920  6FAB               	movwf	??_BothServos& (0+255),b
 12760  001922  0EE4               	movlw	228
 12761  001924                     u7947:
 12762  001924  2EE8               	decfsz	wreg,f,c
 12763  001926  D7FE               	bra	u7947
 12764  001928  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12765  00192A  D7FC               	bra	u7947
 12766  00192C  F000               	nop	
 12767  00192E  0E80               	movlw	128
 12768  001930  EC34  F023         	call	_lcdInst
 12769                           
 12770                           ;Test.c: 315: printf("TST: BOTH SERVOS");
 12771  001934  0EDC               	movlw	low STR_106
 12772  001936  0100               	movlb	0	; () banked
 12773  001938  6F8E               	movwf	printf@f& (0+255),b
 12774  00193A  0EFC               	movlw	high STR_106
 12775  00193C  0100               	movlb	0	; () banked
 12776  00193E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12777  001940  ECB8  F008         	call	_printf	;wreg free
 12778                           
 12779                           ;Test.c: 316: TMR1ON = 1;
 12780  001944  80CD               	bsf	4045,0,c	;volatile
 12781                           
 12782                           ;Test.c: 317: TMR3ON = 1;
 12783  001946  80B1               	bsf	4017,0,c	;volatile
 12784                           
 12785                           ;Test.c: 318: machine_state = Sorting_state;
 12786  001948  0E01               	movlw	1
 12787  00194A  0100               	movlb	0	; () banked
 12788  00194C  6FFC               	movwf	_machine_state& (0+255),b
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;Test.c: 319: was_low_1 = 0;
 12792  00194E  0E00               	movlw	0
 12793  001950  6E7A               	movwf	_was_low_1+1,c	;volatile
 12794  001952  0E00               	movlw	0
 12795  001954  6E79               	movwf	_was_low_1,c	;volatile
 12796                           
 12797                           ; BSR set to: 0
 12798                           ;Test.c: 320: was_low_1 = 0;
 12799  001956  0E00               	movlw	0
 12800  001958  6E7A               	movwf	_was_low_1+1,c	;volatile
 12801  00195A  0E00               	movlw	0
 12802  00195C  6E79               	movwf	_was_low_1,c	;volatile
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;Test.c: 326: initServos();
 12806  00195E  EC27  F01F         	call	_initServos	;wreg free
 12807                           
 12808                           ;Test.c: 327: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12809  001962  0E3D               	movlw	61
 12810  001964  0100               	movlb	0	; () banked
 12811  001966  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12812  001968  0EE1               	movlw	225
 12813  00196A  0100               	movlb	0	; () banked
 12814  00196C  6FAB               	movwf	??_BothServos& (0+255),b
 12815  00196E  0E3F               	movlw	63
 12816  001970                     u7957:
 12817  001970  2EE8               	decfsz	wreg,f,c
 12818  001972  D7FE               	bra	u7957
 12819  001974  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12820  001976  D7FC               	bra	u7957
 12821  001978  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12822  00197A  D7FA               	bra	u7957
 12823  00197C  D000               	nop2	
 12824                           
 12825                           ;Test.c: 328: updateServoPosition(500, 1);
 12826  00197E  0E01               	movlw	1
 12827  001980  0100               	movlb	0	; () banked
 12828  001982  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12829  001984  0EF4               	movlw	244
 12830  001986  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12831  001988  0E00               	movlw	0
 12832  00198A  0100               	movlb	0	; () banked
 12833  00198C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12834  00198E  0E01               	movlw	1
 12835  001990  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12836  001992  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12837                           
 12838                           ;Test.c: 329: updateServoPosition(1350, 3);
 12839  001996  0E05               	movlw	5
 12840  001998  0100               	movlb	0	; () banked
 12841  00199A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12842  00199C  0E46               	movlw	70
 12843  00199E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12844  0019A0  0E00               	movlw	0
 12845  0019A2  0100               	movlb	0	; () banked
 12846  0019A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12847  0019A6  0E03               	movlw	3
 12848  0019A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12849  0019AA  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12850                           
 12851                           ;Test.c: 330: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12852  0019AE  0E3D               	movlw	61
 12853  0019B0  0100               	movlb	0	; () banked
 12854  0019B2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12855  0019B4  0EE1               	movlw	225
 12856  0019B6  0100               	movlb	0	; () banked
 12857  0019B8  6FAB               	movwf	??_BothServos& (0+255),b
 12858  0019BA  0E3F               	movlw	63
 12859  0019BC                     u7967:
 12860  0019BC  2EE8               	decfsz	wreg,f,c
 12861  0019BE  D7FE               	bra	u7967
 12862  0019C0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12863  0019C2  D7FC               	bra	u7967
 12864  0019C4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12865  0019C6  D7FA               	bra	u7967
 12866  0019C8  D000               	nop2	
 12867                           
 12868                           ;Test.c: 331: updateServoPosition(1190, 3);
 12869  0019CA  0E04               	movlw	4
 12870  0019CC  0100               	movlb	0	; () banked
 12871  0019CE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12872  0019D0  0EA6               	movlw	166
 12873  0019D2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12874  0019D4  0E00               	movlw	0
 12875  0019D6  0100               	movlb	0	; () banked
 12876  0019D8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12877  0019DA  0E03               	movlw	3
 12878  0019DC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12879  0019DE  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12880                           
 12881                           ;Test.c: 332: _delay((unsigned long)((750)*(32000000/4000.0)));
 12882  0019E2  0E1F               	movlw	31
 12883  0019E4  0100               	movlb	0	; () banked
 12884  0019E6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12885  0019E8  0E71               	movlw	113
 12886  0019EA  0100               	movlb	0	; () banked
 12887  0019EC  6FAB               	movwf	??_BothServos& (0+255),b
 12888  0019EE  0E1E               	movlw	30
 12889  0019F0                     u7977:
 12890  0019F0  2EE8               	decfsz	wreg,f,c
 12891  0019F2  D7FE               	bra	u7977
 12892  0019F4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12893  0019F6  D7FC               	bra	u7977
 12894  0019F8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12895  0019FA  D7FA               	bra	u7977
 12896  0019FC  F000               	nop	
 12897                           
 12898                           ;Test.c: 334: updateServoPosition(750, 1);
 12899  0019FE  0E02               	movlw	2
 12900  001A00  0100               	movlb	0	; () banked
 12901  001A02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12902  001A04  0EEE               	movlw	238
 12903  001A06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12904  001A08  0E00               	movlw	0
 12905  001A0A  0100               	movlb	0	; () banked
 12906  001A0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12907  001A0E  0E01               	movlw	1
 12908  001A10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12909  001A12  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12910                           
 12911                           ;Test.c: 335: updateServoPosition(1350, 3);
 12912  001A16  0E05               	movlw	5
 12913  001A18  0100               	movlb	0	; () banked
 12914  001A1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12915  001A1C  0E46               	movlw	70
 12916  001A1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12917  001A20  0E00               	movlw	0
 12918  001A22  0100               	movlb	0	; () banked
 12919  001A24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12920  001A26  0E03               	movlw	3
 12921  001A28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12922  001A2A  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12923                           
 12924                           ;Test.c: 336: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12925  001A2E  0E3D               	movlw	61
 12926  001A30  0100               	movlb	0	; () banked
 12927  001A32  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12928  001A34  0EE1               	movlw	225
 12929  001A36  0100               	movlb	0	; () banked
 12930  001A38  6FAB               	movwf	??_BothServos& (0+255),b
 12931  001A3A  0E3F               	movlw	63
 12932  001A3C                     u7987:
 12933  001A3C  2EE8               	decfsz	wreg,f,c
 12934  001A3E  D7FE               	bra	u7987
 12935  001A40  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12936  001A42  D7FC               	bra	u7987
 12937  001A44  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12938  001A46  D7FA               	bra	u7987
 12939  001A48  D000               	nop2	
 12940                           
 12941                           ;Test.c: 337: updateServoPosition(1190, 3);
 12942  001A4A  0E04               	movlw	4
 12943  001A4C  0100               	movlb	0	; () banked
 12944  001A4E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12945  001A50  0EA6               	movlw	166
 12946  001A52  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12947  001A54  0E00               	movlw	0
 12948  001A56  0100               	movlb	0	; () banked
 12949  001A58  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12950  001A5A  0E03               	movlw	3
 12951  001A5C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12952  001A5E  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12953                           
 12954                           ;Test.c: 338: _delay((unsigned long)((750)*(32000000/4000.0)));
 12955  001A62  0E1F               	movlw	31
 12956  001A64  0100               	movlb	0	; () banked
 12957  001A66  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12958  001A68  0E71               	movlw	113
 12959  001A6A  0100               	movlb	0	; () banked
 12960  001A6C  6FAB               	movwf	??_BothServos& (0+255),b
 12961  001A6E  0E1E               	movlw	30
 12962  001A70                     u7997:
 12963  001A70  2EE8               	decfsz	wreg,f,c
 12964  001A72  D7FE               	bra	u7997
 12965  001A74  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12966  001A76  D7FC               	bra	u7997
 12967  001A78  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12968  001A7A  D7FA               	bra	u7997
 12969  001A7C  F000               	nop	
 12970                           
 12971                           ;Test.c: 340: updateServoPosition(1200, 1);
 12972  001A7E  0E04               	movlw	4
 12973  001A80  0100               	movlb	0	; () banked
 12974  001A82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12975  001A84  0EB0               	movlw	176
 12976  001A86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12977  001A88  0E00               	movlw	0
 12978  001A8A  0100               	movlb	0	; () banked
 12979  001A8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12980  001A8E  0E01               	movlw	1
 12981  001A90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12982  001A92  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12983                           
 12984                           ;Test.c: 341: updateServoPosition(1350, 3);
 12985  001A96  0E05               	movlw	5
 12986  001A98  0100               	movlb	0	; () banked
 12987  001A9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12988  001A9C  0E46               	movlw	70
 12989  001A9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12990  001AA0  0E00               	movlw	0
 12991  001AA2  0100               	movlb	0	; () banked
 12992  001AA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12993  001AA6  0E03               	movlw	3
 12994  001AA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12995  001AAA  ECBB  F01D         	call	_updateServoPosition	;wreg free
 12996                           
 12997                           ;Test.c: 342: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12998  001AAE  0E3D               	movlw	61
 12999  001AB0  0100               	movlb	0	; () banked
 13000  001AB2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13001  001AB4  0EE1               	movlw	225
 13002  001AB6  0100               	movlb	0	; () banked
 13003  001AB8  6FAB               	movwf	??_BothServos& (0+255),b
 13004  001ABA  0E3F               	movlw	63
 13005  001ABC                     u8007:
 13006  001ABC  2EE8               	decfsz	wreg,f,c
 13007  001ABE  D7FE               	bra	u8007
 13008  001AC0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13009  001AC2  D7FC               	bra	u8007
 13010  001AC4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13011  001AC6  D7FA               	bra	u8007
 13012  001AC8  D000               	nop2	
 13013                           
 13014                           ;Test.c: 343: updateServoPosition(1190, 3);
 13015  001ACA  0E04               	movlw	4
 13016  001ACC  0100               	movlb	0	; () banked
 13017  001ACE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13018  001AD0  0EA6               	movlw	166
 13019  001AD2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13020  001AD4  0E00               	movlw	0
 13021  001AD6  0100               	movlb	0	; () banked
 13022  001AD8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13023  001ADA  0E03               	movlw	3
 13024  001ADC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13025  001ADE  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13026                           
 13027                           ;Test.c: 344: _delay((unsigned long)((750)*(32000000/4000.0)));
 13028  001AE2  0E1F               	movlw	31
 13029  001AE4  0100               	movlb	0	; () banked
 13030  001AE6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13031  001AE8  0E71               	movlw	113
 13032  001AEA  0100               	movlb	0	; () banked
 13033  001AEC  6FAB               	movwf	??_BothServos& (0+255),b
 13034  001AEE  0E1E               	movlw	30
 13035  001AF0                     u8017:
 13036  001AF0  2EE8               	decfsz	wreg,f,c
 13037  001AF2  D7FE               	bra	u8017
 13038  001AF4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13039  001AF6  D7FC               	bra	u8017
 13040  001AF8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13041  001AFA  D7FA               	bra	u8017
 13042  001AFC  F000               	nop	
 13043                           
 13044                           ;Test.c: 346: updateServoPosition(1700, 1);
 13045  001AFE  0E06               	movlw	6
 13046  001B00  0100               	movlb	0	; () banked
 13047  001B02  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13048  001B04  0EA4               	movlw	164
 13049  001B06  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13050  001B08  0E00               	movlw	0
 13051  001B0A  0100               	movlb	0	; () banked
 13052  001B0C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13053  001B0E  0E01               	movlw	1
 13054  001B10  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13055  001B12  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13056                           
 13057                           ;Test.c: 347: updateServoPosition(1350, 3);
 13058  001B16  0E05               	movlw	5
 13059  001B18  0100               	movlb	0	; () banked
 13060  001B1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13061  001B1C  0E46               	movlw	70
 13062  001B1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13063  001B20  0E00               	movlw	0
 13064  001B22  0100               	movlb	0	; () banked
 13065  001B24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13066  001B26  0E03               	movlw	3
 13067  001B28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13068  001B2A  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13069                           
 13070                           ;Test.c: 348: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13071  001B2E  0E3D               	movlw	61
 13072  001B30  0100               	movlb	0	; () banked
 13073  001B32  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13074  001B34  0EE1               	movlw	225
 13075  001B36  0100               	movlb	0	; () banked
 13076  001B38  6FAB               	movwf	??_BothServos& (0+255),b
 13077  001B3A  0E3F               	movlw	63
 13078  001B3C                     u8027:
 13079  001B3C  2EE8               	decfsz	wreg,f,c
 13080  001B3E  D7FE               	bra	u8027
 13081  001B40  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13082  001B42  D7FC               	bra	u8027
 13083  001B44  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13084  001B46  D7FA               	bra	u8027
 13085  001B48  D000               	nop2	
 13086                           
 13087                           ;Test.c: 349: updateServoPosition(1190, 3);
 13088  001B4A  0E04               	movlw	4
 13089  001B4C  0100               	movlb	0	; () banked
 13090  001B4E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13091  001B50  0EA6               	movlw	166
 13092  001B52  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13093  001B54  0E00               	movlw	0
 13094  001B56  0100               	movlb	0	; () banked
 13095  001B58  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13096  001B5A  0E03               	movlw	3
 13097  001B5C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13098  001B5E  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13099                           
 13100                           ;Test.c: 350: _delay((unsigned long)((750)*(32000000/4000.0)));
 13101  001B62  0E1F               	movlw	31
 13102  001B64  0100               	movlb	0	; () banked
 13103  001B66  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13104  001B68  0E71               	movlw	113
 13105  001B6A  0100               	movlb	0	; () banked
 13106  001B6C  6FAB               	movwf	??_BothServos& (0+255),b
 13107  001B6E  0E1E               	movlw	30
 13108  001B70                     u8037:
 13109  001B70  2EE8               	decfsz	wreg,f,c
 13110  001B72  D7FE               	bra	u8037
 13111  001B74  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13112  001B76  D7FC               	bra	u8037
 13113  001B78  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13114  001B7A  D7FA               	bra	u8037
 13115  001B7C  F000               	nop	
 13116                           
 13117                           ;Test.c: 352: updateServoPosition(2000, 1);
 13118  001B7E  0E07               	movlw	7
 13119  001B80  0100               	movlb	0	; () banked
 13120  001B82  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13121  001B84  0ED0               	movlw	208
 13122  001B86  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13123  001B88  0E00               	movlw	0
 13124  001B8A  0100               	movlb	0	; () banked
 13125  001B8C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13126  001B8E  0E01               	movlw	1
 13127  001B90  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13128  001B92  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13129                           
 13130                           ;Test.c: 353: updateServoPosition(1350, 3);
 13131  001B96  0E05               	movlw	5
 13132  001B98  0100               	movlb	0	; () banked
 13133  001B9A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13134  001B9C  0E46               	movlw	70
 13135  001B9E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13136  001BA0  0E00               	movlw	0
 13137  001BA2  0100               	movlb	0	; () banked
 13138  001BA4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13139  001BA6  0E03               	movlw	3
 13140  001BA8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13141  001BAA  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13142                           
 13143                           ;Test.c: 354: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13144  001BAE  0E3D               	movlw	61
 13145  001BB0  0100               	movlb	0	; () banked
 13146  001BB2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13147  001BB4  0EE1               	movlw	225
 13148  001BB6  0100               	movlb	0	; () banked
 13149  001BB8  6FAB               	movwf	??_BothServos& (0+255),b
 13150  001BBA  0E3F               	movlw	63
 13151  001BBC                     u8047:
 13152  001BBC  2EE8               	decfsz	wreg,f,c
 13153  001BBE  D7FE               	bra	u8047
 13154  001BC0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13155  001BC2  D7FC               	bra	u8047
 13156  001BC4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13157  001BC6  D7FA               	bra	u8047
 13158  001BC8  D000               	nop2	
 13159                           
 13160                           ;Test.c: 355: updateServoPosition(1190, 3);
 13161  001BCA  0E04               	movlw	4
 13162  001BCC  0100               	movlb	0	; () banked
 13163  001BCE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13164  001BD0  0EA6               	movlw	166
 13165  001BD2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13166  001BD4  0E00               	movlw	0
 13167  001BD6  0100               	movlb	0	; () banked
 13168  001BD8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13169  001BDA  0E03               	movlw	3
 13170  001BDC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13171  001BDE  ECBB  F01D         	call	_updateServoPosition	;wreg free
 13172                           
 13173                           ;Test.c: 356: _delay((unsigned long)((750)*(32000000/4000.0)));
 13174  001BE2  0E1F               	movlw	31
 13175  001BE4  0100               	movlb	0	; () banked
 13176  001BE6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13177  001BE8  0E71               	movlw	113
 13178  001BEA  0100               	movlb	0	; () banked
 13179  001BEC  6FAB               	movwf	??_BothServos& (0+255),b
 13180  001BEE  0E1E               	movlw	30
 13181  001BF0                     u8057:
 13182  001BF0  2EE8               	decfsz	wreg,f,c
 13183  001BF2  D7FE               	bra	u8057
 13184  001BF4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13185  001BF6  D7FC               	bra	u8057
 13186  001BF8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13187  001BFA  D7FA               	bra	u8057
 13188  001BFC  F000               	nop	
 13189                           
 13190                           ;Test.c: 358: TMR1ON = 0;
 13191  001BFE  90CD               	bcf	4045,0,c	;volatile
 13192                           
 13193                           ;Test.c: 359: TMR3ON = 0;
 13194  001C00  90B1               	bcf	4017,0,c	;volatile
 13195                           
 13196                           ;Test.c: 360: (INTCONbits.GIE = 0);
 13197  001C02  9EF2               	bcf	intcon,7,c	;volatile
 13198  001C04  0012               	return		;funcret
 13199  001C06                     __end_of_BothServos:
 13200                           	opt stack 0
 13201                           tblptru	equ	0xFF8
 13202                           tblptrh	equ	0xFF7
 13203                           tblptrl	equ	0xFF6
 13204                           tablat	equ	0xFF5
 13205                           prodh	equ	0xFF4
 13206                           prodl	equ	0xFF3
 13207                           intcon	equ	0xFF2
 13208                           intcon2	equ	0xFF1
 13209                           intcon3	equ	0xFF0
 13210                           postinc0	equ	0xFEE
 13211                           wreg	equ	0xFE8
 13212                           postdec1	equ	0xFE5
 13213                           fsr1l	equ	0xFE1
 13214                           indf2	equ	0xFDF
 13215                           postinc2	equ	0xFDE
 13216                           postdec2	equ	0xFDD
 13217                           fsr2h	equ	0xFDA
 13218                           fsr2l	equ	0xFD9
 13219                           status	equ	0xFD8
 13220                           
 13221 ;; *************** function _printf *****************
 13222 ;; Defined at:
 13223 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13226 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 13227 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 13228 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 13229 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 13230 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 13231 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 13232 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 13233 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 13234 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 13235 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 13236 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 13237 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 13238 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 13239 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 13240 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 13241 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 13242 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 13243 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 13244 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 13245 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 13246 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 13247 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;  tmpval          4    0        struct .
 13250 ;;  width           2   41[BANK0 ] int 
 13251 ;;  val             2   37[BANK0 ] unsigned int 
 13252 ;;  len             2   35[BANK0 ] unsigned int 
 13253 ;;  ap              2   33[BANK0 ] PTR void [1]
 13254 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13255 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13256 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 13257 ;;  c               1   40[BANK0 ] char 
 13258 ;;  flag            1   39[BANK0 ] unsigned char 
 13259 ;;  prec            1   30[BANK0 ] char 
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  2   14[BANK0 ] int 
 13262 ;; Registers used:
 13263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13269 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;Total ram usage:       29 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    9
 13276 ;; This function calls:
 13277 ;;		___lwdiv
 13278 ;;		___lwmod
 13279 ;;		___wmul
 13280 ;;		_isdigit
 13281 ;;		_putch
 13282 ;; This function is called by:
 13283 ;;		_UI
 13284 ;;		_change_state_to_menu_start
 13285 ;;		_change_state_to_menu_12
 13286 ;;		_change_state_to_menu_22
 13287 ;;		_printRTC
 13288 ;;		_EEPROM_write
 13289 ;;		_Test
 13290 ;;		_algorithmTest
 13291 ;;		_sensorTest
 13292 ;;		_actuatorTest
 13293 ;;		_BothServos
 13294 ;;		_PortTestA5
 13295 ;;		_SolenoidTestA5
 13296 ;;		_ToggleTestA5
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           	psect	text47
 13301  001170                     __ptext47:
 13302                           	opt stack 0
 13303  001170                     _printf:
 13304                           	opt stack 18
 13305                           
 13306                           ;doprnt.c: 466: va_list ap;
 13307                           ;doprnt.c: 499: signed char c;
 13308                           ;doprnt.c: 501: int width;
 13309                           ;doprnt.c: 506: signed char prec;
 13310                           ;doprnt.c: 508: unsigned char flag;
 13311                           ;doprnt.c: 523: union {
 13312                           ;doprnt.c: 524: unsigned long vd;
 13313                           ;doprnt.c: 525: double integ;
 13314                           ;doprnt.c: 526: } tmpval;
 13315                           ;doprnt.c: 528: unsigned int val;
 13316                           ;doprnt.c: 529: unsigned len;
 13317                           ;doprnt.c: 530: const char * cp;
 13318                           ;doprnt.c: 533: *ap = __va_start();
 13319                           
 13320                           ;incstack = 0
 13321  001170  0E90               	movlw	low (?_printf+2)
 13322  001172  0100               	movlb	0	; () banked
 13323  001174  6FA1               	movwf	printf@ap& (0+255),b
 13324  001176  0E00               	movlw	high (?_printf+2)
 13325  001178  0100               	movlb	0	; () banked
 13326  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13327                           
 13328                           ;doprnt.c: 536: while(c = *f++) {
 13329  00117C  D205               	goto	l5494
 13330  00117E                     l5364:
 13331                           
 13332                           ; BSR set to: 0
 13333                           ;doprnt.c: 538: if(c != '%')
 13334  00117E  0E25               	movlw	37
 13335  001180  0100               	movlb	0	; () banked
 13336  001182  19A8               	xorwf	printf@c& (0+255),w,b
 13337  001184  B4D8               	btfsc	status,2,c
 13338  001186  D005               	goto	l5368
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;doprnt.c: 540: {
 13342                           ;doprnt.c: 541: (putch(c) );
 13343  001188  0100               	movlb	0	; () banked
 13344  00118A  51A8               	movf	printf@c& (0+255),w,b
 13345  00118C  EC2C  F023         	call	_putch
 13346                           
 13347                           ;doprnt.c: 542: continue;
 13348  001190  D1FB               	goto	l5494
 13349  001192                     l5368:
 13350                           
 13351                           ;doprnt.c: 543: }
 13352                           ;doprnt.c: 546: width = 0;
 13353  001192  0E00               	movlw	0
 13354  001194  0100               	movlb	0	; () banked
 13355  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 13356  001198  0E00               	movlw	0
 13357  00119A  6FA9               	movwf	printf@width& (0+255),b
 13358                           
 13359                           ;doprnt.c: 548: flag = 0;
 13360  00119C  0E00               	movlw	0
 13361  00119E  0100               	movlb	0	; () banked
 13362  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;doprnt.c: 551: switch(*f) {
 13366                           
 13367                           ;doprnt.c: 550: for(;;) {
 13368  0011A2  D005               	goto	l5374
 13369  0011A4                     l5370:
 13370                           
 13371                           ;doprnt.c: 580: flag |= 0x04;
 13372  0011A4  0100               	movlb	0	; () banked
 13373  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 13374                           
 13375                           ;doprnt.c: 581: f++;
 13376  0011A8  0100               	movlb	0	; () banked
 13377  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 13378  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13379  0011AE                     l5374:
 13380  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 13381  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 13382  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13383  0011B6  6AF8               	clrf	tblptru,c
 13384  0011B8                     	endif
 13385  0011B8                     	if	0	;tblptru may be non-zero
 13386  0011B8                     	endif
 13387  0011B8  0008               	tblrd		*
 13388  0011BA  50F5               	movf	tablat,w,c
 13389                           
 13390                           ; Switch size 1, requested type "space"
 13391                           ; Number of cases is 1, Range of values is 48 to 48
 13392                           ; switch strategies available:
 13393                           ; Name         Instructions Cycles
 13394                           ; simple_byte            4     3 (average)
 13395                           ;	Chosen strategy is simple_byte
 13396  0011BC  0A30               	xorlw	48	; case 48
 13397  0011BE  B4D8               	btfsc	status,2,c
 13398  0011C0  D7F1               	goto	l5370
 13399                           
 13400                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13401                           
 13402                           ;doprnt.c: 586: }
 13403                           
 13404                           ;doprnt.c: 585: break;
 13405  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 13406  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 13407  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13408  0011CA  6AF8               	clrf	tblptru,c
 13409  0011CC                     	endif
 13410  0011CC                     	if	0	;tblptru may be non-zero
 13411  0011CC                     	endif
 13412  0011CC  0008               	tblrd		*
 13413  0011CE  50F5               	movf	tablat,w,c
 13414  0011D0  EC3F  F022         	call	_isdigit
 13415  0011D4  A0D8               	btfss	status,0,c
 13416  0011D6  D0D2               	goto	l5422
 13417                           
 13418                           ;doprnt.c: 598: width = 0;
 13419  0011D8  0E00               	movlw	0
 13420  0011DA  0100               	movlb	0	; () banked
 13421  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 13422  0011DE  0E00               	movlw	0
 13423  0011E0  6FA9               	movwf	printf@width& (0+255),b
 13424  0011E2                     l5380:
 13425                           
 13426                           ;doprnt.c: 600: width *= 10;
 13427  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13428  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13429  0011EA  0E00               	movlw	0
 13430  0011EC  0100               	movlb	0	; () banked
 13431  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13432  0011F0  0E0A               	movlw	10
 13433  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13434  0011F4  ECD9  F020         	call	___wmul	;wreg free
 13435  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 13436  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13437                           
 13438                           ;doprnt.c: 601: width += *f++ - '0';
 13439  001200  0ED0               	movlw	208
 13440  001202  0100               	movlb	0	; () banked
 13441  001204  6F9A               	movwf	??_printf& (0+255),b
 13442  001206  0EFF               	movlw	255
 13443  001208  0100               	movlb	0	; () banked
 13444  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13445  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 13446  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 13447  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13448  001214  6AF8               	clrf	tblptru,c
 13449  001216                     	endif
 13450  001216                     	if	0	;tblptru may be non-zero
 13451  001216                     	endif
 13452  001216  0008               	tblrd		*
 13453  001218  50F5               	movf	tablat,w,c
 13454  00121A  0100               	movlb	0	; () banked
 13455  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 13456  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 13457  001220  0100               	movlb	0	; () banked
 13458  001222  519A               	movf	??_printf& (0+255),w,b
 13459  001224  0100               	movlb	0	; () banked
 13460  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 13461  001228  0100               	movlb	0	; () banked
 13462  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 13463  00122C  0100               	movlb	0	; () banked
 13464  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13465  001230  0100               	movlb	0	; () banked
 13466  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 13467  001234  0100               	movlb	0	; () banked
 13468  001236  27A9               	addwf	printf@width& (0+255),f,b
 13469  001238  0100               	movlb	0	; () banked
 13470  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 13471  00123C  0100               	movlb	0	; () banked
 13472  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13473                           
 13474                           ; BSR set to: 0
 13475  001240  0100               	movlb	0	; () banked
 13476  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 13477  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13481  001246  C08E  FFF6         	movff	printf@f,tblptrl
 13482  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13483  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13484  00124E  6AF8               	clrf	tblptru,c
 13485  001250                     	endif
 13486  001250                     	if	0	;tblptru may be non-zero
 13487  001250                     	endif
 13488  001250  0008               	tblrd		*
 13489  001252  50F5               	movf	tablat,w,c
 13490  001254  EC3F  F022         	call	_isdigit
 13491  001258  A0D8               	btfss	status,0,c
 13492  00125A  D090               	goto	l5422
 13493  00125C  D7C2               	goto	l5380
 13494  00125E                     l5388:
 13495                           
 13496                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13497  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 13498  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13499  001266  CFDE F09F          	movff	postinc2,printf@cp
 13500  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 13501  00126E  0E02               	movlw	2
 13502  001270  0100               	movlb	0	; () banked
 13503  001272  27A1               	addwf	printf@ap& (0+255),f,b
 13504  001274  0E00               	movlw	0
 13505  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;doprnt.c: 740: if(!cp)
 13509  001278  0100               	movlb	0	; () banked
 13510  00127A  519F               	movf	printf@cp& (0+255),w,b
 13511  00127C  0100               	movlb	0	; () banked
 13512  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13513  001280  A4D8               	btfss	status,2,c
 13514  001282  D006               	goto	l5396
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;doprnt.c: 741: cp = "(null)";
 13518  001284  0EB5               	movlw	low STR_113
 13519  001286  0100               	movlb	0	; () banked
 13520  001288  6F9F               	movwf	printf@cp& (0+255),b
 13521  00128A  0EFF               	movlw	high STR_113
 13522  00128C  0100               	movlb	0	; () banked
 13523  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13524  001290                     l5396:
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;doprnt.c: 745: len = 0;
 13528  001290  0E00               	movlw	0
 13529  001292  0100               	movlb	0	; () banked
 13530  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 13531  001296  0E00               	movlw	0
 13532  001298  6FA3               	movwf	printf@len& (0+255),b
 13533                           
 13534                           ;doprnt.c: 746: while(cp[len])
 13535  00129A  D003               	goto	l5400
 13536  00129C                     l5398:
 13537                           
 13538                           ;doprnt.c: 747: len++;
 13539  00129C  0100               	movlb	0	; () banked
 13540  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 13541  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13542  0012A2                     l5400:
 13543                           
 13544                           ; BSR set to: 0
 13545  0012A2  0100               	movlb	0	; () banked
 13546  0012A4  51A3               	movf	printf@len& (0+255),w,b
 13547  0012A6  0100               	movlb	0	; () banked
 13548  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 13549  0012AA  0100               	movlb	0	; () banked
 13550  0012AC  6F9A               	movwf	??_printf& (0+255),b
 13551  0012AE  0100               	movlb	0	; () banked
 13552  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 13553  0012B2  0100               	movlb	0	; () banked
 13554  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13555  0012B6  0100               	movlb	0	; () banked
 13556  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 13557  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 13558  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 13559  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 13560  0012C4  6EF8               	movwf	tblptru,c
 13561  0012C6  0E0F               	movlw	(high __ramtop+-1)
 13562  0012C8  64F7               	cpfsgt	tblptrh,c
 13563  0012CA  D003               	bra	u3807
 13564  0012CC  0008               	tblrd		*
 13565  0012CE  50F5               	movf	tablat,w,c
 13566  0012D0  D005               	bra	u3800
 13567  0012D2                     u3807:
 13568  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13569  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13570  0012DA  50EF               	movf	indf0,w,c
 13571  0012DC                     u3800:
 13572  0012DC  0900               	iorlw	0
 13573  0012DE  A4D8               	btfss	status,2,c
 13574  0012E0  D7DD               	goto	l5398
 13575                           
 13576                           ;doprnt.c: 757: if(width > len)
 13577  0012E2  0100               	movlb	0	; () banked
 13578  0012E4  51A9               	movf	printf@width& (0+255),w,b
 13579  0012E6  0100               	movlb	0	; () banked
 13580  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 13581  0012EA  0100               	movlb	0	; () banked
 13582  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 13583  0012EE  0100               	movlb	0	; () banked
 13584  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13585  0012F2  B0D8               	btfsc	status,0,c
 13586  0012F4  D009               	goto	l5406
 13587                           
 13588                           ; BSR set to: 0
 13589                           ;doprnt.c: 758: width -= len;
 13590  0012F6  0100               	movlb	0	; () banked
 13591  0012F8  51A3               	movf	printf@len& (0+255),w,b
 13592  0012FA  0100               	movlb	0	; () banked
 13593  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 13594  0012FE  0100               	movlb	0	; () banked
 13595  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 13596  001302  0100               	movlb	0	; () banked
 13597  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13598  001306  D009               	goto	l5410
 13599  001308                     l5406:
 13600                           
 13601                           ; BSR set to: 0
 13602                           ;doprnt.c: 759: else
 13603                           ;doprnt.c: 760: width = 0;
 13604  001308  0E00               	movlw	0
 13605  00130A  0100               	movlb	0	; () banked
 13606  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 13607  00130E  0E00               	movlw	0
 13608  001310  6FA9               	movwf	printf@width& (0+255),b
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;doprnt.c: 764: while(width--)
 13612  001312  D003               	goto	l5410
 13613  001314                     l5408:
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;doprnt.c: 765: (putch(' ') );
 13617  001314  0E20               	movlw	32
 13618  001316  EC2C  F023         	call	_putch
 13619  00131A                     l5410:
 13620  00131A  0100               	movlb	0	; () banked
 13621  00131C  07A9               	decf	printf@width& (0+255),f,b
 13622  00131E  A0D8               	btfss	status,0,c
 13623  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 13624  001322  0100               	movlb	0	; () banked
 13625  001324  29A9               	incf	printf@width& (0+255),w,b
 13626  001326  E1F6               	bnz	l5408
 13627  001328  0100               	movlb	0	; () banked
 13628  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 13629  00132C  B4D8               	btfsc	status,2,c
 13630  00132E  D017               	goto	l5416
 13631  001330  D7F1               	goto	l5408
 13632  001332                     l5412:
 13633                           
 13634                           ; BSR set to: 0
 13635                           ;doprnt.c: 768: (putch(*cp++) );
 13636  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 13637  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13638  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 13639  00133C  6EF8               	movwf	tblptru,c
 13640  00133E  0E0F               	movlw	(high __ramtop+-1)
 13641  001340  64F7               	cpfsgt	tblptrh,c
 13642  001342  D003               	bra	u3847
 13643  001344  0008               	tblrd		*
 13644  001346  50F5               	movf	tablat,w,c
 13645  001348  D005               	bra	u3840
 13646  00134A                     u3847:
 13647  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13648  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13649  001352  50EF               	movf	indf0,w,c
 13650  001354                     u3840:
 13651  001354  EC2C  F023         	call	_putch
 13652  001358  0100               	movlb	0	; () banked
 13653  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 13654  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13655  00135E                     l5416:
 13656                           
 13657                           ; BSR set to: 0
 13658  00135E  0100               	movlb	0	; () banked
 13659  001360  07A3               	decf	printf@len& (0+255),f,b
 13660  001362  A0D8               	btfss	status,0,c
 13661  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 13662  001366  0100               	movlb	0	; () banked
 13663  001368  29A3               	incf	printf@len& (0+255),w,b
 13664  00136A  E1E3               	bnz	l5412
 13665  00136C  0100               	movlb	0	; () banked
 13666  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 13667  001370  B4D8               	btfsc	status,2,c
 13668  001372  D10A               	goto	l5494
 13669  001374  D7DE               	goto	l5412
 13670  001376                     l5418:
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;doprnt.c: 818: flag |= 0x40;
 13674  001376  0100               	movlb	0	; () banked
 13675  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;doprnt.c: 822: }
 13679                           
 13680                           ;doprnt.c: 819: break;
 13681  00137A  D01D               	goto	l1236
 13682  00137C                     l5422:
 13683  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 13684  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 13685  001384  0100               	movlb	0	; () banked
 13686  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 13687  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13688  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13689  00138A  6AF8               	clrf	tblptru,c
 13690  00138C                     	endif
 13691  00138C                     	if	0	;tblptru may be non-zero
 13692  00138C                     	endif
 13693  00138C  0008               	tblrd		*
 13694  00138E  CFF5 F0A8          	movff	tablat,printf@c
 13695  001392  0100               	movlb	0	; () banked
 13696  001394  51A8               	movf	printf@c& (0+255),w,b
 13697                           
 13698                           ; Switch size 1, requested type "space"
 13699                           ; Number of cases is 5, Range of values is 0 to 117
 13700                           ; switch strategies available:
 13701                           ; Name         Instructions Cycles
 13702                           ; simple_byte           16     9 (average)
 13703                           ;	Chosen strategy is simple_byte
 13704  001396  0A00               	xorlw	0	; case 0
 13705  001398  B4D8               	btfsc	status,2,c
 13706  00139A  0012               	return	
 13707  00139C  0A64               	xorlw	100	; case 100
 13708  00139E  B4D8               	btfsc	status,2,c
 13709  0013A0  D00A               	goto	l1236
 13710  0013A2  0A0D               	xorlw	13	; case 105
 13711  0013A4  B4D8               	btfsc	status,2,c
 13712  0013A6  D007               	goto	l1236
 13713  0013A8  0A1A               	xorlw	26	; case 115
 13714  0013AA  B4D8               	btfsc	status,2,c
 13715  0013AC  D758               	goto	l5388
 13716  0013AE  0A06               	xorlw	6	; case 117
 13717  0013B0  B4D8               	btfsc	status,2,c
 13718  0013B2  D7E1               	goto	l5418
 13719  0013B4  D0E9               	goto	l5494
 13720  0013B6                     l1236:
 13721                           
 13722                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13723  0013B6  0100               	movlb	0	; () banked
 13724  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 13725  0013BA  D019               	goto	l5434
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;doprnt.c: 1253: {
 13729                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13730  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 13731  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13732  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 13733  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 13734                           
 13735                           ; BSR set to: 0
 13736  0013CC  0E02               	movlw	2
 13737  0013CE  0100               	movlb	0	; () banked
 13738  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 13739  0013D2  0E00               	movlw	0
 13740  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;doprnt.c: 1261: if((int)val < 0) {
 13744  0013D6  0100               	movlb	0	; () banked
 13745  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13746  0013DA  D016               	goto	l5438
 13747                           
 13748                           ; BSR set to: 0
 13749                           ;doprnt.c: 1262: flag |= 0x03;
 13750  0013DC  0E03               	movlw	3
 13751  0013DE  0100               	movlb	0	; () banked
 13752  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;doprnt.c: 1263: val = -val;
 13756  0013E2  0100               	movlb	0	; () banked
 13757  0013E4  6DA5               	negf	printf@val& (0+255),b
 13758  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13759  0013E8  B0D8               	btfsc	status,0,c
 13760  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;doprnt.c: 1264: }
 13764                           ;doprnt.c: 1266: }
 13765  0013EC  D00D               	goto	l5438
 13766  0013EE                     l5434:
 13767                           
 13768                           ; BSR set to: 0
 13769                           ;doprnt.c: 1268: else
 13770                           ;doprnt.c: 1273: {
 13771                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13772  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 13773  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13774  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 13775  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 13776                           
 13777                           ; BSR set to: 0
 13778  0013FE  0E02               	movlw	2
 13779  001400  0100               	movlb	0	; () banked
 13780  001402  27A1               	addwf	printf@ap& (0+255),f,b
 13781  001404  0E00               	movlw	0
 13782  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13783  001408                     l5438:
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;doprnt.c: 1287: }
 13787                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13788  001408  0E01               	movlw	1
 13789  00140A  0100               	movlb	0	; () banked
 13790  00140C  6FA8               	movwf	printf@c& (0+255),b
 13791  00140E                     l5440:
 13792                           
 13793                           ; BSR set to: 0
 13794  00140E  0E05               	movlw	5
 13795  001410  0100               	movlb	0	; () banked
 13796  001412  19A8               	xorwf	printf@c& (0+255),w,b
 13797  001414  B4D8               	btfsc	status,2,c
 13798  001416  D019               	goto	l5452
 13799                           
 13800                           ; BSR set to: 0
 13801                           ;doprnt.c: 1306: if(val < dpowers[c])
 13802                           
 13803                           ; BSR set to: 0
 13804                           
 13805                           ; BSR set to: 0
 13806  001418  0100               	movlb	0	; () banked
 13807  00141A  51A8               	movf	printf@c& (0+255),w,b
 13808  00141C  0D02               	mullw	2
 13809  00141E  0E38               	movlw	low _dpowers
 13810  001420  24F3               	addwf	prodl,w,c
 13811  001422  6EF6               	movwf	tblptrl,c
 13812  001424  0EFB               	movlw	high _dpowers
 13813  001426  20F4               	addwfc	prodh,w,c
 13814  001428  6EF7               	movwf	tblptrh,c
 13815  00142A                     	if	1	;There are 3 active tblptr bytes
 13816  00142A  6AF8               	clrf	tblptru,c
 13817  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 13818  00142E  22F8               	addwfc	tblptru,f,c
 13819  001430                     	endif
 13820  001430  0009               	tblrd		*+
 13821  001432  50F5               	movf	tablat,w,c
 13822  001434  0100               	movlb	0	; () banked
 13823  001436  5DA5               	subwf	printf@val& (0+255),w,b
 13824  001438  0009               	tblrd		*+
 13825  00143A  50F5               	movf	tablat,w,c
 13826  00143C  0100               	movlb	0	; () banked
 13827  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13828  001440  A0D8               	btfss	status,0,c
 13829  001442  D003               	goto	l5452
 13830                           
 13831                           ; BSR set to: 0
 13832                           
 13833                           ; BSR set to: 0
 13834                           
 13835                           ; BSR set to: 0
 13836                           ;doprnt.c: 1307: break;
 13837  001444  0100               	movlb	0	; () banked
 13838  001446  2BA8               	incf	printf@c& (0+255),f,b
 13839  001448  D7E2               	goto	l5440
 13840  00144A                     l5452:
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13844  00144A  0100               	movlb	0	; () banked
 13845  00144C  51A9               	movf	printf@width& (0+255),w,b
 13846  00144E  0100               	movlb	0	; () banked
 13847  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13848  001452  B4D8               	btfsc	status,2,c
 13849  001454  D00B               	goto	l5458
 13850                           
 13851                           ; BSR set to: 0
 13852  001456  C0A7  F09A         	movff	printf@flag,??_printf
 13853  00145A  0E03               	movlw	3
 13854  00145C  0100               	movlb	0	; () banked
 13855  00145E  179A               	andwf	??_printf& (0+255),f,b
 13856  001460  B4D8               	btfsc	status,2,c
 13857  001462  D004               	goto	l5458
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;doprnt.c: 1346: width--;
 13861  001464  0100               	movlb	0	; () banked
 13862  001466  07A9               	decf	printf@width& (0+255),f,b
 13863  001468  A0D8               	btfss	status,0,c
 13864  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 13865  00146C                     l5458:
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;doprnt.c: 1381: if(width > c)
 13869  00146C  0E80               	movlw	128
 13870  00146E  0100               	movlb	0	; () banked
 13871  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 13872  001472  0E7F               	movlw	127
 13873  001474  0100               	movlb	0	; () banked
 13874  001476  6F9A               	movwf	??_printf& (0+255),b
 13875  001478  0100               	movlb	0	; () banked
 13876  00147A  51A9               	movf	printf@width& (0+255),w,b
 13877  00147C  0100               	movlb	0	; () banked
 13878  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 13879  001480  0100               	movlb	0	; () banked
 13880  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 13881  001484  0A80               	xorlw	128
 13882  001486  0100               	movlb	0	; () banked
 13883  001488  599A               	subwfb	??_printf& (0+255),w,b
 13884  00148A  B0D8               	btfsc	status,0,c
 13885  00148C  D00B               	goto	l5462
 13886                           
 13887                           ; BSR set to: 0
 13888                           ;doprnt.c: 1382: width -= c;
 13889  00148E  0100               	movlb	0	; () banked
 13890  001490  51A8               	movf	printf@c& (0+255),w,b
 13891  001492  0100               	movlb	0	; () banked
 13892  001494  5FA9               	subwf	printf@width& (0+255),f,b
 13893  001496  0E00               	movlw	0
 13894  001498  0100               	movlb	0	; () banked
 13895  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 13896  00149C  0EFF               	movlw	255
 13897  00149E  0100               	movlb	0	; () banked
 13898  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13899  0014A2  D005               	goto	l5464
 13900  0014A4                     l5462:
 13901                           
 13902                           ; BSR set to: 0
 13903                           ;doprnt.c: 1383: else
 13904                           ;doprnt.c: 1384: width = 0;
 13905  0014A4  0E00               	movlw	0
 13906  0014A6  0100               	movlb	0	; () banked
 13907  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 13908  0014AA  0E00               	movlw	0
 13909  0014AC  6FA9               	movwf	printf@width& (0+255),b
 13910  0014AE                     l5464:
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;doprnt.c: 1387: if(flag & 0x04) {
 13914  0014AE  0100               	movlb	0	; () banked
 13915  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 13916  0014B2  D018               	goto	l5476
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;doprnt.c: 1392: if(flag & 0x03)
 13920  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 13921  0014B8  0E03               	movlw	3
 13922  0014BA  0100               	movlb	0	; () banked
 13923  0014BC  179A               	andwf	??_printf& (0+255),f,b
 13924  0014BE  B4D8               	btfsc	status,2,c
 13925  0014C0  D003               	goto	l5470
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;doprnt.c: 1393: (putch('-') );
 13929  0014C2  0E2D               	movlw	45
 13930  0014C4  EC2C  F023         	call	_putch
 13931  0014C8                     l5470:
 13932                           
 13933                           ;doprnt.c: 1415: if(width)
 13934  0014C8  0100               	movlb	0	; () banked
 13935  0014CA  51A9               	movf	printf@width& (0+255),w,b
 13936  0014CC  0100               	movlb	0	; () banked
 13937  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13938  0014D0  B4D8               	btfsc	status,2,c
 13939  0014D2  D025               	goto	l5486
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;doprnt.c: 1417: (putch('0') );
 13943                           
 13944                           ; BSR set to: 0
 13945                           
 13946                           ;doprnt.c: 1416: do
 13947  0014D4  0E30               	movlw	48
 13948  0014D6  EC2C  F023         	call	_putch
 13949                           
 13950                           ;doprnt.c: 1418: while(--width);
 13951  0014DA  0100               	movlb	0	; () banked
 13952  0014DC  07A9               	decf	printf@width& (0+255),f,b
 13953  0014DE  A0D8               	btfss	status,0,c
 13954  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 13955  0014E2  D7F2               	goto	l5470
 13956  0014E4                     l5476:
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;doprnt.c: 1422: {
 13960                           ;doprnt.c: 1424: if(width
 13961                           ;doprnt.c: 1428: )
 13962  0014E4  0100               	movlb	0	; () banked
 13963  0014E6  51A9               	movf	printf@width& (0+255),w,b
 13964  0014E8  0100               	movlb	0	; () banked
 13965  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13966  0014EC  B4D8               	btfsc	status,2,c
 13967  0014EE  D00D               	goto	l5482
 13968  0014F0                     l5478:
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;doprnt.c: 1430: (putch(' ') );
 13972  0014F0  0E20               	movlw	32
 13973  0014F2  EC2C  F023         	call	_putch
 13974                           
 13975                           ;doprnt.c: 1431: while(--width);
 13976  0014F6  0100               	movlb	0	; () banked
 13977  0014F8  07A9               	decf	printf@width& (0+255),f,b
 13978  0014FA  A0D8               	btfss	status,0,c
 13979  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 13980  0014FE  0100               	movlb	0	; () banked
 13981  001500  51A9               	movf	printf@width& (0+255),w,b
 13982  001502  0100               	movlb	0	; () banked
 13983  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13984  001506  A4D8               	btfss	status,2,c
 13985  001508  D7F3               	goto	l5478
 13986  00150A                     l5482:
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;doprnt.c: 1438: if(flag & 0x03)
 13990  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 13991  00150E  0E03               	movlw	3
 13992  001510  0100               	movlb	0	; () banked
 13993  001512  179A               	andwf	??_printf& (0+255),f,b
 13994  001514  B4D8               	btfsc	status,2,c
 13995  001516  D003               	goto	l5486
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;doprnt.c: 1439: (putch('-') );
 13999  001518  0E2D               	movlw	45
 14000  00151A  EC2C  F023         	call	_putch
 14001  00151E                     l5486:
 14002                           
 14003                           ;doprnt.c: 1469: }
 14004                           ;doprnt.c: 1472: prec = c;
 14005  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 14006                           
 14007                           ;doprnt.c: 1474: while(prec--) {
 14008  001522  D02C               	goto	l5492
 14009  001524                     l5488:
 14010                           
 14011                           ;doprnt.c: 1478: {
 14012                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14013  001524  0100               	movlb	0	; () banked
 14014  001526  519E               	movf	printf@prec& (0+255),w,b
 14015  001528  0D02               	mullw	2
 14016  00152A  0E38               	movlw	low _dpowers
 14017  00152C  24F3               	addwf	prodl,w,c
 14018  00152E  6EF6               	movwf	tblptrl,c
 14019  001530  0EFB               	movlw	high _dpowers
 14020  001532  20F4               	addwfc	prodh,w,c
 14021  001534  6EF7               	movwf	tblptrh,c
 14022  001536                     	if	1	;There are 3 active tblptr bytes
 14023  001536  6AF8               	clrf	tblptru,c
 14024  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 14025  00153A  22F8               	addwfc	tblptru,f,c
 14026  00153C                     	endif
 14027  00153C  0009               	tblrd		*+
 14028  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 14029  001542  000A               	tblrd		*-
 14030  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 14031  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 14032  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 14033  001550  EC7F  F01D         	call	___lwdiv	;wreg free
 14034  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 14035  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 14036  00155C  0E00               	movlw	0
 14037  00155E  0100               	movlb	0	; () banked
 14038  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 14039  001562  0E0A               	movlw	10
 14040  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 14041  001566  EC98  F01E         	call	___lwmod	;wreg free
 14042  00156A  0100               	movlb	0	; () banked
 14043  00156C  5187               	movf	?___lwmod& (0+255),w,b
 14044  00156E  0F30               	addlw	48
 14045  001570  0100               	movlb	0	; () banked
 14046  001572  6FA8               	movwf	printf@c& (0+255),b
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;doprnt.c: 1523: }
 14050                           ;doprnt.c: 1524: (putch(c) );
 14051  001574  0100               	movlb	0	; () banked
 14052  001576  51A8               	movf	printf@c& (0+255),w,b
 14053  001578  EC2C  F023         	call	_putch
 14054  00157C                     l5492:
 14055  00157C  0100               	movlb	0	; () banked
 14056  00157E  079E               	decf	printf@prec& (0+255),f,b
 14057  001580  0100               	movlb	0	; () banked
 14058  001582  299E               	incf	printf@prec& (0+255),w,b
 14059  001584  A4D8               	btfss	status,2,c
 14060  001586  D7CE               	goto	l5488
 14061  001588                     l5494:
 14062  001588  C08E  FFF6         	movff	printf@f,tblptrl
 14063  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 14064  001590  0100               	movlb	0	; () banked
 14065  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 14066  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14067  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14068  001596  6AF8               	clrf	tblptru,c
 14069  001598                     	endif
 14070  001598                     	if	0	;tblptru may be non-zero
 14071  001598                     	endif
 14072  001598  0008               	tblrd		*
 14073  00159A  CFF5 F0A8          	movff	tablat,printf@c
 14074  00159E  0100               	movlb	0	; () banked
 14075  0015A0  51A8               	movf	printf@c& (0+255),w,b
 14076  0015A2  B4D8               	btfsc	status,2,c
 14077  0015A4  0012               	return	
 14078  0015A6  D5EB               	goto	l5364
 14079  0015A8                     __end_of_printf:
 14080                           	opt stack 0
 14081                           tblptru	equ	0xFF8
 14082                           tblptrh	equ	0xFF7
 14083                           tblptrl	equ	0xFF6
 14084                           tablat	equ	0xFF5
 14085                           prodh	equ	0xFF4
 14086                           prodl	equ	0xFF3
 14087                           intcon	equ	0xFF2
 14088                           intcon2	equ	0xFF1
 14089                           intcon3	equ	0xFF0
 14090                           indf0	equ	0xFEF
 14091                           postinc0	equ	0xFEE
 14092                           fsr0h	equ	0xFEA
 14093                           fsr0l	equ	0xFE9
 14094                           wreg	equ	0xFE8
 14095                           postdec1	equ	0xFE5
 14096                           fsr1l	equ	0xFE1
 14097                           indf2	equ	0xFDF
 14098                           postinc2	equ	0xFDE
 14099                           postdec2	equ	0xFDD
 14100                           fsr2h	equ	0xFDA
 14101                           fsr2l	equ	0xFD9
 14102                           status	equ	0xFD8
 14103                           
 14104 ;; *************** function _putch *****************
 14105 ;; Defined at:
 14106 ;;		line 20 in file "lcd.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  data            1    wreg     unsigned char 
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;  data            1    2[BANK0 ] unsigned char 
 14111 ;; Return value:  Size  Location     Type
 14112 ;;                  1    wreg      void 
 14113 ;; Registers used:
 14114 ;;		wreg, status,2, status,0, cstack
 14115 ;; Tracked objects:
 14116 ;;		On entry : 0/0
 14117 ;;		On exit  : 0/0
 14118 ;;		Unchanged: 0/0
 14119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14124 ;;Total ram usage:        1 bytes
 14125 ;; Hardware stack levels used:    1
 14126 ;; Hardware stack levels required when called:    8
 14127 ;; This function calls:
 14128 ;;		_lcdNibble
 14129 ;; This function is called by:
 14130 ;;		_printf
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           	psect	text48
 14135  004658                     __ptext48:
 14136                           	opt stack 0
 14137  004658                     _putch:
 14138                           	opt stack 18
 14139                           
 14140                           ;incstack = 0
 14141                           ;putch@data stored from wreg
 14142  004658  0100               	movlb	0	; () banked
 14143  00465A  6F82               	movwf	putch@data& (0+255),b
 14144                           
 14145                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 14146  00465C  848C               	bsf	3980,2,c	;volatile
 14147                           
 14148                           ;lcd.c: 22: lcdNibble(data);
 14149  00465E  0100               	movlb	0	; () banked
 14150  004660  5182               	movf	putch@data& (0+255),w,b
 14151  004662  EC64  F01E         	call	_lcdNibble
 14152  004666  0012               	return		;funcret
 14153  004668                     __end_of_putch:
 14154                           	opt stack 0
 14155                           tblptru	equ	0xFF8
 14156                           tblptrh	equ	0xFF7
 14157                           tblptrl	equ	0xFF6
 14158                           tablat	equ	0xFF5
 14159                           prodh	equ	0xFF4
 14160                           prodl	equ	0xFF3
 14161                           intcon	equ	0xFF2
 14162                           intcon2	equ	0xFF1
 14163                           intcon3	equ	0xFF0
 14164                           indf0	equ	0xFEF
 14165                           postinc0	equ	0xFEE
 14166                           fsr0h	equ	0xFEA
 14167                           fsr0l	equ	0xFE9
 14168                           wreg	equ	0xFE8
 14169                           postdec1	equ	0xFE5
 14170                           fsr1l	equ	0xFE1
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           fsr2h	equ	0xFDA
 14175                           fsr2l	equ	0xFD9
 14176                           status	equ	0xFD8
 14177                           
 14178 ;; *************** function _isdigit *****************
 14179 ;; Defined at:
 14180 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  c               1    wreg     unsigned char 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  c               1    2[BANK0 ] unsigned char 
 14185 ;; Return value:  Size  Location     Type
 14186 ;;		None               void
 14187 ;; Registers used:
 14188 ;;		wreg, status,2, status,0
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;Total ram usage:        3 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    7
 14201 ;; This function calls:
 14202 ;;		Nothing
 14203 ;; This function is called by:
 14204 ;;		_printf
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           	psect	text49
 14209  00447E                     __ptext49:
 14210                           	opt stack 0
 14211  00447E                     _isdigit:
 14212                           	opt stack 19
 14213                           
 14214                           ;incstack = 0
 14215                           ;isdigit@c stored from wreg
 14216  00447E  0100               	movlb	0	; () banked
 14217  004480  6F82               	movwf	isdigit@c& (0+255),b
 14218  004482  0E00               	movlw	0
 14219  004484  0100               	movlb	0	; () banked
 14220  004486  6F81               	movwf	_isdigit$1893& (0+255),b
 14221                           
 14222                           ; BSR set to: 0
 14223  004488  0E3A               	movlw	58
 14224  00448A  0100               	movlb	0	; () banked
 14225  00448C  6182               	cpfslt	isdigit@c& (0+255),b
 14226  00448E  D007               	goto	l5218
 14227                           
 14228                           ; BSR set to: 0
 14229  004490  0E2F               	movlw	47
 14230  004492  0100               	movlb	0	; () banked
 14231  004494  6582               	cpfsgt	isdigit@c& (0+255),b
 14232  004496  D003               	goto	l5218
 14233                           
 14234                           ; BSR set to: 0
 14235  004498  0E01               	movlw	1
 14236  00449A  0100               	movlb	0	; () banked
 14237  00449C  6F81               	movwf	_isdigit$1893& (0+255),b
 14238  00449E                     l5218:
 14239                           
 14240                           ; BSR set to: 0
 14241  00449E  C081  F080         	movff	_isdigit$1893,??_isdigit
 14242  0044A2  0100               	movlb	0	; () banked
 14243  0044A4  3180               	rrcf	??_isdigit& (0+255),w,b
 14244  0044A6  0012               	return	
 14245  0044A8                     __end_of_isdigit:
 14246                           	opt stack 0
 14247                           tblptru	equ	0xFF8
 14248                           tblptrh	equ	0xFF7
 14249                           tblptrl	equ	0xFF6
 14250                           tablat	equ	0xFF5
 14251                           prodh	equ	0xFF4
 14252                           prodl	equ	0xFF3
 14253                           intcon	equ	0xFF2
 14254                           intcon2	equ	0xFF1
 14255                           intcon3	equ	0xFF0
 14256                           indf0	equ	0xFEF
 14257                           postinc0	equ	0xFEE
 14258                           fsr0h	equ	0xFEA
 14259                           fsr0l	equ	0xFE9
 14260                           wreg	equ	0xFE8
 14261                           postdec1	equ	0xFE5
 14262                           fsr1l	equ	0xFE1
 14263                           indf2	equ	0xFDF
 14264                           postinc2	equ	0xFDE
 14265                           postdec2	equ	0xFDD
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function ___wmul *****************
 14271 ;; Defined at:
 14272 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14275 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14276 ;; Auto vars:     Size  Location     Type
 14277 ;;  product         2    4[BANK0 ] unsigned int 
 14278 ;; Return value:  Size  Location     Type
 14279 ;;                  2    0[BANK0 ] unsigned int 
 14280 ;; Registers used:
 14281 ;;		wreg, status,2, status,0, prodl, prodh
 14282 ;; Tracked objects:
 14283 ;;		On entry : 0/0
 14284 ;;		On exit  : 0/0
 14285 ;;		Unchanged: 0/0
 14286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14291 ;;Total ram usage:        6 bytes
 14292 ;; Hardware stack levels used:    1
 14293 ;; Hardware stack levels required when called:    7
 14294 ;; This function calls:
 14295 ;;		Nothing
 14296 ;; This function is called by:
 14297 ;;		_printf
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text50
 14302  0041B2                     __ptext50:
 14303                           	opt stack 0
 14304  0041B2                     ___wmul:
 14305                           	opt stack 19
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;incstack = 0
 14309  0041B2  0100               	movlb	0	; () banked
 14310  0041B4  5180               	movf	___wmul@multiplier& (0+255),w,b
 14311  0041B6  0100               	movlb	0	; () banked
 14312  0041B8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14313  0041BA  CFF3 F084          	movff	prodl,___wmul@product
 14314  0041BE  CFF4 F085          	movff	prodh,___wmul@product+1
 14315  0041C2  0100               	movlb	0	; () banked
 14316  0041C4  5180               	movf	___wmul@multiplier& (0+255),w,b
 14317  0041C6  0100               	movlb	0	; () banked
 14318  0041C8  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14319  0041CA  50F3               	movf	prodl,w,c
 14320  0041CC  0100               	movlb	0	; () banked
 14321  0041CE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14322  0041D0  0100               	movlb	0	; () banked
 14323  0041D2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14324  0041D4  0100               	movlb	0	; () banked
 14325  0041D6  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14326  0041D8  50F3               	movf	prodl,w,c
 14327  0041DA  0100               	movlb	0	; () banked
 14328  0041DC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14329                           
 14330                           ; BSR set to: 0
 14331  0041DE  C084  F080         	movff	___wmul@product,?___wmul
 14332  0041E2  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14333  0041E6  0012               	return	
 14334  0041E8                     __end_of___wmul:
 14335                           	opt stack 0
 14336                           tblptru	equ	0xFF8
 14337                           tblptrh	equ	0xFF7
 14338                           tblptrl	equ	0xFF6
 14339                           tablat	equ	0xFF5
 14340                           prodh	equ	0xFF4
 14341                           prodl	equ	0xFF3
 14342                           intcon	equ	0xFF2
 14343                           intcon2	equ	0xFF1
 14344                           intcon3	equ	0xFF0
 14345                           indf0	equ	0xFEF
 14346                           postinc0	equ	0xFEE
 14347                           fsr0h	equ	0xFEA
 14348                           fsr0l	equ	0xFE9
 14349                           wreg	equ	0xFE8
 14350                           postdec1	equ	0xFE5
 14351                           fsr1l	equ	0xFE1
 14352                           indf2	equ	0xFDF
 14353                           postinc2	equ	0xFDE
 14354                           postdec2	equ	0xFDD
 14355                           fsr2h	equ	0xFDA
 14356                           fsr2l	equ	0xFD9
 14357                           status	equ	0xFD8
 14358                           
 14359 ;; *************** function ___lwmod *****************
 14360 ;; Defined at:
 14361 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;  dividend        2    7[BANK0 ] unsigned int 
 14364 ;;  divisor         2    9[BANK0 ] unsigned int 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  counter         1   11[BANK0 ] unsigned char 
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  2    7[BANK0 ] unsigned int 
 14369 ;; Registers used:
 14370 ;;		wreg, status,2, status,0
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14376 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14379 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;Total ram usage:        5 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    7
 14383 ;; This function calls:
 14384 ;;		Nothing
 14385 ;; This function is called by:
 14386 ;;		_printf
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           	psect	text51
 14391  003D30                     __ptext51:
 14392                           	opt stack 0
 14393  003D30                     ___lwmod:
 14394                           	opt stack 19
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;incstack = 0
 14398  003D30  0100               	movlb	0	; () banked
 14399  003D32  5189               	movf	___lwmod@divisor& (0+255),w,b
 14400  003D34  0100               	movlb	0	; () banked
 14401  003D36  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14402  003D38  B4D8               	btfsc	status,2,c
 14403  003D3A  D026               	goto	l1693
 14404                           
 14405                           ; BSR set to: 0
 14406  003D3C  0E01               	movlw	1
 14407  003D3E  0100               	movlb	0	; () banked
 14408  003D40  6F8B               	movwf	___lwmod@counter& (0+255),b
 14409  003D42  D006               	goto	l5256
 14410  003D44                     l5254:
 14411                           
 14412                           ; BSR set to: 0
 14413  003D44  0100               	movlb	0	; () banked
 14414  003D46  90D8               	bcf	status,0,c
 14415  003D48  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14416  003D4A  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14417  003D4C  0100               	movlb	0	; () banked
 14418  003D4E  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14419  003D50                     l5256:
 14420                           
 14421                           ; BSR set to: 0
 14422  003D50  0100               	movlb	0	; () banked
 14423  003D52  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14424  003D54  D7F7               	goto	l5254
 14425  003D56                     l5258:
 14426                           
 14427                           ; BSR set to: 0
 14428  003D56  0100               	movlb	0	; () banked
 14429  003D58  5189               	movf	___lwmod@divisor& (0+255),w,b
 14430  003D5A  0100               	movlb	0	; () banked
 14431  003D5C  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14432  003D5E  0100               	movlb	0	; () banked
 14433  003D60  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14434  003D62  0100               	movlb	0	; () banked
 14435  003D64  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14436  003D66  A0D8               	btfss	status,0,c
 14437  003D68  D008               	goto	l5262
 14438                           
 14439                           ; BSR set to: 0
 14440  003D6A  0100               	movlb	0	; () banked
 14441  003D6C  5189               	movf	___lwmod@divisor& (0+255),w,b
 14442  003D6E  0100               	movlb	0	; () banked
 14443  003D70  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14444  003D72  0100               	movlb	0	; () banked
 14445  003D74  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14446  003D76  0100               	movlb	0	; () banked
 14447  003D78  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14448  003D7A                     l5262:
 14449                           
 14450                           ; BSR set to: 0
 14451  003D7A  0100               	movlb	0	; () banked
 14452  003D7C  90D8               	bcf	status,0,c
 14453  003D7E  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14454  003D80  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14455                           
 14456                           ; BSR set to: 0
 14457  003D82  0100               	movlb	0	; () banked
 14458  003D84  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14459  003D86  D7E7               	goto	l5258
 14460  003D88                     l1693:
 14461                           
 14462                           ; BSR set to: 0
 14463  003D88  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14464  003D8C  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14465                           
 14466                           ; BSR set to: 0
 14467  003D90  0012               	return		;funcret
 14468  003D92                     __end_of___lwmod:
 14469                           	opt stack 0
 14470                           tblptru	equ	0xFF8
 14471                           tblptrh	equ	0xFF7
 14472                           tblptrl	equ	0xFF6
 14473                           tablat	equ	0xFF5
 14474                           prodh	equ	0xFF4
 14475                           prodl	equ	0xFF3
 14476                           intcon	equ	0xFF2
 14477                           intcon2	equ	0xFF1
 14478                           intcon3	equ	0xFF0
 14479                           indf0	equ	0xFEF
 14480                           postinc0	equ	0xFEE
 14481                           fsr0h	equ	0xFEA
 14482                           fsr0l	equ	0xFE9
 14483                           wreg	equ	0xFE8
 14484                           postdec1	equ	0xFE5
 14485                           fsr1l	equ	0xFE1
 14486                           indf2	equ	0xFDF
 14487                           postinc2	equ	0xFDE
 14488                           postdec2	equ	0xFDD
 14489                           fsr2h	equ	0xFDA
 14490                           fsr2l	equ	0xFD9
 14491                           status	equ	0xFD8
 14492                           
 14493 ;; *************** function ___lwdiv *****************
 14494 ;; Defined at:
 14495 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;  dividend        2    0[BANK0 ] unsigned int 
 14498 ;;  divisor         2    2[BANK0 ] unsigned int 
 14499 ;; Auto vars:     Size  Location     Type
 14500 ;;  quotient        2    4[BANK0 ] unsigned int 
 14501 ;;  counter         1    6[BANK0 ] unsigned char 
 14502 ;; Return value:  Size  Location     Type
 14503 ;;                  2    0[BANK0 ] unsigned int 
 14504 ;; Registers used:
 14505 ;;		wreg, status,2, status,0
 14506 ;; Tracked objects:
 14507 ;;		On entry : 0/0
 14508 ;;		On exit  : 0/0
 14509 ;;		Unchanged: 0/0
 14510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14512 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14514 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14515 ;;Total ram usage:        7 bytes
 14516 ;; Hardware stack levels used:    1
 14517 ;; Hardware stack levels required when called:    7
 14518 ;; This function calls:
 14519 ;;		Nothing
 14520 ;; This function is called by:
 14521 ;;		_printf
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           	psect	text52
 14526  003AFE                     __ptext52:
 14527                           	opt stack 0
 14528  003AFE                     ___lwdiv:
 14529                           	opt stack 19
 14530                           
 14531                           ; BSR set to: 0
 14532                           ;incstack = 0
 14533  003AFE  0E00               	movlw	0
 14534  003B00  0100               	movlb	0	; () banked
 14535  003B02  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14536  003B04  0E00               	movlw	0
 14537  003B06  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14538                           
 14539                           ; BSR set to: 0
 14540  003B08  0100               	movlb	0	; () banked
 14541  003B0A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14542  003B0C  0100               	movlb	0	; () banked
 14543  003B0E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14544  003B10  B4D8               	btfsc	status,2,c
 14545  003B12  D02C               	goto	l1683
 14546                           
 14547                           ; BSR set to: 0
 14548  003B14  0E01               	movlw	1
 14549  003B16  0100               	movlb	0	; () banked
 14550  003B18  6F86               	movwf	___lwdiv@counter& (0+255),b
 14551  003B1A  D006               	goto	l5236
 14552  003B1C                     l5234:
 14553                           
 14554                           ; BSR set to: 0
 14555  003B1C  0100               	movlb	0	; () banked
 14556  003B1E  90D8               	bcf	status,0,c
 14557  003B20  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14558  003B22  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14559  003B24  0100               	movlb	0	; () banked
 14560  003B26  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14561  003B28                     l5236:
 14562                           
 14563                           ; BSR set to: 0
 14564  003B28  0100               	movlb	0	; () banked
 14565  003B2A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14566  003B2C  D7F7               	goto	l5234
 14567  003B2E                     l5238:
 14568                           
 14569                           ; BSR set to: 0
 14570  003B2E  0100               	movlb	0	; () banked
 14571  003B30  90D8               	bcf	status,0,c
 14572  003B32  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14573  003B34  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14574                           
 14575                           ; BSR set to: 0
 14576  003B36  0100               	movlb	0	; () banked
 14577  003B38  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14578  003B3A  0100               	movlb	0	; () banked
 14579  003B3C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14580  003B3E  0100               	movlb	0	; () banked
 14581  003B40  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14582  003B42  0100               	movlb	0	; () banked
 14583  003B44  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14584  003B46  A0D8               	btfss	status,0,c
 14585  003B48  D00A               	goto	l5246
 14586                           
 14587                           ; BSR set to: 0
 14588  003B4A  0100               	movlb	0	; () banked
 14589  003B4C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14590  003B4E  0100               	movlb	0	; () banked
 14591  003B50  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14592  003B52  0100               	movlb	0	; () banked
 14593  003B54  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14594  003B56  0100               	movlb	0	; () banked
 14595  003B58  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14596                           
 14597                           ; BSR set to: 0
 14598  003B5A  0100               	movlb	0	; () banked
 14599  003B5C  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14600  003B5E                     l5246:
 14601                           
 14602                           ; BSR set to: 0
 14603  003B5E  0100               	movlb	0	; () banked
 14604  003B60  90D8               	bcf	status,0,c
 14605  003B62  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14606  003B64  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14607                           
 14608                           ; BSR set to: 0
 14609  003B66  0100               	movlb	0	; () banked
 14610  003B68  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14611  003B6A  D7E1               	goto	l5238
 14612  003B6C                     l1683:
 14613                           
 14614                           ; BSR set to: 0
 14615  003B6C  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14616  003B70  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14617                           
 14618                           ; BSR set to: 0
 14619  003B74  0012               	return		;funcret
 14620  003B76                     __end_of___lwdiv:
 14621                           	opt stack 0
 14622                           tblptru	equ	0xFF8
 14623                           tblptrh	equ	0xFF7
 14624                           tblptrl	equ	0xFF6
 14625                           tablat	equ	0xFF5
 14626                           prodh	equ	0xFF4
 14627                           prodl	equ	0xFF3
 14628                           intcon	equ	0xFF2
 14629                           intcon2	equ	0xFF1
 14630                           intcon3	equ	0xFF0
 14631                           indf0	equ	0xFEF
 14632                           postinc0	equ	0xFEE
 14633                           fsr0h	equ	0xFEA
 14634                           fsr0l	equ	0xFE9
 14635                           wreg	equ	0xFE8
 14636                           postdec1	equ	0xFE5
 14637                           fsr1l	equ	0xFE1
 14638                           indf2	equ	0xFDF
 14639                           postinc2	equ	0xFDE
 14640                           postdec2	equ	0xFDD
 14641                           fsr2h	equ	0xFDA
 14642                           fsr2l	equ	0xFD9
 14643                           status	equ	0xFD8
 14644                           
 14645 ;; *************** function _lcdInst *****************
 14646 ;; Defined at:
 14647 ;;		line 15 in file "lcd.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;  data            1    wreg     unsigned char 
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;  data            1    2[BANK0 ] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  1    wreg      void 
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : 0/0
 14658 ;;		On exit  : 0/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;Total ram usage:        1 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    8
 14668 ;; This function calls:
 14669 ;;		_lcdNibble
 14670 ;; This function is called by:
 14671 ;;		_UI
 14672 ;;		_change_state_to_menu_start
 14673 ;;		_change_state_to_menu_12
 14674 ;;		_change_state_to_menu_22
 14675 ;;		_initLCD
 14676 ;;		_printRTC
 14677 ;;		_Loading
 14678 ;;		_EEPROM_write
 14679 ;;		_Test
 14680 ;;		_algorithmTest
 14681 ;;		_sensorTest
 14682 ;;		_actuatorTest
 14683 ;;		_BothServos
 14684 ;;		_PortTestA5
 14685 ;;		_SolenoidTestA5
 14686 ;;		_ToggleTestA5
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           	psect	text53
 14691  004668                     __ptext53:
 14692                           	opt stack 0
 14693  004668                     _lcdInst:
 14694                           	opt stack 20
 14695                           
 14696                           ; BSR set to: 0
 14697                           ;incstack = 0
 14698                           ;lcdInst@data stored from wreg
 14699  004668  0100               	movlb	0	; () banked
 14700  00466A  6F82               	movwf	lcdInst@data& (0+255),b
 14701                           
 14702                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14703  00466C  948C               	bcf	3980,2,c	;volatile
 14704                           
 14705                           ;lcd.c: 17: lcdNibble(data);
 14706  00466E  0100               	movlb	0	; () banked
 14707  004670  5182               	movf	lcdInst@data& (0+255),w,b
 14708  004672  EC64  F01E         	call	_lcdNibble
 14709  004676  0012               	return		;funcret
 14710  004678                     __end_of_lcdInst:
 14711                           	opt stack 0
 14712                           tblptru	equ	0xFF8
 14713                           tblptrh	equ	0xFF7
 14714                           tblptrl	equ	0xFF6
 14715                           tablat	equ	0xFF5
 14716                           prodh	equ	0xFF4
 14717                           prodl	equ	0xFF3
 14718                           intcon	equ	0xFF2
 14719                           intcon2	equ	0xFF1
 14720                           intcon3	equ	0xFF0
 14721                           indf0	equ	0xFEF
 14722                           postinc0	equ	0xFEE
 14723                           fsr0h	equ	0xFEA
 14724                           fsr0l	equ	0xFE9
 14725                           wreg	equ	0xFE8
 14726                           postdec1	equ	0xFE5
 14727                           fsr1l	equ	0xFE1
 14728                           indf2	equ	0xFDF
 14729                           postinc2	equ	0xFDE
 14730                           postdec2	equ	0xFDD
 14731                           fsr2h	equ	0xFDA
 14732                           fsr2l	equ	0xFD9
 14733                           status	equ	0xFD8
 14734                           
 14735 ;; *************** function _lcdNibble *****************
 14736 ;; Defined at:
 14737 ;;		line 25 in file "lcd.c"
 14738 ;; Parameters:    Size  Location     Type
 14739 ;;  data            1    wreg     unsigned char 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  data            1    1[BANK0 ] unsigned char 
 14742 ;;  temp            1    0[BANK0 ] unsigned char 
 14743 ;; Return value:  Size  Location     Type
 14744 ;;                  1    wreg      void 
 14745 ;; Registers used:
 14746 ;;		wreg, status,2, status,0
 14747 ;; Tracked objects:
 14748 ;;		On entry : 0/0
 14749 ;;		On exit  : 0/0
 14750 ;;		Unchanged: 0/0
 14751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;Total ram usage:        2 bytes
 14757 ;; Hardware stack levels used:    1
 14758 ;; Hardware stack levels required when called:    7
 14759 ;; This function calls:
 14760 ;;		Nothing
 14761 ;; This function is called by:
 14762 ;;		_lcdInst
 14763 ;;		_putch
 14764 ;; This function uses a non-reentrant model
 14765 ;;
 14766                           
 14767                           	psect	text54
 14768  003CC8                     __ptext54:
 14769                           	opt stack 0
 14770  003CC8                     _lcdNibble:
 14771                           	opt stack 20
 14772                           
 14773                           ;incstack = 0
 14774                           ;lcdNibble@data stored from wreg
 14775  003CC8  0100               	movlb	0	; () banked
 14776  003CCA  6F81               	movwf	lcdNibble@data& (0+255),b
 14777                           
 14778                           ;lcd.c: 27: char temp = data & 0xF0;
 14779  003CCC  0100               	movlb	0	; () banked
 14780  003CCE  5181               	movf	lcdNibble@data& (0+255),w,b
 14781  003CD0  0BF0               	andlw	240
 14782  003CD2  0100               	movlb	0	; () banked
 14783  003CD4  6F80               	movwf	lcdNibble@temp& (0+255),b
 14784                           
 14785                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14786  003CD6  508C               	movf	3980,w,c	;volatile
 14787  003CD8  0B0F               	andlw	15
 14788  003CDA  6E8C               	movwf	3980,c	;volatile
 14789                           
 14790                           ;lcd.c: 29: LATD = temp | LATD;
 14791  003CDC  0100               	movlb	0	; () banked
 14792  003CDE  5180               	movf	lcdNibble@temp& (0+255),w,b
 14793  003CE0  108C               	iorwf	3980,w,c	;volatile
 14794  003CE2  6E8C               	movwf	3980,c	;volatile
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14798  003CE4  868C               	bsf	3980,3,c	;volatile
 14799                           
 14800                           ; BSR set to: 0
 14801                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14802  003CE6  0E42               	movlw	66
 14803  003CE8                     u8067:
 14804  003CE8  2EE8               	decfsz	wreg,f,c
 14805  003CEA  D7FE               	bra	u8067
 14806  003CEC  D000               	nop2	
 14807                           
 14808                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14809  003CEE  968C               	bcf	3980,3,c	;volatile
 14810                           
 14811                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14812  003CF0  0E42               	movlw	66
 14813  003CF2                     u8077:
 14814  003CF2  2EE8               	decfsz	wreg,f,c
 14815  003CF4  D7FE               	bra	u8077
 14816  003CF6  D000               	nop2	
 14817                           
 14818                           ;lcd.c: 36: data = data << 4;
 14819  003CF8  0100               	movlb	0	; () banked
 14820  003CFA  3981               	swapf	lcdNibble@data& (0+255),w,b
 14821  003CFC  0BF0               	andlw	240
 14822  003CFE  0100               	movlb	0	; () banked
 14823  003D00  6F81               	movwf	lcdNibble@data& (0+255),b
 14824                           
 14825                           ;lcd.c: 38: temp = data & 0xF0;
 14826  003D02  0100               	movlb	0	; () banked
 14827  003D04  5181               	movf	lcdNibble@data& (0+255),w,b
 14828  003D06  0BF0               	andlw	240
 14829  003D08  0100               	movlb	0	; () banked
 14830  003D0A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14831                           
 14832                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14833  003D0C  508C               	movf	3980,w,c	;volatile
 14834  003D0E  0B0F               	andlw	15
 14835  003D10  6E8C               	movwf	3980,c	;volatile
 14836                           
 14837                           ;lcd.c: 40: LATD = temp | LATD;
 14838  003D12  0100               	movlb	0	; () banked
 14839  003D14  5180               	movf	lcdNibble@temp& (0+255),w,b
 14840  003D16  108C               	iorwf	3980,w,c	;volatile
 14841  003D18  6E8C               	movwf	3980,c	;volatile
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14845  003D1A  868C               	bsf	3980,3,c	;volatile
 14846                           
 14847                           ; BSR set to: 0
 14848                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14849  003D1C  0E42               	movlw	66
 14850  003D1E                     u8087:
 14851  003D1E  2EE8               	decfsz	wreg,f,c
 14852  003D20  D7FE               	bra	u8087
 14853  003D22  D000               	nop2	
 14854                           
 14855                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14856  003D24  968C               	bcf	3980,3,c	;volatile
 14857                           
 14858                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14859  003D26  0E42               	movlw	66
 14860  003D28                     u8097:
 14861  003D28  2EE8               	decfsz	wreg,f,c
 14862  003D2A  D7FE               	bra	u8097
 14863  003D2C  D000               	nop2	
 14864  003D2E  0012               	return		;funcret
 14865  003D30                     __end_of_lcdNibble:
 14866                           	opt stack 0
 14867                           tblptru	equ	0xFF8
 14868                           tblptrh	equ	0xFF7
 14869                           tblptrl	equ	0xFF6
 14870                           tablat	equ	0xFF5
 14871                           prodh	equ	0xFF4
 14872                           prodl	equ	0xFF3
 14873                           intcon	equ	0xFF2
 14874                           intcon2	equ	0xFF1
 14875                           intcon3	equ	0xFF0
 14876                           indf0	equ	0xFEF
 14877                           postinc0	equ	0xFEE
 14878                           fsr0h	equ	0xFEA
 14879                           fsr0l	equ	0xFE9
 14880                           wreg	equ	0xFE8
 14881                           postdec1	equ	0xFE5
 14882                           fsr1l	equ	0xFE1
 14883                           indf2	equ	0xFDF
 14884                           postinc2	equ	0xFDE
 14885                           postdec2	equ	0xFDD
 14886                           fsr2h	equ	0xFDA
 14887                           fsr2l	equ	0xFD9
 14888                           status	equ	0xFD8
 14889                           
 14890 ;; *************** function _initServos *****************
 14891 ;; Defined at:
 14892 ;;		line 263 in file "sort.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;		None
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;		None
 14897 ;; Return value:  Size  Location     Type
 14898 ;;                  1    wreg      void 
 14899 ;; Registers used:
 14900 ;;		wreg, status,2, status,0, cstack
 14901 ;; Tracked objects:
 14902 ;;		On entry : 0/0
 14903 ;;		On exit  : 0/0
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;Total ram usage:        1 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; Hardware stack levels required when called:    8
 14913 ;; This function calls:
 14914 ;;		_updateServoPosition
 14915 ;; This function is called by:
 14916 ;;		_Loading
 14917 ;;		_BothServos
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text55
 14922  003E4E                     __ptext55:
 14923                           	opt stack 0
 14924  003E4E                     _initServos:
 14925                           	opt stack 20
 14926                           
 14927                           ;sort.c: 264: updateServoPosition(1200, 1);
 14928                           
 14929                           ;incstack = 0
 14930  003E4E  0E04               	movlw	4
 14931  003E50  0100               	movlb	0	; () banked
 14932  003E52  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14933  003E54  0EB0               	movlw	176
 14934  003E56  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14935  003E58  0E00               	movlw	0
 14936  003E5A  0100               	movlb	0	; () banked
 14937  003E5C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14938  003E5E  0E01               	movlw	1
 14939  003E60  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14940  003E62  ECBB  F01D         	call	_updateServoPosition	;wreg free
 14941                           
 14942                           ;sort.c: 265: updateServoPosition(1190, 3);
 14943  003E66  0E04               	movlw	4
 14944  003E68  0100               	movlb	0	; () banked
 14945  003E6A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14946  003E6C  0EA6               	movlw	166
 14947  003E6E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14948  003E70  0E00               	movlw	0
 14949  003E72  0100               	movlb	0	; () banked
 14950  003E74  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14951  003E76  0E03               	movlw	3
 14952  003E78  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14953  003E7A  ECBB  F01D         	call	_updateServoPosition	;wreg free
 14954                           
 14955                           ;sort.c: 266: TMR1ON = 1;
 14956  003E7E  80CD               	bsf	4045,0,c	;volatile
 14957                           
 14958                           ;sort.c: 267: was_low_1 = 0;
 14959  003E80  0E00               	movlw	0
 14960  003E82  6E7A               	movwf	_was_low_1+1,c	;volatile
 14961  003E84  0E00               	movlw	0
 14962  003E86  6E79               	movwf	_was_low_1,c	;volatile
 14963                           
 14964                           ;sort.c: 268: _delay((unsigned long)((5)*(32000000/4000.0)));
 14965  003E88  0E34               	movlw	52
 14966  003E8A  0100               	movlb	0	; () banked
 14967  003E8C  6F88               	movwf	??_initServos& (0+255),b
 14968  003E8E  0EF1               	movlw	241
 14969  003E90                     u8107:
 14970  003E90  2EE8               	decfsz	wreg,f,c
 14971  003E92  D7FE               	bra	u8107
 14972  003E94  2F88               	decfsz	??_initServos& (0+255),f,b
 14973  003E96  D7FC               	bra	u8107
 14974  003E98  D000               	nop2	
 14975                           
 14976                           ;sort.c: 269: TMR3ON = 1;
 14977  003E9A  80B1               	bsf	4017,0,c	;volatile
 14978                           
 14979                           ;sort.c: 270: was_low_3 = 0;
 14980  003E9C  0E00               	movlw	0
 14981  003E9E  6E7C               	movwf	_was_low_3+1,c	;volatile
 14982  003EA0  0E00               	movlw	0
 14983  003EA2  6E7B               	movwf	_was_low_3,c	;volatile
 14984                           
 14985                           ;sort.c: 271: LATCbits.LATC0 = 1;
 14986  003EA4  808B               	bsf	3979,0,c	;volatile
 14987  003EA6  0012               	return		;funcret
 14988  003EA8                     __end_of_initServos:
 14989                           	opt stack 0
 14990                           tblptru	equ	0xFF8
 14991                           tblptrh	equ	0xFF7
 14992                           tblptrl	equ	0xFF6
 14993                           tablat	equ	0xFF5
 14994                           prodh	equ	0xFF4
 14995                           prodl	equ	0xFF3
 14996                           intcon	equ	0xFF2
 14997                           intcon2	equ	0xFF1
 14998                           intcon3	equ	0xFF0
 14999                           indf0	equ	0xFEF
 15000                           postinc0	equ	0xFEE
 15001                           fsr0h	equ	0xFEA
 15002                           fsr0l	equ	0xFE9
 15003                           wreg	equ	0xFE8
 15004                           postdec1	equ	0xFE5
 15005                           fsr1l	equ	0xFE1
 15006                           indf2	equ	0xFDF
 15007                           postinc2	equ	0xFDE
 15008                           postdec2	equ	0xFDD
 15009                           fsr2h	equ	0xFDA
 15010                           fsr2l	equ	0xFD9
 15011                           status	equ	0xFD8
 15012                           
 15013 ;; *************** function _updateServoPosition *****************
 15014 ;; Defined at:
 15015 ;;		line 313 in file "sort.c"
 15016 ;; Parameters:    Size  Location     Type
 15017 ;;  time_us         2    0[BANK0 ] int 
 15018 ;;  timer           2    2[BANK0 ] int 
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;  my_time         2    6[BANK0 ] unsigned int 
 15021 ;; Return value:  Size  Location     Type
 15022 ;;                  1    wreg      void 
 15023 ;; Registers used:
 15024 ;;		wreg, status,2, status,0
 15025 ;; Tracked objects:
 15026 ;;		On entry : 0/0
 15027 ;;		On exit  : 0/0
 15028 ;;		Unchanged: 0/0
 15029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15030 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15031 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;Total ram usage:        8 bytes
 15035 ;; Hardware stack levels used:    1
 15036 ;; Hardware stack levels required when called:    7
 15037 ;; This function calls:
 15038 ;;		Nothing
 15039 ;; This function is called by:
 15040 ;;		_Distribution
 15041 ;;		_initServos
 15042 ;;		_actuatorTest
 15043 ;;		_BothServos
 15044 ;; This function uses a non-reentrant model
 15045 ;;
 15046                           
 15047                           	psect	text56
 15048  003B76                     __ptext56:
 15049                           	opt stack 0
 15050  003B76                     _updateServoPosition:
 15051                           	opt stack 20
 15052                           
 15053                           ;sort.c: 314: unsigned int my_time = 65535 - time_us;
 15054                           
 15055                           ;incstack = 0
 15056  003B76  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 15057  003B7A  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 15058  003B7E  0100               	movlb	0	; () banked
 15059  003B80  1F84               	comf	??_updateServoPosition& (0+255),f,b
 15060  003B82  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 15061  003B84  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 15062  003B86  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 15063  003B88  0EFF               	movlw	255
 15064  003B8A  0100               	movlb	0	; () banked
 15065  003B8C  2584               	addwf	??_updateServoPosition& (0+255),w,b
 15066  003B8E  0100               	movlb	0	; () banked
 15067  003B90  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 15068  003B92  0EFF               	movlw	255
 15069  003B94  0100               	movlb	0	; () banked
 15070  003B96  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 15071  003B98  0100               	movlb	0	; () banked
 15072  003B9A  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 15073                           
 15074                           ;sort.c: 315: switch(timer){
 15075  003B9C  D015               	goto	l5536
 15076  003B9E                     l5534:
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;sort.c: 317: servoTimes[0] = my_time >> 8;
 15080  003B9E  0100               	movlb	0	; () banked
 15081  003BA0  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15082  003BA2  0101               	movlb	1	; () banked
 15083  003BA4  6F1C               	movwf	_servoTimes& (0+255),b
 15084  003BA6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 15085                           
 15086                           ;sort.c: 318: servoTimes[1] = my_time & 0xFF;
 15087  003BA8  0100               	movlb	0	; () banked
 15088  003BAA  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15089  003BAC  0101               	movlb	1	; () banked
 15090  003BAE  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 15091  003BB0  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 15092  003BB2                     l783:
 15093                           
 15094                           ;sort.c: 320: servoTimes[2] = my_time >> 8;
 15095  003BB2  0100               	movlb	0	; () banked
 15096  003BB4  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 15097  003BB6  0101               	movlb	1	; () banked
 15098  003BB8  6F20               	movwf	(_servoTimes+4)& (0+255),b
 15099  003BBA  6B21               	clrf	(_servoTimes+5)& (0+255),b
 15100                           
 15101                           ;sort.c: 321: servoTimes[3] = my_time & 0xFF;
 15102  003BBC  0100               	movlb	0	; () banked
 15103  003BBE  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 15104  003BC0  0101               	movlb	1	; () banked
 15105  003BC2  6F22               	movwf	(_servoTimes+6)& (0+255),b
 15106  003BC4  6B23               	clrf	(_servoTimes+7)& (0+255),b
 15107                           
 15108                           ;sort.c: 322: }
 15109  003BC6  0012               	return	
 15110  003BC8                     l5536:
 15111  003BC8  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 15112  003BCC  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 15113                           
 15114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15115                           ; Switch size 1, requested type "space"
 15116                           ; Number of cases is 1, Range of values is 0 to 0
 15117                           ; switch strategies available:
 15118                           ; Name         Instructions Cycles
 15119                           ; simple_byte            4     3 (average)
 15120                           ;	Chosen strategy is simple_byte
 15121  003BD0  0100               	movlb	0	; () banked
 15122  003BD2  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 15123  003BD4  0A00               	xorlw	0	; case 0
 15124  003BD6  A4D8               	btfss	status,2,c
 15125  003BD8  0012               	return	
 15126                           
 15127                           ; BSR set to: 0
 15128                           ; Switch size 1, requested type "space"
 15129                           ; Number of cases is 2, Range of values is 1 to 3
 15130                           ; switch strategies available:
 15131                           ; Name         Instructions Cycles
 15132                           ; simple_byte            7     4 (average)
 15133                           ;	Chosen strategy is simple_byte
 15134  003BDA  0100               	movlb	0	; () banked
 15135  003BDC  5184               	movf	??_updateServoPosition& (0+255),w,b
 15136  003BDE  0A01               	xorlw	1	; case 1
 15137  003BE0  B4D8               	btfsc	status,2,c
 15138  003BE2  D7DD               	goto	l5534
 15139  003BE4  0A02               	xorlw	2	; case 3
 15140  003BE6  A4D8               	btfss	status,2,c
 15141  003BE8  0012               	return	
 15142  003BEA  D7E3               	goto	l783
 15143  003BEC                     __end_of_updateServoPosition:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           intcon2	equ	0xFF1
 15153                           intcon3	equ	0xFF0
 15154                           indf0	equ	0xFEF
 15155                           postinc0	equ	0xFEE
 15156                           fsr0h	equ	0xFEA
 15157                           fsr0l	equ	0xFE9
 15158                           wreg	equ	0xFE8
 15159                           postdec1	equ	0xFE5
 15160                           fsr1l	equ	0xFE1
 15161                           indf2	equ	0xFDF
 15162                           postinc2	equ	0xFDE
 15163                           postdec2	equ	0xFDD
 15164                           fsr2h	equ	0xFDA
 15165                           fsr2l	equ	0xFD9
 15166                           status	equ	0xFD8
 15167                           
 15168 ;; *************** function _handler *****************
 15169 ;; Defined at:
 15170 ;;		line 16 in file "interruptHandler.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;		None
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;		None
 15175 ;; Return value:  Size  Location     Type
 15176 ;;                  1    wreg      void 
 15177 ;; Registers used:
 15178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15187 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15188 ;;Total ram usage:       16 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    6
 15191 ;; This function calls:
 15192 ;;		_printSortTimer
 15193 ;;		_updateMenu
 15194 ;; This function is called by:
 15195 ;;		Interrupt level 2
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           	psect	intcode
 15200  000008                     __pintcode:
 15201                           	opt stack 0
 15202  000008                     _handler:
 15203                           	opt stack 18
 15204                           
 15205                           ;incstack = 0
 15206  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15207  00000A  EDC1  F014         	call	int_func,f	;refresh shadow registers
 15208                           tblptru	equ	0xFF8
 15209                           tblptrh	equ	0xFF7
 15210                           tblptrl	equ	0xFF6
 15211                           tablat	equ	0xFF5
 15212                           prodh	equ	0xFF4
 15213                           prodl	equ	0xFF3
 15214                           intcon	equ	0xFF2
 15215                           intcon2	equ	0xFF1
 15216                           intcon3	equ	0xFF0
 15217                           indf0	equ	0xFEF
 15218                           postinc0	equ	0xFEE
 15219                           fsr0h	equ	0xFEA
 15220                           fsr0l	equ	0xFE9
 15221                           wreg	equ	0xFE8
 15222                           postdec1	equ	0xFE5
 15223                           fsr1l	equ	0xFE1
 15224                           indf2	equ	0xFDF
 15225                           postinc2	equ	0xFDE
 15226                           postdec2	equ	0xFDD
 15227                           fsr2h	equ	0xFDA
 15228                           fsr2l	equ	0xFD9
 15229                           status	equ	0xFD8
 15230                           
 15231                           	psect	intcode_body
 15232  002982                     __pintcode_body:
 15233                           	opt stack 18
 15234  002982                     int_func:
 15235                           	opt stack 18
 15236  002982  0006               	pop		; remove dummy address from shadow register refresh
 15237  002984  CFFA F04D          	movff	pclath,??_handler+2
 15238  002988  CFFB F04E          	movff	pclatu,??_handler+3
 15239  00298C  CFE9 F04F          	movff	fsr0l,??_handler+4
 15240  002990  CFEA F050          	movff	fsr0h,??_handler+5
 15241  002994  CFE1 F051          	movff	fsr1l,??_handler+6
 15242  002998  CFE2 F052          	movff	fsr1h,??_handler+7
 15243  00299C  CFD9 F053          	movff	fsr2l,??_handler+8
 15244  0029A0  CFDA F054          	movff	fsr2h,??_handler+9
 15245  0029A4  CFF3 F055          	movff	prodl,??_handler+10
 15246  0029A8  CFF4 F056          	movff	prodh,??_handler+11
 15247  0029AC  CFF6 F057          	movff	tblptrl,??_handler+12
 15248  0029B0  CFF7 F058          	movff	tblptrh,??_handler+13
 15249  0029B4  CFF8 F059          	movff	tblptru,??_handler+14
 15250  0029B8  CFF5 F05A          	movff	tablat,??_handler+15
 15251                           
 15252                           ;interruptHandler.c: 18: if(INT1IF){
 15253  0029BC  A0F0               	btfss	intcon3,0,c	;volatile
 15254  0029BE  D020               	goto	i2l8040
 15255                           
 15256                           ;interruptHandler.c: 19: INT1IF = 0;
 15257  0029C0  90F0               	bcf	intcon3,0,c	;volatile
 15258                           
 15259                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15260  0029C2  0100               	movlb	0	; () banked
 15261  0029C4  51FC               	movf	_machine_state& (0+255),w,b
 15262  0029C6  A4D8               	btfss	status,2,c
 15263  0029C8  D01B               	goto	i2l8040
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15267  0029CA  3881               	swapf	3969,w,c	;volatile
 15268  0029CC  0B0F               	andlw	15
 15269  0029CE  0B0F               	andlw	15
 15270  0029D0  6E4B               	movwf	??_handler& (0+255),c
 15271  0029D2  6A4C               	clrf	(??_handler+1)& (0+255),c
 15272  0029D4  0E27               	movlw	low _keys
 15273  0029D6  244B               	addwf	??_handler,w,c
 15274  0029D8  6EF6               	movwf	tblptrl,c
 15275  0029DA  0EFB               	movlw	high _keys
 15276  0029DC  204C               	addwfc	??_handler+1,w,c
 15277  0029DE  6EF7               	movwf	tblptrh,c
 15278  0029E0                     	if	1	;There are 3 active tblptr bytes
 15279  0029E0  6AF8               	clrf	tblptru,c
 15280  0029E2  0E00               	movlw	low (__mediumconst shr (0+16))
 15281  0029E4  22F8               	addwfc	tblptru,f,c
 15282  0029E6                     	endif
 15283  0029E6  0008               	tblrd		*
 15284  0029E8  CFF5 F07D          	movff	tablat,_input	;volatile
 15285                           
 15286                           ; BSR set to: 0
 15287                           ;interruptHandler.c: 23: if(input == '*'){
 15288  0029EC  0E2A               	movlw	42
 15289  0029EE  187D               	xorwf	_input,w,c	;volatile
 15290  0029F0  A4D8               	btfss	status,2,c
 15291  0029F2  D004               	goto	i2l8038
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15295  0029F4  0E03               	movlw	3
 15296  0029F6  0100               	movlb	0	; () banked
 15297  0029F8  6FFC               	movwf	_machine_state& (0+255),b
 15298                           
 15299                           ;interruptHandler.c: 25: }
 15300  0029FA  D002               	goto	i2l8040
 15301  0029FC                     i2l8038:
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;interruptHandler.c: 26: else{
 15305                           ;interruptHandler.c: 27: updateMenu();
 15306  0029FC  EC68  F00F         	call	_updateMenu	;wreg free
 15307  002A00                     i2l8040:
 15308                           
 15309                           ;interruptHandler.c: 28: }
 15310                           ;interruptHandler.c: 29: }
 15311                           ;interruptHandler.c: 30: }
 15312                           ;interruptHandler.c: 33: if(TMR0IF){
 15313  002A00  A4F2               	btfss	intcon,2,c	;volatile
 15314  002A02  D00C               	goto	i2l8054
 15315                           
 15316                           ;interruptHandler.c: 34: TMR0IF = 0;
 15317  002A04  94F2               	bcf	intcon,2,c	;volatile
 15318                           
 15319                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15320  002A06  0100               	movlb	0	; () banked
 15321  002A08  05FC               	decf	_machine_state& (0+255),w,b
 15322  002A0A  A4D8               	btfss	status,2,c
 15323  002A0C  D007               	goto	i2l8054
 15324                           
 15325                           ; BSR set to: 0
 15326                           ;interruptHandler.c: 36: printSortTimer();
 15327  002A0E  ECE3  F011         	call	_printSortTimer	;wreg free
 15328                           
 15329                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15330  002A12  0E85               	movlw	133
 15331  002A14  6ED7               	movwf	4055,c	;volatile
 15332                           
 15333                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15334  002A16  0EEE               	movlw	238
 15335  002A18  6ED6               	movwf	4054,c	;volatile
 15336                           
 15337                           ;interruptHandler.c: 40: TMR0ON = 1;
 15338  002A1A  8ED5               	bsf	4053,7,c	;volatile
 15339  002A1C                     i2l8054:
 15340                           
 15341                           ;interruptHandler.c: 41: }
 15342                           ;interruptHandler.c: 42: }
 15343                           ;interruptHandler.c: 45: if(TMR1IF){
 15344  002A1C  A09E               	btfss	3998,0,c	;volatile
 15345  002A1E  D024               	goto	i2l8078
 15346                           
 15347                           ;interruptHandler.c: 46: TMR1IF = 0;
 15348  002A20  909E               	bcf	3998,0,c	;volatile
 15349                           
 15350                           ;interruptHandler.c: 47: TMR1ON = 0;
 15351  002A22  90CD               	bcf	4045,0,c	;volatile
 15352                           
 15353                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15354  002A24  0100               	movlb	0	; () banked
 15355  002A26  05FC               	decf	_machine_state& (0+255),w,b
 15356  002A28  A4D8               	btfss	status,2,c
 15357  002A2A  D01E               	goto	i2l8078
 15358                           
 15359                           ; BSR set to: 0
 15360                           ;interruptHandler.c: 49: if(was_low_1){
 15361  002A2C  5079               	movf	_was_low_1,w,c	;volatile
 15362  002A2E  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15363  002A30  B4D8               	btfsc	status,2,c
 15364  002A32  D00A               	goto	i2l848
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15368  002A34  828B               	bsf	3979,1,c	;volatile
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;interruptHandler.c: 51: was_low_1 = 0;
 15372  002A36  0E00               	movlw	0
 15373  002A38  6E7A               	movwf	_was_low_1+1,c	;volatile
 15374  002A3A  0E00               	movlw	0
 15375  002A3C  6E79               	movwf	_was_low_1,c	;volatile
 15376                           
 15377                           ; BSR set to: 0
 15378                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15379  002A3E  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15380                           
 15381                           ; BSR set to: 0
 15382                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15383  002A42  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15384                           
 15385                           ;interruptHandler.c: 54: }
 15386  002A46  D00F               	goto	i2l8076
 15387  002A48                     i2l848:
 15388                           
 15389                           ; BSR set to: 0
 15390                           ;interruptHandler.c: 55: else{
 15391                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15392  002A48  928B               	bcf	3979,1,c	;volatile
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;interruptHandler.c: 57: was_low_1 = 1;
 15396  002A4A  0E00               	movlw	0
 15397  002A4C  6E7A               	movwf	_was_low_1+1,c	;volatile
 15398  002A4E  0E01               	movlw	1
 15399  002A50  6E79               	movwf	_was_low_1,c	;volatile
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15403  002A52  0101               	movlb	1	; () banked
 15404  002A54  511C               	movf	_servoTimes& (0+255),w,b
 15405  002A56  0800               	sublw	0
 15406  002A58  0F20               	addlw	32
 15407  002A5A  6ECF               	movwf	4047,c	;volatile
 15408                           
 15409                           ; BSR set to: 1
 15410                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15411  002A5C  0101               	movlb	1	; () banked
 15412  002A5E  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15413  002A60  0800               	sublw	0
 15414  002A62  0F20               	addlw	32
 15415  002A64  6ECE               	movwf	4046,c	;volatile
 15416  002A66                     i2l8076:
 15417                           
 15418                           ;interruptHandler.c: 60: }
 15419                           ;interruptHandler.c: 61: TMR1ON = 1;
 15420  002A66  80CD               	bsf	4045,0,c	;volatile
 15421  002A68                     i2l8078:
 15422                           
 15423                           ;interruptHandler.c: 62: }
 15424                           ;interruptHandler.c: 63: }
 15425                           ;interruptHandler.c: 65: if(TMR3IF){
 15426  002A68  A2A1               	btfss	4001,1,c	;volatile
 15427  002A6A  D024               	goto	i2l854
 15428                           
 15429                           ;interruptHandler.c: 66: TMR3IF = 0;
 15430  002A6C  92A1               	bcf	4001,1,c	;volatile
 15431                           
 15432                           ;interruptHandler.c: 67: TMR3ON = 0;
 15433  002A6E  90B1               	bcf	4017,0,c	;volatile
 15434                           
 15435                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15436  002A70  0100               	movlb	0	; () banked
 15437  002A72  05FC               	decf	_machine_state& (0+255),w,b
 15438  002A74  A4D8               	btfss	status,2,c
 15439  002A76  D01E               	goto	i2l854
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;interruptHandler.c: 69: if(was_low_3){
 15443  002A78  507B               	movf	_was_low_3,w,c	;volatile
 15444  002A7A  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15445  002A7C  B4D8               	btfsc	status,2,c
 15446  002A7E  D00A               	goto	i2l852
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15450  002A80  848B               	bsf	3979,2,c	;volatile
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;interruptHandler.c: 71: was_low_3 = 0;
 15454  002A82  0E00               	movlw	0
 15455  002A84  6E7C               	movwf	_was_low_3+1,c	;volatile
 15456  002A86  0E00               	movlw	0
 15457  002A88  6E7B               	movwf	_was_low_3,c	;volatile
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15461  002A8A  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15465  002A8E  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15466                           
 15467                           ;interruptHandler.c: 74: }
 15468  002A92  D00F               	goto	i2l8100
 15469  002A94                     i2l852:
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;interruptHandler.c: 75: else{
 15473                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15474  002A94  948B               	bcf	3979,2,c	;volatile
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;interruptHandler.c: 77: was_low_3 = 1;
 15478  002A96  0E00               	movlw	0
 15479  002A98  6E7C               	movwf	_was_low_3+1,c	;volatile
 15480  002A9A  0E01               	movlw	1
 15481  002A9C  6E7B               	movwf	_was_low_3,c	;volatile
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15485  002A9E  0101               	movlb	1	; () banked
 15486  002AA0  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15487  002AA2  0800               	sublw	0
 15488  002AA4  0F20               	addlw	32
 15489  002AA6  6EB3               	movwf	4019,c	;volatile
 15490                           
 15491                           ; BSR set to: 1
 15492                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15493  002AA8  0101               	movlb	1	; () banked
 15494  002AAA  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15495  002AAC  0800               	sublw	0
 15496  002AAE  0F20               	addlw	32
 15497  002AB0  6EB2               	movwf	4018,c	;volatile
 15498  002AB2                     i2l8100:
 15499                           
 15500                           ;interruptHandler.c: 80: }
 15501                           ;interruptHandler.c: 81: TMR3ON = 1;
 15502  002AB2  80B1               	bsf	4017,0,c	;volatile
 15503  002AB4                     i2l854:
 15504  002AB4  C05A  FFF5         	movff	??_handler+15,tablat
 15505  002AB8  C059  FFF8         	movff	??_handler+14,tblptru
 15506  002ABC  C058  FFF7         	movff	??_handler+13,tblptrh
 15507  002AC0  C057  FFF6         	movff	??_handler+12,tblptrl
 15508  002AC4  C056  FFF4         	movff	??_handler+11,prodh
 15509  002AC8  C055  FFF3         	movff	??_handler+10,prodl
 15510  002ACC  C054  FFDA         	movff	??_handler+9,fsr2h
 15511  002AD0  C053  FFD9         	movff	??_handler+8,fsr2l
 15512  002AD4  C052  FFE2         	movff	??_handler+7,fsr1h
 15513  002AD8  C051  FFE1         	movff	??_handler+6,fsr1l
 15514  002ADC  C050  FFEA         	movff	??_handler+5,fsr0h
 15515  002AE0  C04F  FFE9         	movff	??_handler+4,fsr0l
 15516  002AE4  C04E  FFFB         	movff	??_handler+3,pclatu
 15517  002AE8  C04D  FFFA         	movff	??_handler+2,pclath
 15518  002AEC  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15519  002AEE  0011               	retfie		f
 15520  002AF0                     __end_of_handler:
 15521                           	opt stack 0
 15522                           pclatu	equ	0xFFB
 15523                           pclath	equ	0xFFA
 15524                           tblptru	equ	0xFF8
 15525                           tblptrh	equ	0xFF7
 15526                           tblptrl	equ	0xFF6
 15527                           tablat	equ	0xFF5
 15528                           prodh	equ	0xFF4
 15529                           prodl	equ	0xFF3
 15530                           intcon	equ	0xFF2
 15531                           intcon2	equ	0xFF1
 15532                           intcon3	equ	0xFF0
 15533                           indf0	equ	0xFEF
 15534                           postinc0	equ	0xFEE
 15535                           fsr0h	equ	0xFEA
 15536                           fsr0l	equ	0xFE9
 15537                           wreg	equ	0xFE8
 15538                           postdec1	equ	0xFE5
 15539                           fsr1h	equ	0xFE2
 15540                           fsr1l	equ	0xFE1
 15541                           indf2	equ	0xFDF
 15542                           postinc2	equ	0xFDE
 15543                           postdec2	equ	0xFDD
 15544                           fsr2h	equ	0xFDA
 15545                           fsr2l	equ	0xFD9
 15546                           status	equ	0xFD8
 15547                           
 15548 ;; *************** function _updateMenu *****************
 15549 ;; Defined at:
 15550 ;;		line 211 in file "UI.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;		None
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;		None
 15555 ;; Return value:  Size  Location     Type
 15556 ;;                  1    wreg      void 
 15557 ;; Registers used:
 15558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15559 ;; Tracked objects:
 15560 ;;		On entry : 0/0
 15561 ;;		On exit  : 0/0
 15562 ;;		Unchanged: 0/0
 15563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15568 ;;Total ram usage:        2 bytes
 15569 ;; Hardware stack levels used:    1
 15570 ;; Hardware stack levels required when called:    5
 15571 ;; This function calls:
 15572 ;;		_change_state_to_logs_11
 15573 ;;		_change_state_to_logs_12
 15574 ;;		_change_state_to_logs_22
 15575 ;;		_change_state_to_logs_23
 15576 ;;		_change_state_to_logs_33
 15577 ;;		_change_state_to_logs_34
 15578 ;;		_change_state_to_menu_11
 15579 ;;		_change_state_to_menu_23
 15580 ;;		_dispLogs
 15581 ;;		_inputHandler
 15582 ;;		i2_change_state_to_menu_12
 15583 ;;		i2_change_state_to_menu_22
 15584 ;;		i2_change_state_to_menu_start
 15585 ;; This function is called by:
 15586 ;;		_handler
 15587 ;; This function uses a non-reentrant model
 15588 ;;
 15589                           
 15590                           	psect	text58
 15591  001ED0                     __ptext58:
 15592                           	opt stack 0
 15593  001ED0                     _updateMenu:
 15594                           	opt stack 18
 15595                           
 15596                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15597                           
 15598                           ;incstack = 0
 15599  001ED0  0E00               	movlw	0
 15600  001ED2  6E78               	movwf	_up+1,c
 15601  001ED4  0E00               	movlw	0
 15602  001ED6  6E77               	movwf	_up,c
 15603  001ED8  0E00               	movlw	0
 15604  001EDA  6E6A               	movwf	_down+1,c
 15605  001EDC  0E00               	movlw	0
 15606  001EDE  6E69               	movwf	_down,c
 15607  001EE0  0E00               	movlw	0
 15608  001EE2  6E6C               	movwf	_enter+1,c
 15609  001EE4  0E00               	movlw	0
 15610  001EE6  6E6B               	movwf	_enter,c
 15611  001EE8  0E00               	movlw	0
 15612  001EEA  6E5C               	movwf	_back+1,c
 15613  001EEC  0E00               	movlw	0
 15614  001EEE  6E5B               	movwf	_back,c
 15615                           
 15616                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15617  001EF0  9EF2               	bcf	intcon,7,c	;volatile
 15618                           
 15619                           ;UI.c: 215: if (inputHandler()
 15620                           ;UI.c: 218: ){
 15621  001EF2  ECDC  F012         	call	_inputHandler	;wreg free
 15622  001EF6  502A               	movf	?_inputHandler,w,c
 15623  001EF8  102B               	iorwf	?_inputHandler+1,w,c
 15624  001EFA  A4D8               	btfss	status,2,c
 15625  001EFC  D112               	goto	i2l7780
 15626  001EFE  D146               	goto	i2l254
 15627  001F00                     i2l7632:
 15628                           
 15629                           ;UI.c: 222: change_state_to_menu_11();
 15630  001F00  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 15631                           
 15632                           ;UI.c: 223: break;
 15633  001F04  D143               	goto	i2l254
 15634  001F06                     i2l7634:
 15635                           
 15636                           ;UI.c: 226: if(up){
 15637  001F06  5077               	movf	_up,w,c
 15638  001F08  1078               	iorwf	_up+1,w,c
 15639  001F0A  B4D8               	btfsc	status,2,c
 15640  001F0C  D003               	goto	i2l7638
 15641                           
 15642                           ;UI.c: 227: change_state_to_menu_23();
 15643  001F0E  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15644                           
 15645                           ;UI.c: 228: }
 15646  001F12  D13C               	goto	i2l254
 15647  001F14                     i2l7638:
 15648                           
 15649                           ;UI.c: 229: else if(down){
 15650  001F14  5069               	movf	_down,w,c
 15651  001F16  106A               	iorwf	_down+1,w,c
 15652  001F18  B4D8               	btfsc	status,2,c
 15653  001F1A  D003               	goto	i2l7642
 15654                           
 15655                           ;UI.c: 230: change_state_to_menu_12();
 15656  001F1C  EC25  F021         	call	i2_change_state_to_menu_12	;wreg free
 15657                           
 15658                           ;UI.c: 231: }
 15659  001F20  D135               	goto	i2l254
 15660  001F22                     i2l7642:
 15661                           
 15662                           ;UI.c: 232: else if(enter){
 15663  001F22  506B               	movf	_enter,w,c
 15664  001F24  106C               	iorwf	_enter+1,w,c
 15665  001F26  B4D8               	btfsc	status,2,c
 15666  001F28  D131               	goto	i2l254
 15667                           
 15668                           ;UI.c: 233: change_state_to_menu_start();
 15669  001F2A  EC68  F022         	call	i2_change_state_to_menu_start	;wreg free
 15670                           
 15671                           ;UI.c: 234: }
 15672                           ;UI.c: 235: break;
 15673  001F2E  D12E               	goto	i2l254
 15674  001F30                     i2l7646:
 15675                           
 15676                           ;UI.c: 238: if(up){
 15677  001F30  5077               	movf	_up,w,c
 15678  001F32  1078               	iorwf	_up+1,w,c
 15679  001F34  B4D8               	btfsc	status,2,c
 15680  001F36  D003               	goto	i2l7650
 15681                           
 15682                           ;UI.c: 239: change_state_to_menu_11();
 15683  001F38  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 15684                           
 15685                           ;UI.c: 240: }
 15686  001F3C  D127               	goto	i2l254
 15687  001F3E                     i2l7650:
 15688                           
 15689                           ;UI.c: 241: else if(down){
 15690  001F3E  5069               	movf	_down,w,c
 15691  001F40  106A               	iorwf	_down+1,w,c
 15692  001F42  B4D8               	btfsc	status,2,c
 15693  001F44  D011               	goto	i2l7666
 15694                           
 15695                           ;UI.c: 242: change_state_to_menu_23();
 15696  001F46  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15697                           
 15698                           ;UI.c: 243: }
 15699  001F4A  D120               	goto	i2l254
 15700  001F4C                     i2l7658:
 15701                           
 15702                           ;UI.c: 250: if(up){
 15703  001F4C  5077               	movf	_up,w,c
 15704  001F4E  1078               	iorwf	_up+1,w,c
 15705  001F50  B4D8               	btfsc	status,2,c
 15706  001F52  D003               	goto	i2l7662
 15707                           
 15708                           ;UI.c: 251: change_state_to_menu_11();
 15709  001F54  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 15710                           
 15711                           ;UI.c: 252: }
 15712  001F58  D119               	goto	i2l254
 15713  001F5A                     i2l7662:
 15714                           
 15715                           ;UI.c: 253: else if(down){
 15716  001F5A  5069               	movf	_down,w,c
 15717  001F5C  106A               	iorwf	_down+1,w,c
 15718  001F5E  B4D8               	btfsc	status,2,c
 15719  001F60  D003               	goto	i2l7666
 15720                           
 15721                           ;UI.c: 254: change_state_to_menu_23();
 15722  001F62  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15723                           
 15724                           ;UI.c: 255: }
 15725  001F66  D112               	goto	i2l254
 15726  001F68                     i2l7666:
 15727                           
 15728                           ;UI.c: 256: else if(enter){
 15729  001F68  506B               	movf	_enter,w,c
 15730  001F6A  106C               	iorwf	_enter+1,w,c
 15731  001F6C  B4D8               	btfsc	status,2,c
 15732  001F6E  D10E               	goto	i2l254
 15733                           
 15734                           ;UI.c: 257: machine_state = Sorting_state;
 15735  001F70  0E01               	movlw	1
 15736  001F72  0100               	movlb	0	; () banked
 15737  001F74  6FFC               	movwf	_machine_state& (0+255),b
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;UI.c: 258: }
 15741                           ;UI.c: 259: break;
 15742                           
 15743                           ; BSR set to: 0
 15744                           
 15745                           ; BSR set to: 0
 15746  001F76  D10A               	goto	i2l254
 15747  001F78                     i2l7670:
 15748                           
 15749                           ;UI.c: 262: if(up){
 15750  001F78  5077               	movf	_up,w,c
 15751  001F7A  1078               	iorwf	_up+1,w,c
 15752  001F7C  B4D8               	btfsc	status,2,c
 15753  001F7E  D003               	goto	i2l7674
 15754                           
 15755                           ;UI.c: 263: change_state_to_menu_22();
 15756  001F80  EC0D  F021         	call	i2_change_state_to_menu_22	;wreg free
 15757                           
 15758                           ;UI.c: 264: }
 15759  001F84  D103               	goto	i2l254
 15760  001F86                     i2l7674:
 15761                           
 15762                           ;UI.c: 265: else if(down){
 15763  001F86  5069               	movf	_down,w,c
 15764  001F88  106A               	iorwf	_down+1,w,c
 15765  001F8A  B4D8               	btfsc	status,2,c
 15766  001F8C  D003               	goto	i2l7678
 15767                           
 15768                           ;UI.c: 266: change_state_to_menu_11();
 15769  001F8E  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 15770                           
 15771                           ;UI.c: 267: }
 15772  001F92  D0FC               	goto	i2l254
 15773  001F94                     i2l7678:
 15774                           
 15775                           ;UI.c: 268: else if(enter){
 15776  001F94  506B               	movf	_enter,w,c
 15777  001F96  106C               	iorwf	_enter+1,w,c
 15778  001F98  B4D8               	btfsc	status,2,c
 15779  001F9A  D0F8               	goto	i2l254
 15780                           
 15781                           ;UI.c: 269: change_state_to_logs_11();
 15782  001F9C  ECCD  F021         	call	_change_state_to_logs_11	;wreg free
 15783                           
 15784                           ;UI.c: 270: }
 15785                           ;UI.c: 271: break;
 15786  001FA0  D0F5               	goto	i2l254
 15787  001FA2                     i2l7682:
 15788                           
 15789                           ;UI.c: 274: if(up){
 15790  001FA2  5077               	movf	_up,w,c
 15791  001FA4  1078               	iorwf	_up+1,w,c
 15792  001FA6  B4D8               	btfsc	status,2,c
 15793  001FA8  D003               	goto	i2l7686
 15794                           
 15795                           ;UI.c: 275: change_state_to_logs_34();
 15796  001FAA  EC6D  F021         	call	_change_state_to_logs_34	;wreg free
 15797                           
 15798                           ;UI.c: 276: }
 15799  001FAE  D0EE               	goto	i2l254
 15800  001FB0                     i2l7686:
 15801                           
 15802                           ;UI.c: 277: else if(down){
 15803  001FB0  5069               	movf	_down,w,c
 15804  001FB2  106A               	iorwf	_down+1,w,c
 15805  001FB4  B4D8               	btfsc	status,2,c
 15806  001FB6  D003               	goto	i2l7690
 15807                           
 15808                           ;UI.c: 278: change_state_to_logs_12();
 15809  001FB8  ECB5  F021         	call	_change_state_to_logs_12	;wreg free
 15810                           
 15811                           ;UI.c: 279: }
 15812  001FBC  D0E7               	goto	i2l254
 15813  001FBE                     i2l7690:
 15814                           
 15815                           ;UI.c: 280: else if(enter){
 15816  001FBE  506B               	movf	_enter,w,c
 15817  001FC0  106C               	iorwf	_enter+1,w,c
 15818  001FC2  B4D8               	btfsc	status,2,c
 15819  001FC4  D007               	goto	i2l7694
 15820                           
 15821                           ;UI.c: 281: dispLogs(1);
 15822  001FC6  0E00               	movlw	0
 15823  001FC8  6E13               	movwf	dispLogs@myLog+1,c
 15824  001FCA  0E01               	movlw	1
 15825  001FCC  6E12               	movwf	dispLogs@myLog,c
 15826  001FCE  ECB4  F022         	call	_dispLogs	;wreg free
 15827                           
 15828                           ;UI.c: 282: }
 15829  001FD2  D0DC               	goto	i2l254
 15830  001FD4                     i2l7694:
 15831                           
 15832                           ;UI.c: 283: else if(back){
 15833  001FD4  505B               	movf	_back,w,c
 15834  001FD6  105C               	iorwf	_back+1,w,c
 15835  001FD8  B4D8               	btfsc	status,2,c
 15836  001FDA  D0D8               	goto	i2l254
 15837                           
 15838                           ;UI.c: 284: change_state_to_menu_23();
 15839  001FDC  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15840                           
 15841                           ;UI.c: 285: }
 15842                           ;UI.c: 286: break;
 15843  001FE0  D0D5               	goto	i2l254
 15844  001FE2                     i2l7698:
 15845                           
 15846                           ;UI.c: 289: if(up){
 15847  001FE2  5077               	movf	_up,w,c
 15848  001FE4  1078               	iorwf	_up+1,w,c
 15849  001FE6  B4D8               	btfsc	status,2,c
 15850  001FE8  D003               	goto	i2l7702
 15851                           
 15852                           ;UI.c: 290: change_state_to_logs_11();
 15853  001FEA  ECCD  F021         	call	_change_state_to_logs_11	;wreg free
 15854                           
 15855                           ;UI.c: 291: }
 15856  001FEE  D0CE               	goto	i2l254
 15857  001FF0                     i2l7702:
 15858                           
 15859                           ;UI.c: 292: else if(down){
 15860  001FF0  5069               	movf	_down,w,c
 15861  001FF2  106A               	iorwf	_down+1,w,c
 15862  001FF4  B4D8               	btfsc	status,2,c
 15863  001FF6  D003               	goto	i2l7706
 15864                           
 15865                           ;UI.c: 293: change_state_to_logs_23();
 15866  001FF8  ECFC  F021         	call	_change_state_to_logs_23	;wreg free
 15867                           
 15868                           ;UI.c: 294: }
 15869  001FFC  D0C7               	goto	i2l254
 15870  001FFE                     i2l7706:
 15871                           
 15872                           ;UI.c: 295: else if(enter){
 15873  001FFE  506B               	movf	_enter,w,c
 15874  002000  106C               	iorwf	_enter+1,w,c
 15875  002002  B4D8               	btfsc	status,2,c
 15876  002004  D007               	goto	i2l7710
 15877                           
 15878                           ;UI.c: 296: dispLogs(2);
 15879  002006  0E00               	movlw	0
 15880  002008  6E13               	movwf	dispLogs@myLog+1,c
 15881  00200A  0E02               	movlw	2
 15882  00200C  6E12               	movwf	dispLogs@myLog,c
 15883  00200E  ECB4  F022         	call	_dispLogs	;wreg free
 15884                           
 15885                           ;UI.c: 297: }
 15886  002012  D0BC               	goto	i2l254
 15887  002014                     i2l7710:
 15888                           
 15889                           ;UI.c: 298: else if(back){
 15890  002014  505B               	movf	_back,w,c
 15891  002016  105C               	iorwf	_back+1,w,c
 15892  002018  B4D8               	btfsc	status,2,c
 15893  00201A  D0B8               	goto	i2l254
 15894                           
 15895                           ;UI.c: 299: change_state_to_menu_23();
 15896  00201C  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15897                           
 15898                           ;UI.c: 300: }
 15899                           ;UI.c: 301: break;
 15900  002020  D0B5               	goto	i2l254
 15901  002022                     i2l7714:
 15902                           
 15903                           ;UI.c: 304: if(up){
 15904  002022  5077               	movf	_up,w,c
 15905  002024  1078               	iorwf	_up+1,w,c
 15906  002026  B4D8               	btfsc	status,2,c
 15907  002028  D003               	goto	i2l7718
 15908                           
 15909                           ;UI.c: 305: change_state_to_logs_11();
 15910  00202A  ECCD  F021         	call	_change_state_to_logs_11	;wreg free
 15911                           
 15912                           ;UI.c: 306: }
 15913  00202E  D0AE               	goto	i2l254
 15914  002030                     i2l7718:
 15915                           
 15916                           ;UI.c: 307: else if(down){
 15917  002030  5069               	movf	_down,w,c
 15918  002032  106A               	iorwf	_down+1,w,c
 15919  002034  B4D8               	btfsc	status,2,c
 15920  002036  D003               	goto	i2l7722
 15921                           
 15922                           ;UI.c: 308: change_state_to_logs_23();
 15923  002038  ECFC  F021         	call	_change_state_to_logs_23	;wreg free
 15924                           
 15925                           ;UI.c: 309: }
 15926  00203C  D0A7               	goto	i2l254
 15927  00203E                     i2l7722:
 15928                           
 15929                           ;UI.c: 310: else if(enter){
 15930  00203E  506B               	movf	_enter,w,c
 15931  002040  106C               	iorwf	_enter+1,w,c
 15932  002042  B4D8               	btfsc	status,2,c
 15933  002044  D007               	goto	i2l7726
 15934                           
 15935                           ;UI.c: 311: dispLogs(2);
 15936  002046  0E00               	movlw	0
 15937  002048  6E13               	movwf	dispLogs@myLog+1,c
 15938  00204A  0E02               	movlw	2
 15939  00204C  6E12               	movwf	dispLogs@myLog,c
 15940  00204E  ECB4  F022         	call	_dispLogs	;wreg free
 15941                           
 15942                           ;UI.c: 312: }
 15943  002052  D09C               	goto	i2l254
 15944  002054                     i2l7726:
 15945                           
 15946                           ;UI.c: 313: else if(back){
 15947  002054  505B               	movf	_back,w,c
 15948  002056  105C               	iorwf	_back+1,w,c
 15949  002058  B4D8               	btfsc	status,2,c
 15950  00205A  D098               	goto	i2l254
 15951                           
 15952                           ;UI.c: 314: change_state_to_menu_23();
 15953  00205C  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 15954                           
 15955                           ;UI.c: 315: }
 15956                           ;UI.c: 316: break;
 15957  002060  D095               	goto	i2l254
 15958  002062                     i2l7730:
 15959                           
 15960                           ;UI.c: 319: if(up){
 15961  002062  5077               	movf	_up,w,c
 15962  002064  1078               	iorwf	_up+1,w,c
 15963  002066  B4D8               	btfsc	status,2,c
 15964  002068  D003               	goto	i2l7734
 15965                           
 15966                           ;UI.c: 320: change_state_to_logs_22();
 15967  00206A  EC9D  F021         	call	_change_state_to_logs_22	;wreg free
 15968                           
 15969                           ;UI.c: 321: }
 15970  00206E  D08E               	goto	i2l254
 15971  002070                     i2l7734:
 15972                           
 15973                           ;UI.c: 322: else if(down){
 15974  002070  5069               	movf	_down,w,c
 15975  002072  106A               	iorwf	_down+1,w,c
 15976  002074  B4D8               	btfsc	status,2,c
 15977  002076  D003               	goto	i2l7738
 15978                           
 15979                           ;UI.c: 323: change_state_to_logs_34();
 15980  002078  EC6D  F021         	call	_change_state_to_logs_34	;wreg free
 15981                           
 15982                           ;UI.c: 324: }
 15983  00207C  D087               	goto	i2l254
 15984  00207E                     i2l7738:
 15985                           
 15986                           ;UI.c: 325: else if(enter){
 15987  00207E  506B               	movf	_enter,w,c
 15988  002080  106C               	iorwf	_enter+1,w,c
 15989  002082  B4D8               	btfsc	status,2,c
 15990  002084  D007               	goto	i2l7742
 15991                           
 15992                           ;UI.c: 326: dispLogs(3);
 15993  002086  0E00               	movlw	0
 15994  002088  6E13               	movwf	dispLogs@myLog+1,c
 15995  00208A  0E03               	movlw	3
 15996  00208C  6E12               	movwf	dispLogs@myLog,c
 15997  00208E  ECB4  F022         	call	_dispLogs	;wreg free
 15998                           
 15999                           ;UI.c: 327: }
 16000  002092  D07C               	goto	i2l254
 16001  002094                     i2l7742:
 16002                           
 16003                           ;UI.c: 328: else if(back){
 16004  002094  505B               	movf	_back,w,c
 16005  002096  105C               	iorwf	_back+1,w,c
 16006  002098  B4D8               	btfsc	status,2,c
 16007  00209A  D078               	goto	i2l254
 16008                           
 16009                           ;UI.c: 329: change_state_to_menu_23();
 16010  00209C  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 16011                           
 16012                           ;UI.c: 330: }
 16013                           ;UI.c: 331: break;
 16014  0020A0  D075               	goto	i2l254
 16015  0020A2                     i2l7746:
 16016                           
 16017                           ;UI.c: 334: if(up){
 16018  0020A2  5077               	movf	_up,w,c
 16019  0020A4  1078               	iorwf	_up+1,w,c
 16020  0020A6  B4D8               	btfsc	status,2,c
 16021  0020A8  D003               	goto	i2l7750
 16022                           
 16023                           ;UI.c: 335: change_state_to_logs_22();
 16024  0020AA  EC9D  F021         	call	_change_state_to_logs_22	;wreg free
 16025                           
 16026                           ;UI.c: 336: }
 16027  0020AE  D06E               	goto	i2l254
 16028  0020B0                     i2l7750:
 16029                           
 16030                           ;UI.c: 337: else if(down){
 16031  0020B0  5069               	movf	_down,w,c
 16032  0020B2  106A               	iorwf	_down+1,w,c
 16033  0020B4  B4D8               	btfsc	status,2,c
 16034  0020B6  D003               	goto	i2l7754
 16035                           
 16036                           ;UI.c: 338: change_state_to_logs_34();
 16037  0020B8  EC6D  F021         	call	_change_state_to_logs_34	;wreg free
 16038                           
 16039                           ;UI.c: 339: }
 16040  0020BC  D067               	goto	i2l254
 16041  0020BE                     i2l7754:
 16042                           
 16043                           ;UI.c: 340: else if(enter){
 16044  0020BE  506B               	movf	_enter,w,c
 16045  0020C0  106C               	iorwf	_enter+1,w,c
 16046  0020C2  B4D8               	btfsc	status,2,c
 16047  0020C4  D007               	goto	i2l7758
 16048                           
 16049                           ;UI.c: 341: dispLogs(3);
 16050  0020C6  0E00               	movlw	0
 16051  0020C8  6E13               	movwf	dispLogs@myLog+1,c
 16052  0020CA  0E03               	movlw	3
 16053  0020CC  6E12               	movwf	dispLogs@myLog,c
 16054  0020CE  ECB4  F022         	call	_dispLogs	;wreg free
 16055                           
 16056                           ;UI.c: 342: }
 16057  0020D2  D05C               	goto	i2l254
 16058  0020D4                     i2l7758:
 16059                           
 16060                           ;UI.c: 343: else if(back){
 16061  0020D4  505B               	movf	_back,w,c
 16062  0020D6  105C               	iorwf	_back+1,w,c
 16063  0020D8  B4D8               	btfsc	status,2,c
 16064  0020DA  D058               	goto	i2l254
 16065                           
 16066                           ;UI.c: 344: change_state_to_menu_23();
 16067  0020DC  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 16068                           
 16069                           ;UI.c: 345: }
 16070                           ;UI.c: 346: break;
 16071  0020E0  D055               	goto	i2l254
 16072  0020E2                     i2l7762:
 16073                           
 16074                           ;UI.c: 349: if(up){
 16075  0020E2  5077               	movf	_up,w,c
 16076  0020E4  1078               	iorwf	_up+1,w,c
 16077  0020E6  B4D8               	btfsc	status,2,c
 16078  0020E8  D003               	goto	i2l7766
 16079                           
 16080                           ;UI.c: 350: change_state_to_logs_33();
 16081  0020EA  EC85  F021         	call	_change_state_to_logs_33	;wreg free
 16082                           
 16083                           ;UI.c: 351: }
 16084  0020EE  D04E               	goto	i2l254
 16085  0020F0                     i2l7766:
 16086                           
 16087                           ;UI.c: 352: else if(down){
 16088  0020F0  5069               	movf	_down,w,c
 16089  0020F2  106A               	iorwf	_down+1,w,c
 16090  0020F4  B4D8               	btfsc	status,2,c
 16091  0020F6  D003               	goto	i2l7770
 16092                           
 16093                           ;UI.c: 353: change_state_to_logs_11();
 16094  0020F8  ECCD  F021         	call	_change_state_to_logs_11	;wreg free
 16095                           
 16096                           ;UI.c: 354: }
 16097  0020FC  D047               	goto	i2l254
 16098  0020FE                     i2l7770:
 16099                           
 16100                           ;UI.c: 355: else if(enter){
 16101  0020FE  506B               	movf	_enter,w,c
 16102  002100  106C               	iorwf	_enter+1,w,c
 16103  002102  B4D8               	btfsc	status,2,c
 16104  002104  D007               	goto	i2l7774
 16105                           
 16106                           ;UI.c: 356: dispLogs(4);
 16107  002106  0E00               	movlw	0
 16108  002108  6E13               	movwf	dispLogs@myLog+1,c
 16109  00210A  0E04               	movlw	4
 16110  00210C  6E12               	movwf	dispLogs@myLog,c
 16111  00210E  ECB4  F022         	call	_dispLogs	;wreg free
 16112                           
 16113                           ;UI.c: 357: }
 16114  002112  D03C               	goto	i2l254
 16115  002114                     i2l7774:
 16116                           
 16117                           ;UI.c: 358: else if(back){
 16118  002114  505B               	movf	_back,w,c
 16119  002116  105C               	iorwf	_back+1,w,c
 16120  002118  B4D8               	btfsc	status,2,c
 16121  00211A  D038               	goto	i2l254
 16122                           
 16123                           ;UI.c: 359: change_state_to_menu_23();
 16124  00211C  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 16125                           
 16126                           ;UI.c: 365: }
 16127                           
 16128                           ;UI.c: 364: break;
 16129                           
 16130                           ;UI.c: 363: default:
 16131                           
 16132                           ;UI.c: 360: }
 16133                           ;UI.c: 361: break;
 16134  002120  D035               	goto	i2l254
 16135  002122                     i2l7780:
 16136  002122  C0DE  F043         	movff	_cur_state,??_updateMenu
 16137  002126  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 16138                           
 16139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16140                           ; Switch size 1, requested type "space"
 16141                           ; Number of cases is 3, Range of values is 0 to 4
 16142                           ; switch strategies available:
 16143                           ; Name         Instructions Cycles
 16144                           ; simple_byte           10     6 (average)
 16145                           ;	Chosen strategy is simple_byte
 16146  00212A  5044               	movf	??_updateMenu+1,w,c
 16147  00212C  0A00               	xorlw	0	; case 0
 16148  00212E  B4D8               	btfsc	status,2,c
 16149  002130  D007               	goto	i2l8364
 16150  002132  0A03               	xorlw	3	; case 3
 16151  002134  B4D8               	btfsc	status,2,c
 16152  002136  D015               	goto	i2l8366
 16153  002138  0A07               	xorlw	7	; case 4
 16154  00213A  B4D8               	btfsc	status,2,c
 16155  00213C  D020               	goto	i2l8368
 16156  00213E  D026               	goto	i2l254
 16157  002140                     i2l8364:
 16158                           
 16159                           ; Switch size 1, requested type "space"
 16160                           ; Number of cases is 5, Range of values is 0 to 23
 16161                           ; switch strategies available:
 16162                           ; Name         Instructions Cycles
 16163                           ; simple_byte           16     9 (average)
 16164                           ;	Chosen strategy is simple_byte
 16165  002140  5043               	movf	??_updateMenu,w,c
 16166  002142  0A00               	xorlw	0	; case 0
 16167  002144  B4D8               	btfsc	status,2,c
 16168  002146  D6DC               	goto	i2l7632
 16169  002148  0A0B               	xorlw	11	; case 11
 16170  00214A  B4D8               	btfsc	status,2,c
 16171  00214C  D6DC               	goto	i2l7634
 16172  00214E  0A07               	xorlw	7	; case 12
 16173  002150  B4D8               	btfsc	status,2,c
 16174  002152  D6EE               	goto	i2l7646
 16175  002154  0A1A               	xorlw	26	; case 22
 16176  002156  B4D8               	btfsc	status,2,c
 16177  002158  D6F9               	goto	i2l7658
 16178  00215A  0A01               	xorlw	1	; case 23
 16179  00215C  B4D8               	btfsc	status,2,c
 16180  00215E  D70C               	goto	i2l7670
 16181  002160  D015               	goto	i2l254
 16182  002162                     i2l8366:
 16183                           
 16184                           ; Switch size 1, requested type "space"
 16185                           ; Number of cases is 4, Range of values is 243 to 255
 16186                           ; switch strategies available:
 16187                           ; Name         Instructions Cycles
 16188                           ; simple_byte           13     7 (average)
 16189                           ;	Chosen strategy is simple_byte
 16190  002162  5043               	movf	??_updateMenu,w,c
 16191  002164  0AF3               	xorlw	243	; case 243
 16192  002166  B4D8               	btfsc	status,2,c
 16193  002168  D71C               	goto	i2l7682
 16194  00216A  0A07               	xorlw	7	; case 244
 16195  00216C  B4D8               	btfsc	status,2,c
 16196  00216E  D739               	goto	i2l7698
 16197  002170  0A0A               	xorlw	10	; case 254
 16198  002172  B4D8               	btfsc	status,2,c
 16199  002174  D756               	goto	i2l7714
 16200  002176  0A01               	xorlw	1	; case 255
 16201  002178  B4D8               	btfsc	status,2,c
 16202  00217A  D773               	goto	i2l7730
 16203  00217C  D007               	goto	i2l254
 16204  00217E                     i2l8368:
 16205                           
 16206                           ; Switch size 1, requested type "space"
 16207                           ; Number of cases is 2, Range of values is 9 to 10
 16208                           ; switch strategies available:
 16209                           ; Name         Instructions Cycles
 16210                           ; simple_byte            7     4 (average)
 16211                           ;	Chosen strategy is simple_byte
 16212  00217E  5043               	movf	??_updateMenu,w,c
 16213  002180  0A09               	xorlw	9	; case 9
 16214  002182  B4D8               	btfsc	status,2,c
 16215  002184  D78E               	goto	i2l7746
 16216  002186  0A03               	xorlw	3	; case 10
 16217  002188  B4D8               	btfsc	status,2,c
 16218  00218A  D7AB               	goto	i2l7762
 16219  00218C                     i2l254:
 16220                           
 16221                           ;UI.c: 366: }
 16222                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16223  00218C  8EF2               	bsf	intcon,7,c	;volatile
 16224  00218E  0012               	return		;funcret
 16225  002190                     __end_of_updateMenu:
 16226                           	opt stack 0
 16227                           pclatu	equ	0xFFB
 16228                           pclath	equ	0xFFA
 16229                           tblptru	equ	0xFF8
 16230                           tblptrh	equ	0xFF7
 16231                           tblptrl	equ	0xFF6
 16232                           tablat	equ	0xFF5
 16233                           prodh	equ	0xFF4
 16234                           prodl	equ	0xFF3
 16235                           intcon	equ	0xFF2
 16236                           intcon2	equ	0xFF1
 16237                           intcon3	equ	0xFF0
 16238                           indf0	equ	0xFEF
 16239                           postinc0	equ	0xFEE
 16240                           fsr0h	equ	0xFEA
 16241                           fsr0l	equ	0xFE9
 16242                           wreg	equ	0xFE8
 16243                           postdec1	equ	0xFE5
 16244                           fsr1h	equ	0xFE2
 16245                           fsr1l	equ	0xFE1
 16246                           indf2	equ	0xFDF
 16247                           postinc2	equ	0xFDE
 16248                           postdec2	equ	0xFDD
 16249                           fsr2h	equ	0xFDA
 16250                           fsr2l	equ	0xFD9
 16251                           status	equ	0xFD8
 16252                           
 16253 ;; *************** function i2_change_state_to_menu_start *****************
 16254 ;; Defined at:
 16255 ;;		line 472 in file "UI.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;		None
 16258 ;; Auto vars:     Size  Location     Type
 16259 ;;		None
 16260 ;; Return value:  Size  Location     Type
 16261 ;;                  1    wreg      void 
 16262 ;; Registers used:
 16263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16264 ;; Tracked objects:
 16265 ;;		On entry : 0/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16273 ;;Total ram usage:        0 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; Hardware stack levels required when called:    4
 16276 ;; This function calls:
 16277 ;;		i2_lcdInst
 16278 ;;		i2_printRTC
 16279 ;;		i2_printf
 16280 ;; This function is called by:
 16281 ;;		_updateMenu
 16282 ;; This function uses a non-reentrant model
 16283 ;;
 16284                           
 16285                           	psect	text59
 16286  0044D0                     __ptext59:
 16287                           	opt stack 0
 16288  0044D0                     i2_change_state_to_menu_start:
 16289                           	opt stack 18
 16290                           
 16291                           ;UI.c: 473: cur_state = 0;
 16292                           
 16293                           ;incstack = 0
 16294  0044D0  0E00               	movlw	0
 16295  0044D2  0100               	movlb	0	; () banked
 16296  0044D4  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16297  0044D6  0E00               	movlw	0
 16298  0044D8  6FDE               	movwf	_cur_state& (0+255),b
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;UI.c: 475: lcdInst(0b10000000);;
 16302  0044DA  0E80               	movlw	128
 16303  0044DC  EC42  F023         	call	i2_lcdInst
 16304                           
 16305                           ;UI.c: 476: printRTC();
 16306  0044E0  ECC8  F010         	call	i2_printRTC	;wreg free
 16307                           
 16308                           ;UI.c: 477: lcdInst(0b11000000);;
 16309  0044E4  0EC0               	movlw	192
 16310  0044E6  EC42  F023         	call	i2_lcdInst
 16311                           
 16312                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16313  0044EA  0E1F               	movlw	low STR_30
 16314  0044EC  6E0D               	movwf	i2printf@f,c
 16315  0044EE  0EFE               	movlw	high STR_30
 16316  0044F0  6E0E               	movwf	i2printf@f+1,c
 16317  0044F2  ECD4  F00A         	call	i2_printf	;wreg free
 16318  0044F6  0012               	return		;funcret
 16319  0044F8                     __end_ofi2_change_state_to_menu_start:
 16320                           	opt stack 0
 16321                           pclatu	equ	0xFFB
 16322                           pclath	equ	0xFFA
 16323                           tblptru	equ	0xFF8
 16324                           tblptrh	equ	0xFF7
 16325                           tblptrl	equ	0xFF6
 16326                           tablat	equ	0xFF5
 16327                           prodh	equ	0xFF4
 16328                           prodl	equ	0xFF3
 16329                           intcon	equ	0xFF2
 16330                           intcon2	equ	0xFF1
 16331                           intcon3	equ	0xFF0
 16332                           indf0	equ	0xFEF
 16333                           postinc0	equ	0xFEE
 16334                           fsr0h	equ	0xFEA
 16335                           fsr0l	equ	0xFE9
 16336                           wreg	equ	0xFE8
 16337                           postdec1	equ	0xFE5
 16338                           fsr1h	equ	0xFE2
 16339                           fsr1l	equ	0xFE1
 16340                           indf2	equ	0xFDF
 16341                           postinc2	equ	0xFDE
 16342                           postdec2	equ	0xFDD
 16343                           fsr2h	equ	0xFDA
 16344                           fsr2l	equ	0xFD9
 16345                           status	equ	0xFD8
 16346                           
 16347 ;; *************** function i2_printRTC *****************
 16348 ;; Defined at:
 16349 ;;		line 63 in file "RTC.c"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;		None
 16352 ;; Auto vars:     Size  Location     Type
 16353 ;;  printRTC       14   44[COMRAM] int [7]
 16354 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16355 ;;  printRTC        2   64[COMRAM] int 
 16356 ;;  printRTC        2   58[COMRAM] int 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;                  1    wreg      void 
 16359 ;; Registers used:
 16360 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16367 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;Total ram usage:       25 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; Hardware stack levels required when called:    3
 16373 ;; This function calls:
 16374 ;;		i2_getRTC
 16375 ;;		i2_lcdInst
 16376 ;;		i2_printf
 16377 ;;		i2_strcpy
 16378 ;; This function is called by:
 16379 ;;		i2_change_state_to_menu_start
 16380 ;; This function uses a non-reentrant model
 16381 ;;
 16382                           
 16383                           	psect	text60
 16384  002190                     __ptext60:
 16385                           	opt stack 0
 16386  002190                     i2_printRTC:
 16387                           	opt stack 18
 16388                           
 16389                           ;RTC.c: 64: getRTC();
 16390                           
 16391                           ;incstack = 0
 16392  002190  ECF6  F01D         	call	i2_getRTC	;wreg free
 16393                           
 16394                           ;RTC.c: 65: char month[] = "MMM";
 16395  002194  C133  F03D         	movff	printRTC@F3214,i2printRTC@month
 16396  002198  C134  F03E         	movff	printRTC@F3214+1,i2printRTC@month+1
 16397  00219C  C135  F03F         	movff	printRTC@F3214+2,i2printRTC@month+2
 16398  0021A0  C136  F040         	movff	printRTC@F3214+3,i2printRTC@month+3
 16399                           
 16400                           ;RTC.c: 66: int INT_time[7];
 16401                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16402  0021A4  0E00               	movlw	0
 16403  0021A6  6E42               	movwf	i2printRTC@i+1,c
 16404  0021A8  0E00               	movlw	0
 16405  0021AA  6E41               	movwf	i2printRTC@i,c
 16406  0021AC  BE42               	btfsc	i2printRTC@i+1,7,c
 16407  0021AE  D006               	goto	i2l6062
 16408  0021B0  5042               	movf	i2printRTC@i+1,w,c
 16409  0021B2  E135               	bnz	i2l595
 16410  0021B4  0E07               	movlw	7
 16411  0021B6  5C41               	subwf	i2printRTC@i,w,c
 16412  0021B8  B0D8               	btfsc	status,0,c
 16413  0021BA  D031               	goto	i2l595
 16414  0021BC                     i2l6062:
 16415                           
 16416                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16417  0021BC  0E24               	movlw	low _time
 16418  0021BE  2441               	addwf	i2printRTC@i,w,c
 16419  0021C0  6ED9               	movwf	fsr2l,c
 16420  0021C2  0E01               	movlw	high _time
 16421  0021C4  2042               	addwfc	i2printRTC@i+1,w,c
 16422  0021C6  6EDA               	movwf	fsr2h,c
 16423  0021C8  50DF               	movf	indf2,w,c
 16424  0021CA  6E2A               	movwf	??i2_printRTC& (0+255),c
 16425  0021CC  3A2A               	swapf	??i2_printRTC,f,c
 16426  0021CE  0E0F               	movlw	15
 16427  0021D0  162A               	andwf	??i2_printRTC,f,c
 16428  0021D2  0E0F               	movlw	15
 16429  0021D4  162A               	andwf	??i2_printRTC,f,c
 16430  0021D6  502A               	movf	??i2_printRTC,w,c
 16431  0021D8  0D0A               	mullw	10
 16432  0021DA  0E24               	movlw	low _time
 16433  0021DC  2441               	addwf	i2printRTC@i,w,c
 16434  0021DE  6ED9               	movwf	fsr2l,c
 16435  0021E0  0E01               	movlw	high _time
 16436  0021E2  2042               	addwfc	i2printRTC@i+1,w,c
 16437  0021E4  6EDA               	movwf	fsr2h,c
 16438  0021E6  50DF               	movf	indf2,w,c
 16439  0021E8  0B0F               	andlw	15
 16440  0021EA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16441  0021EC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16442  0021EE  50F3               	movf	prodl,w,c
 16443  0021F0  262B               	addwf	??i2_printRTC+1,f,c
 16444  0021F2  50F4               	movf	prodh,w,c
 16445  0021F4  222C               	addwfc	??i2_printRTC+2,f,c
 16446  0021F6  90D8               	bcf	status,0,c
 16447  0021F8  3441               	rlcf	i2printRTC@i,w,c
 16448  0021FA  6ED9               	movwf	fsr2l,c
 16449  0021FC  3442               	rlcf	i2printRTC@i+1,w,c
 16450  0021FE  6EDA               	movwf	fsr2h,c
 16451  002200  0E2D               	movlw	low i2printRTC@INT_time
 16452  002202  26D9               	addwf	fsr2l,f,c
 16453  002204  0E00               	movlw	high i2printRTC@INT_time
 16454  002206  22DA               	addwfc	fsr2h,f,c
 16455  002208  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16456  00220C  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16457  002210  4A41               	infsnz	i2printRTC@i,f,c
 16458  002212  2A42               	incf	i2printRTC@i+1,f,c
 16459  002214  BE42               	btfsc	i2printRTC@i+1,7,c
 16460  002216  D7D2               	goto	i2l6062
 16461  002218  5042               	movf	i2printRTC@i+1,w,c
 16462  00221A  E101               	bnz	i2u461_40
 16463  00221C  D7CB               	goto	L10
 16464  00221E                     i2u461_40:
 16465  00221E                     i2l595:
 16466                           
 16467                           ;RTC.c: 69: }
 16468                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16469  00221E  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16470  002222  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16471                           
 16472                           ;RTC.c: 71: switch(RTC_month){
 16473  002226  D084               	goto	i2l6094
 16474  002228                     i2l6068:
 16475                           
 16476                           ;RTC.c: 73: strcpy(month, "JAN");
 16477  002228  0E3D               	movlw	low i2printRTC@month
 16478  00222A  6E01               	movwf	i2strcpy@to,c
 16479  00222C  0E00               	movlw	high i2printRTC@month
 16480  00222E  6E02               	movwf	i2strcpy@to+1,c
 16481  002230  0EDA               	movlw	low STR_8
 16482  002232  6E03               	movwf	i2strcpy@from,c
 16483  002234  0EFF               	movlw	high STR_8
 16484  002236  6E04               	movwf	i2strcpy@from+1,c
 16485  002238  ECF4  F020         	call	i2_strcpy	;wreg free
 16486                           
 16487                           ;RTC.c: 74: break;
 16488  00223C  D0A6               	goto	i2l6096
 16489  00223E                     i2l6070:
 16490                           
 16491                           ;RTC.c: 76: strcpy(month, "FEB");
 16492  00223E  0E3D               	movlw	low i2printRTC@month
 16493  002240  6E01               	movwf	i2strcpy@to,c
 16494  002242  0E00               	movlw	high i2printRTC@month
 16495  002244  6E02               	movwf	i2strcpy@to+1,c
 16496  002246  0ECA               	movlw	low STR_9
 16497  002248  6E03               	movwf	i2strcpy@from,c
 16498  00224A  0EFF               	movlw	high STR_9
 16499  00224C  6E04               	movwf	i2strcpy@from+1,c
 16500  00224E  ECF4  F020         	call	i2_strcpy	;wreg free
 16501                           
 16502                           ;RTC.c: 77: break;
 16503  002252  D09B               	goto	i2l6096
 16504  002254                     i2l6072:
 16505                           
 16506                           ;RTC.c: 79: strcpy(month, "MAR");
 16507  002254  0E3D               	movlw	low i2printRTC@month
 16508  002256  6E01               	movwf	i2strcpy@to,c
 16509  002258  0E00               	movlw	high i2printRTC@month
 16510  00225A  6E02               	movwf	i2strcpy@to+1,c
 16511  00225C  0EE6               	movlw	low STR_10
 16512  00225E  6E03               	movwf	i2strcpy@from,c
 16513  002260  0EFF               	movlw	high STR_10
 16514  002262  6E04               	movwf	i2strcpy@from+1,c
 16515  002264  ECF4  F020         	call	i2_strcpy	;wreg free
 16516                           
 16517                           ;RTC.c: 80: break;
 16518  002268  D090               	goto	i2l6096
 16519  00226A                     i2l6074:
 16520                           
 16521                           ;RTC.c: 82: strcpy(month, "APR");
 16522  00226A  0E3D               	movlw	low i2printRTC@month
 16523  00226C  6E01               	movwf	i2strcpy@to,c
 16524  00226E  0E00               	movlw	high i2printRTC@month
 16525  002270  6E02               	movwf	i2strcpy@to+1,c
 16526  002272  0EEA               	movlw	low STR_11
 16527  002274  6E03               	movwf	i2strcpy@from,c
 16528  002276  0EFF               	movlw	high STR_11
 16529  002278  6E04               	movwf	i2strcpy@from+1,c
 16530  00227A  ECF4  F020         	call	i2_strcpy	;wreg free
 16531                           
 16532                           ;RTC.c: 83: break;
 16533  00227E  D085               	goto	i2l6096
 16534  002280                     i2l6076:
 16535                           
 16536                           ;RTC.c: 85: strcpy(month, "MAY");
 16537  002280  0E3D               	movlw	low i2printRTC@month
 16538  002282  6E01               	movwf	i2strcpy@to,c
 16539  002284  0E00               	movlw	high i2printRTC@month
 16540  002286  6E02               	movwf	i2strcpy@to+1,c
 16541  002288  0EFA               	movlw	low STR_12
 16542  00228A  6E03               	movwf	i2strcpy@from,c
 16543  00228C  0EFF               	movlw	high STR_12
 16544  00228E  6E04               	movwf	i2strcpy@from+1,c
 16545  002290  ECF4  F020         	call	i2_strcpy	;wreg free
 16546                           
 16547                           ;RTC.c: 86: break;
 16548  002294  D07A               	goto	i2l6096
 16549  002296                     i2l6078:
 16550                           
 16551                           ;RTC.c: 88: strcpy(month, "JUN");
 16552  002296  0E3D               	movlw	low i2printRTC@month
 16553  002298  6E01               	movwf	i2strcpy@to,c
 16554  00229A  0E00               	movlw	high i2printRTC@month
 16555  00229C  6E02               	movwf	i2strcpy@to+1,c
 16556  00229E  0EDE               	movlw	low STR_13
 16557  0022A0  6E03               	movwf	i2strcpy@from,c
 16558  0022A2  0EFF               	movlw	high STR_13
 16559  0022A4  6E04               	movwf	i2strcpy@from+1,c
 16560  0022A6  ECF4  F020         	call	i2_strcpy	;wreg free
 16561                           
 16562                           ;RTC.c: 89: break;
 16563  0022AA  D06F               	goto	i2l6096
 16564  0022AC                     i2l6080:
 16565                           
 16566                           ;RTC.c: 91: strcpy(month, "JUL");
 16567  0022AC  0E3D               	movlw	low i2printRTC@month
 16568  0022AE  6E01               	movwf	i2strcpy@to,c
 16569  0022B0  0E00               	movlw	high i2printRTC@month
 16570  0022B2  6E02               	movwf	i2strcpy@to+1,c
 16571  0022B4  0ED6               	movlw	low STR_14
 16572  0022B6  6E03               	movwf	i2strcpy@from,c
 16573  0022B8  0EFF               	movlw	high STR_14
 16574  0022BA  6E04               	movwf	i2strcpy@from+1,c
 16575  0022BC  ECF4  F020         	call	i2_strcpy	;wreg free
 16576                           
 16577                           ;RTC.c: 92: break;
 16578  0022C0  D064               	goto	i2l6096
 16579  0022C2                     i2l6082:
 16580                           
 16581                           ;RTC.c: 94: strcpy(month, "AUG");
 16582  0022C2  0E3D               	movlw	low i2printRTC@month
 16583  0022C4  6E01               	movwf	i2strcpy@to,c
 16584  0022C6  0E00               	movlw	high i2printRTC@month
 16585  0022C8  6E02               	movwf	i2strcpy@to+1,c
 16586  0022CA  0ED2               	movlw	low STR_15
 16587  0022CC  6E03               	movwf	i2strcpy@from,c
 16588  0022CE  0EFF               	movlw	high STR_15
 16589  0022D0  6E04               	movwf	i2strcpy@from+1,c
 16590  0022D2  ECF4  F020         	call	i2_strcpy	;wreg free
 16591                           
 16592                           ;RTC.c: 95: break;
 16593  0022D6  D059               	goto	i2l6096
 16594  0022D8                     i2l6084:
 16595                           
 16596                           ;RTC.c: 97: strcpy(month, "SEP");
 16597  0022D8  0E3D               	movlw	low i2printRTC@month
 16598  0022DA  6E01               	movwf	i2strcpy@to,c
 16599  0022DC  0E00               	movlw	high i2printRTC@month
 16600  0022DE  6E02               	movwf	i2strcpy@to+1,c
 16601  0022E0  0EE2               	movlw	low STR_16
 16602  0022E2  6E03               	movwf	i2strcpy@from,c
 16603  0022E4  0EFF               	movlw	high STR_16
 16604  0022E6  6E04               	movwf	i2strcpy@from+1,c
 16605  0022E8  ECF4  F020         	call	i2_strcpy	;wreg free
 16606                           
 16607                           ;RTC.c: 98: break;
 16608  0022EC  D04E               	goto	i2l6096
 16609  0022EE                     i2l6086:
 16610                           
 16611                           ;RTC.c: 100: strcpy(month, "OCT");
 16612  0022EE  0E3D               	movlw	low i2printRTC@month
 16613  0022F0  6E01               	movwf	i2strcpy@to,c
 16614  0022F2  0E00               	movlw	high i2printRTC@month
 16615  0022F4  6E02               	movwf	i2strcpy@to+1,c
 16616  0022F6  0EF2               	movlw	low STR_17
 16617  0022F8  6E03               	movwf	i2strcpy@from,c
 16618  0022FA  0EFF               	movlw	high STR_17
 16619  0022FC  6E04               	movwf	i2strcpy@from+1,c
 16620  0022FE  ECF4  F020         	call	i2_strcpy	;wreg free
 16621                           
 16622                           ;RTC.c: 101: break;
 16623  002302  D043               	goto	i2l6096
 16624  002304                     i2l6088:
 16625                           
 16626                           ;RTC.c: 103: strcpy(month, "NOV");
 16627  002304  0E3D               	movlw	low i2printRTC@month
 16628  002306  6E01               	movwf	i2strcpy@to,c
 16629  002308  0E00               	movlw	high i2printRTC@month
 16630  00230A  6E02               	movwf	i2strcpy@to+1,c
 16631  00230C  0EF6               	movlw	low STR_18
 16632  00230E  6E03               	movwf	i2strcpy@from,c
 16633  002310  0EFF               	movlw	high STR_18
 16634  002312  6E04               	movwf	i2strcpy@from+1,c
 16635  002314  ECF4  F020         	call	i2_strcpy	;wreg free
 16636                           
 16637                           ;RTC.c: 104: break;
 16638  002318  D038               	goto	i2l6096
 16639  00231A                     i2l6090:
 16640                           
 16641                           ;RTC.c: 106: strcpy(month, "DEC");
 16642  00231A  0E3D               	movlw	low i2printRTC@month
 16643  00231C  6E01               	movwf	i2strcpy@to,c
 16644  00231E  0E00               	movlw	high i2printRTC@month
 16645  002320  6E02               	movwf	i2strcpy@to+1,c
 16646  002322  0ECE               	movlw	low STR_19
 16647  002324  6E03               	movwf	i2strcpy@from,c
 16648  002326  0EFF               	movlw	high STR_19
 16649  002328  6E04               	movwf	i2strcpy@from+1,c
 16650  00232A  ECF4  F020         	call	i2_strcpy	;wreg free
 16651                           
 16652                           ;RTC.c: 108: }
 16653                           
 16654                           ;RTC.c: 107: break;
 16655  00232E  D02D               	goto	i2l6096
 16656  002330                     i2l6094:
 16657  002330  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16658  002334  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16659                           
 16660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16661                           ; Switch size 1, requested type "space"
 16662                           ; Number of cases is 1, Range of values is 0 to 0
 16663                           ; switch strategies available:
 16664                           ; Name         Instructions Cycles
 16665                           ; simple_byte            4     3 (average)
 16666                           ;	Chosen strategy is simple_byte
 16667  002338  502B               	movf	??i2_printRTC+1,w,c
 16668  00233A  0A00               	xorlw	0	; case 0
 16669  00233C  A4D8               	btfss	status,2,c
 16670  00233E  D025               	goto	i2l6096
 16671                           
 16672                           ; Switch size 1, requested type "space"
 16673                           ; Number of cases is 12, Range of values is 1 to 12
 16674                           ; switch strategies available:
 16675                           ; Name         Instructions Cycles
 16676                           ; simple_byte           37    19 (average)
 16677                           ;	Chosen strategy is simple_byte
 16678  002340  502A               	movf	??i2_printRTC,w,c
 16679  002342  0A01               	xorlw	1	; case 1
 16680  002344  B4D8               	btfsc	status,2,c
 16681  002346  D770               	goto	i2l6068
 16682  002348  0A03               	xorlw	3	; case 2
 16683  00234A  B4D8               	btfsc	status,2,c
 16684  00234C  D778               	goto	i2l6070
 16685  00234E  0A01               	xorlw	1	; case 3
 16686  002350  B4D8               	btfsc	status,2,c
 16687  002352  D780               	goto	i2l6072
 16688  002354  0A07               	xorlw	7	; case 4
 16689  002356  B4D8               	btfsc	status,2,c
 16690  002358  D788               	goto	i2l6074
 16691  00235A  0A01               	xorlw	1	; case 5
 16692  00235C  B4D8               	btfsc	status,2,c
 16693  00235E  D790               	goto	i2l6076
 16694  002360  0A03               	xorlw	3	; case 6
 16695  002362  B4D8               	btfsc	status,2,c
 16696  002364  D798               	goto	i2l6078
 16697  002366  0A01               	xorlw	1	; case 7
 16698  002368  B4D8               	btfsc	status,2,c
 16699  00236A  D7A0               	goto	i2l6080
 16700  00236C  0A0F               	xorlw	15	; case 8
 16701  00236E  B4D8               	btfsc	status,2,c
 16702  002370  D7A8               	goto	i2l6082
 16703  002372  0A01               	xorlw	1	; case 9
 16704  002374  B4D8               	btfsc	status,2,c
 16705  002376  D7B0               	goto	i2l6084
 16706  002378  0A03               	xorlw	3	; case 10
 16707  00237A  B4D8               	btfsc	status,2,c
 16708  00237C  D7B8               	goto	i2l6086
 16709  00237E  0A01               	xorlw	1	; case 11
 16710  002380  B4D8               	btfsc	status,2,c
 16711  002382  D7C0               	goto	i2l6088
 16712  002384  0A07               	xorlw	7	; case 12
 16713  002386  B4D8               	btfsc	status,2,c
 16714  002388  D7C8               	goto	i2l6090
 16715  00238A                     i2l6096:
 16716                           
 16717                           ;RTC.c: 109: lcdInst(0b10000000);;
 16718  00238A  0E80               	movlw	128
 16719  00238C  EC42  F023         	call	i2_lcdInst
 16720                           
 16721                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16722  002390  0E42               	movlw	low STR_21
 16723  002392  6E0D               	movwf	i2printf@f,c
 16724  002394  0EFB               	movlw	high STR_21
 16725  002396  6E0E               	movwf	i2printf@f+1,c
 16726  002398  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16727  00239C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16728  0023A0  0E3D               	movlw	low i2printRTC@month
 16729  0023A2  6E11               	movwf	?i2_printf+4,c
 16730  0023A4  0E00               	movlw	high i2printRTC@month
 16731  0023A6  6E12               	movwf	?i2_printf+5,c
 16732  0023A8  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16733  0023AC  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16734  0023B0  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16735  0023B4  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16736  0023B8  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16737  0023BC  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16738  0023C0  ECD4  F00A         	call	i2_printf	;wreg free
 16739  0023C4  0012               	return		;funcret
 16740  0023C6                     __end_ofi2_printRTC:
 16741                           	opt stack 0
 16742                           pclatu	equ	0xFFB
 16743                           pclath	equ	0xFFA
 16744                           tblptru	equ	0xFF8
 16745                           tblptrh	equ	0xFF7
 16746                           tblptrl	equ	0xFF6
 16747                           tablat	equ	0xFF5
 16748                           prodh	equ	0xFF4
 16749                           prodl	equ	0xFF3
 16750                           intcon	equ	0xFF2
 16751                           intcon2	equ	0xFF1
 16752                           intcon3	equ	0xFF0
 16753                           indf0	equ	0xFEF
 16754                           postinc0	equ	0xFEE
 16755                           fsr0h	equ	0xFEA
 16756                           fsr0l	equ	0xFE9
 16757                           wreg	equ	0xFE8
 16758                           postdec1	equ	0xFE5
 16759                           fsr1h	equ	0xFE2
 16760                           fsr1l	equ	0xFE1
 16761                           indf2	equ	0xFDF
 16762                           postinc2	equ	0xFDE
 16763                           postdec2	equ	0xFDD
 16764                           fsr2h	equ	0xFDA
 16765                           fsr2l	equ	0xFD9
 16766                           status	equ	0xFD8
 16767                           
 16768 ;; *************** function i2_strcpy *****************
 16769 ;; Defined at:
 16770 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16771 ;; Parameters:    Size  Location     Type
 16772 ;;  to              2    0[COMRAM] PTR unsigned char 
 16773 ;;		 -> printRTC@month(4), UI@month(4), 
 16774 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16775 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16776 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16777 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16778 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16779 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16780 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16781 ;;		 -> STR_8(4), 
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16784 ;;		 -> printRTC@month(4), UI@month(4), 
 16785 ;; Return value:  Size  Location     Type
 16786 ;;                  2    0[COMRAM] PTR unsigned char 
 16787 ;; Registers used:
 16788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16797 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16798 ;;Total ram usage:        6 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; This function calls:
 16801 ;;		Nothing
 16802 ;; This function is called by:
 16803 ;;		i2_printRTC
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           	psect	text61
 16808  0041E8                     __ptext61:
 16809                           	opt stack 0
 16810  0041E8                     i2_strcpy:
 16811                           	opt stack 20
 16812                           
 16813                           ;incstack = 0
 16814  0041E8  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16815  0041EC  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16816  0041F0  D004               	goto	i2l5736
 16817  0041F2                     i2l5734:
 16818  0041F2  4A05               	infsnz	i2strcpy@cp,f,c
 16819  0041F4  2A06               	incf	i2strcpy@cp+1,f,c
 16820  0041F6  4A03               	infsnz	i2strcpy@from,f,c
 16821  0041F8  2A04               	incf	i2strcpy@from+1,f,c
 16822  0041FA                     i2l5736:
 16823  0041FA  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16824  0041FE  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16825  004202                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16826  004202  6AF8               	clrf	tblptru,c
 16827  004204                     	endif
 16828  004204                     	if	0	;tblptru may be non-zero
 16829  004204                     	endif
 16830  004204  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16831  004208  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16832  00420C  0008               	tblrd		*
 16833  00420E  CFF5 FFDF          	movff	tablat,indf2
 16834  004212  50DF               	movf	indf2,w,c
 16835  004214  B4D8               	btfsc	status,2,c
 16836  004216  0012               	return	
 16837  004218  D7EC               	goto	i2l5734
 16838  00421A                     __end_ofi2_strcpy:
 16839                           	opt stack 0
 16840                           pclatu	equ	0xFFB
 16841                           pclath	equ	0xFFA
 16842                           tblptru	equ	0xFF8
 16843                           tblptrh	equ	0xFF7
 16844                           tblptrl	equ	0xFF6
 16845                           tablat	equ	0xFF5
 16846                           prodh	equ	0xFF4
 16847                           prodl	equ	0xFF3
 16848                           intcon	equ	0xFF2
 16849                           intcon2	equ	0xFF1
 16850                           intcon3	equ	0xFF0
 16851                           indf0	equ	0xFEF
 16852                           postinc0	equ	0xFEE
 16853                           fsr0h	equ	0xFEA
 16854                           fsr0l	equ	0xFE9
 16855                           wreg	equ	0xFE8
 16856                           postdec1	equ	0xFE5
 16857                           fsr1h	equ	0xFE2
 16858                           fsr1l	equ	0xFE1
 16859                           indf2	equ	0xFDF
 16860                           postinc2	equ	0xFDE
 16861                           postdec2	equ	0xFDD
 16862                           fsr2h	equ	0xFDA
 16863                           fsr2l	equ	0xFD9
 16864                           status	equ	0xFD8
 16865                           
 16866 ;; *************** function _inputHandler *****************
 16867 ;; Defined at:
 16868 ;;		line 370 in file "UI.c"
 16869 ;; Parameters:    Size  Location     Type
 16870 ;;		None
 16871 ;; Auto vars:     Size  Location     Type
 16872 ;;		None
 16873 ;; Return value:  Size  Location     Type
 16874 ;;                  2   41[COMRAM] int 
 16875 ;; Registers used:
 16876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16877 ;; Tracked objects:
 16878 ;;		On entry : 0/0
 16879 ;;		On exit  : 0/0
 16880 ;;		Unchanged: 0/0
 16881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16885 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16886 ;;Total ram usage:        4 bytes
 16887 ;; Hardware stack levels used:    1
 16888 ;; Hardware stack levels required when called:    4
 16889 ;; This function calls:
 16890 ;;		_change_state_to_logs_11
 16891 ;;		_change_state_to_logs_12
 16892 ;;		_change_state_to_logs_22
 16893 ;;		_change_state_to_logs_23
 16894 ;;		_change_state_to_logs_33
 16895 ;;		_change_state_to_logs_34
 16896 ;;		_change_state_to_menu_11
 16897 ;;		_change_state_to_menu_23
 16898 ;;		i2_change_state_to_menu_12
 16899 ;;		i2_change_state_to_menu_22
 16900 ;; This function is called by:
 16901 ;;		_updateMenu
 16902 ;; This function uses a non-reentrant model
 16903 ;;
 16904                           
 16905                           	psect	text62
 16906  0025B8                     __ptext62:
 16907                           	opt stack 0
 16908  0025B8                     _inputHandler:
 16909                           	opt stack 18
 16910                           
 16911                           ;UI.c: 375: if(firstboot){
 16912                           
 16913                           ;incstack = 0
 16914  0025B8  5075               	movf	_firstboot,w,c
 16915  0025BA  1076               	iorwf	_firstboot+1,w,c
 16916  0025BC  B4D8               	btfsc	status,2,c
 16917  0025BE  D00B               	goto	i2l6164
 16918                           
 16919                           ;UI.c: 376: change_state_to_menu_11();
 16920  0025C0  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 16921                           
 16922                           ;UI.c: 377: firstboot = 0;
 16923  0025C4  0E00               	movlw	0
 16924  0025C6  6E76               	movwf	_firstboot+1,c
 16925  0025C8  0E00               	movlw	0
 16926  0025CA  6E75               	movwf	_firstboot,c
 16927                           
 16928                           ;UI.c: 378: return 0;
 16929  0025CC  0E00               	movlw	0
 16930  0025CE  6E2B               	movwf	?_inputHandler+1,c
 16931  0025D0  0E00               	movlw	0
 16932  0025D2  6E2A               	movwf	?_inputHandler,c
 16933  0025D4  0012               	return	
 16934  0025D6                     i2l6164:
 16935                           
 16936                           ;UI.c: 379: }
 16937                           ;UI.c: 380: if (logstate){
 16938  0025D6  0100               	movlb	0	; () banked
 16939  0025D8  51F6               	movf	_logstate& (0+255),w,b
 16940  0025DA  0100               	movlb	0	; () banked
 16941  0025DC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16942  0025DE  B4D8               	btfsc	status,2,c
 16943  0025E0  D0C7               	goto	i2l6282
 16944                           
 16945                           ; BSR set to: 0
 16946                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16947  0025E2  0E43               	movlw	67
 16948  0025E4  187D               	xorwf	_input,w,c	;volatile
 16949  0025E6  A4D8               	btfss	status,2,c
 16950  0025E8  D012               	goto	i2l6182
 16951                           
 16952                           ; BSR set to: 0
 16953  0025EA  B281               	btfsc	3969,1,c	;volatile
 16954  0025EC  D009               	goto	i2l6174
 16955  0025EE  D00F               	goto	i2l6182
 16956  0025F0                     i2l6172:
 16957                           
 16958                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16959  0025F0  0E68               	movlw	104
 16960  0025F2  6E2C               	movwf	??_inputHandler& (0+255),c
 16961  0025F4  0EE4               	movlw	228
 16962  0025F6                     i2u811_47:
 16963  0025F6  2EE8               	decfsz	wreg,f,c
 16964  0025F8  D7FE               	bra	i2u811_47
 16965  0025FA  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16966  0025FC  D7FC               	bra	i2u811_47
 16967  0025FE  D000               	nop2	
 16968  002600                     i2l6174:
 16969  002600  B281               	btfsc	3969,1,c	;volatile
 16970  002602  D7F6               	goto	i2l6172
 16971  002604                     i2l6176:
 16972                           
 16973                           ;UI.c: 385: }
 16974                           ;UI.c: 386: return 0;
 16975  002604  0E00               	movlw	0
 16976  002606  6E2B               	movwf	?_inputHandler+1,c
 16977  002608  0E00               	movlw	0
 16978  00260A  6E2A               	movwf	?_inputHandler,c
 16979  00260C  0012               	return	
 16980  00260E                     i2l6182:
 16981                           
 16982                           ;UI.c: 388: else if (input == 'D'){
 16983  00260E  0E44               	movlw	68
 16984  002610  187D               	xorwf	_input,w,c	;volatile
 16985  002612  A4D8               	btfss	status,2,c
 16986  002614  D7F7               	goto	i2l6176
 16987                           
 16988                           ;UI.c: 390: logstate = 0;
 16989  002616  0E00               	movlw	0
 16990  002618  0100               	movlb	0	; () banked
 16991  00261A  6FF7               	movwf	(_logstate+1)& (0+255),b
 16992  00261C  0E00               	movlw	0
 16993  00261E  6FF6               	movwf	_logstate& (0+255),b
 16994                           
 16995                           ;UI.c: 391: switch(cur_state){
 16996  002620  D012               	goto	i2l6200
 16997  002622                     i2l6186:
 16998                           
 16999                           ;UI.c: 393: change_state_to_logs_11();
 17000  002622  ECCD  F021         	call	_change_state_to_logs_11	;wreg free
 17001                           
 17002                           ;UI.c: 394: break;
 17003  002626  D7EE               	goto	i2l6176
 17004  002628                     i2l6188:
 17005                           
 17006                           ;UI.c: 396: change_state_to_logs_12();
 17007  002628  ECB5  F021         	call	_change_state_to_logs_12	;wreg free
 17008                           
 17009                           ;UI.c: 397: break;
 17010  00262C  D7EB               	goto	i2l6176
 17011  00262E                     i2l6190:
 17012                           
 17013                           ;UI.c: 399: change_state_to_logs_22();
 17014  00262E  EC9D  F021         	call	_change_state_to_logs_22	;wreg free
 17015                           
 17016                           ;UI.c: 400: break;
 17017  002632  D7E8               	goto	i2l6176
 17018  002634                     i2l6192:
 17019                           
 17020                           ;UI.c: 402: change_state_to_logs_23();
 17021  002634  ECFC  F021         	call	_change_state_to_logs_23	;wreg free
 17022                           
 17023                           ;UI.c: 403: break;
 17024  002638  D7E5               	goto	i2l6176
 17025  00263A                     i2l6194:
 17026                           
 17027                           ;UI.c: 405: change_state_to_logs_33();
 17028  00263A  EC85  F021         	call	_change_state_to_logs_33	;wreg free
 17029                           
 17030                           ;UI.c: 406: break;
 17031  00263E  D7E2               	goto	i2l6176
 17032  002640                     i2l6196:
 17033                           
 17034                           ;UI.c: 408: change_state_to_logs_34();
 17035  002640  EC6D  F021         	call	_change_state_to_logs_34	;wreg free
 17036                           
 17037                           ;UI.c: 410: }
 17038                           
 17039                           ;UI.c: 409: break;
 17040  002644  D7DF               	goto	i2l6176
 17041  002646                     i2l6200:
 17042  002646  C0DE  F02C         	movff	_cur_state,??_inputHandler
 17043  00264A  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 17044                           
 17045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17046                           ; Switch size 1, requested type "space"
 17047                           ; Number of cases is 2, Range of values is 3 to 4
 17048                           ; switch strategies available:
 17049                           ; Name         Instructions Cycles
 17050                           ; simple_byte            7     4 (average)
 17051                           ;	Chosen strategy is simple_byte
 17052  00264E  502D               	movf	??_inputHandler+1,w,c
 17053  002650  0A03               	xorlw	3	; case 3
 17054  002652  B4D8               	btfsc	status,2,c
 17055  002654  D004               	goto	i2l8372
 17056  002656  0A07               	xorlw	7	; case 4
 17057  002658  B4D8               	btfsc	status,2,c
 17058  00265A  D00F               	goto	i2l8374
 17059  00265C  D7D3               	goto	i2l6176
 17060  00265E                     i2l8372:
 17061                           
 17062                           ; Switch size 1, requested type "space"
 17063                           ; Number of cases is 4, Range of values is 243 to 255
 17064                           ; switch strategies available:
 17065                           ; Name         Instructions Cycles
 17066                           ; simple_byte           13     7 (average)
 17067                           ;	Chosen strategy is simple_byte
 17068  00265E  502C               	movf	??_inputHandler,w,c
 17069  002660  0AF3               	xorlw	243	; case 243
 17070  002662  B4D8               	btfsc	status,2,c
 17071  002664  D7DE               	goto	i2l6186
 17072  002666  0A07               	xorlw	7	; case 244
 17073  002668  B4D8               	btfsc	status,2,c
 17074  00266A  D7DE               	goto	i2l6188
 17075  00266C  0A0A               	xorlw	10	; case 254
 17076  00266E  B4D8               	btfsc	status,2,c
 17077  002670  D7DE               	goto	i2l6190
 17078  002672  0A01               	xorlw	1	; case 255
 17079  002674  B4D8               	btfsc	status,2,c
 17080  002676  D7DE               	goto	i2l6192
 17081  002678  D7C5               	goto	i2l6176
 17082  00267A                     i2l8374:
 17083                           
 17084                           ; Switch size 1, requested type "space"
 17085                           ; Number of cases is 2, Range of values is 9 to 10
 17086                           ; switch strategies available:
 17087                           ; Name         Instructions Cycles
 17088                           ; simple_byte            7     4 (average)
 17089                           ;	Chosen strategy is simple_byte
 17090  00267A  502C               	movf	??_inputHandler,w,c
 17091  00267C  0A09               	xorlw	9	; case 9
 17092  00267E  B4D8               	btfsc	status,2,c
 17093  002680  D7DC               	goto	i2l6194
 17094  002682  0A03               	xorlw	3	; case 10
 17095  002684  B4D8               	btfsc	status,2,c
 17096  002686  D7DC               	goto	i2l6196
 17097  002688  D7BD               	goto	i2l6176
 17098  00268A                     i2l6212:
 17099                           
 17100                           ;UI.c: 420: if(cur_state == 11){
 17101  00268A  0E0B               	movlw	11
 17102  00268C  0100               	movlb	0	; () banked
 17103  00268E  19DE               	xorwf	_cur_state& (0+255),w,b
 17104  002690  0100               	movlb	0	; () banked
 17105  002692  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17106  002694  A4D8               	btfss	status,2,c
 17107  002696  D005               	goto	i2l6220
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;UI.c: 421: return 0;
 17111  002698  0E00               	movlw	0
 17112  00269A  6E2B               	movwf	?_inputHandler+1,c
 17113  00269C  0E00               	movlw	0
 17114  00269E  6E2A               	movwf	?_inputHandler,c
 17115                           
 17116                           ; BSR set to: 0
 17117  0026A0  0012               	return	
 17118  0026A2                     i2l6220:
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;UI.c: 423: else{
 17122                           ;UI.c: 424: change_state_to_menu_11();
 17123  0026A2  EC55  F021         	call	_change_state_to_menu_11	;wreg free
 17124                           
 17125                           ;UI.c: 425: }
 17126                           ;UI.c: 426: return 0;
 17127  0026A6  0E00               	movlw	0
 17128  0026A8  6E2B               	movwf	?_inputHandler+1,c
 17129  0026AA  0E00               	movlw	0
 17130  0026AC  6E2A               	movwf	?_inputHandler,c
 17131  0026AE  0012               	return	
 17132  0026B0                     i2l6226:
 17133                           
 17134                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 17135  0026B0  0E16               	movlw	22
 17136  0026B2  0100               	movlb	0	; () banked
 17137  0026B4  19DE               	xorwf	_cur_state& (0+255),w,b
 17138  0026B6  0100               	movlb	0	; () banked
 17139  0026B8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17140  0026BA  B4D8               	btfsc	status,2,c
 17141  0026BC  D007               	goto	i2l6230
 17142                           
 17143                           ; BSR set to: 0
 17144  0026BE  0E0C               	movlw	12
 17145  0026C0  0100               	movlb	0	; () banked
 17146  0026C2  19DE               	xorwf	_cur_state& (0+255),w,b
 17147  0026C4  0100               	movlb	0	; () banked
 17148  0026C6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17149  0026C8  A4D8               	btfss	status,2,c
 17150  0026CA  D005               	goto	i2l6236
 17151  0026CC                     i2l6230:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;UI.c: 429: return 0;
 17155  0026CC  0E00               	movlw	0
 17156  0026CE  6E2B               	movwf	?_inputHandler+1,c
 17157  0026D0  0E00               	movlw	0
 17158  0026D2  6E2A               	movwf	?_inputHandler,c
 17159                           
 17160                           ; BSR set to: 0
 17161  0026D4  0012               	return	
 17162  0026D6                     i2l6236:
 17163                           
 17164                           ; BSR set to: 0
 17165                           ;UI.c: 431: else if(cur_state == 23){
 17166  0026D6  0E17               	movlw	23
 17167  0026D8  0100               	movlb	0	; () banked
 17168  0026DA  19DE               	xorwf	_cur_state& (0+255),w,b
 17169  0026DC  0100               	movlb	0	; () banked
 17170  0026DE  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17171  0026E0  A4D8               	btfss	status,2,c
 17172  0026E2  D003               	goto	i2l6240
 17173                           
 17174                           ; BSR set to: 0
 17175                           ;UI.c: 432: change_state_to_menu_22();
 17176  0026E4  EC0D  F021         	call	i2_change_state_to_menu_22	;wreg free
 17177                           
 17178                           ;UI.c: 433: }
 17179  0026E8  D002               	goto	i2l6242
 17180  0026EA                     i2l6240:
 17181                           
 17182                           ;UI.c: 434: else{
 17183                           ;UI.c: 435: change_state_to_menu_12();
 17184  0026EA  EC25  F021         	call	i2_change_state_to_menu_12	;wreg free
 17185  0026EE                     i2l6242:
 17186                           
 17187                           ;UI.c: 436: }
 17188                           ;UI.c: 437: return 0;
 17189  0026EE  0E00               	movlw	0
 17190  0026F0  6E2B               	movwf	?_inputHandler+1,c
 17191  0026F2  0E00               	movlw	0
 17192  0026F4  6E2A               	movwf	?_inputHandler,c
 17193  0026F6  0012               	return	
 17194  0026F8                     i2l6246:
 17195                           
 17196                           ;UI.c: 439: if(cur_state == 23){
 17197  0026F8  0E17               	movlw	23
 17198  0026FA  0100               	movlb	0	; () banked
 17199  0026FC  19DE               	xorwf	_cur_state& (0+255),w,b
 17200  0026FE  0100               	movlb	0	; () banked
 17201  002700  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 17202  002702  A4D8               	btfss	status,2,c
 17203  002704  D005               	goto	i2l6254
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;UI.c: 440: return 0;
 17207  002706  0E00               	movlw	0
 17208  002708  6E2B               	movwf	?_inputHandler+1,c
 17209  00270A  0E00               	movlw	0
 17210  00270C  6E2A               	movwf	?_inputHandler,c
 17211                           
 17212                           ; BSR set to: 0
 17213  00270E  0012               	return	
 17214  002710                     i2l6254:
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;UI.c: 442: else{
 17218                           ;UI.c: 443: change_state_to_menu_23();
 17219  002710  EC3D  F021         	call	_change_state_to_menu_23	;wreg free
 17220                           
 17221                           ;UI.c: 444: }
 17222                           ;UI.c: 445: return 0;
 17223  002714  0E00               	movlw	0
 17224  002716  6E2B               	movwf	?_inputHandler+1,c
 17225  002718  0E00               	movlw	0
 17226  00271A  6E2A               	movwf	?_inputHandler,c
 17227  00271C  0012               	return	
 17228  00271E                     i2l6260:
 17229                           
 17230                           ;UI.c: 448: up = 1;
 17231  00271E  0E00               	movlw	0
 17232  002720  6E78               	movwf	_up+1,c
 17233  002722  0E01               	movlw	1
 17234  002724  6E77               	movwf	_up,c
 17235                           
 17236                           ;UI.c: 449: return 1;
 17237  002726  0E00               	movlw	0
 17238  002728  6E2B               	movwf	?_inputHandler+1,c
 17239  00272A  0E01               	movlw	1
 17240  00272C  6E2A               	movwf	?_inputHandler,c
 17241  00272E  0012               	return	
 17242  002730                     i2l6264:
 17243                           
 17244                           ;UI.c: 451: down = 1;
 17245  002730  0E00               	movlw	0
 17246  002732  6E6A               	movwf	_down+1,c
 17247  002734  0E01               	movlw	1
 17248  002736  6E69               	movwf	_down,c
 17249                           
 17250                           ;UI.c: 452: return 1;
 17251  002738  0E00               	movlw	0
 17252  00273A  6E2B               	movwf	?_inputHandler+1,c
 17253  00273C  0E01               	movlw	1
 17254  00273E  6E2A               	movwf	?_inputHandler,c
 17255  002740  0012               	return	
 17256  002742                     i2l6268:
 17257                           
 17258                           ;UI.c: 454: enter = 1;
 17259  002742  0E00               	movlw	0
 17260  002744  6E6C               	movwf	_enter+1,c
 17261  002746  0E01               	movlw	1
 17262  002748  6E6B               	movwf	_enter,c
 17263                           
 17264                           ;UI.c: 455: return 1;
 17265  00274A  0E00               	movlw	0
 17266  00274C  6E2B               	movwf	?_inputHandler+1,c
 17267  00274E  0E01               	movlw	1
 17268  002750  6E2A               	movwf	?_inputHandler,c
 17269  002752  0012               	return	
 17270  002754                     i2l6272:
 17271                           
 17272                           ;UI.c: 457: back = 1;
 17273  002754  0E00               	movlw	0
 17274  002756  6E5C               	movwf	_back+1,c
 17275  002758  0E01               	movlw	1
 17276  00275A  6E5B               	movwf	_back,c
 17277                           
 17278                           ;UI.c: 458: return 1;
 17279  00275C  0E00               	movlw	0
 17280  00275E  6E2B               	movwf	?_inputHandler+1,c
 17281  002760  0E01               	movlw	1
 17282  002762  6E2A               	movwf	?_inputHandler,c
 17283  002764  0012               	return	
 17284  002766                     i2l6276:
 17285                           
 17286                           ;UI.c: 461: return 1;
 17287  002766  0E00               	movlw	0
 17288  002768  6E2B               	movwf	?_inputHandler+1,c
 17289  00276A  0E01               	movlw	1
 17290  00276C  6E2A               	movwf	?_inputHandler,c
 17291                           
 17292                           ;UI.c: 462: }
 17293  00276E  0012               	return	
 17294  002770                     i2l6282:
 17295  002770  507D               	movf	_input,w,c	;volatile
 17296                           
 17297                           ; Switch size 1, requested type "space"
 17298                           ; Number of cases is 7, Range of values is 49 to 68
 17299                           ; switch strategies available:
 17300                           ; Name         Instructions Cycles
 17301                           ; simple_byte           22    12 (average)
 17302                           ;	Chosen strategy is simple_byte
 17303  002772  0A31               	xorlw	49	; case 49
 17304  002774  B4D8               	btfsc	status,2,c
 17305  002776  D789               	goto	i2l6212
 17306  002778  0A03               	xorlw	3	; case 50
 17307  00277A  B4D8               	btfsc	status,2,c
 17308  00277C  D799               	goto	i2l6226
 17309  00277E  0A01               	xorlw	1	; case 51
 17310  002780  B4D8               	btfsc	status,2,c
 17311  002782  D7BA               	goto	i2l6246
 17312  002784  0A72               	xorlw	114	; case 65
 17313  002786  B4D8               	btfsc	status,2,c
 17314  002788  D7CA               	goto	i2l6260
 17315  00278A  0A03               	xorlw	3	; case 66
 17316  00278C  B4D8               	btfsc	status,2,c
 17317  00278E  D7D0               	goto	i2l6264
 17318  002790  0A01               	xorlw	1	; case 67
 17319  002792  B4D8               	btfsc	status,2,c
 17320  002794  D7D6               	goto	i2l6268
 17321  002796  0A07               	xorlw	7	; case 68
 17322  002798  B4D8               	btfsc	status,2,c
 17323  00279A  D7DC               	goto	i2l6272
 17324  00279C  D7E4               	goto	i2l6276
 17325  00279E                     __end_of_inputHandler:
 17326                           	opt stack 0
 17327                           pclatu	equ	0xFFB
 17328                           pclath	equ	0xFFA
 17329                           tblptru	equ	0xFF8
 17330                           tblptrh	equ	0xFF7
 17331                           tblptrl	equ	0xFF6
 17332                           tablat	equ	0xFF5
 17333                           prodh	equ	0xFF4
 17334                           prodl	equ	0xFF3
 17335                           intcon	equ	0xFF2
 17336                           intcon2	equ	0xFF1
 17337                           intcon3	equ	0xFF0
 17338                           indf0	equ	0xFEF
 17339                           postinc0	equ	0xFEE
 17340                           fsr0h	equ	0xFEA
 17341                           fsr0l	equ	0xFE9
 17342                           wreg	equ	0xFE8
 17343                           postdec1	equ	0xFE5
 17344                           fsr1h	equ	0xFE2
 17345                           fsr1l	equ	0xFE1
 17346                           indf2	equ	0xFDF
 17347                           postinc2	equ	0xFDE
 17348                           postdec2	equ	0xFDD
 17349                           fsr2h	equ	0xFDA
 17350                           fsr2l	equ	0xFD9
 17351                           status	equ	0xFD8
 17352                           
 17353 ;; *************** function i2_change_state_to_menu_22 *****************
 17354 ;; Defined at:
 17355 ;;		line 496 in file "UI.c"
 17356 ;; Parameters:    Size  Location     Type
 17357 ;;		None
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;		None
 17360 ;; Return value:  Size  Location     Type
 17361 ;;                  1    wreg      void 
 17362 ;; Registers used:
 17363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17364 ;; Tracked objects:
 17365 ;;		On entry : 0/0
 17366 ;;		On exit  : 0/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17373 ;;Total ram usage:        0 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    3
 17376 ;; This function calls:
 17377 ;;		i2_lcdInst
 17378 ;;		i2_printf
 17379 ;; This function is called by:
 17380 ;;		_updateMenu
 17381 ;;		_inputHandler
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           	psect	text63
 17386  00421A                     __ptext63:
 17387                           	opt stack 0
 17388  00421A                     i2_change_state_to_menu_22:
 17389                           	opt stack 19
 17390                           
 17391                           ;UI.c: 497: cur_state = 22;
 17392                           
 17393                           ;incstack = 0
 17394  00421A  0E00               	movlw	0
 17395  00421C  0100               	movlb	0	; () banked
 17396  00421E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17397  004220  0E16               	movlw	22
 17398  004222  6FDE               	movwf	_cur_state& (0+255),b
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;UI.c: 499: lcdInst(0b10000000);;
 17402  004224  0E80               	movlw	128
 17403  004226  EC42  F023         	call	i2_lcdInst
 17404                           
 17405                           ;UI.c: 500: printf("2. SORT        <");
 17406  00422A  0EEC               	movlw	low STR_34
 17407  00422C  6E0D               	movwf	i2printf@f,c
 17408  00422E  0EFD               	movlw	high STR_34
 17409  004230  6E0E               	movwf	i2printf@f+1,c
 17410  004232  ECD4  F00A         	call	i2_printf	;wreg free
 17411                           
 17412                           ;UI.c: 501: lcdInst(0b11000000);;
 17413  004236  0EC0               	movlw	192
 17414  004238  EC42  F023         	call	i2_lcdInst
 17415                           
 17416                           ;UI.c: 502: printf("3. LOGS         ");
 17417  00423C  0E31               	movlw	low STR_36
 17418  00423E  6E0D               	movwf	i2printf@f,c
 17419  004240  0EFD               	movlw	high STR_36
 17420  004242  6E0E               	movwf	i2printf@f+1,c
 17421  004244  ECD4  F00A         	call	i2_printf	;wreg free
 17422  004248  0012               	return		;funcret
 17423  00424A                     __end_ofi2_change_state_to_menu_22:
 17424                           	opt stack 0
 17425                           pclatu	equ	0xFFB
 17426                           pclath	equ	0xFFA
 17427                           tblptru	equ	0xFF8
 17428                           tblptrh	equ	0xFF7
 17429                           tblptrl	equ	0xFF6
 17430                           tablat	equ	0xFF5
 17431                           prodh	equ	0xFF4
 17432                           prodl	equ	0xFF3
 17433                           intcon	equ	0xFF2
 17434                           intcon2	equ	0xFF1
 17435                           intcon3	equ	0xFF0
 17436                           indf0	equ	0xFEF
 17437                           postinc0	equ	0xFEE
 17438                           fsr0h	equ	0xFEA
 17439                           fsr0l	equ	0xFE9
 17440                           wreg	equ	0xFE8
 17441                           postdec1	equ	0xFE5
 17442                           fsr1h	equ	0xFE2
 17443                           fsr1l	equ	0xFE1
 17444                           indf2	equ	0xFDF
 17445                           postinc2	equ	0xFDE
 17446                           postdec2	equ	0xFDD
 17447                           fsr2h	equ	0xFDA
 17448                           fsr2l	equ	0xFD9
 17449                           status	equ	0xFD8
 17450                           
 17451 ;; *************** function i2_change_state_to_menu_12 *****************
 17452 ;; Defined at:
 17453 ;;		line 488 in file "UI.c"
 17454 ;; Parameters:    Size  Location     Type
 17455 ;;		None
 17456 ;; Auto vars:     Size  Location     Type
 17457 ;;		None
 17458 ;; Return value:  Size  Location     Type
 17459 ;;                  1    wreg      void 
 17460 ;; Registers used:
 17461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17462 ;; Tracked objects:
 17463 ;;		On entry : 0/0
 17464 ;;		On exit  : 0/0
 17465 ;;		Unchanged: 0/0
 17466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;Total ram usage:        0 bytes
 17472 ;; Hardware stack levels used:    1
 17473 ;; Hardware stack levels required when called:    3
 17474 ;; This function calls:
 17475 ;;		i2_lcdInst
 17476 ;;		i2_printf
 17477 ;; This function is called by:
 17478 ;;		_updateMenu
 17479 ;;		_inputHandler
 17480 ;; This function uses a non-reentrant model
 17481 ;;
 17482                           
 17483                           	psect	text64
 17484  00424A                     __ptext64:
 17485                           	opt stack 0
 17486  00424A                     i2_change_state_to_menu_12:
 17487                           	opt stack 19
 17488                           
 17489                           ;UI.c: 489: cur_state = 12;
 17490                           
 17491                           ;incstack = 0
 17492  00424A  0E00               	movlw	0
 17493  00424C  0100               	movlb	0	; () banked
 17494  00424E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17495  004250  0E0C               	movlw	12
 17496  004252  6FDE               	movwf	_cur_state& (0+255),b
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;UI.c: 491: lcdInst(0b10000000);;
 17500  004254  0E80               	movlw	128
 17501  004256  EC42  F023         	call	i2_lcdInst
 17502                           
 17503                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17504  00425A  0E53               	movlw	low STR_33
 17505  00425C  6E0D               	movwf	i2printf@f,c
 17506  00425E  0EFD               	movlw	high STR_33
 17507  004260  6E0E               	movwf	i2printf@f+1,c
 17508  004262  ECD4  F00A         	call	i2_printf	;wreg free
 17509                           
 17510                           ;UI.c: 493: lcdInst(0b11000000);;
 17511  004266  0EC0               	movlw	192
 17512  004268  EC42  F023         	call	i2_lcdInst
 17513                           
 17514                           ;UI.c: 494: printf("2. SORT        <");
 17515  00426C  0EEC               	movlw	low STR_34
 17516  00426E  6E0D               	movwf	i2printf@f,c
 17517  004270  0EFD               	movlw	high STR_34
 17518  004272  6E0E               	movwf	i2printf@f+1,c
 17519  004274  ECD4  F00A         	call	i2_printf	;wreg free
 17520  004278  0012               	return		;funcret
 17521  00427A                     __end_ofi2_change_state_to_menu_12:
 17522                           	opt stack 0
 17523                           pclatu	equ	0xFFB
 17524                           pclath	equ	0xFFA
 17525                           tblptru	equ	0xFF8
 17526                           tblptrh	equ	0xFF7
 17527                           tblptrl	equ	0xFF6
 17528                           tablat	equ	0xFF5
 17529                           prodh	equ	0xFF4
 17530                           prodl	equ	0xFF3
 17531                           intcon	equ	0xFF2
 17532                           intcon2	equ	0xFF1
 17533                           intcon3	equ	0xFF0
 17534                           indf0	equ	0xFEF
 17535                           postinc0	equ	0xFEE
 17536                           fsr0h	equ	0xFEA
 17537                           fsr0l	equ	0xFE9
 17538                           wreg	equ	0xFE8
 17539                           postdec1	equ	0xFE5
 17540                           fsr1h	equ	0xFE2
 17541                           fsr1l	equ	0xFE1
 17542                           indf2	equ	0xFDF
 17543                           postinc2	equ	0xFDE
 17544                           postdec2	equ	0xFDD
 17545                           fsr2h	equ	0xFDA
 17546                           fsr2l	equ	0xFD9
 17547                           status	equ	0xFD8
 17548                           
 17549 ;; *************** function _change_state_to_menu_23 *****************
 17550 ;; Defined at:
 17551 ;;		line 504 in file "UI.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;		None
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;		None
 17556 ;; Return value:  Size  Location     Type
 17557 ;;                  1    wreg      void 
 17558 ;; Registers used:
 17559 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17569 ;;Total ram usage:        0 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    3
 17572 ;; This function calls:
 17573 ;;		i2_lcdInst
 17574 ;;		i2_printf
 17575 ;; This function is called by:
 17576 ;;		_updateMenu
 17577 ;;		_inputHandler
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           	psect	text65
 17582  00427A                     __ptext65:
 17583                           	opt stack 0
 17584  00427A                     _change_state_to_menu_23:
 17585                           	opt stack 18
 17586                           
 17587                           ;UI.c: 505: cur_state = 23;
 17588                           
 17589                           ;incstack = 0
 17590  00427A  0E00               	movlw	0
 17591  00427C  0100               	movlb	0	; () banked
 17592  00427E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17593  004280  0E17               	movlw	23
 17594  004282  6FDE               	movwf	_cur_state& (0+255),b
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;UI.c: 507: lcdInst(0b10000000);;
 17598  004284  0E80               	movlw	128
 17599  004286  EC42  F023         	call	i2_lcdInst
 17600                           
 17601                           ;UI.c: 508: printf("2. SORT         ");
 17602  00428A  0E42               	movlw	low STR_32
 17603  00428C  6E0D               	movwf	i2printf@f,c
 17604  00428E  0EFD               	movlw	high STR_32
 17605  004290  6E0E               	movwf	i2printf@f+1,c
 17606  004292  ECD4  F00A         	call	i2_printf	;wreg free
 17607                           
 17608                           ;UI.c: 509: lcdInst(0b11000000);;
 17609  004296  0EC0               	movlw	192
 17610  004298  EC42  F023         	call	i2_lcdInst
 17611                           
 17612                           ;UI.c: 510: printf("3. LOGS        <");
 17613  00429C  0EDB               	movlw	low STR_38
 17614  00429E  6E0D               	movwf	i2printf@f,c
 17615  0042A0  0EFD               	movlw	high STR_38
 17616  0042A2  6E0E               	movwf	i2printf@f+1,c
 17617  0042A4  ECD4  F00A         	call	i2_printf	;wreg free
 17618  0042A8  0012               	return		;funcret
 17619  0042AA                     __end_of_change_state_to_menu_23:
 17620                           	opt stack 0
 17621                           pclatu	equ	0xFFB
 17622                           pclath	equ	0xFFA
 17623                           tblptru	equ	0xFF8
 17624                           tblptrh	equ	0xFF7
 17625                           tblptrl	equ	0xFF6
 17626                           tablat	equ	0xFF5
 17627                           prodh	equ	0xFF4
 17628                           prodl	equ	0xFF3
 17629                           intcon	equ	0xFF2
 17630                           intcon2	equ	0xFF1
 17631                           intcon3	equ	0xFF0
 17632                           indf0	equ	0xFEF
 17633                           postinc0	equ	0xFEE
 17634                           fsr0h	equ	0xFEA
 17635                           fsr0l	equ	0xFE9
 17636                           wreg	equ	0xFE8
 17637                           postdec1	equ	0xFE5
 17638                           fsr1h	equ	0xFE2
 17639                           fsr1l	equ	0xFE1
 17640                           indf2	equ	0xFDF
 17641                           postinc2	equ	0xFDE
 17642                           postdec2	equ	0xFDD
 17643                           fsr2h	equ	0xFDA
 17644                           fsr2l	equ	0xFD9
 17645                           status	equ	0xFD8
 17646                           
 17647 ;; *************** function _change_state_to_menu_11 *****************
 17648 ;; Defined at:
 17649 ;;		line 480 in file "UI.c"
 17650 ;; Parameters:    Size  Location     Type
 17651 ;;		None
 17652 ;; Auto vars:     Size  Location     Type
 17653 ;;		None
 17654 ;; Return value:  Size  Location     Type
 17655 ;;                  1    wreg      void 
 17656 ;; Registers used:
 17657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17658 ;; Tracked objects:
 17659 ;;		On entry : 0/0
 17660 ;;		On exit  : 0/0
 17661 ;;		Unchanged: 0/0
 17662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17667 ;;Total ram usage:        0 bytes
 17668 ;; Hardware stack levels used:    1
 17669 ;; Hardware stack levels required when called:    3
 17670 ;; This function calls:
 17671 ;;		i2_lcdInst
 17672 ;;		i2_printf
 17673 ;; This function is called by:
 17674 ;;		_updateMenu
 17675 ;;		_inputHandler
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           	psect	text66
 17680  0042AA                     __ptext66:
 17681                           	opt stack 0
 17682  0042AA                     _change_state_to_menu_11:
 17683                           	opt stack 18
 17684                           
 17685                           ;UI.c: 481: cur_state = 11;
 17686                           
 17687                           ;incstack = 0
 17688  0042AA  0E00               	movlw	0
 17689  0042AC  0100               	movlb	0	; () banked
 17690  0042AE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17691  0042B0  0E0B               	movlw	11
 17692  0042B2  6FDE               	movwf	_cur_state& (0+255),b
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;UI.c: 483: lcdInst(0b10000000);;
 17696  0042B4  0E80               	movlw	128
 17697  0042B6  EC42  F023         	call	i2_lcdInst
 17698                           
 17699                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17700  0042BA  0EFD               	movlw	low STR_31
 17701  0042BC  6E0D               	movwf	i2printf@f,c
 17702  0042BE  0EFD               	movlw	high STR_31
 17703  0042C0  6E0E               	movwf	i2printf@f+1,c
 17704  0042C2  ECD4  F00A         	call	i2_printf	;wreg free
 17705                           
 17706                           ;UI.c: 485: lcdInst(0b11000000);;
 17707  0042C6  0EC0               	movlw	192
 17708  0042C8  EC42  F023         	call	i2_lcdInst
 17709                           
 17710                           ;UI.c: 486: printf("2. SORT         ");
 17711  0042CC  0E42               	movlw	low STR_32
 17712  0042CE  6E0D               	movwf	i2printf@f,c
 17713  0042D0  0EFD               	movlw	high STR_32
 17714  0042D2  6E0E               	movwf	i2printf@f+1,c
 17715  0042D4  ECD4  F00A         	call	i2_printf	;wreg free
 17716  0042D8  0012               	return		;funcret
 17717  0042DA                     __end_of_change_state_to_menu_11:
 17718                           	opt stack 0
 17719                           pclatu	equ	0xFFB
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           intcon2	equ	0xFF1
 17729                           intcon3	equ	0xFF0
 17730                           indf0	equ	0xFEF
 17731                           postinc0	equ	0xFEE
 17732                           fsr0h	equ	0xFEA
 17733                           fsr0l	equ	0xFE9
 17734                           wreg	equ	0xFE8
 17735                           postdec1	equ	0xFE5
 17736                           fsr1h	equ	0xFE2
 17737                           fsr1l	equ	0xFE1
 17738                           indf2	equ	0xFDF
 17739                           postinc2	equ	0xFDE
 17740                           postdec2	equ	0xFDD
 17741                           fsr2h	equ	0xFDA
 17742                           fsr2l	equ	0xFD9
 17743                           status	equ	0xFD8
 17744                           
 17745 ;; *************** function _change_state_to_logs_34 *****************
 17746 ;; Defined at:
 17747 ;;		line 547 in file "UI.c"
 17748 ;; Parameters:    Size  Location     Type
 17749 ;;		None
 17750 ;; Auto vars:     Size  Location     Type
 17751 ;;		None
 17752 ;; Return value:  Size  Location     Type
 17753 ;;                  1    wreg      void 
 17754 ;; Registers used:
 17755 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17756 ;; Tracked objects:
 17757 ;;		On entry : 0/0
 17758 ;;		On exit  : 0/0
 17759 ;;		Unchanged: 0/0
 17760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17765 ;;Total ram usage:        0 bytes
 17766 ;; Hardware stack levels used:    1
 17767 ;; Hardware stack levels required when called:    3
 17768 ;; This function calls:
 17769 ;;		i2_lcdInst
 17770 ;;		i2_printf
 17771 ;; This function is called by:
 17772 ;;		_updateMenu
 17773 ;;		_inputHandler
 17774 ;; This function uses a non-reentrant model
 17775 ;;
 17776                           
 17777                           	psect	text67
 17778  0042DA                     __ptext67:
 17779                           	opt stack 0
 17780  0042DA                     _change_state_to_logs_34:
 17781                           	opt stack 18
 17782                           
 17783                           ;UI.c: 548: cur_state = 1034;
 17784                           
 17785                           ;incstack = 0
 17786  0042DA  0E04               	movlw	4
 17787  0042DC  0100               	movlb	0	; () banked
 17788  0042DE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17789  0042E0  0E0A               	movlw	10
 17790  0042E2  6FDE               	movwf	_cur_state& (0+255),b
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;UI.c: 549: lcdInst(0b10000000);;
 17794  0042E4  0E80               	movlw	128
 17795  0042E6  EC42  F023         	call	i2_lcdInst
 17796                           
 17797                           ;UI.c: 550: printf("LOG 3           ");
 17798  0042EA  0E0F               	movlw	low STR_44
 17799  0042EC  6E0D               	movwf	i2printf@f,c
 17800  0042EE  0EFD               	movlw	high STR_44
 17801  0042F0  6E0E               	movwf	i2printf@f+1,c
 17802  0042F2  ECD4  F00A         	call	i2_printf	;wreg free
 17803                           
 17804                           ;UI.c: 551: lcdInst(0b11000000);;
 17805  0042F6  0EC0               	movlw	192
 17806  0042F8  EC42  F023         	call	i2_lcdInst
 17807                           
 17808                           ;UI.c: 552: printf("LOG 4          <");
 17809  0042FC  0ECA               	movlw	low STR_50
 17810  0042FE  6E0D               	movwf	i2printf@f,c
 17811  004300  0EFD               	movlw	high STR_50
 17812  004302  6E0E               	movwf	i2printf@f+1,c
 17813  004304  ECD4  F00A         	call	i2_printf	;wreg free
 17814  004308  0012               	return		;funcret
 17815  00430A                     __end_of_change_state_to_logs_34:
 17816                           	opt stack 0
 17817                           pclatu	equ	0xFFB
 17818                           pclath	equ	0xFFA
 17819                           tblptru	equ	0xFF8
 17820                           tblptrh	equ	0xFF7
 17821                           tblptrl	equ	0xFF6
 17822                           tablat	equ	0xFF5
 17823                           prodh	equ	0xFF4
 17824                           prodl	equ	0xFF3
 17825                           intcon	equ	0xFF2
 17826                           intcon2	equ	0xFF1
 17827                           intcon3	equ	0xFF0
 17828                           indf0	equ	0xFEF
 17829                           postinc0	equ	0xFEE
 17830                           fsr0h	equ	0xFEA
 17831                           fsr0l	equ	0xFE9
 17832                           wreg	equ	0xFE8
 17833                           postdec1	equ	0xFE5
 17834                           fsr1h	equ	0xFE2
 17835                           fsr1l	equ	0xFE1
 17836                           indf2	equ	0xFDF
 17837                           postinc2	equ	0xFDE
 17838                           postdec2	equ	0xFDD
 17839                           fsr2h	equ	0xFDA
 17840                           fsr2l	equ	0xFD9
 17841                           status	equ	0xFD8
 17842                           
 17843 ;; *************** function _change_state_to_logs_33 *****************
 17844 ;; Defined at:
 17845 ;;		line 540 in file "UI.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;		None
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;		None
 17850 ;; Return value:  Size  Location     Type
 17851 ;;                  1    wreg      void 
 17852 ;; Registers used:
 17853 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17854 ;; Tracked objects:
 17855 ;;		On entry : 0/0
 17856 ;;		On exit  : 0/0
 17857 ;;		Unchanged: 0/0
 17858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17863 ;;Total ram usage:        0 bytes
 17864 ;; Hardware stack levels used:    1
 17865 ;; Hardware stack levels required when called:    3
 17866 ;; This function calls:
 17867 ;;		i2_lcdInst
 17868 ;;		i2_printf
 17869 ;; This function is called by:
 17870 ;;		_updateMenu
 17871 ;;		_inputHandler
 17872 ;; This function uses a non-reentrant model
 17873 ;;
 17874                           
 17875                           	psect	text68
 17876  00430A                     __ptext68:
 17877                           	opt stack 0
 17878  00430A                     _change_state_to_logs_33:
 17879                           	opt stack 18
 17880                           
 17881                           ;UI.c: 541: cur_state = 1033;
 17882                           
 17883                           ;incstack = 0
 17884  00430A  0E04               	movlw	4
 17885  00430C  0100               	movlb	0	; () banked
 17886  00430E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17887  004310  0E09               	movlw	9
 17888  004312  6FDE               	movwf	_cur_state& (0+255),b
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;UI.c: 542: lcdInst(0b10000000);;
 17892  004314  0E80               	movlw	128
 17893  004316  EC42  F023         	call	i2_lcdInst
 17894                           
 17895                           ;UI.c: 543: printf("LOG 3          <");
 17896  00431A  0EB9               	movlw	low STR_46
 17897  00431C  6E0D               	movwf	i2printf@f,c
 17898  00431E  0EFD               	movlw	high STR_46
 17899  004320  6E0E               	movwf	i2printf@f+1,c
 17900  004322  ECD4  F00A         	call	i2_printf	;wreg free
 17901                           
 17902                           ;UI.c: 544: lcdInst(0b11000000);;
 17903  004326  0EC0               	movlw	192
 17904  004328  EC42  F023         	call	i2_lcdInst
 17905                           
 17906                           ;UI.c: 545: printf("LOG 4           ");
 17907  00432C  0E20               	movlw	low STR_48
 17908  00432E  6E0D               	movwf	i2printf@f,c
 17909  004330  0EFD               	movlw	high STR_48
 17910  004332  6E0E               	movwf	i2printf@f+1,c
 17911  004334  ECD4  F00A         	call	i2_printf	;wreg free
 17912  004338  0012               	return		;funcret
 17913  00433A                     __end_of_change_state_to_logs_33:
 17914                           	opt stack 0
 17915                           pclatu	equ	0xFFB
 17916                           pclath	equ	0xFFA
 17917                           tblptru	equ	0xFF8
 17918                           tblptrh	equ	0xFF7
 17919                           tblptrl	equ	0xFF6
 17920                           tablat	equ	0xFF5
 17921                           prodh	equ	0xFF4
 17922                           prodl	equ	0xFF3
 17923                           intcon	equ	0xFF2
 17924                           intcon2	equ	0xFF1
 17925                           intcon3	equ	0xFF0
 17926                           indf0	equ	0xFEF
 17927                           postinc0	equ	0xFEE
 17928                           fsr0h	equ	0xFEA
 17929                           fsr0l	equ	0xFE9
 17930                           wreg	equ	0xFE8
 17931                           postdec1	equ	0xFE5
 17932                           fsr1h	equ	0xFE2
 17933                           fsr1l	equ	0xFE1
 17934                           indf2	equ	0xFDF
 17935                           postinc2	equ	0xFDE
 17936                           postdec2	equ	0xFDD
 17937                           fsr2h	equ	0xFDA
 17938                           fsr2l	equ	0xFD9
 17939                           status	equ	0xFD8
 17940                           
 17941 ;; *************** function _change_state_to_logs_23 *****************
 17942 ;; Defined at:
 17943 ;;		line 533 in file "UI.c"
 17944 ;; Parameters:    Size  Location     Type
 17945 ;;		None
 17946 ;; Auto vars:     Size  Location     Type
 17947 ;;		None
 17948 ;; Return value:  Size  Location     Type
 17949 ;;                  1    wreg      void 
 17950 ;; Registers used:
 17951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17952 ;; Tracked objects:
 17953 ;;		On entry : 0/0
 17954 ;;		On exit  : 0/0
 17955 ;;		Unchanged: 0/0
 17956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17961 ;;Total ram usage:        0 bytes
 17962 ;; Hardware stack levels used:    1
 17963 ;; Hardware stack levels required when called:    3
 17964 ;; This function calls:
 17965 ;;		i2_lcdInst
 17966 ;;		i2_printf
 17967 ;; This function is called by:
 17968 ;;		_updateMenu
 17969 ;;		_inputHandler
 17970 ;; This function uses a non-reentrant model
 17971 ;;
 17972                           
 17973                           	psect	text69
 17974  0043F8                     __ptext69:
 17975                           	opt stack 0
 17976  0043F8                     _change_state_to_logs_23:
 17977                           	opt stack 18
 17978                           
 17979                           ;UI.c: 534: cur_state = 1023;
 17980                           
 17981                           ;incstack = 0
 17982  0043F8  0E03               	movlw	3
 17983  0043FA  0100               	movlb	0	; () banked
 17984  0043FC  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17985  0043FE  69DE               	setf	_cur_state& (0+255),b
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;UI.c: 535: lcdInst(0b10000000);;
 17989  004400  0E80               	movlw	128
 17990  004402  EC42  F023         	call	i2_lcdInst
 17991                           
 17992                           ;UI.c: 536: printf("LOG 2           ");
 17993  004406  0EFE               	movlw	low STR_40
 17994  004408  6E0D               	movwf	i2printf@f,c
 17995  00440A  0EFC               	movlw	high STR_40
 17996  00440C  6E0E               	movwf	i2printf@f+1,c
 17997  00440E  ECD4  F00A         	call	i2_printf	;wreg free
 17998                           
 17999                           ;UI.c: 537: lcdInst(0b11000000);;
 18000  004412  0EC0               	movlw	192
 18001  004414  EC42  F023         	call	i2_lcdInst
 18002                           
 18003                           ;UI.c: 538: printf("LOG 3          <");
 18004  004418  0EB9               	movlw	low STR_46
 18005  00441A  6E0D               	movwf	i2printf@f,c
 18006  00441C  0EFD               	movlw	high STR_46
 18007  00441E  6E0E               	movwf	i2printf@f+1,c
 18008  004420  ECD4  F00A         	call	i2_printf	;wreg free
 18009  004424  0012               	return		;funcret
 18010  004426                     __end_of_change_state_to_logs_23:
 18011                           	opt stack 0
 18012                           pclatu	equ	0xFFB
 18013                           pclath	equ	0xFFA
 18014                           tblptru	equ	0xFF8
 18015                           tblptrh	equ	0xFF7
 18016                           tblptrl	equ	0xFF6
 18017                           tablat	equ	0xFF5
 18018                           prodh	equ	0xFF4
 18019                           prodl	equ	0xFF3
 18020                           intcon	equ	0xFF2
 18021                           intcon2	equ	0xFF1
 18022                           intcon3	equ	0xFF0
 18023                           indf0	equ	0xFEF
 18024                           postinc0	equ	0xFEE
 18025                           fsr0h	equ	0xFEA
 18026                           fsr0l	equ	0xFE9
 18027                           wreg	equ	0xFE8
 18028                           postdec1	equ	0xFE5
 18029                           fsr1h	equ	0xFE2
 18030                           fsr1l	equ	0xFE1
 18031                           indf2	equ	0xFDF
 18032                           postinc2	equ	0xFDE
 18033                           postdec2	equ	0xFDD
 18034                           fsr2h	equ	0xFDA
 18035                           fsr2l	equ	0xFD9
 18036                           status	equ	0xFD8
 18037                           
 18038 ;; *************** function _change_state_to_logs_22 *****************
 18039 ;; Defined at:
 18040 ;;		line 526 in file "UI.c"
 18041 ;; Parameters:    Size  Location     Type
 18042 ;;		None
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;		None
 18045 ;; Return value:  Size  Location     Type
 18046 ;;                  1    wreg      void 
 18047 ;; Registers used:
 18048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18049 ;; Tracked objects:
 18050 ;;		On entry : 0/0
 18051 ;;		On exit  : 0/0
 18052 ;;		Unchanged: 0/0
 18053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18058 ;;Total ram usage:        0 bytes
 18059 ;; Hardware stack levels used:    1
 18060 ;; Hardware stack levels required when called:    3
 18061 ;; This function calls:
 18062 ;;		i2_lcdInst
 18063 ;;		i2_printf
 18064 ;; This function is called by:
 18065 ;;		_updateMenu
 18066 ;;		_inputHandler
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           	psect	text70
 18071  00433A                     __ptext70:
 18072                           	opt stack 0
 18073  00433A                     _change_state_to_logs_22:
 18074                           	opt stack 18
 18075                           
 18076                           ;UI.c: 527: cur_state = 1022;
 18077                           
 18078                           ;incstack = 0
 18079  00433A  0E03               	movlw	3
 18080  00433C  0100               	movlb	0	; () banked
 18081  00433E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18082  004340  0EFE               	movlw	254
 18083  004342  6FDE               	movwf	_cur_state& (0+255),b
 18084                           
 18085                           ; BSR set to: 0
 18086                           ;UI.c: 528: lcdInst(0b10000000);;
 18087  004344  0E80               	movlw	128
 18088  004346  EC42  F023         	call	i2_lcdInst
 18089                           
 18090                           ;UI.c: 529: printf("LOG 2          <");
 18091  00434A  0EA8               	movlw	low STR_42
 18092  00434C  6E0D               	movwf	i2printf@f,c
 18093  00434E  0EFD               	movlw	high STR_42
 18094  004350  6E0E               	movwf	i2printf@f+1,c
 18095  004352  ECD4  F00A         	call	i2_printf	;wreg free
 18096                           
 18097                           ;UI.c: 530: lcdInst(0b11000000);;
 18098  004356  0EC0               	movlw	192
 18099  004358  EC42  F023         	call	i2_lcdInst
 18100                           
 18101                           ;UI.c: 531: printf("LOG 3           ");
 18102  00435C  0E0F               	movlw	low STR_44
 18103  00435E  6E0D               	movwf	i2printf@f,c
 18104  004360  0EFD               	movlw	high STR_44
 18105  004362  6E0E               	movwf	i2printf@f+1,c
 18106  004364  ECD4  F00A         	call	i2_printf	;wreg free
 18107  004368  0012               	return		;funcret
 18108  00436A                     __end_of_change_state_to_logs_22:
 18109                           	opt stack 0
 18110                           pclatu	equ	0xFFB
 18111                           pclath	equ	0xFFA
 18112                           tblptru	equ	0xFF8
 18113                           tblptrh	equ	0xFF7
 18114                           tblptrl	equ	0xFF6
 18115                           tablat	equ	0xFF5
 18116                           prodh	equ	0xFF4
 18117                           prodl	equ	0xFF3
 18118                           intcon	equ	0xFF2
 18119                           intcon2	equ	0xFF1
 18120                           intcon3	equ	0xFF0
 18121                           indf0	equ	0xFEF
 18122                           postinc0	equ	0xFEE
 18123                           fsr0h	equ	0xFEA
 18124                           fsr0l	equ	0xFE9
 18125                           wreg	equ	0xFE8
 18126                           postdec1	equ	0xFE5
 18127                           fsr1h	equ	0xFE2
 18128                           fsr1l	equ	0xFE1
 18129                           indf2	equ	0xFDF
 18130                           postinc2	equ	0xFDE
 18131                           postdec2	equ	0xFDD
 18132                           fsr2h	equ	0xFDA
 18133                           fsr2l	equ	0xFD9
 18134                           status	equ	0xFD8
 18135                           
 18136 ;; *************** function _change_state_to_logs_12 *****************
 18137 ;; Defined at:
 18138 ;;		line 519 in file "UI.c"
 18139 ;; Parameters:    Size  Location     Type
 18140 ;;		None
 18141 ;; Auto vars:     Size  Location     Type
 18142 ;;		None
 18143 ;; Return value:  Size  Location     Type
 18144 ;;                  1    wreg      void 
 18145 ;; Registers used:
 18146 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18147 ;; Tracked objects:
 18148 ;;		On entry : 0/0
 18149 ;;		On exit  : 0/0
 18150 ;;		Unchanged: 0/0
 18151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18156 ;;Total ram usage:        0 bytes
 18157 ;; Hardware stack levels used:    1
 18158 ;; Hardware stack levels required when called:    3
 18159 ;; This function calls:
 18160 ;;		i2_lcdInst
 18161 ;;		i2_printf
 18162 ;; This function is called by:
 18163 ;;		_updateMenu
 18164 ;;		_inputHandler
 18165 ;; This function uses a non-reentrant model
 18166 ;;
 18167                           
 18168                           	psect	text71
 18169  00436A                     __ptext71:
 18170                           	opt stack 0
 18171  00436A                     _change_state_to_logs_12:
 18172                           	opt stack 18
 18173                           
 18174                           ;UI.c: 520: cur_state = 1012;
 18175                           
 18176                           ;incstack = 0
 18177  00436A  0E03               	movlw	3
 18178  00436C  0100               	movlb	0	; () banked
 18179  00436E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18180  004370  0EF4               	movlw	244
 18181  004372  6FDE               	movwf	_cur_state& (0+255),b
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;UI.c: 521: lcdInst(0b10000000);;
 18185  004374  0E80               	movlw	128
 18186  004376  EC42  F023         	call	i2_lcdInst
 18187                           
 18188                           ;UI.c: 522: printf("LOG 1           ");
 18189  00437A  0EED               	movlw	low STR_41
 18190  00437C  6E0D               	movwf	i2printf@f,c
 18191  00437E  0EFC               	movlw	high STR_41
 18192  004380  6E0E               	movwf	i2printf@f+1,c
 18193  004382  ECD4  F00A         	call	i2_printf	;wreg free
 18194                           
 18195                           ;UI.c: 523: lcdInst(0b11000000);;
 18196  004386  0EC0               	movlw	192
 18197  004388  EC42  F023         	call	i2_lcdInst
 18198                           
 18199                           ;UI.c: 524: printf("LOG 2          <");
 18200  00438C  0EA8               	movlw	low STR_42
 18201  00438E  6E0D               	movwf	i2printf@f,c
 18202  004390  0EFD               	movlw	high STR_42
 18203  004392  6E0E               	movwf	i2printf@f+1,c
 18204  004394  ECD4  F00A         	call	i2_printf	;wreg free
 18205  004398  0012               	return		;funcret
 18206  00439A                     __end_of_change_state_to_logs_12:
 18207                           	opt stack 0
 18208                           pclatu	equ	0xFFB
 18209                           pclath	equ	0xFFA
 18210                           tblptru	equ	0xFF8
 18211                           tblptrh	equ	0xFF7
 18212                           tblptrl	equ	0xFF6
 18213                           tablat	equ	0xFF5
 18214                           prodh	equ	0xFF4
 18215                           prodl	equ	0xFF3
 18216                           intcon	equ	0xFF2
 18217                           intcon2	equ	0xFF1
 18218                           intcon3	equ	0xFF0
 18219                           indf0	equ	0xFEF
 18220                           postinc0	equ	0xFEE
 18221                           fsr0h	equ	0xFEA
 18222                           fsr0l	equ	0xFE9
 18223                           wreg	equ	0xFE8
 18224                           postdec1	equ	0xFE5
 18225                           fsr1h	equ	0xFE2
 18226                           fsr1l	equ	0xFE1
 18227                           indf2	equ	0xFDF
 18228                           postinc2	equ	0xFDE
 18229                           postdec2	equ	0xFDD
 18230                           fsr2h	equ	0xFDA
 18231                           fsr2l	equ	0xFD9
 18232                           status	equ	0xFD8
 18233                           
 18234 ;; *************** function _change_state_to_logs_11 *****************
 18235 ;; Defined at:
 18236 ;;		line 512 in file "UI.c"
 18237 ;; Parameters:    Size  Location     Type
 18238 ;;		None
 18239 ;; Auto vars:     Size  Location     Type
 18240 ;;		None
 18241 ;; Return value:  Size  Location     Type
 18242 ;;                  1    wreg      void 
 18243 ;; Registers used:
 18244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18245 ;; Tracked objects:
 18246 ;;		On entry : 0/0
 18247 ;;		On exit  : 0/0
 18248 ;;		Unchanged: 0/0
 18249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18254 ;;Total ram usage:        0 bytes
 18255 ;; Hardware stack levels used:    1
 18256 ;; Hardware stack levels required when called:    3
 18257 ;; This function calls:
 18258 ;;		i2_lcdInst
 18259 ;;		i2_printf
 18260 ;; This function is called by:
 18261 ;;		_updateMenu
 18262 ;;		_inputHandler
 18263 ;; This function uses a non-reentrant model
 18264 ;;
 18265                           
 18266                           	psect	text72
 18267  00439A                     __ptext72:
 18268                           	opt stack 0
 18269  00439A                     _change_state_to_logs_11:
 18270                           	opt stack 18
 18271                           
 18272                           ;UI.c: 513: cur_state = 1011;
 18273                           
 18274                           ;incstack = 0
 18275  00439A  0E03               	movlw	3
 18276  00439C  0100               	movlb	0	; () banked
 18277  00439E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18278  0043A0  0EF3               	movlw	243
 18279  0043A2  6FDE               	movwf	_cur_state& (0+255),b
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;UI.c: 514: lcdInst(0b10000000);;
 18283  0043A4  0E80               	movlw	128
 18284  0043A6  EC42  F023         	call	i2_lcdInst
 18285                           
 18286                           ;UI.c: 515: printf("LOG 1          <");
 18287  0043AA  0E97               	movlw	low STR_39
 18288  0043AC  6E0D               	movwf	i2printf@f,c
 18289  0043AE  0EFD               	movlw	high STR_39
 18290  0043B0  6E0E               	movwf	i2printf@f+1,c
 18291  0043B2  ECD4  F00A         	call	i2_printf	;wreg free
 18292                           
 18293                           ;UI.c: 516: lcdInst(0b11000000);;
 18294  0043B6  0EC0               	movlw	192
 18295  0043B8  EC42  F023         	call	i2_lcdInst
 18296                           
 18297                           ;UI.c: 517: printf("LOG 2           ");
 18298  0043BC  0EFE               	movlw	low STR_40
 18299  0043BE  6E0D               	movwf	i2printf@f,c
 18300  0043C0  0EFC               	movlw	high STR_40
 18301  0043C2  6E0E               	movwf	i2printf@f+1,c
 18302  0043C4  ECD4  F00A         	call	i2_printf	;wreg free
 18303  0043C8  0012               	return		;funcret
 18304  0043CA                     __end_of_change_state_to_logs_11:
 18305                           	opt stack 0
 18306                           pclatu	equ	0xFFB
 18307                           pclath	equ	0xFFA
 18308                           tblptru	equ	0xFF8
 18309                           tblptrh	equ	0xFF7
 18310                           tblptrl	equ	0xFF6
 18311                           tablat	equ	0xFF5
 18312                           prodh	equ	0xFF4
 18313                           prodl	equ	0xFF3
 18314                           intcon	equ	0xFF2
 18315                           intcon2	equ	0xFF1
 18316                           intcon3	equ	0xFF0
 18317                           indf0	equ	0xFEF
 18318                           postinc0	equ	0xFEE
 18319                           fsr0h	equ	0xFEA
 18320                           fsr0l	equ	0xFE9
 18321                           wreg	equ	0xFE8
 18322                           postdec1	equ	0xFE5
 18323                           fsr1h	equ	0xFE2
 18324                           fsr1l	equ	0xFE1
 18325                           indf2	equ	0xFDF
 18326                           postinc2	equ	0xFDE
 18327                           postdec2	equ	0xFDD
 18328                           fsr2h	equ	0xFDA
 18329                           fsr2l	equ	0xFD9
 18330                           status	equ	0xFD8
 18331                           
 18332 ;; *************** function _dispLogs *****************
 18333 ;; Defined at:
 18334 ;;		line 465 in file "UI.c"
 18335 ;; Parameters:    Size  Location     Type
 18336 ;;  myLog           2   17[COMRAM] int 
 18337 ;; Auto vars:     Size  Location     Type
 18338 ;;		None
 18339 ;; Return value:  Size  Location     Type
 18340 ;;                  1    wreg      void 
 18341 ;; Registers used:
 18342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18343 ;; Tracked objects:
 18344 ;;		On entry : 0/0
 18345 ;;		On exit  : 0/0
 18346 ;;		Unchanged: 0/0
 18347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;Total ram usage:        2 bytes
 18353 ;; Hardware stack levels used:    1
 18354 ;; Hardware stack levels required when called:    2
 18355 ;; This function calls:
 18356 ;;		_retrieveLog
 18357 ;; This function is called by:
 18358 ;;		_updateMenu
 18359 ;; This function uses a non-reentrant model
 18360 ;;
 18361                           
 18362                           	psect	text73
 18363  004568                     __ptext73:
 18364                           	opt stack 0
 18365  004568                     _dispLogs:
 18366                           	opt stack 20
 18367                           
 18368                           ;UI.c: 466: logstate = 1;
 18369                           
 18370                           ;incstack = 0
 18371  004568  0E00               	movlw	0
 18372  00456A  0100               	movlb	0	; () banked
 18373  00456C  6FF7               	movwf	(_logstate+1)& (0+255),b
 18374  00456E  0E01               	movlw	1
 18375  004570  6FF6               	movwf	_logstate& (0+255),b
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;UI.c: 467: log = myLog;
 18379  004572  C012  F0E6         	movff	dispLogs@myLog,_log
 18380  004576  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18381                           
 18382                           ; BSR set to: 0
 18383                           ;UI.c: 468: retrieveLog(myLog - 1);
 18384  00457A  0EFF               	movlw	255
 18385  00457C  2412               	addwf	dispLogs@myLog,w,c
 18386  00457E  6E07               	movwf	retrieveLog@logNum,c
 18387  004580  0EFF               	movlw	255
 18388  004582  2013               	addwfc	dispLogs@myLog+1,w,c
 18389  004584  6E08               	movwf	retrieveLog@logNum+1,c
 18390  004586  EC0A  F018         	call	_retrieveLog	;wreg free
 18391  00458A  0012               	return		;funcret
 18392  00458C                     __end_of_dispLogs:
 18393                           	opt stack 0
 18394                           pclatu	equ	0xFFB
 18395                           pclath	equ	0xFFA
 18396                           tblptru	equ	0xFF8
 18397                           tblptrh	equ	0xFF7
 18398                           tblptrl	equ	0xFF6
 18399                           tablat	equ	0xFF5
 18400                           prodh	equ	0xFF4
 18401                           prodl	equ	0xFF3
 18402                           intcon	equ	0xFF2
 18403                           intcon2	equ	0xFF1
 18404                           intcon3	equ	0xFF0
 18405                           indf0	equ	0xFEF
 18406                           postinc0	equ	0xFEE
 18407                           fsr0h	equ	0xFEA
 18408                           fsr0l	equ	0xFE9
 18409                           wreg	equ	0xFE8
 18410                           postdec1	equ	0xFE5
 18411                           fsr1h	equ	0xFE2
 18412                           fsr1l	equ	0xFE1
 18413                           indf2	equ	0xFDF
 18414                           postinc2	equ	0xFDE
 18415                           postdec2	equ	0xFDD
 18416                           fsr2h	equ	0xFDA
 18417                           fsr2l	equ	0xFD9
 18418                           status	equ	0xFD8
 18419                           
 18420 ;; *************** function _retrieveLog *****************
 18421 ;; Defined at:
 18422 ;;		line 134 in file "EEPROM.c"
 18423 ;; Parameters:    Size  Location     Type
 18424 ;;  logNum          2    6[COMRAM] int 
 18425 ;; Auto vars:     Size  Location     Type
 18426 ;;  i               2   13[COMRAM] int 
 18427 ;;  addr            2   15[COMRAM] unsigned short 
 18428 ;;  byte3           1   12[COMRAM] unsigned char 
 18429 ;;  byte2           1   11[COMRAM] unsigned char 
 18430 ;;  byte1           1   10[COMRAM] unsigned char 
 18431 ;; Return value:  Size  Location     Type
 18432 ;;                  1    wreg      void 
 18433 ;; Registers used:
 18434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18435 ;; Tracked objects:
 18436 ;;		On entry : 0/0
 18437 ;;		On exit  : 0/0
 18438 ;;		Unchanged: 0/0
 18439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18440 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18441 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;Total ram usage:       11 bytes
 18445 ;; Hardware stack levels used:    1
 18446 ;; Hardware stack levels required when called:    1
 18447 ;; This function calls:
 18448 ;;		i2_EEPROM_read
 18449 ;;		i2___wmul
 18450 ;; This function is called by:
 18451 ;;		_dispLogs
 18452 ;; This function uses a non-reentrant model
 18453 ;;
 18454                           
 18455                           	psect	text74
 18456  003014                     __ptext74:
 18457                           	opt stack 0
 18458  003014                     _retrieveLog:
 18459                           	opt stack 20
 18460                           
 18461                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18462                           
 18463                           ;incstack = 0
 18464  003014  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18465  003018  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18466  00301C  0E00               	movlw	0
 18467  00301E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18468  003020  0E0B               	movlw	11
 18469  003022  6E03               	movwf	i2___wmul@multiplicand,c
 18470  003024  EC7C  F022         	call	i2___wmul	;wreg free
 18471  003028  0E01               	movlw	1
 18472  00302A  2401               	addwf	?i2___wmul,w,c
 18473  00302C  6E10               	movwf	retrieveLog@addr,c
 18474  00302E  0E00               	movlw	0
 18475  003030  2002               	addwfc	?i2___wmul+1,w,c
 18476  003032  6E11               	movwf	retrieveLog@addr+1,c
 18477                           
 18478                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18479  003034  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18480  003038  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18481  00303C  EC0E  F023         	call	i2_EEPROM_read	;wreg free
 18482  003040  6E0B               	movwf	retrieveLog@byte1,c
 18483                           
 18484                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18485  003042  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18486  003046  0E80               	movlw	128
 18487  003048  1609               	andwf	??_retrieveLog,f,c
 18488  00304A  5009               	movf	??_retrieveLog,w,c
 18489  00304C  0100               	movlb	0	; () banked
 18490  00304E  6FE8               	movwf	_log_completion& (0+255),b
 18491  003050  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18492                           
 18493                           ; BSR set to: 0
 18494                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18495  003052  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18496  003056  0E0F               	movlw	15
 18497  003058  1609               	andwf	??_retrieveLog,f,c
 18498  00305A  5009               	movf	??_retrieveLog,w,c
 18499  00305C  0100               	movlb	0	; () banked
 18500  00305E  6FF2               	movwf	_log_count_total& (0+255),b
 18501  003060  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18502                           
 18503                           ; BSR set to: 0
 18504                           ;EEPROM.c: 146: addr++;
 18505  003062  4A10               	infsnz	retrieveLog@addr,f,c
 18506  003064  2A11               	incf	retrieveLog@addr+1,f,c
 18507                           
 18508                           ; BSR set to: 0
 18509                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18510  003066  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18511  00306A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18512  00306E  EC0E  F023         	call	i2_EEPROM_read	;wreg free
 18513  003072  6E0C               	movwf	retrieveLog@byte2,c
 18514                           
 18515                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18516  003074  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18517  003078  0EF0               	movlw	240
 18518  00307A  1609               	andwf	??_retrieveLog,f,c
 18519  00307C  5009               	movf	??_retrieveLog,w,c
 18520  00307E  0100               	movlb	0	; () banked
 18521  003080  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18522  003082  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18526  003084  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18527  003088  0E0F               	movlw	15
 18528  00308A  1609               	andwf	??_retrieveLog,f,c
 18529  00308C  5009               	movf	??_retrieveLog,w,c
 18530  00308E  0100               	movlb	0	; () banked
 18531  003090  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18532  003092  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18533                           
 18534                           ; BSR set to: 0
 18535                           ;EEPROM.c: 152: addr++;
 18536  003094  4A10               	infsnz	retrieveLog@addr,f,c
 18537  003096  2A11               	incf	retrieveLog@addr+1,f,c
 18538                           
 18539                           ; BSR set to: 0
 18540                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18541  003098  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18542  00309C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18543  0030A0  EC0E  F023         	call	i2_EEPROM_read	;wreg free
 18544  0030A4  6E0D               	movwf	retrieveLog@byte3,c
 18545                           
 18546                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18547  0030A6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18548  0030AA  0EF0               	movlw	240
 18549  0030AC  1609               	andwf	??_retrieveLog,f,c
 18550  0030AE  5009               	movf	??_retrieveLog,w,c
 18551  0030B0  0100               	movlb	0	; () banked
 18552  0030B2  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18553  0030B4  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18554                           
 18555                           ; BSR set to: 0
 18556                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18557  0030B6  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18558  0030BA  0E0F               	movlw	15
 18559  0030BC  1609               	andwf	??_retrieveLog,f,c
 18560  0030BE  5009               	movf	??_retrieveLog,w,c
 18561  0030C0  0100               	movlb	0	; () banked
 18562  0030C2  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18563  0030C4  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;EEPROM.c: 156: addr++;
 18567  0030C6  4A10               	infsnz	retrieveLog@addr,f,c
 18568  0030C8  2A11               	incf	retrieveLog@addr+1,f,c
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18572  0030CA  0E00               	movlw	0
 18573  0030CC  6E0F               	movwf	retrieveLog@i+1,c
 18574  0030CE  0E00               	movlw	0
 18575  0030D0  6E0E               	movwf	retrieveLog@i,c
 18576  0030D2                     i2l5912:
 18577                           
 18578                           ; BSR set to: 0
 18579  0030D2  BE0F               	btfsc	retrieveLog@i+1,7,c
 18580  0030D4  D006               	goto	i2l5916
 18581  0030D6  500F               	movf	retrieveLog@i+1,w,c
 18582  0030D8  E11E               	bnz	i2l5924
 18583  0030DA  0E07               	movlw	7
 18584  0030DC  5C0E               	subwf	retrieveLog@i,w,c
 18585  0030DE  B0D8               	btfsc	status,0,c
 18586  0030E0  D01A               	goto	i2l5924
 18587  0030E2                     i2l5916:
 18588                           
 18589                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18590  0030E2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18591  0030E6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18592  0030EA  EC0E  F023         	call	i2_EEPROM_read	;wreg free
 18593  0030EE  6E09               	movwf	??_retrieveLog& (0+255),c
 18594  0030F0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18595  0030F2  90D8               	bcf	status,0,c
 18596  0030F4  340E               	rlcf	retrieveLog@i,w,c
 18597  0030F6  6ED9               	movwf	fsr2l,c
 18598  0030F8  340F               	rlcf	retrieveLog@i+1,w,c
 18599  0030FA  6EDA               	movwf	fsr2h,c
 18600  0030FC  0E00               	movlw	low _log_startTime
 18601  0030FE  26D9               	addwf	fsr2l,f,c
 18602  003100  0E01               	movlw	high _log_startTime
 18603  003102  22DA               	addwfc	fsr2h,f,c
 18604  003104  C009  FFDE         	movff	??_retrieveLog,postinc2
 18605  003108  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18606                           
 18607                           ;EEPROM.c: 161: addr++;
 18608  00310C  4A10               	infsnz	retrieveLog@addr,f,c
 18609  00310E  2A11               	incf	retrieveLog@addr+1,f,c
 18610  003110  4A0E               	infsnz	retrieveLog@i,f,c
 18611  003112  2A0F               	incf	retrieveLog@i+1,f,c
 18612  003114  D7DE               	goto	i2l5912
 18613  003116                     i2l5924:
 18614                           
 18615                           ;EEPROM.c: 162: }
 18616                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18617  003116  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18618  00311A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18619  00311E  EC0E  F023         	call	i2_EEPROM_read	;wreg free
 18620  003122  6E09               	movwf	??_retrieveLog& (0+255),c
 18621  003124  5009               	movf	??_retrieveLog,w,c
 18622  003126  0100               	movlb	0	; () banked
 18623  003128  6FF4               	movwf	_log_total_time& (0+255),b
 18624  00312A  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18625                           
 18626                           ; BSR set to: 0
 18627  00312C  0012               	return		;funcret
 18628  00312E                     __end_of_retrieveLog:
 18629                           	opt stack 0
 18630                           pclatu	equ	0xFFB
 18631                           pclath	equ	0xFFA
 18632                           tblptru	equ	0xFF8
 18633                           tblptrh	equ	0xFF7
 18634                           tblptrl	equ	0xFF6
 18635                           tablat	equ	0xFF5
 18636                           prodh	equ	0xFF4
 18637                           prodl	equ	0xFF3
 18638                           intcon	equ	0xFF2
 18639                           intcon2	equ	0xFF1
 18640                           intcon3	equ	0xFF0
 18641                           indf0	equ	0xFEF
 18642                           postinc0	equ	0xFEE
 18643                           fsr0h	equ	0xFEA
 18644                           fsr0l	equ	0xFE9
 18645                           wreg	equ	0xFE8
 18646                           postdec1	equ	0xFE5
 18647                           fsr1h	equ	0xFE2
 18648                           fsr1l	equ	0xFE1
 18649                           indf2	equ	0xFDF
 18650                           postinc2	equ	0xFDE
 18651                           postdec2	equ	0xFDD
 18652                           fsr2h	equ	0xFDA
 18653                           fsr2l	equ	0xFD9
 18654                           status	equ	0xFD8
 18655                           
 18656 ;; *************** function i2_EEPROM_read *****************
 18657 ;; Defined at:
 18658 ;;		line 68 in file "EEPROM.c"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;  address         2    0[COMRAM] unsigned short 
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;		None
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  1    wreg      unsigned char 
 18665 ;; Registers used:
 18666 ;;		wreg, status,2
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;Total ram usage:        2 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; This function calls:
 18679 ;;		Nothing
 18680 ;; This function is called by:
 18681 ;;		_retrieveLog
 18682 ;; This function uses a non-reentrant model
 18683 ;;
 18684                           
 18685                           	psect	text75
 18686  00461C                     __ptext75:
 18687                           	opt stack 0
 18688  00461C                     i2_EEPROM_read:
 18689                           	opt stack 20
 18690                           
 18691                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18692                           
 18693                           ; BSR set to: 0
 18694                           ;incstack = 0
 18695  00461C  5002               	movf	i2EEPROM_read@address+1,w,c
 18696  00461E  6EAA               	movwf	4010,c	;volatile
 18697                           
 18698                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18699  004620  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18700                           
 18701                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18702  004624  9EA6               	bcf	4006,7,c	;volatile
 18703                           
 18704                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18705  004626  9CA6               	bcf	4006,6,c	;volatile
 18706                           
 18707                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18708  004628  80A6               	bsf	4006,0,c	;volatile
 18709  00462A                     i2l930:
 18710  00462A  B0A6               	btfsc	4006,0,c	;volatile
 18711  00462C  D7FE               	goto	i2l930
 18712                           
 18713                           ;EEPROM.c: 81: return EEDATA;
 18714  00462E  50A8               	movf	4008,w,c	;volatile
 18715  004630  0012               	return	
 18716  004632                     __end_ofi2_EEPROM_read:
 18717                           	opt stack 0
 18718                           pclatu	equ	0xFFB
 18719                           pclath	equ	0xFFA
 18720                           tblptru	equ	0xFF8
 18721                           tblptrh	equ	0xFF7
 18722                           tblptrl	equ	0xFF6
 18723                           tablat	equ	0xFF5
 18724                           prodh	equ	0xFF4
 18725                           prodl	equ	0xFF3
 18726                           intcon	equ	0xFF2
 18727                           intcon2	equ	0xFF1
 18728                           intcon3	equ	0xFF0
 18729                           indf0	equ	0xFEF
 18730                           postinc0	equ	0xFEE
 18731                           fsr0h	equ	0xFEA
 18732                           fsr0l	equ	0xFE9
 18733                           wreg	equ	0xFE8
 18734                           postdec1	equ	0xFE5
 18735                           fsr1h	equ	0xFE2
 18736                           fsr1l	equ	0xFE1
 18737                           indf2	equ	0xFDF
 18738                           postinc2	equ	0xFDE
 18739                           postdec2	equ	0xFDD
 18740                           fsr2h	equ	0xFDA
 18741                           fsr2l	equ	0xFD9
 18742                           status	equ	0xFD8
 18743                           
 18744 ;; *************** function _printSortTimer *****************
 18745 ;; Defined at:
 18746 ;;		line 273 in file "sort.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;		None
 18749 ;; Auto vars:     Size  Location     Type
 18750 ;;  i               2   72[COMRAM] int 
 18751 ;;  curTime        14   46[COMRAM] int [7]
 18752 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18753 ;;  sec             2   66[COMRAM] int 
 18754 ;;  min             2   64[COMRAM] int 
 18755 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18756 ;;  start_sec       2   60[COMRAM] unsigned int 
 18757 ;;  hour            2   44[COMRAM] int 
 18758 ;; Return value:  Size  Location     Type
 18759 ;;                  1    wreg      void 
 18760 ;; Registers used:
 18761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18762 ;; Tracked objects:
 18763 ;;		On entry : 0/0
 18764 ;;		On exit  : 0/0
 18765 ;;		Unchanged: 0/0
 18766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18768 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18769 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18770 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18771 ;;Total ram usage:       33 bytes
 18772 ;; Hardware stack levels used:    1
 18773 ;; Hardware stack levels required when called:    3
 18774 ;; This function calls:
 18775 ;;		i2___lwdiv
 18776 ;;		i2___lwmod
 18777 ;;		i2___wmul
 18778 ;;		i2_getRTC
 18779 ;;		i2_lcdInst
 18780 ;;		i2_printf
 18781 ;; This function is called by:
 18782 ;;		_handler
 18783 ;; This function uses a non-reentrant model
 18784 ;;
 18785                           
 18786                           	psect	text76
 18787  0023C6                     __ptext76:
 18788                           	opt stack 0
 18789  0023C6                     _printSortTimer:
 18790                           	opt stack 20
 18791                           
 18792                           ;sort.c: 274: getRTC();
 18793                           
 18794                           ;incstack = 0
 18795  0023C6  ECF6  F01D         	call	i2_getRTC	;wreg free
 18796                           
 18797                           ;sort.c: 275: int curTime[7];
 18798                           ;sort.c: 276: for(int i = 0; i < 7; i++){
 18799  0023CA  0E00               	movlw	0
 18800  0023CC  6E4A               	movwf	printSortTimer@i+1,c
 18801  0023CE  0E00               	movlw	0
 18802  0023D0  6E49               	movwf	printSortTimer@i,c
 18803  0023D2                     i2l7956:
 18804  0023D2  BE4A               	btfsc	printSortTimer@i+1,7,c
 18805  0023D4  D006               	goto	i2l7960
 18806  0023D6  504A               	movf	printSortTimer@i+1,w,c
 18807  0023D8  E131               	bnz	i2l7966
 18808  0023DA  0E07               	movlw	7
 18809  0023DC  5C49               	subwf	printSortTimer@i,w,c
 18810  0023DE  B0D8               	btfsc	status,0,c
 18811  0023E0  D02D               	goto	i2l7966
 18812  0023E2                     i2l7960:
 18813                           
 18814                           ;sort.c: 277: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18815  0023E2  0E24               	movlw	low _time
 18816  0023E4  2449               	addwf	printSortTimer@i,w,c
 18817  0023E6  6ED9               	movwf	fsr2l,c
 18818  0023E8  0E01               	movlw	high _time
 18819  0023EA  204A               	addwfc	printSortTimer@i+1,w,c
 18820  0023EC  6EDA               	movwf	fsr2h,c
 18821  0023EE  50DF               	movf	indf2,w,c
 18822  0023F0  6E2A               	movwf	??_printSortTimer& (0+255),c
 18823  0023F2  3A2A               	swapf	??_printSortTimer,f,c
 18824  0023F4  0E0F               	movlw	15
 18825  0023F6  162A               	andwf	??_printSortTimer,f,c
 18826  0023F8  0E0F               	movlw	15
 18827  0023FA  162A               	andwf	??_printSortTimer,f,c
 18828  0023FC  502A               	movf	??_printSortTimer,w,c
 18829  0023FE  0D0A               	mullw	10
 18830  002400  0E24               	movlw	low _time
 18831  002402  2449               	addwf	printSortTimer@i,w,c
 18832  002404  6ED9               	movwf	fsr2l,c
 18833  002406  0E01               	movlw	high _time
 18834  002408  204A               	addwfc	printSortTimer@i+1,w,c
 18835  00240A  6EDA               	movwf	fsr2h,c
 18836  00240C  50DF               	movf	indf2,w,c
 18837  00240E  0B0F               	andlw	15
 18838  002410  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18839  002412  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18840  002414  50F3               	movf	prodl,w,c
 18841  002416  262B               	addwf	??_printSortTimer+1,f,c
 18842  002418  50F4               	movf	prodh,w,c
 18843  00241A  222C               	addwfc	??_printSortTimer+2,f,c
 18844  00241C  90D8               	bcf	status,0,c
 18845  00241E  3449               	rlcf	printSortTimer@i,w,c
 18846  002420  6ED9               	movwf	fsr2l,c
 18847  002422  344A               	rlcf	printSortTimer@i+1,w,c
 18848  002424  6EDA               	movwf	fsr2h,c
 18849  002426  0E2F               	movlw	low printSortTimer@curTime
 18850  002428  26D9               	addwf	fsr2l,f,c
 18851  00242A  0E00               	movlw	high printSortTimer@curTime
 18852  00242C  22DA               	addwfc	fsr2h,f,c
 18853  00242E  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18854  002432  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18855  002436  4A49               	infsnz	printSortTimer@i,f,c
 18856  002438  2A4A               	incf	printSortTimer@i+1,f,c
 18857  00243A  D7CB               	goto	i2l7956
 18858  00243C                     i2l7966:
 18859                           
 18860                           ;sort.c: 278: }
 18861                           ;sort.c: 279: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18862  00243C  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18863  002440  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18864  002444  0E00               	movlw	0
 18865  002446  6E04               	movwf	i2___wmul@multiplicand+1,c
 18866  002448  0E3C               	movlw	60
 18867  00244A  6E03               	movwf	i2___wmul@multiplicand,c
 18868  00244C  EC7C  F022         	call	i2___wmul	;wreg free
 18869  002450  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18870  002454  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18871  002458  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18872  00245C  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18873  002460  0E0E               	movlw	14
 18874  002462  6E04               	movwf	i2___wmul@multiplicand+1,c
 18875  002464  0E10               	movlw	16
 18876  002466  6E03               	movwf	i2___wmul@multiplicand,c
 18877  002468  EC7C  F022         	call	i2___wmul	;wreg free
 18878  00246C  5001               	movf	?i2___wmul,w,c
 18879  00246E  262A               	addwf	??_printSortTimer,f,c
 18880  002470  5002               	movf	?i2___wmul+1,w,c
 18881  002472  222B               	addwfc	??_printSortTimer+1,f,c
 18882  002474  0101               	movlb	1	; () banked
 18883  002476  510E               	movf	_startTime& (0+255),w,b
 18884  002478  242A               	addwf	??_printSortTimer,w,c
 18885  00247A  6E3D               	movwf	printSortTimer@start_sec,c
 18886  00247C  0101               	movlb	1	; () banked
 18887  00247E  510F               	movf	(_startTime+1)& (0+255),w,b
 18888  002480  202B               	addwfc	??_printSortTimer+1,w,c
 18889  002482  6E3E               	movwf	printSortTimer@start_sec+1,c
 18890                           
 18891                           ;sort.c: 280: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18892  002484  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18893  002488  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18894  00248C  0E00               	movlw	0
 18895  00248E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18896  002490  0E3C               	movlw	60
 18897  002492  6E03               	movwf	i2___wmul@multiplicand,c
 18898  002494  EC7C  F022         	call	i2___wmul	;wreg free
 18899  002498  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18900  00249C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18901  0024A0  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18902  0024A4  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18903  0024A8  0E0E               	movlw	14
 18904  0024AA  6E04               	movwf	i2___wmul@multiplicand+1,c
 18905  0024AC  0E10               	movlw	16
 18906  0024AE  6E03               	movwf	i2___wmul@multiplicand,c
 18907  0024B0  EC7C  F022         	call	i2___wmul	;wreg free
 18908  0024B4  5001               	movf	?i2___wmul,w,c
 18909  0024B6  262A               	addwf	??_printSortTimer,f,c
 18910  0024B8  5002               	movf	?i2___wmul+1,w,c
 18911  0024BA  222B               	addwfc	??_printSortTimer+1,f,c
 18912  0024BC  502F               	movf	printSortTimer@curTime,w,c
 18913  0024BE  242A               	addwf	??_printSortTimer,w,c
 18914  0024C0  6E3F               	movwf	printSortTimer@cur_sec,c
 18915  0024C2  5030               	movf	printSortTimer@curTime+1,w,c
 18916  0024C4  202B               	addwfc	??_printSortTimer+1,w,c
 18917  0024C6  6E40               	movwf	printSortTimer@cur_sec+1,c
 18918                           
 18919                           ;sort.c: 281: unsigned int timeDiff = cur_sec - start_sec;
 18920  0024C8  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18921  0024CC  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18922  0024D0  1E2A               	comf	??_printSortTimer,f,c
 18923  0024D2  1E2B               	comf	??_printSortTimer+1,f,c
 18924  0024D4  4A2A               	infsnz	??_printSortTimer,f,c
 18925  0024D6  2A2B               	incf	??_printSortTimer+1,f,c
 18926  0024D8  503F               	movf	printSortTimer@cur_sec,w,c
 18927  0024DA  242A               	addwf	??_printSortTimer,w,c
 18928  0024DC  6E47               	movwf	printSortTimer@timeDiff,c
 18929  0024DE  5040               	movf	printSortTimer@cur_sec+1,w,c
 18930  0024E0  202B               	addwfc	??_printSortTimer+1,w,c
 18931  0024E2  6E48               	movwf	printSortTimer@timeDiff+1,c
 18932                           
 18933                           ;sort.c: 283: total_time = timeDiff;
 18934  0024E4  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18935  0024E8  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18936                           
 18937                           ;sort.c: 285: if(timeDiff >= 10){
 18938  0024EC  5048               	movf	printSortTimer@timeDiff+1,w,c
 18939  0024EE  E104               	bnz	i2u685_40
 18940  0024F0  0E0A               	movlw	10
 18941  0024F2  5C47               	subwf	printSortTimer@timeDiff,w,c
 18942  0024F4  A0D8               	btfss	status,0,c
 18943  0024F6  D003               	goto	i2l7976
 18944  0024F8                     i2u685_40:
 18945                           
 18946                           ;sort.c: 286: machine_state = DoneSorting_state;
 18947  0024F8  0E02               	movlw	2
 18948  0024FA  0100               	movlb	0	; () banked
 18949  0024FC  6FFC               	movwf	_machine_state& (0+255),b
 18950  0024FE                     i2l7976:
 18951                           
 18952                           ;sort.c: 288: }
 18953                           ;sort.c: 290: int hour = timeDiff / 3600;
 18954  0024FE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18955  002502  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18956  002506  0E0E               	movlw	14
 18957  002508  6E09               	movwf	i2___lwdiv@divisor+1,c
 18958  00250A  0E10               	movlw	16
 18959  00250C  6E08               	movwf	i2___lwdiv@divisor,c
 18960  00250E  EC7F  F01F         	call	i2___lwdiv	;wreg free
 18961  002512  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18962  002516  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18963                           
 18964                           ;sort.c: 291: int min = (timeDiff % 3600) / 60;
 18965  00251A  0E0E               	movlw	14
 18966  00251C  6E04               	movwf	i2___lwmod@divisor+1,c
 18967  00251E  0E10               	movlw	16
 18968  002520  6E03               	movwf	i2___lwmod@divisor,c
 18969  002522  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18970  002526  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18971  00252A  EC65  F020         	call	i2___lwmod	;wreg free
 18972  00252E  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18973  002532  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18974  002536  0E00               	movlw	0
 18975  002538  6E09               	movwf	i2___lwdiv@divisor+1,c
 18976  00253A  0E3C               	movlw	60
 18977  00253C  6E08               	movwf	i2___lwdiv@divisor,c
 18978  00253E  EC7F  F01F         	call	i2___lwdiv	;wreg free
 18979  002542  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18980  002546  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18981                           
 18982                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 18983  00254A  0E0E               	movlw	14
 18984  00254C  6E04               	movwf	i2___lwmod@divisor+1,c
 18985  00254E  0E10               	movlw	16
 18986  002550  6E03               	movwf	i2___lwmod@divisor,c
 18987  002552  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18988  002556  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18989  00255A  EC65  F020         	call	i2___lwmod	;wreg free
 18990  00255E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2366
 18991  002562  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2366+1
 18992                           
 18993                           ;sort.c: 292: int sec = (timeDiff % 3600) % 60;
 18994  002566  C045  F001         	movff	_printSortTimer$2366,i2___lwmod@dividend
 18995  00256A  C046  F002         	movff	_printSortTimer$2366+1,i2___lwmod@dividend+1
 18996  00256E  0E00               	movlw	0
 18997  002570  6E04               	movwf	i2___lwmod@divisor+1,c
 18998  002572  0E3C               	movlw	60
 18999  002574  6E03               	movwf	i2___lwmod@divisor,c
 19000  002576  EC65  F020         	call	i2___lwmod	;wreg free
 19001  00257A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19002  00257E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19003                           
 19004                           ;sort.c: 294: lcdInst(0b10000000);;
 19005  002582  0E80               	movlw	128
 19006  002584  EC42  F023         	call	i2_lcdInst
 19007                           
 19008                           ;sort.c: 295: printf("SORTING...");
 19009  002588  0E84               	movlw	low STR_64
 19010  00258A  6E0D               	movwf	i2printf@f,c
 19011  00258C  0EFF               	movlw	high STR_64
 19012  00258E  6E0E               	movwf	i2printf@f+1,c
 19013  002590  ECD4  F00A         	call	i2_printf	;wreg free
 19014                           
 19015                           ;sort.c: 296: lcdInst(0b11000000);;
 19016  002594  0EC0               	movlw	192
 19017  002596  EC42  F023         	call	i2_lcdInst
 19018                           
 19019                           ;sort.c: 297: printf("TIME %d:%02d", min, sec);
 19020  00259A  0E55               	movlw	low STR_65
 19021  00259C  6E0D               	movwf	i2printf@f,c
 19022  00259E  0EFF               	movlw	high STR_65
 19023  0025A0  6E0E               	movwf	i2printf@f+1,c
 19024  0025A2  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19025  0025A6  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19026  0025AA  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19027  0025AE  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19028  0025B2  ECD4  F00A         	call	i2_printf	;wreg free
 19029  0025B6  0012               	return		;funcret
 19030  0025B8                     __end_of_printSortTimer:
 19031                           	opt stack 0
 19032                           pclatu	equ	0xFFB
 19033                           pclath	equ	0xFFA
 19034                           tblptru	equ	0xFF8
 19035                           tblptrh	equ	0xFF7
 19036                           tblptrl	equ	0xFF6
 19037                           tablat	equ	0xFF5
 19038                           prodh	equ	0xFF4
 19039                           prodl	equ	0xFF3
 19040                           intcon	equ	0xFF2
 19041                           intcon2	equ	0xFF1
 19042                           intcon3	equ	0xFF0
 19043                           indf0	equ	0xFEF
 19044                           postinc0	equ	0xFEE
 19045                           fsr0h	equ	0xFEA
 19046                           fsr0l	equ	0xFE9
 19047                           wreg	equ	0xFE8
 19048                           postdec1	equ	0xFE5
 19049                           fsr1h	equ	0xFE2
 19050                           fsr1l	equ	0xFE1
 19051                           indf2	equ	0xFDF
 19052                           postinc2	equ	0xFDE
 19053                           postdec2	equ	0xFDD
 19054                           fsr2h	equ	0xFDA
 19055                           fsr2l	equ	0xFD9
 19056                           status	equ	0xFD8
 19057                           
 19058 ;; *************** function i2_printf *****************
 19059 ;; Defined at:
 19060 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19061 ;; Parameters:    Size  Location     Type
 19062 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19063 ;;		 -> STR_112(17), STR_111(17), STR_110(10), STR_109(13), 
 19064 ;;		 -> STR_108(18), STR_107(18), STR_106(17), STR_105(15), 
 19065 ;;		 -> STR_104(15), STR_103(15), STR_102(17), STR_101(17), 
 19066 ;;		 -> STR_100(17), STR_99(16), STR_98(17), STR_97(17), 
 19067 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 19068 ;;		 -> STR_92(15), STR_91(11), STR_90(17), STR_89(11), 
 19069 ;;		 -> STR_88(17), STR_87(14), STR_86(15), STR_85(14), 
 19070 ;;		 -> STR_84(10), STR_83(16), STR_82(15), STR_81(3), 
 19071 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 19072 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 19073 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(17), 
 19074 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 19075 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 19076 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 19077 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 19078 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 19079 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 19080 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 19081 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 19082 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 19083 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 19084 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 19085 ;; Auto vars:     Size  Location     Type
 19086 ;;  printf          4    0        struct .
 19087 ;;  printf          2   39[COMRAM] int 
 19088 ;;  printf          2   35[COMRAM] unsigned int 
 19089 ;;  printf          2   33[COMRAM] unsigned int 
 19090 ;;  printf          2   31[COMRAM] PTR void [1]
 19091 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19092 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19093 ;;		 -> STR_113(7), count_total(2), printRTC@month(4), UI@month(4), 
 19094 ;;  printf          1   38[COMRAM] char 
 19095 ;;  printf          1   37[COMRAM] unsigned char 
 19096 ;;  printf          1   28[COMRAM] char 
 19097 ;; Return value:  Size  Location     Type
 19098 ;;                  2   12[COMRAM] int 
 19099 ;; Registers used:
 19100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19101 ;; Tracked objects:
 19102 ;;		On entry : 0/0
 19103 ;;		On exit  : 0/0
 19104 ;;		Unchanged: 0/0
 19105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19106 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19107 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19108 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19110 ;;Total ram usage:       29 bytes
 19111 ;; Hardware stack levels used:    1
 19112 ;; Hardware stack levels required when called:    2
 19113 ;; This function calls:
 19114 ;;		i2___lwdiv
 19115 ;;		i2___lwmod
 19116 ;;		i2___wmul
 19117 ;;		i2_isdigit
 19118 ;;		i2_putch
 19119 ;; This function is called by:
 19120 ;;		_change_state_to_menu_11
 19121 ;;		_change_state_to_menu_23
 19122 ;;		_change_state_to_logs_11
 19123 ;;		_change_state_to_logs_12
 19124 ;;		_change_state_to_logs_22
 19125 ;;		_change_state_to_logs_23
 19126 ;;		_change_state_to_logs_33
 19127 ;;		_change_state_to_logs_34
 19128 ;;		_printSortTimer
 19129 ;;		i2_change_state_to_menu_start
 19130 ;;		i2_change_state_to_menu_12
 19131 ;;		i2_change_state_to_menu_22
 19132 ;;		i2_printRTC
 19133 ;; This function uses a non-reentrant model
 19134 ;;
 19135                           
 19136                           	psect	text77
 19137  0015A8                     __ptext77:
 19138                           	opt stack 0
 19139  0015A8                     i2_printf:
 19140                           	opt stack 19
 19141                           
 19142                           ;doprnt.c: 466: va_list ap;
 19143                           ;doprnt.c: 499: signed char c;
 19144                           ;doprnt.c: 501: int width;
 19145                           ;doprnt.c: 506: signed char prec;
 19146                           ;doprnt.c: 508: unsigned char flag;
 19147                           ;doprnt.c: 523: union {
 19148                           ;doprnt.c: 524: unsigned long vd;
 19149                           ;doprnt.c: 525: double integ;
 19150                           ;doprnt.c: 526: } tmpval;
 19151                           ;doprnt.c: 528: unsigned int val;
 19152                           ;doprnt.c: 529: unsigned len;
 19153                           ;doprnt.c: 530: const char * cp;
 19154                           ;doprnt.c: 533: *ap = __va_start();
 19155                           
 19156                           ;incstack = 0
 19157  0015A8  0E0F               	movlw	low (?i2_printf+2)
 19158  0015AA  6E20               	movwf	i2printf@ap,c
 19159  0015AC  0E00               	movlw	high (?i2_printf+2)
 19160  0015AE  6E21               	movwf	i2printf@ap+1,c
 19161                           
 19162                           ;doprnt.c: 536: while(c = *f++) {
 19163  0015B0  D1A4               	goto	i2l5730
 19164  0015B2                     i2l5600:
 19165                           
 19166                           ;doprnt.c: 538: if(c != '%')
 19167  0015B2  0E25               	movlw	37
 19168  0015B4  1827               	xorwf	i2printf@c,w,c
 19169  0015B6  B4D8               	btfsc	status,2,c
 19170  0015B8  D004               	goto	i2l5604
 19171                           
 19172                           ;doprnt.c: 540: {
 19173                           ;doprnt.c: 541: (putch(c) );
 19174  0015BA  5027               	movf	i2printf@c,w,c
 19175  0015BC  EC3C  F023         	call	i2_putch
 19176                           
 19177                           ;doprnt.c: 542: continue;
 19178  0015C0  D19C               	goto	i2l5730
 19179  0015C2                     i2l5604:
 19180                           
 19181                           ;doprnt.c: 543: }
 19182                           ;doprnt.c: 546: width = 0;
 19183  0015C2  0E00               	movlw	0
 19184  0015C4  6E29               	movwf	i2printf@width+1,c
 19185  0015C6  0E00               	movlw	0
 19186  0015C8  6E28               	movwf	i2printf@width,c
 19187                           
 19188                           ;doprnt.c: 548: flag = 0;
 19189  0015CA  0E00               	movlw	0
 19190  0015CC  6E26               	movwf	i2printf@flag,c
 19191                           
 19192                           ;doprnt.c: 551: switch(*f) {
 19193                           
 19194                           ;doprnt.c: 550: for(;;) {
 19195  0015CE  D003               	goto	i2l5610
 19196  0015D0                     i2l5606:
 19197                           
 19198                           ;doprnt.c: 580: flag |= 0x04;
 19199  0015D0  8426               	bsf	i2printf@flag,2,c
 19200                           
 19201                           ;doprnt.c: 581: f++;
 19202  0015D2  4A0D               	infsnz	i2printf@f,f,c
 19203  0015D4  2A0E               	incf	i2printf@f+1,f,c
 19204  0015D6                     i2l5610:
 19205  0015D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 19206  0015DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19207  0015DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19208  0015DE  6AF8               	clrf	tblptru,c
 19209  0015E0                     	endif
 19210  0015E0                     	if	0	;tblptru may be non-zero
 19211  0015E0                     	endif
 19212  0015E0  0008               	tblrd		*
 19213  0015E2  50F5               	movf	tablat,w,c
 19214                           
 19215                           ; Switch size 1, requested type "space"
 19216                           ; Number of cases is 1, Range of values is 48 to 48
 19217                           ; switch strategies available:
 19218                           ; Name         Instructions Cycles
 19219                           ; simple_byte            4     3 (average)
 19220                           ;	Chosen strategy is simple_byte
 19221  0015E4  0A30               	xorlw	48	; case 48
 19222  0015E6  B4D8               	btfsc	status,2,c
 19223  0015E8  D7F3               	goto	i2l5606
 19224                           
 19225                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19226                           
 19227                           ;doprnt.c: 586: }
 19228                           
 19229                           ;doprnt.c: 585: break;
 19230  0015EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19231  0015EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19232  0015F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19233  0015F2  6AF8               	clrf	tblptru,c
 19234  0015F4                     	endif
 19235  0015F4                     	if	0	;tblptru may be non-zero
 19236  0015F4                     	endif
 19237  0015F4  0008               	tblrd		*
 19238  0015F6  50F5               	movf	tablat,w,c
 19239  0015F8  ECE8  F022         	call	i2_isdigit
 19240  0015FC  A0D8               	btfss	status,0,c
 19241  0015FE  D0A6               	goto	i2l5658
 19242                           
 19243                           ;doprnt.c: 598: width = 0;
 19244  001600  0E00               	movlw	0
 19245  001602  6E29               	movwf	i2printf@width+1,c
 19246  001604  0E00               	movlw	0
 19247  001606  6E28               	movwf	i2printf@width,c
 19248  001608                     i2l5616:
 19249                           
 19250                           ;doprnt.c: 600: width *= 10;
 19251  001608  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19252  00160C  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19253  001610  0E00               	movlw	0
 19254  001612  6E04               	movwf	i2___wmul@multiplicand+1,c
 19255  001614  0E0A               	movlw	10
 19256  001616  6E03               	movwf	i2___wmul@multiplicand,c
 19257  001618  EC7C  F022         	call	i2___wmul	;wreg free
 19258  00161C  C001  F028         	movff	?i2___wmul,i2printf@width
 19259  001620  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19260                           
 19261                           ;doprnt.c: 601: width += *f++ - '0';
 19262  001624  0ED0               	movlw	208
 19263  001626  6E19               	movwf	??i2_printf& (0+255),c
 19264  001628  0EFF               	movlw	255
 19265  00162A  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19266  00162C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19267  001630  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19268  001634                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19269  001634  6AF8               	clrf	tblptru,c
 19270  001636                     	endif
 19271  001636                     	if	0	;tblptru may be non-zero
 19272  001636                     	endif
 19273  001636  0008               	tblrd		*
 19274  001638  50F5               	movf	tablat,w,c
 19275  00163A  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19276  00163C  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19277  00163E  5019               	movf	??i2_printf,w,c
 19278  001640  261B               	addwf	??i2_printf+2,f,c
 19279  001642  501A               	movf	??i2_printf+1,w,c
 19280  001644  221C               	addwfc	??i2_printf+3,f,c
 19281  001646  501B               	movf	??i2_printf+2,w,c
 19282  001648  2628               	addwf	i2printf@width,f,c
 19283  00164A  501C               	movf	??i2_printf+3,w,c
 19284  00164C  2229               	addwfc	i2printf@width+1,f,c
 19285  00164E  4A0D               	infsnz	i2printf@f,f,c
 19286  001650  2A0E               	incf	i2printf@f+1,f,c
 19287                           
 19288                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19289  001652  C00D  FFF6         	movff	i2printf@f,tblptrl
 19290  001656  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19291  00165A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19292  00165A  6AF8               	clrf	tblptru,c
 19293  00165C                     	endif
 19294  00165C                     	if	0	;tblptru may be non-zero
 19295  00165C                     	endif
 19296  00165C  0008               	tblrd		*
 19297  00165E  50F5               	movf	tablat,w,c
 19298  001660  ECE8  F022         	call	i2_isdigit
 19299  001664  A0D8               	btfss	status,0,c
 19300  001666  D072               	goto	i2l5658
 19301  001668  D7CF               	goto	i2l5616
 19302  00166A                     i2l5624:
 19303                           
 19304                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19305  00166A  C020  FFD9         	movff	i2printf@ap,fsr2l
 19306  00166E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19307  001672  CFDE F01E          	movff	postinc2,i2printf@cp
 19308  001676  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19309  00167A  0E02               	movlw	2
 19310  00167C  2620               	addwf	i2printf@ap,f,c
 19311  00167E  0E00               	movlw	0
 19312  001680  2221               	addwfc	i2printf@ap+1,f,c
 19313                           
 19314                           ;doprnt.c: 740: if(!cp)
 19315  001682  501E               	movf	i2printf@cp,w,c
 19316  001684  101F               	iorwf	i2printf@cp+1,w,c
 19317  001686  A4D8               	btfss	status,2,c
 19318  001688  D004               	goto	i2l5632
 19319                           
 19320                           ;doprnt.c: 741: cp = "(null)";
 19321  00168A  0EB5               	movlw	low STR_113
 19322  00168C  6E1E               	movwf	i2printf@cp,c
 19323  00168E  0EFF               	movlw	high STR_113
 19324  001690  6E1F               	movwf	i2printf@cp+1,c
 19325  001692                     i2l5632:
 19326                           
 19327                           ;doprnt.c: 745: len = 0;
 19328  001692  0E00               	movlw	0
 19329  001694  6E23               	movwf	i2printf@len+1,c
 19330  001696  0E00               	movlw	0
 19331  001698  6E22               	movwf	i2printf@len,c
 19332                           
 19333                           ;doprnt.c: 746: while(cp[len])
 19334  00169A  D002               	goto	i2l5636
 19335  00169C                     i2l5634:
 19336                           
 19337                           ;doprnt.c: 747: len++;
 19338  00169C  4A22               	infsnz	i2printf@len,f,c
 19339  00169E  2A23               	incf	i2printf@len+1,f,c
 19340  0016A0                     i2l5636:
 19341  0016A0  5022               	movf	i2printf@len,w,c
 19342  0016A2  241E               	addwf	i2printf@cp,w,c
 19343  0016A4  6E19               	movwf	??i2_printf& (0+255),c
 19344  0016A6  5023               	movf	i2printf@len+1,w,c
 19345  0016A8  201F               	addwfc	i2printf@cp+1,w,c
 19346  0016AA  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19347  0016AC  C019  FFF6         	movff	??i2_printf,tblptrl
 19348  0016B0  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19349  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
 19350  0016B6  6EF8               	movwf	tblptru,c
 19351  0016B8  0E0F               	movlw	(high __ramtop+-1)
 19352  0016BA  64F7               	cpfsgt	tblptrh,c
 19353  0016BC  D003               	bra	i2u417_47
 19354  0016BE  0008               	tblrd		*
 19355  0016C0  50F5               	movf	tablat,w,c
 19356  0016C2  D005               	bra	i2u417_40
 19357  0016C4                     i2u417_47:
 19358  0016C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 19359  0016C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 19360  0016CC  50EF               	movf	indf0,w,c
 19361  0016CE                     i2u417_40:
 19362  0016CE  0900               	iorlw	0
 19363  0016D0  A4D8               	btfss	status,2,c
 19364  0016D2  D7E4               	goto	i2l5634
 19365                           
 19366                           ;doprnt.c: 757: if(width > len)
 19367  0016D4  5028               	movf	i2printf@width,w,c
 19368  0016D6  5C22               	subwf	i2printf@len,w,c
 19369  0016D8  5029               	movf	i2printf@width+1,w,c
 19370  0016DA  5823               	subwfb	i2printf@len+1,w,c
 19371  0016DC  B0D8               	btfsc	status,0,c
 19372  0016DE  D005               	goto	i2l5642
 19373                           
 19374                           ;doprnt.c: 758: width -= len;
 19375  0016E0  5022               	movf	i2printf@len,w,c
 19376  0016E2  5E28               	subwf	i2printf@width,f,c
 19377  0016E4  5023               	movf	i2printf@len+1,w,c
 19378  0016E6  5A29               	subwfb	i2printf@width+1,f,c
 19379  0016E8  D008               	goto	i2l5646
 19380  0016EA                     i2l5642:
 19381                           
 19382                           ;doprnt.c: 759: else
 19383                           ;doprnt.c: 760: width = 0;
 19384  0016EA  0E00               	movlw	0
 19385  0016EC  6E29               	movwf	i2printf@width+1,c
 19386  0016EE  0E00               	movlw	0
 19387  0016F0  6E28               	movwf	i2printf@width,c
 19388                           
 19389                           ;doprnt.c: 764: while(width--)
 19390  0016F2  D003               	goto	i2l5646
 19391  0016F4                     i2l5644:
 19392                           
 19393                           ;doprnt.c: 765: (putch(' ') );
 19394  0016F4  0E20               	movlw	32
 19395  0016F6  EC3C  F023         	call	i2_putch
 19396  0016FA                     i2l5646:
 19397  0016FA  0628               	decf	i2printf@width,f,c
 19398  0016FC  A0D8               	btfss	status,0,c
 19399  0016FE  0629               	decf	i2printf@width+1,f,c
 19400  001700  2828               	incf	i2printf@width,w,c
 19401  001702  E1F8               	bnz	i2l5644
 19402  001704  2829               	incf	i2printf@width+1,w,c
 19403  001706  B4D8               	btfsc	status,2,c
 19404  001708  D016               	goto	i2l5652
 19405  00170A  D7F4               	goto	i2l5644
 19406  00170C                     i2l5648:
 19407                           
 19408                           ;doprnt.c: 768: (putch(*cp++) );
 19409  00170C  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19410  001710  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19411  001714  0E00               	movlw	low (__mediumconst shr (0+16))
 19412  001716  6EF8               	movwf	tblptru,c
 19413  001718  0E0F               	movlw	(high __ramtop+-1)
 19414  00171A  64F7               	cpfsgt	tblptrh,c
 19415  00171C  D003               	bra	i2u421_47
 19416  00171E  0008               	tblrd		*
 19417  001720  50F5               	movf	tablat,w,c
 19418  001722  D005               	bra	i2u421_40
 19419  001724                     i2u421_47:
 19420  001724  CFF6 FFE9          	movff	tblptrl,fsr0l
 19421  001728  CFF7 FFEA          	movff	tblptrh,fsr0h
 19422  00172C  50EF               	movf	indf0,w,c
 19423  00172E                     i2u421_40:
 19424  00172E  EC3C  F023         	call	i2_putch
 19425  001732  4A1E               	infsnz	i2printf@cp,f,c
 19426  001734  2A1F               	incf	i2printf@cp+1,f,c
 19427  001736                     i2l5652:
 19428  001736  0622               	decf	i2printf@len,f,c
 19429  001738  A0D8               	btfss	status,0,c
 19430  00173A  0623               	decf	i2printf@len+1,f,c
 19431  00173C  2822               	incf	i2printf@len,w,c
 19432  00173E  E1E6               	bnz	i2l5648
 19433  001740  2823               	incf	i2printf@len+1,w,c
 19434  001742  B4D8               	btfsc	status,2,c
 19435  001744  D0DA               	goto	i2l5730
 19436  001746  D7E2               	goto	i2l5648
 19437  001748                     i2l5654:
 19438                           
 19439                           ;doprnt.c: 818: flag |= 0x40;
 19440  001748  8C26               	bsf	i2printf@flag,6,c
 19441                           
 19442                           ;doprnt.c: 822: }
 19443                           
 19444                           ;doprnt.c: 819: break;
 19445  00174A  D01B               	goto	i2l1236
 19446  00174C                     i2l5658:
 19447  00174C  C00D  FFF6         	movff	i2printf@f,tblptrl
 19448  001750  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19449  001754  4A0D               	infsnz	i2printf@f,f,c
 19450  001756  2A0E               	incf	i2printf@f+1,f,c
 19451  001758                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19452  001758  6AF8               	clrf	tblptru,c
 19453  00175A                     	endif
 19454  00175A                     	if	0	;tblptru may be non-zero
 19455  00175A                     	endif
 19456  00175A  0008               	tblrd		*
 19457  00175C  CFF5 F027          	movff	tablat,i2printf@c
 19458  001760  5027               	movf	i2printf@c,w,c
 19459                           
 19460                           ; Switch size 1, requested type "space"
 19461                           ; Number of cases is 5, Range of values is 0 to 117
 19462                           ; switch strategies available:
 19463                           ; Name         Instructions Cycles
 19464                           ; simple_byte           16     9 (average)
 19465                           ;	Chosen strategy is simple_byte
 19466  001762  0A00               	xorlw	0	; case 0
 19467  001764  B4D8               	btfsc	status,2,c
 19468  001766  0012               	return	
 19469  001768  0A64               	xorlw	100	; case 100
 19470  00176A  B4D8               	btfsc	status,2,c
 19471  00176C  D00A               	goto	i2l1236
 19472  00176E  0A0D               	xorlw	13	; case 105
 19473  001770  B4D8               	btfsc	status,2,c
 19474  001772  D007               	goto	i2l1236
 19475  001774  0A1A               	xorlw	26	; case 115
 19476  001776  B4D8               	btfsc	status,2,c
 19477  001778  D778               	goto	i2l5624
 19478  00177A  0A06               	xorlw	6	; case 117
 19479  00177C  B4D8               	btfsc	status,2,c
 19480  00177E  D7E4               	goto	i2l5654
 19481  001780  D0BC               	goto	i2l5730
 19482  001782                     i2l1236:
 19483                           
 19484                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19485  001782  BC26               	btfsc	i2printf@flag,6,c
 19486  001784  D015               	goto	i2l5670
 19487                           
 19488                           ;doprnt.c: 1253: {
 19489                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19490  001786  C020  FFD9         	movff	i2printf@ap,fsr2l
 19491  00178A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19492  00178E  CFDE F024          	movff	postinc2,i2printf@val
 19493  001792  CFDD F025          	movff	postdec2,i2printf@val+1
 19494  001796  0E02               	movlw	2
 19495  001798  2620               	addwf	i2printf@ap,f,c
 19496  00179A  0E00               	movlw	0
 19497  00179C  2221               	addwfc	i2printf@ap+1,f,c
 19498                           
 19499                           ;doprnt.c: 1261: if((int)val < 0) {
 19500  00179E  AE25               	btfss	i2printf@val+1,7,c
 19501  0017A0  D013               	goto	i2l5674
 19502                           
 19503                           ;doprnt.c: 1262: flag |= 0x03;
 19504  0017A2  0E03               	movlw	3
 19505  0017A4  1226               	iorwf	i2printf@flag,f,c
 19506                           
 19507                           ;doprnt.c: 1263: val = -val;
 19508  0017A6  6C24               	negf	i2printf@val,c
 19509  0017A8  1E25               	comf	i2printf@val+1,f,c
 19510  0017AA  B0D8               	btfsc	status,0,c
 19511  0017AC  2A25               	incf	i2printf@val+1,f,c
 19512                           
 19513                           ;doprnt.c: 1264: }
 19514                           ;doprnt.c: 1266: }
 19515  0017AE  D00C               	goto	i2l5674
 19516  0017B0                     i2l5670:
 19517                           
 19518                           ;doprnt.c: 1268: else
 19519                           ;doprnt.c: 1273: {
 19520                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19521  0017B0  C020  FFD9         	movff	i2printf@ap,fsr2l
 19522  0017B4  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19523  0017B8  CFDE F024          	movff	postinc2,i2printf@val
 19524  0017BC  CFDD F025          	movff	postdec2,i2printf@val+1
 19525  0017C0  0E02               	movlw	2
 19526  0017C2  2620               	addwf	i2printf@ap,f,c
 19527  0017C4  0E00               	movlw	0
 19528  0017C6  2221               	addwfc	i2printf@ap+1,f,c
 19529  0017C8                     i2l5674:
 19530                           
 19531                           ;doprnt.c: 1287: }
 19532                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19533  0017C8  0E01               	movlw	1
 19534  0017CA  6E27               	movwf	i2printf@c,c
 19535  0017CC                     i2l5676:
 19536  0017CC  0E05               	movlw	5
 19537  0017CE  1827               	xorwf	i2printf@c,w,c
 19538  0017D0  B4D8               	btfsc	status,2,c
 19539  0017D2  D015               	goto	i2l5688
 19540                           
 19541                           ;doprnt.c: 1306: if(val < dpowers[c])
 19542  0017D4  5027               	movf	i2printf@c,w,c
 19543  0017D6  0D02               	mullw	2
 19544  0017D8  0E38               	movlw	low _dpowers
 19545  0017DA  24F3               	addwf	prodl,w,c
 19546  0017DC  6EF6               	movwf	tblptrl,c
 19547  0017DE  0EFB               	movlw	high _dpowers
 19548  0017E0  20F4               	addwfc	prodh,w,c
 19549  0017E2  6EF7               	movwf	tblptrh,c
 19550  0017E4                     	if	1	;There are 3 active tblptr bytes
 19551  0017E4  6AF8               	clrf	tblptru,c
 19552  0017E6  0E00               	movlw	low (__mediumconst shr (0+16))
 19553  0017E8  22F8               	addwfc	tblptru,f,c
 19554  0017EA                     	endif
 19555  0017EA  0009               	tblrd		*+
 19556  0017EC  50F5               	movf	tablat,w,c
 19557  0017EE  5C24               	subwf	i2printf@val,w,c
 19558  0017F0  0009               	tblrd		*+
 19559  0017F2  50F5               	movf	tablat,w,c
 19560  0017F4  5825               	subwfb	i2printf@val+1,w,c
 19561  0017F6  A0D8               	btfss	status,0,c
 19562  0017F8  D002               	goto	i2l5688
 19563                           
 19564                           ;doprnt.c: 1307: break;
 19565  0017FA  2A27               	incf	i2printf@c,f,c
 19566  0017FC  D7E7               	goto	i2l5676
 19567  0017FE                     i2l5688:
 19568                           
 19569                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19570  0017FE  5028               	movf	i2printf@width,w,c
 19571  001800  1029               	iorwf	i2printf@width+1,w,c
 19572  001802  B4D8               	btfsc	status,2,c
 19573  001804  D009               	goto	i2l5694
 19574  001806  C026  F019         	movff	i2printf@flag,??i2_printf
 19575  00180A  0E03               	movlw	3
 19576  00180C  1619               	andwf	??i2_printf,f,c
 19577  00180E  B4D8               	btfsc	status,2,c
 19578  001810  D003               	goto	i2l5694
 19579                           
 19580                           ;doprnt.c: 1346: width--;
 19581  001812  0628               	decf	i2printf@width,f,c
 19582  001814  A0D8               	btfss	status,0,c
 19583  001816  0629               	decf	i2printf@width+1,f,c
 19584  001818                     i2l5694:
 19585                           
 19586                           ;doprnt.c: 1381: if(width > c)
 19587  001818  0E80               	movlw	128
 19588  00181A  BE27               	btfsc	i2printf@c,7,c
 19589  00181C  0E7F               	movlw	127
 19590  00181E  6E19               	movwf	??i2_printf& (0+255),c
 19591  001820  5028               	movf	i2printf@width,w,c
 19592  001822  5C27               	subwf	i2printf@c,w,c
 19593  001824  5029               	movf	i2printf@width+1,w,c
 19594  001826  0A80               	xorlw	128
 19595  001828  5819               	subwfb	??i2_printf& (0+255),w,c
 19596  00182A  B0D8               	btfsc	status,0,c
 19597  00182C  D007               	goto	i2l5698
 19598                           
 19599                           ;doprnt.c: 1382: width -= c;
 19600  00182E  5027               	movf	i2printf@c,w,c
 19601  001830  5E28               	subwf	i2printf@width,f,c
 19602  001832  0E00               	movlw	0
 19603  001834  BE27               	btfsc	i2printf@c,7,c
 19604  001836  0EFF               	movlw	255
 19605  001838  5A29               	subwfb	i2printf@width+1,f,c
 19606  00183A  D004               	goto	i2l5700
 19607  00183C                     i2l5698:
 19608                           
 19609                           ;doprnt.c: 1383: else
 19610                           ;doprnt.c: 1384: width = 0;
 19611  00183C  0E00               	movlw	0
 19612  00183E  6E29               	movwf	i2printf@width+1,c
 19613  001840  0E00               	movlw	0
 19614  001842  6E28               	movwf	i2printf@width,c
 19615  001844                     i2l5700:
 19616                           
 19617                           ;doprnt.c: 1387: if(flag & 0x04) {
 19618  001844  A426               	btfss	i2printf@flag,2,c
 19619  001846  D014               	goto	i2l5712
 19620                           
 19621                           ;doprnt.c: 1392: if(flag & 0x03)
 19622  001848  C026  F019         	movff	i2printf@flag,??i2_printf
 19623  00184C  0E03               	movlw	3
 19624  00184E  1619               	andwf	??i2_printf,f,c
 19625  001850  B4D8               	btfsc	status,2,c
 19626  001852  D003               	goto	i2l5706
 19627                           
 19628                           ;doprnt.c: 1393: (putch('-') );
 19629  001854  0E2D               	movlw	45
 19630  001856  EC3C  F023         	call	i2_putch
 19631  00185A                     i2l5706:
 19632                           
 19633                           ;doprnt.c: 1415: if(width)
 19634  00185A  5028               	movf	i2printf@width,w,c
 19635  00185C  1029               	iorwf	i2printf@width+1,w,c
 19636  00185E  B4D8               	btfsc	status,2,c
 19637  001860  D01E               	goto	i2l5722
 19638                           
 19639                           ;doprnt.c: 1417: (putch('0') );
 19640                           
 19641                           ;doprnt.c: 1416: do
 19642  001862  0E30               	movlw	48
 19643  001864  EC3C  F023         	call	i2_putch
 19644                           
 19645                           ;doprnt.c: 1418: while(--width);
 19646  001868  0628               	decf	i2printf@width,f,c
 19647  00186A  A0D8               	btfss	status,0,c
 19648  00186C  0629               	decf	i2printf@width+1,f,c
 19649  00186E  D7F5               	goto	i2l5706
 19650  001870                     i2l5712:
 19651                           
 19652                           ;doprnt.c: 1422: {
 19653                           ;doprnt.c: 1424: if(width
 19654                           ;doprnt.c: 1428: )
 19655  001870  5028               	movf	i2printf@width,w,c
 19656  001872  1029               	iorwf	i2printf@width+1,w,c
 19657  001874  B4D8               	btfsc	status,2,c
 19658  001876  D00A               	goto	i2l5718
 19659  001878                     i2l5714:
 19660                           
 19661                           ;doprnt.c: 1430: (putch(' ') );
 19662  001878  0E20               	movlw	32
 19663  00187A  EC3C  F023         	call	i2_putch
 19664                           
 19665                           ;doprnt.c: 1431: while(--width);
 19666  00187E  0628               	decf	i2printf@width,f,c
 19667  001880  A0D8               	btfss	status,0,c
 19668  001882  0629               	decf	i2printf@width+1,f,c
 19669  001884  5028               	movf	i2printf@width,w,c
 19670  001886  1029               	iorwf	i2printf@width+1,w,c
 19671  001888  A4D8               	btfss	status,2,c
 19672  00188A  D7F6               	goto	i2l5714
 19673  00188C                     i2l5718:
 19674                           
 19675                           ;doprnt.c: 1438: if(flag & 0x03)
 19676  00188C  C026  F019         	movff	i2printf@flag,??i2_printf
 19677  001890  0E03               	movlw	3
 19678  001892  1619               	andwf	??i2_printf,f,c
 19679  001894  B4D8               	btfsc	status,2,c
 19680  001896  D003               	goto	i2l5722
 19681                           
 19682                           ;doprnt.c: 1439: (putch('-') );
 19683  001898  0E2D               	movlw	45
 19684  00189A  EC3C  F023         	call	i2_putch
 19685  00189E                     i2l5722:
 19686                           
 19687                           ;doprnt.c: 1469: }
 19688                           ;doprnt.c: 1472: prec = c;
 19689  00189E  C027  F01D         	movff	i2printf@c,i2printf@prec
 19690                           
 19691                           ;doprnt.c: 1474: while(prec--) {
 19692  0018A2  D027               	goto	i2l5728
 19693  0018A4                     i2l5724:
 19694                           
 19695                           ;doprnt.c: 1478: {
 19696                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19697  0018A4  501D               	movf	i2printf@prec,w,c
 19698  0018A6  0D02               	mullw	2
 19699  0018A8  0E38               	movlw	low _dpowers
 19700  0018AA  24F3               	addwf	prodl,w,c
 19701  0018AC  6EF6               	movwf	tblptrl,c
 19702  0018AE  0EFB               	movlw	high _dpowers
 19703  0018B0  20F4               	addwfc	prodh,w,c
 19704  0018B2  6EF7               	movwf	tblptrh,c
 19705  0018B4                     	if	1	;There are 3 active tblptr bytes
 19706  0018B4  6AF8               	clrf	tblptru,c
 19707  0018B6  0E00               	movlw	low (__mediumconst shr (0+16))
 19708  0018B8  22F8               	addwfc	tblptru,f,c
 19709  0018BA                     	endif
 19710  0018BA  0009               	tblrd		*+
 19711  0018BC  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19712  0018C0  000A               	tblrd		*-
 19713  0018C2  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19714  0018C6  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19715  0018CA  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19716  0018CE  EC7F  F01F         	call	i2___lwdiv	;wreg free
 19717  0018D2  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19718  0018D6  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19719  0018DA  0E00               	movlw	0
 19720  0018DC  6E04               	movwf	i2___lwmod@divisor+1,c
 19721  0018DE  0E0A               	movlw	10
 19722  0018E0  6E03               	movwf	i2___lwmod@divisor,c
 19723  0018E2  EC65  F020         	call	i2___lwmod	;wreg free
 19724  0018E6  5001               	movf	?i2___lwmod,w,c
 19725  0018E8  0F30               	addlw	48
 19726  0018EA  6E27               	movwf	i2printf@c,c
 19727                           
 19728                           ;doprnt.c: 1523: }
 19729                           ;doprnt.c: 1524: (putch(c) );
 19730  0018EC  5027               	movf	i2printf@c,w,c
 19731  0018EE  EC3C  F023         	call	i2_putch
 19732  0018F2                     i2l5728:
 19733  0018F2  061D               	decf	i2printf@prec,f,c
 19734  0018F4  281D               	incf	i2printf@prec,w,c
 19735  0018F6  A4D8               	btfss	status,2,c
 19736  0018F8  D7D5               	goto	i2l5724
 19737  0018FA                     i2l5730:
 19738  0018FA  C00D  FFF6         	movff	i2printf@f,tblptrl
 19739  0018FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19740  001902  4A0D               	infsnz	i2printf@f,f,c
 19741  001904  2A0E               	incf	i2printf@f+1,f,c
 19742  001906                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19743  001906  6AF8               	clrf	tblptru,c
 19744  001908                     	endif
 19745  001908                     	if	0	;tblptru may be non-zero
 19746  001908                     	endif
 19747  001908  0008               	tblrd		*
 19748  00190A  CFF5 F027          	movff	tablat,i2printf@c
 19749  00190E  5027               	movf	i2printf@c,w,c
 19750  001910  B4D8               	btfsc	status,2,c
 19751  001912  0012               	return	
 19752  001914  D64E               	goto	i2l5600
 19753  001916                     __end_ofi2_printf:
 19754                           	opt stack 0
 19755                           pclatu	equ	0xFFB
 19756                           pclath	equ	0xFFA
 19757                           tblptru	equ	0xFF8
 19758                           tblptrh	equ	0xFF7
 19759                           tblptrl	equ	0xFF6
 19760                           tablat	equ	0xFF5
 19761                           prodh	equ	0xFF4
 19762                           prodl	equ	0xFF3
 19763                           intcon	equ	0xFF2
 19764                           intcon2	equ	0xFF1
 19765                           intcon3	equ	0xFF0
 19766                           indf0	equ	0xFEF
 19767                           postinc0	equ	0xFEE
 19768                           fsr0h	equ	0xFEA
 19769                           fsr0l	equ	0xFE9
 19770                           wreg	equ	0xFE8
 19771                           postdec1	equ	0xFE5
 19772                           fsr1h	equ	0xFE2
 19773                           fsr1l	equ	0xFE1
 19774                           indf2	equ	0xFDF
 19775                           postinc2	equ	0xFDE
 19776                           postdec2	equ	0xFDD
 19777                           fsr2h	equ	0xFDA
 19778                           fsr2l	equ	0xFD9
 19779                           status	equ	0xFD8
 19780                           
 19781 ;; *************** function i2_putch *****************
 19782 ;; Defined at:
 19783 ;;		line 20 in file "lcd.c"
 19784 ;; Parameters:    Size  Location     Type
 19785 ;;  data            1    wreg     unsigned char 
 19786 ;; Auto vars:     Size  Location     Type
 19787 ;;  data            1    2[COMRAM] unsigned char 
 19788 ;; Return value:  Size  Location     Type
 19789 ;;                  1    wreg      void 
 19790 ;; Registers used:
 19791 ;;		wreg, status,2, status,0, cstack
 19792 ;; Tracked objects:
 19793 ;;		On entry : 0/0
 19794 ;;		On exit  : 0/0
 19795 ;;		Unchanged: 0/0
 19796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;Total ram usage:        1 bytes
 19802 ;; Hardware stack levels used:    1
 19803 ;; Hardware stack levels required when called:    1
 19804 ;; This function calls:
 19805 ;;		i2_lcdNibble
 19806 ;; This function is called by:
 19807 ;;		i2_printf
 19808 ;; This function uses a non-reentrant model
 19809 ;;
 19810                           
 19811                           	psect	text78
 19812  004678                     __ptext78:
 19813                           	opt stack 0
 19814  004678                     i2_putch:
 19815                           	opt stack 19
 19816                           
 19817                           ;incstack = 0
 19818                           ;i2putch@data stored from wreg
 19819  004678  6E03               	movwf	i2putch@data,c
 19820                           
 19821                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19822  00467A  848C               	bsf	3980,2,c	;volatile
 19823                           
 19824                           ;lcd.c: 22: lcdNibble(data);
 19825  00467C  5003               	movf	i2putch@data,w,c
 19826  00467E  EC54  F01F         	call	i2_lcdNibble
 19827  004682  0012               	return		;funcret
 19828  004684                     __end_ofi2_putch:
 19829                           	opt stack 0
 19830                           pclatu	equ	0xFFB
 19831                           pclath	equ	0xFFA
 19832                           tblptru	equ	0xFF8
 19833                           tblptrh	equ	0xFF7
 19834                           tblptrl	equ	0xFF6
 19835                           tablat	equ	0xFF5
 19836                           prodh	equ	0xFF4
 19837                           prodl	equ	0xFF3
 19838                           intcon	equ	0xFF2
 19839                           intcon2	equ	0xFF1
 19840                           intcon3	equ	0xFF0
 19841                           indf0	equ	0xFEF
 19842                           postinc0	equ	0xFEE
 19843                           fsr0h	equ	0xFEA
 19844                           fsr0l	equ	0xFE9
 19845                           wreg	equ	0xFE8
 19846                           postdec1	equ	0xFE5
 19847                           fsr1h	equ	0xFE2
 19848                           fsr1l	equ	0xFE1
 19849                           indf2	equ	0xFDF
 19850                           postinc2	equ	0xFDE
 19851                           postdec2	equ	0xFDD
 19852                           fsr2h	equ	0xFDA
 19853                           fsr2l	equ	0xFD9
 19854                           status	equ	0xFD8
 19855                           
 19856 ;; *************** function i2_isdigit *****************
 19857 ;; Defined at:
 19858 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19859 ;; Parameters:    Size  Location     Type
 19860 ;;  c               1    wreg     unsigned char 
 19861 ;; Auto vars:     Size  Location     Type
 19862 ;;  c               1    2[COMRAM] unsigned char 
 19863 ;; Return value:  Size  Location     Type
 19864 ;;		None               void
 19865 ;; Registers used:
 19866 ;;		wreg, status,2, status,0
 19867 ;; Tracked objects:
 19868 ;;		On entry : 0/0
 19869 ;;		On exit  : 0/0
 19870 ;;		Unchanged: 0/0
 19871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19875 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19876 ;;Total ram usage:        3 bytes
 19877 ;; Hardware stack levels used:    1
 19878 ;; This function calls:
 19879 ;;		Nothing
 19880 ;; This function is called by:
 19881 ;;		i2_printf
 19882 ;; This function uses a non-reentrant model
 19883 ;;
 19884                           
 19885                           	psect	text79
 19886  0045D0                     __ptext79:
 19887                           	opt stack 0
 19888  0045D0                     i2_isdigit:
 19889                           	opt stack 20
 19890                           
 19891                           ;incstack = 0
 19892                           ;i2isdigit@c stored from wreg
 19893  0045D0  6E03               	movwf	i2isdigit@c,c
 19894  0045D2  0E00               	movlw	0
 19895  0045D4  6E02               	movwf	i2_isdigit$1893,c
 19896  0045D6  0E3A               	movlw	58
 19897  0045D8  6003               	cpfslt	i2isdigit@c,c
 19898  0045DA  D005               	goto	i2l5310
 19899  0045DC  0E2F               	movlw	47
 19900  0045DE  6403               	cpfsgt	i2isdigit@c,c
 19901  0045E0  D002               	goto	i2l5310
 19902  0045E2  0E01               	movlw	1
 19903  0045E4  6E02               	movwf	i2_isdigit$1893,c
 19904  0045E6                     i2l5310:
 19905  0045E6  C002  F001         	movff	i2_isdigit$1893,??i2_isdigit
 19906  0045EA  3001               	rrcf	??i2_isdigit,w,c
 19907  0045EC  0012               	return	
 19908  0045EE                     __end_ofi2_isdigit:
 19909                           	opt stack 0
 19910                           pclatu	equ	0xFFB
 19911                           pclath	equ	0xFFA
 19912                           tblptru	equ	0xFF8
 19913                           tblptrh	equ	0xFF7
 19914                           tblptrl	equ	0xFF6
 19915                           tablat	equ	0xFF5
 19916                           prodh	equ	0xFF4
 19917                           prodl	equ	0xFF3
 19918                           intcon	equ	0xFF2
 19919                           intcon2	equ	0xFF1
 19920                           intcon3	equ	0xFF0
 19921                           indf0	equ	0xFEF
 19922                           postinc0	equ	0xFEE
 19923                           fsr0h	equ	0xFEA
 19924                           fsr0l	equ	0xFE9
 19925                           wreg	equ	0xFE8
 19926                           postdec1	equ	0xFE5
 19927                           fsr1h	equ	0xFE2
 19928                           fsr1l	equ	0xFE1
 19929                           indf2	equ	0xFDF
 19930                           postinc2	equ	0xFDE
 19931                           postdec2	equ	0xFDD
 19932                           fsr2h	equ	0xFDA
 19933                           fsr2l	equ	0xFD9
 19934                           status	equ	0xFD8
 19935                           
 19936 ;; *************** function i2___wmul *****************
 19937 ;; Defined at:
 19938 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19939 ;; Parameters:    Size  Location     Type
 19940 ;;  multiplier      2    0[COMRAM] unsigned int 
 19941 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;  __wmul          2    4[COMRAM] unsigned int 
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  2    0[COMRAM] unsigned int 
 19946 ;; Registers used:
 19947 ;;		wreg, status,2, status,0, prodl, prodh
 19948 ;; Tracked objects:
 19949 ;;		On entry : 0/0
 19950 ;;		On exit  : 0/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19957 ;;Total ram usage:        6 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; This function calls:
 19960 ;;		Nothing
 19961 ;; This function is called by:
 19962 ;;		_printSortTimer
 19963 ;;		_retrieveLog
 19964 ;;		i2_printf
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           	psect	text80
 19969  0044F8                     __ptext80:
 19970                           	opt stack 0
 19971  0044F8                     i2___wmul:
 19972                           	opt stack 20
 19973                           
 19974                           ;incstack = 0
 19975  0044F8  5001               	movf	i2___wmul@multiplier,w,c
 19976  0044FA  0203               	mulwf	i2___wmul@multiplicand,c
 19977  0044FC  CFF3 F005          	movff	prodl,i2___wmul@product
 19978  004500  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19979  004504  5001               	movf	i2___wmul@multiplier,w,c
 19980  004506  0204               	mulwf	i2___wmul@multiplicand+1,c
 19981  004508  50F3               	movf	prodl,w,c
 19982  00450A  2606               	addwf	i2___wmul@product+1,f,c
 19983  00450C  5002               	movf	i2___wmul@multiplier+1,w,c
 19984  00450E  0203               	mulwf	i2___wmul@multiplicand,c
 19985  004510  50F3               	movf	prodl,w,c
 19986  004512  2606               	addwf	i2___wmul@product+1,f,c
 19987  004514  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19988  004518  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19989  00451C  0012               	return	
 19990  00451E                     __end_ofi2___wmul:
 19991                           	opt stack 0
 19992                           pclatu	equ	0xFFB
 19993                           pclath	equ	0xFFA
 19994                           tblptru	equ	0xFF8
 19995                           tblptrh	equ	0xFF7
 19996                           tblptrl	equ	0xFF6
 19997                           tablat	equ	0xFF5
 19998                           prodh	equ	0xFF4
 19999                           prodl	equ	0xFF3
 20000                           intcon	equ	0xFF2
 20001                           intcon2	equ	0xFF1
 20002                           intcon3	equ	0xFF0
 20003                           indf0	equ	0xFEF
 20004                           postinc0	equ	0xFEE
 20005                           fsr0h	equ	0xFEA
 20006                           fsr0l	equ	0xFE9
 20007                           wreg	equ	0xFE8
 20008                           postdec1	equ	0xFE5
 20009                           fsr1h	equ	0xFE2
 20010                           fsr1l	equ	0xFE1
 20011                           indf2	equ	0xFDF
 20012                           postinc2	equ	0xFDE
 20013                           postdec2	equ	0xFDD
 20014                           fsr2h	equ	0xFDA
 20015                           fsr2l	equ	0xFD9
 20016                           status	equ	0xFD8
 20017                           
 20018 ;; *************** function i2___lwmod *****************
 20019 ;; Defined at:
 20020 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20021 ;; Parameters:    Size  Location     Type
 20022 ;;  dividend        2    0[COMRAM] unsigned int 
 20023 ;;  divisor         2    2[COMRAM] unsigned int 
 20024 ;; Auto vars:     Size  Location     Type
 20025 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20026 ;; Return value:  Size  Location     Type
 20027 ;;                  2    0[COMRAM] unsigned int 
 20028 ;; Registers used:
 20029 ;;		wreg, status,2, status,0
 20030 ;; Tracked objects:
 20031 ;;		On entry : 0/0
 20032 ;;		On exit  : 0/0
 20033 ;;		Unchanged: 0/0
 20034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20038 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20039 ;;Total ram usage:        5 bytes
 20040 ;; Hardware stack levels used:    1
 20041 ;; This function calls:
 20042 ;;		Nothing
 20043 ;; This function is called by:
 20044 ;;		_printSortTimer
 20045 ;;		i2_printf
 20046 ;; This function uses a non-reentrant model
 20047 ;;
 20048                           
 20049                           	psect	text81
 20050  0040CA                     __ptext81:
 20051                           	opt stack 0
 20052  0040CA                     i2___lwmod:
 20053                           	opt stack 20
 20054                           
 20055                           ;incstack = 0
 20056  0040CA  5003               	movf	i2___lwmod@divisor,w,c
 20057  0040CC  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20058  0040CE  B4D8               	btfsc	status,2,c
 20059  0040D0  D018               	goto	i2l1693
 20060  0040D2  0E01               	movlw	1
 20061  0040D4  6E05               	movwf	i2___lwmod@counter,c
 20062  0040D6  D004               	goto	i2l5342
 20063  0040D8                     i2l5340:
 20064  0040D8  90D8               	bcf	status,0,c
 20065  0040DA  3603               	rlcf	i2___lwmod@divisor,f,c
 20066  0040DC  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20067  0040DE  2A05               	incf	i2___lwmod@counter,f,c
 20068  0040E0                     i2l5342:
 20069  0040E0  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20070  0040E2  D7FA               	goto	i2l5340
 20071  0040E4                     i2l5344:
 20072  0040E4  5003               	movf	i2___lwmod@divisor,w,c
 20073  0040E6  5C01               	subwf	i2___lwmod@dividend,w,c
 20074  0040E8  5004               	movf	i2___lwmod@divisor+1,w,c
 20075  0040EA  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20076  0040EC  A0D8               	btfss	status,0,c
 20077  0040EE  D004               	goto	i2l5348
 20078  0040F0  5003               	movf	i2___lwmod@divisor,w,c
 20079  0040F2  5E01               	subwf	i2___lwmod@dividend,f,c
 20080  0040F4  5004               	movf	i2___lwmod@divisor+1,w,c
 20081  0040F6  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20082  0040F8                     i2l5348:
 20083  0040F8  90D8               	bcf	status,0,c
 20084  0040FA  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20085  0040FC  3203               	rrcf	i2___lwmod@divisor,f,c
 20086  0040FE  2E05               	decfsz	i2___lwmod@counter,f,c
 20087  004100  D7F1               	goto	i2l5344
 20088  004102                     i2l1693:
 20089  004102  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20090  004106  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20091  00410A  0012               	return		;funcret
 20092  00410C                     __end_ofi2___lwmod:
 20093                           	opt stack 0
 20094                           pclatu	equ	0xFFB
 20095                           pclath	equ	0xFFA
 20096                           tblptru	equ	0xFF8
 20097                           tblptrh	equ	0xFF7
 20098                           tblptrl	equ	0xFF6
 20099                           tablat	equ	0xFF5
 20100                           prodh	equ	0xFF4
 20101                           prodl	equ	0xFF3
 20102                           intcon	equ	0xFF2
 20103                           intcon2	equ	0xFF1
 20104                           intcon3	equ	0xFF0
 20105                           indf0	equ	0xFEF
 20106                           postinc0	equ	0xFEE
 20107                           fsr0h	equ	0xFEA
 20108                           fsr0l	equ	0xFE9
 20109                           wreg	equ	0xFE8
 20110                           postdec1	equ	0xFE5
 20111                           fsr1h	equ	0xFE2
 20112                           fsr1l	equ	0xFE1
 20113                           indf2	equ	0xFDF
 20114                           postinc2	equ	0xFDE
 20115                           postdec2	equ	0xFDD
 20116                           fsr2h	equ	0xFDA
 20117                           fsr2l	equ	0xFD9
 20118                           status	equ	0xFD8
 20119                           
 20120 ;; *************** function i2___lwdiv *****************
 20121 ;; Defined at:
 20122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20123 ;; Parameters:    Size  Location     Type
 20124 ;;  dividend        2    5[COMRAM] unsigned int 
 20125 ;;  divisor         2    7[COMRAM] unsigned int 
 20126 ;; Auto vars:     Size  Location     Type
 20127 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20128 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20129 ;; Return value:  Size  Location     Type
 20130 ;;                  2    5[COMRAM] unsigned int 
 20131 ;; Registers used:
 20132 ;;		wreg, status,2, status,0
 20133 ;; Tracked objects:
 20134 ;;		On entry : 0/0
 20135 ;;		On exit  : 0/0
 20136 ;;		Unchanged: 0/0
 20137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20139 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;Total ram usage:        7 bytes
 20143 ;; Hardware stack levels used:    1
 20144 ;; This function calls:
 20145 ;;		Nothing
 20146 ;; This function is called by:
 20147 ;;		_printSortTimer
 20148 ;;		i2_printf
 20149 ;; This function uses a non-reentrant model
 20150 ;;
 20151                           
 20152                           	psect	text82
 20153  003EFE                     __ptext82:
 20154                           	opt stack 0
 20155  003EFE                     i2___lwdiv:
 20156                           	opt stack 20
 20157                           
 20158                           ;incstack = 0
 20159  003EFE  0E00               	movlw	0
 20160  003F00  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20161  003F02  0E00               	movlw	0
 20162  003F04  6E0A               	movwf	i2___lwdiv@quotient,c
 20163  003F06  5008               	movf	i2___lwdiv@divisor,w,c
 20164  003F08  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20165  003F0A  B4D8               	btfsc	status,2,c
 20166  003F0C  D01C               	goto	i2l1683
 20167  003F0E  0E01               	movlw	1
 20168  003F10  6E0C               	movwf	i2___lwdiv@counter,c
 20169  003F12  D004               	goto	i2l5322
 20170  003F14                     i2l5320:
 20171  003F14  90D8               	bcf	status,0,c
 20172  003F16  3608               	rlcf	i2___lwdiv@divisor,f,c
 20173  003F18  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20174  003F1A  2A0C               	incf	i2___lwdiv@counter,f,c
 20175  003F1C                     i2l5322:
 20176  003F1C  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20177  003F1E  D7FA               	goto	i2l5320
 20178  003F20                     i2l5324:
 20179  003F20  90D8               	bcf	status,0,c
 20180  003F22  360A               	rlcf	i2___lwdiv@quotient,f,c
 20181  003F24  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20182  003F26  5008               	movf	i2___lwdiv@divisor,w,c
 20183  003F28  5C06               	subwf	i2___lwdiv@dividend,w,c
 20184  003F2A  5009               	movf	i2___lwdiv@divisor+1,w,c
 20185  003F2C  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20186  003F2E  A0D8               	btfss	status,0,c
 20187  003F30  D005               	goto	i2l5332
 20188  003F32  5008               	movf	i2___lwdiv@divisor,w,c
 20189  003F34  5E06               	subwf	i2___lwdiv@dividend,f,c
 20190  003F36  5009               	movf	i2___lwdiv@divisor+1,w,c
 20191  003F38  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20192  003F3A  800A               	bsf	i2___lwdiv@quotient,0,c
 20193  003F3C                     i2l5332:
 20194  003F3C  90D8               	bcf	status,0,c
 20195  003F3E  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20196  003F40  3208               	rrcf	i2___lwdiv@divisor,f,c
 20197  003F42  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20198  003F44  D7ED               	goto	i2l5324
 20199  003F46                     i2l1683:
 20200  003F46  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20201  003F4A  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20202  003F4E  0012               	return		;funcret
 20203  003F50                     __end_ofi2___lwdiv:
 20204                           	opt stack 0
 20205                           pclatu	equ	0xFFB
 20206                           pclath	equ	0xFFA
 20207                           tblptru	equ	0xFF8
 20208                           tblptrh	equ	0xFF7
 20209                           tblptrl	equ	0xFF6
 20210                           tablat	equ	0xFF5
 20211                           prodh	equ	0xFF4
 20212                           prodl	equ	0xFF3
 20213                           intcon	equ	0xFF2
 20214                           intcon2	equ	0xFF1
 20215                           intcon3	equ	0xFF0
 20216                           indf0	equ	0xFEF
 20217                           postinc0	equ	0xFEE
 20218                           fsr0h	equ	0xFEA
 20219                           fsr0l	equ	0xFE9
 20220                           wreg	equ	0xFE8
 20221                           postdec1	equ	0xFE5
 20222                           fsr1h	equ	0xFE2
 20223                           fsr1l	equ	0xFE1
 20224                           indf2	equ	0xFDF
 20225                           postinc2	equ	0xFDE
 20226                           postdec2	equ	0xFDD
 20227                           fsr2h	equ	0xFDA
 20228                           fsr2l	equ	0xFD9
 20229                           status	equ	0xFD8
 20230                           
 20231 ;; *************** function i2_lcdInst *****************
 20232 ;; Defined at:
 20233 ;;		line 15 in file "lcd.c"
 20234 ;; Parameters:    Size  Location     Type
 20235 ;;  data            1    wreg     unsigned char 
 20236 ;; Auto vars:     Size  Location     Type
 20237 ;;  data            1    2[COMRAM] unsigned char 
 20238 ;; Return value:  Size  Location     Type
 20239 ;;                  1    wreg      void 
 20240 ;; Registers used:
 20241 ;;		wreg, status,2, status,0, cstack
 20242 ;; Tracked objects:
 20243 ;;		On entry : 0/0
 20244 ;;		On exit  : 0/0
 20245 ;;		Unchanged: 0/0
 20246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20251 ;;Total ram usage:        1 bytes
 20252 ;; Hardware stack levels used:    1
 20253 ;; Hardware stack levels required when called:    1
 20254 ;; This function calls:
 20255 ;;		i2_lcdNibble
 20256 ;; This function is called by:
 20257 ;;		_change_state_to_menu_11
 20258 ;;		_change_state_to_menu_23
 20259 ;;		_change_state_to_logs_11
 20260 ;;		_change_state_to_logs_12
 20261 ;;		_change_state_to_logs_22
 20262 ;;		_change_state_to_logs_23
 20263 ;;		_change_state_to_logs_33
 20264 ;;		_change_state_to_logs_34
 20265 ;;		_printSortTimer
 20266 ;;		i2_change_state_to_menu_start
 20267 ;;		i2_change_state_to_menu_12
 20268 ;;		i2_change_state_to_menu_22
 20269 ;;		i2_printRTC
 20270 ;; This function uses a non-reentrant model
 20271 ;;
 20272                           
 20273                           	psect	text83
 20274  004684                     __ptext83:
 20275                           	opt stack 0
 20276  004684                     i2_lcdInst:
 20277                           	opt stack 19
 20278                           
 20279                           ;incstack = 0
 20280                           ;i2lcdInst@data stored from wreg
 20281  004684  6E03               	movwf	i2lcdInst@data,c
 20282                           
 20283                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20284  004686  948C               	bcf	3980,2,c	;volatile
 20285                           
 20286                           ;lcd.c: 17: lcdNibble(data);
 20287  004688  5003               	movf	i2lcdInst@data,w,c
 20288  00468A  EC54  F01F         	call	i2_lcdNibble
 20289  00468E  0012               	return		;funcret
 20290  004690                     __end_ofi2_lcdInst:
 20291                           	opt stack 0
 20292                           pclatu	equ	0xFFB
 20293                           pclath	equ	0xFFA
 20294                           tblptru	equ	0xFF8
 20295                           tblptrh	equ	0xFF7
 20296                           tblptrl	equ	0xFF6
 20297                           tablat	equ	0xFF5
 20298                           prodh	equ	0xFF4
 20299                           prodl	equ	0xFF3
 20300                           intcon	equ	0xFF2
 20301                           intcon2	equ	0xFF1
 20302                           intcon3	equ	0xFF0
 20303                           indf0	equ	0xFEF
 20304                           postinc0	equ	0xFEE
 20305                           fsr0h	equ	0xFEA
 20306                           fsr0l	equ	0xFE9
 20307                           wreg	equ	0xFE8
 20308                           postdec1	equ	0xFE5
 20309                           fsr1h	equ	0xFE2
 20310                           fsr1l	equ	0xFE1
 20311                           indf2	equ	0xFDF
 20312                           postinc2	equ	0xFDE
 20313                           postdec2	equ	0xFDD
 20314                           fsr2h	equ	0xFDA
 20315                           fsr2l	equ	0xFD9
 20316                           status	equ	0xFD8
 20317                           
 20318 ;; *************** function i2_lcdNibble *****************
 20319 ;; Defined at:
 20320 ;;		line 25 in file "lcd.c"
 20321 ;; Parameters:    Size  Location     Type
 20322 ;;  data            1    wreg     unsigned char 
 20323 ;; Auto vars:     Size  Location     Type
 20324 ;;  data            1    1[COMRAM] unsigned char 
 20325 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20326 ;; Return value:  Size  Location     Type
 20327 ;;                  1    wreg      void 
 20328 ;; Registers used:
 20329 ;;		wreg, status,2, status,0
 20330 ;; Tracked objects:
 20331 ;;		On entry : 0/0
 20332 ;;		On exit  : 0/0
 20333 ;;		Unchanged: 0/0
 20334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20339 ;;Total ram usage:        2 bytes
 20340 ;; Hardware stack levels used:    1
 20341 ;; This function calls:
 20342 ;;		Nothing
 20343 ;; This function is called by:
 20344 ;;		i2_lcdInst
 20345 ;;		i2_putch
 20346 ;; This function uses a non-reentrant model
 20347 ;;
 20348                           
 20349                           	psect	text84
 20350  003EA8                     __ptext84:
 20351                           	opt stack 0
 20352  003EA8                     i2_lcdNibble:
 20353                           	opt stack 19
 20354                           
 20355                           ;incstack = 0
 20356                           ;i2lcdNibble@data stored from wreg
 20357  003EA8  6E02               	movwf	i2lcdNibble@data,c
 20358                           
 20359                           ;lcd.c: 27: char temp = data & 0xF0;
 20360  003EAA  5002               	movf	i2lcdNibble@data,w,c
 20361  003EAC  0BF0               	andlw	240
 20362  003EAE  6E01               	movwf	i2lcdNibble@temp,c
 20363                           
 20364                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20365  003EB0  508C               	movf	3980,w,c	;volatile
 20366  003EB2  0B0F               	andlw	15
 20367  003EB4  6E8C               	movwf	3980,c	;volatile
 20368                           
 20369                           ;lcd.c: 29: LATD = temp | LATD;
 20370  003EB6  5001               	movf	i2lcdNibble@temp,w,c
 20371  003EB8  108C               	iorwf	3980,w,c	;volatile
 20372  003EBA  6E8C               	movwf	3980,c	;volatile
 20373                           
 20374                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20375  003EBC  868C               	bsf	3980,3,c	;volatile
 20376                           
 20377                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20378  003EBE  0E42               	movlw	66
 20379  003EC0                     i2u812_47:
 20380  003EC0  2EE8               	decfsz	wreg,f,c
 20381  003EC2  D7FE               	bra	i2u812_47
 20382  003EC4  D000               	nop2	
 20383                           
 20384                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20385  003EC6  968C               	bcf	3980,3,c	;volatile
 20386                           
 20387                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20388  003EC8  0E42               	movlw	66
 20389  003ECA                     i2u813_47:
 20390  003ECA  2EE8               	decfsz	wreg,f,c
 20391  003ECC  D7FE               	bra	i2u813_47
 20392  003ECE  D000               	nop2	
 20393                           
 20394                           ;lcd.c: 36: data = data << 4;
 20395  003ED0  3802               	swapf	i2lcdNibble@data,w,c
 20396  003ED2  0BF0               	andlw	240
 20397  003ED4  6E02               	movwf	i2lcdNibble@data,c
 20398                           
 20399                           ;lcd.c: 38: temp = data & 0xF0;
 20400  003ED6  5002               	movf	i2lcdNibble@data,w,c
 20401  003ED8  0BF0               	andlw	240
 20402  003EDA  6E01               	movwf	i2lcdNibble@temp,c
 20403                           
 20404                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20405  003EDC  508C               	movf	3980,w,c	;volatile
 20406  003EDE  0B0F               	andlw	15
 20407  003EE0  6E8C               	movwf	3980,c	;volatile
 20408                           
 20409                           ;lcd.c: 40: LATD = temp | LATD;
 20410  003EE2  5001               	movf	i2lcdNibble@temp,w,c
 20411  003EE4  108C               	iorwf	3980,w,c	;volatile
 20412  003EE6  6E8C               	movwf	3980,c	;volatile
 20413                           
 20414                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20415  003EE8  868C               	bsf	3980,3,c	;volatile
 20416                           
 20417                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20418  003EEA  0E42               	movlw	66
 20419  003EEC                     i2u814_47:
 20420  003EEC  2EE8               	decfsz	wreg,f,c
 20421  003EEE  D7FE               	bra	i2u814_47
 20422  003EF0  D000               	nop2	
 20423                           
 20424                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20425  003EF2  968C               	bcf	3980,3,c	;volatile
 20426                           
 20427                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20428  003EF4  0E42               	movlw	66
 20429  003EF6                     i2u815_47:
 20430  003EF6  2EE8               	decfsz	wreg,f,c
 20431  003EF8  D7FE               	bra	i2u815_47
 20432  003EFA  D000               	nop2	
 20433  003EFC  0012               	return		;funcret
 20434  003EFE                     __end_ofi2_lcdNibble:
 20435                           	opt stack 0
 20436                           pclatu	equ	0xFFB
 20437                           pclath	equ	0xFFA
 20438                           tblptru	equ	0xFF8
 20439                           tblptrh	equ	0xFF7
 20440                           tblptrl	equ	0xFF6
 20441                           tablat	equ	0xFF5
 20442                           prodh	equ	0xFF4
 20443                           prodl	equ	0xFF3
 20444                           intcon	equ	0xFF2
 20445                           intcon2	equ	0xFF1
 20446                           intcon3	equ	0xFF0
 20447                           indf0	equ	0xFEF
 20448                           postinc0	equ	0xFEE
 20449                           fsr0h	equ	0xFEA
 20450                           fsr0l	equ	0xFE9
 20451                           wreg	equ	0xFE8
 20452                           postdec1	equ	0xFE5
 20453                           fsr1h	equ	0xFE2
 20454                           fsr1l	equ	0xFE1
 20455                           indf2	equ	0xFDF
 20456                           postinc2	equ	0xFDE
 20457                           postdec2	equ	0xFDD
 20458                           fsr2h	equ	0xFDA
 20459                           fsr2l	equ	0xFD9
 20460                           status	equ	0xFD8
 20461                           
 20462 ;; *************** function i2_getRTC *****************
 20463 ;; Defined at:
 20464 ;;		line 44 in file "RTC.c"
 20465 ;; Parameters:    Size  Location     Type
 20466 ;;		None
 20467 ;; Auto vars:     Size  Location     Type
 20468 ;;  getRTC          2    3[COMRAM] int 
 20469 ;; Return value:  Size  Location     Type
 20470 ;;                  1    wreg      void 
 20471 ;; Registers used:
 20472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20473 ;; Tracked objects:
 20474 ;;		On entry : 0/0
 20475 ;;		On exit  : 0/0
 20476 ;;		Unchanged: 0/0
 20477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20482 ;;Total ram usage:        2 bytes
 20483 ;; Hardware stack levels used:    1
 20484 ;; Hardware stack levels required when called:    2
 20485 ;; This function calls:
 20486 ;;		i2_I2C_Master_Read
 20487 ;;		i2_I2C_Master_Start
 20488 ;;		i2_I2C_Master_Stop
 20489 ;;		i2_I2C_Master_Write
 20490 ;; This function is called by:
 20491 ;;		_printSortTimer
 20492 ;;		i2_printRTC
 20493 ;; This function uses a non-reentrant model
 20494 ;;
 20495                           
 20496                           	psect	text85
 20497  003BEC                     __ptext85:
 20498                           	opt stack 0
 20499  003BEC                     i2_getRTC:
 20500                           	opt stack 18
 20501                           
 20502                           ;RTC.c: 48: I2C_Master_Start();
 20503                           
 20504                           ;incstack = 0
 20505  003BEC  EC62  F023         	call	i2_I2C_Master_Start	;wreg free
 20506                           
 20507                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20508  003BF0  0E00               	movlw	0
 20509  003BF2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20510  003BF4  0ED0               	movlw	208
 20511  003BF6  6E02               	movwf	i2I2C_Master_Write@d,c
 20512  003BF8  EC4D  F023         	call	i2_I2C_Master_Write	;wreg free
 20513                           
 20514                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20515  003BFC  0E00               	movlw	0
 20516  003BFE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20517  003C00  0E00               	movlw	0
 20518  003C02  6E02               	movwf	i2I2C_Master_Write@d,c
 20519  003C04  EC4D  F023         	call	i2_I2C_Master_Write	;wreg free
 20520                           
 20521                           ;RTC.c: 51: I2C_Master_Stop();
 20522  003C08  EC5E  F023         	call	i2_I2C_Master_Stop	;wreg free
 20523                           
 20524                           ;RTC.c: 54: I2C_Master_Start();
 20525  003C0C  EC62  F023         	call	i2_I2C_Master_Start	;wreg free
 20526                           
 20527                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20528  003C10  0E00               	movlw	0
 20529  003C12  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20530  003C14  0ED1               	movlw	209
 20531  003C16  6E02               	movwf	i2I2C_Master_Write@d,c
 20532  003C18  EC4D  F023         	call	i2_I2C_Master_Write	;wreg free
 20533                           
 20534                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20535  003C1C  0E00               	movlw	0
 20536  003C1E  6E05               	movwf	i2getRTC@i+1,c
 20537  003C20  0E00               	movlw	0
 20538  003C22  6E04               	movwf	i2getRTC@i,c
 20539  003C24                     i2l5572:
 20540  003C24  BE05               	btfsc	i2getRTC@i+1,7,c
 20541  003C26  D006               	goto	i2l5576
 20542  003C28  5005               	movf	i2getRTC@i+1,w,c
 20543  003C2A  E111               	bnz	i2l5582
 20544  003C2C  0E06               	movlw	6
 20545  003C2E  5C04               	subwf	i2getRTC@i,w,c
 20546  003C30  B0D8               	btfsc	status,0,c
 20547  003C32  D00D               	goto	i2l5582
 20548  003C34                     i2l5576:
 20549                           
 20550                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20551  003C34  0E24               	movlw	low _time
 20552  003C36  2404               	addwf	i2getRTC@i,w,c
 20553  003C38  6ED9               	movwf	fsr2l,c
 20554  003C3A  0E01               	movlw	high _time
 20555  003C3C  2005               	addwfc	i2getRTC@i+1,w,c
 20556  003C3E  6EDA               	movwf	fsr2h,c
 20557  003C40  0E01               	movlw	1
 20558  003C42  EC8F  F022         	call	i2_I2C_Master_Read
 20559  003C46  6EDF               	movwf	indf2,c
 20560  003C48  4A04               	infsnz	i2getRTC@i,f,c
 20561  003C4A  2A05               	incf	i2getRTC@i+1,f,c
 20562  003C4C  D7EB               	goto	i2l5572
 20563  003C4E                     i2l5582:
 20564                           
 20565                           ;RTC.c: 58: }
 20566                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20567  003C4E  0E00               	movlw	0
 20568  003C50  EC8F  F022         	call	i2_I2C_Master_Read
 20569  003C54  0101               	movlb	1	; () banked
 20570  003C56  6F2A               	movwf	(_time+6)& (0+255),b
 20571                           
 20572                           ;RTC.c: 60: I2C_Master_Stop();
 20573  003C58  EC5E  F023         	call	i2_I2C_Master_Stop	;wreg free
 20574  003C5C  0012               	return		;funcret
 20575  003C5E                     __end_ofi2_getRTC:
 20576                           	opt stack 0
 20577                           pclatu	equ	0xFFB
 20578                           pclath	equ	0xFFA
 20579                           tblptru	equ	0xFF8
 20580                           tblptrh	equ	0xFF7
 20581                           tblptrl	equ	0xFF6
 20582                           tablat	equ	0xFF5
 20583                           prodh	equ	0xFF4
 20584                           prodl	equ	0xFF3
 20585                           intcon	equ	0xFF2
 20586                           intcon2	equ	0xFF1
 20587                           intcon3	equ	0xFF0
 20588                           indf0	equ	0xFEF
 20589                           postinc0	equ	0xFEE
 20590                           fsr0h	equ	0xFEA
 20591                           fsr0l	equ	0xFE9
 20592                           wreg	equ	0xFE8
 20593                           postdec1	equ	0xFE5
 20594                           fsr1h	equ	0xFE2
 20595                           fsr1l	equ	0xFE1
 20596                           indf2	equ	0xFDF
 20597                           postinc2	equ	0xFDE
 20598                           postdec2	equ	0xFDD
 20599                           fsr2h	equ	0xFDA
 20600                           fsr2l	equ	0xFD9
 20601                           status	equ	0xFD8
 20602                           
 20603 ;; *************** function i2_I2C_Master_Write *****************
 20604 ;; Defined at:
 20605 ;;		line 49 in file "I2C.c"
 20606 ;; Parameters:    Size  Location     Type
 20607 ;;  d               2    1[COMRAM] unsigned int 
 20608 ;; Auto vars:     Size  Location     Type
 20609 ;;		None
 20610 ;; Return value:  Size  Location     Type
 20611 ;;                  1    wreg      void 
 20612 ;; Registers used:
 20613 ;;		wreg, status,2, status,0, cstack
 20614 ;; Tracked objects:
 20615 ;;		On entry : 0/0
 20616 ;;		On exit  : 0/0
 20617 ;;		Unchanged: 0/0
 20618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20623 ;;Total ram usage:        2 bytes
 20624 ;; Hardware stack levels used:    1
 20625 ;; Hardware stack levels required when called:    1
 20626 ;; This function calls:
 20627 ;;		i2_I2C_Master_Wait
 20628 ;; This function is called by:
 20629 ;;		i2_getRTC
 20630 ;; This function uses a non-reentrant model
 20631 ;;
 20632                           
 20633                           	psect	text86
 20634  00469A                     __ptext86:
 20635                           	opt stack 0
 20636  00469A                     i2_I2C_Master_Write:
 20637                           	opt stack 18
 20638                           
 20639                           ;I2C.c: 51: I2C_Master_Wait();
 20640                           
 20641                           ;incstack = 0
 20642  00469A  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20643                           
 20644                           ;I2C.c: 52: SSPBUF = d;
 20645  00469E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20646  0046A2  0012               	return		;funcret
 20647  0046A4                     __end_ofi2_I2C_Master_Write:
 20648                           	opt stack 0
 20649                           pclatu	equ	0xFFB
 20650                           pclath	equ	0xFFA
 20651                           tblptru	equ	0xFF8
 20652                           tblptrh	equ	0xFF7
 20653                           tblptrl	equ	0xFF6
 20654                           tablat	equ	0xFF5
 20655                           prodh	equ	0xFF4
 20656                           prodl	equ	0xFF3
 20657                           intcon	equ	0xFF2
 20658                           intcon2	equ	0xFF1
 20659                           intcon3	equ	0xFF0
 20660                           indf0	equ	0xFEF
 20661                           postinc0	equ	0xFEE
 20662                           fsr0h	equ	0xFEA
 20663                           fsr0l	equ	0xFE9
 20664                           wreg	equ	0xFE8
 20665                           postdec1	equ	0xFE5
 20666                           fsr1h	equ	0xFE2
 20667                           fsr1l	equ	0xFE1
 20668                           indf2	equ	0xFDF
 20669                           postinc2	equ	0xFDE
 20670                           postdec2	equ	0xFDD
 20671                           fsr2h	equ	0xFDA
 20672                           fsr2l	equ	0xFD9
 20673                           status	equ	0xFD8
 20674                           
 20675 ;; *************** function i2_I2C_Master_Stop *****************
 20676 ;; Defined at:
 20677 ;;		line 43 in file "I2C.c"
 20678 ;; Parameters:    Size  Location     Type
 20679 ;;		None
 20680 ;; Auto vars:     Size  Location     Type
 20681 ;;		None
 20682 ;; Return value:  Size  Location     Type
 20683 ;;                  1    wreg      void 
 20684 ;; Registers used:
 20685 ;;		wreg, status,2, status,0, cstack
 20686 ;; Tracked objects:
 20687 ;;		On entry : 0/0
 20688 ;;		On exit  : 0/0
 20689 ;;		Unchanged: 0/0
 20690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;Total ram usage:        0 bytes
 20696 ;; Hardware stack levels used:    1
 20697 ;; Hardware stack levels required when called:    1
 20698 ;; This function calls:
 20699 ;;		i2_I2C_Master_Wait
 20700 ;; This function is called by:
 20701 ;;		i2_getRTC
 20702 ;; This function uses a non-reentrant model
 20703 ;;
 20704                           
 20705                           	psect	text87
 20706  0046BC                     __ptext87:
 20707                           	opt stack 0
 20708  0046BC                     i2_I2C_Master_Stop:
 20709                           	opt stack 18
 20710                           
 20711                           ;I2C.c: 45: I2C_Master_Wait();
 20712                           
 20713                           ;incstack = 0
 20714  0046BC  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20715                           
 20716                           ;I2C.c: 46: PEN = 1;
 20717  0046C0  84C5               	bsf	4037,2,c	;volatile
 20718  0046C2  0012               	return		;funcret
 20719  0046C4                     __end_ofi2_I2C_Master_Stop:
 20720                           	opt stack 0
 20721                           pclatu	equ	0xFFB
 20722                           pclath	equ	0xFFA
 20723                           tblptru	equ	0xFF8
 20724                           tblptrh	equ	0xFF7
 20725                           tblptrl	equ	0xFF6
 20726                           tablat	equ	0xFF5
 20727                           prodh	equ	0xFF4
 20728                           prodl	equ	0xFF3
 20729                           intcon	equ	0xFF2
 20730                           intcon2	equ	0xFF1
 20731                           intcon3	equ	0xFF0
 20732                           indf0	equ	0xFEF
 20733                           postinc0	equ	0xFEE
 20734                           fsr0h	equ	0xFEA
 20735                           fsr0l	equ	0xFE9
 20736                           wreg	equ	0xFE8
 20737                           postdec1	equ	0xFE5
 20738                           fsr1h	equ	0xFE2
 20739                           fsr1l	equ	0xFE1
 20740                           indf2	equ	0xFDF
 20741                           postinc2	equ	0xFDE
 20742                           postdec2	equ	0xFDD
 20743                           fsr2h	equ	0xFDA
 20744                           fsr2l	equ	0xFD9
 20745                           status	equ	0xFD8
 20746                           
 20747 ;; *************** function i2_I2C_Master_Start *****************
 20748 ;; Defined at:
 20749 ;;		line 31 in file "I2C.c"
 20750 ;; Parameters:    Size  Location     Type
 20751 ;;		None
 20752 ;; Auto vars:     Size  Location     Type
 20753 ;;		None
 20754 ;; Return value:  Size  Location     Type
 20755 ;;                  1    wreg      void 
 20756 ;; Registers used:
 20757 ;;		wreg, status,2, status,0, cstack
 20758 ;; Tracked objects:
 20759 ;;		On entry : 0/0
 20760 ;;		On exit  : 0/0
 20761 ;;		Unchanged: 0/0
 20762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;Total ram usage:        0 bytes
 20768 ;; Hardware stack levels used:    1
 20769 ;; Hardware stack levels required when called:    1
 20770 ;; This function calls:
 20771 ;;		i2_I2C_Master_Wait
 20772 ;; This function is called by:
 20773 ;;		i2_getRTC
 20774 ;; This function uses a non-reentrant model
 20775 ;;
 20776                           
 20777                           	psect	text88
 20778  0046C4                     __ptext88:
 20779                           	opt stack 0
 20780  0046C4                     i2_I2C_Master_Start:
 20781                           	opt stack 18
 20782                           
 20783                           ;I2C.c: 33: I2C_Master_Wait();
 20784                           
 20785                           ;incstack = 0
 20786  0046C4  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20787                           
 20788                           ;I2C.c: 34: SEN = 1;
 20789  0046C8  80C5               	bsf	4037,0,c	;volatile
 20790  0046CA  0012               	return		;funcret
 20791  0046CC                     __end_ofi2_I2C_Master_Start:
 20792                           	opt stack 0
 20793                           pclatu	equ	0xFFB
 20794                           pclath	equ	0xFFA
 20795                           tblptru	equ	0xFF8
 20796                           tblptrh	equ	0xFF7
 20797                           tblptrl	equ	0xFF6
 20798                           tablat	equ	0xFF5
 20799                           prodh	equ	0xFF4
 20800                           prodl	equ	0xFF3
 20801                           intcon	equ	0xFF2
 20802                           intcon2	equ	0xFF1
 20803                           intcon3	equ	0xFF0
 20804                           indf0	equ	0xFEF
 20805                           postinc0	equ	0xFEE
 20806                           fsr0h	equ	0xFEA
 20807                           fsr0l	equ	0xFE9
 20808                           wreg	equ	0xFE8
 20809                           postdec1	equ	0xFE5
 20810                           fsr1h	equ	0xFE2
 20811                           fsr1l	equ	0xFE1
 20812                           indf2	equ	0xFDF
 20813                           postinc2	equ	0xFDE
 20814                           postdec2	equ	0xFDD
 20815                           fsr2h	equ	0xFDA
 20816                           fsr2l	equ	0xFD9
 20817                           status	equ	0xFD8
 20818                           
 20819 ;; *************** function i2_I2C_Master_Read *****************
 20820 ;; Defined at:
 20821 ;;		line 55 in file "I2C.c"
 20822 ;; Parameters:    Size  Location     Type
 20823 ;;  a               1    wreg     unsigned char 
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;  a               1    1[COMRAM] unsigned char 
 20826 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20827 ;; Return value:  Size  Location     Type
 20828 ;;                  1    wreg      unsigned char 
 20829 ;; Registers used:
 20830 ;;		wreg, status,2, status,0, cstack
 20831 ;; Tracked objects:
 20832 ;;		On entry : 0/0
 20833 ;;		On exit  : 0/0
 20834 ;;		Unchanged: 0/0
 20835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20840 ;;Total ram usage:        2 bytes
 20841 ;; Hardware stack levels used:    1
 20842 ;; Hardware stack levels required when called:    1
 20843 ;; This function calls:
 20844 ;;		i2_I2C_Master_Wait
 20845 ;; This function is called by:
 20846 ;;		i2_getRTC
 20847 ;; This function uses a non-reentrant model
 20848 ;;
 20849                           
 20850                           	psect	text89
 20851  00451E                     __ptext89:
 20852                           	opt stack 0
 20853  00451E                     i2_I2C_Master_Read:
 20854                           	opt stack 18
 20855                           
 20856                           ;incstack = 0
 20857                           ;i2I2C_Master_Read@a stored from wreg
 20858  00451E  6E02               	movwf	i2I2C_Master_Read@a,c
 20859                           
 20860                           ;I2C.c: 57: unsigned char temp;
 20861                           ;I2C.c: 58: I2C_Master_Wait();
 20862  004520  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20863                           
 20864                           ;I2C.c: 59: RCEN = 1;
 20865  004524  86C5               	bsf	4037,3,c	;volatile
 20866                           
 20867                           ;I2C.c: 60: I2C_Master_Wait();
 20868  004526  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20869                           
 20870                           ;I2C.c: 61: temp = SSPBUF;
 20871  00452A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20872                           
 20873                           ;I2C.c: 62: I2C_Master_Wait();
 20874  00452E  EC23  F023         	call	i2_I2C_Master_Wait	;wreg free
 20875                           
 20876                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20877  004532  5002               	movf	i2I2C_Master_Read@a,w,c
 20878  004534  A4D8               	btfss	status,2,c
 20879  004536  D002               	goto	i2u364_40
 20880  004538  8AC5               	bsf	4037,5,c	;volatile
 20881  00453A  D001               	goto	i2l5286
 20882  00453C                     i2u364_40:
 20883  00453C  9AC5               	bcf	4037,5,c	;volatile
 20884  00453E                     i2l5286:
 20885                           
 20886                           ;I2C.c: 64: ACKEN = 1;
 20887  00453E  88C5               	bsf	4037,4,c	;volatile
 20888                           
 20889                           ;I2C.c: 65: return temp;
 20890  004540  5003               	movf	i2I2C_Master_Read@temp,w,c
 20891  004542  0012               	return	
 20892  004544                     __end_ofi2_I2C_Master_Read:
 20893                           	opt stack 0
 20894                           pclatu	equ	0xFFB
 20895                           pclath	equ	0xFFA
 20896                           tblptru	equ	0xFF8
 20897                           tblptrh	equ	0xFF7
 20898                           tblptrl	equ	0xFF6
 20899                           tablat	equ	0xFF5
 20900                           prodh	equ	0xFF4
 20901                           prodl	equ	0xFF3
 20902                           intcon	equ	0xFF2
 20903                           intcon2	equ	0xFF1
 20904                           intcon3	equ	0xFF0
 20905                           indf0	equ	0xFEF
 20906                           postinc0	equ	0xFEE
 20907                           fsr0h	equ	0xFEA
 20908                           fsr0l	equ	0xFE9
 20909                           wreg	equ	0xFE8
 20910                           postdec1	equ	0xFE5
 20911                           fsr1h	equ	0xFE2
 20912                           fsr1l	equ	0xFE1
 20913                           indf2	equ	0xFDF
 20914                           postinc2	equ	0xFDE
 20915                           postdec2	equ	0xFDD
 20916                           fsr2h	equ	0xFDA
 20917                           fsr2l	equ	0xFD9
 20918                           status	equ	0xFD8
 20919                           
 20920 ;; *************** function i2_I2C_Master_Wait *****************
 20921 ;; Defined at:
 20922 ;;		line 26 in file "I2C.c"
 20923 ;; Parameters:    Size  Location     Type
 20924 ;;		None
 20925 ;; Auto vars:     Size  Location     Type
 20926 ;;		None
 20927 ;; Return value:  Size  Location     Type
 20928 ;;                  1    wreg      void 
 20929 ;; Registers used:
 20930 ;;		wreg, status,2, status,0
 20931 ;; Tracked objects:
 20932 ;;		On entry : 0/0
 20933 ;;		On exit  : 0/0
 20934 ;;		Unchanged: 0/0
 20935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20939 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20940 ;;Total ram usage:        1 bytes
 20941 ;; Hardware stack levels used:    1
 20942 ;; This function calls:
 20943 ;;		Nothing
 20944 ;; This function is called by:
 20945 ;;		i2_I2C_Master_Start
 20946 ;;		i2_I2C_Master_Stop
 20947 ;;		i2_I2C_Master_Write
 20948 ;;		i2_I2C_Master_Read
 20949 ;; This function uses a non-reentrant model
 20950 ;;
 20951                           
 20952                           	psect	text90
 20953  004646                     __ptext90:
 20954                           	opt stack 0
 20955  004646                     i2_I2C_Master_Wait:
 20956                           	opt stack 18
 20957  004646                     i2l66:
 20958  004646  B4C7               	btfsc	4039,2,c	;volatile
 20959  004648  D7FE               	goto	i2l66
 20960  00464A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20961  00464E  0E1F               	movlw	31
 20962  004650  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20963  004652  B4D8               	btfsc	status,2,c
 20964  004654  0012               	return	
 20965  004656  D7F7               	goto	i2l66
 20966  004658                     __end_ofi2_I2C_Master_Wait:
 20967                           	opt stack 0
 20968                           pclatu	equ	0xFFB
 20969                           pclath	equ	0xFFA
 20970                           tblptru	equ	0xFF8
 20971                           tblptrh	equ	0xFF7
 20972                           tblptrl	equ	0xFF6
 20973                           tablat	equ	0xFF5
 20974                           prodh	equ	0xFF4
 20975                           prodl	equ	0xFF3
 20976                           intcon	equ	0xFF2
 20977                           intcon2	equ	0xFF1
 20978                           intcon3	equ	0xFF0
 20979                           indf0	equ	0xFEF
 20980                           postinc0	equ	0xFEE
 20981                           fsr0h	equ	0xFEA
 20982                           fsr0l	equ	0xFE9
 20983                           wreg	equ	0xFE8
 20984                           postdec1	equ	0xFE5
 20985                           fsr1h	equ	0xFE2
 20986                           fsr1l	equ	0xFE1
 20987                           indf2	equ	0xFDF
 20988                           postinc2	equ	0xFDE
 20989                           postdec2	equ	0xFDD
 20990                           fsr2h	equ	0xFDA
 20991                           fsr2l	equ	0xFD9
 20992                           status	equ	0xFD8
 20993                           pclatu	equ	0xFFB
 20994                           pclath	equ	0xFFA
 20995                           tblptru	equ	0xFF8
 20996                           tblptrh	equ	0xFF7
 20997                           tblptrl	equ	0xFF6
 20998                           tablat	equ	0xFF5
 20999                           prodh	equ	0xFF4
 21000                           prodl	equ	0xFF3
 21001                           intcon	equ	0xFF2
 21002                           intcon2	equ	0xFF1
 21003                           intcon3	equ	0xFF0
 21004                           indf0	equ	0xFEF
 21005                           postinc0	equ	0xFEE
 21006                           fsr0h	equ	0xFEA
 21007                           fsr0l	equ	0xFE9
 21008                           wreg	equ	0xFE8
 21009                           postdec1	equ	0xFE5
 21010                           fsr1h	equ	0xFE2
 21011                           fsr1l	equ	0xFE1
 21012                           indf2	equ	0xFDF
 21013                           postinc2	equ	0xFDE
 21014                           postdec2	equ	0xFDD
 21015                           fsr2h	equ	0xFDA
 21016                           fsr2l	equ	0xFD9
 21017                           status	equ	0xFD8
 21018                           
 21019                           	psect	rparam
 21020  0000                     pclatu	equ	0xFFB
 21021                           pclath	equ	0xFFA
 21022                           tblptru	equ	0xFF8
 21023                           tblptrh	equ	0xFF7
 21024                           tblptrl	equ	0xFF6
 21025                           tablat	equ	0xFF5
 21026                           prodh	equ	0xFF4
 21027                           prodl	equ	0xFF3
 21028                           intcon	equ	0xFF2
 21029                           intcon2	equ	0xFF1
 21030                           intcon3	equ	0xFF0
 21031                           indf0	equ	0xFEF
 21032                           postinc0	equ	0xFEE
 21033                           fsr0h	equ	0xFEA
 21034                           fsr0l	equ	0xFE9
 21035                           wreg	equ	0xFE8
 21036                           postdec1	equ	0xFE5
 21037                           fsr1h	equ	0xFE2
 21038                           fsr1l	equ	0xFE1
 21039                           indf2	equ	0xFDF
 21040                           postinc2	equ	0xFDE
 21041                           postdec2	equ	0xFDD
 21042                           fsr2h	equ	0xFDA
 21043                           fsr2l	equ	0xFD9
 21044                           status	equ	0xFD8
 21045                           
 21046                           	psect	temp
 21047  00007E                     btemp:
 21048                           	opt stack 0
 21049  00007E                     	ds	1
 21050  0000                     int$flags	set	btemp
 21051                           pclatu	equ	0xFFB
 21052                           pclath	equ	0xFFA
 21053                           tblptru	equ	0xFF8
 21054                           tblptrh	equ	0xFF7
 21055                           tblptrl	equ	0xFF6
 21056                           tablat	equ	0xFF5
 21057                           prodh	equ	0xFF4
 21058                           prodl	equ	0xFF3
 21059                           intcon	equ	0xFF2
 21060                           intcon2	equ	0xFF1
 21061                           intcon3	equ	0xFF0
 21062                           indf0	equ	0xFEF
 21063                           postinc0	equ	0xFEE
 21064                           fsr0h	equ	0xFEA
 21065                           fsr0l	equ	0xFE9
 21066                           wreg	equ	0xFE8
 21067                           postdec1	equ	0xFE5
 21068                           fsr1h	equ	0xFE2
 21069                           fsr1l	equ	0xFE1
 21070                           indf2	equ	0xFDF
 21071                           postinc2	equ	0xFDE
 21072                           postdec2	equ	0xFDD
 21073                           fsr2h	equ	0xFDA
 21074                           fsr2l	equ	0xFD9
 21075                           status	equ	0xFD8


Data Sizes:
    Strings     1212
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_113(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_112(CODE[17]), STR_111(CODE[17]), STR_110(CODE[10]), STR_109(CODE[13]), 
		 -> STR_108(CODE[18]), STR_107(CODE[18]), STR_106(CODE[17]), STR_105(CODE[15]), 
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[17]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[16]), STR_98(CODE[17]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[15]), STR_91(CODE[11]), STR_90(CODE[17]), STR_89(CODE[11]), 
		 -> STR_88(CODE[17]), STR_87(CODE[14]), STR_86(CODE[15]), STR_85(CODE[14]), 
		 -> STR_84(CODE[10]), STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  174668
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20124
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15514
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                  10    10      0     253
                                              6 BANK0     10    10      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10530
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9783
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21392
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20542
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42664
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12455
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8087
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   79285
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8199
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8087
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13687
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8112
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8225
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8087
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16801
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7952
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 13:50:56 2017

                                    _i 00E4                     i2_I2C_Master_Start 46C4  
                   i2_I2C_Master_Write 469A                                     l66 4632  
                                   _ID 2AF0                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0088  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 09A0  
                                  l480 3824                                    l721 2D1A  
                                  l741 2C00                                    l930 45FE  
                                  l595 1CBC                                    l917 3356  
                                  l783 3BB2                                    l939 2FFE  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 42DA  
      __end_of_change_state_to_menu_12 417C        __end_of_change_state_to_menu_22 4144  
      __end_of_change_state_to_menu_23 42AA           _f_can_coming_to_distribution 0071  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 43CA  
      __end_of_change_state_to_logs_12 439A        __end_of_change_state_to_logs_22 436A  
      __end_of_change_state_to_logs_23 4426        __end_of_change_state_to_logs_33 433A  
      __end_of_change_state_to_logs_34 430A                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1121 0782  
                                 l1025 318C                                   l1051 347A  
                                 l1060 2800                                   l1028 31AC  
                                 l1109 05E8                                   l1126 0858  
                                 l1151 3AE8                                   l1143 3A96  
                                 l1160 388E                                   l1072 007C  
                                 l1048 3476                                   l1145 3A9A  
                                 l1057 27FC                                   l1170 38DC  
                                 l1146 3A9E                                   l1082 018C  
                                 l1147 3AA2                                   l1139 3A7A  
                                 l1083 01DA                                   l1075 0080  
                                 l1236 13B6                                   l1148 3AA6  
                                 l1084 0240                                   l1149 3AAA  
                                 l1085 028E                                   l1166 389E  
                                 l1182 32B6                                   l1191 39BA  
                                 l1079 0126                                   l1176 326A  
                                 l1169 38C2                                   l1630 3656  
                                 l1199 39EE                                   l5200 43F0  
                                 l6000 44AE                                   l1683 3B6C  
                                 l6004 44C4                                   l1693 3D88  
                                 l6110 3922                                   l6030 3FE0  
                                 l5400 12A2                                   l6120 3964  
                                 l5234 3B1C                                   l5218 449E  
                                 l5410 131A                                   l6114 3938  
                                 l5236 3B28                                   l5412 1332  
                                 l5500 4192                                   l5246 3B5E  
                                 l5238 3B2E                                   l5262 3D7A  
                                 l5254 3D44                                   l5406 1308  
                                 l5422 137C                                   l5510 3A4A  
                                 l5256 3D50                                   l5440 140E  
                                 l5416 135E                                   l5408 1314  
                                 l7032 3236                                   l5176 4466  
                                 l5258 3D56                                   l5434 13EE  
                                 l5418 1376                                   l5370 11A4  
                                 l7050 3294                                   l5178 4478  
                                 l7210 358E                                   l5506 3A34  
                                 l6402 2BD4                                   l8010 3802  
                                 l5452 144A                                   l5380 11E2  
                                 l5364 117E                                   l7044 3278  
                                 l7028 39E2                                   l5516 3A6A  
                                 l8020 3820                                   l5534 3B9E  
                                 l5470 14C8                                   l5462 14A4  
                                 l5438 1408                                   l5374 11AE  
                                 l7054 329E                                   l7214 35A2  
                                 l7206 3580                                   l7230 373E  
                                 l7310 09F2                                   l7302 09D0  
                                 l5550 35EA                                   l6430 2DA2  
                                 l6326 2CD8                                   l8006 37F6  
                                 l5536 3BC8                                   l5464 14AE  
                                 l5368 1192                                   l7064 32DE  
                                 l7048 328E                                   l7400 0BC8  
                                 l5560 3644                                   l5552 35F0  
                                 l6432 2DBC                                   l6440 2E0A  
                                 l6408 2BEA                                   l6352 2D5C  
                                 l6336 2D22                                   l8008 37FC  
                                 l8024 3826                                   l5482 150A  
                                 l5458 146C                                   l7074 3312  
                                 l7250 37AA                                   l7242 3788  
                                 l7234 3752                                   l7226 372E  
                                 l7410 0C5E                                   l7402 0BE6  
                                 l7330 0A62                                   l7314 0A04  
                                 l7306 09DA                                   l6434 2DD6  
                                 l6442 2E38                                   l6418 2C1A  
                                 l8018 381A                                   l5492 157C  
                                 l5476 14E4                                   l5396 1290  
                                 l5388 125E                                   l6540 293A  
                                 l6516 2850                                   l7236 375E  
                                 l7420 0CF4                                   l7412 0C7C  
                                 l7404 0C04                                   l5548 35DA  
                                 l6436 2DF0                                   l5478 14F0  
                                 l5486 151E                                   l5398 129C  
                                 l5494 1588                                   l7086 3AAE  
                                 l7078 331C                                   l6702 0398  
                                 l6534 2908                                   l7182 350A  
                                 l7238 3764                                   l7246 3796  
                                 l7430 0DB8                                   l7414 0C9A  
                                 l7406 0C22                                   l7334 0A6C  
                                 _ADIE 007CEE                                   l5488 1524  
                                 l6712 03C0                                   l7600 1122  
                                 l7520 0FB2                                   l7512 0F90  
                                 l7416 0CB8                                   l7408 0C40  
                                 l7424 0D12                                   l7328 0A5C  
                                 l7344 0A92                                   l6384 2B8C  
                                 l6810 05C0                                   l6802 059E  
                                 l6706 03B0                                   l6546 297C  
                                 l7194 353E                                   l5498 4186  
                                 l5770 1CE4                                   l5762 1C3A  
                                 l7610 113E                                   l7530 0FCE  
                                 l7434 0DC2                                   l7418 0CD6  
                                 l7426 0D76                                   l7362 0AEE  
                                 l7338 0A84                                   l6394 2BBC  
                                 l6812 05C6                                   l6732 0434  
                                 l6724 0412                                   l6716 03D8  
                                 l6708 03B6                                   l7196 354A  
                                 l7188 3520                                   l5780 1D7A  
                                 l5772 1D02                                   l7516 0F9A  
                                 l7452 0E0E                                   l7444 0DEC  
                                 l7380 0B3A                                   l7372 0B18  
                                 l5932 3676                                   l6830 0630  
                                 l6806 05A8                                   l6750 0496  
                                 l6742 045C                                   l6734 043A  
                                 l7198 3550                                   l5790 1E10  
                                 l5782 1D98                                   l5774 1D20  
                                 l7614 1156                                   l7606 1134  
                                 l7534 0FE6                                   l7526 0FC4  
                                 l7438 0DDA                                   l7366 0B06  
                                 l7358 0AE4                                   l6398 2BC8  
                                 l5942 3702                                   l6920 07DC  
                                 l6840 0658                                   l6816 05D0  
                                 l6760 04BE                                   l6728 041C  
                                 l6680 032C                                   l6672 030A  
                                 l6592 00FA                                   l5784 1DB6  
                                 l5776 1D3E                                   l5768 1CC6  
                                 l7560 106E                                   l7552 104C  
                                 l7480 0EF6                                   l7472 0ED4  
                                 l7448 0DF6                                   l7376 0B22  
                                 l7296 09B8                                   l5936 368C  
                                 l6930 0804                                   l6834 063A  
                                 l6754 04A0                                   l6738 0444  
                                 l6690 0354                                   l6682 0332  
                                 l6586 00EA                                   l5786 1DD4  
                                 l5778 1D5C                                   l5794 1E2E  
                                 l7570 108A                                   l7490 0F12  
                                 l7618 1162                                   l7298 09BE  
                                 l6940 0842                                   l6924 07F4  
                                 l6916 07D2                                   l6860 06BE  
                                 l6844 0662                                   l6780 0524  
                                 l6764 04C8                                   l6676 0314  
                                 l6596 0112                                   l6588 00F0  
                                 l5788 1DF2                                   l5796 1E8C  
                                 l7556 1056                                   l7476 0EDE  
                                 l7396 0B8C                                   l6950 0872  
                                 l6934 081C                                   l6926 07FA  
                                 l6870 06E6                                   l6838 0652  
                                 l6790 054C                                   l6758 04B8  
                                 l6686 033C                                   l7574 10A2  
                                 l7566 1080                                   l7494 0F2A  
                                 l7486 0F08                                   l7398 0BAA  
                                 l5990 33F6                                   l5982 33C8  
                                 l6960 089A                                   l6952 0878  
                                 l6864 06D6                                   l6856 06B4  
                                 l6848 067A                                   l6784 053C  
                                 l6776 051A                                   l6768 04E0  
                                 l7592 1100                                   l6970 08C2  
                                 l6962 08A0                                   l6890 075A  
                                 l6882 0738                                   l6874 06FE  
                                 l6866 06DC                                   l6794 0564  
                                 l6786 0542                                   l6698 038E  
                                 l7930 31BE                                   l5994 3400  
                                 l5978 33BE                                   l5986 33E0  
                                 l6956 0882                                   l6892 0760  
                                 l7940 31DC                                   l7932 31C4  
                                 l7908 312E                                   l7596 110A  
                                 l6966 08AA                                   l6886 0742  
                                 l7942 31E2                                   l7934 31CA  
                                 l7926 31B2                                   l7870 2F24  
                                 l6992 38AC                                   l6896 076A  
                                 l7936 31D0                                   l7928 31B8  
                                 l7872 2F38                                   l7938 31D6  
                                 l7946 31E8                                   l7896 2FB8  
                                 STR_1 FBCB                                   STR_2 FF2D  
                                 STR_3 FBB9                                   STR_4 FE50  
                                 STR_5 FBB9                                   STR_6 FE0E  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5000 2892                                   u5010 2894  
                                 u5110 01DA                                   u5130 028E  
                                 u4410 407A                                   u4411 4076  
                                 u4420 407C                                   u3540 43EE  
                                 u3800 12DC                                   u5090 0126  
                                 u4450 1CBC                                   u4435 3DC2  
                                 _PEIE 007F96                                   u3740 402E  
                                 u3750 4030                                   u3807 12D2  
                                 u7007 44BA                                   u3840 1354  
                                 u7017 2B06                                   u7107 3408  
                                 u7027 2B62                                   _RCEN 007E2B  
                                 u7117 408C                                   u7037 2C04  
                                 u3847 134A                                   u8007 1ABC  
                                 u7207 0B54                                   u7127 40C0  
                                 u7047 2C0E                                   u8017 1AF0  
                                 u7217 0DCA                                   u7137 08E2  
                                 u7057 2C30                                   u4850 2B20  
                                 u4770 2CE4                                   u8107 3E90  
                                 u8027 1B3C                                   u7307 105E  
                                 u7227 0DFE                                   u7147 09E2  
                                 u7067 2E46                                   u8037 1B70  
                                 u7317 1092                                   u7237 0E28  
                                 u7157 0A1E                                   u7077 2E78  
                                 u4790 2D1A                                   u8047 1BBC  
                                 u7407 2840                                   u7327 10BC  
                                 u7247 0EE6                                   u7167 0A74  
                                 u7087 3374                                   u6800 2FFE  
                                 u4880 2B7C                                   u8057 1BF0  
                                 u7417 28A8                                   u7337 1112  
                                 u7257 0F1A                                   u7177 0AA0  
                                 u7097 33D0                                   i2l66 4646  
                                 u4858 2B24                                   u8067 3CE8  
                                 u7507 0070                                   u7427 28FC  
                                 u7347 1146                                   u7267 0F44  
                                 u7187 0AF6                                   u4788 2CE8  
                                 u8077 3CF2                                   u7517 0092  
                                 u7437 292C                                   u7357 313C  
                                 u7277 0FA2                                   u7197 0B2A  
                                 u8087 3D1E                                   u7607 031C  
                                 u7527 0102                                   u7447 2970  
                                 u7367 3180                                   u7287 0FD6  
                                 u4888 2B80                                   u8097 3D28  
                                 u7617 0344                                   u7537 0136  
                                 u7457 446E                                   u7377 27AC  
                                 u7297 1000                                   u7707 05B0  
                                 u7627 03A0                                   u7547 019C  
                                 u7467 3426                                   u7387 27F0  
                                 u7717 05D8                                   u7637 03C8  
                                 u7557 01BA                                   u7477 346A  
                                 u7397 2812                                   u7807 080C  
                                 u7727 0642                                   u7647 0424  
                                 u7567 01EA                                   u7487 348C  
                                 u7817 085C                                   u7737 066A  
                                 u7657 044C                                   u7577 0250  
                                 u7497 002C                                   u7907 3324  
                                 u7827 0866                                   u7747 06C6  
                                 u7667 04A8                                   u7587 026E  
                                 u7917 3858                                   u7837 088A  
                                 u7757 06EE                                   u7677 04D0  
                                 u7597 029E                                   u7927 38C6  
                                 u7847 08B2                                   u7767 074A  
                                 u7687 052C                                   u7937 38D0  
                                 u7857 397A                                   u7777 0772  
                                 u7697 0554                                   u6977 2C68  
                                 u7947 1924                                   u7867 3244  
                                 u7787 0794                                   u6987 2D86  
                                 u7957 1970                                   u7877 32A6  
                                 u7797 07E4                                   u6997 3FBC  
                                 u7967 19BC                                   u7887 32C6  
                                 u7977 19F0                                   u7897 32EC  
                                 u7987 1A3C                                   u7997 1A70  
                                 _RSEN 007E29                            _stopSignals 4606  
                                 _Test 312E                                   _back 005B  
                                 _main 37B4                                   _down 0069  
                                 _keys FB27                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 458C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                     ??_SolenoidTestA5 00AB                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 4684  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2190  
                          i2_lcdNibble 3EA8                        __end_of_Loading 2D98  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 3418                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 35AC                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FB42  
                                STR_14 FFD6                                  STR_22 FFA3  
                                STR_30 FE1F                                  STR_15 FFD2  
                                STR_23 FF1F                                  STR_31 FDFD  
                                STR_16 FFE2                                  STR_24 FD64  
                                STR_32 FD42                                  STR_40 FCFE  
                                STR_17 FFF2                                  STR_33 FD53  
                                STR_41 FCED                                  STR_25 FB82  
                                STR_18 FFF6                                  STR_34 FDEC  
                                STR_50 FDCA                                  STR_42 FDA8  
                                STR_26 FD75                                  STR_43 FDA8  
                                STR_35 FDEC                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FB6F  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD86                                  STR_36 FD31  
                                STR_44 FD0F                        __end_of___awmod 37B4  
                                STR_45 FCFE                                  STR_37 FD42  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FB7F                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_70 FED8  
                                STR_38 FDDB                                  STR_46 FDB9  
                                STR_47 FDB9                                  STR_55 FFFA  
                                STR_63 FB42                                  STR_71 FF11  
                                STR_39 FD97                                  STR_56 FFDE  
                                STR_64 FF84                                  STR_80 FE60  
                                STR_48 FD20                                  STR_72 FC87  
                                STR_49 FD0F                                  STR_57 FFD6  
                                STR_81 FB7F                                  STR_65 FF55  
                                STR_73 FEF5                                  STR_58 FFD2  
                                STR_74 FF62                                  STR_82 FE8D  
                                STR_90 FCBA                                  STR_66 FB5A  
                                STR_59 FFE2                                  STR_67 FFBC  
                                STR_91 FF79                                  STR_75 FEBA  
                                STR_83 FE30                                  STR_84 FF99  
                                STR_76 FF03                                  STR_92 FEAB  
                                STR_68 FC98                                  STR_85 FF11  
                                STR_77 FFAD                                  STR_69 FCCB  
                                STR_93 FC32                                  STR_78 FF11  
                                STR_86 FEC9                                  STR_94 FC21  
                                STR_79 FF3B                                  STR_87 FEE7  
                                STR_95 FBFF                                  STR_88 FCA9  
                                STR_96 FC54                                  STR_89 FF6E  
                                STR_97 FC65                                  STR_98 FBDD  
                                STR_99 FE40                                  ?_sort 0001  
                      __end_of___lldiv 3668                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3B76  
                      __end_of___lwmod 3D92                                  i2l254 218C  
                                i2l930 462A                                  i2l595 221E  
                                i2l852 2A94                                  i2l854 2AB4  
                                i2l848 2A48                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 1916                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4678                        __end_of_handler 2AF0  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 447E  
                      __end_of_initLCD 40CA                         __CFG_EBTRB$OFF 000000  
                                _debug 0067                             i2isdigit@c 0003  
                                _getIR 3F9E                        __end_of_loadRTC 396C  
                      __end_of_readMAG 4084                        __end_of_dpowers FB42  
                                _first 00E2                                  _enter 006B  
                      __end_of_isdigit 44A8                                  _input 007D  
                                _putch 4658                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 451E  
                     __end_ofi2_getRTC 3C5E                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1916  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 421A                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 3F50                           __end_of_Test 3236  
                   __size_ofi2_lcdInst 000C                           __end_of_main 384A  
                         __end_of_keys FB38                           __end_of_sort 45AE  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00B8  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC10  
                               STR_101 FBEE                                 STR_102 FC10  
                               STR_110 FF8F                                 STR_103 FE9C  
                               STR_111 FC43                                 STR_104 FE7E  
                               STR_112 FC76                                 STR_113 FFB5  
                               STR_105 FE6F                                 STR_106 FCDC  
                               _ADRESH 000FC4                                 STR_107 FB95  
                               STR_108 FBA7                                 _EEADRH 000FAA  
                               STR_109 FF48                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 424A  
            i2_change_state_to_menu_22 421A                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1236 1782                                 i2l1683 3F46  
                               i2l1693 4102                                 i2l5310 45E6  
                               i2l5320 3F14                                 i2l6200 2646  
                               i2l5322 3F1C                                 i2l5332 3F3C  
                               i2l5324 3F20                                 i2l5340 40D8  
                               i2l6220 26A2                                 i2l6212 268A  
                               i2l5342 40E0                                 i2l6230 26CC  
                               i2l6070 223E                                 i2l6062 21BC  
                               i2l5344 40E4                                 i2l5600 15B2  
                               i2l6240 26EA                                 i2l6080 22AC  
                               i2l6072 2254                                 i2l5610 15D6  
                               i2l6242 26EE                                 i2l6226 26B0  
                               i2l6090 231A                                 i2l6082 22C2  
                               i2l6074 226A                                 i2l5348 40F8  
                               i2l5700 1844                                 i2l5604 15C2  
                               i2l6260 271E                                 i2l6236 26D6  
                               i2l6172 25F0                                 i2l6164 25D6  
                               i2l6084 22D8                                 i2l6076 2280  
                               i2l6068 2228                                 i2l8100 2AB2  
                               i2l5286 453E                                 i2l5606 15D0  
                               i2l6254 2710                                 i2l6246 26F8  
                               i2l6190 262E                                 i2l6174 2600  
                               i2l6182 260E                                 i2l6086 22EE  
                               i2l6078 2296                                 i2l6094 2330  
                               i2l5712 1870                                 i2l5632 1692  
                               i2l5624 166A                                 i2l5616 1608  
                               i2l6272 2754                                 i2l6264 2730  
                               i2l6192 2634                                 i2l6176 2604  
                               i2l6088 2304                                 i2l6096 238A  
                               i2l8040 2A00                                 i2l5714 1878  
                               i2l5722 189E                                 i2l5706 185A  
                               i2l5642 16EA                                 i2l5634 169C  
                               i2l5730 18FA                                 i2l6194 263A  
                               i2l6186 2622                                 i2l6282 2770  
                               i2l5572 3C24                                 i2l5724 18A4  
                               i2l5652 1736                                 i2l5644 16F4  
                               i2l5636 16A0                                 i2l6276 2766  
                               i2l6268 2742                                 i2l6196 2640  
                               i2l6188 2628                                 i2l5582 3C4E  
                               i2l5718 188C                                 i2l5670 17B0  
                               i2l5654 1748                                 i2l5646 16FA  
                               i2l5734 41F2                                 i2l8054 2A1C  
                               i2l8038 29FC                                 i2l5576 3C34  
                               i2l5728 18F2                                 i2l5648 170C  
                               i2l5912 30D2                                 i2l5736 41FA  
                               i2l5674 17C8                                 i2l5658 174C  
                               i2l5676 17CC                                 i2l5924 3116  
                               i2l5916 30E2                                 i2l8076 2A66  
                               i2l5694 1818                                 i2l7710 2014  
                               i2l7702 1FF0                                 i2l8078 2A68  
                               i2l5688 17FE                                 i2l7632 1F00  
                               i2l5698 183C                                 i2l7730 2062  
                               i2l7722 203E                                 i2l7714 2022  
                               i2l7706 1FFE                                 i2l7650 1F3E  
                               i2l7642 1F22                                 i2l7634 1F06  
                               i2l8372 265E                                 i2l8364 2140  
                               i2l8374 267A                                 i2l8366 2162  
                               i2l7750 20B0                                 i2l7742 2094  
                               i2l7734 2070                                 i2l7726 2054  
                               i2l7718 2030                                 i2l7670 1F78  
                               i2l7662 1F5A                                 i2l7646 1F30  
                               i2l7638 1F14                                 i2l8368 217E  
                               i2l7770 20FE                                 i2l7762 20E2  
                               i2l7754 20BE                                 i2l7746 20A2  
                               i2l7738 207E                                 i2l7690 1FBE  
                               i2l7682 1FA2                                 i2l7674 1F86  
                               i2l7666 1F68                                 i2l7658 1F4C  
                               i2l7780 2122                                 i2l7774 2114  
                               i2l7766 20F0                                 i2l7758 20D4  
                               i2l7694 1FD4                                 i2l7686 1FB0  
                               i2l7678 1F94                                 i2l7960 23E2  
                               i2l7698 1FE2                                 i2l7956 23D2  
                               i2l7966 243C                                 i2l7976 24FE  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 44D0  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 008A                       __end_of_dispLogs 458C  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2ED8                                 ___wmul 41B2  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 39F4                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 45D0  
                               _initUI 4544                                 _readIR 3FEC  
                               _logRun 2ED8                                 clear_0 3F76  
                               clear_1 3F82                                 clear_2 3F8E  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 384A                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 417C  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 44F8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 44D0                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 3F50  
                     __end_of_printRTC 1ED0                           __mediumconst FB26  
                    __end_ofi2___lwmod 410C                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 34EE  
                    __end_ofi2_lcdInst 4690                      __end_ofi2_isdigit 45EE  
                           __accesstop 0080                __end_of__initialization 3F94  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 461C                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 46CE  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 46A4                          __end_of_getIR 3FEC  
                          i2printRTC@i 0041                          _initSortTimer 3668  
          __end_of_updateServoPosition 3BEC                          __end_of_putch 4668  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2C4A                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 4452          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4426                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 3334  
             ?_change_state_to_menu_11 0001                                UI@F3223 012F  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 02F0                      __end_of_PortTests 3AFE  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2246 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 012B                                i2_putch 4678  
                            ?_initTime 0080                        _f_loadingNewCan 00E0  
                      i2printRTC@month 003D                  __size_of_Distribution 0140  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3D30  
                              _Loading 2C4A            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 34EE                                ___awmod 3712  
                           _initServos 3E4E                                ___lldiv 35AC  
                      __size_of___wmul 0036                                ___lwdiv 3AFE  
                              ___lwmod 3D30                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 3F50                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3C5E  
                              _lcdInst 4668                                _handler 0008  
                              __ptext0 37B4                                __ptext1 4606  
                              __ptext2 458C                                __ptext3 2C4A  
                              __ptext4 3668                                __ptext5 3C5E  
                              __ptext6 3F9E                                __ptext7 3FEC  
                              __ptext8 44A8                                __ptext9 2AF0  
                      __size_of_printf 0438                                _readADC 4452  
                      __size_of_strcpy 0036                                _initLCD 4084  
                              _cur_can 0065                                _loadRTC 38E0  
                              _readMAG 4038                                _dpowers FB38  
                   actuatorTest@i_1600 00B4                     actuatorTest@i_1601 00B5  
                   actuatorTest@i_1610 00BA                     actuatorTest@i_1611 00BB  
                   actuatorTest@i_1603 00B6                     actuatorTest@i_1620 00C0  
                   actuatorTest@i_1604 00B7                     actuatorTest@i_1621 00C1  
                   actuatorTest@i_1613 00BC                     actuatorTest@i_1614 00BD  
                   actuatorTest@i_1606 00B8                     actuatorTest@i_1623 00C2  
                   actuatorTest@i_1607 00B9                     actuatorTest@i_1624 00C3  
                   actuatorTest@i_1616 00BE                     actuatorTest@i_1617 00BF  
                   actuatorTest@i_1591 00AE                     actuatorTest@i_1592 00AF  
                   actuatorTest@i_1584 00AD                     actuatorTest@i_1594 00B0  
                   actuatorTest@i_1595 00B1                     actuatorTest@i_1597 00B2  
                   actuatorTest@i_1598 00B3                                _isdigit 447E  
                        ?_ToggleTestA5 0001                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2D98  
                       __pintcode_body 2982                   end_of_initialization 3F94  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                   SolenoidTestA5@i_1637 00AF  
                 SolenoidTestA5@i_1639 00B0                                int_func 2982  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 0096              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3CC8                             _sensorTest 279E  
              __size_of_SolenoidTestA5 00FE                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 279E                           ??_BothServos 00AB  
                       ??_ToggleTestA5 00AB                  __end_of_machineConfig 3E4E  
                           _updateMenu 1ED0                      i2_I2C_Master_Read 451E  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 4646  
                    i2_I2C_Master_Stop 46BC                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F2                              i2___lwdiv 3EFE  
                            i2___lwmod 40CA                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 23C6                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4684                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 45D0  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1C06  
                  __end_of_EEPROM_read 4606                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 41E8  
                       __end_of_getRTC 3A7A                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 4568                         __end_of_readIR 4038  
                       __end_of_logRun 3014                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 41B2              __end_ofi2_I2C_Master_Read 4544  
            __end_ofi2_I2C_Master_Wait 4658                           i2printf@prec 001D  
                  start_initialization 3F50              __end_ofi2_I2C_Master_Stop 46C4  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1321 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___wmul 0084  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3A7A                            ?_sensorTest 0001  
                          __pdataBANK1 012F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2366 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1893 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 45EE                     __end_of_PortTestA5 38E0  
                     _I2C_Master_Start 46B4                              _f_lastCan 0073  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4690                      __size_of_initTime 0022  
                 __end_of_ToggleTestA5 39F4                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FB26                              _lcdNibble 3CC8  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                         _SolenoidTestA5 3236  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 3418  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 015A  
                          __size_of_UI 08A6                         ToggleTestA5@on 00AC  
                  __size_of_sensorTest 01E4             __end_ofi2_I2C_Master_Start 46CC  
           __end_ofi2_I2C_Master_Write 46A4                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 25B8  
                          ??i2_isdigit 0001                               i2u421_40 172E  
                             i2u421_47 1724                               i2u417_40 16CE  
                             i2u417_47 16C4                               _PIR2bits 000FA1  
                             i2u364_40 453C                               i2u461_40 221E  
                             i2u811_47 25F6                               i2u812_47 3EC0  
                             i2u813_47 3ECA                               i2u814_47 3EEC  
                             i2u815_47 3EF6                               i2u685_40 24F8  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                 __end_of_SolenoidTestA5 3334  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 44F8  
                        lcdNibble@data 0081                               i2_getRTC 3BEC  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00B6  
                             i2_printf 15A8                               i2_strcpy 41E8  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 3F64                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4632                            _count_total 00FE  
                     ??_initGlobalVars 0080                        SolenoidTestA5@i 00AD  
                             __Hrparam 0000                       __size_of_Loading 014E  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                        ?_SolenoidTestA5 0001  
                __end_of_initSortTimer 3712                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 42AA  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4144  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 410C  
              _change_state_to_menu_23 427A                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 439A                _change_state_to_logs_12 436A  
              _change_state_to_logs_22 433A                _change_state_to_logs_23 43F8  
              _change_state_to_logs_33 430A                _change_state_to_logs_34 42DA  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 2AE8                             _EEPROMTest 46CC  
                      _I2C_Master_Init 3D92                       __size_of_readADC 002C  
                      _I2C_Master_Read 43CA                       __size_of_initLCD 0046  
                         _f_ID_receive 006D                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4632  
                      _I2C_Master_Stop 46AC                       __size_of_isdigit 002A  
                             _delay_ms 44A8                         _printSortTimer 23C6  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 312E                               __ptext10 2D98  
                             __ptext11 3DF2                               __ptext20 45AE  
                             __ptext12 2ED8                               __ptext21 4084  
                             __ptext13 3334                               __ptext30 4632  
                             __ptext22 08CA                               __ptext14 45EE  
                             __ptext31 410C                               __ptext23 1C06  
                             __ptext15 4544                               __ptext40 0012  
                             __ptext32 4144                               __ptext24 417C  
                             __ptext16 38E0                               __ptext41 396C  
                             __ptext33 3712                               __ptext25 39F4  
                             __ptext17 3D92                               __ptext50 41B2  
                             __ptext42 3236                               __ptext34 34EE  
                             __ptext26 4690                               __ptext18 35AC  
                             __ptext51 3D30                               __ptext43 3A7A  
                             __ptext35 312E                               __ptext27 46AC  
                             __ptext19 4426                               __ptext60 2190  
                             __ptext52 3AFE                               __ptext44 384A  
                             __ptext36 279E                               __ptext28 46B4  
                             __ptext61 41E8                               __ptext53 4668  
                             __ptext45 46CC                               __ptext37 4038  
                             __ptext29 43CA                               __ptext70 433A  
                             __ptext62 25B8                               __ptext54 3CC8  
                             __ptext46 1916                               __ptext38 4452  
                             __ptext71 436A                               __ptext63 421A  
                             __ptext55 3E4E                               __ptext47 1170  
                             __ptext39 3418                               __ptext80 44F8  
                             __ptext72 439A                               __ptext64 424A  
                             __ptext56 3B76                               __ptext48 4658  
                             __ptext81 40CA                               __ptext73 4568  
                             __ptext65 427A                               __ptext49 447E  
                             __ptext90 4646                               __ptext82 3EFE  
                             __ptext74 3014                               __ptext66 42AA  
                             __ptext58 1ED0                               __ptext83 4684  
                             __ptext75 461C                               __ptext67 42DA  
                             __ptext59 44D0                               __ptext84 3EA8  
                             __ptext76 23C6                               __ptext68 430A  
                             __ptext85 3BEC                               __ptext77 15A8  
                             __ptext69 43F8                               __ptext86 469A  
                             __ptext78 4678                               __ptext87 46BC  
                             __ptext79 45D0                               __ptext88 46C4  
                             __ptext89 451E                               _dispLogs 4568  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                __size_of_ToggleTestA5 0088                             strcpy@from 0082  
                       i2_isdigit$1893 0002                     __end_of_initServos 3EA8  
                        __size_of_Test 0108                          ?_EEPROM_write 00AB  
                             _initTime 45AE                          __size_of_main 0096  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 3B76  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1C06                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006F                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 427A  
    __end_ofi2_change_state_to_menu_22 424A                               loadRTC@i 0096  
               __end_of_printSortTimer 25B8                              putch@data 0082  
             __end_of_I2C_Master_Start 46BC                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 469A                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           _ToggleTestA5 396C  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00DC                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 2982                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 461C              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2190  
              __end_of_I2C_Master_Init 3DF2                __end_of_I2C_Master_Read 43F8  
              __end_of_I2C_Master_Wait 4646                __end_of_I2C_Master_Stop 46B4  
                        printRTC@F3214 0133                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 3014  
                  __end_ofi2_lcdNibble 3EFE                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3DF2                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
