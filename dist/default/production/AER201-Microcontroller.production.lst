

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Feb 22 01:12:29 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           ; Version 1.40
    92                           ; Generated 01/12/2016 GMT
    93                           ; 
    94                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC18F4620 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     
   126                           	psect	idataBANK0
   127  0028CA                     __pidataBANK0:
   128                           	opt stack 0
   129                           
   130                           ;initializer for printRTC@F3185
   131  0028CA  4D                 	db	77
   132  0028CB  4D                 	db	77
   133  0028CC  4D                 	db	77
   134  0028CD  00                 	db	0
   135                           
   136                           ;initializer for _f_ID_receive
   137  0028CE  0001               	dw	1
   138                           
   139                           ;initializer for _first
   140  0028D0  0001               	dw	1
   141                           
   142                           	psect	mediumconst
   143  00FDB4                     __pmediumconst:
   144                           	opt stack 0
   145  00FDB4  00                 	db	0
   146  00FDB5                     _keys:
   147                           	opt stack 0
   148  00FDB5  31                 	db	49
   149  00FDB6  32                 	db	50
   150  00FDB7  33                 	db	51
   151  00FDB8  41                 	db	65
   152  00FDB9  34                 	db	52
   153  00FDBA  35                 	db	53
   154  00FDBB  36                 	db	54
   155  00FDBC  42                 	db	66
   156  00FDBD  37                 	db	55
   157  00FDBE  38                 	db	56
   158  00FDBF  39                 	db	57
   159  00FDC0  43                 	db	67
   160  00FDC1  2A                 	db	42
   161  00FDC2  30                 	db	48
   162  00FDC3  23                 	db	35
   163  00FDC4  44                 	db	68
   164  00FDC5  00                 	db	0
   165  00FDC6                     __end_of_keys:
   166                           	opt stack 0
   167  00FDC6                     _dpowers:
   168                           	opt stack 0
   169  00FDC6  0001               	dw	1
   170  00FDC8  000A               	dw	10
   171  00FDCA  0064               	dw	100
   172  00FDCC  03E8               	dw	1000
   173  00FDCE  2710               	dw	10000
   174  00FDD0                     __end_of_dpowers:
   175                           	opt stack 0
   176  0000                     _ADCON0	set	4034
   177  0000                     _ADCON0bits	set	4034
   178  0000                     _ADCON1	set	4033
   179  0000                     _CMCONbits	set	4020
   180  0000                     _CVRCON	set	4021
   181  0000                     _INTCONbits	set	4082
   182  0000                     _LATA	set	3977
   183  0000                     _LATAbits	set	3977
   184  0000                     _LATB	set	3978
   185  0000                     _LATC	set	3979
   186  0000                     _LATCbits	set	3979
   187  0000                     _LATD	set	3980
   188  0000                     _LATDbits	set	3980
   189  0000                     _LATE	set	3981
   190  0000                     _OSCCON	set	4051
   191  0000                     _OSCTUNEbits	set	3995
   192  0000                     _PORTAbits	set	3968
   193  0000                     _PORTB	set	3969
   194  0000                     _PORTBbits	set	3969
   195  0000                     _SSPADD	set	4040
   196  0000                     _SSPBUF	set	4041
   197  0000                     _SSPCON1	set	4038
   198  0000                     _SSPCON2	set	4037
   199  0000                     _SSPSTAT	set	4039
   200  0000                     _T0CON	set	4053
   201  0000                     _T1CON	set	4045
   202  0000                     _TMR0H	set	4055
   203  0000                     _TMR0L	set	4054
   204  0000                     _TMR1H	set	4047
   205  0000                     _TMR1L	set	4046
   206  0000                     _TRISA	set	3986
   207  0000                     _TRISB	set	3987
   208  0000                     _TRISC	set	3988
   209  0000                     _TRISD	set	3989
   210  0000                     _TRISE	set	3990
   211  0000                     _ACKDT	set	32301
   212  0000                     _ACKEN	set	32300
   213  0000                     _ADFM	set	32263
   214  0000                     _ADON	set	32272
   215  0000                     _INT1IE	set	32643
   216  0000                     _INT1IF	set	32640
   217  0000                     _PEN	set	32298
   218  0000                     _RCEN	set	32299
   219  0000                     _RSEN	set	32297
   220  0000                     _SEN	set	32296
   221  0000                     _TMR0IE	set	32661
   222  0000                     _TMR0IF	set	32658
   223  0000                     _TMR1IE	set	31976
   224  0000                     _TMR1IF	set	31984
   225  0000                     _TRISC3	set	31907
   226  0000                     _TRISC4	set	31908
   227  00FDD0                     STR_48:
   228  00FDD0  25                 	db	37
   229  00FDD1  30                 	db	48	;'0'
   230  00FDD2  32                 	db	50	;'2'
   231  00FDD3  64                 	db	100	;'d'
   232  00FDD4  25                 	db	37
   233  00FDD5  73                 	db	115	;'s'
   234  00FDD6  20                 	db	32
   235  00FDD7  7C                 	db	124
   236  00FDD8  20                 	db	32
   237  00FDD9  25                 	db	37
   238  00FDDA  30                 	db	48	;'0'
   239  00FDDB  32                 	db	50	;'2'
   240  00FDDC  64                 	db	100	;'d'
   241  00FDDD  3A                 	db	58	;':'
   242  00FDDE  25                 	db	37
   243  00FDDF  30                 	db	48	;'0'
   244  00FDE0  32                 	db	50	;'2'
   245  00FDE1  64                 	db	100	;'d'
   246  00FDE2  3A                 	db	58	;':'
   247  00FDE3  25                 	db	37
   248  00FDE4  30                 	db	48	;'0'
   249  00FDE5  32                 	db	50	;'2'
   250  00FDE6  64                 	db	100	;'d'
   251  00FDE7  00                 	db	0
   252  00FDE8                     STR_2:
   253  00FDE8  54                 	db	84	;'T'
   254  00FDE9  69                 	db	105	;'i'
   255  00FDEA  6D                 	db	109	;'m'
   256  00FDEB  65                 	db	101	;'e'
   257  00FDEC  3A                 	db	58	;':'
   258  00FDED  20                 	db	32
   259  00FDEE  25                 	db	37
   260  00FDEF  30                 	db	48	;'0'
   261  00FDF0  32                 	db	50	;'2'
   262  00FDF1  64                 	db	100	;'d'
   263  00FDF2  3A                 	db	58	;':'
   264  00FDF3  25                 	db	37
   265  00FDF4  30                 	db	48	;'0'
   266  00FDF5  32                 	db	50	;'2'
   267  00FDF6  64                 	db	100	;'d'
   268  00FDF7  3A                 	db	58	;':'
   269  00FDF8  25                 	db	37
   270  00FDF9  30                 	db	48	;'0'
   271  00FDFA  32                 	db	50	;'2'
   272  00FDFB  64                 	db	100	;'d'
   273  00FDFC  00                 	db	0
   274  00FDFD                     STR_3:
   275  00FDFD  2D                 	db	45
   276  00FDFE  2D                 	db	45
   277  00FDFF  20                 	db	32
   278  00FE00  4C                 	db	76	;'L'
   279  00FE01  6F                 	db	111	;'o'
   280  00FE02  67                 	db	103	;'g'
   281  00FE03  20                 	db	32
   282  00FE04  25                 	db	37
   283  00FE05  32                 	db	50	;'2'
   284  00FE06  64                 	db	100	;'d'
   285  00FE07  20                 	db	32
   286  00FE08  68                 	db	104	;'h'
   287  00FE09  65                 	db	101	;'e'
   288  00FE0A  72                 	db	114	;'r'
   289  00FE0B  65                 	db	101	;'e'
   290  00FE0C  2D                 	db	45
   291  00FE0D  2D                 	db	45
   292  00FE0E  00                 	db	0
   293  00FE0F                     STR_8:
   294  00FE0F  25                 	db	37
   295  00FE10  64                 	db	100	;'d'
   296  00FE11  20                 	db	32
   297  00FE12  6D                 	db	109	;'m'
   298  00FE13  69                 	db	105	;'i'
   299  00FE14  6E                 	db	110	;'n'
   300  00FE15  28                 	db	40
   301  00FE16  73                 	db	115	;'s'
   302  00FE17  29                 	db	41
   303  00FE18  20                 	db	32
   304  00FE19  25                 	db	37
   305  00FE1A  64                 	db	100	;'d'
   306  00FE1B  20                 	db	32
   307  00FE1C  73                 	db	115	;'s'
   308  00FE1D  65                 	db	101	;'e'
   309  00FE1E  63                 	db	99	;'c'
   310  00FE1F  73                 	db	115	;'s'
   311  00FE20  00                 	db	0
   312  00FE21                     STR_26:
   313  00FE21  4C                 	db	76	;'L'
   314  00FE22  4F                 	db	79	;'O'
   315  00FE23  47                 	db	71	;'G'
   316  00FE24  20                 	db	32
   317  00FE25  31                 	db	49	;'1'
   318  00FE26  20                 	db	32
   319  00FE27  20                 	db	32
   320  00FE28  20                 	db	32
   321  00FE29  20                 	db	32
   322  00FE2A  20                 	db	32
   323  00FE2B  20                 	db	32
   324  00FE2C  20                 	db	32
   325  00FE2D  20                 	db	32
   326  00FE2E  20                 	db	32
   327  00FE2F  20                 	db	32
   328  00FE30  20                 	db	32
   329  00FE31  00                 	db	0
   330  00FE32                     STR_25:
   331  00FE32  4C                 	db	76	;'L'
   332  00FE33  4F                 	db	79	;'O'
   333  00FE34  47                 	db	71	;'G'
   334  00FE35  20                 	db	32
   335  00FE36  32                 	db	50	;'2'
   336  00FE37  20                 	db	32
   337  00FE38  20                 	db	32
   338  00FE39  20                 	db	32
   339  00FE3A  20                 	db	32
   340  00FE3B  20                 	db	32
   341  00FE3C  20                 	db	32
   342  00FE3D  20                 	db	32
   343  00FE3E  20                 	db	32
   344  00FE3F  20                 	db	32
   345  00FE40  20                 	db	32
   346  00FE41  20                 	db	32
   347  00FE42  00                 	db	0
   348  00FE43                     STR_29:
   349  00FE43  4C                 	db	76	;'L'
   350  00FE44  4F                 	db	79	;'O'
   351  00FE45  47                 	db	71	;'G'
   352  00FE46  20                 	db	32
   353  00FE47  33                 	db	51	;'3'
   354  00FE48  20                 	db	32
   355  00FE49  20                 	db	32
   356  00FE4A  20                 	db	32
   357  00FE4B  20                 	db	32
   358  00FE4C  20                 	db	32
   359  00FE4D  20                 	db	32
   360  00FE4E  20                 	db	32
   361  00FE4F  20                 	db	32
   362  00FE50  20                 	db	32
   363  00FE51  20                 	db	32
   364  00FE52  20                 	db	32
   365  00FE53  00                 	db	0
   366  00FE54                     STR_33:
   367  00FE54  4C                 	db	76	;'L'
   368  00FE55  4F                 	db	79	;'O'
   369  00FE56  47                 	db	71	;'G'
   370  00FE57  20                 	db	32
   371  00FE58  34                 	db	52	;'4'
   372  00FE59  20                 	db	32
   373  00FE5A  20                 	db	32
   374  00FE5B  20                 	db	32
   375  00FE5C  20                 	db	32
   376  00FE5D  20                 	db	32
   377  00FE5E  20                 	db	32
   378  00FE5F  20                 	db	32
   379  00FE60  20                 	db	32
   380  00FE61  20                 	db	32
   381  00FE62  20                 	db	32
   382  00FE63  20                 	db	32
   383  00FE64  00                 	db	0
   384  00FE65                     STR_21:
   385  00FE65  33                 	db	51	;'3'
   386  00FE66  2E                 	db	46
   387  00FE67  20                 	db	32
   388  00FE68  4C                 	db	76	;'L'
   389  00FE69  4F                 	db	79	;'O'
   390  00FE6A  47                 	db	71	;'G'
   391  00FE6B  53                 	db	83	;'S'
   392  00FE6C  20                 	db	32
   393  00FE6D  20                 	db	32
   394  00FE6E  20                 	db	32
   395  00FE6F  20                 	db	32
   396  00FE70  20                 	db	32
   397  00FE71  20                 	db	32
   398  00FE72  20                 	db	32
   399  00FE73  20                 	db	32
   400  00FE74  20                 	db	32
   401  00FE75  00                 	db	0
   402  00FE76                     STR_17:
   403  00FE76  32                 	db	50	;'2'
   404  00FE77  2E                 	db	46
   405  00FE78  20                 	db	32
   406  00FE79  53                 	db	83	;'S'
   407  00FE7A  4F                 	db	79	;'O'
   408  00FE7B  52                 	db	82	;'R'
   409  00FE7C  54                 	db	84	;'T'
   410  00FE7D  20                 	db	32
   411  00FE7E  20                 	db	32
   412  00FE7F  20                 	db	32
   413  00FE80  20                 	db	32
   414  00FE81  20                 	db	32
   415  00FE82  20                 	db	32
   416  00FE83  20                 	db	32
   417  00FE84  20                 	db	32
   418  00FE85  20                 	db	32
   419  00FE86  00                 	db	0
   420  00FE87                     STR_18:
   421  00FE87  31                 	db	49	;'1'
   422  00FE88  2E                 	db	46
   423  00FE89  20                 	db	32
   424  00FE8A  44                 	db	68	;'D'
   425  00FE8B  41                 	db	65	;'A'
   426  00FE8C  54                 	db	84	;'T'
   427  00FE8D  45                 	db	69	;'E'
   428  00FE8E  2F                 	db	47
   429  00FE8F  54                 	db	84	;'T'
   430  00FE90  49                 	db	73	;'I'
   431  00FE91  4D                 	db	77	;'M'
   432  00FE92  45                 	db	69	;'E'
   433  00FE93  20                 	db	32
   434  00FE94  20                 	db	32
   435  00FE95  20                 	db	32
   436  00FE96  20                 	db	32
   437  00FE97  00                 	db	0
   438  00FE98                     STR_9:
   439  00FE98  20                 	db	32
   440  00FE99  2D                 	db	45
   441  00FE9A  2D                 	db	45
   442  00FE9B  20                 	db	32
   443  00FE9C  50                 	db	80	;'P'
   444  00FE9D  6F                 	db	111	;'o'
   445  00FE9E  70                 	db	112	;'p'
   446  00FE9F  20                 	db	32
   447  00FEA0  20                 	db	32
   448  00FEA1  63                 	db	99	;'c'
   449  00FEA2  61                 	db	97	;'a'
   450  00FEA3  6E                 	db	110	;'n'
   451  00FEA4  20                 	db	32
   452  00FEA5  2D                 	db	45
   453  00FEA6  2D                 	db	45
   454  00FEA7  20                 	db	32
   455  00FEA8  00                 	db	0
   456  00FEA9                     STR_11:
   457  00FEA9  20                 	db	32
   458  00FEAA  2D                 	db	45
   459  00FEAB  2D                 	db	45
   460  00FEAC  20                 	db	32
   461  00FEAD  53                 	db	83	;'S'
   462  00FEAE  6F                 	db	111	;'o'
   463  00FEAF  75                 	db	117	;'u'
   464  00FEB0  70                 	db	112	;'p'
   465  00FEB1  20                 	db	32
   466  00FEB2  63                 	db	99	;'c'
   467  00FEB3  61                 	db	97	;'a'
   468  00FEB4  6E                 	db	110	;'n'
   469  00FEB5  20                 	db	32
   470  00FEB6  2D                 	db	45
   471  00FEB7  2D                 	db	45
   472  00FEB8  20                 	db	32
   473  00FEB9  00                 	db	0
   474  00FEBA                     STR_1:
   475  00FEBA  21                 	db	33
   476  00FEBB  53                 	db	83	;'S'
   477  00FEBC  4F                 	db	79	;'O'
   478  00FEBD  52                 	db	82	;'R'
   479  00FEBE  54                 	db	84	;'T'
   480  00FEBF  20                 	db	32
   481  00FEC0  43                 	db	67	;'C'
   482  00FEC1  4F                 	db	79	;'O'
   483  00FEC2  4E                 	db	78	;'N'
   484  00FEC3  43                 	db	67	;'C'
   485  00FEC4  4C                 	db	76	;'L'
   486  00FEC5  55                 	db	85	;'U'
   487  00FEC6  44                 	db	68	;'D'
   488  00FEC7  45                 	db	69	;'E'
   489  00FEC8  44                 	db	68	;'D'
   490  00FEC9  21                 	db	33
   491  00FECA  00                 	db	0
   492  00FECB                     STR_13:
   493  00FECB  2D                 	db	45
   494  00FECC  2D                 	db	45
   495  00FECD  20                 	db	32
   496  00FECE  54                 	db	84	;'T'
   497  00FECF  6F                 	db	111	;'o'
   498  00FED0  74                 	db	116	;'t'
   499  00FED1  61                 	db	97	;'a'
   500  00FED2  6C                 	db	108	;'l'
   501  00FED3  20                 	db	32
   502  00FED4  63                 	db	99	;'c'
   503  00FED5  61                 	db	97	;'a'
   504  00FED6  6E                 	db	110	;'n'
   505  00FED7  73                 	db	115	;'s'
   506  00FED8  20                 	db	32
   507  00FED9  2D                 	db	45
   508  00FEDA  2D                 	db	45
   509  00FEDB  00                 	db	0
   510  00FEDC                     STR_10:
   511  00FEDC  4E                 	db	78	;'N'
   512  00FEDD  6F                 	db	111	;'o'
   513  00FEDE  20                 	db	32
   514  00FEDF  74                 	db	116	;'t'
   515  00FEE0  61                 	db	97	;'a'
   516  00FEE1  62                 	db	98	;'b'
   517  00FEE2  3A                 	db	58	;':'
   518  00FEE3  20                 	db	32
   519  00FEE4  39                 	db	57	;'9'
   520  00FEE5  7C                 	db	124
   521  00FEE6  54                 	db	84	;'T'
   522  00FEE7  61                 	db	97	;'a'
   523  00FEE8  62                 	db	98	;'b'
   524  00FEE9  3A                 	db	58	;':'
   525  00FEEA  20                 	db	32
   526  00FEEB  31                 	db	49	;'1'
   527  00FEEC  00                 	db	0
   528  00FEED                     STR_12:
   529  00FEED  4E                 	db	78	;'N'
   530  00FEEE  6F                 	db	111	;'o'
   531  00FEEF  20                 	db	32
   532  00FEF0  6C                 	db	108	;'l'
   533  00FEF1  62                 	db	98	;'b'
   534  00FEF2  6C                 	db	108	;'l'
   535  00FEF3  3A                 	db	58	;':'
   536  00FEF4  20                 	db	32
   537  00FEF5  31                 	db	49	;'1'
   538  00FEF6  7C                 	db	124
   539  00FEF7  6C                 	db	108	;'l'
   540  00FEF8  62                 	db	98	;'b'
   541  00FEF9  6C                 	db	108	;'l'
   542  00FEFA  3A                 	db	58	;':'
   543  00FEFB  20                 	db	32
   544  00FEFC  31                 	db	49	;'1'
   545  00FEFD  00                 	db	0
   546  00FEFE                     STR_6:
   547  00FEFE  30                 	db	48	;'0'
   548  00FEFF  36                 	db	54	;'6'
   549  00FF00  46                 	db	70	;'F'
   550  00FF01  65                 	db	101	;'e'
   551  00FF02  62                 	db	98	;'b'
   552  00FF03  20                 	db	32
   553  00FF04  7C                 	db	124
   554  00FF05  20                 	db	32
   555  00FF06  30                 	db	48	;'0'
   556  00FF07  31                 	db	49	;'1'
   557  00FF08  3A                 	db	58	;':'
   558  00FF09  30                 	db	48	;'0'
   559  00FF0A  38                 	db	56	;'8'
   560  00FF0B  3A                 	db	58	;':'
   561  00FF0C  35                 	db	53	;'5'
   562  00FF0D  36                 	db	54	;'6'
   563  00FF0E  00                 	db	0
   564  00FF0F                     STR_24:
   565  00FF0F  4C                 	db	76	;'L'
   566  00FF10  4F                 	db	79	;'O'
   567  00FF11  47                 	db	71	;'G'
   568  00FF12  20                 	db	32
   569  00FF13  31                 	db	49	;'1'
   570  00FF14  20                 	db	32
   571  00FF15  20                 	db	32
   572  00FF16  20                 	db	32
   573  00FF17  20                 	db	32
   574  00FF18  20                 	db	32
   575  00FF19  20                 	db	32
   576  00FF1A  20                 	db	32
   577  00FF1B  20                 	db	32
   578  00FF1C  20                 	db	32
   579  00FF1D  20                 	db	32
   580  00FF1E  3C                 	db	60	;'<'
   581  00FF1F  00                 	db	0
   582  00FF20                     STR_27:
   583  00FF20  4C                 	db	76	;'L'
   584  00FF21  4F                 	db	79	;'O'
   585  00FF22  47                 	db	71	;'G'
   586  00FF23  20                 	db	32
   587  00FF24  32                 	db	50	;'2'
   588  00FF25  20                 	db	32
   589  00FF26  20                 	db	32
   590  00FF27  20                 	db	32
   591  00FF28  20                 	db	32
   592  00FF29  20                 	db	32
   593  00FF2A  20                 	db	32
   594  00FF2B  20                 	db	32
   595  00FF2C  20                 	db	32
   596  00FF2D  20                 	db	32
   597  00FF2E  20                 	db	32
   598  00FF2F  3C                 	db	60	;'<'
   599  00FF30  00                 	db	0
   600  00FF31                     STR_31:
   601  00FF31  4C                 	db	76	;'L'
   602  00FF32  4F                 	db	79	;'O'
   603  00FF33  47                 	db	71	;'G'
   604  00FF34  20                 	db	32
   605  00FF35  33                 	db	51	;'3'
   606  00FF36  20                 	db	32
   607  00FF37  20                 	db	32
   608  00FF38  20                 	db	32
   609  00FF39  20                 	db	32
   610  00FF3A  20                 	db	32
   611  00FF3B  20                 	db	32
   612  00FF3C  20                 	db	32
   613  00FF3D  20                 	db	32
   614  00FF3E  20                 	db	32
   615  00FF3F  20                 	db	32
   616  00FF40  3C                 	db	60	;'<'
   617  00FF41  00                 	db	0
   618  00FF42                     STR_35:
   619  00FF42  4C                 	db	76	;'L'
   620  00FF43  4F                 	db	79	;'O'
   621  00FF44  47                 	db	71	;'G'
   622  00FF45  20                 	db	32
   623  00FF46  34                 	db	52	;'4'
   624  00FF47  20                 	db	32
   625  00FF48  20                 	db	32
   626  00FF49  20                 	db	32
   627  00FF4A  20                 	db	32
   628  00FF4B  20                 	db	32
   629  00FF4C  20                 	db	32
   630  00FF4D  20                 	db	32
   631  00FF4E  20                 	db	32
   632  00FF4F  20                 	db	32
   633  00FF50  20                 	db	32
   634  00FF51  3C                 	db	60	;'<'
   635  00FF52  00                 	db	0
   636  00FF53                     STR_23:
   637  00FF53  33                 	db	51	;'3'
   638  00FF54  2E                 	db	46
   639  00FF55  20                 	db	32
   640  00FF56  4C                 	db	76	;'L'
   641  00FF57  4F                 	db	79	;'O'
   642  00FF58  47                 	db	71	;'G'
   643  00FF59  53                 	db	83	;'S'
   644  00FF5A  20                 	db	32
   645  00FF5B  20                 	db	32
   646  00FF5C  20                 	db	32
   647  00FF5D  20                 	db	32
   648  00FF5E  20                 	db	32
   649  00FF5F  20                 	db	32
   650  00FF60  20                 	db	32
   651  00FF61  20                 	db	32
   652  00FF62  3C                 	db	60	;'<'
   653  00FF63  00                 	db	0
   654  00FF64                     STR_19:
   655  00FF64  32                 	db	50	;'2'
   656  00FF65  2E                 	db	46
   657  00FF66  20                 	db	32
   658  00FF67  53                 	db	83	;'S'
   659  00FF68  4F                 	db	79	;'O'
   660  00FF69  52                 	db	82	;'R'
   661  00FF6A  54                 	db	84	;'T'
   662  00FF6B  20                 	db	32
   663  00FF6C  20                 	db	32
   664  00FF6D  20                 	db	32
   665  00FF6E  20                 	db	32
   666  00FF6F  20                 	db	32
   667  00FF70  20                 	db	32
   668  00FF71  20                 	db	32
   669  00FF72  20                 	db	32
   670  00FF73  3C                 	db	60	;'<'
   671  00FF74  00                 	db	0
   672  00FF75                     STR_16:
   673  00FF75  31                 	db	49	;'1'
   674  00FF76  2E                 	db	46
   675  00FF77  20                 	db	32
   676  00FF78  44                 	db	68	;'D'
   677  00FF79  41                 	db	65	;'A'
   678  00FF7A  54                 	db	84	;'T'
   679  00FF7B  45                 	db	69	;'E'
   680  00FF7C  2F                 	db	47
   681  00FF7D  54                 	db	84	;'T'
   682  00FF7E  49                 	db	73	;'I'
   683  00FF7F  4D                 	db	77	;'M'
   684  00FF80  45                 	db	69	;'E'
   685  00FF81  20                 	db	32
   686  00FF82  20                 	db	32
   687  00FF83  20                 	db	32
   688  00FF84  3C                 	db	60	;'<'
   689  00FF85  00                 	db	0
   690  00FF86                     STR_4:
   691  00FF86  50                 	db	80	;'P'
   692  00FF87  61                 	db	97	;'a'
   693  00FF88  75                 	db	117	;'u'
   694  00FF89  73                 	db	115	;'s'
   695  00FF8A  65                 	db	101	;'e'
   696  00FF8B  3A                 	db	58	;':'
   697  00FF8C  3C                 	db	60	;'<'
   698  00FF8D  20                 	db	32
   699  00FF8E  7C                 	db	124
   700  00FF8F  20                 	db	32
   701  00FF90  42                 	db	66	;'B'
   702  00FF91  61                 	db	97	;'a'
   703  00FF92  63                 	db	99	;'c'
   704  00FF93  6B                 	db	107	;'k'
   705  00FF94  3A                 	db	58	;':'
   706  00FF95  3E                 	db	62	;'>'
   707  00FF96  00                 	db	0
   708  00FF97                     STR_15:
   709  00FF97  50                 	db	80	;'P'
   710  00FF98  55                 	db	85	;'U'
   711  00FF99  53                 	db	83	;'S'
   712  00FF9A  48                 	db	72	;'H'
   713  00FF9B  20                 	db	32
   714  00FF9C  54                 	db	84	;'T'
   715  00FF9D  4F                 	db	79	;'O'
   716  00FF9E  20                 	db	32
   717  00FF9F  43                 	db	67	;'C'
   718  00FFA0  4F                 	db	79	;'O'
   719  00FFA1  4E                 	db	78	;'N'
   720  00FFA2  54                 	db	84	;'T'
   721  00FFA3  49                 	db	73	;'I'
   722  00FFA4  4E                 	db	78	;'N'
   723  00FFA5  55                 	db	85	;'U'
   724  00FFA6  45                 	db	69	;'E'
   725  00FFA7  00                 	db	0
   726  00FFA8                     STR_49:
   727  00FFA8  53                 	db	83	;'S'
   728  00FFA9  6F                 	db	111	;'o'
   729  00FFAA  72                 	db	114	;'r'
   730  00FFAB  74                 	db	116	;'t'
   731  00FFAC  69                 	db	105	;'i'
   732  00FFAD  6E                 	db	110	;'n'
   733  00FFAE  67                 	db	103	;'g'
   734  00FFAF  2E                 	db	46
   735  00FFB0  2E                 	db	46
   736  00FFB1  2E                 	db	46
   737  00FFB2  00                 	db	0
   738  00FFB3                     STR_7:
   739  00FFB3  44                 	db	68	;'D'
   740  00FFB4  75                 	db	117	;'u'
   741  00FFB5  72                 	db	114	;'r'
   742  00FFB6  61                 	db	97	;'a'
   743  00FFB7  74                 	db	116	;'t'
   744  00FFB8  69                 	db	105	;'i'
   745  00FFB9  6F                 	db	111	;'o'
   746  00FFBA  6E                 	db	110	;'n'
   747  00FFBB  3A                 	db	58	;':'
   748  00FFBC  00                 	db	0
   749  00FFBD                     STR_51:
   750  00FFBD  28                 	db	40
   751  00FFBE  6E                 	db	110	;'n'
   752  00FFBF  75                 	db	117	;'u'
   753  00FFC0  6C                 	db	108	;'l'
   754  00FFC1  6C                 	db	108	;'l'
   755  00FFC2  29                 	db	41
   756  00FFC3  00                 	db	0
   757  00FFC4                     STR_5:
   758  00FFC4  53                 	db	83	;'S'
   759  00FFC5  74                 	db	116	;'t'
   760  00FFC6  61                 	db	97	;'a'
   761  00FFC7  72                 	db	114	;'r'
   762  00FFC8  74                 	db	116	;'t'
   763  00FFC9  3A                 	db	58	;':'
   764  00FFCA  00                 	db	0
   765  00FFCB                     STR_37:
   766  00FFCB  46                 	db	70	;'F'
   767  00FFCC  65                 	db	101	;'e'
   768  00FFCD  62                 	db	98	;'b'
   769  00FFCE  00                 	db	0
   770  00FFCF                     STR_47:
   771  00FFCF  44                 	db	68	;'D'
   772  00FFD0  65                 	db	101	;'e'
   773  00FFD1  63                 	db	99	;'c'
   774  00FFD2  00                 	db	0
   775  00FFD3                     STR_43:
   776  00FFD3  41                 	db	65	;'A'
   777  00FFD4  75                 	db	117	;'u'
   778  00FFD5  67                 	db	103	;'g'
   779  00FFD6  00                 	db	0
   780  00FFD7                     STR_42:
   781  00FFD7  4A                 	db	74	;'J'
   782  00FFD8  75                 	db	117	;'u'
   783  00FFD9  6C                 	db	108	;'l'
   784  00FFDA  00                 	db	0
   785  00FFDB                     STR_36:
   786  00FFDB  4A                 	db	74	;'J'
   787  00FFDC  61                 	db	97	;'a'
   788  00FFDD  6E                 	db	110	;'n'
   789  00FFDE  00                 	db	0
   790  00FFDF                     STR_41:
   791  00FFDF  4A                 	db	74	;'J'
   792  00FFE0  75                 	db	117	;'u'
   793  00FFE1  6E                 	db	110	;'n'
   794  00FFE2  00                 	db	0
   795  00FFE3                     STR_44:
   796  00FFE3  53                 	db	83	;'S'
   797  00FFE4  65                 	db	101	;'e'
   798  00FFE5  70                 	db	112	;'p'
   799  00FFE6  00                 	db	0
   800  00FFE7                     STR_38:
   801  00FFE7  4D                 	db	77	;'M'
   802  00FFE8  61                 	db	97	;'a'
   803  00FFE9  72                 	db	114	;'r'
   804  00FFEA  00                 	db	0
   805  00FFEB                     STR_39:
   806  00FFEB  41                 	db	65	;'A'
   807  00FFEC  70                 	db	112	;'p'
   808  00FFED  72                 	db	114	;'r'
   809  00FFEE  00                 	db	0
   810  00FFEF                     STR_45:
   811  00FFEF  4F                 	db	79	;'O'
   812  00FFF0  63                 	db	99	;'c'
   813  00FFF1  74                 	db	116	;'t'
   814  00FFF2  00                 	db	0
   815  00FFF3                     STR_46:
   816  00FFF3  4E                 	db	78	;'N'
   817  00FFF4  6F                 	db	111	;'o'
   818  00FFF5  76                 	db	118	;'v'
   819  00FFF6  00                 	db	0
   820  00FFF7                     STR_40:
   821  00FFF7  4D                 	db	77	;'M'
   822  00FFF8  61                 	db	97	;'a'
   823  00FFF9  79                 	db	121	;'y'
   824  00FFFA  00                 	db	0
   825  00FFFB                     STR_14:
   826  00FFFB  31                 	db	49	;'1'
   827  00FFFC  32                 	db	50	;'2'
   828  00FFFD  00                 	db	0
   829  0000                     
   830                           ; #config settings
   831  00FFFE  00                 	db	0	; dummy byte at the end
   832  0000                     
   833                           	psect	cinit
   834  0021E6                     __pcinit:
   835                           	opt stack 0
   836  0021E6                     start_initialization:
   837                           	opt stack 0
   838  0021E6                     __initialization:
   839                           	opt stack 0
   840                           
   841                           ; Initialize objects allocated to BANK0 (8 bytes)
   842                           ; load TBLPTR registers with __pidataBANK0
   843  0021E6  0ECA               	movlw	low __pidataBANK0
   844  0021E8  6EF6               	movwf	tblptrl,c
   845  0021EA  0E28               	movlw	high __pidataBANK0
   846  0021EC  6EF7               	movwf	tblptrh,c
   847  0021EE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   848  0021F0  6EF8               	movwf	tblptru,c
   849  0021F2  EE00  F0F8         	lfsr	0,__pdataBANK0
   850  0021F6  EE10 F008          	lfsr	1,8
   851  0021FA                     copy_data0:
   852  0021FA  0009               	tblrd		*+
   853  0021FC  CFF5 FFEE          	movff	tablat,postinc0
   854  002200  50E5               	movf	postdec1,w,c
   855  002202  50E1               	movf	fsr1l,w,c
   856  002204  E1FA               	bnz	copy_data0
   857                           
   858                           ; Clear objects allocated to BANK1 (14 bytes)
   859  002206  EE01  F000         	lfsr	0,__pbssBANK1
   860  00220A  0E0E               	movlw	14
   861  00220C                     clear_0:
   862  00220C  6AEE               	clrf	postinc0,c
   863  00220E  06E8               	decf	wreg,f,c
   864  002210  E1FD               	bnz	clear_0
   865                           
   866                           ; Clear objects allocated to BANK0 (36 bytes)
   867  002212  EE00  F0D4         	lfsr	0,__pbssBANK0
   868  002216  0E24               	movlw	36
   869  002218                     clear_1:
   870  002218  6AEE               	clrf	postinc0,c
   871  00221A  06E8               	decf	wreg,f,c
   872  00221C  E1FD               	bnz	clear_1
   873                           
   874                           ; Clear objects allocated to COMRAM (35 bytes)
   875  00221E  EE00  F05B         	lfsr	0,__pbssCOMRAM
   876  002222  0E23               	movlw	35
   877  002224                     clear_2:
   878  002224  6AEE               	clrf	postinc0,c
   879  002226  06E8               	decf	wreg,f,c
   880  002228  E1FD               	bnz	clear_2
   881  00222A                     end_of_initialization:
   882                           	opt stack 0
   883  00222A                     __end_of__initialization:
   884                           	opt stack 0
   885  00222A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   886  00222C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   887  00222E  0100               	movlb	0
   888  002230  EF56  F00F         	goto	_main	;jump to C main() function
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           
   898                           	psect	bssCOMRAM
   899  00005B                     __pbssCOMRAM:
   900                           	opt stack 0
   901  00005B                     _IR_in:
   902                           	opt stack 0
   903  00005B                     	ds	2
   904  00005D                     _PWMTimerCounter:
   905                           	opt stack 0
   906  00005D                     	ds	2
   907  00005F                     _UIenabled:
   908                           	opt stack 0
   909  00005F                     	ds	2
   910  000061                     _back:
   911                           	opt stack 0
   912  000061                     	ds	2
   913  000063                     _beamTimerCounter:
   914                           	opt stack 0
   915  000063                     	ds	2
   916  000065                     _down:
   917                           	opt stack 0
   918  000065                     	ds	2
   919  000067                     _enter:
   920                           	opt stack 0
   921  000067                     	ds	2
   922  000069                     _firstboot:
   923                           	opt stack 0
   924  000069                     	ds	2
   925  00006B                     _servoSelectFlag:
   926                           	opt stack 0
   927  00006B                     	ds	2
   928  00006D                     _sortTimerCounter:
   929                           	opt stack 0
   930  00006D                     	ds	2
   931  00006F                     _timer1_20ms_high:
   932                           	opt stack 0
   933  00006F                     	ds	2
   934  000071                     _timer1_20ms_low:
   935                           	opt stack 0
   936  000071                     	ds	2
   937  000073                     _timer1highbits:
   938                           	opt stack 0
   939  000073                     	ds	2
   940  000075                     _timer1lowbits:
   941                           	opt stack 0
   942  000075                     	ds	2
   943  000077                     _up:
   944                           	opt stack 0
   945  000077                     	ds	2
   946  000079                     _was_low:
   947                           	opt stack 0
   948  000079                     	ds	2
   949  00007B                     _block:
   950                           	opt stack 0
   951  00007B                     	ds	1
   952  00007C                     _canType:
   953                           	opt stack 0
   954  00007C                     	ds	1
   955  00007D                     _input:
   956                           	opt stack 0
   957  00007D                     	ds	1
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           	psect	bssBANK0
   968  0000D4                     __pbssBANK0:
   969                           	opt stack 0
   970  0000D4                     _time:
   971                           	opt stack 0
   972  0000D4                     	ds	7
   973  0000DB                     _count_can_no_lab:
   974                           	opt stack 0
   975  0000DB                     	ds	2
   976  0000DD                     _count_can_w_lab:
   977                           	opt stack 0
   978  0000DD                     	ds	2
   979  0000DF                     _count_pop_no_tab:
   980                           	opt stack 0
   981  0000DF                     	ds	2
   982  0000E1                     _count_pop_w_tab:
   983                           	opt stack 0
   984  0000E1                     	ds	2
   985  0000E3                     _count_total:
   986                           	opt stack 0
   987  0000E3                     	ds	2
   988  0000E5                     _cur_state:
   989                           	opt stack 0
   990  0000E5                     	ds	2
   991  0000E7                     _f_can_coming_to_ID:
   992                           	opt stack 0
   993  0000E7                     	ds	2
   994  0000E9                     _f_can_coming_to_distribution:
   995                           	opt stack 0
   996  0000E9                     	ds	2
   997  0000EB                     _f_can_distributed:
   998                           	opt stack 0
   999  0000EB                     	ds	2
  1000  0000ED                     _f_lastCan:
  1001                           	opt stack 0
  1002  0000ED                     	ds	2
  1003  0000EF                     _f_loadingNewCan:
  1004                           	opt stack 0
  1005  0000EF                     	ds	2
  1006  0000F1                     _log:
  1007                           	opt stack 0
  1008  0000F1                     	ds	2
  1009  0000F3                     _logstate:
  1010                           	opt stack 0
  1011  0000F3                     	ds	2
  1012  0000F5                     _total_time:
  1013                           	opt stack 0
  1014  0000F5                     	ds	2
  1015  0000F7                     _machine_state:
  1016                           	opt stack 0
  1017  0000F7                     	ds	1
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           
  1027                           	psect	dataBANK0
  1028  0000F8                     __pdataBANK0:
  1029                           	opt stack 0
  1030  0000F8                     printRTC@F3185:
  1031                           	opt stack 0
  1032  0000F8                     	ds	4
  1033  0000FC                     _f_ID_receive:
  1034                           	opt stack 0
  1035  0000FC                     	ds	2
  1036  0000FE                     _first:
  1037                           	opt stack 0
  1038  0000FE                     	ds	2
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048                           	psect	bssBANK1
  1049  000100                     __pbssBANK1:
  1050                           	opt stack 0
  1051  000100                     _startTime:
  1052                           	opt stack 0
  1053  000100                     	ds	14
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063                           	psect	cstackBANK0
  1064  000080                     __pcstackBANK0:
  1065                           	opt stack 0
  1066  000080                     ??_isdigit:
  1067  000080                     ??_I2C_Master_Wait:
  1068  000080                     ?_MAGNETISM_in:
  1069  000080                     ?___wmul:
  1070                           	opt stack 0
  1071  000080                     ?___awmod:
  1072                           	opt stack 0
  1073  000080                     ?___lwdiv:
  1074                           	opt stack 0
  1075  000080                     ?___lldiv:
  1076                           	opt stack 0
  1077  000080                     lcdNibble@temp:
  1078                           	opt stack 0
  1079  000080                     initTime@m:
  1080                           	opt stack 0
  1081  000080                     moveServoBlock@myPosition:
  1082                           	opt stack 0
  1083  000080                     moveServoCup@myPosition:
  1084                           	opt stack 0
  1085  000080                     ___wmul@multiplier:
  1086                           	opt stack 0
  1087  000080                     ___awmod@dividend:
  1088                           	opt stack 0
  1089  000080                     ___lwdiv@dividend:
  1090                           	opt stack 0
  1091  000080                     strcpy@to:
  1092                           	opt stack 0
  1093  000080                     ___lldiv@dividend:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x0
  1097  000080                     	ds	1
  1098  000081                     I2C_Master_Read@a:
  1099                           	opt stack 0
  1100  000081                     lcdNibble@data:
  1101                           	opt stack 0
  1102  000081                     initTime@h:
  1103                           	opt stack 0
  1104  000081                     _isdigit$1703:
  1105                           	opt stack 0
  1106  000081                     I2C_Master_Write@d:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x1
  1110  000081                     	ds	1
  1111  000082                     ??_ID:
  1112  000082                     I2C_Master_Read@temp:
  1113                           	opt stack 0
  1114  000082                     lcdInst@data:
  1115                           	opt stack 0
  1116  000082                     putch@data:
  1117                           	opt stack 0
  1118  000082                     initTime@w:
  1119                           	opt stack 0
  1120  000082                     isdigit@c:
  1121                           	opt stack 0
  1122  000082                     ___wmul@multiplicand:
  1123                           	opt stack 0
  1124  000082                     ___awmod@divisor:
  1125                           	opt stack 0
  1126  000082                     ___lwdiv@divisor:
  1127                           	opt stack 0
  1128  000082                     strcpy@from:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x2
  1132  000082                     	ds	1
  1133  000083                     ??_initLCD:
  1134  000083                     initTime@DD:
  1135                           	opt stack 0
  1136  000083                     getRTC@i:
  1137                           	opt stack 0
  1138  000083                     ID@top_bottom_conductivity:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x3
  1142  000083                     	ds	1
  1143  000084                     initTime@MM:
  1144                           	opt stack 0
  1145  000084                     ___awmod@counter:
  1146                           	opt stack 0
  1147  000084                     ___wmul@product:
  1148                           	opt stack 0
  1149  000084                     ___lwdiv@quotient:
  1150                           	opt stack 0
  1151  000084                     strcpy@cp:
  1152                           	opt stack 0
  1153  000084                     ___lldiv@divisor:
  1154                           	opt stack 0
  1155                           
  1156                           ; 4 bytes @ 0x4
  1157  000084                     	ds	1
  1158  000085                     ??_initSortTimer:
  1159  000085                     initTime@YY:
  1160                           	opt stack 0
  1161  000085                     ___awmod@sign:
  1162                           	opt stack 0
  1163  000085                     ID@side_conductivity:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x5
  1167  000085                     	ds	1
  1168  000086                     ?___awdiv:
  1169                           	opt stack 0
  1170  000086                     initTime@s:
  1171                           	opt stack 0
  1172  000086                     ___lwdiv@counter:
  1173                           	opt stack 0
  1174  000086                     ___awdiv@dividend:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x6
  1178  000086                     	ds	1
  1179  000087                     ?___lwmod:
  1180                           	opt stack 0
  1181  000087                     ID@magnetic:
  1182                           	opt stack 0
  1183  000087                     ___lwmod@dividend:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x7
  1187  000087                     	ds	1
  1188  000088                     initSortTimer@i:
  1189                           	opt stack 0
  1190  000088                     ___awdiv@divisor:
  1191                           	opt stack 0
  1192  000088                     ___lldiv@quotient:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x8
  1196  000088                     	ds	1
  1197  000089                     ___lwmod@divisor:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x9
  1201  000089                     	ds	1
  1202  00008A                     ??_Loading:
  1203  00008A                     ___awdiv@counter:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0xA
  1207  00008A                     	ds	1
  1208  00008B                     ___awdiv@sign:
  1209                           	opt stack 0
  1210  00008B                     ___lwmod@counter:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0xB
  1214  00008B                     	ds	1
  1215  00008C                     ___lldiv@counter:
  1216                           	opt stack 0
  1217  00008C                     ___awdiv@quotient:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0xC
  1221  00008C                     	ds	1
  1222  00008D                     I2C_Master_Init@c:
  1223                           	opt stack 0
  1224                           
  1225                           ; 4 bytes @ 0xD
  1226  00008D                     	ds	1
  1227  00008E                     ?_printf:
  1228                           	opt stack 0
  1229  00008E                     printf@f:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0xE
  1233  00008E                     	ds	3
  1234  000091                     ??_I2C_Master_Init:
  1235                           
  1236                           ; 1 bytes @ 0x11
  1237  000091                     	ds	4
  1238  000095                     ??_loadRTC:
  1239                           
  1240                           ; 1 bytes @ 0x15
  1241  000095                     	ds	1
  1242  000096                     loadRTC@i:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x16
  1246  000096                     	ds	4
  1247  00009A                     ??_printf:
  1248                           
  1249                           ; 1 bytes @ 0x1A
  1250  00009A                     	ds	4
  1251  00009E                     printf@prec:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1E
  1255  00009E                     	ds	1
  1256  00009F                     printf@ap:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x1F
  1260  00009F                     	ds	2
  1261  0000A1                     printf@cp:
  1262                           	opt stack 0
  1263                           
  1264                           ; 2 bytes @ 0x21
  1265  0000A1                     	ds	2
  1266  0000A3                     printf@val:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x23
  1270  0000A3                     	ds	2
  1271  0000A5                     printf@len:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x25
  1275  0000A5                     	ds	2
  1276  0000A7                     printf@flag:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x27
  1280  0000A7                     	ds	1
  1281  0000A8                     printf@c:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x28
  1285  0000A8                     	ds	1
  1286  0000A9                     printf@width:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x29
  1290  0000A9                     	ds	2
  1291  0000AB                     ??_printRTC:
  1292                           
  1293                           ; 1 bytes @ 0x2B
  1294  0000AB                     	ds	3
  1295  0000AE                     printRTC@INT_time:
  1296                           	opt stack 0
  1297                           
  1298                           ; 14 bytes @ 0x2E
  1299  0000AE                     	ds	14
  1300  0000BC                     printRTC@RTC_month:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x3C
  1304  0000BC                     	ds	2
  1305  0000BE                     printRTC@month:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x3E
  1309  0000BE                     	ds	4
  1310  0000C2                     printRTC@i:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x42
  1314  0000C2                     	ds	2
  1315  0000C4                     ??_UI:
  1316                           
  1317                           ; 1 bytes @ 0x44
  1318  0000C4                     	ds	1
  1319  0000C5                     _UI$2064:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x45
  1323  0000C5                     	ds	2
  1324  0000C7                     UI@i:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x47
  1328  0000C7                     	ds	1
  1329  0000C8                     UI@i_648:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x48
  1333  0000C8                     	ds	1
  1334  0000C9                     UI@i_649:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x49
  1338  0000C9                     	ds	1
  1339  0000CA                     UI@i_652:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x4A
  1343  0000CA                     	ds	1
  1344  0000CB                     UI@i_653:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x4B
  1348  0000CB                     	ds	1
  1349  0000CC                     UI@i_656:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x4C
  1353  0000CC                     	ds	1
  1354  0000CD                     UI@i_657:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x4D
  1358  0000CD                     	ds	1
  1359  0000CE                     UI@i_660:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x4E
  1363  0000CE                     	ds	1
  1364  0000CF                     UI@i_661:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x4F
  1368  0000CF                     	ds	1
  1369  0000D0                     UI@i_664:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x50
  1373  0000D0                     	ds	1
  1374  0000D1                     UI@i_665:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x51
  1378  0000D1                     	ds	1
  1379  0000D2                     UI@i_668:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x52
  1383  0000D2                     	ds	1
  1384  0000D3                     UI@i_669:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x53
  1388  0000D3                     	ds	1
  1389  0000D4                     tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398                           ; 1 bytes @ 0x54
  1399                           
  1400                           	psect	cstackCOMRAM
  1401  000001                     __pcstackCOMRAM:
  1402                           	opt stack 0
  1403  000001                     ??i2_I2C_Master_Wait:
  1404  000001                     ??i2_isdigit:
  1405  000001                     ?i2___wmul:
  1406                           	opt stack 0
  1407  000001                     ?i2___lwmod:
  1408                           	opt stack 0
  1409  000001                     i2lcdNibble@temp:
  1410                           	opt stack 0
  1411  000001                     dispLogs@myLog:
  1412                           	opt stack 0
  1413  000001                     i2___wmul@multiplier:
  1414                           	opt stack 0
  1415  000001                     i2___lwmod@dividend:
  1416                           	opt stack 0
  1417  000001                     i2strcpy@to:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x0
  1421  000001                     	ds	1
  1422  000002                     i2I2C_Master_Read@a:
  1423                           	opt stack 0
  1424  000002                     i2lcdNibble@data:
  1425                           	opt stack 0
  1426  000002                     i2_isdigit$1703:
  1427                           	opt stack 0
  1428  000002                     i2I2C_Master_Write@d:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x1
  1432  000002                     	ds	1
  1433  000003                     i2I2C_Master_Read@temp:
  1434                           	opt stack 0
  1435  000003                     i2lcdInst@data:
  1436                           	opt stack 0
  1437  000003                     i2putch@data:
  1438                           	opt stack 0
  1439  000003                     i2isdigit@c:
  1440                           	opt stack 0
  1441  000003                     i2___wmul@multiplicand:
  1442                           	opt stack 0
  1443  000003                     i2___lwmod@divisor:
  1444                           	opt stack 0
  1445  000003                     i2strcpy@from:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2
  1449  000003                     	ds	1
  1450  000004                     i2getRTC@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x3
  1454  000004                     	ds	1
  1455  000005                     i2___lwmod@counter:
  1456                           	opt stack 0
  1457  000005                     i2___wmul@product:
  1458                           	opt stack 0
  1459  000005                     i2strcpy@cp:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x4
  1463  000005                     	ds	1
  1464  000006                     ?i2___lwdiv:
  1465                           	opt stack 0
  1466  000006                     i2___lwdiv@dividend:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x5
  1470  000006                     	ds	2
  1471  000008                     i2___lwdiv@divisor:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x7
  1475  000008                     	ds	2
  1476  00000A                     i2___lwdiv@quotient:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x9
  1480  00000A                     	ds	2
  1481  00000C                     i2___lwdiv@counter:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0xB
  1485  00000C                     	ds	1
  1486  00000D                     ?i2_printf:
  1487                           	opt stack 0
  1488  00000D                     i2printf@f:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0xC
  1492  00000D                     	ds	12
  1493  000019                     ??i2_printf:
  1494                           
  1495                           ; 1 bytes @ 0x18
  1496  000019                     	ds	4
  1497  00001D                     i2printf@prec:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x1C
  1501  00001D                     	ds	1
  1502  00001E                     i2printf@ap:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x1D
  1506  00001E                     	ds	2
  1507  000020                     i2printf@cp:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x1F
  1511  000020                     	ds	2
  1512  000022                     i2printf@val:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x21
  1516  000022                     	ds	2
  1517  000024                     i2printf@len:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x23
  1521  000024                     	ds	2
  1522  000026                     i2printf@flag:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x25
  1526  000026                     	ds	1
  1527  000027                     i2printf@c:
  1528                           	opt stack 0
  1529                           
  1530                           ; 1 bytes @ 0x26
  1531  000027                     	ds	1
  1532  000028                     i2printf@width:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x27
  1536  000028                     	ds	2
  1537  00002A                     ??_printSortTimer:
  1538  00002A                     ??i2_printRTC:
  1539  00002A                     ?_inputHandler:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x29
  1543  00002A                     	ds	2
  1544  00002C                     ??_inputHandler:
  1545                           
  1546                           ; 1 bytes @ 0x2B
  1547  00002C                     	ds	1
  1548  00002D                     printSortTimer@curTime:
  1549                           	opt stack 0
  1550  00002D                     i2printRTC@INT_time:
  1551                           	opt stack 0
  1552                           
  1553                           ; 14 bytes @ 0x2C
  1554  00002D                     	ds	14
  1555  00003B                     printSortTimer@start_sec:
  1556                           	opt stack 0
  1557  00003B                     i2printRTC@RTC_month:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x3A
  1561  00003B                     	ds	2
  1562  00003D                     printSortTimer@cur_sec:
  1563                           	opt stack 0
  1564  00003D                     i2printRTC@month:
  1565                           	opt stack 0
  1566                           
  1567                           ; 4 bytes @ 0x3C
  1568  00003D                     	ds	2
  1569  00003F                     printSortTimer@hour:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x3E
  1573  00003F                     	ds	2
  1574  000041                     printSortTimer@min:
  1575                           	opt stack 0
  1576  000041                     i2printRTC@i:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x40
  1580  000041                     	ds	2
  1581  000043                     ??_updateMenu:
  1582  000043                     printSortTimer@sec:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x42
  1586  000043                     	ds	2
  1587  000045                     _printSortTimer$2179:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x44
  1591  000045                     	ds	2
  1592  000047                     printSortTimer@timeDiff:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x46
  1596  000047                     	ds	2
  1597  000049                     printSortTimer@i:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x48
  1601  000049                     	ds	2
  1602  00004B                     ??_handler:
  1603                           
  1604                           ; 1 bytes @ 0x4A
  1605  00004B                     	ds	16
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615 ;;
  1616 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1617 ;;
  1618 ;; *************** function _main *****************
  1619 ;; Defined at:
  1620 ;;		line 13 in file "main.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels required when called:   13
  1640 ;; This function calls:
  1641 ;;		_PortTestA5
  1642 ;;		_UI
  1643 ;;		_initLCD
  1644 ;;		_initTime
  1645 ;;		_initUI
  1646 ;;		_machineConfig
  1647 ;;		_sort
  1648 ;;		_stopSignals
  1649 ;; This function is called by:
  1650 ;;		Startup code after reset
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text0
  1655  001EAC                     __ptext0:
  1656                           	opt stack 0
  1657  001EAC                     _main:
  1658                           	opt stack 18
  1659                           
  1660                           ;main.c: 14: machineConfig();
  1661                           
  1662                           ;incstack = 0
  1663  001EAC  EC41  F011         	call	_machineConfig	;wreg free
  1664                           
  1665                           ;main.c: 15: initLCD();
  1666  001EB0  EC65  F011         	call	_initLCD	;wreg free
  1667                           
  1668                           ;main.c: 16: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1669  001EB4  0E32               	movlw	50
  1670  001EB6  0100               	movlb	0	; () banked
  1671  001EB8  6F80               	movwf	initTime@m& (0+255),b
  1672  001EBA  0E13               	movlw	19
  1673  001EBC  0100               	movlb	0	; () banked
  1674  001EBE  6F81               	movwf	initTime@h& (0+255),b
  1675  001EC0  0E04               	movlw	4
  1676  001EC2  0100               	movlb	0	; () banked
  1677  001EC4  6F82               	movwf	initTime@w& (0+255),b
  1678  001EC6  0E09               	movlw	9
  1679  001EC8  0100               	movlb	0	; () banked
  1680  001ECA  6F83               	movwf	initTime@DD& (0+255),b
  1681  001ECC  0E02               	movlw	2
  1682  001ECE  0100               	movlb	0	; () banked
  1683  001ED0  6F84               	movwf	initTime@MM& (0+255),b
  1684  001ED2  0E17               	movlw	23
  1685  001ED4  0100               	movlb	0	; () banked
  1686  001ED6  6F85               	movwf	initTime@YY& (0+255),b
  1687  001ED8  0E42               	movlw	66
  1688  001EDA  ECE1  F013         	call	_initTime
  1689                           
  1690                           ;main.c: 17: initUI();
  1691  001EDE  EC01  F014         	call	_initUI	;wreg free
  1692                           
  1693                           ;main.c: 22: switch(machine_state){
  1694                           
  1695                           ;main.c: 21: while(1){
  1696  001EE2  D011               	goto	l5590
  1697  001EE4                     l5576:
  1698                           
  1699                           ;main.c: 24: UI();
  1700  001EE4  EC09  F000         	call	_UI	;wreg free
  1701                           
  1702                           ;main.c: 25: break;
  1703  001EE8  D00E               	goto	l5590
  1704  001EEA                     l5578:
  1705                           
  1706                           ;main.c: 27: sort();
  1707  001EEA  ECD0  F013         	call	_sort	;wreg free
  1708                           
  1709                           ;main.c: 28: break;
  1710  001EEE  D00B               	goto	l5590
  1711  001EF0                     l5580:
  1712                           
  1713                           ;main.c: 30: stopSignals();
  1714  001EF0  EC0E  F014         	call	_stopSignals	;wreg free
  1715                           
  1716                           ;main.c: 31: UI();
  1717  001EF4  EC09  F000         	call	_UI	;wreg free
  1718                           
  1719                           ;main.c: 32: break;
  1720  001EF8  D006               	goto	l5590
  1721  001EFA                     l5584:
  1722                           
  1723                           ;main.c: 34: PortTestA5();
  1724  001EFA  EC2D  F014         	call	_PortTestA5	;wreg free
  1725                           
  1726                           ;main.c: 35: break;
  1727  001EFE  D003               	goto	l5590
  1728  001F00                     l5586:
  1729                           
  1730                           ;main.c: 37: stopSignals();
  1731  001F00  EC0E  F014         	call	_stopSignals	;wreg free
  1732  001F04                     l709:
  1733  001F04  D7FF               	goto	l709
  1734  001F06                     l5590:
  1735  001F06  0100               	movlb	0	; () banked
  1736  001F08  51F7               	movf	_machine_state& (0+255),w,b
  1737                           
  1738                           ; Switch size 1, requested type "space"
  1739                           ; Number of cases is 5, Range of values is 0 to 4
  1740                           ; switch strategies available:
  1741                           ; Name         Instructions Cycles
  1742                           ; simple_byte           16     9 (average)
  1743                           ;	Chosen strategy is simple_byte
  1744  001F0A  0A00               	xorlw	0	; case 0
  1745  001F0C  B4D8               	btfsc	status,2,c
  1746  001F0E  D7EA               	goto	l5576
  1747  001F10  0A01               	xorlw	1	; case 1
  1748  001F12  B4D8               	btfsc	status,2,c
  1749  001F14  D7EA               	goto	l5578
  1750  001F16  0A03               	xorlw	3	; case 2
  1751  001F18  B4D8               	btfsc	status,2,c
  1752  001F1A  D7EA               	goto	l5580
  1753  001F1C  0A01               	xorlw	1	; case 3
  1754  001F1E  B4D8               	btfsc	status,2,c
  1755  001F20  D7EC               	goto	l5584
  1756  001F22  0A07               	xorlw	7	; case 4
  1757  001F24  B4D8               	btfsc	status,2,c
  1758  001F26  D7EC               	goto	l5586
  1759                           
  1760                           ; BSR set to: 0
  1761                           
  1762                           ; BSR set to: 0
  1763  001F28  D7EE               	goto	l5590
  1764  001F2A                     __end_of_main:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           postinc0	equ	0xFEE
  1771                           wreg	equ	0xFE8
  1772                           postdec1	equ	0xFE5
  1773                           fsr1l	equ	0xFE1
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _stopSignals *****************
  1777 ;; Defined at:
  1778 ;;		line 46 in file "main.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        0 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    7
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_main
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text1
  1807  00281C                     __ptext1:
  1808                           	opt stack 0
  1809  00281C                     _stopSignals:
  1810                           	opt stack 23
  1811                           
  1812                           ;main.c: 47: LATA = 0x00;
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;incstack = 0
  1816  00281C  0E00               	movlw	0
  1817  00281E  6E89               	movwf	3977,c	;volatile
  1818                           
  1819                           ;main.c: 48: LATB = 0x00;
  1820  002820  0E00               	movlw	0
  1821  002822  6E8A               	movwf	3978,c	;volatile
  1822                           
  1823                           ;main.c: 49: LATC = 0x00;
  1824  002824  0E00               	movlw	0
  1825  002826  6E8B               	movwf	3979,c	;volatile
  1826                           
  1827                           ;main.c: 50: LATD = 0x00;
  1828  002828  0E00               	movlw	0
  1829  00282A  6E8C               	movwf	3980,c	;volatile
  1830                           
  1831                           ;main.c: 51: LATE = 0x00;
  1832  00282C  0E00               	movlw	0
  1833  00282E  6E8D               	movwf	3981,c	;volatile
  1834  002830  0012               	return		;funcret
  1835  002832                     __end_of_stopSignals:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           postdec1	equ	0xFE5
  1844                           fsr1l	equ	0xFE1
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _sort *****************
  1848 ;; Defined at:
  1849 ;;		line 30 in file "sort.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      void 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;Total ram usage:        0 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:   12
  1870 ;; This function calls:
  1871 ;;		_Distribution
  1872 ;;		_ID
  1873 ;;		_Loading
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text2
  1880  0027A0                     __ptext2:
  1881                           	opt stack 0
  1882  0027A0                     _sort:
  1883                           	opt stack 18
  1884                           
  1885                           ;sort.c: 31: if(machine_state == Sorting_state){
  1886                           
  1887                           ;incstack = 0
  1888  0027A0  0100               	movlb	0	; () banked
  1889  0027A2  05F7               	decf	_machine_state& (0+255),w,b
  1890  0027A4  B4D8               	btfsc	status,2,c
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;sort.c: 32: Loading();
  1894  0027A6  EC83  F00E         	call	_Loading	;wreg free
  1895                           
  1896                           ;sort.c: 33: }
  1897                           ;sort.c: 34: if(machine_state == Sorting_state){
  1898  0027AA  0100               	movlb	0	; () banked
  1899  0027AC  05F7               	decf	_machine_state& (0+255),w,b
  1900  0027AE  B4D8               	btfsc	status,2,c
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;sort.c: 35: ID();
  1904  0027B0  ECDE  F00D         	call	_ID	;wreg free
  1905                           
  1906                           ;sort.c: 36: }
  1907                           ;sort.c: 37: if(machine_state == Sorting_state){
  1908  0027B4  0100               	movlb	0	; () banked
  1909  0027B6  05F7               	decf	_machine_state& (0+255),w,b
  1910  0027B8  A4D8               	btfss	status,2,c
  1911  0027BA  0012               	return	
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;sort.c: 38: Distribution();
  1915  0027BC  EC26  F013         	call	_Distribution	;wreg free
  1916  0027C0  0012               	return	
  1917  0027C2                     __end_of_sort:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1l	equ	0xFE1
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _Loading *****************
  1930 ;; Defined at:
  1931 ;;		line 41 in file "sort.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:   11
  1952 ;; This function calls:
  1953 ;;		_initSortTimer
  1954 ;;		_lcdInst
  1955 ;; This function is called by:
  1956 ;;		_sort
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text3
  1961  001D06                     __ptext3:
  1962                           	opt stack 0
  1963  001D06                     _Loading:
  1964                           	opt stack 18
  1965                           
  1966                           ;sort.c: 42: if(first){
  1967                           
  1968                           ;incstack = 0
  1969  001D06  0100               	movlb	0	; () banked
  1970  001D08  51FE               	movf	_first& (0+255),w,b
  1971  001D0A  0100               	movlb	0	; () banked
  1972  001D0C  11FF               	iorwf	(_first+1)& (0+255),w,b
  1973  001D0E  B4D8               	btfsc	status,2,c
  1974  001D10  D015               	goto	l4860
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;sort.c: 43: first = 0;
  1978  001D12  0E00               	movlw	0
  1979  001D14  0100               	movlb	0	; () banked
  1980  001D16  6FFF               	movwf	(_first+1)& (0+255),b
  1981  001D18  0E00               	movlw	0
  1982  001D1A  6FFE               	movwf	_first& (0+255),b
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;sort.c: 44: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  1986  001D1C  0E01               	movlw	1
  1987  001D1E  EC47  F014         	call	_lcdInst
  1988  001D22  0E68               	movlw	104
  1989  001D24  0100               	movlb	0	; () banked
  1990  001D26  6F8A               	movwf	??_Loading& (0+255),b
  1991  001D28  0EE4               	movlw	228
  1992  001D2A                     u4677:
  1993  001D2A  2EE8               	decfsz	wreg,f,c
  1994  001D2C  D7FE               	bra	u4677
  1995  001D2E  2F8A               	decfsz	??_Loading& (0+255),f,b
  1996  001D30  D7FC               	bra	u4677
  1997  001D32  F000               	nop	
  1998                           
  1999                           ;sort.c: 45: initSortTimer();
  2000  001D34  EC87  F00D         	call	_initSortTimer	;wreg free
  2001                           
  2002                           ;sort.c: 46: LATAbits.LATA5 = 1;
  2003  001D38  8A89               	bsf	3977,5,c	;volatile
  2004                           
  2005                           ;sort.c: 47: }
  2006  001D3A  0012               	return	
  2007  001D3C                     l4860:
  2008                           
  2009                           ;sort.c: 48: else{
  2010                           ;sort.c: 52: if(!f_loadingNewCan){
  2011  001D3C  0100               	movlb	0	; () banked
  2012  001D3E  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2013  001D40  0100               	movlb	0	; () banked
  2014  001D42  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2015  001D44  A4D8               	btfss	status,2,c
  2016  001D46  D016               	goto	l4874
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;sort.c: 55: if(!f_loadingNewCan){
  2020  001D48  0100               	movlb	0	; () banked
  2021  001D4A  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2022  001D4C  0100               	movlb	0	; () banked
  2023  001D4E  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2024  001D50  B4D8               	btfsc	status,2,c
  2025  001D52  0012               	return	
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;sort.c: 58: else{
  2029                           ;sort.c: 59: count_total++;
  2030                           
  2031                           ; BSR set to: 0
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;sort.c: 57: }
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;sort.c: 56: return;
  2038  001D54  0100               	movlb	0	; () banked
  2039  001D56  4BE3               	infsnz	_count_total& (0+255),f,b
  2040  001D58  2BE4               	incf	(_count_total+1)& (0+255),f,b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;sort.c: 60: if(count_total == 12){
  2044  001D5A  0E0C               	movlw	12
  2045  001D5C  0100               	movlb	0	; () banked
  2046  001D5E  19E3               	xorwf	_count_total& (0+255),w,b
  2047  001D60  0100               	movlb	0	; () banked
  2048  001D62  11E4               	iorwf	(_count_total+1)& (0+255),w,b
  2049  001D64  A4D8               	btfss	status,2,c
  2050  001D66  D017               	goto	l4880
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;sort.c: 61: f_lastCan = 1;
  2054  001D68  0E00               	movlw	0
  2055  001D6A  0100               	movlb	0	; () banked
  2056  001D6C  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  2057  001D6E  0E01               	movlw	1
  2058  001D70  6FED               	movwf	_f_lastCan& (0+255),b
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;sort.c: 62: }
  2062                           ;sort.c: 63: }
  2063                           ;sort.c: 64: }
  2064                           
  2065                           ; BSR set to: 0
  2066  001D72  D011               	goto	l4880
  2067  001D74                     l4874:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;sort.c: 67: else if(f_ID_receive){
  2071  001D74  0100               	movlb	0	; () banked
  2072  001D76  51FC               	movf	_f_ID_receive& (0+255),w,b
  2073  001D78  0100               	movlb	0	; () banked
  2074  001D7A  11FD               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2075  001D7C  B4D8               	btfsc	status,2,c
  2076  001D7E  D00B               	goto	l4880
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;sort.c: 68: f_loadingNewCan = 0;
  2080  001D80  0E00               	movlw	0
  2081  001D82  0100               	movlb	0	; () banked
  2082  001D84  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2083  001D86  0E00               	movlw	0
  2084  001D88  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;sort.c: 69: LATAbits.LATA4 = 1;
  2088  001D8A  8889               	bsf	3977,4,c	;volatile
  2089                           
  2090                           ;sort.c: 70: f_can_coming_to_ID = 1;
  2091  001D8C  0E00               	movlw	0
  2092  001D8E  0100               	movlb	0	; () banked
  2093  001D90  6FE8               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2094  001D92  0E01               	movlw	1
  2095  001D94  6FE7               	movwf	_f_can_coming_to_ID& (0+255),b
  2096  001D96                     l4880:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;sort.c: 71: }
  2100                           ;sort.c: 73: LATAbits.LATA4 = 0;
  2101  001D96  9889               	bcf	3977,4,c	;volatile
  2102  001D98  0012               	return	
  2103  001D9A                     __end_of_Loading:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           postdec1	equ	0xFE5
  2112                           fsr1l	equ	0xFE1
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _initSortTimer *****************
  2116 ;; Defined at:
  2117 ;;		line 116 in file "sort.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  i               2    8[BANK0 ] int 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;Total ram usage:        5 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:   10
  2138 ;; This function calls:
  2139 ;;		_getRTC
  2140 ;; This function is called by:
  2141 ;;		_Loading
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text4
  2146  001B0E                     __ptext4:
  2147                           	opt stack 0
  2148  001B0E                     _initSortTimer:
  2149                           	opt stack 18
  2150                           
  2151                           ;sort.c: 119: getRTC();
  2152                           
  2153                           ;incstack = 0
  2154  001B0E  EC13  F00F         	call	_getRTC	;wreg free
  2155                           
  2156                           ;sort.c: 120: for(int i = 0; i < 7; i++){
  2157  001B12  0E00               	movlw	0
  2158  001B14  0100               	movlb	0	; () banked
  2159  001B16  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2160  001B18  0E00               	movlw	0
  2161  001B1A  6F88               	movwf	initSortTimer@i& (0+255),b
  2162  001B1C                     l4540:
  2163                           
  2164                           ; BSR set to: 0
  2165  001B1C  0100               	movlb	0	; () banked
  2166  001B1E  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2167  001B20  D008               	goto	l4544
  2168  001B22  0100               	movlb	0	; () banked
  2169  001B24  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2170  001B26  E140               	bnz	l4550
  2171  001B28  0E07               	movlw	7
  2172  001B2A  0100               	movlb	0	; () banked
  2173  001B2C  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2174  001B2E  B0D8               	btfsc	status,0,c
  2175  001B30  D03B               	goto	l4550
  2176  001B32                     l4544:
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;sort.c: 121: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2180  001B32  0ED4               	movlw	low _time
  2181  001B34  0100               	movlb	0	; () banked
  2182  001B36  2588               	addwf	initSortTimer@i& (0+255),w,b
  2183  001B38  6ED9               	movwf	fsr2l,c
  2184  001B3A  0E00               	movlw	high _time
  2185  001B3C  0100               	movlb	0	; () banked
  2186  001B3E  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2187  001B40  6EDA               	movwf	fsr2h,c
  2188  001B42  50DF               	movf	indf2,w,c
  2189  001B44  0100               	movlb	0	; () banked
  2190  001B46  6F85               	movwf	??_initSortTimer& (0+255),b
  2191  001B48  0100               	movlb	0	; () banked
  2192  001B4A  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2193  001B4C  0E0F               	movlw	15
  2194  001B4E  1785               	andwf	??_initSortTimer& (0+255),f,b
  2195  001B50  0E0F               	movlw	15
  2196  001B52  0100               	movlb	0	; () banked
  2197  001B54  1785               	andwf	??_initSortTimer& (0+255),f,b
  2198  001B56  0100               	movlb	0	; () banked
  2199  001B58  5185               	movf	??_initSortTimer& (0+255),w,b
  2200  001B5A  0D0A               	mullw	10
  2201  001B5C  0ED4               	movlw	low _time
  2202  001B5E  0100               	movlb	0	; () banked
  2203  001B60  2588               	addwf	initSortTimer@i& (0+255),w,b
  2204  001B62  6ED9               	movwf	fsr2l,c
  2205  001B64  0E00               	movlw	high _time
  2206  001B66  0100               	movlb	0	; () banked
  2207  001B68  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2208  001B6A  6EDA               	movwf	fsr2h,c
  2209  001B6C  50DF               	movf	indf2,w,c
  2210  001B6E  0B0F               	andlw	15
  2211  001B70  0100               	movlb	0	; () banked
  2212  001B72  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2213  001B74  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2214  001B76  50F3               	movf	prodl,w,c
  2215  001B78  0100               	movlb	0	; () banked
  2216  001B7A  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2217  001B7C  50F4               	movf	prodh,w,c
  2218  001B7E  0100               	movlb	0	; () banked
  2219  001B80  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2220  001B82  90D8               	bcf	status,0,c
  2221  001B84  0100               	movlb	0	; () banked
  2222  001B86  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2223  001B88  6ED9               	movwf	fsr2l,c
  2224  001B8A  0100               	movlb	0	; () banked
  2225  001B8C  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2226  001B8E  6EDA               	movwf	fsr2h,c
  2227  001B90  0E00               	movlw	low _startTime
  2228  001B92  26D9               	addwf	fsr2l,f,c
  2229  001B94  0E01               	movlw	high _startTime
  2230  001B96  22DA               	addwfc	fsr2h,f,c
  2231  001B98  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2232  001B9C  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2233                           
  2234                           ; BSR set to: 0
  2235  001BA0  0100               	movlb	0	; () banked
  2236  001BA2  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2237  001BA4  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2238  001BA6  D7BA               	goto	l4540
  2239  001BA8                     l4550:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;sort.c: 122: }
  2243                           ;sort.c: 125: T0CON = 0b00010111;
  2244  001BA8  0E17               	movlw	23
  2245  001BAA  6ED5               	movwf	4053,c	;volatile
  2246                           
  2247                           ;sort.c: 135: TMR0H = 0b10000101;
  2248  001BAC  0E85               	movlw	133
  2249  001BAE  6ED7               	movwf	4055,c	;volatile
  2250                           
  2251                           ;sort.c: 136: TMR0L = 0b11101110;
  2252  001BB0  0EEE               	movlw	238
  2253  001BB2  6ED6               	movwf	4054,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;sort.c: 138: T0CON = T0CON | 0b10000000;
  2257  001BB4  50D5               	movf	4053,w,c	;volatile
  2258  001BB6  0980               	iorlw	128
  2259  001BB8  6ED5               	movwf	4053,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262  001BBA  0012               	return		;funcret
  2263  001BBC                     __end_of_initSortTimer:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           prodh	equ	0xFF4
  2270                           prodl	equ	0xFF3
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           postdec1	equ	0xFE5
  2274                           fsr1l	equ	0xFE1
  2275                           indf2	equ	0xFDF
  2276                           postinc2	equ	0xFDE
  2277                           postdec2	equ	0xFDD
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _ID *****************
  2283 ;; Defined at:
  2284 ;;		line 76 in file "sort.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  magnetic        2    7[BANK0 ] int 
  2289 ;;  side_conduct    2    5[BANK0 ] int 
  2290 ;;  top_bottom_c    2    3[BANK0 ] int 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;Total ram usage:        7 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    8
  2307 ;; This function calls:
  2308 ;;		_MAGNETISM_in
  2309 ;;		_moveServoBlock
  2310 ;; This function is called by:
  2311 ;;		_sort
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text5
  2316  001BBC                     __ptext5:
  2317                           	opt stack 0
  2318  001BBC                     _ID:
  2319                           	opt stack 21
  2320                           
  2321                           ;sort.c: 77: if(f_can_coming_to_ID){
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;incstack = 0
  2325  001BBC  0100               	movlb	0	; () banked
  2326  001BBE  51E7               	movf	_f_can_coming_to_ID& (0+255),w,b
  2327  001BC0  0100               	movlb	0	; () banked
  2328  001BC2  11E8               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2329  001BC4  B4D8               	btfsc	status,2,c
  2330  001BC6  0012               	return	
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;sort.c: 82: int side_conductivity = 0;
  2334  001BC8  0E00               	movlw	0
  2335  001BCA  0100               	movlb	0	; () banked
  2336  001BCC  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2337  001BCE  0E00               	movlw	0
  2338  001BD0  6F85               	movwf	ID@side_conductivity& (0+255),b
  2339                           
  2340                           ;sort.c: 83: int magnetic = 0;
  2341  001BD2  0E00               	movlw	0
  2342  001BD4  0100               	movlb	0	; () banked
  2343  001BD6  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2344  001BD8  0E00               	movlw	0
  2345  001BDA  6F87               	movwf	ID@magnetic& (0+255),b
  2346                           
  2347                           ;sort.c: 84: int top_bottom_conductivity = 0;
  2348  001BDC  0E00               	movlw	0
  2349  001BDE  0100               	movlb	0	; () banked
  2350  001BE0  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2351  001BE2  0E00               	movlw	0
  2352  001BE4  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2353                           
  2354                           ;sort.c: 86: side_conductivity = PORTAbits.RA2;
  2355  001BE6  A480               	btfss	3968,2,c	;volatile
  2356  001BE8  D004               	goto	u3470
  2357  001BEA  0100               	movlb	0	; () banked
  2358  001BEC  6B82               	clrf	??_ID& (0+255),b
  2359  001BEE  2B82               	incf	??_ID& (0+255),f,b
  2360  001BF0  D002               	goto	u3478
  2361  001BF2                     u3470:
  2362  001BF2  0100               	movlb	0	; () banked
  2363  001BF4  6B82               	clrf	??_ID& (0+255),b
  2364  001BF6                     u3478:
  2365  001BF6  0100               	movlb	0	; () banked
  2366  001BF8  5182               	movf	??_ID& (0+255),w,b
  2367  001BFA  0100               	movlb	0	; () banked
  2368  001BFC  6F85               	movwf	ID@side_conductivity& (0+255),b
  2369  001BFE  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;sort.c: 87: if(!side_conductivity){
  2373  001C00  0100               	movlb	0	; () banked
  2374  001C02  5185               	movf	ID@side_conductivity& (0+255),w,b
  2375  001C04  0100               	movlb	0	; () banked
  2376  001C06  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2377  001C08  A4D8               	btfss	status,2,c
  2378  001C0A  D01B               	goto	l4898
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;sort.c: 88: magnetic = MAGNETISM_in();
  2382  001C0C  EC79  F014         	call	_MAGNETISM_in	;wreg free
  2383  001C10  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2384  001C14  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2385                           
  2386                           ;sort.c: 89: if(!magnetic){
  2387  001C18  0100               	movlb	0	; () banked
  2388  001C1A  5187               	movf	ID@magnetic& (0+255),w,b
  2389  001C1C  0100               	movlb	0	; () banked
  2390  001C1E  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2391  001C20  A4D8               	btfss	status,2,c
  2392  001C22  D00F               	goto	l4898
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;sort.c: 90: LATAbits.LATA3 = 1;
  2396  001C24  8689               	bsf	3977,3,c	;volatile
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;sort.c: 92: top_bottom_conductivity = PORTAbits.RA2;
  2400  001C26  A480               	btfss	3968,2,c	;volatile
  2401  001C28  D004               	goto	u3500
  2402  001C2A  0100               	movlb	0	; () banked
  2403  001C2C  6B82               	clrf	??_ID& (0+255),b
  2404  001C2E  2B82               	incf	??_ID& (0+255),f,b
  2405  001C30  D002               	goto	u3508
  2406  001C32                     u3500:
  2407  001C32  0100               	movlb	0	; () banked
  2408  001C34  6B82               	clrf	??_ID& (0+255),b
  2409  001C36                     u3508:
  2410  001C36  0100               	movlb	0	; () banked
  2411  001C38  5182               	movf	??_ID& (0+255),w,b
  2412  001C3A  0100               	movlb	0	; () banked
  2413  001C3C  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2414  001C3E  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;sort.c: 93: LATAbits.LATA3 = 0;
  2418  001C40  9689               	bcf	3977,3,c	;volatile
  2419  001C42                     l4898:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;sort.c: 94: }
  2423                           ;sort.c: 95: }
  2424                           ;sort.c: 98: moveServoBlock(Lower);
  2425  001C42  0E01               	movlw	1
  2426  001C44  ECA9  F011         	call	_moveServoBlock
  2427                           
  2428                           ;sort.c: 100: f_can_coming_to_distribution = 1;
  2429  001C48  0E00               	movlw	0
  2430  001C4A  0100               	movlb	0	; () banked
  2431  001C4C  6FEA               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2432  001C4E  0E01               	movlw	1
  2433  001C50  6FE9               	movwf	_f_can_coming_to_distribution& (0+255),b
  2434                           
  2435                           ;sort.c: 101: moveServoBlock(Raise);
  2436  001C52  0E00               	movlw	0
  2437  001C54  ECA9  F011         	call	_moveServoBlock
  2438                           
  2439                           ;sort.c: 102: f_can_coming_to_ID = 0;
  2440  001C58  0E00               	movlw	0
  2441  001C5A  0100               	movlb	0	; () banked
  2442  001C5C  6FE8               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2443  001C5E  0E00               	movlw	0
  2444  001C60  6FE7               	movwf	_f_can_coming_to_ID& (0+255),b
  2445  001C62  0012               	return	
  2446  001C64                     __end_of_ID:
  2447                           	opt stack 0
  2448                           tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           prodh	equ	0xFF4
  2453                           prodl	equ	0xFF3
  2454                           postinc0	equ	0xFEE
  2455                           wreg	equ	0xFE8
  2456                           postdec1	equ	0xFE5
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8
  2464                           
  2465 ;; *************** function _moveServoBlock *****************
  2466 ;; Defined at:
  2467 ;;		line 191 in file "sort.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  myPosition      1    wreg     enum E3134
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  myPosition      1    0[BANK0 ] enum E3134
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;Total ram usage:        1 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    7
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_ID
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text6
  2496  002352                     __ptext6:
  2497                           	opt stack 0
  2498  002352                     _moveServoBlock:
  2499                           	opt stack 21
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;incstack = 0
  2503                           ;moveServoBlock@myPosition stored from wreg
  2504  002352  0100               	movlb	0	; () banked
  2505  002354  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  2506                           
  2507                           ;sort.c: 195: T1CON = 0b10110000;
  2508  002356  0EB0               	movlw	176
  2509  002358  6ECD               	movwf	4045,c	;volatile
  2510                           
  2511                           ;sort.c: 197: switch(myPosition){
  2512  00235A  D009               	goto	l4562
  2513  00235C                     l4558:
  2514                           
  2515                           ;sort.c: 205: timer1highbits = 0b0;
  2516  00235C  0E00               	movlw	0
  2517  00235E  6E74               	movwf	_timer1highbits+1,c
  2518  002360  0E00               	movlw	0
  2519  002362  6E73               	movwf	_timer1highbits,c
  2520                           
  2521                           ;sort.c: 206: timer1lowbits = 0b0;
  2522  002364  0E00               	movlw	0
  2523  002366  6E76               	movwf	_timer1lowbits+1,c
  2524  002368  0E00               	movlw	0
  2525  00236A  6E75               	movwf	_timer1lowbits,c
  2526                           
  2527                           ;sort.c: 210: }
  2528                           
  2529                           ;sort.c: 209: break;
  2530                           
  2531                           ;sort.c: 208: default:
  2532                           
  2533                           ;sort.c: 207: break;
  2534  00236C  D008               	goto	l1068
  2535  00236E                     l4562:
  2536  00236E  0100               	movlb	0	; () banked
  2537  002370  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  2538                           
  2539                           ; Switch size 1, requested type "space"
  2540                           ; Number of cases is 2, Range of values is 0 to 1
  2541                           ; switch strategies available:
  2542                           ; Name         Instructions Cycles
  2543                           ; simple_byte            7     4 (average)
  2544                           ;	Chosen strategy is simple_byte
  2545  002372  0A00               	xorlw	0	; case 0
  2546  002374  B4D8               	btfsc	status,2,c
  2547  002376  D7F2               	goto	l4558
  2548  002378  0A01               	xorlw	1	; case 1
  2549  00237A  B4D8               	btfsc	status,2,c
  2550  00237C  D7EF               	goto	l4558
  2551  00237E                     l1068:
  2552                           
  2553                           ;sort.c: 212: TMR1H = timer1highbits;
  2554  00237E  C073  FFCF         	movff	_timer1highbits,4047	;volatile
  2555                           
  2556                           ;sort.c: 213: TMR1L = timer1lowbits;
  2557  002382  C075  FFCE         	movff	_timer1lowbits,4046	;volatile
  2558                           
  2559                           ;sort.c: 214: T1CON = T1CON | 0b00000001;
  2560  002386  50CD               	movf	4045,w,c	;volatile
  2561  002388  0901               	iorlw	1
  2562  00238A  6ECD               	movwf	4045,c	;volatile
  2563  00238C  0012               	return		;funcret
  2564  00238E                     __end_of_moveServoBlock:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1l	equ	0xFE1
  2576                           indf2	equ	0xFDF
  2577                           postinc2	equ	0xFDE
  2578                           postdec2	equ	0xFDD
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _MAGNETISM_in *****************
  2584 ;; Defined at:
  2585 ;;		line 186 in file "sort.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  2    0[BANK0 ] int 
  2592 ;; Registers used:
  2593 ;;		None
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2599 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;Total ram usage:        2 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    7
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_ID
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text7
  2614  0028F2                     __ptext7:
  2615                           	opt stack 0
  2616  0028F2                     _MAGNETISM_in:
  2617                           	opt stack 21
  2618                           
  2619                           ;incstack = 0
  2620  0028F2  0012               	return		;funcret
  2621  0028F4                     __end_of_MAGNETISM_in:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           postdec1	equ	0xFE5
  2632                           fsr1l	equ	0xFE1
  2633                           indf2	equ	0xFDF
  2634                           postinc2	equ	0xFDE
  2635                           postdec2	equ	0xFDD
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _Distribution *****************
  2641 ;; Defined at:
  2642 ;;		line 105 in file "sort.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, status,2, status,0, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;Total ram usage:        0 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    8
  2663 ;; This function calls:
  2664 ;;		_moveServoCup
  2665 ;; This function is called by:
  2666 ;;		_sort
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text8
  2671  00264C                     __ptext8:
  2672                           	opt stack 0
  2673  00264C                     _Distribution:
  2674                           	opt stack 21
  2675                           
  2676                           ;sort.c: 106: if(f_can_coming_to_distribution){
  2677                           
  2678                           ;incstack = 0
  2679  00264C  0100               	movlb	0	; () banked
  2680  00264E  51E9               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2681  002650  0100               	movlb	0	; () banked
  2682  002652  11EA               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2683  002654  B4D8               	btfsc	status,2,c
  2684  002656  0012               	return	
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;sort.c: 108: moveServoCup(canType);
  2688  002658  507C               	movf	_canType,w,c
  2689  00265A  EC1A  F011         	call	_moveServoCup
  2690                           
  2691                           ;sort.c: 110: moveServoCup(Home);
  2692  00265E  0E00               	movlw	0
  2693  002660  EC1A  F011         	call	_moveServoCup
  2694                           
  2695                           ;sort.c: 111: f_can_coming_to_distribution = 0;
  2696  002664  0E00               	movlw	0
  2697  002666  0100               	movlb	0	; () banked
  2698  002668  6FEA               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2699  00266A  0E00               	movlw	0
  2700  00266C  6FE9               	movwf	_f_can_coming_to_distribution& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;sort.c: 112: f_can_distributed = 1;
  2704  00266E  0E00               	movlw	0
  2705  002670  0100               	movlb	0	; () banked
  2706  002672  6FEC               	movwf	(_f_can_distributed+1)& (0+255),b
  2707  002674  0E01               	movlw	1
  2708  002676  6FEB               	movwf	_f_can_distributed& (0+255),b
  2709  002678  0012               	return	
  2710  00267A                     __end_of_Distribution:
  2711                           	opt stack 0
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           prodh	equ	0xFF4
  2717                           prodl	equ	0xFF3
  2718                           postinc0	equ	0xFEE
  2719                           wreg	equ	0xFE8
  2720                           postdec1	equ	0xFE5
  2721                           fsr1l	equ	0xFE1
  2722                           indf2	equ	0xFDF
  2723                           postinc2	equ	0xFDE
  2724                           postdec2	equ	0xFDD
  2725                           fsr2h	equ	0xFDA
  2726                           fsr2l	equ	0xFD9
  2727                           status	equ	0xFD8
  2728                           
  2729 ;; *************** function _moveServoCup *****************
  2730 ;; Defined at:
  2731 ;;		line 217 in file "sort.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  myPosition      1    wreg     enum E3127
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  myPosition      1    0[BANK0 ] enum E3127
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;Total ram usage:        1 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    7
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_Distribution
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text9
  2760  002234                     __ptext9:
  2761                           	opt stack 0
  2762  002234                     _moveServoCup:
  2763                           	opt stack 21
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;incstack = 0
  2767                           ;moveServoCup@myPosition stored from wreg
  2768  002234  0100               	movlb	0	; () banked
  2769  002236  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2770                           
  2771                           ;sort.c: 221: T1CON = 0b10110000;
  2772  002238  0EB0               	movlw	176
  2773  00223A  6ECD               	movwf	4045,c	;volatile
  2774                           
  2775                           ;sort.c: 223: switch(myPosition){
  2776  00223C  D009               	goto	l4580
  2777  00223E                     l4576:
  2778                           
  2779                           ;sort.c: 246: timer1highbits = 0b0;
  2780  00223E  0E00               	movlw	0
  2781  002240  6E74               	movwf	_timer1highbits+1,c
  2782  002242  0E00               	movlw	0
  2783  002244  6E73               	movwf	_timer1highbits,c
  2784                           
  2785                           ;sort.c: 247: timer1lowbits = 0b0;
  2786  002246  0E00               	movlw	0
  2787  002248  6E76               	movwf	_timer1lowbits+1,c
  2788  00224A  0E00               	movlw	0
  2789  00224C  6E75               	movwf	_timer1lowbits,c
  2790                           
  2791                           ;sort.c: 251: }
  2792                           
  2793                           ;sort.c: 250: break;
  2794                           
  2795                           ;sort.c: 249: default:
  2796                           
  2797                           ;sort.c: 248: break;
  2798  00224E  D011               	goto	l1076
  2799  002250                     l4580:
  2800  002250  0100               	movlb	0	; () banked
  2801  002252  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  2802                           
  2803                           ; Switch size 1, requested type "space"
  2804                           ; Number of cases is 5, Range of values is 0 to 4
  2805                           ; switch strategies available:
  2806                           ; Name         Instructions Cycles
  2807                           ; simple_byte           16     9 (average)
  2808                           ;	Chosen strategy is simple_byte
  2809  002254  0A00               	xorlw	0	; case 0
  2810  002256  B4D8               	btfsc	status,2,c
  2811  002258  D7F2               	goto	l4576
  2812  00225A  0A01               	xorlw	1	; case 1
  2813  00225C  B4D8               	btfsc	status,2,c
  2814  00225E  D7EF               	goto	l4576
  2815  002260  0A03               	xorlw	3	; case 2
  2816  002262  B4D8               	btfsc	status,2,c
  2817  002264  D7EC               	goto	l4576
  2818  002266  0A01               	xorlw	1	; case 3
  2819  002268  B4D8               	btfsc	status,2,c
  2820  00226A  D7E9               	goto	l4576
  2821  00226C  0A07               	xorlw	7	; case 4
  2822  00226E  B4D8               	btfsc	status,2,c
  2823  002270  D7E6               	goto	l4576
  2824  002272                     l1076:
  2825                           
  2826                           ;sort.c: 253: TMR1H = timer1highbits;
  2827  002272  C073  FFCF         	movff	_timer1highbits,4047	;volatile
  2828                           
  2829                           ;sort.c: 254: TMR1L = timer1lowbits;
  2830  002276  C075  FFCE         	movff	_timer1lowbits,4046	;volatile
  2831                           
  2832                           ;sort.c: 255: T1CON = T1CON | 0b00000001;
  2833  00227A  50CD               	movf	4045,w,c	;volatile
  2834  00227C  0901               	iorlw	1
  2835  00227E  6ECD               	movwf	4045,c	;volatile
  2836  002280  0012               	return		;funcret
  2837  002282                     __end_of_moveServoCup:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           prodh	equ	0xFF4
  2844                           prodl	equ	0xFF3
  2845                           postinc0	equ	0xFEE
  2846                           wreg	equ	0xFE8
  2847                           postdec1	equ	0xFE5
  2848                           fsr1l	equ	0xFE1
  2849                           indf2	equ	0xFDF
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _machineConfig *****************
  2857 ;; Defined at:
  2858 ;;		line 13 in file "MachineConfig.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  2  626[None  ] int 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    7
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_main
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text10
  2887  002282                     __ptext10:
  2888                           	opt stack 0
  2889  002282                     _machineConfig:
  2890                           	opt stack 23
  2891                           
  2892                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  2893                           
  2894                           ;incstack = 0
  2895  002282  0EF0               	movlw	240
  2896  002284  6ED3               	movwf	4051,c	;volatile
  2897                           
  2898                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  2899  002286  8C9B               	bsf	3995,6,c	;volatile
  2900                           
  2901                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  2902  002288  0E47               	movlw	71
  2903  00228A  6E92               	movwf	3986,c	;volatile
  2904                           
  2905                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  2906  00228C  0EF2               	movlw	242
  2907  00228E  6E93               	movwf	3987,c	;volatile
  2908                           
  2909                           ;MachineConfig.c: 25: TRISC = 0x00;
  2910  002290  0E00               	movlw	0
  2911  002292  6E94               	movwf	3988,c	;volatile
  2912                           
  2913                           ;MachineConfig.c: 29: TRISD = 0x00;
  2914  002294  0E00               	movlw	0
  2915  002296  6E95               	movwf	3989,c	;volatile
  2916                           
  2917                           ;MachineConfig.c: 32: TRISE = 0x00;
  2918  002298  0E00               	movlw	0
  2919  00229A  6E96               	movwf	3990,c	;volatile
  2920                           
  2921                           ;MachineConfig.c: 35: LATA = 0x00;
  2922  00229C  0E00               	movlw	0
  2923  00229E  6E89               	movwf	3977,c	;volatile
  2924                           
  2925                           ;MachineConfig.c: 36: LATB = 0x00;
  2926  0022A0  0E00               	movlw	0
  2927  0022A2  6E8A               	movwf	3978,c	;volatile
  2928                           
  2929                           ;MachineConfig.c: 37: LATC = 0x00;
  2930  0022A4  0E00               	movlw	0
  2931  0022A6  6E8B               	movwf	3979,c	;volatile
  2932                           
  2933                           ;MachineConfig.c: 38: LATD = 0x00;
  2934  0022A8  0E00               	movlw	0
  2935  0022AA  6E8C               	movwf	3980,c	;volatile
  2936                           
  2937                           ;MachineConfig.c: 39: LATE = 0x00;
  2938  0022AC  0E00               	movlw	0
  2939  0022AE  6E8D               	movwf	3981,c	;volatile
  2940                           
  2941                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  2942  0022B0  0E00               	movlw	0
  2943  0022B2  6EC2               	movwf	4034,c	;volatile
  2944                           
  2945                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  2946  0022B4  0E0D               	movlw	13
  2947  0022B6  6EC1               	movwf	4033,c	;volatile
  2948                           
  2949                           ;MachineConfig.c: 46: CVRCON = 0x00;
  2950  0022B8  0E00               	movlw	0
  2951  0022BA  6EB5               	movwf	4021,c	;volatile
  2952                           
  2953                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  2954  0022BC  96B4               	bcf	4020,3,c	;volatile
  2955                           
  2956                           ;MachineConfig.c: 48: ADFM = 1;
  2957  0022BE  8EC0               	bsf	4032,7,c	;volatile
  2958                           
  2959                           ;MachineConfig.c: 51: INT1IE = 1;
  2960  0022C0  86F0               	bsf	intcon3,3,c	;volatile
  2961                           
  2962                           ;MachineConfig.c: 52: TMR0IE = 1;
  2963  0022C2  8AF2               	bsf	intcon,5,c	;volatile
  2964                           
  2965                           ;MachineConfig.c: 53: TMR1IE = 1;
  2966  0022C4  809D               	bsf	3997,0,c	;volatile
  2967                           
  2968                           ;MachineConfig.c: 54: (INTCONbits.GIE = 0);
  2969  0022C6  9EF2               	bcf	intcon,7,c	;volatile
  2970  0022C8  0012               	return		;funcret
  2971  0022CA                     __end_of_machineConfig:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           intcon	equ	0xFF2
  2980                           intcon3	equ	0xFF0
  2981                           postinc0	equ	0xFEE
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           fsr1l	equ	0xFE1
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _initUI *****************
  2993 ;; Defined at:
  2994 ;;		line 60 in file "UI.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;		None
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;Total ram usage:        0 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:   12
  3015 ;; This function calls:
  3016 ;;		_change_state_to_menu_start
  3017 ;;		_loadRTC
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text11
  3024  002802                     __ptext11:
  3025                           	opt stack 0
  3026  002802                     _initUI:
  3027                           	opt stack 18
  3028                           
  3029                           ;UI.c: 61: (INTCONbits.GIE = 1);
  3030                           
  3031                           ;incstack = 0
  3032  002802  8EF2               	bsf	intcon,7,c	;volatile
  3033                           
  3034                           ;UI.c: 62: machine_state = UI_state;
  3035  002804  0E00               	movlw	0
  3036  002806  0100               	movlb	0	; () banked
  3037  002808  6FF7               	movwf	_machine_state& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;UI.c: 64: loadRTC();
  3041  00280A  ECCD  F00E         	call	_loadRTC	;wreg free
  3042                           
  3043                           ;UI.c: 66: change_state_to_menu_start();
  3044  00280E  EC6B  F013         	call	_change_state_to_menu_start	;wreg free
  3045                           
  3046                           ;UI.c: 67: firstboot = 1;
  3047  002812  0E00               	movlw	0
  3048  002814  6E6A               	movwf	_firstboot+1,c
  3049  002816  0E01               	movlw	1
  3050  002818  6E69               	movwf	_firstboot,c
  3051  00281A  0012               	return		;funcret
  3052  00281C                     __end_of_initUI:
  3053                           	opt stack 0
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon	equ	0xFF2
  3061                           intcon3	equ	0xFF0
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _loadRTC *****************
  3074 ;; Defined at:
  3075 ;;		line 26 in file "RTC.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  i               2   22[BANK0 ] int 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;Total ram usage:        3 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    9
  3096 ;; This function calls:
  3097 ;;		_I2C_Master_Init
  3098 ;;		_I2C_Master_Start
  3099 ;;		_I2C_Master_Stop
  3100 ;;		_I2C_Master_Write
  3101 ;; This function is called by:
  3102 ;;		_initUI
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text12
  3107  001D9A                     __ptext12:
  3108                           	opt stack 0
  3109  001D9A                     _loadRTC:
  3110                           	opt stack 20
  3111                           
  3112                           ;RTC.c: 28: I2C_Master_Init(10000);
  3113                           
  3114                           ;incstack = 0
  3115  001D9A  0E10               	movlw	16
  3116  001D9C  0100               	movlb	0	; () banked
  3117  001D9E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3118  001DA0  0E27               	movlw	39
  3119  001DA2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3120  001DA4  0E00               	movlw	0
  3121  001DA6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3122  001DA8  0E00               	movlw	0
  3123  001DAA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3124  001DAC  EC6F  F010         	call	_I2C_Master_Init	;wreg free
  3125                           
  3126                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3127  001DB0  9EF2               	bcf	intcon,7,c	;volatile
  3128                           
  3129                           ;RTC.c: 32: I2C_Master_Start();
  3130  001DB2  EC6D  F014         	call	_I2C_Master_Start	;wreg free
  3131                           
  3132                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3133  001DB6  0E00               	movlw	0
  3134  001DB8  0100               	movlb	0	; () banked
  3135  001DBA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3136  001DBC  0ED0               	movlw	208
  3137  001DBE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3138  001DC0  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  3139                           
  3140                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3141  001DC4  0E00               	movlw	0
  3142  001DC6  0100               	movlb	0	; () banked
  3143  001DC8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3144  001DCA  0E00               	movlw	0
  3145  001DCC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3146  001DCE  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  3147                           
  3148                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3149  001DD2  0E00               	movlw	0
  3150  001DD4  0100               	movlb	0	; () banked
  3151  001DD6  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3152  001DD8  0E00               	movlw	0
  3153  001DDA  6F96               	movwf	loadRTC@i& (0+255),b
  3154  001DDC                     l4662:
  3155                           
  3156                           ; BSR set to: 0
  3157  001DDC  0100               	movlb	0	; () banked
  3158  001DDE  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3159  001DE0  D008               	goto	l4666
  3160  001DE2  0100               	movlb	0	; () banked
  3161  001DE4  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3162  001DE6  E11B               	bnz	l4672
  3163  001DE8  0E07               	movlw	7
  3164  001DEA  0100               	movlb	0	; () banked
  3165  001DEC  5D96               	subwf	loadRTC@i& (0+255),w,b
  3166  001DEE  B0D8               	btfsc	status,0,c
  3167  001DF0  D016               	goto	l4672
  3168  001DF2                     l4666:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3172  001DF2  0ED4               	movlw	low _time
  3173  001DF4  0100               	movlb	0	; () banked
  3174  001DF6  2596               	addwf	loadRTC@i& (0+255),w,b
  3175  001DF8  6ED9               	movwf	fsr2l,c
  3176  001DFA  0E00               	movlw	high _time
  3177  001DFC  0100               	movlb	0	; () banked
  3178  001DFE  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3179  001E00  6EDA               	movwf	fsr2h,c
  3180  001E02  50DF               	movf	indf2,w,c
  3181  001E04  0100               	movlb	0	; () banked
  3182  001E06  6F95               	movwf	??_loadRTC& (0+255),b
  3183  001E08  0100               	movlb	0	; () banked
  3184  001E0A  5195               	movf	??_loadRTC& (0+255),w,b
  3185  001E0C  0100               	movlb	0	; () banked
  3186  001E0E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3187  001E10  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3188  001E12  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  3189  001E16  0100               	movlb	0	; () banked
  3190  001E18  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3191  001E1A  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3192  001E1C  D7DF               	goto	l4662
  3193  001E1E                     l4672:
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;RTC.c: 37: }
  3197                           ;RTC.c: 38: I2C_Master_Stop();
  3198  001E1E  EC69  F014         	call	_I2C_Master_Stop	;wreg free
  3199                           
  3200                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3201  001E22  8EF2               	bsf	intcon,7,c	;volatile
  3202  001E24  0012               	return		;funcret
  3203  001E26                     __end_of_loadRTC:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           prodh	equ	0xFF4
  3210                           prodl	equ	0xFF3
  3211                           intcon	equ	0xFF2
  3212                           intcon3	equ	0xFF0
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           indf2	equ	0xFDF
  3218                           postinc2	equ	0xFDE
  3219                           postdec2	equ	0xFDD
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _I2C_Master_Init *****************
  3225 ;; Defined at:
  3226 ;;		line 13 in file "I2C.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  c               4   13[BANK0 ] const unsigned long 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:        8 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    8
  3247 ;; This function calls:
  3248 ;;		___lldiv
  3249 ;; This function is called by:
  3250 ;;		_loadRTC
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text13
  3255  0020DE                     __ptext13:
  3256                           	opt stack 0
  3257  0020DE                     _I2C_Master_Init:
  3258                           	opt stack 20
  3259                           
  3260                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3261                           
  3262                           ;incstack = 0
  3263  0020DE  0E00               	movlw	0
  3264  0020E0  6EC7               	movwf	4039,c	;volatile
  3265                           
  3266                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3267  0020E2  0E28               	movlw	40
  3268  0020E4  6EC6               	movwf	4038,c	;volatile
  3269                           
  3270                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3271  0020E6  0E00               	movlw	0
  3272  0020E8  6EC5               	movwf	4037,c	;volatile
  3273                           
  3274                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3275  0020EA  0E00               	movlw	0
  3276  0020EC  0100               	movlb	0	; () banked
  3277  0020EE  6F80               	movwf	___lldiv@dividend& (0+255),b
  3278  0020F0  0E48               	movlw	72
  3279  0020F2  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3280  0020F4  0EE8               	movlw	232
  3281  0020F6  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3282  0020F8  0E01               	movlw	1
  3283  0020FA  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3284  0020FC  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3285  002100  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3286  002104  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3287  002108  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3288  00210C  0E02               	movlw	2
  3289  00210E                     u3215:
  3290  00210E  90D8               	bcf	status,0,c
  3291  002110  0100               	movlb	0	; () banked
  3292  002112  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3293  002114  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3294  002116  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3295  002118  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3296  00211A  2EE8               	decfsz	wreg,f,c
  3297  00211C  D7F8               	goto	u3215
  3298  00211E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3299  002122  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3300  002126  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3301  00212A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3302  00212E  EC29  F00D         	call	___lldiv	;wreg free
  3303  002132  0100               	movlb	0	; () banked
  3304  002134  0580               	decf	?___lldiv& (0+255),w,b
  3305  002136  6EC8               	movwf	4040,c	;volatile
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;I2C.c: 20: TRISC3 = 1;
  3309  002138  8694               	bsf	3988,3,c	;volatile
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;I2C.c: 21: TRISC4 = 1;
  3313  00213A  8894               	bsf	3988,4,c	;volatile
  3314                           
  3315                           ; BSR set to: 0
  3316  00213C  0012               	return		;funcret
  3317  00213E                     __end_of_I2C_Master_Init:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           prodh	equ	0xFF4
  3324                           prodl	equ	0xFF3
  3325                           intcon	equ	0xFF2
  3326                           intcon3	equ	0xFF0
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           postdec1	equ	0xFE5
  3330                           fsr1l	equ	0xFE1
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function ___lldiv *****************
  3339 ;; Defined at:
  3340 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  dividend        4    0[BANK0 ] unsigned long 
  3343 ;;  divisor         4    4[BANK0 ] unsigned long 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  quotient        4    8[BANK0 ] unsigned long 
  3346 ;;  counter         1   12[BANK0 ] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  4    0[BANK0 ] unsigned long 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:       13 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    7
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_I2C_Master_Init
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text14
  3371  001A52                     __ptext14:
  3372                           	opt stack 0
  3373  001A52                     ___lldiv:
  3374                           	opt stack 20
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;incstack = 0
  3378  001A52  0E00               	movlw	0
  3379  001A54  0100               	movlb	0	; () banked
  3380  001A56  6F88               	movwf	___lldiv@quotient& (0+255),b
  3381  001A58  0E00               	movlw	0
  3382  001A5A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3383  001A5C  0E00               	movlw	0
  3384  001A5E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3385  001A60  0E00               	movlw	0
  3386  001A62  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3387                           
  3388                           ; BSR set to: 0
  3389  001A64  0100               	movlb	0	; () banked
  3390  001A66  5184               	movf	___lldiv@divisor& (0+255),w,b
  3391  001A68  0100               	movlb	0	; () banked
  3392  001A6A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3393  001A6C  0100               	movlb	0	; () banked
  3394  001A6E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3395  001A70  0100               	movlb	0	; () banked
  3396  001A72  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3397  001A74  B4D8               	btfsc	status,2,c
  3398  001A76  D042               	goto	l1592
  3399                           
  3400                           ; BSR set to: 0
  3401  001A78  0E01               	movlw	1
  3402  001A7A  0100               	movlb	0	; () banked
  3403  001A7C  6F8C               	movwf	___lldiv@counter& (0+255),b
  3404  001A7E  D008               	goto	l4228
  3405  001A80                     l4226:
  3406                           
  3407                           ; BSR set to: 0
  3408  001A80  0100               	movlb	0	; () banked
  3409  001A82  90D8               	bcf	status,0,c
  3410  001A84  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3411  001A86  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3412  001A88  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3413  001A8A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3414  001A8C  0100               	movlb	0	; () banked
  3415  001A8E  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3416  001A90                     l4228:
  3417                           
  3418                           ; BSR set to: 0
  3419  001A90  0100               	movlb	0	; () banked
  3420  001A92  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3421  001A94  D7F5               	goto	l4226
  3422  001A96                     l4230:
  3423                           
  3424                           ; BSR set to: 0
  3425  001A96  0100               	movlb	0	; () banked
  3426  001A98  90D8               	bcf	status,0,c
  3427  001A9A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3428  001A9C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3429  001A9E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3430  001AA0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3431                           
  3432                           ; BSR set to: 0
  3433  001AA2  0100               	movlb	0	; () banked
  3434  001AA4  5184               	movf	___lldiv@divisor& (0+255),w,b
  3435  001AA6  0100               	movlb	0	; () banked
  3436  001AA8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3437  001AAA  0100               	movlb	0	; () banked
  3438  001AAC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3439  001AAE  0100               	movlb	0	; () banked
  3440  001AB0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3441  001AB2  0100               	movlb	0	; () banked
  3442  001AB4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3443  001AB6  0100               	movlb	0	; () banked
  3444  001AB8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3445  001ABA  0100               	movlb	0	; () banked
  3446  001ABC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3447  001ABE  0100               	movlb	0	; () banked
  3448  001AC0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3449  001AC2  A0D8               	btfss	status,0,c
  3450  001AC4  D012               	goto	l4238
  3451                           
  3452                           ; BSR set to: 0
  3453  001AC6  0100               	movlb	0	; () banked
  3454  001AC8  5184               	movf	___lldiv@divisor& (0+255),w,b
  3455  001ACA  0100               	movlb	0	; () banked
  3456  001ACC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3457  001ACE  0100               	movlb	0	; () banked
  3458  001AD0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3459  001AD2  0100               	movlb	0	; () banked
  3460  001AD4  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3461  001AD6  0100               	movlb	0	; () banked
  3462  001AD8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3463  001ADA  0100               	movlb	0	; () banked
  3464  001ADC  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3465  001ADE  0100               	movlb	0	; () banked
  3466  001AE0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3467  001AE2  0100               	movlb	0	; () banked
  3468  001AE4  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3469                           
  3470                           ; BSR set to: 0
  3471  001AE6  0100               	movlb	0	; () banked
  3472  001AE8  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3473  001AEA                     l4238:
  3474                           
  3475                           ; BSR set to: 0
  3476  001AEA  0100               	movlb	0	; () banked
  3477  001AEC  90D8               	bcf	status,0,c
  3478  001AEE  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3479  001AF0  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3480  001AF2  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3481  001AF4  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3482                           
  3483                           ; BSR set to: 0
  3484  001AF6  0100               	movlb	0	; () banked
  3485  001AF8  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3486  001AFA  D7CD               	goto	l4230
  3487  001AFC                     l1592:
  3488                           
  3489                           ; BSR set to: 0
  3490  001AFC  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3491  001B00  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3492  001B04  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3493  001B08  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3494                           
  3495                           ; BSR set to: 0
  3496  001B0C  0012               	return		;funcret
  3497  001B0E                     __end_of___lldiv:
  3498                           	opt stack 0
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           intcon	equ	0xFF2
  3506                           intcon3	equ	0xFF0
  3507                           postinc0	equ	0xFEE
  3508                           wreg	equ	0xFE8
  3509                           postdec1	equ	0xFE5
  3510                           fsr1l	equ	0xFE1
  3511                           indf2	equ	0xFDF
  3512                           postinc2	equ	0xFDE
  3513                           postdec2	equ	0xFDD
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _change_state_to_menu_start *****************
  3519 ;; Defined at:
  3520 ;;		line 415 in file "UI.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:   11
  3541 ;; This function calls:
  3542 ;;		_lcdInst
  3543 ;;		_printRTC
  3544 ;;		_printf
  3545 ;; This function is called by:
  3546 ;;		_initUI
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text15
  3551  0026D6                     __ptext15:
  3552                           	opt stack 0
  3553  0026D6                     _change_state_to_menu_start:
  3554                           	opt stack 18
  3555                           
  3556                           ;UI.c: 416: cur_state = 0;
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;incstack = 0
  3560  0026D6  0E00               	movlw	0
  3561  0026D8  0100               	movlb	0	; () banked
  3562  0026DA  6FE6               	movwf	(_cur_state+1)& (0+255),b
  3563  0026DC  0E00               	movlw	0
  3564  0026DE  6FE5               	movwf	_cur_state& (0+255),b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;UI.c: 418: lcdInst(0b10000000);;
  3568  0026E0  0E80               	movlw	128
  3569  0026E2  EC47  F014         	call	_lcdInst
  3570                           
  3571                           ;UI.c: 419: printRTC();
  3572  0026E6  EC63  F006         	call	_printRTC	;wreg free
  3573                           
  3574                           ;UI.c: 420: lcdInst(0b11000000);;
  3575  0026EA  0EC0               	movlw	192
  3576  0026EC  EC47  F014         	call	_lcdInst
  3577                           
  3578                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  3579  0026F0  0E97               	movlw	low STR_15
  3580  0026F2  0100               	movlb	0	; () banked
  3581  0026F4  6F8E               	movwf	printf@f& (0+255),b
  3582  0026F6  0EFF               	movlw	high STR_15
  3583  0026F8  0100               	movlb	0	; () banked
  3584  0026FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  3585  0026FC  ECBB  F002         	call	_printf	;wreg free
  3586  002700  0012               	return		;funcret
  3587  002702                     __end_of_change_state_to_menu_start:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           intcon3	equ	0xFF0
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _initTime *****************
  3609 ;; Defined at:
  3610 ;;		line 15 in file "RTC.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  s               1    wreg     unsigned char 
  3613 ;;  m               1    0[BANK0 ] unsigned char 
  3614 ;;  h               1    1[BANK0 ] unsigned char 
  3615 ;;  w               1    2[BANK0 ] unsigned char 
  3616 ;;  DD              1    3[BANK0 ] unsigned char 
  3617 ;;  MM              1    4[BANK0 ] unsigned char 
  3618 ;;  YY              1    5[BANK0 ] unsigned char 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  s               1    6[BANK0 ] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3630 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;Total ram usage:        7 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    7
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text16
  3645  0027C2                     __ptext16:
  3646                           	opt stack 0
  3647  0027C2                     _initTime:
  3648                           	opt stack 23
  3649                           
  3650                           ;incstack = 0
  3651                           ;initTime@s stored from wreg
  3652  0027C2  0100               	movlb	0	; () banked
  3653  0027C4  6F86               	movwf	initTime@s& (0+255),b
  3654                           
  3655                           ;RTC.c: 17: time[0] = s;
  3656  0027C6  C086  F0D4         	movff	initTime@s,_time
  3657                           
  3658                           ;RTC.c: 18: time[1] = m;
  3659  0027CA  C080  F0D5         	movff	initTime@m,_time+1
  3660                           
  3661                           ;RTC.c: 19: time[2] = h;
  3662  0027CE  C081  F0D6         	movff	initTime@h,_time+2
  3663                           
  3664                           ;RTC.c: 20: time[3] = w;
  3665  0027D2  C082  F0D7         	movff	initTime@w,_time+3
  3666                           
  3667                           ;RTC.c: 21: time[4] = DD;
  3668  0027D6  C083  F0D8         	movff	initTime@DD,_time+4
  3669                           
  3670                           ;RTC.c: 22: time[5] = MM;
  3671  0027DA  C084  F0D9         	movff	initTime@MM,_time+5
  3672                           
  3673                           ;RTC.c: 23: time[6] = YY;
  3674  0027DE  C085  F0DA         	movff	initTime@YY,_time+6
  3675  0027E2  0012               	return		;funcret
  3676  0027E4                     __end_of_initTime:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           intcon3	equ	0xFF0
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _initLCD *****************
  3698 ;; Defined at:
  3699 ;;		line 46 in file "lcd.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        1 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    9
  3720 ;; This function calls:
  3721 ;;		_lcdInst
  3722 ;; This function is called by:
  3723 ;;		_main
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text17
  3728  0022CA                     __ptext17:
  3729                           	opt stack 0
  3730  0022CA                     _initLCD:
  3731                           	opt stack 21
  3732                           
  3733                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3734                           
  3735                           ;incstack = 0
  3736  0022CA  0E9C               	movlw	156
  3737  0022CC  0100               	movlb	0	; () banked
  3738  0022CE  6F83               	movwf	??_initLCD& (0+255),b
  3739  0022D0  0ED7               	movlw	215
  3740  0022D2                     u4687:
  3741  0022D2  2EE8               	decfsz	wreg,f,c
  3742  0022D4  D7FE               	bra	u4687
  3743  0022D6  2F83               	decfsz	??_initLCD& (0+255),f,b
  3744  0022D8  D7FC               	bra	u4687
  3745                           
  3746                           ;lcd.c: 48: lcdInst(0b00110011);
  3747  0022DA  0E33               	movlw	51
  3748  0022DC  EC47  F014         	call	_lcdInst
  3749                           
  3750                           ;lcd.c: 49: lcdInst(0b00110010);
  3751  0022E0  0E32               	movlw	50
  3752  0022E2  EC47  F014         	call	_lcdInst
  3753                           
  3754                           ;lcd.c: 51: lcdInst(0b00101000);
  3755  0022E6  0E28               	movlw	40
  3756  0022E8  EC47  F014         	call	_lcdInst
  3757                           
  3758                           ;lcd.c: 52: lcdInst(0b00001100);
  3759  0022EC  0E0C               	movlw	12
  3760  0022EE  EC47  F014         	call	_lcdInst
  3761                           
  3762                           ;lcd.c: 53: lcdInst(0b00000110);
  3763  0022F2  0E06               	movlw	6
  3764  0022F4  EC47  F014         	call	_lcdInst
  3765                           
  3766                           ;lcd.c: 54: lcdInst(0b00000001);
  3767  0022F8  0E01               	movlw	1
  3768  0022FA  EC47  F014         	call	_lcdInst
  3769                           
  3770                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3771  0022FE  0E9C               	movlw	156
  3772  002300  0100               	movlb	0	; () banked
  3773  002302  6F83               	movwf	??_initLCD& (0+255),b
  3774  002304  0ED7               	movlw	215
  3775  002306                     u4697:
  3776  002306  2EE8               	decfsz	wreg,f,c
  3777  002308  D7FE               	bra	u4697
  3778  00230A  2F83               	decfsz	??_initLCD& (0+255),f,b
  3779  00230C  D7FC               	bra	u4697
  3780  00230E  0012               	return		;funcret
  3781  002310                     __end_of_initLCD:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           intcon3	equ	0xFF0
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _UI *****************
  3803 ;; Defined at:
  3804 ;;		line 71 in file "UI.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  i               1   83[BANK0 ] unsigned char 
  3809 ;;  i               1   82[BANK0 ] unsigned char 
  3810 ;;  i               1   81[BANK0 ] unsigned char 
  3811 ;;  i               1   80[BANK0 ] unsigned char 
  3812 ;;  i               1   79[BANK0 ] unsigned char 
  3813 ;;  i               1   78[BANK0 ] unsigned char 
  3814 ;;  i               1   77[BANK0 ] unsigned char 
  3815 ;;  i               1   76[BANK0 ] unsigned char 
  3816 ;;  i               1   75[BANK0 ] unsigned char 
  3817 ;;  i               1   74[BANK0 ] unsigned char 
  3818 ;;  i               1   73[BANK0 ] unsigned char 
  3819 ;;  i               1   72[BANK0 ] unsigned char 
  3820 ;;  i               1   71[BANK0 ] unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;Total ram usage:       16 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:   11
  3837 ;; This function calls:
  3838 ;;		___awdiv
  3839 ;;		___awmod
  3840 ;;		_change_state_to_menu_12
  3841 ;;		_change_state_to_menu_22
  3842 ;;		_lcdInst
  3843 ;;		_printRTC
  3844 ;;		_printf
  3845 ;; This function is called by:
  3846 ;;		_main
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text18
  3851  000012                     __ptext18:
  3852                           	opt stack 0
  3853  000012                     _UI:
  3854                           	opt stack 19
  3855                           
  3856                           ;UI.c: 72: if(machine_state == DoneSorting_state){
  3857                           
  3858                           ;incstack = 0
  3859  000012  0E02               	movlw	2
  3860  000014  0100               	movlb	0	; () banked
  3861  000016  19F7               	xorwf	_machine_state& (0+255),w,b
  3862  000018  A4D8               	btfss	status,2,c
  3863  00001A  D071               	goto	l5038
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;UI.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3867  00001C  0E01               	movlw	1
  3868  00001E  EC47  F014         	call	_lcdInst
  3869  000022  0E68               	movlw	104
  3870  000024  0100               	movlb	0	; () banked
  3871  000026  6FC4               	movwf	??_UI& (0+255),b
  3872  000028  0EE4               	movlw	228
  3873  00002A                     u4707:
  3874  00002A  2EE8               	decfsz	wreg,f,c
  3875  00002C  D7FE               	bra	u4707
  3876  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  3877  000030  D7FC               	bra	u4707
  3878  000032  F000               	nop	
  3879                           
  3880                           ;UI.c: 74: lcdInst(0b10000000);;
  3881  000034  0E80               	movlw	128
  3882  000036  EC47  F014         	call	_lcdInst
  3883                           
  3884                           ;UI.c: 75: printf("!SORT CONCLUDED!");
  3885  00003A  0EBA               	movlw	low STR_1
  3886  00003C  0100               	movlb	0	; () banked
  3887  00003E  6F8E               	movwf	printf@f& (0+255),b
  3888  000040  0EFE               	movlw	high STR_1
  3889  000042  0100               	movlb	0	; () banked
  3890  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  3891  000046  ECBB  F002         	call	_printf	;wreg free
  3892                           
  3893                           ;UI.c: 76: lcdInst(0b11000000);;
  3894  00004A  0EC0               	movlw	192
  3895  00004C  EC47  F014         	call	_lcdInst
  3896                           
  3897                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  3898  000050  0E0E               	movlw	14
  3899  000052  0100               	movlb	0	; () banked
  3900  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3901  000056  0E10               	movlw	16
  3902  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  3903  00005A  C0F5  F080         	movff	_total_time,___awmod@dividend
  3904  00005E  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  3905  000062  EC32  F00E         	call	___awmod	;wreg free
  3906  000066  C080  F0C5         	movff	?___awmod,_UI$2064
  3907  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2064+1
  3908                           
  3909                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  3910  00006E  0EE8               	movlw	low STR_2
  3911  000070  0100               	movlb	0	; () banked
  3912  000072  6F8E               	movwf	printf@f& (0+255),b
  3913  000074  0EFD               	movlw	high STR_2
  3914  000076  0100               	movlb	0	; () banked
  3915  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  3916  00007A  0E00               	movlw	0
  3917  00007C  0100               	movlb	0	; () banked
  3918  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  3919  000080  0E00               	movlw	0
  3920  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  3921  000084  0E0E               	movlw	14
  3922  000086  0100               	movlb	0	; () banked
  3923  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3924  00008A  0E10               	movlw	16
  3925  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  3926  00008E  C0F5  F080         	movff	_total_time,___awmod@dividend
  3927  000092  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  3928  000096  EC32  F00E         	call	___awmod	;wreg free
  3929  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  3930  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  3931  0000A2  0E00               	movlw	0
  3932  0000A4  0100               	movlb	0	; () banked
  3933  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  3934  0000A8  0E3C               	movlw	60
  3935  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  3936  0000AC  ECCA  F00C         	call	___awdiv	;wreg free
  3937  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  3938  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  3939  0000B8  C0C5  F080         	movff	_UI$2064,___awmod@dividend
  3940  0000BC  C0C6  F081         	movff	_UI$2064+1,___awmod@dividend+1
  3941  0000C0  0E00               	movlw	0
  3942  0000C2  0100               	movlb	0	; () banked
  3943  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3944  0000C6  0E3C               	movlw	60
  3945  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  3946  0000CA  EC32  F00E         	call	___awmod	;wreg free
  3947  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  3948  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  3949  0000D6  ECBB  F002         	call	_printf	;wreg free
  3950                           
  3951                           ;UI.c: 78: machine_state = UI_state;
  3952  0000DA  0E00               	movlw	0
  3953  0000DC  0100               	movlb	0	; () banked
  3954  0000DE  6FF7               	movwf	_machine_state& (0+255),b
  3955  0000E0                     l351:
  3956  0000E0  A281               	btfss	3969,1,c	;volatile
  3957  0000E2  D7FE               	goto	l351
  3958                           
  3959                           ;UI.c: 81: }
  3960                           ;UI.c: 82: if(cur_state==12){
  3961  0000E4  0E0C               	movlw	12
  3962  0000E6  0100               	movlb	0	; () banked
  3963  0000E8  19E5               	xorwf	_cur_state& (0+255),w,b
  3964  0000EA  0100               	movlb	0	; () banked
  3965  0000EC  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
  3966  0000EE  A4D8               	btfss	status,2,c
  3967  0000F0  D003               	goto	l5036
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;UI.c: 83: change_state_to_menu_12();
  3971  0000F2  ECE3  F011         	call	_change_state_to_menu_12	;wreg free
  3972                           
  3973                           ;UI.c: 84: }
  3974  0000F6  D238               	goto	l5294
  3975  0000F8                     l5036:
  3976                           
  3977                           ;UI.c: 85: else{
  3978                           ;UI.c: 86: change_state_to_menu_22();
  3979  0000F8  ECC7  F011         	call	_change_state_to_menu_22	;wreg free
  3980                           
  3981                           ;UI.c: 87: }
  3982                           ;UI.c: 88: }
  3983  0000FC  D235               	goto	l5294
  3984  0000FE                     l5038:
  3985                           
  3986                           ;UI.c: 89: else if(cur_state == 0){
  3987  0000FE  0100               	movlb	0	; () banked
  3988  000100  51E5               	movf	_cur_state& (0+255),w,b
  3989  000102  0100               	movlb	0	; () banked
  3990  000104  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
  3991  000106  A4D8               	btfss	status,2,c
  3992  000108  D22F               	goto	l5294
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;UI.c: 90: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  3996  00010A  0E00               	movlw	0
  3997  00010C  0100               	movlb	0	; () banked
  3998  00010E  6FC7               	movwf	UI@i& (0+255),b
  3999  000110                     l5042:
  4000                           
  4001                           ; BSR set to: 0
  4002  000110  0E63               	movlw	99
  4003  000112  0100               	movlb	0	; () banked
  4004  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4005  000116  D001               	goto	l5046
  4006  000118  D00C               	goto	l5050
  4007  00011A                     l5046:
  4008                           
  4009                           ; BSR set to: 0
  4010  00011A  0E68               	movlw	104
  4011  00011C  0100               	movlb	0	; () banked
  4012  00011E  6FC4               	movwf	??_UI& (0+255),b
  4013  000120  0EE4               	movlw	228
  4014  000122                     u4717:
  4015  000122  2EE8               	decfsz	wreg,f,c
  4016  000124  D7FE               	bra	u4717
  4017  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4018  000128  D7FC               	bra	u4717
  4019  00012A  F000               	nop	
  4020  00012C  0100               	movlb	0	; () banked
  4021  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4022  000130  D7EF               	goto	l5042
  4023  000132                     l5050:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;UI.c: 91: if(cur_state == 0){
  4027  000132  0100               	movlb	0	; () banked
  4028  000134  51E5               	movf	_cur_state& (0+255),w,b
  4029  000136  0100               	movlb	0	; () banked
  4030  000138  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
  4031  00013A  A4D8               	btfss	status,2,c
  4032  00013C  D215               	goto	l5294
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;UI.c: 92: printRTC();
  4036  00013E  EC63  F006         	call	_printRTC	;wreg free
  4037                           
  4038                           ;UI.c: 93: }
  4039                           ;UI.c: 94: }
  4040                           ;UI.c: 95: while(logstate){
  4041  000142  D212               	goto	l5294
  4042  000144                     l5054:
  4043                           
  4044                           ;UI.c: 97: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4045  000144  0E01               	movlw	1
  4046  000146  EC47  F014         	call	_lcdInst
  4047  00014A  0E68               	movlw	104
  4048  00014C  0100               	movlb	0	; () banked
  4049  00014E  6FC4               	movwf	??_UI& (0+255),b
  4050  000150  0EE4               	movlw	228
  4051  000152                     u4727:
  4052  000152  2EE8               	decfsz	wreg,f,c
  4053  000154  D7FE               	bra	u4727
  4054  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4055  000158  D7FC               	bra	u4727
  4056  00015A  F000               	nop	
  4057                           
  4058                           ;UI.c: 98: lcdInst(0b10000000);;
  4059  00015C  0E80               	movlw	128
  4060  00015E  EC47  F014         	call	_lcdInst
  4061                           
  4062                           ;UI.c: 99: printf("-- Log %2d here--", log);
  4063  000162  0EFD               	movlw	low STR_3
  4064  000164  0100               	movlb	0	; () banked
  4065  000166  6F8E               	movwf	printf@f& (0+255),b
  4066  000168  0EFD               	movlw	high STR_3
  4067  00016A  0100               	movlb	0	; () banked
  4068  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4069  00016E  C0F1  F090         	movff	_log,?_printf+2
  4070  000172  C0F2  F091         	movff	_log+1,?_printf+3
  4071  000176  ECBB  F002         	call	_printf	;wreg free
  4072                           
  4073                           ;UI.c: 100: lcdInst(0b11000000);;
  4074  00017A  0EC0               	movlw	192
  4075  00017C  EC47  F014         	call	_lcdInst
  4076                           
  4077                           ;UI.c: 101: printf("Pause:< | Back:>");
  4078  000180  0E86               	movlw	low STR_4
  4079  000182  0100               	movlb	0	; () banked
  4080  000184  6F8E               	movwf	printf@f& (0+255),b
  4081  000186  0EFF               	movlw	high STR_4
  4082  000188  0100               	movlb	0	; () banked
  4083  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4084  00018C  ECBB  F002         	call	_printf	;wreg free
  4085                           
  4086                           ;UI.c: 103: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4087  000190  0E00               	movlw	0
  4088  000192  0100               	movlb	0	; () banked
  4089  000194  6FC8               	movwf	UI@i_648& (0+255),b
  4090  000196                     l5068:
  4091                           
  4092                           ; BSR set to: 0
  4093  000196  0E63               	movlw	99
  4094  000198  0100               	movlb	0	; () banked
  4095  00019A  65C8               	cpfsgt	UI@i_648& (0+255),b
  4096  00019C  D001               	goto	l5072
  4097  00019E  D00C               	goto	l5076
  4098  0001A0                     l5072:
  4099                           
  4100                           ; BSR set to: 0
  4101  0001A0  0E68               	movlw	104
  4102  0001A2  0100               	movlb	0	; () banked
  4103  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4104  0001A6  0EE4               	movlw	228
  4105  0001A8                     u4737:
  4106  0001A8  2EE8               	decfsz	wreg,f,c
  4107  0001AA  D7FE               	bra	u4737
  4108  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4109  0001AE  D7FC               	bra	u4737
  4110  0001B0  F000               	nop	
  4111  0001B2  0100               	movlb	0	; () banked
  4112  0001B4  2BC8               	incf	UI@i_648& (0+255),f,b
  4113  0001B6  D7EF               	goto	l5068
  4114  0001B8                     l5076:
  4115                           
  4116                           ; BSR set to: 0
  4117  0001B8  0100               	movlb	0	; () banked
  4118  0001BA  51F3               	movf	_logstate& (0+255),w,b
  4119  0001BC  0100               	movlb	0	; () banked
  4120  0001BE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4121  0001C0  B4D8               	btfsc	status,2,c
  4122  0001C2  0012               	return	
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4126                           
  4127                           ; BSR set to: 0
  4128                           
  4129                           ; BSR set to: 0
  4130  0001C4  0E00               	movlw	0
  4131  0001C6  0100               	movlb	0	; () banked
  4132  0001C8  6FC9               	movwf	UI@i_649& (0+255),b
  4133  0001CA                     l5082:
  4134                           
  4135                           ; BSR set to: 0
  4136  0001CA  0E63               	movlw	99
  4137  0001CC  0100               	movlb	0	; () banked
  4138  0001CE  65C9               	cpfsgt	UI@i_649& (0+255),b
  4139  0001D0  D001               	goto	l5086
  4140  0001D2  D00C               	goto	l5090
  4141  0001D4                     l5086:
  4142                           
  4143                           ; BSR set to: 0
  4144  0001D4  0E68               	movlw	104
  4145  0001D6  0100               	movlb	0	; () banked
  4146  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4147  0001DA  0EE4               	movlw	228
  4148  0001DC                     u4747:
  4149  0001DC  2EE8               	decfsz	wreg,f,c
  4150  0001DE  D7FE               	bra	u4747
  4151  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4152  0001E2  D7FC               	bra	u4747
  4153  0001E4  F000               	nop	
  4154  0001E6  0100               	movlb	0	; () banked
  4155  0001E8  2BC9               	incf	UI@i_649& (0+255),f,b
  4156  0001EA  D7EF               	goto	l5082
  4157  0001EC                     l5090:
  4158                           
  4159                           ; BSR set to: 0
  4160  0001EC  0100               	movlb	0	; () banked
  4161  0001EE  51F3               	movf	_logstate& (0+255),w,b
  4162  0001F0  0100               	movlb	0	; () banked
  4163  0001F2  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4164  0001F4  B4D8               	btfsc	status,2,c
  4165  0001F6  0012               	return	
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4169                           
  4170                           ; BSR set to: 0
  4171                           
  4172                           ; BSR set to: 0
  4173  0001F8  0E01               	movlw	1
  4174  0001FA  EC47  F014         	call	_lcdInst
  4175  0001FE  0E68               	movlw	104
  4176  000200  0100               	movlb	0	; () banked
  4177  000202  6FC4               	movwf	??_UI& (0+255),b
  4178  000204  0EE4               	movlw	228
  4179  000206                     u4757:
  4180  000206  2EE8               	decfsz	wreg,f,c
  4181  000208  D7FE               	bra	u4757
  4182  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4183  00020C  D7FC               	bra	u4757
  4184  00020E  F000               	nop	
  4185                           
  4186                           ;UI.c: 107: lcdInst(0b10000000);;
  4187  000210  0E80               	movlw	128
  4188  000212  EC47  F014         	call	_lcdInst
  4189                           
  4190                           ;UI.c: 108: printf("Start:");
  4191  000216  0EC4               	movlw	low STR_5
  4192  000218  0100               	movlb	0	; () banked
  4193  00021A  6F8E               	movwf	printf@f& (0+255),b
  4194  00021C  0EFF               	movlw	high STR_5
  4195  00021E  0100               	movlb	0	; () banked
  4196  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4197  000222  ECBB  F002         	call	_printf	;wreg free
  4198                           
  4199                           ;UI.c: 109: lcdInst(0b11000000);;
  4200  000226  0EC0               	movlw	192
  4201  000228  EC47  F014         	call	_lcdInst
  4202                           
  4203                           ;UI.c: 110: printf("06Feb | 01:08:56");
  4204  00022C  0EFE               	movlw	low STR_6
  4205  00022E  0100               	movlb	0	; () banked
  4206  000230  6F8E               	movwf	printf@f& (0+255),b
  4207  000232  0EFE               	movlw	high STR_6
  4208  000234  0100               	movlb	0	; () banked
  4209  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4210  000238  ECBB  F002         	call	_printf	;wreg free
  4211                           
  4212                           ;UI.c: 112: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4213  00023C  0E00               	movlw	0
  4214  00023E  0100               	movlb	0	; () banked
  4215  000240  6FCA               	movwf	UI@i_652& (0+255),b
  4216  000242                     l5108:
  4217                           
  4218                           ; BSR set to: 0
  4219  000242  0E63               	movlw	99
  4220  000244  0100               	movlb	0	; () banked
  4221  000246  65CA               	cpfsgt	UI@i_652& (0+255),b
  4222  000248  D001               	goto	l5112
  4223  00024A  D00C               	goto	l5116
  4224  00024C                     l5112:
  4225                           
  4226                           ; BSR set to: 0
  4227  00024C  0E68               	movlw	104
  4228  00024E  0100               	movlb	0	; () banked
  4229  000250  6FC4               	movwf	??_UI& (0+255),b
  4230  000252  0EE4               	movlw	228
  4231  000254                     u4767:
  4232  000254  2EE8               	decfsz	wreg,f,c
  4233  000256  D7FE               	bra	u4767
  4234  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4235  00025A  D7FC               	bra	u4767
  4236  00025C  F000               	nop	
  4237  00025E  0100               	movlb	0	; () banked
  4238  000260  2BCA               	incf	UI@i_652& (0+255),f,b
  4239  000262  D7EF               	goto	l5108
  4240  000264                     l5116:
  4241                           
  4242                           ; BSR set to: 0
  4243  000264  0100               	movlb	0	; () banked
  4244  000266  51F3               	movf	_logstate& (0+255),w,b
  4245  000268  0100               	movlb	0	; () banked
  4246  00026A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4247  00026C  B4D8               	btfsc	status,2,c
  4248  00026E  0012               	return	
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4252                           
  4253                           ; BSR set to: 0
  4254                           
  4255                           ; BSR set to: 0
  4256  000270  0E00               	movlw	0
  4257  000272  0100               	movlb	0	; () banked
  4258  000274  6FCB               	movwf	UI@i_653& (0+255),b
  4259  000276                     l5122:
  4260                           
  4261                           ; BSR set to: 0
  4262  000276  0E63               	movlw	99
  4263  000278  0100               	movlb	0	; () banked
  4264  00027A  65CB               	cpfsgt	UI@i_653& (0+255),b
  4265  00027C  D001               	goto	l5126
  4266  00027E  D00C               	goto	l5130
  4267  000280                     l5126:
  4268                           
  4269                           ; BSR set to: 0
  4270  000280  0E68               	movlw	104
  4271  000282  0100               	movlb	0	; () banked
  4272  000284  6FC4               	movwf	??_UI& (0+255),b
  4273  000286  0EE4               	movlw	228
  4274  000288                     u4777:
  4275  000288  2EE8               	decfsz	wreg,f,c
  4276  00028A  D7FE               	bra	u4777
  4277  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4278  00028E  D7FC               	bra	u4777
  4279  000290  F000               	nop	
  4280  000292  0100               	movlb	0	; () banked
  4281  000294  2BCB               	incf	UI@i_653& (0+255),f,b
  4282  000296  D7EF               	goto	l5122
  4283  000298                     l5130:
  4284                           
  4285                           ; BSR set to: 0
  4286  000298  0100               	movlb	0	; () banked
  4287  00029A  51F3               	movf	_logstate& (0+255),w,b
  4288  00029C  0100               	movlb	0	; () banked
  4289  00029E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4290  0002A0  B4D8               	btfsc	status,2,c
  4291  0002A2  0012               	return	
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4295                           
  4296                           ; BSR set to: 0
  4297                           
  4298                           ; BSR set to: 0
  4299  0002A4  0E01               	movlw	1
  4300  0002A6  EC47  F014         	call	_lcdInst
  4301  0002AA  0E68               	movlw	104
  4302  0002AC  0100               	movlb	0	; () banked
  4303  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4304  0002B0  0EE4               	movlw	228
  4305  0002B2                     u4787:
  4306  0002B2  2EE8               	decfsz	wreg,f,c
  4307  0002B4  D7FE               	bra	u4787
  4308  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4309  0002B8  D7FC               	bra	u4787
  4310  0002BA  F000               	nop	
  4311                           
  4312                           ;UI.c: 116: lcdInst(0b10000000);;
  4313  0002BC  0E80               	movlw	128
  4314  0002BE  EC47  F014         	call	_lcdInst
  4315                           
  4316                           ;UI.c: 117: printf("Duration:");
  4317  0002C2  0EB3               	movlw	low STR_7
  4318  0002C4  0100               	movlb	0	; () banked
  4319  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4320  0002C8  0EFF               	movlw	high STR_7
  4321  0002CA  0100               	movlb	0	; () banked
  4322  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4323  0002CE  ECBB  F002         	call	_printf	;wreg free
  4324                           
  4325                           ;UI.c: 118: lcdInst(0b11000000);;
  4326  0002D2  0EC0               	movlw	192
  4327  0002D4  EC47  F014         	call	_lcdInst
  4328                           
  4329                           ;UI.c: 119: printf("%d min(s) %d secs", 2, 42);
  4330  0002D8  0E0F               	movlw	low STR_8
  4331  0002DA  0100               	movlb	0	; () banked
  4332  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4333  0002DE  0EFE               	movlw	high STR_8
  4334  0002E0  0100               	movlb	0	; () banked
  4335  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4336  0002E4  0E00               	movlw	0
  4337  0002E6  0100               	movlb	0	; () banked
  4338  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4339  0002EA  0E02               	movlw	2
  4340  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4341  0002EE  0E00               	movlw	0
  4342  0002F0  0100               	movlb	0	; () banked
  4343  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4344  0002F4  0E2A               	movlw	42
  4345  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4346  0002F8  ECBB  F002         	call	_printf	;wreg free
  4347                           
  4348                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4349  0002FC  0E00               	movlw	0
  4350  0002FE  0100               	movlb	0	; () banked
  4351  000300  6FCC               	movwf	UI@i_656& (0+255),b
  4352  000302                     l5148:
  4353                           
  4354                           ; BSR set to: 0
  4355  000302  0E63               	movlw	99
  4356  000304  0100               	movlb	0	; () banked
  4357  000306  65CC               	cpfsgt	UI@i_656& (0+255),b
  4358  000308  D001               	goto	l5152
  4359  00030A  D00C               	goto	l5156
  4360  00030C                     l5152:
  4361                           
  4362                           ; BSR set to: 0
  4363  00030C  0E68               	movlw	104
  4364  00030E  0100               	movlb	0	; () banked
  4365  000310  6FC4               	movwf	??_UI& (0+255),b
  4366  000312  0EE4               	movlw	228
  4367  000314                     u4797:
  4368  000314  2EE8               	decfsz	wreg,f,c
  4369  000316  D7FE               	bra	u4797
  4370  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4371  00031A  D7FC               	bra	u4797
  4372  00031C  F000               	nop	
  4373  00031E  0100               	movlb	0	; () banked
  4374  000320  2BCC               	incf	UI@i_656& (0+255),f,b
  4375  000322  D7EF               	goto	l5148
  4376  000324                     l5156:
  4377                           
  4378                           ; BSR set to: 0
  4379  000324  0100               	movlb	0	; () banked
  4380  000326  51F3               	movf	_logstate& (0+255),w,b
  4381  000328  0100               	movlb	0	; () banked
  4382  00032A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4383  00032C  B4D8               	btfsc	status,2,c
  4384  00032E  0012               	return	
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4388                           
  4389                           ; BSR set to: 0
  4390                           
  4391                           ; BSR set to: 0
  4392  000330  0E00               	movlw	0
  4393  000332  0100               	movlb	0	; () banked
  4394  000334  6FCD               	movwf	UI@i_657& (0+255),b
  4395  000336                     l5162:
  4396                           
  4397                           ; BSR set to: 0
  4398  000336  0E63               	movlw	99
  4399  000338  0100               	movlb	0	; () banked
  4400  00033A  65CD               	cpfsgt	UI@i_657& (0+255),b
  4401  00033C  D001               	goto	l5166
  4402  00033E  D00C               	goto	l5170
  4403  000340                     l5166:
  4404                           
  4405                           ; BSR set to: 0
  4406  000340  0E68               	movlw	104
  4407  000342  0100               	movlb	0	; () banked
  4408  000344  6FC4               	movwf	??_UI& (0+255),b
  4409  000346  0EE4               	movlw	228
  4410  000348                     u4807:
  4411  000348  2EE8               	decfsz	wreg,f,c
  4412  00034A  D7FE               	bra	u4807
  4413  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  4414  00034E  D7FC               	bra	u4807
  4415  000350  F000               	nop	
  4416  000352  0100               	movlb	0	; () banked
  4417  000354  2BCD               	incf	UI@i_657& (0+255),f,b
  4418  000356  D7EF               	goto	l5162
  4419  000358                     l5170:
  4420                           
  4421                           ; BSR set to: 0
  4422  000358  0100               	movlb	0	; () banked
  4423  00035A  51F3               	movf	_logstate& (0+255),w,b
  4424  00035C  0100               	movlb	0	; () banked
  4425  00035E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4426  000360  B4D8               	btfsc	status,2,c
  4427  000362  0012               	return	
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4431                           
  4432                           ; BSR set to: 0
  4433                           
  4434                           ; BSR set to: 0
  4435  000364  0E01               	movlw	1
  4436  000366  EC47  F014         	call	_lcdInst
  4437  00036A  0E68               	movlw	104
  4438  00036C  0100               	movlb	0	; () banked
  4439  00036E  6FC4               	movwf	??_UI& (0+255),b
  4440  000370  0EE4               	movlw	228
  4441  000372                     u4817:
  4442  000372  2EE8               	decfsz	wreg,f,c
  4443  000374  D7FE               	bra	u4817
  4444  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  4445  000378  D7FC               	bra	u4817
  4446  00037A  F000               	nop	
  4447                           
  4448                           ;UI.c: 125: lcdInst(0b10000000);;
  4449  00037C  0E80               	movlw	128
  4450  00037E  EC47  F014         	call	_lcdInst
  4451                           
  4452                           ;UI.c: 126: printf(" -- Pop  can -- ");
  4453  000382  0E98               	movlw	low STR_9
  4454  000384  0100               	movlb	0	; () banked
  4455  000386  6F8E               	movwf	printf@f& (0+255),b
  4456  000388  0EFE               	movlw	high STR_9
  4457  00038A  0100               	movlb	0	; () banked
  4458  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4459  00038E  ECBB  F002         	call	_printf	;wreg free
  4460                           
  4461                           ;UI.c: 127: lcdInst(0b11000000);;
  4462  000392  0EC0               	movlw	192
  4463  000394  EC47  F014         	call	_lcdInst
  4464                           
  4465                           ;UI.c: 128: printf("No tab: 9|Tab: 1");
  4466  000398  0EDC               	movlw	low STR_10
  4467  00039A  0100               	movlb	0	; () banked
  4468  00039C  6F8E               	movwf	printf@f& (0+255),b
  4469  00039E  0EFE               	movlw	high STR_10
  4470  0003A0  0100               	movlb	0	; () banked
  4471  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4472  0003A4  ECBB  F002         	call	_printf	;wreg free
  4473                           
  4474                           ;UI.c: 130: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4475  0003A8  0E00               	movlw	0
  4476  0003AA  0100               	movlb	0	; () banked
  4477  0003AC  6FCE               	movwf	UI@i_660& (0+255),b
  4478  0003AE                     l5188:
  4479                           
  4480                           ; BSR set to: 0
  4481  0003AE  0E63               	movlw	99
  4482  0003B0  0100               	movlb	0	; () banked
  4483  0003B2  65CE               	cpfsgt	UI@i_660& (0+255),b
  4484  0003B4  D001               	goto	l5192
  4485  0003B6  D00C               	goto	l5196
  4486  0003B8                     l5192:
  4487                           
  4488                           ; BSR set to: 0
  4489  0003B8  0E68               	movlw	104
  4490  0003BA  0100               	movlb	0	; () banked
  4491  0003BC  6FC4               	movwf	??_UI& (0+255),b
  4492  0003BE  0EE4               	movlw	228
  4493  0003C0                     u4827:
  4494  0003C0  2EE8               	decfsz	wreg,f,c
  4495  0003C2  D7FE               	bra	u4827
  4496  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  4497  0003C6  D7FC               	bra	u4827
  4498  0003C8  F000               	nop	
  4499  0003CA  0100               	movlb	0	; () banked
  4500  0003CC  2BCE               	incf	UI@i_660& (0+255),f,b
  4501  0003CE  D7EF               	goto	l5188
  4502  0003D0                     l5196:
  4503                           
  4504                           ; BSR set to: 0
  4505  0003D0  0100               	movlb	0	; () banked
  4506  0003D2  51F3               	movf	_logstate& (0+255),w,b
  4507  0003D4  0100               	movlb	0	; () banked
  4508  0003D6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4509  0003D8  B4D8               	btfsc	status,2,c
  4510  0003DA  0012               	return	
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4514                           
  4515                           ; BSR set to: 0
  4516                           
  4517                           ; BSR set to: 0
  4518  0003DC  0E00               	movlw	0
  4519  0003DE  0100               	movlb	0	; () banked
  4520  0003E0  6FCF               	movwf	UI@i_661& (0+255),b
  4521  0003E2                     l5202:
  4522                           
  4523                           ; BSR set to: 0
  4524  0003E2  0E63               	movlw	99
  4525  0003E4  0100               	movlb	0	; () banked
  4526  0003E6  65CF               	cpfsgt	UI@i_661& (0+255),b
  4527  0003E8  D001               	goto	l5206
  4528  0003EA  D00C               	goto	l5210
  4529  0003EC                     l5206:
  4530                           
  4531                           ; BSR set to: 0
  4532  0003EC  0E68               	movlw	104
  4533  0003EE  0100               	movlb	0	; () banked
  4534  0003F0  6FC4               	movwf	??_UI& (0+255),b
  4535  0003F2  0EE4               	movlw	228
  4536  0003F4                     u4837:
  4537  0003F4  2EE8               	decfsz	wreg,f,c
  4538  0003F6  D7FE               	bra	u4837
  4539  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  4540  0003FA  D7FC               	bra	u4837
  4541  0003FC  F000               	nop	
  4542  0003FE  0100               	movlb	0	; () banked
  4543  000400  2BCF               	incf	UI@i_661& (0+255),f,b
  4544  000402  D7EF               	goto	l5202
  4545  000404                     l5210:
  4546                           
  4547                           ; BSR set to: 0
  4548  000404  0100               	movlb	0	; () banked
  4549  000406  51F3               	movf	_logstate& (0+255),w,b
  4550  000408  0100               	movlb	0	; () banked
  4551  00040A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4552  00040C  B4D8               	btfsc	status,2,c
  4553  00040E  0012               	return	
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;UI.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4557                           
  4558                           ; BSR set to: 0
  4559                           
  4560                           ; BSR set to: 0
  4561  000410  0E01               	movlw	1
  4562  000412  EC47  F014         	call	_lcdInst
  4563  000416  0E68               	movlw	104
  4564  000418  0100               	movlb	0	; () banked
  4565  00041A  6FC4               	movwf	??_UI& (0+255),b
  4566  00041C  0EE4               	movlw	228
  4567  00041E                     u4847:
  4568  00041E  2EE8               	decfsz	wreg,f,c
  4569  000420  D7FE               	bra	u4847
  4570  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  4571  000424  D7FC               	bra	u4847
  4572  000426  F000               	nop	
  4573                           
  4574                           ;UI.c: 134: lcdInst(0b10000000);;
  4575  000428  0E80               	movlw	128
  4576  00042A  EC47  F014         	call	_lcdInst
  4577                           
  4578                           ;UI.c: 135: printf(" -- Soup can -- ");
  4579  00042E  0EA9               	movlw	low STR_11
  4580  000430  0100               	movlb	0	; () banked
  4581  000432  6F8E               	movwf	printf@f& (0+255),b
  4582  000434  0EFE               	movlw	high STR_11
  4583  000436  0100               	movlb	0	; () banked
  4584  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  4585  00043A  ECBB  F002         	call	_printf	;wreg free
  4586                           
  4587                           ;UI.c: 136: lcdInst(0b11000000);;
  4588  00043E  0EC0               	movlw	192
  4589  000440  EC47  F014         	call	_lcdInst
  4590                           
  4591                           ;UI.c: 137: printf("No lbl: 1|lbl: 1");
  4592  000444  0EED               	movlw	low STR_12
  4593  000446  0100               	movlb	0	; () banked
  4594  000448  6F8E               	movwf	printf@f& (0+255),b
  4595  00044A  0EFE               	movlw	high STR_12
  4596  00044C  0100               	movlb	0	; () banked
  4597  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4598  000450  ECBB  F002         	call	_printf	;wreg free
  4599                           
  4600                           ;UI.c: 139: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4601  000454  0E00               	movlw	0
  4602  000456  0100               	movlb	0	; () banked
  4603  000458  6FD0               	movwf	UI@i_664& (0+255),b
  4604  00045A                     l5228:
  4605                           
  4606                           ; BSR set to: 0
  4607  00045A  0E63               	movlw	99
  4608  00045C  0100               	movlb	0	; () banked
  4609  00045E  65D0               	cpfsgt	UI@i_664& (0+255),b
  4610  000460  D001               	goto	l5232
  4611  000462  D00C               	goto	l5236
  4612  000464                     l5232:
  4613                           
  4614                           ; BSR set to: 0
  4615  000464  0E68               	movlw	104
  4616  000466  0100               	movlb	0	; () banked
  4617  000468  6FC4               	movwf	??_UI& (0+255),b
  4618  00046A  0EE4               	movlw	228
  4619  00046C                     u4857:
  4620  00046C  2EE8               	decfsz	wreg,f,c
  4621  00046E  D7FE               	bra	u4857
  4622  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  4623  000472  D7FC               	bra	u4857
  4624  000474  F000               	nop	
  4625  000476  0100               	movlb	0	; () banked
  4626  000478  2BD0               	incf	UI@i_664& (0+255),f,b
  4627  00047A  D7EF               	goto	l5228
  4628  00047C                     l5236:
  4629                           
  4630                           ; BSR set to: 0
  4631  00047C  0100               	movlb	0	; () banked
  4632  00047E  51F3               	movf	_logstate& (0+255),w,b
  4633  000480  0100               	movlb	0	; () banked
  4634  000482  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4635  000484  B4D8               	btfsc	status,2,c
  4636  000486  0012               	return	
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644  000488  0E00               	movlw	0
  4645  00048A  0100               	movlb	0	; () banked
  4646  00048C  6FD1               	movwf	UI@i_665& (0+255),b
  4647  00048E                     l5242:
  4648                           
  4649                           ; BSR set to: 0
  4650  00048E  0E63               	movlw	99
  4651  000490  0100               	movlb	0	; () banked
  4652  000492  65D1               	cpfsgt	UI@i_665& (0+255),b
  4653  000494  D001               	goto	l5246
  4654  000496  D00C               	goto	l5250
  4655  000498                     l5246:
  4656                           
  4657                           ; BSR set to: 0
  4658  000498  0E68               	movlw	104
  4659  00049A  0100               	movlb	0	; () banked
  4660  00049C  6FC4               	movwf	??_UI& (0+255),b
  4661  00049E  0EE4               	movlw	228
  4662  0004A0                     u4867:
  4663  0004A0  2EE8               	decfsz	wreg,f,c
  4664  0004A2  D7FE               	bra	u4867
  4665  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  4666  0004A6  D7FC               	bra	u4867
  4667  0004A8  F000               	nop	
  4668  0004AA  0100               	movlb	0	; () banked
  4669  0004AC  2BD1               	incf	UI@i_665& (0+255),f,b
  4670  0004AE  D7EF               	goto	l5242
  4671  0004B0                     l5250:
  4672                           
  4673                           ; BSR set to: 0
  4674  0004B0  0100               	movlb	0	; () banked
  4675  0004B2  51F3               	movf	_logstate& (0+255),w,b
  4676  0004B4  0100               	movlb	0	; () banked
  4677  0004B6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4678  0004B8  B4D8               	btfsc	status,2,c
  4679  0004BA  0012               	return	
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;UI.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4683                           
  4684                           ; BSR set to: 0
  4685                           
  4686                           ; BSR set to: 0
  4687  0004BC  0E01               	movlw	1
  4688  0004BE  EC47  F014         	call	_lcdInst
  4689  0004C2  0E68               	movlw	104
  4690  0004C4  0100               	movlb	0	; () banked
  4691  0004C6  6FC4               	movwf	??_UI& (0+255),b
  4692  0004C8  0EE4               	movlw	228
  4693  0004CA                     u4877:
  4694  0004CA  2EE8               	decfsz	wreg,f,c
  4695  0004CC  D7FE               	bra	u4877
  4696  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  4697  0004D0  D7FC               	bra	u4877
  4698  0004D2  F000               	nop	
  4699                           
  4700                           ;UI.c: 143: lcdInst(0b10000000);;
  4701  0004D4  0E80               	movlw	128
  4702  0004D6  EC47  F014         	call	_lcdInst
  4703                           
  4704                           ;UI.c: 144: printf("-- Total cans --");
  4705  0004DA  0ECB               	movlw	low STR_13
  4706  0004DC  0100               	movlb	0	; () banked
  4707  0004DE  6F8E               	movwf	printf@f& (0+255),b
  4708  0004E0  0EFE               	movlw	high STR_13
  4709  0004E2  0100               	movlb	0	; () banked
  4710  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  4711  0004E6  ECBB  F002         	call	_printf	;wreg free
  4712                           
  4713                           ;UI.c: 145: lcdInst(0b11000000);;
  4714  0004EA  0EC0               	movlw	192
  4715  0004EC  EC47  F014         	call	_lcdInst
  4716                           
  4717                           ;UI.c: 146: printf("12");
  4718  0004F0  0EFB               	movlw	low STR_14
  4719  0004F2  0100               	movlb	0	; () banked
  4720  0004F4  6F8E               	movwf	printf@f& (0+255),b
  4721  0004F6  0EFF               	movlw	high STR_14
  4722  0004F8  0100               	movlb	0	; () banked
  4723  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4724  0004FC  ECBB  F002         	call	_printf	;wreg free
  4725                           
  4726                           ;UI.c: 148: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4727  000500  0E00               	movlw	0
  4728  000502  0100               	movlb	0	; () banked
  4729  000504  6FD2               	movwf	UI@i_668& (0+255),b
  4730  000506                     l5268:
  4731                           
  4732                           ; BSR set to: 0
  4733  000506  0E63               	movlw	99
  4734  000508  0100               	movlb	0	; () banked
  4735  00050A  65D2               	cpfsgt	UI@i_668& (0+255),b
  4736  00050C  D001               	goto	l5272
  4737  00050E  D00C               	goto	l5276
  4738  000510                     l5272:
  4739                           
  4740                           ; BSR set to: 0
  4741  000510  0E68               	movlw	104
  4742  000512  0100               	movlb	0	; () banked
  4743  000514  6FC4               	movwf	??_UI& (0+255),b
  4744  000516  0EE4               	movlw	228
  4745  000518                     u4887:
  4746  000518  2EE8               	decfsz	wreg,f,c
  4747  00051A  D7FE               	bra	u4887
  4748  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  4749  00051E  D7FC               	bra	u4887
  4750  000520  F000               	nop	
  4751  000522  0100               	movlb	0	; () banked
  4752  000524  2BD2               	incf	UI@i_668& (0+255),f,b
  4753  000526  D7EF               	goto	l5268
  4754  000528                     l5276:
  4755                           
  4756                           ; BSR set to: 0
  4757  000528  0100               	movlb	0	; () banked
  4758  00052A  51F3               	movf	_logstate& (0+255),w,b
  4759  00052C  0100               	movlb	0	; () banked
  4760  00052E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4761  000530  B4D8               	btfsc	status,2,c
  4762  000532  0012               	return	
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4766                           
  4767                           ; BSR set to: 0
  4768                           
  4769                           ; BSR set to: 0
  4770  000534  0E00               	movlw	0
  4771  000536  0100               	movlb	0	; () banked
  4772  000538  6FD3               	movwf	UI@i_669& (0+255),b
  4773  00053A                     l5282:
  4774                           
  4775                           ; BSR set to: 0
  4776  00053A  0E63               	movlw	99
  4777  00053C  0100               	movlb	0	; () banked
  4778  00053E  65D3               	cpfsgt	UI@i_669& (0+255),b
  4779  000540  D001               	goto	l5286
  4780  000542  D00C               	goto	l5290
  4781  000544                     l5286:
  4782                           
  4783                           ; BSR set to: 0
  4784  000544  0E68               	movlw	104
  4785  000546  0100               	movlb	0	; () banked
  4786  000548  6FC4               	movwf	??_UI& (0+255),b
  4787  00054A  0EE4               	movlw	228
  4788  00054C                     u4897:
  4789  00054C  2EE8               	decfsz	wreg,f,c
  4790  00054E  D7FE               	bra	u4897
  4791  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  4792  000552  D7FC               	bra	u4897
  4793  000554  F000               	nop	
  4794  000556  0100               	movlb	0	; () banked
  4795  000558  2BD3               	incf	UI@i_669& (0+255),f,b
  4796  00055A  D7EF               	goto	l5282
  4797  00055C                     l5290:
  4798                           
  4799                           ; BSR set to: 0
  4800  00055C  0100               	movlb	0	; () banked
  4801  00055E  51F3               	movf	_logstate& (0+255),w,b
  4802  000560  0100               	movlb	0	; () banked
  4803  000562  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4804  000564  B4D8               	btfsc	status,2,c
  4805  000566  0012               	return	
  4806  000568                     l5294:
  4807  000568  0100               	movlb	0	; () banked
  4808  00056A  51F3               	movf	_logstate& (0+255),w,b
  4809  00056C  0100               	movlb	0	; () banked
  4810  00056E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4811  000570  B4D8               	btfsc	status,2,c
  4812  000572  0012               	return	
  4813  000574  D5E7               	goto	l5054
  4814  000576                     __end_of_UI:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon3	equ	0xFF0
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _printRTC *****************
  4836 ;; Defined at:
  4837 ;;		line 61 in file "RTC.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  i               2   66[BANK0 ] int 
  4842 ;;  INT_time       14   46[BANK0 ] int [7]
  4843 ;;  month           4   62[BANK0 ] unsigned char [4]
  4844 ;;  RTC_month       2   60[BANK0 ] int 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:       25 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:   10
  4861 ;; This function calls:
  4862 ;;		_getRTC
  4863 ;;		_lcdInst
  4864 ;;		_printf
  4865 ;;		_strcpy
  4866 ;; This function is called by:
  4867 ;;		_UI
  4868 ;;		_change_state_to_menu_start
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text19
  4873  000CC6                     __ptext19:
  4874                           	opt stack 0
  4875  000CC6                     _printRTC:
  4876                           	opt stack 18
  4877                           
  4878                           ;RTC.c: 62: getRTC();
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;incstack = 0
  4882  000CC6  EC13  F00F         	call	_getRTC	;wreg free
  4883                           
  4884                           ;RTC.c: 63: char month[] = "MMM";
  4885  000CCA  C0F8  F0BE         	movff	printRTC@F3185,printRTC@month
  4886  000CCE  C0F9  F0BF         	movff	printRTC@F3185+1,printRTC@month+1
  4887  000CD2  C0FA  F0C0         	movff	printRTC@F3185+2,printRTC@month+2
  4888  000CD6  C0FB  F0C1         	movff	printRTC@F3185+3,printRTC@month+3
  4889                           
  4890                           ;RTC.c: 64: int INT_time[7];
  4891                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  4892  000CDA  0E00               	movlw	0
  4893  000CDC  0100               	movlb	0	; () banked
  4894  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  4895  000CE0  0E00               	movlw	0
  4896  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  4897                           
  4898                           ; BSR set to: 0
  4899  000CE4  0100               	movlb	0	; () banked
  4900  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  4901  000CE8  D008               	goto	l4414
  4902  000CEA  0100               	movlb	0	; () banked
  4903  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  4904  000CEE  E146               	bnz	l896
  4905  000CF0  0E07               	movlw	7
  4906  000CF2  0100               	movlb	0	; () banked
  4907  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  4908  000CF6  B0D8               	btfsc	status,0,c
  4909  000CF8  D041               	goto	l896
  4910  000CFA                     l4414:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4914  000CFA  0ED4               	movlw	low _time
  4915  000CFC  0100               	movlb	0	; () banked
  4916  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  4917  000D00  6ED9               	movwf	fsr2l,c
  4918  000D02  0E00               	movlw	high _time
  4919  000D04  0100               	movlb	0	; () banked
  4920  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  4921  000D08  6EDA               	movwf	fsr2h,c
  4922  000D0A  50DF               	movf	indf2,w,c
  4923  000D0C  0100               	movlb	0	; () banked
  4924  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  4925  000D10  0100               	movlb	0	; () banked
  4926  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  4927  000D14  0E0F               	movlw	15
  4928  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  4929  000D18  0E0F               	movlw	15
  4930  000D1A  0100               	movlb	0	; () banked
  4931  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  4932  000D1E  0100               	movlb	0	; () banked
  4933  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  4934  000D22  0D0A               	mullw	10
  4935  000D24  0ED4               	movlw	low _time
  4936  000D26  0100               	movlb	0	; () banked
  4937  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  4938  000D2A  6ED9               	movwf	fsr2l,c
  4939  000D2C  0E00               	movlw	high _time
  4940  000D2E  0100               	movlb	0	; () banked
  4941  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  4942  000D32  6EDA               	movwf	fsr2h,c
  4943  000D34  50DF               	movf	indf2,w,c
  4944  000D36  0B0F               	andlw	15
  4945  000D38  0100               	movlb	0	; () banked
  4946  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  4947  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  4948  000D3E  50F3               	movf	prodl,w,c
  4949  000D40  0100               	movlb	0	; () banked
  4950  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  4951  000D44  50F4               	movf	prodh,w,c
  4952  000D46  0100               	movlb	0	; () banked
  4953  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  4954  000D4A  90D8               	bcf	status,0,c
  4955  000D4C  0100               	movlb	0	; () banked
  4956  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  4957  000D50  6ED9               	movwf	fsr2l,c
  4958  000D52  0100               	movlb	0	; () banked
  4959  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  4960  000D56  6EDA               	movwf	fsr2h,c
  4961  000D58  0EAE               	movlw	low printRTC@INT_time
  4962  000D5A  26D9               	addwf	fsr2l,f,c
  4963  000D5C  0E00               	movlw	high printRTC@INT_time
  4964  000D5E  22DA               	addwfc	fsr2h,f,c
  4965  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  4966  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  4967                           
  4968                           ; BSR set to: 0
  4969  000D68  0100               	movlb	0	; () banked
  4970  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  4971  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  4972                           
  4973                           ; BSR set to: 0
  4974  000D6E  0100               	movlb	0	; () banked
  4975  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  4976  000D72  D7C3               	goto	l4414
  4977  000D74  0100               	movlb	0	; () banked
  4978  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  4979  000D78  E101               	bnz	u3230
  4980  000D7A  D7BA               	goto	L1
  4981  000D7C                     u3230:
  4982  000D7C                     l896:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;RTC.c: 67: }
  4986                           ;RTC.c: 68: int RTC_month = INT_time[5];
  4987  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  4988  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  4989                           
  4990                           ;RTC.c: 69: switch(RTC_month){
  4991  000D84  D0B4               	goto	l4446
  4992  000D86                     l4420:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;RTC.c: 71: strcpy(month, "Jan");
  4996  000D86  0EBE               	movlw	low printRTC@month
  4997  000D88  0100               	movlb	0	; () banked
  4998  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  4999  000D8C  0E00               	movlw	high printRTC@month
  5000  000D8E  0100               	movlb	0	; () banked
  5001  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5002  000D92  0EDB               	movlw	low STR_36
  5003  000D94  0100               	movlb	0	; () banked
  5004  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5005  000D98  0EFF               	movlw	high STR_36
  5006  000D9A  0100               	movlb	0	; () banked
  5007  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5008  000D9E  ECFF  F011         	call	_strcpy	;wreg free
  5009                           
  5010                           ;RTC.c: 72: break;
  5011  000DA2  D0D4               	goto	l4448
  5012  000DA4                     l4422:
  5013                           
  5014                           ;RTC.c: 74: strcpy(month, "Feb");
  5015  000DA4  0EBE               	movlw	low printRTC@month
  5016  000DA6  0100               	movlb	0	; () banked
  5017  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5018  000DAA  0E00               	movlw	high printRTC@month
  5019  000DAC  0100               	movlb	0	; () banked
  5020  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5021  000DB0  0ECB               	movlw	low STR_37
  5022  000DB2  0100               	movlb	0	; () banked
  5023  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5024  000DB6  0EFF               	movlw	high STR_37
  5025  000DB8  0100               	movlb	0	; () banked
  5026  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5027  000DBC  ECFF  F011         	call	_strcpy	;wreg free
  5028                           
  5029                           ;RTC.c: 75: break;
  5030  000DC0  D0C5               	goto	l4448
  5031  000DC2                     l4424:
  5032                           
  5033                           ;RTC.c: 77: strcpy(month, "Mar");
  5034  000DC2  0EBE               	movlw	low printRTC@month
  5035  000DC4  0100               	movlb	0	; () banked
  5036  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5037  000DC8  0E00               	movlw	high printRTC@month
  5038  000DCA  0100               	movlb	0	; () banked
  5039  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5040  000DCE  0EE7               	movlw	low STR_38
  5041  000DD0  0100               	movlb	0	; () banked
  5042  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5043  000DD4  0EFF               	movlw	high STR_38
  5044  000DD6  0100               	movlb	0	; () banked
  5045  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5046  000DDA  ECFF  F011         	call	_strcpy	;wreg free
  5047                           
  5048                           ;RTC.c: 78: break;
  5049  000DDE  D0B6               	goto	l4448
  5050  000DE0                     l4426:
  5051                           
  5052                           ;RTC.c: 80: strcpy(month, "Apr");
  5053  000DE0  0EBE               	movlw	low printRTC@month
  5054  000DE2  0100               	movlb	0	; () banked
  5055  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5056  000DE6  0E00               	movlw	high printRTC@month
  5057  000DE8  0100               	movlb	0	; () banked
  5058  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5059  000DEC  0EEB               	movlw	low STR_39
  5060  000DEE  0100               	movlb	0	; () banked
  5061  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5062  000DF2  0EFF               	movlw	high STR_39
  5063  000DF4  0100               	movlb	0	; () banked
  5064  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5065  000DF8  ECFF  F011         	call	_strcpy	;wreg free
  5066                           
  5067                           ;RTC.c: 81: break;
  5068  000DFC  D0A7               	goto	l4448
  5069  000DFE                     l4428:
  5070                           
  5071                           ;RTC.c: 83: strcpy(month, "May");
  5072  000DFE  0EBE               	movlw	low printRTC@month
  5073  000E00  0100               	movlb	0	; () banked
  5074  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5075  000E04  0E00               	movlw	high printRTC@month
  5076  000E06  0100               	movlb	0	; () banked
  5077  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5078  000E0A  0EF7               	movlw	low STR_40
  5079  000E0C  0100               	movlb	0	; () banked
  5080  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5081  000E10  0EFF               	movlw	high STR_40
  5082  000E12  0100               	movlb	0	; () banked
  5083  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5084  000E16  ECFF  F011         	call	_strcpy	;wreg free
  5085                           
  5086                           ;RTC.c: 84: break;
  5087  000E1A  D098               	goto	l4448
  5088  000E1C                     l4430:
  5089                           
  5090                           ;RTC.c: 86: strcpy(month, "Jun");
  5091  000E1C  0EBE               	movlw	low printRTC@month
  5092  000E1E  0100               	movlb	0	; () banked
  5093  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5094  000E22  0E00               	movlw	high printRTC@month
  5095  000E24  0100               	movlb	0	; () banked
  5096  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5097  000E28  0EDF               	movlw	low STR_41
  5098  000E2A  0100               	movlb	0	; () banked
  5099  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5100  000E2E  0EFF               	movlw	high STR_41
  5101  000E30  0100               	movlb	0	; () banked
  5102  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5103  000E34  ECFF  F011         	call	_strcpy	;wreg free
  5104                           
  5105                           ;RTC.c: 87: break;
  5106  000E38  D089               	goto	l4448
  5107  000E3A                     l4432:
  5108                           
  5109                           ;RTC.c: 89: strcpy(month, "Jul");
  5110  000E3A  0EBE               	movlw	low printRTC@month
  5111  000E3C  0100               	movlb	0	; () banked
  5112  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5113  000E40  0E00               	movlw	high printRTC@month
  5114  000E42  0100               	movlb	0	; () banked
  5115  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5116  000E46  0ED7               	movlw	low STR_42
  5117  000E48  0100               	movlb	0	; () banked
  5118  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5119  000E4C  0EFF               	movlw	high STR_42
  5120  000E4E  0100               	movlb	0	; () banked
  5121  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5122  000E52  ECFF  F011         	call	_strcpy	;wreg free
  5123                           
  5124                           ;RTC.c: 90: break;
  5125  000E56  D07A               	goto	l4448
  5126  000E58                     l4434:
  5127                           
  5128                           ;RTC.c: 92: strcpy(month, "Aug");
  5129  000E58  0EBE               	movlw	low printRTC@month
  5130  000E5A  0100               	movlb	0	; () banked
  5131  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5132  000E5E  0E00               	movlw	high printRTC@month
  5133  000E60  0100               	movlb	0	; () banked
  5134  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5135  000E64  0ED3               	movlw	low STR_43
  5136  000E66  0100               	movlb	0	; () banked
  5137  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5138  000E6A  0EFF               	movlw	high STR_43
  5139  000E6C  0100               	movlb	0	; () banked
  5140  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5141  000E70  ECFF  F011         	call	_strcpy	;wreg free
  5142                           
  5143                           ;RTC.c: 93: break;
  5144  000E74  D06B               	goto	l4448
  5145  000E76                     l4436:
  5146                           
  5147                           ;RTC.c: 95: strcpy(month, "Sep");
  5148  000E76  0EBE               	movlw	low printRTC@month
  5149  000E78  0100               	movlb	0	; () banked
  5150  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5151  000E7C  0E00               	movlw	high printRTC@month
  5152  000E7E  0100               	movlb	0	; () banked
  5153  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5154  000E82  0EE3               	movlw	low STR_44
  5155  000E84  0100               	movlb	0	; () banked
  5156  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5157  000E88  0EFF               	movlw	high STR_44
  5158  000E8A  0100               	movlb	0	; () banked
  5159  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5160  000E8E  ECFF  F011         	call	_strcpy	;wreg free
  5161                           
  5162                           ;RTC.c: 96: break;
  5163  000E92  D05C               	goto	l4448
  5164  000E94                     l4438:
  5165                           
  5166                           ;RTC.c: 98: strcpy(month, "Oct");
  5167  000E94  0EBE               	movlw	low printRTC@month
  5168  000E96  0100               	movlb	0	; () banked
  5169  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5170  000E9A  0E00               	movlw	high printRTC@month
  5171  000E9C  0100               	movlb	0	; () banked
  5172  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5173  000EA0  0EEF               	movlw	low STR_45
  5174  000EA2  0100               	movlb	0	; () banked
  5175  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5176  000EA6  0EFF               	movlw	high STR_45
  5177  000EA8  0100               	movlb	0	; () banked
  5178  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5179  000EAC  ECFF  F011         	call	_strcpy	;wreg free
  5180                           
  5181                           ;RTC.c: 99: break;
  5182  000EB0  D04D               	goto	l4448
  5183  000EB2                     l4440:
  5184                           
  5185                           ;RTC.c: 101: strcpy(month, "Nov");
  5186  000EB2  0EBE               	movlw	low printRTC@month
  5187  000EB4  0100               	movlb	0	; () banked
  5188  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5189  000EB8  0E00               	movlw	high printRTC@month
  5190  000EBA  0100               	movlb	0	; () banked
  5191  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5192  000EBE  0EF3               	movlw	low STR_46
  5193  000EC0  0100               	movlb	0	; () banked
  5194  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5195  000EC4  0EFF               	movlw	high STR_46
  5196  000EC6  0100               	movlb	0	; () banked
  5197  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5198  000ECA  ECFF  F011         	call	_strcpy	;wreg free
  5199                           
  5200                           ;RTC.c: 102: break;
  5201  000ECE  D03E               	goto	l4448
  5202  000ED0                     l4442:
  5203                           
  5204                           ;RTC.c: 104: strcpy(month, "Dec");
  5205  000ED0  0EBE               	movlw	low printRTC@month
  5206  000ED2  0100               	movlb	0	; () banked
  5207  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5208  000ED6  0E00               	movlw	high printRTC@month
  5209  000ED8  0100               	movlb	0	; () banked
  5210  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5211  000EDC  0ECF               	movlw	low STR_47
  5212  000EDE  0100               	movlb	0	; () banked
  5213  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5214  000EE2  0EFF               	movlw	high STR_47
  5215  000EE4  0100               	movlb	0	; () banked
  5216  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5217  000EE8  ECFF  F011         	call	_strcpy	;wreg free
  5218                           
  5219                           ;RTC.c: 106: }
  5220                           
  5221                           ;RTC.c: 105: break;
  5222  000EEC  D02F               	goto	l4448
  5223  000EEE                     l4446:
  5224  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5225  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5226                           
  5227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5228                           ; Switch size 1, requested type "space"
  5229                           ; Number of cases is 1, Range of values is 0 to 0
  5230                           ; switch strategies available:
  5231                           ; Name         Instructions Cycles
  5232                           ; simple_byte            4     3 (average)
  5233                           ;	Chosen strategy is simple_byte
  5234  000EF6  0100               	movlb	0	; () banked
  5235  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5236  000EFA  0A00               	xorlw	0	; case 0
  5237  000EFC  A4D8               	btfss	status,2,c
  5238  000EFE  D026               	goto	l4448
  5239                           
  5240                           ; BSR set to: 0
  5241                           ; Switch size 1, requested type "space"
  5242                           ; Number of cases is 12, Range of values is 1 to 12
  5243                           ; switch strategies available:
  5244                           ; Name         Instructions Cycles
  5245                           ; simple_byte           37    19 (average)
  5246                           ;	Chosen strategy is simple_byte
  5247  000F00  0100               	movlb	0	; () banked
  5248  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5249  000F04  0A01               	xorlw	1	; case 1
  5250  000F06  B4D8               	btfsc	status,2,c
  5251  000F08  D73E               	goto	l4420
  5252  000F0A  0A03               	xorlw	3	; case 2
  5253  000F0C  B4D8               	btfsc	status,2,c
  5254  000F0E  D74A               	goto	l4422
  5255  000F10  0A01               	xorlw	1	; case 3
  5256  000F12  B4D8               	btfsc	status,2,c
  5257  000F14  D756               	goto	l4424
  5258  000F16  0A07               	xorlw	7	; case 4
  5259  000F18  B4D8               	btfsc	status,2,c
  5260  000F1A  D762               	goto	l4426
  5261  000F1C  0A01               	xorlw	1	; case 5
  5262  000F1E  B4D8               	btfsc	status,2,c
  5263  000F20  D76E               	goto	l4428
  5264  000F22  0A03               	xorlw	3	; case 6
  5265  000F24  B4D8               	btfsc	status,2,c
  5266  000F26  D77A               	goto	l4430
  5267  000F28  0A01               	xorlw	1	; case 7
  5268  000F2A  B4D8               	btfsc	status,2,c
  5269  000F2C  D786               	goto	l4432
  5270  000F2E  0A0F               	xorlw	15	; case 8
  5271  000F30  B4D8               	btfsc	status,2,c
  5272  000F32  D792               	goto	l4434
  5273  000F34  0A01               	xorlw	1	; case 9
  5274  000F36  B4D8               	btfsc	status,2,c
  5275  000F38  D79E               	goto	l4436
  5276  000F3A  0A03               	xorlw	3	; case 10
  5277  000F3C  B4D8               	btfsc	status,2,c
  5278  000F3E  D7AA               	goto	l4438
  5279  000F40  0A01               	xorlw	1	; case 11
  5280  000F42  B4D8               	btfsc	status,2,c
  5281  000F44  D7B6               	goto	l4440
  5282  000F46  0A07               	xorlw	7	; case 12
  5283  000F48  B4D8               	btfsc	status,2,c
  5284  000F4A  D7C2               	goto	l4442
  5285  000F4C                     l4448:
  5286                           
  5287                           ;RTC.c: 107: lcdInst(0b10000000);;
  5288  000F4C  0E80               	movlw	128
  5289  000F4E  EC47  F014         	call	_lcdInst
  5290                           
  5291                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5292  000F52  0ED0               	movlw	low STR_48
  5293  000F54  0100               	movlb	0	; () banked
  5294  000F56  6F8E               	movwf	printf@f& (0+255),b
  5295  000F58  0EFD               	movlw	high STR_48
  5296  000F5A  0100               	movlb	0	; () banked
  5297  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5298  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5299  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5300  000F66  0EBE               	movlw	low printRTC@month
  5301  000F68  0100               	movlb	0	; () banked
  5302  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5303  000F6C  0E00               	movlw	high printRTC@month
  5304  000F6E  0100               	movlb	0	; () banked
  5305  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5306  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5307  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5308  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5309  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5310  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5311  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5312  000F8A  ECBB  F002         	call	_printf	;wreg free
  5313  000F8E  0012               	return		;funcret
  5314  000F90                     __end_of_printRTC:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           intcon3	equ	0xFF0
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           postdec1	equ	0xFE5
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _strcpy *****************
  5336 ;; Defined at:
  5337 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5340 ;;		 -> printRTC@month(4), 
  5341 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5342 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5343 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5344 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5347 ;;		 -> printRTC@month(4), 
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  2    0[BANK0 ] PTR unsigned char 
  5350 ;; Registers used:
  5351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;Total ram usage:        6 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    7
  5364 ;; This function calls:
  5365 ;;		Nothing
  5366 ;; This function is called by:
  5367 ;;		_printRTC
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           	psect	text20
  5372  0023FE                     __ptext20:
  5373                           	opt stack 0
  5374  0023FE                     _strcpy:
  5375                           	opt stack 20
  5376                           
  5377                           ;incstack = 0
  5378  0023FE  C080  F084         	movff	strcpy@to,strcpy@cp
  5379  002402  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5380  002406  D006               	goto	l4218
  5381  002408                     l4216:
  5382  002408  0100               	movlb	0	; () banked
  5383  00240A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5384  00240C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5385  00240E  0100               	movlb	0	; () banked
  5386  002410  4B82               	infsnz	strcpy@from& (0+255),f,b
  5387  002412  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5388  002414                     l4218:
  5389  002414  C082  FFF6         	movff	strcpy@from,tblptrl
  5390  002418  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5391  00241C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5392  00241C  6AF8               	clrf	tblptru,c
  5393  00241E                     	endif
  5394  00241E                     	if	0	;tblptru may be non-zero
  5395  00241E                     	endif
  5396  00241E  C084  FFD9         	movff	strcpy@cp,fsr2l
  5397  002422  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5398  002426  0008               	tblrd		*
  5399  002428  CFF5 FFDF          	movff	tablat,indf2
  5400  00242C  50DF               	movf	indf2,w,c
  5401  00242E  B4D8               	btfsc	status,2,c
  5402  002430  0012               	return	
  5403  002432  D7EA               	goto	l4216
  5404  002434                     __end_of_strcpy:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           intcon	equ	0xFF2
  5413                           intcon3	equ	0xFF0
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           postdec1	equ	0xFE5
  5417                           fsr1l	equ	0xFE1
  5418                           indf2	equ	0xFDF
  5419                           postinc2	equ	0xFDE
  5420                           postdec2	equ	0xFDD
  5421                           fsr2h	equ	0xFDA
  5422                           fsr2l	equ	0xFD9
  5423                           status	equ	0xFD8
  5424                           
  5425 ;; *************** function _getRTC *****************
  5426 ;; Defined at:
  5427 ;;		line 42 in file "RTC.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  i               2    3[BANK0 ] int 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5445 ;;Total ram usage:        2 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    9
  5448 ;; This function calls:
  5449 ;;		_I2C_Master_Read
  5450 ;;		_I2C_Master_Start
  5451 ;;		_I2C_Master_Stop
  5452 ;;		_I2C_Master_Write
  5453 ;; This function is called by:
  5454 ;;		_printRTC
  5455 ;;		_initSortTimer
  5456 ;;		_getIR
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text21
  5461  001E26                     __ptext21:
  5462                           	opt stack 0
  5463  001E26                     _getRTC:
  5464                           	opt stack 18
  5465                           
  5466                           ;RTC.c: 46: I2C_Master_Start();
  5467                           
  5468                           ;incstack = 0
  5469  001E26  EC6D  F014         	call	_I2C_Master_Start	;wreg free
  5470                           
  5471                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  5472  001E2A  0E00               	movlw	0
  5473  001E2C  0100               	movlb	0	; () banked
  5474  001E2E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5475  001E30  0ED0               	movlw	208
  5476  001E32  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5477  001E34  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  5478                           
  5479                           ;RTC.c: 48: I2C_Master_Write(0x00);
  5480  001E38  0E00               	movlw	0
  5481  001E3A  0100               	movlb	0	; () banked
  5482  001E3C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5483  001E3E  0E00               	movlw	0
  5484  001E40  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5485  001E42  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  5486                           
  5487                           ;RTC.c: 49: I2C_Master_Stop();
  5488  001E46  EC69  F014         	call	_I2C_Master_Stop	;wreg free
  5489                           
  5490                           ;RTC.c: 52: I2C_Master_Start();
  5491  001E4A  EC6D  F014         	call	_I2C_Master_Start	;wreg free
  5492                           
  5493                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  5494  001E4E  0E00               	movlw	0
  5495  001E50  0100               	movlb	0	; () banked
  5496  001E52  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5497  001E54  0ED1               	movlw	209
  5498  001E56  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5499  001E58  EC5B  F014         	call	_I2C_Master_Write	;wreg free
  5500                           
  5501                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  5502  001E5C  0E00               	movlw	0
  5503  001E5E  0100               	movlb	0	; () banked
  5504  001E60  6F84               	movwf	(getRTC@i+1)& (0+255),b
  5505  001E62  0E00               	movlw	0
  5506  001E64  6F83               	movwf	getRTC@i& (0+255),b
  5507  001E66                     l4202:
  5508                           
  5509                           ; BSR set to: 0
  5510  001E66  0100               	movlb	0	; () banked
  5511  001E68  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  5512  001E6A  D008               	goto	l4206
  5513  001E6C  0100               	movlb	0	; () banked
  5514  001E6E  5184               	movf	(getRTC@i+1)& (0+255),w,b
  5515  001E70  E115               	bnz	l4212
  5516  001E72  0E06               	movlw	6
  5517  001E74  0100               	movlb	0	; () banked
  5518  001E76  5D83               	subwf	getRTC@i& (0+255),w,b
  5519  001E78  B0D8               	btfsc	status,0,c
  5520  001E7A  D010               	goto	l4212
  5521  001E7C                     l4206:
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  5525  001E7C  0ED4               	movlw	low _time
  5526  001E7E  0100               	movlb	0	; () banked
  5527  001E80  2583               	addwf	getRTC@i& (0+255),w,b
  5528  001E82  6ED9               	movwf	fsr2l,c
  5529  001E84  0E00               	movlw	high _time
  5530  001E86  0100               	movlb	0	; () banked
  5531  001E88  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  5532  001E8A  6EDA               	movwf	fsr2h,c
  5533  001E8C  0E01               	movlw	1
  5534  001E8E  EC3D  F013         	call	_I2C_Master_Read
  5535  001E92  6EDF               	movwf	indf2,c
  5536  001E94  0100               	movlb	0	; () banked
  5537  001E96  4B83               	infsnz	getRTC@i& (0+255),f,b
  5538  001E98  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  5539  001E9A  D7E5               	goto	l4202
  5540  001E9C                     l4212:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;RTC.c: 56: }
  5544                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  5545  001E9C  0E00               	movlw	0
  5546  001E9E  EC3D  F013         	call	_I2C_Master_Read
  5547  001EA2  0100               	movlb	0	; () banked
  5548  001EA4  6FDA               	movwf	(_time+6)& (0+255),b
  5549                           
  5550                           ;RTC.c: 58: I2C_Master_Stop();
  5551  001EA6  EC69  F014         	call	_I2C_Master_Stop	;wreg free
  5552  001EAA  0012               	return		;funcret
  5553  001EAC                     __end_of_getRTC:
  5554                           	opt stack 0
  5555                           tblptru	equ	0xFF8
  5556                           tblptrh	equ	0xFF7
  5557                           tblptrl	equ	0xFF6
  5558                           tablat	equ	0xFF5
  5559                           prodh	equ	0xFF4
  5560                           prodl	equ	0xFF3
  5561                           intcon	equ	0xFF2
  5562                           intcon3	equ	0xFF0
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           postdec1	equ	0xFE5
  5566                           fsr1l	equ	0xFE1
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           postdec2	equ	0xFDD
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function _I2C_Master_Write *****************
  5575 ;; Defined at:
  5576 ;;		line 47 in file "I2C.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  d               2    1[BANK0 ] unsigned int 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;		None
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5590 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    8
  5597 ;; This function calls:
  5598 ;;		_I2C_Master_Wait
  5599 ;; This function is called by:
  5600 ;;		_loadRTC
  5601 ;;		_getRTC
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text22
  5606  0028B6                     __ptext22:
  5607                           	opt stack 0
  5608  0028B6                     _I2C_Master_Write:
  5609                           	opt stack 18
  5610                           
  5611                           ;I2C.c: 49: I2C_Master_Wait();
  5612                           
  5613                           ;incstack = 0
  5614  0028B6  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5615                           
  5616                           ;I2C.c: 50: SSPBUF = d;
  5617  0028BA  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5618  0028BE  0012               	return		;funcret
  5619  0028C0                     __end_of_I2C_Master_Write:
  5620                           	opt stack 0
  5621                           tblptru	equ	0xFF8
  5622                           tblptrh	equ	0xFF7
  5623                           tblptrl	equ	0xFF6
  5624                           tablat	equ	0xFF5
  5625                           prodh	equ	0xFF4
  5626                           prodl	equ	0xFF3
  5627                           intcon	equ	0xFF2
  5628                           intcon3	equ	0xFF0
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           postdec1	equ	0xFE5
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           postdec2	equ	0xFDD
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function _I2C_Master_Stop *****************
  5641 ;; Defined at:
  5642 ;;		line 41 in file "I2C.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  1    wreg      void 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    8
  5663 ;; This function calls:
  5664 ;;		_I2C_Master_Wait
  5665 ;; This function is called by:
  5666 ;;		_loadRTC
  5667 ;;		_getRTC
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text23
  5672  0028D2                     __ptext23:
  5673                           	opt stack 0
  5674  0028D2                     _I2C_Master_Stop:
  5675                           	opt stack 18
  5676                           
  5677                           ;I2C.c: 43: I2C_Master_Wait();
  5678                           
  5679                           ;incstack = 0
  5680  0028D2  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5681                           
  5682                           ;I2C.c: 44: PEN = 1;
  5683  0028D6  84C5               	bsf	4037,2,c	;volatile
  5684  0028D8  0012               	return		;funcret
  5685  0028DA                     __end_of_I2C_Master_Stop:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           intcon3	equ	0xFF0
  5695                           postinc0	equ	0xFEE
  5696                           wreg	equ	0xFE8
  5697                           postdec1	equ	0xFE5
  5698                           fsr1l	equ	0xFE1
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           fsr2h	equ	0xFDA
  5703                           fsr2l	equ	0xFD9
  5704                           status	equ	0xFD8
  5705                           
  5706 ;; *************** function _I2C_Master_Start *****************
  5707 ;; Defined at:
  5708 ;;		line 29 in file "I2C.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;		None
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;Total ram usage:        0 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    8
  5729 ;; This function calls:
  5730 ;;		_I2C_Master_Wait
  5731 ;; This function is called by:
  5732 ;;		_loadRTC
  5733 ;;		_getRTC
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text24
  5738  0028DA                     __ptext24:
  5739                           	opt stack 0
  5740  0028DA                     _I2C_Master_Start:
  5741                           	opt stack 18
  5742                           
  5743                           ;I2C.c: 31: I2C_Master_Wait();
  5744                           
  5745                           ;incstack = 0
  5746  0028DA  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5747                           
  5748                           ;I2C.c: 32: SEN = 1;
  5749  0028DE  80C5               	bsf	4037,0,c	;volatile
  5750  0028E0  0012               	return		;funcret
  5751  0028E2                     __end_of_I2C_Master_Start:
  5752                           	opt stack 0
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           intcon	equ	0xFF2
  5760                           intcon3	equ	0xFF0
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           postinc2	equ	0xFDE
  5767                           postdec2	equ	0xFDD
  5768                           fsr2h	equ	0xFDA
  5769                           fsr2l	equ	0xFD9
  5770                           status	equ	0xFD8
  5771                           
  5772 ;; *************** function _I2C_Master_Read *****************
  5773 ;; Defined at:
  5774 ;;		line 53 in file "I2C.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  a               1    wreg     unsigned char 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  a               1    1[BANK0 ] unsigned char 
  5779 ;;  temp            1    2[BANK0 ] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      unsigned char 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        2 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    8
  5796 ;; This function calls:
  5797 ;;		_I2C_Master_Wait
  5798 ;; This function is called by:
  5799 ;;		_getRTC
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text25
  5804  00267A                     __ptext25:
  5805                           	opt stack 0
  5806  00267A                     _I2C_Master_Read:
  5807                           	opt stack 18
  5808                           
  5809                           ;incstack = 0
  5810                           ;I2C_Master_Read@a stored from wreg
  5811  00267A  0100               	movlb	0	; () banked
  5812  00267C  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  5813                           
  5814                           ;I2C.c: 55: unsigned char temp;
  5815                           ;I2C.c: 56: I2C_Master_Wait();
  5816  00267E  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5817                           
  5818                           ;I2C.c: 57: RCEN = 1;
  5819  002682  86C5               	bsf	4037,3,c	;volatile
  5820                           
  5821                           ;I2C.c: 58: I2C_Master_Wait();
  5822  002684  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5823                           
  5824                           ;I2C.c: 59: temp = SSPBUF;
  5825  002688  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  5826                           
  5827                           ;I2C.c: 60: I2C_Master_Wait();
  5828  00268C  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5829                           
  5830                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5831  002690  0100               	movlb	0	; () banked
  5832  002692  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  5833  002694  0100               	movlb	0	; () banked
  5834  002696  A4D8               	btfss	status,2,c
  5835  002698  D002               	goto	u2400
  5836  00269A  8AC5               	bsf	4037,5,c	;volatile
  5837  00269C  D001               	goto	l3914
  5838  00269E                     u2400:
  5839  00269E  9AC5               	bcf	4037,5,c	;volatile
  5840  0026A0                     l3914:
  5841                           
  5842                           ;I2C.c: 62: ACKEN = 1;
  5843  0026A0  88C5               	bsf	4037,4,c	;volatile
  5844                           
  5845                           ;I2C.c: 63: return temp;
  5846  0026A2  0100               	movlb	0	; () banked
  5847  0026A4  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  5848  0026A6  0012               	return	
  5849  0026A8                     __end_of_I2C_Master_Read:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           intcon3	equ	0xFF0
  5859                           postinc0	equ	0xFEE
  5860                           wreg	equ	0xFE8
  5861                           postdec1	equ	0xFE5
  5862                           fsr1l	equ	0xFE1
  5863                           indf2	equ	0xFDF
  5864                           postinc2	equ	0xFDE
  5865                           postdec2	equ	0xFDD
  5866                           fsr2h	equ	0xFDA
  5867                           fsr2l	equ	0xFD9
  5868                           status	equ	0xFD8
  5869                           
  5870 ;; *************** function _I2C_Master_Wait *****************
  5871 ;; Defined at:
  5872 ;;		line 24 in file "I2C.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;Total ram usage:        1 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    7
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_I2C_Master_Start
  5897 ;;		_I2C_Master_Stop
  5898 ;;		_I2C_Master_Write
  5899 ;;		_I2C_Master_Read
  5900 ;;		_I2C_Master_RepeatedStart
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text26
  5905  002832                     __ptext26:
  5906                           	opt stack 0
  5907  002832                     _I2C_Master_Wait:
  5908                           	opt stack 18
  5909  002832                     l144:
  5910  002832  B4C7               	btfsc	4039,2,c	;volatile
  5911  002834  D7FE               	goto	l144
  5912  002836  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  5913  00283A  0E1F               	movlw	31
  5914  00283C  0100               	movlb	0	; () banked
  5915  00283E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5916  002840  B4D8               	btfsc	status,2,c
  5917  002842  0012               	return	
  5918  002844  D7F6               	goto	l144
  5919  002846                     __end_of_I2C_Master_Wait:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           intcon	equ	0xFF2
  5928                           intcon3	equ	0xFF0
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           postdec1	equ	0xFE5
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _change_state_to_menu_22 *****************
  5941 ;; Defined at:
  5942 ;;		line 439 in file "UI.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:   10
  5963 ;; This function calls:
  5964 ;;		_lcdInst
  5965 ;;		_printf
  5966 ;; This function is called by:
  5967 ;;		_UI
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text27
  5972  00238E                     __ptext27:
  5973                           	opt stack 0
  5974  00238E                     _change_state_to_menu_22:
  5975                           	opt stack 19
  5976                           
  5977                           ;UI.c: 440: cur_state = 22;
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;incstack = 0
  5981  00238E  0E00               	movlw	0
  5982  002390  0100               	movlb	0	; () banked
  5983  002392  6FE6               	movwf	(_cur_state+1)& (0+255),b
  5984  002394  0E16               	movlw	22
  5985  002396  6FE5               	movwf	_cur_state& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;UI.c: 442: lcdInst(0b10000000);;
  5989  002398  0E80               	movlw	128
  5990  00239A  EC47  F014         	call	_lcdInst
  5991                           
  5992                           ;UI.c: 443: printf("2. SORT        <");
  5993  00239E  0E64               	movlw	low STR_19
  5994  0023A0  0100               	movlb	0	; () banked
  5995  0023A2  6F8E               	movwf	printf@f& (0+255),b
  5996  0023A4  0EFF               	movlw	high STR_19
  5997  0023A6  0100               	movlb	0	; () banked
  5998  0023A8  6F8F               	movwf	(printf@f+1)& (0+255),b
  5999  0023AA  ECBB  F002         	call	_printf	;wreg free
  6000                           
  6001                           ;UI.c: 444: lcdInst(0b11000000);;
  6002  0023AE  0EC0               	movlw	192
  6003  0023B0  EC47  F014         	call	_lcdInst
  6004                           
  6005                           ;UI.c: 445: printf("3. LOGS         ");
  6006  0023B4  0E65               	movlw	low STR_21
  6007  0023B6  0100               	movlb	0	; () banked
  6008  0023B8  6F8E               	movwf	printf@f& (0+255),b
  6009  0023BA  0EFE               	movlw	high STR_21
  6010  0023BC  0100               	movlb	0	; () banked
  6011  0023BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6012  0023C0  ECBB  F002         	call	_printf	;wreg free
  6013  0023C4  0012               	return		;funcret
  6014  0023C6                     __end_of_change_state_to_menu_22:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           intcon3	equ	0xFF0
  6024                           postinc0	equ	0xFEE
  6025                           wreg	equ	0xFE8
  6026                           postdec1	equ	0xFE5
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _change_state_to_menu_12 *****************
  6036 ;; Defined at:
  6037 ;;		line 431 in file "UI.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;		None
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        0 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:   10
  6058 ;; This function calls:
  6059 ;;		_lcdInst
  6060 ;;		_printf
  6061 ;; This function is called by:
  6062 ;;		_UI
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text28
  6067  0023C6                     __ptext28:
  6068                           	opt stack 0
  6069  0023C6                     _change_state_to_menu_12:
  6070                           	opt stack 19
  6071                           
  6072                           ;UI.c: 432: cur_state = 12;
  6073                           
  6074                           ;incstack = 0
  6075  0023C6  0E00               	movlw	0
  6076  0023C8  0100               	movlb	0	; () banked
  6077  0023CA  6FE6               	movwf	(_cur_state+1)& (0+255),b
  6078  0023CC  0E0C               	movlw	12
  6079  0023CE  6FE5               	movwf	_cur_state& (0+255),b
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;UI.c: 434: lcdInst(0b10000000);;
  6083  0023D0  0E80               	movlw	128
  6084  0023D2  EC47  F014         	call	_lcdInst
  6085                           
  6086                           ;UI.c: 435: printf("1. DATE/TIME    ");
  6087  0023D6  0E87               	movlw	low STR_18
  6088  0023D8  0100               	movlb	0	; () banked
  6089  0023DA  6F8E               	movwf	printf@f& (0+255),b
  6090  0023DC  0EFE               	movlw	high STR_18
  6091  0023DE  0100               	movlb	0	; () banked
  6092  0023E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  6093  0023E2  ECBB  F002         	call	_printf	;wreg free
  6094                           
  6095                           ;UI.c: 436: lcdInst(0b11000000);;
  6096  0023E6  0EC0               	movlw	192
  6097  0023E8  EC47  F014         	call	_lcdInst
  6098                           
  6099                           ;UI.c: 437: printf("2. SORT        <");
  6100  0023EC  0E64               	movlw	low STR_19
  6101  0023EE  0100               	movlb	0	; () banked
  6102  0023F0  6F8E               	movwf	printf@f& (0+255),b
  6103  0023F2  0EFF               	movlw	high STR_19
  6104  0023F4  0100               	movlb	0	; () banked
  6105  0023F6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6106  0023F8  ECBB  F002         	call	_printf	;wreg free
  6107  0023FC  0012               	return		;funcret
  6108  0023FE                     __end_of_change_state_to_menu_12:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon3	equ	0xFF0
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function _printf *****************
  6130 ;; Defined at:
  6131 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6134 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6135 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6136 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6137 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6138 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6139 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6140 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6141 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6142 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6143 ;;		 -> STR_2(21), STR_1(17), 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  tmpval          4    0        struct .
  6146 ;;  width           2   41[BANK0 ] int 
  6147 ;;  len             2   37[BANK0 ] unsigned int 
  6148 ;;  val             2   35[BANK0 ] unsigned int 
  6149 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6150 ;;		 -> STR_51(7), printRTC@month(4), 
  6151 ;;  ap              2   31[BANK0 ] PTR void [1]
  6152 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6153 ;;  c               1   40[BANK0 ] char 
  6154 ;;  flag            1   39[BANK0 ] unsigned char 
  6155 ;;  prec            1   30[BANK0 ] char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  2   14[BANK0 ] int 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6165 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;Total ram usage:       29 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    9
  6172 ;; This function calls:
  6173 ;;		___lwdiv
  6174 ;;		___lwmod
  6175 ;;		___wmul
  6176 ;;		_isdigit
  6177 ;;		_putch
  6178 ;; This function is called by:
  6179 ;;		_UI
  6180 ;;		_change_state_to_menu_start
  6181 ;;		_change_state_to_menu_12
  6182 ;;		_change_state_to_menu_22
  6183 ;;		_printRTC
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text29
  6188  000576                     __ptext29:
  6189                           	opt stack 0
  6190  000576                     _printf:
  6191                           	opt stack 19
  6192                           
  6193                           ;doprnt.c: 466: va_list ap;
  6194                           ;doprnt.c: 499: signed char c;
  6195                           ;doprnt.c: 501: int width;
  6196                           ;doprnt.c: 506: signed char prec;
  6197                           ;doprnt.c: 508: unsigned char flag;
  6198                           ;doprnt.c: 523: union {
  6199                           ;doprnt.c: 524: unsigned long vd;
  6200                           ;doprnt.c: 525: double integ;
  6201                           ;doprnt.c: 526: } tmpval;
  6202                           ;doprnt.c: 528: unsigned int val;
  6203                           ;doprnt.c: 529: unsigned len;
  6204                           ;doprnt.c: 530: const char * cp;
  6205                           ;doprnt.c: 533: *ap = __va_start();
  6206                           
  6207                           ;incstack = 0
  6208  000576  0E90               	movlw	low (?_printf+2)
  6209  000578  0100               	movlb	0	; () banked
  6210  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6211  00057C  0E00               	movlw	high (?_printf+2)
  6212  00057E  0100               	movlb	0	; () banked
  6213  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6214                           
  6215                           ;doprnt.c: 536: while(c = *f++) {
  6216  000582  D1EE               	goto	l4196
  6217  000584                     l4072:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;doprnt.c: 538: if(c != '%')
  6221  000584  0E25               	movlw	37
  6222  000586  0100               	movlb	0	; () banked
  6223  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6224  00058A  B4D8               	btfsc	status,2,c
  6225  00058C  D005               	goto	l4076
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;doprnt.c: 540: {
  6229                           ;doprnt.c: 541: (putch(c) );
  6230  00058E  0100               	movlb	0	; () banked
  6231  000590  51A8               	movf	printf@c& (0+255),w,b
  6232  000592  EC3F  F014         	call	_putch
  6233                           
  6234                           ;doprnt.c: 542: continue;
  6235  000596  D1E4               	goto	l4196
  6236  000598                     l4076:
  6237                           
  6238                           ;doprnt.c: 543: }
  6239                           ;doprnt.c: 546: width = 0;
  6240  000598  0E00               	movlw	0
  6241  00059A  0100               	movlb	0	; () banked
  6242  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6243  00059E  0E00               	movlw	0
  6244  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6245                           
  6246                           ;doprnt.c: 548: flag = 0;
  6247  0005A2  0E00               	movlw	0
  6248  0005A4  0100               	movlb	0	; () banked
  6249  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;doprnt.c: 551: switch(*f) {
  6253                           
  6254                           ;doprnt.c: 550: for(;;) {
  6255  0005A8  D005               	goto	l4082
  6256  0005AA                     l4078:
  6257                           
  6258                           ;doprnt.c: 580: flag |= 0x04;
  6259  0005AA  0100               	movlb	0	; () banked
  6260  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6261                           
  6262                           ;doprnt.c: 581: f++;
  6263  0005AE  0100               	movlb	0	; () banked
  6264  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6265  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6266  0005B4                     l4082:
  6267  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6268  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6269  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6270  0005BC  6AF8               	clrf	tblptru,c
  6271  0005BE                     	endif
  6272  0005BE                     	if	0	;tblptru may be non-zero
  6273  0005BE                     	endif
  6274  0005BE  0008               	tblrd		*
  6275  0005C0  50F5               	movf	tablat,w,c
  6276                           
  6277                           ; Switch size 1, requested type "space"
  6278                           ; Number of cases is 1, Range of values is 48 to 48
  6279                           ; switch strategies available:
  6280                           ; Name         Instructions Cycles
  6281                           ; simple_byte            4     3 (average)
  6282                           ;	Chosen strategy is simple_byte
  6283  0005C2  0A30               	xorlw	48	; case 48
  6284  0005C4  B4D8               	btfsc	status,2,c
  6285  0005C6  D7F1               	goto	l4078
  6286                           
  6287                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6288                           
  6289                           ;doprnt.c: 586: }
  6290                           
  6291                           ;doprnt.c: 585: break;
  6292  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6293  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6294  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6295  0005D0  6AF8               	clrf	tblptru,c
  6296  0005D2                     	endif
  6297  0005D2                     	if	0	;tblptru may be non-zero
  6298  0005D2                     	endif
  6299  0005D2  0008               	tblrd		*
  6300  0005D4  50F5               	movf	tablat,w,c
  6301  0005D6  EC81  F013         	call	_isdigit
  6302  0005DA  A0D8               	btfss	status,0,c
  6303  0005DC  D0CF               	goto	l4128
  6304                           
  6305                           ;doprnt.c: 598: width = 0;
  6306  0005DE  0E00               	movlw	0
  6307  0005E0  0100               	movlb	0	; () banked
  6308  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6309  0005E4  0E00               	movlw	0
  6310  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6311  0005E8                     l4088:
  6312                           
  6313                           ;doprnt.c: 600: width *= 10;
  6314  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6315  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6316  0005F0  0E00               	movlw	0
  6317  0005F2  0100               	movlb	0	; () banked
  6318  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6319  0005F6  0E0A               	movlw	10
  6320  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6321  0005FA  EC1A  F012         	call	___wmul	;wreg free
  6322  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6323  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6324                           
  6325                           ;doprnt.c: 601: width += *f++ - '0';
  6326  000606  0ED0               	movlw	208
  6327  000608  0100               	movlb	0	; () banked
  6328  00060A  6F9A               	movwf	??_printf& (0+255),b
  6329  00060C  0EFF               	movlw	255
  6330  00060E  0100               	movlb	0	; () banked
  6331  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6332  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6333  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6334  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6335  00061A  6AF8               	clrf	tblptru,c
  6336  00061C                     	endif
  6337  00061C                     	if	0	;tblptru may be non-zero
  6338  00061C                     	endif
  6339  00061C  0008               	tblrd		*
  6340  00061E  50F5               	movf	tablat,w,c
  6341  000620  0100               	movlb	0	; () banked
  6342  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6343  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6344  000626  0100               	movlb	0	; () banked
  6345  000628  519A               	movf	??_printf& (0+255),w,b
  6346  00062A  0100               	movlb	0	; () banked
  6347  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6348  00062E  0100               	movlb	0	; () banked
  6349  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6350  000632  0100               	movlb	0	; () banked
  6351  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6352  000636  0100               	movlb	0	; () banked
  6353  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6354  00063A  0100               	movlb	0	; () banked
  6355  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6356  00063E  0100               	movlb	0	; () banked
  6357  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6358  000642  0100               	movlb	0	; () banked
  6359  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 0
  6362  000646  0100               	movlb	0	; () banked
  6363  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6364  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6368  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6369  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6370  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6371  000654  6AF8               	clrf	tblptru,c
  6372  000656                     	endif
  6373  000656                     	if	0	;tblptru may be non-zero
  6374  000656                     	endif
  6375  000656  0008               	tblrd		*
  6376  000658  50F5               	movf	tablat,w,c
  6377  00065A  EC81  F013         	call	_isdigit
  6378  00065E  A0D8               	btfss	status,0,c
  6379  000660  D08D               	goto	l4128
  6380  000662  D7C2               	goto	l4088
  6381  000664                     l4096:
  6382                           
  6383                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6384  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  6385  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6386  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  6387  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  6388  000674  0E02               	movlw	2
  6389  000676  0100               	movlb	0	; () banked
  6390  000678  279F               	addwf	printf@ap& (0+255),f,b
  6391  00067A  0E00               	movlw	0
  6392  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;doprnt.c: 740: if(!cp)
  6396  00067E  0100               	movlb	0	; () banked
  6397  000680  51A1               	movf	printf@cp& (0+255),w,b
  6398  000682  0100               	movlb	0	; () banked
  6399  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  6400  000686  A4D8               	btfss	status,2,c
  6401  000688  D006               	goto	l4104
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;doprnt.c: 741: cp = "(null)";
  6405  00068A  0EBD               	movlw	low STR_51
  6406  00068C  0100               	movlb	0	; () banked
  6407  00068E  6FA1               	movwf	printf@cp& (0+255),b
  6408  000690  0EFF               	movlw	high STR_51
  6409  000692  0100               	movlb	0	; () banked
  6410  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  6411  000696                     l4104:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;doprnt.c: 745: len = 0;
  6415  000696  0E00               	movlw	0
  6416  000698  0100               	movlb	0	; () banked
  6417  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  6418  00069C  0E00               	movlw	0
  6419  00069E  6FA5               	movwf	printf@len& (0+255),b
  6420                           
  6421                           ;doprnt.c: 746: while(cp[len])
  6422  0006A0  D003               	goto	l4108
  6423  0006A2                     l4106:
  6424                           
  6425                           ;doprnt.c: 747: len++;
  6426  0006A2  0100               	movlb	0	; () banked
  6427  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  6428  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  6429  0006A8                     l4108:
  6430                           
  6431                           ; BSR set to: 0
  6432  0006A8  0100               	movlb	0	; () banked
  6433  0006AA  51A5               	movf	printf@len& (0+255),w,b
  6434  0006AC  0100               	movlb	0	; () banked
  6435  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  6436  0006B0  0100               	movlb	0	; () banked
  6437  0006B2  6F9A               	movwf	??_printf& (0+255),b
  6438  0006B4  0100               	movlb	0	; () banked
  6439  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  6440  0006B8  0100               	movlb	0	; () banked
  6441  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  6442  0006BC  0100               	movlb	0	; () banked
  6443  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  6444  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  6445  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  6446  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  6447  0006CA  6EF8               	movwf	tblptru,c
  6448  0006CC  0E0F               	movlw	(high __ramtop+-1)
  6449  0006CE  64F7               	cpfsgt	tblptrh,c
  6450  0006D0  D003               	bra	u2647
  6451  0006D2  0008               	tblrd		*
  6452  0006D4  50F5               	movf	tablat,w,c
  6453  0006D6  D005               	bra	u2640
  6454  0006D8                     u2647:
  6455  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6456  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6457  0006E0  50EF               	movf	indf0,w,c
  6458  0006E2                     u2640:
  6459  0006E2  0900               	iorlw	0
  6460  0006E4  A4D8               	btfss	status,2,c
  6461  0006E6  D7DD               	goto	l4106
  6462                           
  6463                           ;doprnt.c: 757: if(width > len)
  6464  0006E8  0100               	movlb	0	; () banked
  6465  0006EA  51A9               	movf	printf@width& (0+255),w,b
  6466  0006EC  0100               	movlb	0	; () banked
  6467  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  6468  0006F0  0100               	movlb	0	; () banked
  6469  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  6470  0006F4  0100               	movlb	0	; () banked
  6471  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  6472  0006F8  B0D8               	btfsc	status,0,c
  6473  0006FA  D009               	goto	l4114
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;doprnt.c: 758: width -= len;
  6477  0006FC  0100               	movlb	0	; () banked
  6478  0006FE  51A5               	movf	printf@len& (0+255),w,b
  6479  000700  0100               	movlb	0	; () banked
  6480  000702  5FA9               	subwf	printf@width& (0+255),f,b
  6481  000704  0100               	movlb	0	; () banked
  6482  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  6483  000708  0100               	movlb	0	; () banked
  6484  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6485  00070C  D009               	goto	l4118
  6486  00070E                     l4114:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;doprnt.c: 759: else
  6490                           ;doprnt.c: 760: width = 0;
  6491  00070E  0E00               	movlw	0
  6492  000710  0100               	movlb	0	; () banked
  6493  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  6494  000714  0E00               	movlw	0
  6495  000716  6FA9               	movwf	printf@width& (0+255),b
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;doprnt.c: 764: while(width--)
  6499  000718  D003               	goto	l4118
  6500  00071A                     l4116:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;doprnt.c: 765: (putch(' ') );
  6504  00071A  0E20               	movlw	32
  6505  00071C  EC3F  F014         	call	_putch
  6506  000720                     l4118:
  6507  000720  0100               	movlb	0	; () banked
  6508  000722  07A9               	decf	printf@width& (0+255),f,b
  6509  000724  A0D8               	btfss	status,0,c
  6510  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  6511  000728  0100               	movlb	0	; () banked
  6512  00072A  29A9               	incf	printf@width& (0+255),w,b
  6513  00072C  E1F6               	bnz	l4116
  6514  00072E  0100               	movlb	0	; () banked
  6515  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  6516  000732  B4D8               	btfsc	status,2,c
  6517  000734  D017               	goto	l4124
  6518  000736  D7F1               	goto	l4116
  6519  000738                     l4120:
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;doprnt.c: 768: (putch(*cp++) );
  6523  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  6524  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6525  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  6526  000742  6EF8               	movwf	tblptru,c
  6527  000744  0E0F               	movlw	(high __ramtop+-1)
  6528  000746  64F7               	cpfsgt	tblptrh,c
  6529  000748  D003               	bra	u2687
  6530  00074A  0008               	tblrd		*
  6531  00074C  50F5               	movf	tablat,w,c
  6532  00074E  D005               	bra	u2680
  6533  000750                     u2687:
  6534  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  6535  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  6536  000758  50EF               	movf	indf0,w,c
  6537  00075A                     u2680:
  6538  00075A  EC3F  F014         	call	_putch
  6539  00075E  0100               	movlb	0	; () banked
  6540  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  6541  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6542  000764                     l4124:
  6543                           
  6544                           ; BSR set to: 0
  6545  000764  0100               	movlb	0	; () banked
  6546  000766  07A5               	decf	printf@len& (0+255),f,b
  6547  000768  A0D8               	btfss	status,0,c
  6548  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  6549  00076C  0100               	movlb	0	; () banked
  6550  00076E  29A5               	incf	printf@len& (0+255),w,b
  6551  000770  E1E3               	bnz	l4120
  6552  000772  0100               	movlb	0	; () banked
  6553  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  6554  000776  B4D8               	btfsc	status,2,c
  6555  000778  D0F3               	goto	l4196
  6556  00077A  D7DE               	goto	l4120
  6557  00077C                     l4128:
  6558  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  6559  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  6560  000784  0100               	movlb	0	; () banked
  6561  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  6562  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6563  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6564  00078A  6AF8               	clrf	tblptru,c
  6565  00078C                     	endif
  6566  00078C                     	if	0	;tblptru may be non-zero
  6567  00078C                     	endif
  6568  00078C  0008               	tblrd		*
  6569  00078E  CFF5 F0A8          	movff	tablat,printf@c
  6570  000792  0100               	movlb	0	; () banked
  6571  000794  51A8               	movf	printf@c& (0+255),w,b
  6572                           
  6573                           ; Switch size 1, requested type "space"
  6574                           ; Number of cases is 4, Range of values is 0 to 115
  6575                           ; switch strategies available:
  6576                           ; Name         Instructions Cycles
  6577                           ; simple_byte           13     7 (average)
  6578                           ;	Chosen strategy is simple_byte
  6579  000796  0A00               	xorlw	0	; case 0
  6580  000798  B4D8               	btfsc	status,2,c
  6581  00079A  0012               	return	
  6582  00079C  0A64               	xorlw	100	; case 100
  6583  00079E  B4D8               	btfsc	status,2,c
  6584  0007A0  D007               	goto	l4130
  6585  0007A2  0A0D               	xorlw	13	; case 105
  6586  0007A4  B4D8               	btfsc	status,2,c
  6587  0007A6  D004               	goto	l4130
  6588  0007A8  0A1A               	xorlw	26	; case 115
  6589  0007AA  B4D8               	btfsc	status,2,c
  6590  0007AC  D75B               	goto	l4096
  6591  0007AE  D0D8               	goto	l4196
  6592  0007B0                     l4130:
  6593                           
  6594                           ;doprnt.c: 1253: {
  6595                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6596  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  6597  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6598  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  6599  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  6600  0007C0  0E02               	movlw	2
  6601  0007C2  0100               	movlb	0	; () banked
  6602  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  6603  0007C6  0E00               	movlw	0
  6604  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;doprnt.c: 1261: if((int)val < 0) {
  6608  0007CA  0100               	movlb	0	; () banked
  6609  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6610  0007CE  D008               	goto	l4140
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;doprnt.c: 1262: flag |= 0x03;
  6614  0007D0  0E03               	movlw	3
  6615  0007D2  0100               	movlb	0	; () banked
  6616  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;doprnt.c: 1263: val = -val;
  6620  0007D6  0100               	movlb	0	; () banked
  6621  0007D8  6DA3               	negf	printf@val& (0+255),b
  6622  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6623  0007DC  B0D8               	btfsc	status,0,c
  6624  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6625  0007E0                     l4140:
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;doprnt.c: 1264: }
  6629                           ;doprnt.c: 1266: }
  6630                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6631  0007E0  0E01               	movlw	1
  6632  0007E2  0100               	movlb	0	; () banked
  6633  0007E4  6FA8               	movwf	printf@c& (0+255),b
  6634  0007E6                     l4142:
  6635                           
  6636                           ; BSR set to: 0
  6637  0007E6  0E05               	movlw	5
  6638  0007E8  0100               	movlb	0	; () banked
  6639  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  6640  0007EC  B4D8               	btfsc	status,2,c
  6641  0007EE  D019               	goto	l4154
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;doprnt.c: 1306: if(val < dpowers[c])
  6645                           
  6646                           ; BSR set to: 0
  6647                           
  6648                           ; BSR set to: 0
  6649  0007F0  0100               	movlb	0	; () banked
  6650  0007F2  51A8               	movf	printf@c& (0+255),w,b
  6651  0007F4  0D02               	mullw	2
  6652  0007F6  0EC6               	movlw	low _dpowers
  6653  0007F8  24F3               	addwf	prodl,w,c
  6654  0007FA  6EF6               	movwf	tblptrl,c
  6655  0007FC  0EFD               	movlw	high _dpowers
  6656  0007FE  20F4               	addwfc	prodh,w,c
  6657  000800  6EF7               	movwf	tblptrh,c
  6658  000802                     	if	1	;There are 3 active tblptr bytes
  6659  000802  6AF8               	clrf	tblptru,c
  6660  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  6661  000806  22F8               	addwfc	tblptru,f,c
  6662  000808                     	endif
  6663  000808  0009               	tblrd		*+
  6664  00080A  50F5               	movf	tablat,w,c
  6665  00080C  0100               	movlb	0	; () banked
  6666  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  6667  000810  0009               	tblrd		*+
  6668  000812  50F5               	movf	tablat,w,c
  6669  000814  0100               	movlb	0	; () banked
  6670  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6671  000818  A0D8               	btfss	status,0,c
  6672  00081A  D003               	goto	l4154
  6673                           
  6674                           ; BSR set to: 0
  6675                           
  6676                           ; BSR set to: 0
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;doprnt.c: 1307: break;
  6680  00081C  0100               	movlb	0	; () banked
  6681  00081E  2BA8               	incf	printf@c& (0+255),f,b
  6682  000820  D7E2               	goto	l4142
  6683  000822                     l4154:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6687  000822  0100               	movlb	0	; () banked
  6688  000824  51A9               	movf	printf@width& (0+255),w,b
  6689  000826  0100               	movlb	0	; () banked
  6690  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6691  00082A  B4D8               	btfsc	status,2,c
  6692  00082C  D00B               	goto	l4160
  6693                           
  6694                           ; BSR set to: 0
  6695  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  6696  000832  0E03               	movlw	3
  6697  000834  0100               	movlb	0	; () banked
  6698  000836  179A               	andwf	??_printf& (0+255),f,b
  6699  000838  B4D8               	btfsc	status,2,c
  6700  00083A  D004               	goto	l4160
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;doprnt.c: 1346: width--;
  6704  00083C  0100               	movlb	0	; () banked
  6705  00083E  07A9               	decf	printf@width& (0+255),f,b
  6706  000840  A0D8               	btfss	status,0,c
  6707  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  6708  000844                     l4160:
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;doprnt.c: 1381: if(width > c)
  6712  000844  0E80               	movlw	128
  6713  000846  0100               	movlb	0	; () banked
  6714  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  6715  00084A  0E7F               	movlw	127
  6716  00084C  0100               	movlb	0	; () banked
  6717  00084E  6F9A               	movwf	??_printf& (0+255),b
  6718  000850  0100               	movlb	0	; () banked
  6719  000852  51A9               	movf	printf@width& (0+255),w,b
  6720  000854  0100               	movlb	0	; () banked
  6721  000856  5DA8               	subwf	printf@c& (0+255),w,b
  6722  000858  0100               	movlb	0	; () banked
  6723  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  6724  00085C  0A80               	xorlw	128
  6725  00085E  0100               	movlb	0	; () banked
  6726  000860  599A               	subwfb	??_printf& (0+255),w,b
  6727  000862  B0D8               	btfsc	status,0,c
  6728  000864  D00B               	goto	l4164
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;doprnt.c: 1382: width -= c;
  6732  000866  0100               	movlb	0	; () banked
  6733  000868  51A8               	movf	printf@c& (0+255),w,b
  6734  00086A  0100               	movlb	0	; () banked
  6735  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  6736  00086E  0E00               	movlw	0
  6737  000870  0100               	movlb	0	; () banked
  6738  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  6739  000874  0EFF               	movlw	255
  6740  000876  0100               	movlb	0	; () banked
  6741  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6742  00087A  D005               	goto	l4166
  6743  00087C                     l4164:
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;doprnt.c: 1383: else
  6747                           ;doprnt.c: 1384: width = 0;
  6748  00087C  0E00               	movlw	0
  6749  00087E  0100               	movlb	0	; () banked
  6750  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  6751  000882  0E00               	movlw	0
  6752  000884  6FA9               	movwf	printf@width& (0+255),b
  6753  000886                     l4166:
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;doprnt.c: 1387: if(flag & 0x04) {
  6757  000886  0100               	movlb	0	; () banked
  6758  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  6759  00088A  D018               	goto	l4178
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;doprnt.c: 1392: if(flag & 0x03)
  6763  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  6764  000890  0E03               	movlw	3
  6765  000892  0100               	movlb	0	; () banked
  6766  000894  179A               	andwf	??_printf& (0+255),f,b
  6767  000896  B4D8               	btfsc	status,2,c
  6768  000898  D003               	goto	l4172
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;doprnt.c: 1393: (putch('-') );
  6772  00089A  0E2D               	movlw	45
  6773  00089C  EC3F  F014         	call	_putch
  6774  0008A0                     l4172:
  6775                           
  6776                           ;doprnt.c: 1415: if(width)
  6777  0008A0  0100               	movlb	0	; () banked
  6778  0008A2  51A9               	movf	printf@width& (0+255),w,b
  6779  0008A4  0100               	movlb	0	; () banked
  6780  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6781  0008A8  B4D8               	btfsc	status,2,c
  6782  0008AA  D025               	goto	l4188
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;doprnt.c: 1417: (putch('0') );
  6786                           
  6787                           ; BSR set to: 0
  6788                           
  6789                           ;doprnt.c: 1416: do
  6790  0008AC  0E30               	movlw	48
  6791  0008AE  EC3F  F014         	call	_putch
  6792                           
  6793                           ;doprnt.c: 1418: while(--width);
  6794  0008B2  0100               	movlb	0	; () banked
  6795  0008B4  07A9               	decf	printf@width& (0+255),f,b
  6796  0008B6  A0D8               	btfss	status,0,c
  6797  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  6798  0008BA  D7F2               	goto	l4172
  6799  0008BC                     l4178:
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;doprnt.c: 1422: {
  6803                           ;doprnt.c: 1424: if(width
  6804                           ;doprnt.c: 1428: )
  6805  0008BC  0100               	movlb	0	; () banked
  6806  0008BE  51A9               	movf	printf@width& (0+255),w,b
  6807  0008C0  0100               	movlb	0	; () banked
  6808  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6809  0008C4  B4D8               	btfsc	status,2,c
  6810  0008C6  D00D               	goto	l4184
  6811  0008C8                     l4180:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;doprnt.c: 1430: (putch(' ') );
  6815  0008C8  0E20               	movlw	32
  6816  0008CA  EC3F  F014         	call	_putch
  6817                           
  6818                           ;doprnt.c: 1431: while(--width);
  6819  0008CE  0100               	movlb	0	; () banked
  6820  0008D0  07A9               	decf	printf@width& (0+255),f,b
  6821  0008D2  A0D8               	btfss	status,0,c
  6822  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  6823  0008D6  0100               	movlb	0	; () banked
  6824  0008D8  51A9               	movf	printf@width& (0+255),w,b
  6825  0008DA  0100               	movlb	0	; () banked
  6826  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6827  0008DE  A4D8               	btfss	status,2,c
  6828  0008E0  D7F3               	goto	l4180
  6829  0008E2                     l4184:
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;doprnt.c: 1438: if(flag & 0x03)
  6833  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  6834  0008E6  0E03               	movlw	3
  6835  0008E8  0100               	movlb	0	; () banked
  6836  0008EA  179A               	andwf	??_printf& (0+255),f,b
  6837  0008EC  B4D8               	btfsc	status,2,c
  6838  0008EE  D003               	goto	l4188
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;doprnt.c: 1439: (putch('-') );
  6842  0008F0  0E2D               	movlw	45
  6843  0008F2  EC3F  F014         	call	_putch
  6844  0008F6                     l4188:
  6845                           
  6846                           ;doprnt.c: 1469: }
  6847                           ;doprnt.c: 1472: prec = c;
  6848  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  6849                           
  6850                           ;doprnt.c: 1474: while(prec--) {
  6851  0008FA  D02C               	goto	l4194
  6852  0008FC                     l4190:
  6853                           
  6854                           ;doprnt.c: 1478: {
  6855                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6856  0008FC  0100               	movlb	0	; () banked
  6857  0008FE  519E               	movf	printf@prec& (0+255),w,b
  6858  000900  0D02               	mullw	2
  6859  000902  0EC6               	movlw	low _dpowers
  6860  000904  24F3               	addwf	prodl,w,c
  6861  000906  6EF6               	movwf	tblptrl,c
  6862  000908  0EFD               	movlw	high _dpowers
  6863  00090A  20F4               	addwfc	prodh,w,c
  6864  00090C  6EF7               	movwf	tblptrh,c
  6865  00090E                     	if	1	;There are 3 active tblptr bytes
  6866  00090E  6AF8               	clrf	tblptru,c
  6867  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  6868  000912  22F8               	addwfc	tblptru,f,c
  6869  000914                     	endif
  6870  000914  0009               	tblrd		*+
  6871  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6872  00091A  000A               	tblrd		*-
  6873  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6874  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  6875  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  6876  000928  EC95  F00F         	call	___lwdiv	;wreg free
  6877  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6878  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6879  000934  0E00               	movlw	0
  6880  000936  0100               	movlb	0	; () banked
  6881  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6882  00093A  0E0A               	movlw	10
  6883  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  6884  00093E  EC3E  F010         	call	___lwmod	;wreg free
  6885  000942  0100               	movlb	0	; () banked
  6886  000944  5187               	movf	?___lwmod& (0+255),w,b
  6887  000946  0F30               	addlw	48
  6888  000948  0100               	movlb	0	; () banked
  6889  00094A  6FA8               	movwf	printf@c& (0+255),b
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;doprnt.c: 1523: }
  6893                           ;doprnt.c: 1524: (putch(c) );
  6894  00094C  0100               	movlb	0	; () banked
  6895  00094E  51A8               	movf	printf@c& (0+255),w,b
  6896  000950  EC3F  F014         	call	_putch
  6897  000954                     l4194:
  6898  000954  0100               	movlb	0	; () banked
  6899  000956  079E               	decf	printf@prec& (0+255),f,b
  6900  000958  0100               	movlb	0	; () banked
  6901  00095A  299E               	incf	printf@prec& (0+255),w,b
  6902  00095C  A4D8               	btfss	status,2,c
  6903  00095E  D7CE               	goto	l4190
  6904  000960                     l4196:
  6905  000960  C08E  FFF6         	movff	printf@f,tblptrl
  6906  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  6907  000968  0100               	movlb	0	; () banked
  6908  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  6909  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6910  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6911  00096E  6AF8               	clrf	tblptru,c
  6912  000970                     	endif
  6913  000970                     	if	0	;tblptru may be non-zero
  6914  000970                     	endif
  6915  000970  0008               	tblrd		*
  6916  000972  CFF5 F0A8          	movff	tablat,printf@c
  6917  000976  0100               	movlb	0	; () banked
  6918  000978  51A8               	movf	printf@c& (0+255),w,b
  6919  00097A  B4D8               	btfsc	status,2,c
  6920  00097C  0012               	return	
  6921  00097E  D602               	goto	l4072
  6922  000980                     __end_of_printf:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           intcon3	equ	0xFF0
  6932                           indf0	equ	0xFEF
  6933                           postinc0	equ	0xFEE
  6934                           fsr0h	equ	0xFEA
  6935                           fsr0l	equ	0xFE9
  6936                           wreg	equ	0xFE8
  6937                           postdec1	equ	0xFE5
  6938                           fsr1l	equ	0xFE1
  6939                           indf2	equ	0xFDF
  6940                           postinc2	equ	0xFDE
  6941                           postdec2	equ	0xFDD
  6942                           fsr2h	equ	0xFDA
  6943                           fsr2l	equ	0xFD9
  6944                           status	equ	0xFD8
  6945                           
  6946 ;; *************** function _putch *****************
  6947 ;; Defined at:
  6948 ;;		line 18 in file "lcd.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;  data            1    wreg     unsigned char 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  data            1    2[BANK0 ] unsigned char 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, status,2, status,0, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;Total ram usage:        1 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    8
  6969 ;; This function calls:
  6970 ;;		_lcdNibble
  6971 ;; This function is called by:
  6972 ;;		_printf
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           	psect	text30
  6977  00287E                     __ptext30:
  6978                           	opt stack 0
  6979  00287E                     _putch:
  6980                           	opt stack 19
  6981                           
  6982                           ;incstack = 0
  6983                           ;putch@data stored from wreg
  6984  00287E  0100               	movlb	0	; () banked
  6985  002880  6F82               	movwf	putch@data& (0+255),b
  6986                           
  6987                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  6988  002882  848C               	bsf	3980,2,c	;volatile
  6989                           
  6990                           ;lcd.c: 20: lcdNibble(data);
  6991  002884  0100               	movlb	0	; () banked
  6992  002886  5182               	movf	putch@data& (0+255),w,b
  6993  002888  EC0A  F010         	call	_lcdNibble
  6994  00288C  0012               	return		;funcret
  6995  00288E                     __end_of_putch:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon3	equ	0xFF0
  7005                           indf0	equ	0xFEF
  7006                           postinc0	equ	0xFEE
  7007                           fsr0h	equ	0xFEA
  7008                           fsr0l	equ	0xFE9
  7009                           wreg	equ	0xFE8
  7010                           postdec1	equ	0xFE5
  7011                           fsr1l	equ	0xFE1
  7012                           indf2	equ	0xFDF
  7013                           postinc2	equ	0xFDE
  7014                           postdec2	equ	0xFDD
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _isdigit *****************
  7020 ;; Defined at:
  7021 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  c               1    wreg     unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  c               1    2[BANK0 ] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    7
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_printf
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text31
  7050  002702                     __ptext31:
  7051                           	opt stack 0
  7052  002702                     _isdigit:
  7053                           	opt stack 20
  7054                           
  7055                           ;incstack = 0
  7056                           ;isdigit@c stored from wreg
  7057  002702  0100               	movlb	0	; () banked
  7058  002704  6F82               	movwf	isdigit@c& (0+255),b
  7059  002706  0E00               	movlw	0
  7060  002708  0100               	movlb	0	; () banked
  7061  00270A  6F81               	movwf	_isdigit$1703& (0+255),b
  7062                           
  7063                           ; BSR set to: 0
  7064  00270C  0E3A               	movlw	58
  7065  00270E  0100               	movlb	0	; () banked
  7066  002710  6182               	cpfslt	isdigit@c& (0+255),b
  7067  002712  D007               	goto	l3932
  7068                           
  7069                           ; BSR set to: 0
  7070  002714  0E2F               	movlw	47
  7071  002716  0100               	movlb	0	; () banked
  7072  002718  6582               	cpfsgt	isdigit@c& (0+255),b
  7073  00271A  D003               	goto	l3932
  7074                           
  7075                           ; BSR set to: 0
  7076  00271C  0E01               	movlw	1
  7077  00271E  0100               	movlb	0	; () banked
  7078  002720  6F81               	movwf	_isdigit$1703& (0+255),b
  7079  002722                     l3932:
  7080                           
  7081                           ; BSR set to: 0
  7082  002722  C081  F080         	movff	_isdigit$1703,??_isdigit
  7083  002726  0100               	movlb	0	; () banked
  7084  002728  3180               	rrcf	??_isdigit& (0+255),w,b
  7085  00272A  0012               	return	
  7086  00272C                     __end_of_isdigit:
  7087                           	opt stack 0
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon3	equ	0xFF0
  7096                           indf0	equ	0xFEF
  7097                           postinc0	equ	0xFEE
  7098                           fsr0h	equ	0xFEA
  7099                           fsr0l	equ	0xFE9
  7100                           wreg	equ	0xFE8
  7101                           postdec1	equ	0xFE5
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           fsr2h	equ	0xFDA
  7107                           fsr2l	equ	0xFD9
  7108                           status	equ	0xFD8
  7109                           
  7110 ;; *************** function ___wmul *****************
  7111 ;; Defined at:
  7112 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7115 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;  product         2    4[BANK0 ] unsigned int 
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  2    0[BANK0 ] unsigned int 
  7120 ;; Registers used:
  7121 ;;		wreg, status,2, status,0, prodl, prodh
  7122 ;; Tracked objects:
  7123 ;;		On entry : 0/0
  7124 ;;		On exit  : 0/0
  7125 ;;		Unchanged: 0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;Total ram usage:        6 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    7
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_printf
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text32
  7142  002434                     __ptext32:
  7143                           	opt stack 0
  7144  002434                     ___wmul:
  7145                           	opt stack 20
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;incstack = 0
  7149  002434  0100               	movlb	0	; () banked
  7150  002436  5180               	movf	___wmul@multiplier& (0+255),w,b
  7151  002438  0100               	movlb	0	; () banked
  7152  00243A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7153  00243C  CFF3 F084          	movff	prodl,___wmul@product
  7154  002440  CFF4 F085          	movff	prodh,___wmul@product+1
  7155  002444  0100               	movlb	0	; () banked
  7156  002446  5180               	movf	___wmul@multiplier& (0+255),w,b
  7157  002448  0100               	movlb	0	; () banked
  7158  00244A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7159  00244C  50F3               	movf	prodl,w,c
  7160  00244E  0100               	movlb	0	; () banked
  7161  002450  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7162  002452  0100               	movlb	0	; () banked
  7163  002454  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7164  002456  0100               	movlb	0	; () banked
  7165  002458  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7166  00245A  50F3               	movf	prodl,w,c
  7167  00245C  0100               	movlb	0	; () banked
  7168  00245E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7169                           
  7170                           ; BSR set to: 0
  7171  002460  C084  F080         	movff	___wmul@product,?___wmul
  7172  002464  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7173  002468  0012               	return	
  7174  00246A                     __end_of___wmul:
  7175                           	opt stack 0
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon3	equ	0xFF0
  7184                           indf0	equ	0xFEF
  7185                           postinc0	equ	0xFEE
  7186                           fsr0h	equ	0xFEA
  7187                           fsr0l	equ	0xFE9
  7188                           wreg	equ	0xFE8
  7189                           postdec1	equ	0xFE5
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function ___lwmod *****************
  7199 ;; Defined at:
  7200 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  dividend        2    7[BANK0 ] unsigned int 
  7203 ;;  divisor         2    9[BANK0 ] unsigned int 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  counter         1   11[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2    7[BANK0 ] unsigned int 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        5 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    7
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_printf
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text33
  7230  00207C                     __ptext33:
  7231                           	opt stack 0
  7232  00207C                     ___lwmod:
  7233                           	opt stack 20
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;incstack = 0
  7237  00207C  0100               	movlb	0	; () banked
  7238  00207E  5189               	movf	___lwmod@divisor& (0+255),w,b
  7239  002080  0100               	movlb	0	; () banked
  7240  002082  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7241  002084  B4D8               	btfsc	status,2,c
  7242  002086  D026               	goto	l1655
  7243                           
  7244                           ; BSR set to: 0
  7245  002088  0E01               	movlw	1
  7246  00208A  0100               	movlb	0	; () banked
  7247  00208C  6F8B               	movwf	___lwmod@counter& (0+255),b
  7248  00208E  D006               	goto	l3970
  7249  002090                     l3968:
  7250                           
  7251                           ; BSR set to: 0
  7252  002090  0100               	movlb	0	; () banked
  7253  002092  90D8               	bcf	status,0,c
  7254  002094  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7255  002096  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7256  002098  0100               	movlb	0	; () banked
  7257  00209A  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7258  00209C                     l3970:
  7259                           
  7260                           ; BSR set to: 0
  7261  00209C  0100               	movlb	0	; () banked
  7262  00209E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7263  0020A0  D7F7               	goto	l3968
  7264  0020A2                     l3972:
  7265                           
  7266                           ; BSR set to: 0
  7267  0020A2  0100               	movlb	0	; () banked
  7268  0020A4  5189               	movf	___lwmod@divisor& (0+255),w,b
  7269  0020A6  0100               	movlb	0	; () banked
  7270  0020A8  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7271  0020AA  0100               	movlb	0	; () banked
  7272  0020AC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7273  0020AE  0100               	movlb	0	; () banked
  7274  0020B0  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7275  0020B2  A0D8               	btfss	status,0,c
  7276  0020B4  D008               	goto	l3976
  7277                           
  7278                           ; BSR set to: 0
  7279  0020B6  0100               	movlb	0	; () banked
  7280  0020B8  5189               	movf	___lwmod@divisor& (0+255),w,b
  7281  0020BA  0100               	movlb	0	; () banked
  7282  0020BC  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7283  0020BE  0100               	movlb	0	; () banked
  7284  0020C0  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7285  0020C2  0100               	movlb	0	; () banked
  7286  0020C4  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7287  0020C6                     l3976:
  7288                           
  7289                           ; BSR set to: 0
  7290  0020C6  0100               	movlb	0	; () banked
  7291  0020C8  90D8               	bcf	status,0,c
  7292  0020CA  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7293  0020CC  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7294                           
  7295                           ; BSR set to: 0
  7296  0020CE  0100               	movlb	0	; () banked
  7297  0020D0  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7298  0020D2  D7E7               	goto	l3972
  7299  0020D4                     l1655:
  7300                           
  7301                           ; BSR set to: 0
  7302  0020D4  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7303  0020D8  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7304                           
  7305                           ; BSR set to: 0
  7306  0020DC  0012               	return		;funcret
  7307  0020DE                     __end_of___lwmod:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           intcon	equ	0xFF2
  7316                           intcon3	equ	0xFF0
  7317                           indf0	equ	0xFEF
  7318                           postinc0	equ	0xFEE
  7319                           fsr0h	equ	0xFEA
  7320                           fsr0l	equ	0xFE9
  7321                           wreg	equ	0xFE8
  7322                           postdec1	equ	0xFE5
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           fsr2h	equ	0xFDA
  7328                           fsr2l	equ	0xFD9
  7329                           status	equ	0xFD8
  7330                           
  7331 ;; *************** function ___lwdiv *****************
  7332 ;; Defined at:
  7333 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;  dividend        2    0[BANK0 ] unsigned int 
  7336 ;;  divisor         2    2[BANK0 ] unsigned int 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  quotient        2    4[BANK0 ] unsigned int 
  7339 ;;  counter         1    6[BANK0 ] unsigned char 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  2    0[BANK0 ] unsigned int 
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;Total ram usage:        7 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    7
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_printf
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text34
  7364  001F2A                     __ptext34:
  7365                           	opt stack 0
  7366  001F2A                     ___lwdiv:
  7367                           	opt stack 20
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;incstack = 0
  7371  001F2A  0E00               	movlw	0
  7372  001F2C  0100               	movlb	0	; () banked
  7373  001F2E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7374  001F30  0E00               	movlw	0
  7375  001F32  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7376                           
  7377                           ; BSR set to: 0
  7378  001F34  0100               	movlb	0	; () banked
  7379  001F36  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7380  001F38  0100               	movlb	0	; () banked
  7381  001F3A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7382  001F3C  B4D8               	btfsc	status,2,c
  7383  001F3E  D02C               	goto	l1645
  7384                           
  7385                           ; BSR set to: 0
  7386  001F40  0E01               	movlw	1
  7387  001F42  0100               	movlb	0	; () banked
  7388  001F44  6F86               	movwf	___lwdiv@counter& (0+255),b
  7389  001F46  D006               	goto	l3950
  7390  001F48                     l3948:
  7391                           
  7392                           ; BSR set to: 0
  7393  001F48  0100               	movlb	0	; () banked
  7394  001F4A  90D8               	bcf	status,0,c
  7395  001F4C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7396  001F4E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7397  001F50  0100               	movlb	0	; () banked
  7398  001F52  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7399  001F54                     l3950:
  7400                           
  7401                           ; BSR set to: 0
  7402  001F54  0100               	movlb	0	; () banked
  7403  001F56  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7404  001F58  D7F7               	goto	l3948
  7405  001F5A                     l3952:
  7406                           
  7407                           ; BSR set to: 0
  7408  001F5A  0100               	movlb	0	; () banked
  7409  001F5C  90D8               	bcf	status,0,c
  7410  001F5E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7411  001F60  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7412                           
  7413                           ; BSR set to: 0
  7414  001F62  0100               	movlb	0	; () banked
  7415  001F64  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7416  001F66  0100               	movlb	0	; () banked
  7417  001F68  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7418  001F6A  0100               	movlb	0	; () banked
  7419  001F6C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7420  001F6E  0100               	movlb	0	; () banked
  7421  001F70  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7422  001F72  A0D8               	btfss	status,0,c
  7423  001F74  D00A               	goto	l3960
  7424                           
  7425                           ; BSR set to: 0
  7426  001F76  0100               	movlb	0	; () banked
  7427  001F78  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7428  001F7A  0100               	movlb	0	; () banked
  7429  001F7C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7430  001F7E  0100               	movlb	0	; () banked
  7431  001F80  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7432  001F82  0100               	movlb	0	; () banked
  7433  001F84  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7434                           
  7435                           ; BSR set to: 0
  7436  001F86  0100               	movlb	0	; () banked
  7437  001F88  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7438  001F8A                     l3960:
  7439                           
  7440                           ; BSR set to: 0
  7441  001F8A  0100               	movlb	0	; () banked
  7442  001F8C  90D8               	bcf	status,0,c
  7443  001F8E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7444  001F90  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7445                           
  7446                           ; BSR set to: 0
  7447  001F92  0100               	movlb	0	; () banked
  7448  001F94  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  7449  001F96  D7E1               	goto	l3952
  7450  001F98                     l1645:
  7451                           
  7452                           ; BSR set to: 0
  7453  001F98  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  7454  001F9C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7455                           
  7456                           ; BSR set to: 0
  7457  001FA0  0012               	return		;funcret
  7458  001FA2                     __end_of___lwdiv:
  7459                           	opt stack 0
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           intcon	equ	0xFF2
  7467                           intcon3	equ	0xFF0
  7468                           indf0	equ	0xFEF
  7469                           postinc0	equ	0xFEE
  7470                           fsr0h	equ	0xFEA
  7471                           fsr0l	equ	0xFE9
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8
  7481                           
  7482 ;; *************** function _lcdInst *****************
  7483 ;; Defined at:
  7484 ;;		line 13 in file "lcd.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  data            1    wreg     unsigned char 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  data            1    2[BANK0 ] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2, status,0, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;Total ram usage:        1 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    8
  7505 ;; This function calls:
  7506 ;;		_lcdNibble
  7507 ;; This function is called by:
  7508 ;;		_UI
  7509 ;;		_change_state_to_menu_start
  7510 ;;		_change_state_to_menu_12
  7511 ;;		_change_state_to_menu_22
  7512 ;;		_initLCD
  7513 ;;		_printRTC
  7514 ;;		_Loading
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text35
  7519  00288E                     __ptext35:
  7520                           	opt stack 0
  7521  00288E                     _lcdInst:
  7522                           	opt stack 20
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;incstack = 0
  7526                           ;lcdInst@data stored from wreg
  7527  00288E  0100               	movlb	0	; () banked
  7528  002890  6F82               	movwf	lcdInst@data& (0+255),b
  7529                           
  7530                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7531  002892  948C               	bcf	3980,2,c	;volatile
  7532                           
  7533                           ;lcd.c: 15: lcdNibble(data);
  7534  002894  0100               	movlb	0	; () banked
  7535  002896  5182               	movf	lcdInst@data& (0+255),w,b
  7536  002898  EC0A  F010         	call	_lcdNibble
  7537  00289C  0012               	return		;funcret
  7538  00289E                     __end_of_lcdInst:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           intcon3	equ	0xFF0
  7548                           indf0	equ	0xFEF
  7549                           postinc0	equ	0xFEE
  7550                           fsr0h	equ	0xFEA
  7551                           fsr0l	equ	0xFE9
  7552                           wreg	equ	0xFE8
  7553                           postdec1	equ	0xFE5
  7554                           fsr1l	equ	0xFE1
  7555                           indf2	equ	0xFDF
  7556                           postinc2	equ	0xFDE
  7557                           postdec2	equ	0xFDD
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _lcdNibble *****************
  7563 ;; Defined at:
  7564 ;;		line 23 in file "lcd.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  data            1    wreg     unsigned char 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  data            1    1[BANK0 ] unsigned char 
  7569 ;;  temp            1    0[BANK0 ] unsigned char 
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      void 
  7572 ;; Registers used:
  7573 ;;		wreg, status,2, status,0
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;Total ram usage:        2 bytes
  7584 ;; Hardware stack levels used:    1
  7585 ;; Hardware stack levels required when called:    7
  7586 ;; This function calls:
  7587 ;;		Nothing
  7588 ;; This function is called by:
  7589 ;;		_lcdInst
  7590 ;;		_putch
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           	psect	text36
  7595  002014                     __ptext36:
  7596                           	opt stack 0
  7597  002014                     _lcdNibble:
  7598                           	opt stack 20
  7599                           
  7600                           ;incstack = 0
  7601                           ;lcdNibble@data stored from wreg
  7602  002014  0100               	movlb	0	; () banked
  7603  002016  6F81               	movwf	lcdNibble@data& (0+255),b
  7604                           
  7605                           ;lcd.c: 25: char temp = data & 0xF0;
  7606  002018  0100               	movlb	0	; () banked
  7607  00201A  5181               	movf	lcdNibble@data& (0+255),w,b
  7608  00201C  0BF0               	andlw	240
  7609  00201E  0100               	movlb	0	; () banked
  7610  002020  6F80               	movwf	lcdNibble@temp& (0+255),b
  7611                           
  7612                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7613  002022  508C               	movf	3980,w,c	;volatile
  7614  002024  0B0F               	andlw	15
  7615  002026  6E8C               	movwf	3980,c	;volatile
  7616                           
  7617                           ;lcd.c: 27: LATD = temp | LATD;
  7618  002028  0100               	movlb	0	; () banked
  7619  00202A  5180               	movf	lcdNibble@temp& (0+255),w,b
  7620  00202C  108C               	iorwf	3980,w,c	;volatile
  7621  00202E  6E8C               	movwf	3980,c	;volatile
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7625  002030  868C               	bsf	3980,3,c	;volatile
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7629  002032  0E42               	movlw	66
  7630  002034                     u4907:
  7631  002034  2EE8               	decfsz	wreg,f,c
  7632  002036  D7FE               	bra	u4907
  7633  002038  D000               	nop2	
  7634                           
  7635                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7636  00203A  968C               	bcf	3980,3,c	;volatile
  7637                           
  7638                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7639  00203C  0E42               	movlw	66
  7640  00203E                     u4917:
  7641  00203E  2EE8               	decfsz	wreg,f,c
  7642  002040  D7FE               	bra	u4917
  7643  002042  D000               	nop2	
  7644                           
  7645                           ;lcd.c: 34: data = data << 4;
  7646  002044  0100               	movlb	0	; () banked
  7647  002046  3981               	swapf	lcdNibble@data& (0+255),w,b
  7648  002048  0BF0               	andlw	240
  7649  00204A  0100               	movlb	0	; () banked
  7650  00204C  6F81               	movwf	lcdNibble@data& (0+255),b
  7651                           
  7652                           ;lcd.c: 36: temp = data & 0xF0;
  7653  00204E  0100               	movlb	0	; () banked
  7654  002050  5181               	movf	lcdNibble@data& (0+255),w,b
  7655  002052  0BF0               	andlw	240
  7656  002054  0100               	movlb	0	; () banked
  7657  002056  6F80               	movwf	lcdNibble@temp& (0+255),b
  7658                           
  7659                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7660  002058  508C               	movf	3980,w,c	;volatile
  7661  00205A  0B0F               	andlw	15
  7662  00205C  6E8C               	movwf	3980,c	;volatile
  7663                           
  7664                           ;lcd.c: 38: LATD = temp | LATD;
  7665  00205E  0100               	movlb	0	; () banked
  7666  002060  5180               	movf	lcdNibble@temp& (0+255),w,b
  7667  002062  108C               	iorwf	3980,w,c	;volatile
  7668  002064  6E8C               	movwf	3980,c	;volatile
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7672  002066  868C               	bsf	3980,3,c	;volatile
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7676  002068  0E42               	movlw	66
  7677  00206A                     u4927:
  7678  00206A  2EE8               	decfsz	wreg,f,c
  7679  00206C  D7FE               	bra	u4927
  7680  00206E  D000               	nop2	
  7681                           
  7682                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7683  002070  968C               	bcf	3980,3,c	;volatile
  7684                           
  7685                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7686  002072  0E42               	movlw	66
  7687  002074                     u4937:
  7688  002074  2EE8               	decfsz	wreg,f,c
  7689  002076  D7FE               	bra	u4937
  7690  002078  D000               	nop2	
  7691  00207A  0012               	return		;funcret
  7692  00207C                     __end_of_lcdNibble:
  7693                           	opt stack 0
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           intcon3	equ	0xFF0
  7702                           indf0	equ	0xFEF
  7703                           postinc0	equ	0xFEE
  7704                           fsr0h	equ	0xFEA
  7705                           fsr0l	equ	0xFE9
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function ___awmod *****************
  7717 ;; Defined at:
  7718 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;  dividend        2    0[BANK0 ] int 
  7721 ;;  divisor         2    2[BANK0 ] int 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;  sign            1    5[BANK0 ] unsigned char 
  7724 ;;  counter         1    4[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  2    0[BANK0 ] int 
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7737 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;Total ram usage:        6 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    7
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_UI
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text37
  7749  001C64                     __ptext37:
  7750                           	opt stack 0
  7751  001C64                     ___awmod:
  7752                           	opt stack 22
  7753                           
  7754                           ;incstack = 0
  7755  001C64  0E00               	movlw	0
  7756  001C66  0100               	movlb	0	; () banked
  7757  001C68  6F85               	movwf	___awmod@sign& (0+255),b
  7758                           
  7759                           ; BSR set to: 0
  7760  001C6A  0100               	movlb	0	; () banked
  7761  001C6C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7762  001C6E  D008               	goto	l4964
  7763                           
  7764                           ; BSR set to: 0
  7765  001C70  0100               	movlb	0	; () banked
  7766  001C72  6D80               	negf	___awmod@dividend& (0+255),b
  7767  001C74  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7768  001C76  B0D8               	btfsc	status,0,c
  7769  001C78  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7770                           
  7771                           ; BSR set to: 0
  7772  001C7A  0E01               	movlw	1
  7773  001C7C  0100               	movlb	0	; () banked
  7774  001C7E  6F85               	movwf	___awmod@sign& (0+255),b
  7775  001C80                     l4964:
  7776                           
  7777                           ; BSR set to: 0
  7778  001C80  0100               	movlb	0	; () banked
  7779  001C82  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7780  001C84  D005               	goto	l4968
  7781                           
  7782                           ; BSR set to: 0
  7783  001C86  0100               	movlb	0	; () banked
  7784  001C88  6D82               	negf	___awmod@divisor& (0+255),b
  7785  001C8A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7786  001C8C  B0D8               	btfsc	status,0,c
  7787  001C8E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7788  001C90                     l4968:
  7789                           
  7790                           ; BSR set to: 0
  7791  001C90  0100               	movlb	0	; () banked
  7792  001C92  5182               	movf	___awmod@divisor& (0+255),w,b
  7793  001C94  0100               	movlb	0	; () banked
  7794  001C96  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7795  001C98  B4D8               	btfsc	status,2,c
  7796  001C9A  D026               	goto	l4984
  7797                           
  7798                           ; BSR set to: 0
  7799  001C9C  0E01               	movlw	1
  7800  001C9E  0100               	movlb	0	; () banked
  7801  001CA0  6F84               	movwf	___awmod@counter& (0+255),b
  7802  001CA2  D006               	goto	l4974
  7803  001CA4                     l4972:
  7804                           
  7805                           ; BSR set to: 0
  7806  001CA4  0100               	movlb	0	; () banked
  7807  001CA6  90D8               	bcf	status,0,c
  7808  001CA8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7809  001CAA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7810  001CAC  0100               	movlb	0	; () banked
  7811  001CAE  2B84               	incf	___awmod@counter& (0+255),f,b
  7812  001CB0                     l4974:
  7813                           
  7814                           ; BSR set to: 0
  7815  001CB0  0100               	movlb	0	; () banked
  7816  001CB2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7817  001CB4  D7F7               	goto	l4972
  7818  001CB6                     l4976:
  7819                           
  7820                           ; BSR set to: 0
  7821  001CB6  0100               	movlb	0	; () banked
  7822  001CB8  5182               	movf	___awmod@divisor& (0+255),w,b
  7823  001CBA  0100               	movlb	0	; () banked
  7824  001CBC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7825  001CBE  0100               	movlb	0	; () banked
  7826  001CC0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7827  001CC2  0100               	movlb	0	; () banked
  7828  001CC4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7829  001CC6  A0D8               	btfss	status,0,c
  7830  001CC8  D008               	goto	l4980
  7831                           
  7832                           ; BSR set to: 0
  7833  001CCA  0100               	movlb	0	; () banked
  7834  001CCC  5182               	movf	___awmod@divisor& (0+255),w,b
  7835  001CCE  0100               	movlb	0	; () banked
  7836  001CD0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7837  001CD2  0100               	movlb	0	; () banked
  7838  001CD4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7839  001CD6  0100               	movlb	0	; () banked
  7840  001CD8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7841  001CDA                     l4980:
  7842                           
  7843                           ; BSR set to: 0
  7844  001CDA  0100               	movlb	0	; () banked
  7845  001CDC  90D8               	bcf	status,0,c
  7846  001CDE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7847  001CE0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7848                           
  7849                           ; BSR set to: 0
  7850  001CE2  0100               	movlb	0	; () banked
  7851  001CE4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7852  001CE6  D7E7               	goto	l4976
  7853  001CE8                     l4984:
  7854                           
  7855                           ; BSR set to: 0
  7856  001CE8  0100               	movlb	0	; () banked
  7857  001CEA  5185               	movf	___awmod@sign& (0+255),w,b
  7858  001CEC  0100               	movlb	0	; () banked
  7859  001CEE  B4D8               	btfsc	status,2,c
  7860  001CF0  D005               	goto	l4988
  7861                           
  7862                           ; BSR set to: 0
  7863  001CF2  0100               	movlb	0	; () banked
  7864  001CF4  6D80               	negf	___awmod@dividend& (0+255),b
  7865  001CF6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7866  001CF8  B0D8               	btfsc	status,0,c
  7867  001CFA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7868  001CFC                     l4988:
  7869                           
  7870                           ; BSR set to: 0
  7871  001CFC  C080  F080         	movff	___awmod@dividend,?___awmod
  7872  001D00  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  7873  001D04  0012               	return	
  7874  001D06                     __end_of___awmod:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           intcon	equ	0xFF2
  7883                           intcon3	equ	0xFF0
  7884                           indf0	equ	0xFEF
  7885                           postinc0	equ	0xFEE
  7886                           fsr0h	equ	0xFEA
  7887                           fsr0l	equ	0xFE9
  7888                           wreg	equ	0xFE8
  7889                           postdec1	equ	0xFE5
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function ___awdiv *****************
  7899 ;; Defined at:
  7900 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  dividend        2    6[BANK0 ] int 
  7903 ;;  divisor         2    8[BANK0 ] int 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  quotient        2   12[BANK0 ] int 
  7906 ;;  sign            1   11[BANK0 ] unsigned char 
  7907 ;;  counter         1   10[BANK0 ] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  2    6[BANK0 ] int 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, status,0
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;Total ram usage:        8 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    7
  7924 ;; This function calls:
  7925 ;;		Nothing
  7926 ;; This function is called by:
  7927 ;;		_UI
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text38
  7932  001994                     __ptext38:
  7933                           	opt stack 0
  7934  001994                     ___awdiv:
  7935                           	opt stack 22
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;incstack = 0
  7939  001994  0E00               	movlw	0
  7940  001996  0100               	movlb	0	; () banked
  7941  001998  6F8B               	movwf	___awdiv@sign& (0+255),b
  7942                           
  7943                           ; BSR set to: 0
  7944  00199A  0100               	movlb	0	; () banked
  7945  00199C  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7946  00199E  D008               	goto	l4920
  7947                           
  7948                           ; BSR set to: 0
  7949  0019A0  0100               	movlb	0	; () banked
  7950  0019A2  6D88               	negf	___awdiv@divisor& (0+255),b
  7951  0019A4  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7952  0019A6  B0D8               	btfsc	status,0,c
  7953  0019A8  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 0
  7956  0019AA  0E01               	movlw	1
  7957  0019AC  0100               	movlb	0	; () banked
  7958  0019AE  6F8B               	movwf	___awdiv@sign& (0+255),b
  7959  0019B0                     l4920:
  7960                           
  7961                           ; BSR set to: 0
  7962  0019B0  0100               	movlb	0	; () banked
  7963  0019B2  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7964  0019B4  D008               	goto	l4926
  7965                           
  7966                           ; BSR set to: 0
  7967  0019B6  0100               	movlb	0	; () banked
  7968  0019B8  6D86               	negf	___awdiv@dividend& (0+255),b
  7969  0019BA  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7970  0019BC  B0D8               	btfsc	status,0,c
  7971  0019BE  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7972                           
  7973                           ; BSR set to: 0
  7974  0019C0  0E01               	movlw	1
  7975  0019C2  0100               	movlb	0	; () banked
  7976  0019C4  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  7977  0019C6                     l4926:
  7978                           
  7979                           ; BSR set to: 0
  7980  0019C6  0E00               	movlw	0
  7981  0019C8  0100               	movlb	0	; () banked
  7982  0019CA  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  7983  0019CC  0E00               	movlw	0
  7984  0019CE  6F8C               	movwf	___awdiv@quotient& (0+255),b
  7985                           
  7986                           ; BSR set to: 0
  7987  0019D0  0100               	movlb	0	; () banked
  7988  0019D2  5188               	movf	___awdiv@divisor& (0+255),w,b
  7989  0019D4  0100               	movlb	0	; () banked
  7990  0019D6  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7991  0019D8  B4D8               	btfsc	status,2,c
  7992  0019DA  D02C               	goto	l4948
  7993                           
  7994                           ; BSR set to: 0
  7995  0019DC  0E01               	movlw	1
  7996  0019DE  0100               	movlb	0	; () banked
  7997  0019E0  6F8A               	movwf	___awdiv@counter& (0+255),b
  7998  0019E2  D006               	goto	l4934
  7999  0019E4                     l4932:
  8000                           
  8001                           ; BSR set to: 0
  8002  0019E4  0100               	movlb	0	; () banked
  8003  0019E6  90D8               	bcf	status,0,c
  8004  0019E8  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8005  0019EA  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8006  0019EC  0100               	movlb	0	; () banked
  8007  0019EE  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8008  0019F0                     l4934:
  8009                           
  8010                           ; BSR set to: 0
  8011  0019F0  0100               	movlb	0	; () banked
  8012  0019F2  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8013  0019F4  D7F7               	goto	l4932
  8014  0019F6                     l4936:
  8015                           
  8016                           ; BSR set to: 0
  8017  0019F6  0100               	movlb	0	; () banked
  8018  0019F8  90D8               	bcf	status,0,c
  8019  0019FA  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8020  0019FC  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8021                           
  8022                           ; BSR set to: 0
  8023  0019FE  0100               	movlb	0	; () banked
  8024  001A00  5188               	movf	___awdiv@divisor& (0+255),w,b
  8025  001A02  0100               	movlb	0	; () banked
  8026  001A04  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8027  001A06  0100               	movlb	0	; () banked
  8028  001A08  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8029  001A0A  0100               	movlb	0	; () banked
  8030  001A0C  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8031  001A0E  A0D8               	btfss	status,0,c
  8032  001A10  D00A               	goto	l4944
  8033                           
  8034                           ; BSR set to: 0
  8035  001A12  0100               	movlb	0	; () banked
  8036  001A14  5188               	movf	___awdiv@divisor& (0+255),w,b
  8037  001A16  0100               	movlb	0	; () banked
  8038  001A18  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8039  001A1A  0100               	movlb	0	; () banked
  8040  001A1C  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8041  001A1E  0100               	movlb	0	; () banked
  8042  001A20  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8043                           
  8044                           ; BSR set to: 0
  8045  001A22  0100               	movlb	0	; () banked
  8046  001A24  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8047  001A26                     l4944:
  8048                           
  8049                           ; BSR set to: 0
  8050  001A26  0100               	movlb	0	; () banked
  8051  001A28  90D8               	bcf	status,0,c
  8052  001A2A  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8053  001A2C  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8054                           
  8055                           ; BSR set to: 0
  8056  001A2E  0100               	movlb	0	; () banked
  8057  001A30  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8058  001A32  D7E1               	goto	l4936
  8059  001A34                     l4948:
  8060                           
  8061                           ; BSR set to: 0
  8062  001A34  0100               	movlb	0	; () banked
  8063  001A36  518B               	movf	___awdiv@sign& (0+255),w,b
  8064  001A38  0100               	movlb	0	; () banked
  8065  001A3A  B4D8               	btfsc	status,2,c
  8066  001A3C  D005               	goto	l4952
  8067                           
  8068                           ; BSR set to: 0
  8069  001A3E  0100               	movlb	0	; () banked
  8070  001A40  6D8C               	negf	___awdiv@quotient& (0+255),b
  8071  001A42  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8072  001A44  B0D8               	btfsc	status,0,c
  8073  001A46  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8074  001A48                     l4952:
  8075                           
  8076                           ; BSR set to: 0
  8077  001A48  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8078  001A4C  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8079  001A50  0012               	return	
  8080  001A52                     __end_of___awdiv:
  8081                           	opt stack 0
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon3	equ	0xFF0
  8090                           indf0	equ	0xFEF
  8091                           postinc0	equ	0xFEE
  8092                           fsr0h	equ	0xFEA
  8093                           fsr0l	equ	0xFE9
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _PortTestA5 *****************
  8105 ;; Defined at:
  8106 ;;		line 27 in file "PortHigh.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;		None
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;		None
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      void 
  8113 ;; Registers used:
  8114 ;;		None
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;Total ram usage:        0 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    7
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_main
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text39
  8135  00285A                     __ptext39:
  8136                           	opt stack 0
  8137  00285A                     _PortTestA5:
  8138                           	opt stack 23
  8139  00285A                     l236:
  8140  00285A  A281               	btfss	3969,1,c	;volatile
  8141  00285C  D7FE               	goto	l236
  8142                           
  8143                           ;PortHigh.c: 31: }
  8144                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8145  00285E  8A89               	bsf	3977,5,c	;volatile
  8146  002860                     l239:
  8147  002860  B281               	btfsc	3969,1,c	;volatile
  8148  002862  D7FE               	goto	l239
  8149                           
  8150                           ;PortHigh.c: 35: }
  8151                           ;PortHigh.c: 36: __nop();
  8152  002864  F000               	nop	
  8153                           
  8154                           ;PortHigh.c: 37: __nop();
  8155  002866  F000               	nop	
  8156                           
  8157                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8158  002868  9A89               	bcf	3977,5,c	;volatile
  8159  00286A  0012               	return		;funcret
  8160  00286C                     __end_of_PortTestA5:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon3	equ	0xFF0
  8170                           indf0	equ	0xFEF
  8171                           postinc0	equ	0xFEE
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           postdec1	equ	0xFE5
  8176                           fsr1l	equ	0xFE1
  8177                           indf2	equ	0xFDF
  8178                           postinc2	equ	0xFDE
  8179                           postdec2	equ	0xFDD
  8180                           fsr2h	equ	0xFDA
  8181                           fsr2l	equ	0xFD9
  8182                           status	equ	0xFD8
  8183                           
  8184 ;; *************** function _handler *****************
  8185 ;; Defined at:
  8186 ;;		line 14 in file "interruptHandler.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;		None
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;		None
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;Total ram usage:       16 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    6
  8207 ;; This function calls:
  8208 ;;		_printSortTimer
  8209 ;;		_updateMenu
  8210 ;; This function is called by:
  8211 ;;		Interrupt level 2
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	intcode
  8216  000008                     __pintcode:
  8217                           	opt stack 0
  8218  000008                     _handler:
  8219                           	opt stack 18
  8220                           
  8221                           ;incstack = 0
  8222  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8223  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8224                           tblptru	equ	0xFF8
  8225                           tblptrh	equ	0xFF7
  8226                           tblptrl	equ	0xFF6
  8227                           tablat	equ	0xFF5
  8228                           prodh	equ	0xFF4
  8229                           prodl	equ	0xFF3
  8230                           intcon	equ	0xFF2
  8231                           intcon3	equ	0xFF0
  8232                           indf0	equ	0xFEF
  8233                           postinc0	equ	0xFEE
  8234                           fsr0h	equ	0xFEA
  8235                           fsr0l	equ	0xFE9
  8236                           wreg	equ	0xFE8
  8237                           postdec1	equ	0xFE5
  8238                           fsr1l	equ	0xFE1
  8239                           indf2	equ	0xFDF
  8240                           postinc2	equ	0xFDE
  8241                           postdec2	equ	0xFDD
  8242                           fsr2h	equ	0xFDA
  8243                           fsr2l	equ	0xFD9
  8244                           status	equ	0xFD8
  8245                           
  8246                           	psect	intcode_body
  8247  001866                     __pintcode_body:
  8248                           	opt stack 18
  8249  001866                     int_func:
  8250                           	opt stack 18
  8251  001866  0006               	pop		; remove dummy address from shadow register refresh
  8252  001868  CFFA F04D          	movff	pclath,??_handler+2
  8253  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8254  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8255  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8256  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8257  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8258  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8259  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8260  001888  CFF3 F055          	movff	prodl,??_handler+10
  8261  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8262  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8263  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8264  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8265  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8266                           
  8267                           ;interruptHandler.c: 16: if(INT1IF){
  8268  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8269  0018A2  D018               	goto	i2l5624
  8270                           
  8271                           ;interruptHandler.c: 17: INT1IF = 0;
  8272  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8273                           
  8274                           ;interruptHandler.c: 18: if(machine_state == UI_state) {
  8275  0018A6  0100               	movlb	0	; () banked
  8276  0018A8  51F7               	movf	_machine_state& (0+255),w,b
  8277  0018AA  A4D8               	btfss	status,2,c
  8278  0018AC  D013               	goto	i2l5624
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;interruptHandler.c: 19: input = keys[(PORTB & 0xF0) >> 4];
  8282  0018AE  3881               	swapf	3969,w,c	;volatile
  8283  0018B0  0B0F               	andlw	15
  8284  0018B2  0B0F               	andlw	15
  8285  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8286  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8287  0018B8  0EB5               	movlw	low _keys
  8288  0018BA  244B               	addwf	??_handler,w,c
  8289  0018BC  6EF6               	movwf	tblptrl,c
  8290  0018BE  0EFD               	movlw	high _keys
  8291  0018C0  204C               	addwfc	??_handler+1,w,c
  8292  0018C2  6EF7               	movwf	tblptrh,c
  8293  0018C4                     	if	1	;There are 3 active tblptr bytes
  8294  0018C4  6AF8               	clrf	tblptru,c
  8295  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8296  0018C8  22F8               	addwfc	tblptru,f,c
  8297  0018CA                     	endif
  8298  0018CA  0008               	tblrd		*
  8299  0018CC  CFF5 F07D          	movff	tablat,_input
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;interruptHandler.c: 20: updateMenu();
  8303  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8304  0018D4                     i2l5624:
  8305                           
  8306                           ;interruptHandler.c: 21: }
  8307                           ;interruptHandler.c: 22: }
  8308                           ;interruptHandler.c: 25: if(TMR0IF){
  8309  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8310  0018D6  D010               	goto	i2l5640
  8311                           
  8312                           ;interruptHandler.c: 26: TMR0IF = 0;
  8313  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8314                           
  8315                           ;interruptHandler.c: 27: if(machine_state == Sorting_state){
  8316  0018DA  0100               	movlb	0	; () banked
  8317  0018DC  05F7               	decf	_machine_state& (0+255),w,b
  8318  0018DE  A4D8               	btfss	status,2,c
  8319  0018E0  D00B               	goto	i2l5640
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;interruptHandler.c: 28: printSortTimer();
  8323  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8324                           
  8325                           ;interruptHandler.c: 31: T0CON = 0b00010111;
  8326  0018E6  0E17               	movlw	23
  8327  0018E8  6ED5               	movwf	4053,c	;volatile
  8328                           
  8329                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
  8330  0018EA  0E85               	movlw	133
  8331  0018EC  6ED7               	movwf	4055,c	;volatile
  8332                           
  8333                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
  8334  0018EE  0EEE               	movlw	238
  8335  0018F0  6ED6               	movwf	4054,c	;volatile
  8336                           
  8337                           ;interruptHandler.c: 34: T0CON = T0CON | 0b10000000;
  8338  0018F2  50D5               	movf	4053,w,c	;volatile
  8339  0018F4  0980               	iorlw	128
  8340  0018F6  6ED5               	movwf	4053,c	;volatile
  8341  0018F8                     i2l5640:
  8342                           
  8343                           ;interruptHandler.c: 35: }
  8344                           ;interruptHandler.c: 36: }
  8345                           ;interruptHandler.c: 39: if(TMR1IF){
  8346  0018F8  A09E               	btfss	3998,0,c	;volatile
  8347  0018FA  D02E               	goto	i2l1171
  8348                           
  8349                           ;interruptHandler.c: 40: TMR1IF = 1;
  8350  0018FC  809E               	bsf	3998,0,c	;volatile
  8351                           
  8352                           ;interruptHandler.c: 41: if(machine_state = Sorting_state){
  8353  0018FE  0E01               	movlw	1
  8354  001900  0100               	movlb	0	; () banked
  8355  001902  6FF7               	movwf	_machine_state& (0+255),b
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;interruptHandler.c: 42: if(was_low){
  8359  001904  5079               	movf	_was_low,w,c
  8360  001906  107A               	iorwf	_was_low+1,w,c
  8361  001908  B4D8               	btfsc	status,2,c
  8362  00190A  D012               	goto	i2l5664
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;interruptHandler.c: 43: if(servoSelectFlag == 1){
  8366  00190C  046B               	decf	_servoSelectFlag,w,c
  8367  00190E  106C               	iorwf	_servoSelectFlag+1,w,c
  8368  001910  B4D8               	btfsc	status,2,c
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
  8372  001912  828B               	bsf	3979,1,c	;volatile
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;interruptHandler.c: 45: }
  8376                           ;interruptHandler.c: 46: if(servoSelectFlag == 2){
  8377                           
  8378                           ; BSR set to: 0
  8379  001914  0E02               	movlw	2
  8380  001916  186B               	xorwf	_servoSelectFlag,w,c
  8381  001918  106C               	iorwf	_servoSelectFlag+1,w,c
  8382  00191A  B4D8               	btfsc	status,2,c
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;interruptHandler.c: 47: LATCbits.LATC2 = 1;
  8386  00191C  848B               	bsf	3979,2,c	;volatile
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;interruptHandler.c: 48: }
  8390                           ;interruptHandler.c: 49: was_low = 0;
  8391                           
  8392                           ; BSR set to: 0
  8393  00191E  0E00               	movlw	0
  8394  001920  6E7A               	movwf	_was_low+1,c
  8395  001922  0E00               	movlw	0
  8396  001924  6E79               	movwf	_was_low,c
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;interruptHandler.c: 51: TMR1H = timer1highbits;
  8400  001926  C073  FFCF         	movff	_timer1highbits,4047	;volatile
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;interruptHandler.c: 52: TMR1L = timer1lowbits;
  8404  00192A  C075  FFCE         	movff	_timer1lowbits,4046	;volatile
  8405  00192E  D011               	goto	i2l5678
  8406  001930                     i2l5664:
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;interruptHandler.c: 55: else{
  8410                           ;interruptHandler.c: 56: if(servoSelectFlag == 1){
  8411  001930  046B               	decf	_servoSelectFlag,w,c
  8412  001932  106C               	iorwf	_servoSelectFlag+1,w,c
  8413  001934  B4D8               	btfsc	status,2,c
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;interruptHandler.c: 57: LATCbits.LATC1 = 0;
  8417  001936  928B               	bcf	3979,1,c	;volatile
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;interruptHandler.c: 58: }
  8421                           ;interruptHandler.c: 59: if(servoSelectFlag == 2){
  8422                           
  8423                           ; BSR set to: 0
  8424  001938  0E02               	movlw	2
  8425  00193A  186B               	xorwf	_servoSelectFlag,w,c
  8426  00193C  106C               	iorwf	_servoSelectFlag+1,w,c
  8427  00193E  B4D8               	btfsc	status,2,c
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;interruptHandler.c: 60: LATCbits.LATC2 = 0;
  8431  001940  948B               	bcf	3979,2,c	;volatile
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;interruptHandler.c: 61: }
  8435                           ;interruptHandler.c: 62: was_low = 1;
  8436                           
  8437                           ; BSR set to: 0
  8438  001942  0E00               	movlw	0
  8439  001944  6E7A               	movwf	_was_low+1,c
  8440  001946  0E01               	movlw	1
  8441  001948  6E79               	movwf	_was_low,c
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;interruptHandler.c: 64: TMR1H = timer1_20ms_high;
  8445  00194A  C06F  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;interruptHandler.c: 65: TMR1L = timer1_20ms_low;
  8449  00194E  C071  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  8450  001952                     i2l5678:
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;interruptHandler.c: 66: T1CON = T1CON | 0b00000001;
  8454  001952  50CD               	movf	4045,w,c	;volatile
  8455  001954  0901               	iorlw	1
  8456  001956  6ECD               	movwf	4045,c	;volatile
  8457  001958                     i2l1171:
  8458  001958  C05A  FFF5         	movff	??_handler+15,tablat
  8459  00195C  C059  FFF8         	movff	??_handler+14,tblptru
  8460  001960  C058  FFF7         	movff	??_handler+13,tblptrh
  8461  001964  C057  FFF6         	movff	??_handler+12,tblptrl
  8462  001968  C056  FFF4         	movff	??_handler+11,prodh
  8463  00196C  C055  FFF3         	movff	??_handler+10,prodl
  8464  001970  C054  FFDA         	movff	??_handler+9,fsr2h
  8465  001974  C053  FFD9         	movff	??_handler+8,fsr2l
  8466  001978  C052  FFE2         	movff	??_handler+7,fsr1h
  8467  00197C  C051  FFE1         	movff	??_handler+6,fsr1l
  8468  001980  C050  FFEA         	movff	??_handler+5,fsr0h
  8469  001984  C04F  FFE9         	movff	??_handler+4,fsr0l
  8470  001988  C04E  FFFB         	movff	??_handler+3,pclatu
  8471  00198C  C04D  FFFA         	movff	??_handler+2,pclath
  8472  001990  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8473  001992  0011               	retfie		f
  8474  001994                     __end_of_handler:
  8475                           	opt stack 0
  8476                           pclatu	equ	0xFFB
  8477                           pclath	equ	0xFFA
  8478                           tblptru	equ	0xFF8
  8479                           tblptrh	equ	0xFF7
  8480                           tblptrl	equ	0xFF6
  8481                           tablat	equ	0xFF5
  8482                           prodh	equ	0xFF4
  8483                           prodl	equ	0xFF3
  8484                           intcon	equ	0xFF2
  8485                           intcon3	equ	0xFF0
  8486                           indf0	equ	0xFEF
  8487                           postinc0	equ	0xFEE
  8488                           fsr0h	equ	0xFEA
  8489                           fsr0l	equ	0xFE9
  8490                           wreg	equ	0xFE8
  8491                           postdec1	equ	0xFE5
  8492                           fsr1h	equ	0xFE2
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _updateMenu *****************
  8502 ;; Defined at:
  8503 ;;		line 155 in file "UI.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      void 
  8510 ;; Registers used:
  8511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;Total ram usage:        2 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    5
  8524 ;; This function calls:
  8525 ;;		_change_state_to_logs_11
  8526 ;;		_change_state_to_logs_12
  8527 ;;		_change_state_to_logs_22
  8528 ;;		_change_state_to_logs_23
  8529 ;;		_change_state_to_logs_33
  8530 ;;		_change_state_to_logs_34
  8531 ;;		_change_state_to_menu_11
  8532 ;;		_change_state_to_menu_23
  8533 ;;		_dispLogs
  8534 ;;		_inputHandler
  8535 ;;		i2_change_state_to_menu_12
  8536 ;;		i2_change_state_to_menu_22
  8537 ;;		i2_change_state_to_menu_start
  8538 ;; This function is called by:
  8539 ;;		_handler
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text41
  8544  000F90                     __ptext41:
  8545                           	opt stack 0
  8546  000F90                     _updateMenu:
  8547                           	opt stack 18
  8548                           
  8549                           ;UI.c: 156: up = 0; down = 0; enter = 0; back = 0;
  8550                           
  8551                           ;incstack = 0
  8552  000F90  0E00               	movlw	0
  8553  000F92  6E78               	movwf	_up+1,c
  8554  000F94  0E00               	movlw	0
  8555  000F96  6E77               	movwf	_up,c
  8556  000F98  0E00               	movlw	0
  8557  000F9A  6E66               	movwf	_down+1,c
  8558  000F9C  0E00               	movlw	0
  8559  000F9E  6E65               	movwf	_down,c
  8560  000FA0  0E00               	movlw	0
  8561  000FA2  6E68               	movwf	_enter+1,c
  8562  000FA4  0E00               	movlw	0
  8563  000FA6  6E67               	movwf	_enter,c
  8564  000FA8  0E00               	movlw	0
  8565  000FAA  6E62               	movwf	_back+1,c
  8566  000FAC  0E00               	movlw	0
  8567  000FAE  6E61               	movwf	_back,c
  8568                           
  8569                           ;UI.c: 157: (INTCONbits.GIE = 0);
  8570  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  8571                           
  8572                           ;UI.c: 159: if (inputHandler()
  8573                           ;UI.c: 162: ){
  8574  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  8575  000FB6  502A               	movf	?_inputHandler,w,c
  8576  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  8577  000FBA  A4D8               	btfss	status,2,c
  8578  000FBC  D112               	goto	i2l5452
  8579  000FBE  D146               	goto	i2l403
  8580  000FC0                     i2l5304:
  8581                           
  8582                           ;UI.c: 166: change_state_to_menu_11();
  8583  000FC0  EC96  F012         	call	_change_state_to_menu_11	;wreg free
  8584                           
  8585                           ;UI.c: 167: break;
  8586  000FC4  D143               	goto	i2l403
  8587  000FC6                     i2l5306:
  8588                           
  8589                           ;UI.c: 170: if(up){
  8590  000FC6  5077               	movf	_up,w,c
  8591  000FC8  1078               	iorwf	_up+1,w,c
  8592  000FCA  B4D8               	btfsc	status,2,c
  8593  000FCC  D003               	goto	i2l5310
  8594                           
  8595                           ;UI.c: 171: change_state_to_menu_23();
  8596  000FCE  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8597                           
  8598                           ;UI.c: 172: }
  8599  000FD2  D13C               	goto	i2l403
  8600  000FD4                     i2l5310:
  8601                           
  8602                           ;UI.c: 173: else if(down){
  8603  000FD4  5065               	movf	_down,w,c
  8604  000FD6  1066               	iorwf	_down+1,w,c
  8605  000FD8  B4D8               	btfsc	status,2,c
  8606  000FDA  D003               	goto	i2l5314
  8607                           
  8608                           ;UI.c: 174: change_state_to_menu_12();
  8609  000FDC  EC66  F012         	call	i2_change_state_to_menu_12	;wreg free
  8610                           
  8611                           ;UI.c: 175: }
  8612  000FE0  D135               	goto	i2l403
  8613  000FE2                     i2l5314:
  8614                           
  8615                           ;UI.c: 176: else if(enter){
  8616  000FE2  5067               	movf	_enter,w,c
  8617  000FE4  1068               	iorwf	_enter+1,w,c
  8618  000FE6  B4D8               	btfsc	status,2,c
  8619  000FE8  D131               	goto	i2l403
  8620                           
  8621                           ;UI.c: 177: change_state_to_menu_start();
  8622  000FEA  EC96  F013         	call	i2_change_state_to_menu_start	;wreg free
  8623                           
  8624                           ;UI.c: 178: }
  8625                           ;UI.c: 179: break;
  8626  000FEE  D12E               	goto	i2l403
  8627  000FF0                     i2l5318:
  8628                           
  8629                           ;UI.c: 182: if(up){
  8630  000FF0  5077               	movf	_up,w,c
  8631  000FF2  1078               	iorwf	_up+1,w,c
  8632  000FF4  B4D8               	btfsc	status,2,c
  8633  000FF6  D003               	goto	i2l5322
  8634                           
  8635                           ;UI.c: 183: change_state_to_menu_11();
  8636  000FF8  EC96  F012         	call	_change_state_to_menu_11	;wreg free
  8637                           
  8638                           ;UI.c: 184: }
  8639  000FFC  D127               	goto	i2l403
  8640  000FFE                     i2l5322:
  8641                           
  8642                           ;UI.c: 185: else if(down){
  8643  000FFE  5065               	movf	_down,w,c
  8644  001000  1066               	iorwf	_down+1,w,c
  8645  001002  B4D8               	btfsc	status,2,c
  8646  001004  D011               	goto	i2l5338
  8647                           
  8648                           ;UI.c: 186: change_state_to_menu_23();
  8649  001006  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8650                           
  8651                           ;UI.c: 187: }
  8652  00100A  D120               	goto	i2l403
  8653  00100C                     i2l5330:
  8654                           
  8655                           ;UI.c: 194: if(up){
  8656  00100C  5077               	movf	_up,w,c
  8657  00100E  1078               	iorwf	_up+1,w,c
  8658  001010  B4D8               	btfsc	status,2,c
  8659  001012  D003               	goto	i2l5334
  8660                           
  8661                           ;UI.c: 195: change_state_to_menu_11();
  8662  001014  EC96  F012         	call	_change_state_to_menu_11	;wreg free
  8663                           
  8664                           ;UI.c: 196: }
  8665  001018  D119               	goto	i2l403
  8666  00101A                     i2l5334:
  8667                           
  8668                           ;UI.c: 197: else if(down){
  8669  00101A  5065               	movf	_down,w,c
  8670  00101C  1066               	iorwf	_down+1,w,c
  8671  00101E  B4D8               	btfsc	status,2,c
  8672  001020  D003               	goto	i2l5338
  8673                           
  8674                           ;UI.c: 198: change_state_to_menu_23();
  8675  001022  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8676                           
  8677                           ;UI.c: 199: }
  8678  001026  D112               	goto	i2l403
  8679  001028                     i2l5338:
  8680                           
  8681                           ;UI.c: 200: else if(enter){
  8682  001028  5067               	movf	_enter,w,c
  8683  00102A  1068               	iorwf	_enter+1,w,c
  8684  00102C  B4D8               	btfsc	status,2,c
  8685  00102E  D10E               	goto	i2l403
  8686                           
  8687                           ;UI.c: 201: machine_state = Sorting_state;
  8688  001030  0E01               	movlw	1
  8689  001032  0100               	movlb	0	; () banked
  8690  001034  6FF7               	movwf	_machine_state& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;UI.c: 202: }
  8694                           ;UI.c: 203: break;
  8695                           
  8696                           ; BSR set to: 0
  8697                           
  8698                           ; BSR set to: 0
  8699  001036  D10A               	goto	i2l403
  8700  001038                     i2l5342:
  8701                           
  8702                           ;UI.c: 206: if(up){
  8703  001038  5077               	movf	_up,w,c
  8704  00103A  1078               	iorwf	_up+1,w,c
  8705  00103C  B4D8               	btfsc	status,2,c
  8706  00103E  D003               	goto	i2l5346
  8707                           
  8708                           ;UI.c: 207: change_state_to_menu_22();
  8709  001040  EC4E  F012         	call	i2_change_state_to_menu_22	;wreg free
  8710                           
  8711                           ;UI.c: 208: }
  8712  001044  D103               	goto	i2l403
  8713  001046                     i2l5346:
  8714                           
  8715                           ;UI.c: 209: else if(down){
  8716  001046  5065               	movf	_down,w,c
  8717  001048  1066               	iorwf	_down+1,w,c
  8718  00104A  B4D8               	btfsc	status,2,c
  8719  00104C  D003               	goto	i2l5350
  8720                           
  8721                           ;UI.c: 210: change_state_to_menu_11();
  8722  00104E  EC96  F012         	call	_change_state_to_menu_11	;wreg free
  8723                           
  8724                           ;UI.c: 211: }
  8725  001052  D0FC               	goto	i2l403
  8726  001054                     i2l5350:
  8727                           
  8728                           ;UI.c: 212: else if(enter){
  8729  001054  5067               	movf	_enter,w,c
  8730  001056  1068               	iorwf	_enter+1,w,c
  8731  001058  B4D8               	btfsc	status,2,c
  8732  00105A  D0F8               	goto	i2l403
  8733                           
  8734                           ;UI.c: 213: change_state_to_logs_11();
  8735  00105C  EC0E  F013         	call	_change_state_to_logs_11	;wreg free
  8736                           
  8737                           ;UI.c: 214: }
  8738                           ;UI.c: 215: break;
  8739  001060  D0F5               	goto	i2l403
  8740  001062                     i2l5354:
  8741                           
  8742                           ;UI.c: 218: if(up){
  8743  001062  5077               	movf	_up,w,c
  8744  001064  1078               	iorwf	_up+1,w,c
  8745  001066  B4D8               	btfsc	status,2,c
  8746  001068  D003               	goto	i2l5358
  8747                           
  8748                           ;UI.c: 219: change_state_to_logs_34();
  8749  00106A  ECAE  F012         	call	_change_state_to_logs_34	;wreg free
  8750                           
  8751                           ;UI.c: 220: }
  8752  00106E  D0EE               	goto	i2l403
  8753  001070                     i2l5358:
  8754                           
  8755                           ;UI.c: 221: else if(down){
  8756  001070  5065               	movf	_down,w,c
  8757  001072  1066               	iorwf	_down+1,w,c
  8758  001074  B4D8               	btfsc	status,2,c
  8759  001076  D003               	goto	i2l5362
  8760                           
  8761                           ;UI.c: 222: change_state_to_logs_12();
  8762  001078  ECF6  F012         	call	_change_state_to_logs_12	;wreg free
  8763                           
  8764                           ;UI.c: 223: }
  8765  00107C  D0E7               	goto	i2l403
  8766  00107E                     i2l5362:
  8767                           
  8768                           ;UI.c: 224: else if(enter){
  8769  00107E  5067               	movf	_enter,w,c
  8770  001080  1068               	iorwf	_enter+1,w,c
  8771  001082  B4D8               	btfsc	status,2,c
  8772  001084  D007               	goto	i2l5366
  8773                           
  8774                           ;UI.c: 225: dispLogs(1);
  8775  001086  0E00               	movlw	0
  8776  001088  6E02               	movwf	dispLogs@myLog+1,c
  8777  00108A  0E01               	movlw	1
  8778  00108C  6E01               	movwf	dispLogs@myLog,c
  8779  00108E  EC23  F014         	call	_dispLogs	;wreg free
  8780                           
  8781                           ;UI.c: 226: }
  8782  001092  D0DC               	goto	i2l403
  8783  001094                     i2l5366:
  8784                           
  8785                           ;UI.c: 227: else if(back){
  8786  001094  5061               	movf	_back,w,c
  8787  001096  1062               	iorwf	_back+1,w,c
  8788  001098  B4D8               	btfsc	status,2,c
  8789  00109A  D0D8               	goto	i2l403
  8790                           
  8791                           ;UI.c: 228: change_state_to_menu_23();
  8792  00109C  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8793                           
  8794                           ;UI.c: 229: }
  8795                           ;UI.c: 230: break;
  8796  0010A0  D0D5               	goto	i2l403
  8797  0010A2                     i2l5370:
  8798                           
  8799                           ;UI.c: 233: if(up){
  8800  0010A2  5077               	movf	_up,w,c
  8801  0010A4  1078               	iorwf	_up+1,w,c
  8802  0010A6  B4D8               	btfsc	status,2,c
  8803  0010A8  D003               	goto	i2l5374
  8804                           
  8805                           ;UI.c: 234: change_state_to_logs_11();
  8806  0010AA  EC0E  F013         	call	_change_state_to_logs_11	;wreg free
  8807                           
  8808                           ;UI.c: 235: }
  8809  0010AE  D0CE               	goto	i2l403
  8810  0010B0                     i2l5374:
  8811                           
  8812                           ;UI.c: 236: else if(down){
  8813  0010B0  5065               	movf	_down,w,c
  8814  0010B2  1066               	iorwf	_down+1,w,c
  8815  0010B4  B4D8               	btfsc	status,2,c
  8816  0010B6  D003               	goto	i2l5378
  8817                           
  8818                           ;UI.c: 237: change_state_to_logs_23();
  8819  0010B8  EC54  F013         	call	_change_state_to_logs_23	;wreg free
  8820                           
  8821                           ;UI.c: 238: }
  8822  0010BC  D0C7               	goto	i2l403
  8823  0010BE                     i2l5378:
  8824                           
  8825                           ;UI.c: 239: else if(enter){
  8826  0010BE  5067               	movf	_enter,w,c
  8827  0010C0  1068               	iorwf	_enter+1,w,c
  8828  0010C2  B4D8               	btfsc	status,2,c
  8829  0010C4  D007               	goto	i2l5382
  8830                           
  8831                           ;UI.c: 240: dispLogs(2);
  8832  0010C6  0E00               	movlw	0
  8833  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  8834  0010CA  0E02               	movlw	2
  8835  0010CC  6E01               	movwf	dispLogs@myLog,c
  8836  0010CE  EC23  F014         	call	_dispLogs	;wreg free
  8837                           
  8838                           ;UI.c: 241: }
  8839  0010D2  D0BC               	goto	i2l403
  8840  0010D4                     i2l5382:
  8841                           
  8842                           ;UI.c: 242: else if(back){
  8843  0010D4  5061               	movf	_back,w,c
  8844  0010D6  1062               	iorwf	_back+1,w,c
  8845  0010D8  B4D8               	btfsc	status,2,c
  8846  0010DA  D0B8               	goto	i2l403
  8847                           
  8848                           ;UI.c: 243: change_state_to_menu_23();
  8849  0010DC  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8850                           
  8851                           ;UI.c: 244: }
  8852                           ;UI.c: 245: break;
  8853  0010E0  D0B5               	goto	i2l403
  8854  0010E2                     i2l5386:
  8855                           
  8856                           ;UI.c: 248: if(up){
  8857  0010E2  5077               	movf	_up,w,c
  8858  0010E4  1078               	iorwf	_up+1,w,c
  8859  0010E6  B4D8               	btfsc	status,2,c
  8860  0010E8  D003               	goto	i2l5390
  8861                           
  8862                           ;UI.c: 249: change_state_to_logs_11();
  8863  0010EA  EC0E  F013         	call	_change_state_to_logs_11	;wreg free
  8864                           
  8865                           ;UI.c: 250: }
  8866  0010EE  D0AE               	goto	i2l403
  8867  0010F0                     i2l5390:
  8868                           
  8869                           ;UI.c: 251: else if(down){
  8870  0010F0  5065               	movf	_down,w,c
  8871  0010F2  1066               	iorwf	_down+1,w,c
  8872  0010F4  B4D8               	btfsc	status,2,c
  8873  0010F6  D003               	goto	i2l5394
  8874                           
  8875                           ;UI.c: 252: change_state_to_logs_23();
  8876  0010F8  EC54  F013         	call	_change_state_to_logs_23	;wreg free
  8877                           
  8878                           ;UI.c: 253: }
  8879  0010FC  D0A7               	goto	i2l403
  8880  0010FE                     i2l5394:
  8881                           
  8882                           ;UI.c: 254: else if(enter){
  8883  0010FE  5067               	movf	_enter,w,c
  8884  001100  1068               	iorwf	_enter+1,w,c
  8885  001102  B4D8               	btfsc	status,2,c
  8886  001104  D007               	goto	i2l5398
  8887                           
  8888                           ;UI.c: 255: dispLogs(2);
  8889  001106  0E00               	movlw	0
  8890  001108  6E02               	movwf	dispLogs@myLog+1,c
  8891  00110A  0E02               	movlw	2
  8892  00110C  6E01               	movwf	dispLogs@myLog,c
  8893  00110E  EC23  F014         	call	_dispLogs	;wreg free
  8894                           
  8895                           ;UI.c: 256: }
  8896  001112  D09C               	goto	i2l403
  8897  001114                     i2l5398:
  8898                           
  8899                           ;UI.c: 257: else if(back){
  8900  001114  5061               	movf	_back,w,c
  8901  001116  1062               	iorwf	_back+1,w,c
  8902  001118  B4D8               	btfsc	status,2,c
  8903  00111A  D098               	goto	i2l403
  8904                           
  8905                           ;UI.c: 258: change_state_to_menu_23();
  8906  00111C  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8907                           
  8908                           ;UI.c: 259: }
  8909                           ;UI.c: 260: break;
  8910  001120  D095               	goto	i2l403
  8911  001122                     i2l5402:
  8912                           
  8913                           ;UI.c: 263: if(up){
  8914  001122  5077               	movf	_up,w,c
  8915  001124  1078               	iorwf	_up+1,w,c
  8916  001126  B4D8               	btfsc	status,2,c
  8917  001128  D003               	goto	i2l5406
  8918                           
  8919                           ;UI.c: 264: change_state_to_logs_22();
  8920  00112A  ECDE  F012         	call	_change_state_to_logs_22	;wreg free
  8921                           
  8922                           ;UI.c: 265: }
  8923  00112E  D08E               	goto	i2l403
  8924  001130                     i2l5406:
  8925                           
  8926                           ;UI.c: 266: else if(down){
  8927  001130  5065               	movf	_down,w,c
  8928  001132  1066               	iorwf	_down+1,w,c
  8929  001134  B4D8               	btfsc	status,2,c
  8930  001136  D003               	goto	i2l5410
  8931                           
  8932                           ;UI.c: 267: change_state_to_logs_34();
  8933  001138  ECAE  F012         	call	_change_state_to_logs_34	;wreg free
  8934                           
  8935                           ;UI.c: 268: }
  8936  00113C  D087               	goto	i2l403
  8937  00113E                     i2l5410:
  8938                           
  8939                           ;UI.c: 269: else if(enter){
  8940  00113E  5067               	movf	_enter,w,c
  8941  001140  1068               	iorwf	_enter+1,w,c
  8942  001142  B4D8               	btfsc	status,2,c
  8943  001144  D007               	goto	i2l5414
  8944                           
  8945                           ;UI.c: 270: dispLogs(3);
  8946  001146  0E00               	movlw	0
  8947  001148  6E02               	movwf	dispLogs@myLog+1,c
  8948  00114A  0E03               	movlw	3
  8949  00114C  6E01               	movwf	dispLogs@myLog,c
  8950  00114E  EC23  F014         	call	_dispLogs	;wreg free
  8951                           
  8952                           ;UI.c: 271: }
  8953  001152  D07C               	goto	i2l403
  8954  001154                     i2l5414:
  8955                           
  8956                           ;UI.c: 272: else if(back){
  8957  001154  5061               	movf	_back,w,c
  8958  001156  1062               	iorwf	_back+1,w,c
  8959  001158  B4D8               	btfsc	status,2,c
  8960  00115A  D078               	goto	i2l403
  8961                           
  8962                           ;UI.c: 273: change_state_to_menu_23();
  8963  00115C  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  8964                           
  8965                           ;UI.c: 274: }
  8966                           ;UI.c: 275: break;
  8967  001160  D075               	goto	i2l403
  8968  001162                     i2l5418:
  8969                           
  8970                           ;UI.c: 278: if(up){
  8971  001162  5077               	movf	_up,w,c
  8972  001164  1078               	iorwf	_up+1,w,c
  8973  001166  B4D8               	btfsc	status,2,c
  8974  001168  D003               	goto	i2l5422
  8975                           
  8976                           ;UI.c: 279: change_state_to_logs_22();
  8977  00116A  ECDE  F012         	call	_change_state_to_logs_22	;wreg free
  8978                           
  8979                           ;UI.c: 280: }
  8980  00116E  D06E               	goto	i2l403
  8981  001170                     i2l5422:
  8982                           
  8983                           ;UI.c: 281: else if(down){
  8984  001170  5065               	movf	_down,w,c
  8985  001172  1066               	iorwf	_down+1,w,c
  8986  001174  B4D8               	btfsc	status,2,c
  8987  001176  D003               	goto	i2l5426
  8988                           
  8989                           ;UI.c: 282: change_state_to_logs_34();
  8990  001178  ECAE  F012         	call	_change_state_to_logs_34	;wreg free
  8991                           
  8992                           ;UI.c: 283: }
  8993  00117C  D067               	goto	i2l403
  8994  00117E                     i2l5426:
  8995                           
  8996                           ;UI.c: 284: else if(enter){
  8997  00117E  5067               	movf	_enter,w,c
  8998  001180  1068               	iorwf	_enter+1,w,c
  8999  001182  B4D8               	btfsc	status,2,c
  9000  001184  D007               	goto	i2l5430
  9001                           
  9002                           ;UI.c: 285: dispLogs(3);
  9003  001186  0E00               	movlw	0
  9004  001188  6E02               	movwf	dispLogs@myLog+1,c
  9005  00118A  0E03               	movlw	3
  9006  00118C  6E01               	movwf	dispLogs@myLog,c
  9007  00118E  EC23  F014         	call	_dispLogs	;wreg free
  9008                           
  9009                           ;UI.c: 286: }
  9010  001192  D05C               	goto	i2l403
  9011  001194                     i2l5430:
  9012                           
  9013                           ;UI.c: 287: else if(back){
  9014  001194  5061               	movf	_back,w,c
  9015  001196  1062               	iorwf	_back+1,w,c
  9016  001198  B4D8               	btfsc	status,2,c
  9017  00119A  D058               	goto	i2l403
  9018                           
  9019                           ;UI.c: 288: change_state_to_menu_23();
  9020  00119C  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  9021                           
  9022                           ;UI.c: 289: }
  9023                           ;UI.c: 290: break;
  9024  0011A0  D055               	goto	i2l403
  9025  0011A2                     i2l5434:
  9026                           
  9027                           ;UI.c: 293: if(up){
  9028  0011A2  5077               	movf	_up,w,c
  9029  0011A4  1078               	iorwf	_up+1,w,c
  9030  0011A6  B4D8               	btfsc	status,2,c
  9031  0011A8  D003               	goto	i2l5438
  9032                           
  9033                           ;UI.c: 294: change_state_to_logs_33();
  9034  0011AA  ECC6  F012         	call	_change_state_to_logs_33	;wreg free
  9035                           
  9036                           ;UI.c: 295: }
  9037  0011AE  D04E               	goto	i2l403
  9038  0011B0                     i2l5438:
  9039                           
  9040                           ;UI.c: 296: else if(down){
  9041  0011B0  5065               	movf	_down,w,c
  9042  0011B2  1066               	iorwf	_down+1,w,c
  9043  0011B4  B4D8               	btfsc	status,2,c
  9044  0011B6  D003               	goto	i2l5442
  9045                           
  9046                           ;UI.c: 297: change_state_to_logs_11();
  9047  0011B8  EC0E  F013         	call	_change_state_to_logs_11	;wreg free
  9048                           
  9049                           ;UI.c: 298: }
  9050  0011BC  D047               	goto	i2l403
  9051  0011BE                     i2l5442:
  9052                           
  9053                           ;UI.c: 299: else if(enter){
  9054  0011BE  5067               	movf	_enter,w,c
  9055  0011C0  1068               	iorwf	_enter+1,w,c
  9056  0011C2  B4D8               	btfsc	status,2,c
  9057  0011C4  D007               	goto	i2l5446
  9058                           
  9059                           ;UI.c: 300: dispLogs(4);
  9060  0011C6  0E00               	movlw	0
  9061  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9062  0011CA  0E04               	movlw	4
  9063  0011CC  6E01               	movwf	dispLogs@myLog,c
  9064  0011CE  EC23  F014         	call	_dispLogs	;wreg free
  9065                           
  9066                           ;UI.c: 301: }
  9067  0011D2  D03C               	goto	i2l403
  9068  0011D4                     i2l5446:
  9069                           
  9070                           ;UI.c: 302: else if(back){
  9071  0011D4  5061               	movf	_back,w,c
  9072  0011D6  1062               	iorwf	_back+1,w,c
  9073  0011D8  B4D8               	btfsc	status,2,c
  9074  0011DA  D038               	goto	i2l403
  9075                           
  9076                           ;UI.c: 303: change_state_to_menu_23();
  9077  0011DC  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
  9078                           
  9079                           ;UI.c: 309: }
  9080                           
  9081                           ;UI.c: 308: break;
  9082                           
  9083                           ;UI.c: 307: default:
  9084                           
  9085                           ;UI.c: 304: }
  9086                           ;UI.c: 305: break;
  9087  0011E0  D035               	goto	i2l403
  9088  0011E2                     i2l5452:
  9089  0011E2  C0E5  F043         	movff	_cur_state,??_updateMenu
  9090  0011E6  C0E6  F044         	movff	_cur_state+1,??_updateMenu+1
  9091                           
  9092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9093                           ; Switch size 1, requested type "space"
  9094                           ; Number of cases is 3, Range of values is 0 to 4
  9095                           ; switch strategies available:
  9096                           ; Name         Instructions Cycles
  9097                           ; simple_byte           10     6 (average)
  9098                           ;	Chosen strategy is simple_byte
  9099  0011EA  5044               	movf	??_updateMenu+1,w,c
  9100  0011EC  0A00               	xorlw	0	; case 0
  9101  0011EE  B4D8               	btfsc	status,2,c
  9102  0011F0  D007               	goto	i2l5822
  9103  0011F2  0A03               	xorlw	3	; case 3
  9104  0011F4  B4D8               	btfsc	status,2,c
  9105  0011F6  D015               	goto	i2l5824
  9106  0011F8  0A07               	xorlw	7	; case 4
  9107  0011FA  B4D8               	btfsc	status,2,c
  9108  0011FC  D020               	goto	i2l5826
  9109  0011FE  D026               	goto	i2l403
  9110  001200                     i2l5822:
  9111                           
  9112                           ; Switch size 1, requested type "space"
  9113                           ; Number of cases is 5, Range of values is 0 to 23
  9114                           ; switch strategies available:
  9115                           ; Name         Instructions Cycles
  9116                           ; simple_byte           16     9 (average)
  9117                           ;	Chosen strategy is simple_byte
  9118  001200  5043               	movf	??_updateMenu,w,c
  9119  001202  0A00               	xorlw	0	; case 0
  9120  001204  B4D8               	btfsc	status,2,c
  9121  001206  D6DC               	goto	i2l5304
  9122  001208  0A0B               	xorlw	11	; case 11
  9123  00120A  B4D8               	btfsc	status,2,c
  9124  00120C  D6DC               	goto	i2l5306
  9125  00120E  0A07               	xorlw	7	; case 12
  9126  001210  B4D8               	btfsc	status,2,c
  9127  001212  D6EE               	goto	i2l5318
  9128  001214  0A1A               	xorlw	26	; case 22
  9129  001216  B4D8               	btfsc	status,2,c
  9130  001218  D6F9               	goto	i2l5330
  9131  00121A  0A01               	xorlw	1	; case 23
  9132  00121C  B4D8               	btfsc	status,2,c
  9133  00121E  D70C               	goto	i2l5342
  9134  001220  D015               	goto	i2l403
  9135  001222                     i2l5824:
  9136                           
  9137                           ; Switch size 1, requested type "space"
  9138                           ; Number of cases is 4, Range of values is 243 to 255
  9139                           ; switch strategies available:
  9140                           ; Name         Instructions Cycles
  9141                           ; simple_byte           13     7 (average)
  9142                           ;	Chosen strategy is simple_byte
  9143  001222  5043               	movf	??_updateMenu,w,c
  9144  001224  0AF3               	xorlw	243	; case 243
  9145  001226  B4D8               	btfsc	status,2,c
  9146  001228  D71C               	goto	i2l5354
  9147  00122A  0A07               	xorlw	7	; case 244
  9148  00122C  B4D8               	btfsc	status,2,c
  9149  00122E  D739               	goto	i2l5370
  9150  001230  0A0A               	xorlw	10	; case 254
  9151  001232  B4D8               	btfsc	status,2,c
  9152  001234  D756               	goto	i2l5386
  9153  001236  0A01               	xorlw	1	; case 255
  9154  001238  B4D8               	btfsc	status,2,c
  9155  00123A  D773               	goto	i2l5402
  9156  00123C  D007               	goto	i2l403
  9157  00123E                     i2l5826:
  9158                           
  9159                           ; Switch size 1, requested type "space"
  9160                           ; Number of cases is 2, Range of values is 9 to 10
  9161                           ; switch strategies available:
  9162                           ; Name         Instructions Cycles
  9163                           ; simple_byte            7     4 (average)
  9164                           ;	Chosen strategy is simple_byte
  9165  00123E  5043               	movf	??_updateMenu,w,c
  9166  001240  0A09               	xorlw	9	; case 9
  9167  001242  B4D8               	btfsc	status,2,c
  9168  001244  D78E               	goto	i2l5418
  9169  001246  0A03               	xorlw	3	; case 10
  9170  001248  B4D8               	btfsc	status,2,c
  9171  00124A  D7AB               	goto	i2l5434
  9172  00124C                     i2l403:
  9173                           
  9174                           ;UI.c: 310: }
  9175                           ;UI.c: 311: (INTCONbits.GIE = 1);
  9176  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9177  00124E  0012               	return		;funcret
  9178  001250                     __end_of_updateMenu:
  9179                           	opt stack 0
  9180                           pclatu	equ	0xFFB
  9181                           pclath	equ	0xFFA
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           intcon3	equ	0xFF0
  9190                           indf0	equ	0xFEF
  9191                           postinc0	equ	0xFEE
  9192                           fsr0h	equ	0xFEA
  9193                           fsr0l	equ	0xFE9
  9194                           wreg	equ	0xFE8
  9195                           postdec1	equ	0xFE5
  9196                           fsr1h	equ	0xFE2
  9197                           fsr1l	equ	0xFE1
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           fsr2h	equ	0xFDA
  9202                           fsr2l	equ	0xFD9
  9203                           status	equ	0xFD8
  9204                           
  9205 ;; *************** function i2_change_state_to_menu_start *****************
  9206 ;; Defined at:
  9207 ;;		line 415 in file "UI.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;		None
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;Total ram usage:        0 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    4
  9228 ;; This function calls:
  9229 ;;		i2_lcdInst
  9230 ;;		i2_printRTC
  9231 ;;		i2_printf
  9232 ;; This function is called by:
  9233 ;;		_updateMenu
  9234 ;; This function uses a non-reentrant model
  9235 ;;
  9236                           
  9237                           	psect	text42
  9238  00272C                     __ptext42:
  9239                           	opt stack 0
  9240  00272C                     i2_change_state_to_menu_start:
  9241                           	opt stack 18
  9242                           
  9243                           ;UI.c: 416: cur_state = 0;
  9244                           
  9245                           ;incstack = 0
  9246  00272C  0E00               	movlw	0
  9247  00272E  0100               	movlb	0	; () banked
  9248  002730  6FE6               	movwf	(_cur_state+1)& (0+255),b
  9249  002732  0E00               	movlw	0
  9250  002734  6FE5               	movwf	_cur_state& (0+255),b
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;UI.c: 418: lcdInst(0b10000000);;
  9254  002736  0E80               	movlw	128
  9255  002738  EC55  F014         	call	i2_lcdInst
  9256                           
  9257                           ;UI.c: 419: printRTC();
  9258  00273C  EC28  F009         	call	i2_printRTC	;wreg free
  9259                           
  9260                           ;UI.c: 420: lcdInst(0b11000000);;
  9261  002740  0EC0               	movlw	192
  9262  002742  EC55  F014         	call	i2_lcdInst
  9263                           
  9264                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  9265  002746  0E97               	movlw	low STR_15
  9266  002748  6E0D               	movwf	i2printf@f,c
  9267  00274A  0EFF               	movlw	high STR_15
  9268  00274C  6E0E               	movwf	i2printf@f+1,c
  9269  00274E  ECC0  F004         	call	i2_printf	;wreg free
  9270  002752  0012               	return		;funcret
  9271  002754                     __end_ofi2_change_state_to_menu_start:
  9272                           	opt stack 0
  9273                           pclatu	equ	0xFFB
  9274                           pclath	equ	0xFFA
  9275                           tblptru	equ	0xFF8
  9276                           tblptrh	equ	0xFF7
  9277                           tblptrl	equ	0xFF6
  9278                           tablat	equ	0xFF5
  9279                           prodh	equ	0xFF4
  9280                           prodl	equ	0xFF3
  9281                           intcon	equ	0xFF2
  9282                           intcon3	equ	0xFF0
  9283                           indf0	equ	0xFEF
  9284                           postinc0	equ	0xFEE
  9285                           fsr0h	equ	0xFEA
  9286                           fsr0l	equ	0xFE9
  9287                           wreg	equ	0xFE8
  9288                           postdec1	equ	0xFE5
  9289                           fsr1h	equ	0xFE2
  9290                           fsr1l	equ	0xFE1
  9291                           indf2	equ	0xFDF
  9292                           postinc2	equ	0xFDE
  9293                           postdec2	equ	0xFDD
  9294                           fsr2h	equ	0xFDA
  9295                           fsr2l	equ	0xFD9
  9296                           status	equ	0xFD8
  9297                           
  9298 ;; *************** function i2_printRTC *****************
  9299 ;; Defined at:
  9300 ;;		line 61 in file "RTC.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;  printRTC       14   44[COMRAM] int [7]
  9305 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9306 ;;  printRTC        2   64[COMRAM] int 
  9307 ;;  printRTC        2   58[COMRAM] int 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      void 
  9310 ;; Registers used:
  9311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:       25 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    3
  9324 ;; This function calls:
  9325 ;;		i2_getRTC
  9326 ;;		i2_lcdInst
  9327 ;;		i2_printf
  9328 ;;		i2_strcpy
  9329 ;; This function is called by:
  9330 ;;		i2_change_state_to_menu_start
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           	psect	text43
  9335  001250                     __ptext43:
  9336                           	opt stack 0
  9337  001250                     i2_printRTC:
  9338                           	opt stack 18
  9339                           
  9340                           ;RTC.c: 62: getRTC();
  9341                           
  9342                           ;incstack = 0
  9343  001250  ECD1  F00F         	call	i2_getRTC	;wreg free
  9344                           
  9345                           ;RTC.c: 63: char month[] = "MMM";
  9346  001254  C0F8  F03D         	movff	printRTC@F3185,i2printRTC@month
  9347  001258  C0F9  F03E         	movff	printRTC@F3185+1,i2printRTC@month+1
  9348  00125C  C0FA  F03F         	movff	printRTC@F3185+2,i2printRTC@month+2
  9349  001260  C0FB  F040         	movff	printRTC@F3185+3,i2printRTC@month+3
  9350                           
  9351                           ;RTC.c: 64: int INT_time[7];
  9352                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9353  001264  0E00               	movlw	0
  9354  001266  6E42               	movwf	i2printRTC@i+1,c
  9355  001268  0E00               	movlw	0
  9356  00126A  6E41               	movwf	i2printRTC@i,c
  9357  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
  9358  00126E  D006               	goto	i2l4614
  9359  001270  5042               	movf	i2printRTC@i+1,w,c
  9360  001272  E135               	bnz	i2l896
  9361  001274  0E07               	movlw	7
  9362  001276  5C41               	subwf	i2printRTC@i,w,c
  9363  001278  B0D8               	btfsc	status,0,c
  9364  00127A  D031               	goto	i2l896
  9365  00127C                     i2l4614:
  9366                           
  9367                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9368  00127C  0ED4               	movlw	low _time
  9369  00127E  2441               	addwf	i2printRTC@i,w,c
  9370  001280  6ED9               	movwf	fsr2l,c
  9371  001282  0E00               	movlw	high _time
  9372  001284  2042               	addwfc	i2printRTC@i+1,w,c
  9373  001286  6EDA               	movwf	fsr2h,c
  9374  001288  50DF               	movf	indf2,w,c
  9375  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
  9376  00128C  3A2A               	swapf	??i2_printRTC,f,c
  9377  00128E  0E0F               	movlw	15
  9378  001290  162A               	andwf	??i2_printRTC,f,c
  9379  001292  0E0F               	movlw	15
  9380  001294  162A               	andwf	??i2_printRTC,f,c
  9381  001296  502A               	movf	??i2_printRTC,w,c
  9382  001298  0D0A               	mullw	10
  9383  00129A  0ED4               	movlw	low _time
  9384  00129C  2441               	addwf	i2printRTC@i,w,c
  9385  00129E  6ED9               	movwf	fsr2l,c
  9386  0012A0  0E00               	movlw	high _time
  9387  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
  9388  0012A4  6EDA               	movwf	fsr2h,c
  9389  0012A6  50DF               	movf	indf2,w,c
  9390  0012A8  0B0F               	andlw	15
  9391  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9392  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9393  0012AE  50F3               	movf	prodl,w,c
  9394  0012B0  262B               	addwf	??i2_printRTC+1,f,c
  9395  0012B2  50F4               	movf	prodh,w,c
  9396  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
  9397  0012B6  90D8               	bcf	status,0,c
  9398  0012B8  3441               	rlcf	i2printRTC@i,w,c
  9399  0012BA  6ED9               	movwf	fsr2l,c
  9400  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
  9401  0012BE  6EDA               	movwf	fsr2h,c
  9402  0012C0  0E2D               	movlw	low i2printRTC@INT_time
  9403  0012C2  26D9               	addwf	fsr2l,f,c
  9404  0012C4  0E00               	movlw	high i2printRTC@INT_time
  9405  0012C6  22DA               	addwfc	fsr2h,f,c
  9406  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9407  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9408  0012D0  4A41               	infsnz	i2printRTC@i,f,c
  9409  0012D2  2A42               	incf	i2printRTC@i+1,f,c
  9410  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
  9411  0012D6  D7D2               	goto	i2l4614
  9412  0012D8  5042               	movf	i2printRTC@i+1,w,c
  9413  0012DA  E101               	bnz	i2u327_40
  9414  0012DC  D7CB               	goto	L2
  9415  0012DE                     i2u327_40:
  9416  0012DE                     i2l896:
  9417                           
  9418                           ;RTC.c: 67: }
  9419                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9420  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9421  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9422                           
  9423                           ;RTC.c: 69: switch(RTC_month){
  9424  0012E6  D084               	goto	i2l4646
  9425  0012E8                     i2l4620:
  9426                           
  9427                           ;RTC.c: 71: strcpy(month, "Jan");
  9428  0012E8  0E3D               	movlw	low i2printRTC@month
  9429  0012EA  6E01               	movwf	i2strcpy@to,c
  9430  0012EC  0E00               	movlw	high i2printRTC@month
  9431  0012EE  6E02               	movwf	i2strcpy@to+1,c
  9432  0012F0  0EDB               	movlw	low STR_36
  9433  0012F2  6E03               	movwf	i2strcpy@from,c
  9434  0012F4  0EFF               	movlw	high STR_36
  9435  0012F6  6E04               	movwf	i2strcpy@from+1,c
  9436  0012F8  EC35  F012         	call	i2_strcpy	;wreg free
  9437                           
  9438                           ;RTC.c: 72: break;
  9439  0012FC  D0A6               	goto	i2l4648
  9440  0012FE                     i2l4622:
  9441                           
  9442                           ;RTC.c: 74: strcpy(month, "Feb");
  9443  0012FE  0E3D               	movlw	low i2printRTC@month
  9444  001300  6E01               	movwf	i2strcpy@to,c
  9445  001302  0E00               	movlw	high i2printRTC@month
  9446  001304  6E02               	movwf	i2strcpy@to+1,c
  9447  001306  0ECB               	movlw	low STR_37
  9448  001308  6E03               	movwf	i2strcpy@from,c
  9449  00130A  0EFF               	movlw	high STR_37
  9450  00130C  6E04               	movwf	i2strcpy@from+1,c
  9451  00130E  EC35  F012         	call	i2_strcpy	;wreg free
  9452                           
  9453                           ;RTC.c: 75: break;
  9454  001312  D09B               	goto	i2l4648
  9455  001314                     i2l4624:
  9456                           
  9457                           ;RTC.c: 77: strcpy(month, "Mar");
  9458  001314  0E3D               	movlw	low i2printRTC@month
  9459  001316  6E01               	movwf	i2strcpy@to,c
  9460  001318  0E00               	movlw	high i2printRTC@month
  9461  00131A  6E02               	movwf	i2strcpy@to+1,c
  9462  00131C  0EE7               	movlw	low STR_38
  9463  00131E  6E03               	movwf	i2strcpy@from,c
  9464  001320  0EFF               	movlw	high STR_38
  9465  001322  6E04               	movwf	i2strcpy@from+1,c
  9466  001324  EC35  F012         	call	i2_strcpy	;wreg free
  9467                           
  9468                           ;RTC.c: 78: break;
  9469  001328  D090               	goto	i2l4648
  9470  00132A                     i2l4626:
  9471                           
  9472                           ;RTC.c: 80: strcpy(month, "Apr");
  9473  00132A  0E3D               	movlw	low i2printRTC@month
  9474  00132C  6E01               	movwf	i2strcpy@to,c
  9475  00132E  0E00               	movlw	high i2printRTC@month
  9476  001330  6E02               	movwf	i2strcpy@to+1,c
  9477  001332  0EEB               	movlw	low STR_39
  9478  001334  6E03               	movwf	i2strcpy@from,c
  9479  001336  0EFF               	movlw	high STR_39
  9480  001338  6E04               	movwf	i2strcpy@from+1,c
  9481  00133A  EC35  F012         	call	i2_strcpy	;wreg free
  9482                           
  9483                           ;RTC.c: 81: break;
  9484  00133E  D085               	goto	i2l4648
  9485  001340                     i2l4628:
  9486                           
  9487                           ;RTC.c: 83: strcpy(month, "May");
  9488  001340  0E3D               	movlw	low i2printRTC@month
  9489  001342  6E01               	movwf	i2strcpy@to,c
  9490  001344  0E00               	movlw	high i2printRTC@month
  9491  001346  6E02               	movwf	i2strcpy@to+1,c
  9492  001348  0EF7               	movlw	low STR_40
  9493  00134A  6E03               	movwf	i2strcpy@from,c
  9494  00134C  0EFF               	movlw	high STR_40
  9495  00134E  6E04               	movwf	i2strcpy@from+1,c
  9496  001350  EC35  F012         	call	i2_strcpy	;wreg free
  9497                           
  9498                           ;RTC.c: 84: break;
  9499  001354  D07A               	goto	i2l4648
  9500  001356                     i2l4630:
  9501                           
  9502                           ;RTC.c: 86: strcpy(month, "Jun");
  9503  001356  0E3D               	movlw	low i2printRTC@month
  9504  001358  6E01               	movwf	i2strcpy@to,c
  9505  00135A  0E00               	movlw	high i2printRTC@month
  9506  00135C  6E02               	movwf	i2strcpy@to+1,c
  9507  00135E  0EDF               	movlw	low STR_41
  9508  001360  6E03               	movwf	i2strcpy@from,c
  9509  001362  0EFF               	movlw	high STR_41
  9510  001364  6E04               	movwf	i2strcpy@from+1,c
  9511  001366  EC35  F012         	call	i2_strcpy	;wreg free
  9512                           
  9513                           ;RTC.c: 87: break;
  9514  00136A  D06F               	goto	i2l4648
  9515  00136C                     i2l4632:
  9516                           
  9517                           ;RTC.c: 89: strcpy(month, "Jul");
  9518  00136C  0E3D               	movlw	low i2printRTC@month
  9519  00136E  6E01               	movwf	i2strcpy@to,c
  9520  001370  0E00               	movlw	high i2printRTC@month
  9521  001372  6E02               	movwf	i2strcpy@to+1,c
  9522  001374  0ED7               	movlw	low STR_42
  9523  001376  6E03               	movwf	i2strcpy@from,c
  9524  001378  0EFF               	movlw	high STR_42
  9525  00137A  6E04               	movwf	i2strcpy@from+1,c
  9526  00137C  EC35  F012         	call	i2_strcpy	;wreg free
  9527                           
  9528                           ;RTC.c: 90: break;
  9529  001380  D064               	goto	i2l4648
  9530  001382                     i2l4634:
  9531                           
  9532                           ;RTC.c: 92: strcpy(month, "Aug");
  9533  001382  0E3D               	movlw	low i2printRTC@month
  9534  001384  6E01               	movwf	i2strcpy@to,c
  9535  001386  0E00               	movlw	high i2printRTC@month
  9536  001388  6E02               	movwf	i2strcpy@to+1,c
  9537  00138A  0ED3               	movlw	low STR_43
  9538  00138C  6E03               	movwf	i2strcpy@from,c
  9539  00138E  0EFF               	movlw	high STR_43
  9540  001390  6E04               	movwf	i2strcpy@from+1,c
  9541  001392  EC35  F012         	call	i2_strcpy	;wreg free
  9542                           
  9543                           ;RTC.c: 93: break;
  9544  001396  D059               	goto	i2l4648
  9545  001398                     i2l4636:
  9546                           
  9547                           ;RTC.c: 95: strcpy(month, "Sep");
  9548  001398  0E3D               	movlw	low i2printRTC@month
  9549  00139A  6E01               	movwf	i2strcpy@to,c
  9550  00139C  0E00               	movlw	high i2printRTC@month
  9551  00139E  6E02               	movwf	i2strcpy@to+1,c
  9552  0013A0  0EE3               	movlw	low STR_44
  9553  0013A2  6E03               	movwf	i2strcpy@from,c
  9554  0013A4  0EFF               	movlw	high STR_44
  9555  0013A6  6E04               	movwf	i2strcpy@from+1,c
  9556  0013A8  EC35  F012         	call	i2_strcpy	;wreg free
  9557                           
  9558                           ;RTC.c: 96: break;
  9559  0013AC  D04E               	goto	i2l4648
  9560  0013AE                     i2l4638:
  9561                           
  9562                           ;RTC.c: 98: strcpy(month, "Oct");
  9563  0013AE  0E3D               	movlw	low i2printRTC@month
  9564  0013B0  6E01               	movwf	i2strcpy@to,c
  9565  0013B2  0E00               	movlw	high i2printRTC@month
  9566  0013B4  6E02               	movwf	i2strcpy@to+1,c
  9567  0013B6  0EEF               	movlw	low STR_45
  9568  0013B8  6E03               	movwf	i2strcpy@from,c
  9569  0013BA  0EFF               	movlw	high STR_45
  9570  0013BC  6E04               	movwf	i2strcpy@from+1,c
  9571  0013BE  EC35  F012         	call	i2_strcpy	;wreg free
  9572                           
  9573                           ;RTC.c: 99: break;
  9574  0013C2  D043               	goto	i2l4648
  9575  0013C4                     i2l4640:
  9576                           
  9577                           ;RTC.c: 101: strcpy(month, "Nov");
  9578  0013C4  0E3D               	movlw	low i2printRTC@month
  9579  0013C6  6E01               	movwf	i2strcpy@to,c
  9580  0013C8  0E00               	movlw	high i2printRTC@month
  9581  0013CA  6E02               	movwf	i2strcpy@to+1,c
  9582  0013CC  0EF3               	movlw	low STR_46
  9583  0013CE  6E03               	movwf	i2strcpy@from,c
  9584  0013D0  0EFF               	movlw	high STR_46
  9585  0013D2  6E04               	movwf	i2strcpy@from+1,c
  9586  0013D4  EC35  F012         	call	i2_strcpy	;wreg free
  9587                           
  9588                           ;RTC.c: 102: break;
  9589  0013D8  D038               	goto	i2l4648
  9590  0013DA                     i2l4642:
  9591                           
  9592                           ;RTC.c: 104: strcpy(month, "Dec");
  9593  0013DA  0E3D               	movlw	low i2printRTC@month
  9594  0013DC  6E01               	movwf	i2strcpy@to,c
  9595  0013DE  0E00               	movlw	high i2printRTC@month
  9596  0013E0  6E02               	movwf	i2strcpy@to+1,c
  9597  0013E2  0ECF               	movlw	low STR_47
  9598  0013E4  6E03               	movwf	i2strcpy@from,c
  9599  0013E6  0EFF               	movlw	high STR_47
  9600  0013E8  6E04               	movwf	i2strcpy@from+1,c
  9601  0013EA  EC35  F012         	call	i2_strcpy	;wreg free
  9602                           
  9603                           ;RTC.c: 106: }
  9604                           
  9605                           ;RTC.c: 105: break;
  9606  0013EE  D02D               	goto	i2l4648
  9607  0013F0                     i2l4646:
  9608  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9609  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9610                           
  9611                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9612                           ; Switch size 1, requested type "space"
  9613                           ; Number of cases is 1, Range of values is 0 to 0
  9614                           ; switch strategies available:
  9615                           ; Name         Instructions Cycles
  9616                           ; simple_byte            4     3 (average)
  9617                           ;	Chosen strategy is simple_byte
  9618  0013F8  502B               	movf	??i2_printRTC+1,w,c
  9619  0013FA  0A00               	xorlw	0	; case 0
  9620  0013FC  A4D8               	btfss	status,2,c
  9621  0013FE  D025               	goto	i2l4648
  9622                           
  9623                           ; Switch size 1, requested type "space"
  9624                           ; Number of cases is 12, Range of values is 1 to 12
  9625                           ; switch strategies available:
  9626                           ; Name         Instructions Cycles
  9627                           ; simple_byte           37    19 (average)
  9628                           ;	Chosen strategy is simple_byte
  9629  001400  502A               	movf	??i2_printRTC,w,c
  9630  001402  0A01               	xorlw	1	; case 1
  9631  001404  B4D8               	btfsc	status,2,c
  9632  001406  D770               	goto	i2l4620
  9633  001408  0A03               	xorlw	3	; case 2
  9634  00140A  B4D8               	btfsc	status,2,c
  9635  00140C  D778               	goto	i2l4622
  9636  00140E  0A01               	xorlw	1	; case 3
  9637  001410  B4D8               	btfsc	status,2,c
  9638  001412  D780               	goto	i2l4624
  9639  001414  0A07               	xorlw	7	; case 4
  9640  001416  B4D8               	btfsc	status,2,c
  9641  001418  D788               	goto	i2l4626
  9642  00141A  0A01               	xorlw	1	; case 5
  9643  00141C  B4D8               	btfsc	status,2,c
  9644  00141E  D790               	goto	i2l4628
  9645  001420  0A03               	xorlw	3	; case 6
  9646  001422  B4D8               	btfsc	status,2,c
  9647  001424  D798               	goto	i2l4630
  9648  001426  0A01               	xorlw	1	; case 7
  9649  001428  B4D8               	btfsc	status,2,c
  9650  00142A  D7A0               	goto	i2l4632
  9651  00142C  0A0F               	xorlw	15	; case 8
  9652  00142E  B4D8               	btfsc	status,2,c
  9653  001430  D7A8               	goto	i2l4634
  9654  001432  0A01               	xorlw	1	; case 9
  9655  001434  B4D8               	btfsc	status,2,c
  9656  001436  D7B0               	goto	i2l4636
  9657  001438  0A03               	xorlw	3	; case 10
  9658  00143A  B4D8               	btfsc	status,2,c
  9659  00143C  D7B8               	goto	i2l4638
  9660  00143E  0A01               	xorlw	1	; case 11
  9661  001440  B4D8               	btfsc	status,2,c
  9662  001442  D7C0               	goto	i2l4640
  9663  001444  0A07               	xorlw	7	; case 12
  9664  001446  B4D8               	btfsc	status,2,c
  9665  001448  D7C8               	goto	i2l4642
  9666  00144A                     i2l4648:
  9667                           
  9668                           ;RTC.c: 107: lcdInst(0b10000000);;
  9669  00144A  0E80               	movlw	128
  9670  00144C  EC55  F014         	call	i2_lcdInst
  9671                           
  9672                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9673  001450  0ED0               	movlw	low STR_48
  9674  001452  6E0D               	movwf	i2printf@f,c
  9675  001454  0EFD               	movlw	high STR_48
  9676  001456  6E0E               	movwf	i2printf@f+1,c
  9677  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9678  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9679  001460  0E3D               	movlw	low i2printRTC@month
  9680  001462  6E11               	movwf	?i2_printf+4,c
  9681  001464  0E00               	movlw	high i2printRTC@month
  9682  001466  6E12               	movwf	?i2_printf+5,c
  9683  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9684  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9685  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9686  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9687  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9688  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9689  001480  ECC0  F004         	call	i2_printf	;wreg free
  9690  001484  0012               	return		;funcret
  9691  001486                     __end_ofi2_printRTC:
  9692                           	opt stack 0
  9693                           pclatu	equ	0xFFB
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           intcon3	equ	0xFF0
  9703                           indf0	equ	0xFEF
  9704                           postinc0	equ	0xFEE
  9705                           fsr0h	equ	0xFEA
  9706                           fsr0l	equ	0xFE9
  9707                           wreg	equ	0xFE8
  9708                           postdec1	equ	0xFE5
  9709                           fsr1h	equ	0xFE2
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           fsr2h	equ	0xFDA
  9715                           fsr2l	equ	0xFD9
  9716                           status	equ	0xFD8
  9717                           
  9718 ;; *************** function i2_strcpy *****************
  9719 ;; Defined at:
  9720 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;  to              2    0[COMRAM] PTR unsigned char 
  9723 ;;		 -> printRTC@month(4), 
  9724 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9725 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9726 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9727 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9730 ;;		 -> printRTC@month(4), 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  2    0[COMRAM] PTR unsigned char 
  9733 ;; Registers used:
  9734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;Total ram usage:        6 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		i2_printRTC
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text44
  9754  00246A                     __ptext44:
  9755                           	opt stack 0
  9756  00246A                     i2_strcpy:
  9757                           	opt stack 20
  9758                           
  9759                           ;incstack = 0
  9760  00246A  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9761  00246E  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9762  002472  D004               	goto	i2l4394
  9763  002474                     i2l4392:
  9764  002474  4A05               	infsnz	i2strcpy@cp,f,c
  9765  002476  2A06               	incf	i2strcpy@cp+1,f,c
  9766  002478  4A03               	infsnz	i2strcpy@from,f,c
  9767  00247A  2A04               	incf	i2strcpy@from+1,f,c
  9768  00247C                     i2l4394:
  9769  00247C  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9770  002480  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9771  002484                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9772  002484  6AF8               	clrf	tblptru,c
  9773  002486                     	endif
  9774  002486                     	if	0	;tblptru may be non-zero
  9775  002486                     	endif
  9776  002486  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9777  00248A  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9778  00248E  0008               	tblrd		*
  9779  002490  CFF5 FFDF          	movff	tablat,indf2
  9780  002494  50DF               	movf	indf2,w,c
  9781  002496  B4D8               	btfsc	status,2,c
  9782  002498  0012               	return	
  9783  00249A  D7EC               	goto	i2l4392
  9784  00249C                     __end_ofi2_strcpy:
  9785                           	opt stack 0
  9786                           pclatu	equ	0xFFB
  9787                           pclath	equ	0xFFA
  9788                           tblptru	equ	0xFF8
  9789                           tblptrh	equ	0xFF7
  9790                           tblptrl	equ	0xFF6
  9791                           tablat	equ	0xFF5
  9792                           prodh	equ	0xFF4
  9793                           prodl	equ	0xFF3
  9794                           intcon	equ	0xFF2
  9795                           intcon3	equ	0xFF0
  9796                           indf0	equ	0xFEF
  9797                           postinc0	equ	0xFEE
  9798                           fsr0h	equ	0xFEA
  9799                           fsr0l	equ	0xFE9
  9800                           wreg	equ	0xFE8
  9801                           postdec1	equ	0xFE5
  9802                           fsr1h	equ	0xFE2
  9803                           fsr1l	equ	0xFE1
  9804                           indf2	equ	0xFDF
  9805                           postinc2	equ	0xFDE
  9806                           postdec2	equ	0xFDD
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function _inputHandler *****************
  9812 ;; Defined at:
  9813 ;;		line 314 in file "UI.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;		None
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  2   41[COMRAM] int 
  9820 ;; Registers used:
  9821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;Total ram usage:        4 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    4
  9834 ;; This function calls:
  9835 ;;		_change_state_to_logs_11
  9836 ;;		_change_state_to_logs_12
  9837 ;;		_change_state_to_logs_22
  9838 ;;		_change_state_to_logs_23
  9839 ;;		_change_state_to_logs_33
  9840 ;;		_change_state_to_logs_34
  9841 ;;		_change_state_to_menu_11
  9842 ;;		_change_state_to_menu_23
  9843 ;;		i2_change_state_to_menu_12
  9844 ;;		i2_change_state_to_menu_22
  9845 ;; This function is called by:
  9846 ;;		_updateMenu
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           	psect	text45
  9851  001680                     __ptext45:
  9852                           	opt stack 0
  9853  001680                     _inputHandler:
  9854                           	opt stack 18
  9855                           
  9856                           ;UI.c: 319: if(firstboot){
  9857                           
  9858                           ;incstack = 0
  9859  001680  5069               	movf	_firstboot,w,c
  9860  001682  106A               	iorwf	_firstboot+1,w,c
  9861  001684  B4D8               	btfsc	status,2,c
  9862  001686  D00B               	goto	i2l4716
  9863                           
  9864                           ;UI.c: 320: change_state_to_menu_11();
  9865  001688  EC96  F012         	call	_change_state_to_menu_11	;wreg free
  9866                           
  9867                           ;UI.c: 321: firstboot = 0;
  9868  00168C  0E00               	movlw	0
  9869  00168E  6E6A               	movwf	_firstboot+1,c
  9870  001690  0E00               	movlw	0
  9871  001692  6E69               	movwf	_firstboot,c
  9872                           
  9873                           ;UI.c: 322: return 0;
  9874  001694  0E00               	movlw	0
  9875  001696  6E2B               	movwf	?_inputHandler+1,c
  9876  001698  0E00               	movlw	0
  9877  00169A  6E2A               	movwf	?_inputHandler,c
  9878  00169C  0012               	return	
  9879  00169E                     i2l4716:
  9880                           
  9881                           ;UI.c: 323: }
  9882                           ;UI.c: 324: if (logstate){
  9883  00169E  0100               	movlb	0	; () banked
  9884  0016A0  51F3               	movf	_logstate& (0+255),w,b
  9885  0016A2  0100               	movlb	0	; () banked
  9886  0016A4  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  9887  0016A6  B4D8               	btfsc	status,2,c
  9888  0016A8  D0C7               	goto	i2l4834
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;UI.c: 325: if(input == 'C' && PORTBbits.RB1 == 1){
  9892  0016AA  0E43               	movlw	67
  9893  0016AC  187D               	xorwf	_input,w,c
  9894  0016AE  A4D8               	btfss	status,2,c
  9895  0016B0  D012               	goto	i2l4734
  9896                           
  9897                           ; BSR set to: 0
  9898  0016B2  B281               	btfsc	3969,1,c	;volatile
  9899  0016B4  D009               	goto	i2l4726
  9900  0016B6  D00F               	goto	i2l4734
  9901  0016B8                     i2l4724:
  9902                           
  9903                           ;UI.c: 328: _delay((unsigned long)((10)*(32000000/4000.0)));
  9904  0016B8  0E68               	movlw	104
  9905  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
  9906  0016BC  0EE4               	movlw	228
  9907  0016BE                     i2u494_47:
  9908  0016BE  2EE8               	decfsz	wreg,f,c
  9909  0016C0  D7FE               	bra	i2u494_47
  9910  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
  9911  0016C4  D7FC               	bra	i2u494_47
  9912  0016C6  D000               	nop2	
  9913  0016C8                     i2l4726:
  9914  0016C8  B281               	btfsc	3969,1,c	;volatile
  9915  0016CA  D7F6               	goto	i2l4724
  9916  0016CC                     i2l4728:
  9917                           
  9918                           ;UI.c: 329: }
  9919                           ;UI.c: 330: return 0;
  9920  0016CC  0E00               	movlw	0
  9921  0016CE  6E2B               	movwf	?_inputHandler+1,c
  9922  0016D0  0E00               	movlw	0
  9923  0016D2  6E2A               	movwf	?_inputHandler,c
  9924  0016D4  0012               	return	
  9925  0016D6                     i2l4734:
  9926                           
  9927                           ;UI.c: 332: else if (input == 'D'){
  9928  0016D6  0E44               	movlw	68
  9929  0016D8  187D               	xorwf	_input,w,c
  9930  0016DA  A4D8               	btfss	status,2,c
  9931  0016DC  D7F7               	goto	i2l4728
  9932                           
  9933                           ;UI.c: 334: logstate = 0;
  9934  0016DE  0E00               	movlw	0
  9935  0016E0  0100               	movlb	0	; () banked
  9936  0016E2  6FF4               	movwf	(_logstate+1)& (0+255),b
  9937  0016E4  0E00               	movlw	0
  9938  0016E6  6FF3               	movwf	_logstate& (0+255),b
  9939                           
  9940                           ;UI.c: 335: switch(cur_state){
  9941  0016E8  D012               	goto	i2l4752
  9942  0016EA                     i2l4738:
  9943                           
  9944                           ;UI.c: 337: change_state_to_logs_11();
  9945  0016EA  EC0E  F013         	call	_change_state_to_logs_11	;wreg free
  9946                           
  9947                           ;UI.c: 338: break;
  9948  0016EE  D7EE               	goto	i2l4728
  9949  0016F0                     i2l4740:
  9950                           
  9951                           ;UI.c: 340: change_state_to_logs_12();
  9952  0016F0  ECF6  F012         	call	_change_state_to_logs_12	;wreg free
  9953                           
  9954                           ;UI.c: 341: break;
  9955  0016F4  D7EB               	goto	i2l4728
  9956  0016F6                     i2l4742:
  9957                           
  9958                           ;UI.c: 343: change_state_to_logs_22();
  9959  0016F6  ECDE  F012         	call	_change_state_to_logs_22	;wreg free
  9960                           
  9961                           ;UI.c: 344: break;
  9962  0016FA  D7E8               	goto	i2l4728
  9963  0016FC                     i2l4744:
  9964                           
  9965                           ;UI.c: 346: change_state_to_logs_23();
  9966  0016FC  EC54  F013         	call	_change_state_to_logs_23	;wreg free
  9967                           
  9968                           ;UI.c: 347: break;
  9969  001700  D7E5               	goto	i2l4728
  9970  001702                     i2l4746:
  9971                           
  9972                           ;UI.c: 349: change_state_to_logs_33();
  9973  001702  ECC6  F012         	call	_change_state_to_logs_33	;wreg free
  9974                           
  9975                           ;UI.c: 350: break;
  9976  001706  D7E2               	goto	i2l4728
  9977  001708                     i2l4748:
  9978                           
  9979                           ;UI.c: 352: change_state_to_logs_34();
  9980  001708  ECAE  F012         	call	_change_state_to_logs_34	;wreg free
  9981                           
  9982                           ;UI.c: 354: }
  9983                           
  9984                           ;UI.c: 353: break;
  9985  00170C  D7DF               	goto	i2l4728
  9986  00170E                     i2l4752:
  9987  00170E  C0E5  F02C         	movff	_cur_state,??_inputHandler
  9988  001712  C0E6  F02D         	movff	_cur_state+1,??_inputHandler+1
  9989                           
  9990                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9991                           ; Switch size 1, requested type "space"
  9992                           ; Number of cases is 2, Range of values is 3 to 4
  9993                           ; switch strategies available:
  9994                           ; Name         Instructions Cycles
  9995                           ; simple_byte            7     4 (average)
  9996                           ;	Chosen strategy is simple_byte
  9997  001716  502D               	movf	??_inputHandler+1,w,c
  9998  001718  0A03               	xorlw	3	; case 3
  9999  00171A  B4D8               	btfsc	status,2,c
 10000  00171C  D004               	goto	i2l5830
 10001  00171E  0A07               	xorlw	7	; case 4
 10002  001720  B4D8               	btfsc	status,2,c
 10003  001722  D00F               	goto	i2l5832
 10004  001724  D7D3               	goto	i2l4728
 10005  001726                     i2l5830:
 10006                           
 10007                           ; Switch size 1, requested type "space"
 10008                           ; Number of cases is 4, Range of values is 243 to 255
 10009                           ; switch strategies available:
 10010                           ; Name         Instructions Cycles
 10011                           ; simple_byte           13     7 (average)
 10012                           ;	Chosen strategy is simple_byte
 10013  001726  502C               	movf	??_inputHandler,w,c
 10014  001728  0AF3               	xorlw	243	; case 243
 10015  00172A  B4D8               	btfsc	status,2,c
 10016  00172C  D7DE               	goto	i2l4738
 10017  00172E  0A07               	xorlw	7	; case 244
 10018  001730  B4D8               	btfsc	status,2,c
 10019  001732  D7DE               	goto	i2l4740
 10020  001734  0A0A               	xorlw	10	; case 254
 10021  001736  B4D8               	btfsc	status,2,c
 10022  001738  D7DE               	goto	i2l4742
 10023  00173A  0A01               	xorlw	1	; case 255
 10024  00173C  B4D8               	btfsc	status,2,c
 10025  00173E  D7DE               	goto	i2l4744
 10026  001740  D7C5               	goto	i2l4728
 10027  001742                     i2l5832:
 10028                           
 10029                           ; Switch size 1, requested type "space"
 10030                           ; Number of cases is 2, Range of values is 9 to 10
 10031                           ; switch strategies available:
 10032                           ; Name         Instructions Cycles
 10033                           ; simple_byte            7     4 (average)
 10034                           ;	Chosen strategy is simple_byte
 10035  001742  502C               	movf	??_inputHandler,w,c
 10036  001744  0A09               	xorlw	9	; case 9
 10037  001746  B4D8               	btfsc	status,2,c
 10038  001748  D7DC               	goto	i2l4746
 10039  00174A  0A03               	xorlw	3	; case 10
 10040  00174C  B4D8               	btfsc	status,2,c
 10041  00174E  D7DC               	goto	i2l4748
 10042  001750  D7BD               	goto	i2l4728
 10043  001752                     i2l4764:
 10044                           
 10045                           ;UI.c: 364: if(cur_state == 11){
 10046  001752  0E0B               	movlw	11
 10047  001754  0100               	movlb	0	; () banked
 10048  001756  19E5               	xorwf	_cur_state& (0+255),w,b
 10049  001758  0100               	movlb	0	; () banked
 10050  00175A  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
 10051  00175C  A4D8               	btfss	status,2,c
 10052  00175E  D005               	goto	i2l4772
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;UI.c: 365: return 0;
 10056  001760  0E00               	movlw	0
 10057  001762  6E2B               	movwf	?_inputHandler+1,c
 10058  001764  0E00               	movlw	0
 10059  001766  6E2A               	movwf	?_inputHandler,c
 10060                           
 10061                           ; BSR set to: 0
 10062  001768  0012               	return	
 10063  00176A                     i2l4772:
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;UI.c: 367: else{
 10067                           ;UI.c: 368: change_state_to_menu_11();
 10068  00176A  EC96  F012         	call	_change_state_to_menu_11	;wreg free
 10069                           
 10070                           ;UI.c: 369: }
 10071                           ;UI.c: 370: return 0;
 10072  00176E  0E00               	movlw	0
 10073  001770  6E2B               	movwf	?_inputHandler+1,c
 10074  001772  0E00               	movlw	0
 10075  001774  6E2A               	movwf	?_inputHandler,c
 10076  001776  0012               	return	
 10077  001778                     i2l4778:
 10078                           
 10079                           ;UI.c: 372: if(cur_state == 22 | cur_state == 12){
 10080  001778  0E16               	movlw	22
 10081  00177A  0100               	movlb	0	; () banked
 10082  00177C  19E5               	xorwf	_cur_state& (0+255),w,b
 10083  00177E  0100               	movlb	0	; () banked
 10084  001780  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
 10085  001782  B4D8               	btfsc	status,2,c
 10086  001784  D007               	goto	i2l4782
 10087                           
 10088                           ; BSR set to: 0
 10089  001786  0E0C               	movlw	12
 10090  001788  0100               	movlb	0	; () banked
 10091  00178A  19E5               	xorwf	_cur_state& (0+255),w,b
 10092  00178C  0100               	movlb	0	; () banked
 10093  00178E  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
 10094  001790  A4D8               	btfss	status,2,c
 10095  001792  D005               	goto	i2l4788
 10096  001794                     i2l4782:
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;UI.c: 373: return 0;
 10100  001794  0E00               	movlw	0
 10101  001796  6E2B               	movwf	?_inputHandler+1,c
 10102  001798  0E00               	movlw	0
 10103  00179A  6E2A               	movwf	?_inputHandler,c
 10104                           
 10105                           ; BSR set to: 0
 10106  00179C  0012               	return	
 10107  00179E                     i2l4788:
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;UI.c: 375: else if(cur_state == 23){
 10111  00179E  0E17               	movlw	23
 10112  0017A0  0100               	movlb	0	; () banked
 10113  0017A2  19E5               	xorwf	_cur_state& (0+255),w,b
 10114  0017A4  0100               	movlb	0	; () banked
 10115  0017A6  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
 10116  0017A8  A4D8               	btfss	status,2,c
 10117  0017AA  D003               	goto	i2l4792
 10118                           
 10119                           ; BSR set to: 0
 10120                           ;UI.c: 376: change_state_to_menu_22();
 10121  0017AC  EC4E  F012         	call	i2_change_state_to_menu_22	;wreg free
 10122                           
 10123                           ;UI.c: 377: }
 10124  0017B0  D002               	goto	i2l4794
 10125  0017B2                     i2l4792:
 10126                           
 10127                           ;UI.c: 378: else{
 10128                           ;UI.c: 379: change_state_to_menu_12();
 10129  0017B2  EC66  F012         	call	i2_change_state_to_menu_12	;wreg free
 10130  0017B6                     i2l4794:
 10131                           
 10132                           ;UI.c: 380: }
 10133                           ;UI.c: 381: return 0;
 10134  0017B6  0E00               	movlw	0
 10135  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10136  0017BA  0E00               	movlw	0
 10137  0017BC  6E2A               	movwf	?_inputHandler,c
 10138  0017BE  0012               	return	
 10139  0017C0                     i2l4798:
 10140                           
 10141                           ;UI.c: 383: if(cur_state == 23){
 10142  0017C0  0E17               	movlw	23
 10143  0017C2  0100               	movlb	0	; () banked
 10144  0017C4  19E5               	xorwf	_cur_state& (0+255),w,b
 10145  0017C6  0100               	movlb	0	; () banked
 10146  0017C8  11E6               	iorwf	(_cur_state+1)& (0+255),w,b
 10147  0017CA  A4D8               	btfss	status,2,c
 10148  0017CC  D005               	goto	i2l4806
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;UI.c: 384: return 0;
 10152  0017CE  0E00               	movlw	0
 10153  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10154  0017D2  0E00               	movlw	0
 10155  0017D4  6E2A               	movwf	?_inputHandler,c
 10156                           
 10157                           ; BSR set to: 0
 10158  0017D6  0012               	return	
 10159  0017D8                     i2l4806:
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;UI.c: 386: else{
 10163                           ;UI.c: 387: change_state_to_menu_23();
 10164  0017D8  EC7E  F012         	call	_change_state_to_menu_23	;wreg free
 10165                           
 10166                           ;UI.c: 388: }
 10167                           ;UI.c: 389: return 0;
 10168  0017DC  0E00               	movlw	0
 10169  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10170  0017E0  0E00               	movlw	0
 10171  0017E2  6E2A               	movwf	?_inputHandler,c
 10172  0017E4  0012               	return	
 10173  0017E6                     i2l4812:
 10174                           
 10175                           ;UI.c: 392: up = 1;
 10176  0017E6  0E00               	movlw	0
 10177  0017E8  6E78               	movwf	_up+1,c
 10178  0017EA  0E01               	movlw	1
 10179  0017EC  6E77               	movwf	_up,c
 10180                           
 10181                           ;UI.c: 393: return 1;
 10182  0017EE  0E00               	movlw	0
 10183  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10184  0017F2  0E01               	movlw	1
 10185  0017F4  6E2A               	movwf	?_inputHandler,c
 10186  0017F6  0012               	return	
 10187  0017F8                     i2l4816:
 10188                           
 10189                           ;UI.c: 395: down = 1;
 10190  0017F8  0E00               	movlw	0
 10191  0017FA  6E66               	movwf	_down+1,c
 10192  0017FC  0E01               	movlw	1
 10193  0017FE  6E65               	movwf	_down,c
 10194                           
 10195                           ;UI.c: 396: return 1;
 10196  001800  0E00               	movlw	0
 10197  001802  6E2B               	movwf	?_inputHandler+1,c
 10198  001804  0E01               	movlw	1
 10199  001806  6E2A               	movwf	?_inputHandler,c
 10200  001808  0012               	return	
 10201  00180A                     i2l4820:
 10202                           
 10203                           ;UI.c: 398: enter = 1;
 10204  00180A  0E00               	movlw	0
 10205  00180C  6E68               	movwf	_enter+1,c
 10206  00180E  0E01               	movlw	1
 10207  001810  6E67               	movwf	_enter,c
 10208                           
 10209                           ;UI.c: 399: return 1;
 10210  001812  0E00               	movlw	0
 10211  001814  6E2B               	movwf	?_inputHandler+1,c
 10212  001816  0E01               	movlw	1
 10213  001818  6E2A               	movwf	?_inputHandler,c
 10214  00181A  0012               	return	
 10215  00181C                     i2l4824:
 10216                           
 10217                           ;UI.c: 401: back = 1;
 10218  00181C  0E00               	movlw	0
 10219  00181E  6E62               	movwf	_back+1,c
 10220  001820  0E01               	movlw	1
 10221  001822  6E61               	movwf	_back,c
 10222                           
 10223                           ;UI.c: 402: return 1;
 10224  001824  0E00               	movlw	0
 10225  001826  6E2B               	movwf	?_inputHandler+1,c
 10226  001828  0E01               	movlw	1
 10227  00182A  6E2A               	movwf	?_inputHandler,c
 10228  00182C  0012               	return	
 10229  00182E                     i2l4828:
 10230                           
 10231                           ;UI.c: 405: return 1;
 10232  00182E  0E00               	movlw	0
 10233  001830  6E2B               	movwf	?_inputHandler+1,c
 10234  001832  0E01               	movlw	1
 10235  001834  6E2A               	movwf	?_inputHandler,c
 10236                           
 10237                           ;UI.c: 406: }
 10238  001836  0012               	return	
 10239  001838                     i2l4834:
 10240  001838  507D               	movf	_input,w,c
 10241                           
 10242                           ; Switch size 1, requested type "space"
 10243                           ; Number of cases is 7, Range of values is 49 to 68
 10244                           ; switch strategies available:
 10245                           ; Name         Instructions Cycles
 10246                           ; simple_byte           22    12 (average)
 10247                           ;	Chosen strategy is simple_byte
 10248  00183A  0A31               	xorlw	49	; case 49
 10249  00183C  B4D8               	btfsc	status,2,c
 10250  00183E  D789               	goto	i2l4764
 10251  001840  0A03               	xorlw	3	; case 50
 10252  001842  B4D8               	btfsc	status,2,c
 10253  001844  D799               	goto	i2l4778
 10254  001846  0A01               	xorlw	1	; case 51
 10255  001848  B4D8               	btfsc	status,2,c
 10256  00184A  D7BA               	goto	i2l4798
 10257  00184C  0A72               	xorlw	114	; case 65
 10258  00184E  B4D8               	btfsc	status,2,c
 10259  001850  D7CA               	goto	i2l4812
 10260  001852  0A03               	xorlw	3	; case 66
 10261  001854  B4D8               	btfsc	status,2,c
 10262  001856  D7D0               	goto	i2l4816
 10263  001858  0A01               	xorlw	1	; case 67
 10264  00185A  B4D8               	btfsc	status,2,c
 10265  00185C  D7D6               	goto	i2l4820
 10266  00185E  0A07               	xorlw	7	; case 68
 10267  001860  B4D8               	btfsc	status,2,c
 10268  001862  D7DC               	goto	i2l4824
 10269  001864  D7E4               	goto	i2l4828
 10270  001866                     __end_of_inputHandler:
 10271                           	opt stack 0
 10272                           pclatu	equ	0xFFB
 10273                           pclath	equ	0xFFA
 10274                           tblptru	equ	0xFF8
 10275                           tblptrh	equ	0xFF7
 10276                           tblptrl	equ	0xFF6
 10277                           tablat	equ	0xFF5
 10278                           prodh	equ	0xFF4
 10279                           prodl	equ	0xFF3
 10280                           intcon	equ	0xFF2
 10281                           intcon3	equ	0xFF0
 10282                           indf0	equ	0xFEF
 10283                           postinc0	equ	0xFEE
 10284                           fsr0h	equ	0xFEA
 10285                           fsr0l	equ	0xFE9
 10286                           wreg	equ	0xFE8
 10287                           postdec1	equ	0xFE5
 10288                           fsr1h	equ	0xFE2
 10289                           fsr1l	equ	0xFE1
 10290                           indf2	equ	0xFDF
 10291                           postinc2	equ	0xFDE
 10292                           postdec2	equ	0xFDD
 10293                           fsr2h	equ	0xFDA
 10294                           fsr2l	equ	0xFD9
 10295                           status	equ	0xFD8
 10296                           
 10297 ;; *************** function i2_change_state_to_menu_22 *****************
 10298 ;; Defined at:
 10299 ;;		line 439 in file "UI.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;		None
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;		None
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  1    wreg      void 
 10306 ;; Registers used:
 10307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;Total ram usage:        0 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    3
 10320 ;; This function calls:
 10321 ;;		i2_lcdInst
 10322 ;;		i2_printf
 10323 ;; This function is called by:
 10324 ;;		_updateMenu
 10325 ;;		_inputHandler
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           	psect	text46
 10330  00249C                     __ptext46:
 10331                           	opt stack 0
 10332  00249C                     i2_change_state_to_menu_22:
 10333                           	opt stack 19
 10334                           
 10335                           ;UI.c: 440: cur_state = 22;
 10336                           
 10337                           ;incstack = 0
 10338  00249C  0E00               	movlw	0
 10339  00249E  0100               	movlb	0	; () banked
 10340  0024A0  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10341  0024A2  0E16               	movlw	22
 10342  0024A4  6FE5               	movwf	_cur_state& (0+255),b
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;UI.c: 442: lcdInst(0b10000000);;
 10346  0024A6  0E80               	movlw	128
 10347  0024A8  EC55  F014         	call	i2_lcdInst
 10348                           
 10349                           ;UI.c: 443: printf("2. SORT        <");
 10350  0024AC  0E64               	movlw	low STR_19
 10351  0024AE  6E0D               	movwf	i2printf@f,c
 10352  0024B0  0EFF               	movlw	high STR_19
 10353  0024B2  6E0E               	movwf	i2printf@f+1,c
 10354  0024B4  ECC0  F004         	call	i2_printf	;wreg free
 10355                           
 10356                           ;UI.c: 444: lcdInst(0b11000000);;
 10357  0024B8  0EC0               	movlw	192
 10358  0024BA  EC55  F014         	call	i2_lcdInst
 10359                           
 10360                           ;UI.c: 445: printf("3. LOGS         ");
 10361  0024BE  0E65               	movlw	low STR_21
 10362  0024C0  6E0D               	movwf	i2printf@f,c
 10363  0024C2  0EFE               	movlw	high STR_21
 10364  0024C4  6E0E               	movwf	i2printf@f+1,c
 10365  0024C6  ECC0  F004         	call	i2_printf	;wreg free
 10366  0024CA  0012               	return		;funcret
 10367  0024CC                     __end_ofi2_change_state_to_menu_22:
 10368                           	opt stack 0
 10369                           pclatu	equ	0xFFB
 10370                           pclath	equ	0xFFA
 10371                           tblptru	equ	0xFF8
 10372                           tblptrh	equ	0xFF7
 10373                           tblptrl	equ	0xFF6
 10374                           tablat	equ	0xFF5
 10375                           prodh	equ	0xFF4
 10376                           prodl	equ	0xFF3
 10377                           intcon	equ	0xFF2
 10378                           intcon3	equ	0xFF0
 10379                           indf0	equ	0xFEF
 10380                           postinc0	equ	0xFEE
 10381                           fsr0h	equ	0xFEA
 10382                           fsr0l	equ	0xFE9
 10383                           wreg	equ	0xFE8
 10384                           postdec1	equ	0xFE5
 10385                           fsr1h	equ	0xFE2
 10386                           fsr1l	equ	0xFE1
 10387                           indf2	equ	0xFDF
 10388                           postinc2	equ	0xFDE
 10389                           postdec2	equ	0xFDD
 10390                           fsr2h	equ	0xFDA
 10391                           fsr2l	equ	0xFD9
 10392                           status	equ	0xFD8
 10393                           
 10394 ;; *************** function i2_change_state_to_menu_12 *****************
 10395 ;; Defined at:
 10396 ;;		line 431 in file "UI.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;		None
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;Total ram usage:        0 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    3
 10417 ;; This function calls:
 10418 ;;		i2_lcdInst
 10419 ;;		i2_printf
 10420 ;; This function is called by:
 10421 ;;		_updateMenu
 10422 ;;		_inputHandler
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text47
 10427  0024CC                     __ptext47:
 10428                           	opt stack 0
 10429  0024CC                     i2_change_state_to_menu_12:
 10430                           	opt stack 19
 10431                           
 10432                           ;UI.c: 432: cur_state = 12;
 10433                           
 10434                           ;incstack = 0
 10435  0024CC  0E00               	movlw	0
 10436  0024CE  0100               	movlb	0	; () banked
 10437  0024D0  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10438  0024D2  0E0C               	movlw	12
 10439  0024D4  6FE5               	movwf	_cur_state& (0+255),b
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;UI.c: 434: lcdInst(0b10000000);;
 10443  0024D6  0E80               	movlw	128
 10444  0024D8  EC55  F014         	call	i2_lcdInst
 10445                           
 10446                           ;UI.c: 435: printf("1. DATE/TIME    ");
 10447  0024DC  0E87               	movlw	low STR_18
 10448  0024DE  6E0D               	movwf	i2printf@f,c
 10449  0024E0  0EFE               	movlw	high STR_18
 10450  0024E2  6E0E               	movwf	i2printf@f+1,c
 10451  0024E4  ECC0  F004         	call	i2_printf	;wreg free
 10452                           
 10453                           ;UI.c: 436: lcdInst(0b11000000);;
 10454  0024E8  0EC0               	movlw	192
 10455  0024EA  EC55  F014         	call	i2_lcdInst
 10456                           
 10457                           ;UI.c: 437: printf("2. SORT        <");
 10458  0024EE  0E64               	movlw	low STR_19
 10459  0024F0  6E0D               	movwf	i2printf@f,c
 10460  0024F2  0EFF               	movlw	high STR_19
 10461  0024F4  6E0E               	movwf	i2printf@f+1,c
 10462  0024F6  ECC0  F004         	call	i2_printf	;wreg free
 10463  0024FA  0012               	return		;funcret
 10464  0024FC                     __end_ofi2_change_state_to_menu_12:
 10465                           	opt stack 0
 10466                           pclatu	equ	0xFFB
 10467                           pclath	equ	0xFFA
 10468                           tblptru	equ	0xFF8
 10469                           tblptrh	equ	0xFF7
 10470                           tblptrl	equ	0xFF6
 10471                           tablat	equ	0xFF5
 10472                           prodh	equ	0xFF4
 10473                           prodl	equ	0xFF3
 10474                           intcon	equ	0xFF2
 10475                           intcon3	equ	0xFF0
 10476                           indf0	equ	0xFEF
 10477                           postinc0	equ	0xFEE
 10478                           fsr0h	equ	0xFEA
 10479                           fsr0l	equ	0xFE9
 10480                           wreg	equ	0xFE8
 10481                           postdec1	equ	0xFE5
 10482                           fsr1h	equ	0xFE2
 10483                           fsr1l	equ	0xFE1
 10484                           indf2	equ	0xFDF
 10485                           postinc2	equ	0xFDE
 10486                           postdec2	equ	0xFDD
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function _change_state_to_menu_23 *****************
 10492 ;; Defined at:
 10493 ;;		line 447 in file "UI.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;		None
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  1    wreg      void 
 10500 ;; Registers used:
 10501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;Total ram usage:        0 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    3
 10514 ;; This function calls:
 10515 ;;		i2_lcdInst
 10516 ;;		i2_printf
 10517 ;; This function is called by:
 10518 ;;		_updateMenu
 10519 ;;		_inputHandler
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text48
 10524  0024FC                     __ptext48:
 10525                           	opt stack 0
 10526  0024FC                     _change_state_to_menu_23:
 10527                           	opt stack 18
 10528                           
 10529                           ;UI.c: 448: cur_state = 23;
 10530                           
 10531                           ;incstack = 0
 10532  0024FC  0E00               	movlw	0
 10533  0024FE  0100               	movlb	0	; () banked
 10534  002500  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10535  002502  0E17               	movlw	23
 10536  002504  6FE5               	movwf	_cur_state& (0+255),b
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;UI.c: 450: lcdInst(0b10000000);;
 10540  002506  0E80               	movlw	128
 10541  002508  EC55  F014         	call	i2_lcdInst
 10542                           
 10543                           ;UI.c: 451: printf("2. SORT         ");
 10544  00250C  0E76               	movlw	low STR_17
 10545  00250E  6E0D               	movwf	i2printf@f,c
 10546  002510  0EFE               	movlw	high STR_17
 10547  002512  6E0E               	movwf	i2printf@f+1,c
 10548  002514  ECC0  F004         	call	i2_printf	;wreg free
 10549                           
 10550                           ;UI.c: 452: lcdInst(0b11000000);;
 10551  002518  0EC0               	movlw	192
 10552  00251A  EC55  F014         	call	i2_lcdInst
 10553                           
 10554                           ;UI.c: 453: printf("3. LOGS        <");
 10555  00251E  0E53               	movlw	low STR_23
 10556  002520  6E0D               	movwf	i2printf@f,c
 10557  002522  0EFF               	movlw	high STR_23
 10558  002524  6E0E               	movwf	i2printf@f+1,c
 10559  002526  ECC0  F004         	call	i2_printf	;wreg free
 10560  00252A  0012               	return		;funcret
 10561  00252C                     __end_of_change_state_to_menu_23:
 10562                           	opt stack 0
 10563                           pclatu	equ	0xFFB
 10564                           pclath	equ	0xFFA
 10565                           tblptru	equ	0xFF8
 10566                           tblptrh	equ	0xFF7
 10567                           tblptrl	equ	0xFF6
 10568                           tablat	equ	0xFF5
 10569                           prodh	equ	0xFF4
 10570                           prodl	equ	0xFF3
 10571                           intcon	equ	0xFF2
 10572                           intcon3	equ	0xFF0
 10573                           indf0	equ	0xFEF
 10574                           postinc0	equ	0xFEE
 10575                           fsr0h	equ	0xFEA
 10576                           fsr0l	equ	0xFE9
 10577                           wreg	equ	0xFE8
 10578                           postdec1	equ	0xFE5
 10579                           fsr1h	equ	0xFE2
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function _change_state_to_menu_11 *****************
 10589 ;; Defined at:
 10590 ;;		line 423 in file "UI.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;		None
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;		None
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:        0 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    3
 10611 ;; This function calls:
 10612 ;;		i2_lcdInst
 10613 ;;		i2_printf
 10614 ;; This function is called by:
 10615 ;;		_updateMenu
 10616 ;;		_inputHandler
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text49
 10621  00252C                     __ptext49:
 10622                           	opt stack 0
 10623  00252C                     _change_state_to_menu_11:
 10624                           	opt stack 18
 10625                           
 10626                           ;UI.c: 424: cur_state = 11;
 10627                           
 10628                           ;incstack = 0
 10629  00252C  0E00               	movlw	0
 10630  00252E  0100               	movlb	0	; () banked
 10631  002530  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10632  002532  0E0B               	movlw	11
 10633  002534  6FE5               	movwf	_cur_state& (0+255),b
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;UI.c: 426: lcdInst(0b10000000);;
 10637  002536  0E80               	movlw	128
 10638  002538  EC55  F014         	call	i2_lcdInst
 10639                           
 10640                           ;UI.c: 427: printf("1. DATE/TIME   <");
 10641  00253C  0E75               	movlw	low STR_16
 10642  00253E  6E0D               	movwf	i2printf@f,c
 10643  002540  0EFF               	movlw	high STR_16
 10644  002542  6E0E               	movwf	i2printf@f+1,c
 10645  002544  ECC0  F004         	call	i2_printf	;wreg free
 10646                           
 10647                           ;UI.c: 428: lcdInst(0b11000000);;
 10648  002548  0EC0               	movlw	192
 10649  00254A  EC55  F014         	call	i2_lcdInst
 10650                           
 10651                           ;UI.c: 429: printf("2. SORT         ");
 10652  00254E  0E76               	movlw	low STR_17
 10653  002550  6E0D               	movwf	i2printf@f,c
 10654  002552  0EFE               	movlw	high STR_17
 10655  002554  6E0E               	movwf	i2printf@f+1,c
 10656  002556  ECC0  F004         	call	i2_printf	;wreg free
 10657  00255A  0012               	return		;funcret
 10658  00255C                     __end_of_change_state_to_menu_11:
 10659                           	opt stack 0
 10660                           pclatu	equ	0xFFB
 10661                           pclath	equ	0xFFA
 10662                           tblptru	equ	0xFF8
 10663                           tblptrh	equ	0xFF7
 10664                           tblptrl	equ	0xFF6
 10665                           tablat	equ	0xFF5
 10666                           prodh	equ	0xFF4
 10667                           prodl	equ	0xFF3
 10668                           intcon	equ	0xFF2
 10669                           intcon3	equ	0xFF0
 10670                           indf0	equ	0xFEF
 10671                           postinc0	equ	0xFEE
 10672                           fsr0h	equ	0xFEA
 10673                           fsr0l	equ	0xFE9
 10674                           wreg	equ	0xFE8
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function _change_state_to_logs_34 *****************
 10686 ;; Defined at:
 10687 ;;		line 490 in file "UI.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;		None
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;		None
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      void 
 10694 ;; Registers used:
 10695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    3
 10708 ;; This function calls:
 10709 ;;		i2_lcdInst
 10710 ;;		i2_printf
 10711 ;; This function is called by:
 10712 ;;		_updateMenu
 10713 ;;		_inputHandler
 10714 ;; This function uses a non-reentrant model
 10715 ;;
 10716                           
 10717                           	psect	text50
 10718  00255C                     __ptext50:
 10719                           	opt stack 0
 10720  00255C                     _change_state_to_logs_34:
 10721                           	opt stack 18
 10722                           
 10723                           ;UI.c: 491: cur_state = 1034;
 10724                           
 10725                           ;incstack = 0
 10726  00255C  0E04               	movlw	4
 10727  00255E  0100               	movlb	0	; () banked
 10728  002560  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10729  002562  0E0A               	movlw	10
 10730  002564  6FE5               	movwf	_cur_state& (0+255),b
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;UI.c: 492: lcdInst(0b10000000);;
 10734  002566  0E80               	movlw	128
 10735  002568  EC55  F014         	call	i2_lcdInst
 10736                           
 10737                           ;UI.c: 493: printf("LOG 3           ");
 10738  00256C  0E43               	movlw	low STR_29
 10739  00256E  6E0D               	movwf	i2printf@f,c
 10740  002570  0EFE               	movlw	high STR_29
 10741  002572  6E0E               	movwf	i2printf@f+1,c
 10742  002574  ECC0  F004         	call	i2_printf	;wreg free
 10743                           
 10744                           ;UI.c: 494: lcdInst(0b11000000);;
 10745  002578  0EC0               	movlw	192
 10746  00257A  EC55  F014         	call	i2_lcdInst
 10747                           
 10748                           ;UI.c: 495: printf("LOG 4          <");
 10749  00257E  0E42               	movlw	low STR_35
 10750  002580  6E0D               	movwf	i2printf@f,c
 10751  002582  0EFF               	movlw	high STR_35
 10752  002584  6E0E               	movwf	i2printf@f+1,c
 10753  002586  ECC0  F004         	call	i2_printf	;wreg free
 10754  00258A  0012               	return		;funcret
 10755  00258C                     __end_of_change_state_to_logs_34:
 10756                           	opt stack 0
 10757                           pclatu	equ	0xFFB
 10758                           pclath	equ	0xFFA
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon3	equ	0xFF0
 10767                           indf0	equ	0xFEF
 10768                           postinc0	equ	0xFEE
 10769                           fsr0h	equ	0xFEA
 10770                           fsr0l	equ	0xFE9
 10771                           wreg	equ	0xFE8
 10772                           postdec1	equ	0xFE5
 10773                           fsr1h	equ	0xFE2
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           postdec2	equ	0xFDD
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function _change_state_to_logs_33 *****************
 10783 ;; Defined at:
 10784 ;;		line 483 in file "UI.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    3
 10805 ;; This function calls:
 10806 ;;		i2_lcdInst
 10807 ;;		i2_printf
 10808 ;; This function is called by:
 10809 ;;		_updateMenu
 10810 ;;		_inputHandler
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text51
 10815  00258C                     __ptext51:
 10816                           	opt stack 0
 10817  00258C                     _change_state_to_logs_33:
 10818                           	opt stack 18
 10819                           
 10820                           ;UI.c: 484: cur_state = 1033;
 10821                           
 10822                           ;incstack = 0
 10823  00258C  0E04               	movlw	4
 10824  00258E  0100               	movlb	0	; () banked
 10825  002590  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10826  002592  0E09               	movlw	9
 10827  002594  6FE5               	movwf	_cur_state& (0+255),b
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;UI.c: 485: lcdInst(0b10000000);;
 10831  002596  0E80               	movlw	128
 10832  002598  EC55  F014         	call	i2_lcdInst
 10833                           
 10834                           ;UI.c: 486: printf("LOG 3          <");
 10835  00259C  0E31               	movlw	low STR_31
 10836  00259E  6E0D               	movwf	i2printf@f,c
 10837  0025A0  0EFF               	movlw	high STR_31
 10838  0025A2  6E0E               	movwf	i2printf@f+1,c
 10839  0025A4  ECC0  F004         	call	i2_printf	;wreg free
 10840                           
 10841                           ;UI.c: 487: lcdInst(0b11000000);;
 10842  0025A8  0EC0               	movlw	192
 10843  0025AA  EC55  F014         	call	i2_lcdInst
 10844                           
 10845                           ;UI.c: 488: printf("LOG 4           ");
 10846  0025AE  0E54               	movlw	low STR_33
 10847  0025B0  6E0D               	movwf	i2printf@f,c
 10848  0025B2  0EFE               	movlw	high STR_33
 10849  0025B4  6E0E               	movwf	i2printf@f+1,c
 10850  0025B6  ECC0  F004         	call	i2_printf	;wreg free
 10851  0025BA  0012               	return		;funcret
 10852  0025BC                     __end_of_change_state_to_logs_33:
 10853                           	opt stack 0
 10854                           pclatu	equ	0xFFB
 10855                           pclath	equ	0xFFA
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon3	equ	0xFF0
 10864                           indf0	equ	0xFEF
 10865                           postinc0	equ	0xFEE
 10866                           fsr0h	equ	0xFEA
 10867                           fsr0l	equ	0xFE9
 10868                           wreg	equ	0xFE8
 10869                           postdec1	equ	0xFE5
 10870                           fsr1h	equ	0xFE2
 10871                           fsr1l	equ	0xFE1
 10872                           indf2	equ	0xFDF
 10873                           postinc2	equ	0xFDE
 10874                           postdec2	equ	0xFDD
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           
 10879 ;; *************** function _change_state_to_logs_23 *****************
 10880 ;; Defined at:
 10881 ;;		line 476 in file "UI.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;		None
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;		None
 10886 ;; Return value:  Size  Location     Type
 10887 ;;                  1    wreg      void 
 10888 ;; Registers used:
 10889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;Total ram usage:        0 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    3
 10902 ;; This function calls:
 10903 ;;		i2_lcdInst
 10904 ;;		i2_printf
 10905 ;; This function is called by:
 10906 ;;		_updateMenu
 10907 ;;		_inputHandler
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text52
 10912  0026A8                     __ptext52:
 10913                           	opt stack 0
 10914  0026A8                     _change_state_to_logs_23:
 10915                           	opt stack 18
 10916                           
 10917                           ;UI.c: 477: cur_state = 1023;
 10918                           
 10919                           ;incstack = 0
 10920  0026A8  0E03               	movlw	3
 10921  0026AA  0100               	movlb	0	; () banked
 10922  0026AC  6FE6               	movwf	(_cur_state+1)& (0+255),b
 10923  0026AE  69E5               	setf	_cur_state& (0+255),b
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;UI.c: 478: lcdInst(0b10000000);;
 10927  0026B0  0E80               	movlw	128
 10928  0026B2  EC55  F014         	call	i2_lcdInst
 10929                           
 10930                           ;UI.c: 479: printf("LOG 2           ");
 10931  0026B6  0E32               	movlw	low STR_25
 10932  0026B8  6E0D               	movwf	i2printf@f,c
 10933  0026BA  0EFE               	movlw	high STR_25
 10934  0026BC  6E0E               	movwf	i2printf@f+1,c
 10935  0026BE  ECC0  F004         	call	i2_printf	;wreg free
 10936                           
 10937                           ;UI.c: 480: lcdInst(0b11000000);;
 10938  0026C2  0EC0               	movlw	192
 10939  0026C4  EC55  F014         	call	i2_lcdInst
 10940                           
 10941                           ;UI.c: 481: printf("LOG 3          <");
 10942  0026C8  0E31               	movlw	low STR_31
 10943  0026CA  6E0D               	movwf	i2printf@f,c
 10944  0026CC  0EFF               	movlw	high STR_31
 10945  0026CE  6E0E               	movwf	i2printf@f+1,c
 10946  0026D0  ECC0  F004         	call	i2_printf	;wreg free
 10947  0026D4  0012               	return		;funcret
 10948  0026D6                     __end_of_change_state_to_logs_23:
 10949                           	opt stack 0
 10950                           pclatu	equ	0xFFB
 10951                           pclath	equ	0xFFA
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           intcon3	equ	0xFF0
 10960                           indf0	equ	0xFEF
 10961                           postinc0	equ	0xFEE
 10962                           fsr0h	equ	0xFEA
 10963                           fsr0l	equ	0xFE9
 10964                           wreg	equ	0xFE8
 10965                           postdec1	equ	0xFE5
 10966                           fsr1h	equ	0xFE2
 10967                           fsr1l	equ	0xFE1
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           fsr2h	equ	0xFDA
 10972                           fsr2l	equ	0xFD9
 10973                           status	equ	0xFD8
 10974                           
 10975 ;; *************** function _change_state_to_logs_22 *****************
 10976 ;; Defined at:
 10977 ;;		line 469 in file "UI.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;		None
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      void 
 10984 ;; Registers used:
 10985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;Total ram usage:        0 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    3
 10998 ;; This function calls:
 10999 ;;		i2_lcdInst
 11000 ;;		i2_printf
 11001 ;; This function is called by:
 11002 ;;		_updateMenu
 11003 ;;		_inputHandler
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text53
 11008  0025BC                     __ptext53:
 11009                           	opt stack 0
 11010  0025BC                     _change_state_to_logs_22:
 11011                           	opt stack 18
 11012                           
 11013                           ;UI.c: 470: cur_state = 1022;
 11014                           
 11015                           ;incstack = 0
 11016  0025BC  0E03               	movlw	3
 11017  0025BE  0100               	movlb	0	; () banked
 11018  0025C0  6FE6               	movwf	(_cur_state+1)& (0+255),b
 11019  0025C2  0EFE               	movlw	254
 11020  0025C4  6FE5               	movwf	_cur_state& (0+255),b
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;UI.c: 471: lcdInst(0b10000000);;
 11024  0025C6  0E80               	movlw	128
 11025  0025C8  EC55  F014         	call	i2_lcdInst
 11026                           
 11027                           ;UI.c: 472: printf("LOG 2          <");
 11028  0025CC  0E20               	movlw	low STR_27
 11029  0025CE  6E0D               	movwf	i2printf@f,c
 11030  0025D0  0EFF               	movlw	high STR_27
 11031  0025D2  6E0E               	movwf	i2printf@f+1,c
 11032  0025D4  ECC0  F004         	call	i2_printf	;wreg free
 11033                           
 11034                           ;UI.c: 473: lcdInst(0b11000000);;
 11035  0025D8  0EC0               	movlw	192
 11036  0025DA  EC55  F014         	call	i2_lcdInst
 11037                           
 11038                           ;UI.c: 474: printf("LOG 3           ");
 11039  0025DE  0E43               	movlw	low STR_29
 11040  0025E0  6E0D               	movwf	i2printf@f,c
 11041  0025E2  0EFE               	movlw	high STR_29
 11042  0025E4  6E0E               	movwf	i2printf@f+1,c
 11043  0025E6  ECC0  F004         	call	i2_printf	;wreg free
 11044  0025EA  0012               	return		;funcret
 11045  0025EC                     __end_of_change_state_to_logs_22:
 11046                           	opt stack 0
 11047                           pclatu	equ	0xFFB
 11048                           pclath	equ	0xFFA
 11049                           tblptru	equ	0xFF8
 11050                           tblptrh	equ	0xFF7
 11051                           tblptrl	equ	0xFF6
 11052                           tablat	equ	0xFF5
 11053                           prodh	equ	0xFF4
 11054                           prodl	equ	0xFF3
 11055                           intcon	equ	0xFF2
 11056                           intcon3	equ	0xFF0
 11057                           indf0	equ	0xFEF
 11058                           postinc0	equ	0xFEE
 11059                           fsr0h	equ	0xFEA
 11060                           fsr0l	equ	0xFE9
 11061                           wreg	equ	0xFE8
 11062                           postdec1	equ	0xFE5
 11063                           fsr1h	equ	0xFE2
 11064                           fsr1l	equ	0xFE1
 11065                           indf2	equ	0xFDF
 11066                           postinc2	equ	0xFDE
 11067                           postdec2	equ	0xFDD
 11068                           fsr2h	equ	0xFDA
 11069                           fsr2l	equ	0xFD9
 11070                           status	equ	0xFD8
 11071                           
 11072 ;; *************** function _change_state_to_logs_12 *****************
 11073 ;; Defined at:
 11074 ;;		line 462 in file "UI.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;		None
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      void 
 11081 ;; Registers used:
 11082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;Total ram usage:        0 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    3
 11095 ;; This function calls:
 11096 ;;		i2_lcdInst
 11097 ;;		i2_printf
 11098 ;; This function is called by:
 11099 ;;		_updateMenu
 11100 ;;		_inputHandler
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           	psect	text54
 11105  0025EC                     __ptext54:
 11106                           	opt stack 0
 11107  0025EC                     _change_state_to_logs_12:
 11108                           	opt stack 18
 11109                           
 11110                           ;UI.c: 463: cur_state = 1012;
 11111                           
 11112                           ;incstack = 0
 11113  0025EC  0E03               	movlw	3
 11114  0025EE  0100               	movlb	0	; () banked
 11115  0025F0  6FE6               	movwf	(_cur_state+1)& (0+255),b
 11116  0025F2  0EF4               	movlw	244
 11117  0025F4  6FE5               	movwf	_cur_state& (0+255),b
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;UI.c: 464: lcdInst(0b10000000);;
 11121  0025F6  0E80               	movlw	128
 11122  0025F8  EC55  F014         	call	i2_lcdInst
 11123                           
 11124                           ;UI.c: 465: printf("LOG 1           ");
 11125  0025FC  0E21               	movlw	low STR_26
 11126  0025FE  6E0D               	movwf	i2printf@f,c
 11127  002600  0EFE               	movlw	high STR_26
 11128  002602  6E0E               	movwf	i2printf@f+1,c
 11129  002604  ECC0  F004         	call	i2_printf	;wreg free
 11130                           
 11131                           ;UI.c: 466: lcdInst(0b11000000);;
 11132  002608  0EC0               	movlw	192
 11133  00260A  EC55  F014         	call	i2_lcdInst
 11134                           
 11135                           ;UI.c: 467: printf("LOG 2          <");
 11136  00260E  0E20               	movlw	low STR_27
 11137  002610  6E0D               	movwf	i2printf@f,c
 11138  002612  0EFF               	movlw	high STR_27
 11139  002614  6E0E               	movwf	i2printf@f+1,c
 11140  002616  ECC0  F004         	call	i2_printf	;wreg free
 11141  00261A  0012               	return		;funcret
 11142  00261C                     __end_of_change_state_to_logs_12:
 11143                           	opt stack 0
 11144                           pclatu	equ	0xFFB
 11145                           pclath	equ	0xFFA
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           intcon3	equ	0xFF0
 11154                           indf0	equ	0xFEF
 11155                           postinc0	equ	0xFEE
 11156                           fsr0h	equ	0xFEA
 11157                           fsr0l	equ	0xFE9
 11158                           wreg	equ	0xFE8
 11159                           postdec1	equ	0xFE5
 11160                           fsr1h	equ	0xFE2
 11161                           fsr1l	equ	0xFE1
 11162                           indf2	equ	0xFDF
 11163                           postinc2	equ	0xFDE
 11164                           postdec2	equ	0xFDD
 11165                           fsr2h	equ	0xFDA
 11166                           fsr2l	equ	0xFD9
 11167                           status	equ	0xFD8
 11168                           
 11169 ;; *************** function _change_state_to_logs_11 *****************
 11170 ;; Defined at:
 11171 ;;		line 455 in file "UI.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;		None
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;		None
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      void 
 11178 ;; Registers used:
 11179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11189 ;;Total ram usage:        0 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    3
 11192 ;; This function calls:
 11193 ;;		i2_lcdInst
 11194 ;;		i2_printf
 11195 ;; This function is called by:
 11196 ;;		_updateMenu
 11197 ;;		_inputHandler
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           	psect	text55
 11202  00261C                     __ptext55:
 11203                           	opt stack 0
 11204  00261C                     _change_state_to_logs_11:
 11205                           	opt stack 18
 11206                           
 11207                           ;UI.c: 456: cur_state = 1011;
 11208                           
 11209                           ;incstack = 0
 11210  00261C  0E03               	movlw	3
 11211  00261E  0100               	movlb	0	; () banked
 11212  002620  6FE6               	movwf	(_cur_state+1)& (0+255),b
 11213  002622  0EF3               	movlw	243
 11214  002624  6FE5               	movwf	_cur_state& (0+255),b
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;UI.c: 457: lcdInst(0b10000000);;
 11218  002626  0E80               	movlw	128
 11219  002628  EC55  F014         	call	i2_lcdInst
 11220                           
 11221                           ;UI.c: 458: printf("LOG 1          <");
 11222  00262C  0E0F               	movlw	low STR_24
 11223  00262E  6E0D               	movwf	i2printf@f,c
 11224  002630  0EFF               	movlw	high STR_24
 11225  002632  6E0E               	movwf	i2printf@f+1,c
 11226  002634  ECC0  F004         	call	i2_printf	;wreg free
 11227                           
 11228                           ;UI.c: 459: lcdInst(0b11000000);;
 11229  002638  0EC0               	movlw	192
 11230  00263A  EC55  F014         	call	i2_lcdInst
 11231                           
 11232                           ;UI.c: 460: printf("LOG 2           ");
 11233  00263E  0E32               	movlw	low STR_25
 11234  002640  6E0D               	movwf	i2printf@f,c
 11235  002642  0EFE               	movlw	high STR_25
 11236  002644  6E0E               	movwf	i2printf@f+1,c
 11237  002646  ECC0  F004         	call	i2_printf	;wreg free
 11238  00264A  0012               	return		;funcret
 11239  00264C                     __end_of_change_state_to_logs_11:
 11240                           	opt stack 0
 11241                           pclatu	equ	0xFFB
 11242                           pclath	equ	0xFFA
 11243                           tblptru	equ	0xFF8
 11244                           tblptrh	equ	0xFF7
 11245                           tblptrl	equ	0xFF6
 11246                           tablat	equ	0xFF5
 11247                           prodh	equ	0xFF4
 11248                           prodl	equ	0xFF3
 11249                           intcon	equ	0xFF2
 11250                           intcon3	equ	0xFF0
 11251                           indf0	equ	0xFEF
 11252                           postinc0	equ	0xFEE
 11253                           fsr0h	equ	0xFEA
 11254                           fsr0l	equ	0xFE9
 11255                           wreg	equ	0xFE8
 11256                           postdec1	equ	0xFE5
 11257                           fsr1h	equ	0xFE2
 11258                           fsr1l	equ	0xFE1
 11259                           indf2	equ	0xFDF
 11260                           postinc2	equ	0xFDE
 11261                           postdec2	equ	0xFDD
 11262                           fsr2h	equ	0xFDA
 11263                           fsr2l	equ	0xFD9
 11264                           status	equ	0xFD8
 11265                           
 11266 ;; *************** function _dispLogs *****************
 11267 ;; Defined at:
 11268 ;;		line 409 in file "UI.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;  myLog           2    0[COMRAM] int 
 11271 ;; Auto vars:     Size  Location     Type
 11272 ;;		None
 11273 ;; Return value:  Size  Location     Type
 11274 ;;                  1    wreg      void 
 11275 ;; Registers used:
 11276 ;;		wreg, status,2
 11277 ;; Tracked objects:
 11278 ;;		On entry : 0/0
 11279 ;;		On exit  : 0/0
 11280 ;;		Unchanged: 0/0
 11281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11282 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;Total ram usage:        2 bytes
 11287 ;; Hardware stack levels used:    1
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_updateMenu
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text56
 11296  002846                     __ptext56:
 11297                           	opt stack 0
 11298  002846                     _dispLogs:
 11299                           	opt stack 22
 11300                           
 11301                           ;UI.c: 410: logstate = 1;
 11302                           
 11303                           ;incstack = 0
 11304  002846  0E00               	movlw	0
 11305  002848  0100               	movlb	0	; () banked
 11306  00284A  6FF4               	movwf	(_logstate+1)& (0+255),b
 11307  00284C  0E01               	movlw	1
 11308  00284E  6FF3               	movwf	_logstate& (0+255),b
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;UI.c: 411: log = myLog;
 11312  002850  C001  F0F1         	movff	dispLogs@myLog,_log
 11313  002854  C002  F0F2         	movff	dispLogs@myLog+1,_log+1
 11314                           
 11315                           ; BSR set to: 0
 11316  002858  0012               	return		;funcret
 11317  00285A                     __end_of_dispLogs:
 11318                           	opt stack 0
 11319                           pclatu	equ	0xFFB
 11320                           pclath	equ	0xFFA
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon3	equ	0xFF0
 11329                           indf0	equ	0xFEF
 11330                           postinc0	equ	0xFEE
 11331                           fsr0h	equ	0xFEA
 11332                           fsr0l	equ	0xFE9
 11333                           wreg	equ	0xFE8
 11334                           postdec1	equ	0xFE5
 11335                           fsr1h	equ	0xFE2
 11336                           fsr1l	equ	0xFE1
 11337                           indf2	equ	0xFDF
 11338                           postinc2	equ	0xFDE
 11339                           postdec2	equ	0xFDD
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           
 11344 ;; *************** function _printSortTimer *****************
 11345 ;; Defined at:
 11346 ;;		line 142 in file "sort.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;		None
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  i               2   72[COMRAM] int 
 11351 ;;  curTime        14   44[COMRAM] int [7]
 11352 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11353 ;;  sec             2   66[COMRAM] int 
 11354 ;;  min             2   64[COMRAM] int 
 11355 ;;  hour            2   62[COMRAM] int 
 11356 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11357 ;;  start_sec       2   58[COMRAM] unsigned int 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  1    wreg      void 
 11360 ;; Registers used:
 11361 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11371 ;;Total ram usage:       33 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    3
 11374 ;; This function calls:
 11375 ;;		i2___lwdiv
 11376 ;;		i2___lwmod
 11377 ;;		i2___wmul
 11378 ;;		i2_getRTC
 11379 ;;		i2_lcdInst
 11380 ;;		i2_printf
 11381 ;; This function is called by:
 11382 ;;		_handler
 11383 ;; This function uses a non-reentrant model
 11384 ;;
 11385                           
 11386                           	psect	text57
 11387  001486                     __ptext57:
 11388                           	opt stack 0
 11389  001486                     _printSortTimer:
 11390                           	opt stack 20
 11391                           
 11392                           ;sort.c: 143: getRTC();
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;incstack = 0
 11396  001486  ECD1  F00F         	call	i2_getRTC	;wreg free
 11397                           
 11398                           ;sort.c: 144: int curTime[7];
 11399                           ;sort.c: 145: for(int i = 0; i < 7; i++){
 11400  00148A  0E00               	movlw	0
 11401  00148C  6E4A               	movwf	printSortTimer@i+1,c
 11402  00148E  0E00               	movlw	0
 11403  001490  6E49               	movwf	printSortTimer@i,c
 11404  001492                     i2l5528:
 11405  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 11406  001494  D006               	goto	i2l5532
 11407  001496  504A               	movf	printSortTimer@i+1,w,c
 11408  001498  E131               	bnz	i2l5538
 11409  00149A  0E07               	movlw	7
 11410  00149C  5C49               	subwf	printSortTimer@i,w,c
 11411  00149E  B0D8               	btfsc	status,0,c
 11412  0014A0  D02D               	goto	i2l5538
 11413  0014A2                     i2l5532:
 11414                           
 11415                           ;sort.c: 146: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11416  0014A2  0ED4               	movlw	low _time
 11417  0014A4  2449               	addwf	printSortTimer@i,w,c
 11418  0014A6  6ED9               	movwf	fsr2l,c
 11419  0014A8  0E00               	movlw	high _time
 11420  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 11421  0014AC  6EDA               	movwf	fsr2h,c
 11422  0014AE  50DF               	movf	indf2,w,c
 11423  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 11424  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 11425  0014B4  0E0F               	movlw	15
 11426  0014B6  162A               	andwf	??_printSortTimer,f,c
 11427  0014B8  0E0F               	movlw	15
 11428  0014BA  162A               	andwf	??_printSortTimer,f,c
 11429  0014BC  502A               	movf	??_printSortTimer,w,c
 11430  0014BE  0D0A               	mullw	10
 11431  0014C0  0ED4               	movlw	low _time
 11432  0014C2  2449               	addwf	printSortTimer@i,w,c
 11433  0014C4  6ED9               	movwf	fsr2l,c
 11434  0014C6  0E00               	movlw	high _time
 11435  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 11436  0014CA  6EDA               	movwf	fsr2h,c
 11437  0014CC  50DF               	movf	indf2,w,c
 11438  0014CE  0B0F               	andlw	15
 11439  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11440  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11441  0014D4  50F3               	movf	prodl,w,c
 11442  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 11443  0014D8  50F4               	movf	prodh,w,c
 11444  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 11445  0014DC  90D8               	bcf	status,0,c
 11446  0014DE  3449               	rlcf	printSortTimer@i,w,c
 11447  0014E0  6ED9               	movwf	fsr2l,c
 11448  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 11449  0014E4  6EDA               	movwf	fsr2h,c
 11450  0014E6  0E2D               	movlw	low printSortTimer@curTime
 11451  0014E8  26D9               	addwf	fsr2l,f,c
 11452  0014EA  0E00               	movlw	high printSortTimer@curTime
 11453  0014EC  22DA               	addwfc	fsr2h,f,c
 11454  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11455  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11456  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 11457  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 11458  0014FA  D7CB               	goto	i2l5528
 11459  0014FC                     i2l5538:
 11460                           
 11461                           ;sort.c: 147: }
 11462                           ;sort.c: 148: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11463  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11464  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11465  001504  0E00               	movlw	0
 11466  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 11467  001508  0E3C               	movlw	60
 11468  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 11469  00150C  ECAA  F013         	call	i2___wmul	;wreg free
 11470  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11471  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11472  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11473  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11474  001520  0E0E               	movlw	14
 11475  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 11476  001524  0E10               	movlw	16
 11477  001526  6E03               	movwf	i2___wmul@multiplicand,c
 11478  001528  ECAA  F013         	call	i2___wmul	;wreg free
 11479  00152C  5001               	movf	?i2___wmul,w,c
 11480  00152E  262A               	addwf	??_printSortTimer,f,c
 11481  001530  5002               	movf	?i2___wmul+1,w,c
 11482  001532  222B               	addwfc	??_printSortTimer+1,f,c
 11483  001534  0101               	movlb	1	; () banked
 11484  001536  5100               	movf	_startTime& (0+255),w,b
 11485  001538  242A               	addwf	??_printSortTimer,w,c
 11486  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 11487  00153C  0101               	movlb	1	; () banked
 11488  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 11489  001540  202B               	addwfc	??_printSortTimer+1,w,c
 11490  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 11491                           
 11492                           ;sort.c: 149: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11493  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11494  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11495  00154C  0E00               	movlw	0
 11496  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11497  001550  0E3C               	movlw	60
 11498  001552  6E03               	movwf	i2___wmul@multiplicand,c
 11499  001554  ECAA  F013         	call	i2___wmul	;wreg free
 11500  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11501  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11502  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11503  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11504  001568  0E0E               	movlw	14
 11505  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11506  00156C  0E10               	movlw	16
 11507  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 11508  001570  ECAA  F013         	call	i2___wmul	;wreg free
 11509  001574  5001               	movf	?i2___wmul,w,c
 11510  001576  262A               	addwf	??_printSortTimer,f,c
 11511  001578  5002               	movf	?i2___wmul+1,w,c
 11512  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 11513  00157C  502D               	movf	printSortTimer@curTime,w,c
 11514  00157E  242A               	addwf	??_printSortTimer,w,c
 11515  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 11516  001582  502E               	movf	printSortTimer@curTime+1,w,c
 11517  001584  202B               	addwfc	??_printSortTimer+1,w,c
 11518  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11519                           
 11520                           ;sort.c: 150: unsigned int timeDiff = cur_sec - start_sec;
 11521  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11522  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11523  001590  1E2A               	comf	??_printSortTimer,f,c
 11524  001592  1E2B               	comf	??_printSortTimer+1,f,c
 11525  001594  4A2A               	infsnz	??_printSortTimer,f,c
 11526  001596  2A2B               	incf	??_printSortTimer+1,f,c
 11527  001598  503D               	movf	printSortTimer@cur_sec,w,c
 11528  00159A  242A               	addwf	??_printSortTimer,w,c
 11529  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 11530  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 11531  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 11532  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 11533                           
 11534                           ;sort.c: 152: total_time = timeDiff;
 11535  0015A4  C047  F0F5         	movff	printSortTimer@timeDiff,_total_time
 11536  0015A8  C048  F0F6         	movff	printSortTimer@timeDiff+1,_total_time+1
 11537                           
 11538                           ;sort.c: 154: if(timeDiff >= 179){
 11539  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 11540  0015AE  E104               	bnz	i2u452_40
 11541  0015B0  0EB3               	movlw	179
 11542  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 11543  0015B4  A0D8               	btfss	status,0,c
 11544  0015B6  D003               	goto	i2l5548
 11545  0015B8                     i2u452_40:
 11546                           
 11547                           ;sort.c: 155: machine_state = DoneSorting_state;
 11548  0015B8  0E02               	movlw	2
 11549  0015BA  0100               	movlb	0	; () banked
 11550  0015BC  6FF7               	movwf	_machine_state& (0+255),b
 11551  0015BE                     i2l5548:
 11552                           
 11553                           ;sort.c: 157: }
 11554                           ;sort.c: 159: int hour = timeDiff / 3600;
 11555  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11556  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11557  0015C6  0E0E               	movlw	14
 11558  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11559  0015CA  0E10               	movlw	16
 11560  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 11561  0015CE  ECCA  F010         	call	i2___lwdiv	;wreg free
 11562  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11563  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11564                           
 11565                           ;sort.c: 160: int min = (timeDiff % 3600) / 60;
 11566  0015DA  0E0E               	movlw	14
 11567  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 11568  0015DE  0E10               	movlw	16
 11569  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 11570  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11571  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11572  0015EA  EC88  F011         	call	i2___lwmod	;wreg free
 11573  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11574  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11575  0015F6  0E00               	movlw	0
 11576  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11577  0015FA  0E3C               	movlw	60
 11578  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 11579  0015FE  ECCA  F010         	call	i2___lwdiv	;wreg free
 11580  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11581  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11582                           
 11583                           ;sort.c: 161: int sec = (timeDiff % 3600) % 60;
 11584  00160A  0E0E               	movlw	14
 11585  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 11586  00160E  0E10               	movlw	16
 11587  001610  6E03               	movwf	i2___lwmod@divisor,c
 11588  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11589  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11590  00161A  EC88  F011         	call	i2___lwmod	;wreg free
 11591  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2179
 11592  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2179+1
 11593                           
 11594                           ;sort.c: 161: int sec = (timeDiff % 3600) % 60;
 11595  001626  C045  F001         	movff	_printSortTimer$2179,i2___lwmod@dividend
 11596  00162A  C046  F002         	movff	_printSortTimer$2179+1,i2___lwmod@dividend+1
 11597  00162E  0E00               	movlw	0
 11598  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 11599  001632  0E3C               	movlw	60
 11600  001634  6E03               	movwf	i2___lwmod@divisor,c
 11601  001636  EC88  F011         	call	i2___lwmod	;wreg free
 11602  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11603  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11604                           
 11605                           ;sort.c: 163: lcdInst(0b10000000);;
 11606  001642  0E80               	movlw	128
 11607  001644  EC55  F014         	call	i2_lcdInst
 11608                           
 11609                           ;sort.c: 164: printf("Sorting...");
 11610  001648  0EA8               	movlw	low STR_49
 11611  00164A  6E0D               	movwf	i2printf@f,c
 11612  00164C  0EFF               	movlw	high STR_49
 11613  00164E  6E0E               	movwf	i2printf@f+1,c
 11614  001650  ECC0  F004         	call	i2_printf	;wreg free
 11615                           
 11616                           ;sort.c: 165: lcdInst(0b11000000);;
 11617  001654  0EC0               	movlw	192
 11618  001656  EC55  F014         	call	i2_lcdInst
 11619                           
 11620                           ;sort.c: 166: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11621  00165A  0EE8               	movlw	low STR_2
 11622  00165C  6E0D               	movwf	i2printf@f,c
 11623  00165E  0EFD               	movlw	high STR_2
 11624  001660  6E0E               	movwf	i2printf@f+1,c
 11625  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11626  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11627  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11628  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11629  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11630  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11631  00167A  ECC0  F004         	call	i2_printf	;wreg free
 11632  00167E  0012               	return		;funcret
 11633  001680                     __end_of_printSortTimer:
 11634                           	opt stack 0
 11635                           pclatu	equ	0xFFB
 11636                           pclath	equ	0xFFA
 11637                           tblptru	equ	0xFF8
 11638                           tblptrh	equ	0xFF7
 11639                           tblptrl	equ	0xFF6
 11640                           tablat	equ	0xFF5
 11641                           prodh	equ	0xFF4
 11642                           prodl	equ	0xFF3
 11643                           intcon	equ	0xFF2
 11644                           intcon3	equ	0xFF0
 11645                           indf0	equ	0xFEF
 11646                           postinc0	equ	0xFEE
 11647                           fsr0h	equ	0xFEA
 11648                           fsr0l	equ	0xFE9
 11649                           wreg	equ	0xFE8
 11650                           postdec1	equ	0xFE5
 11651                           fsr1h	equ	0xFE2
 11652                           fsr1l	equ	0xFE1
 11653                           indf2	equ	0xFDF
 11654                           postinc2	equ	0xFDE
 11655                           postdec2	equ	0xFDD
 11656                           fsr2h	equ	0xFDA
 11657                           fsr2l	equ	0xFD9
 11658                           status	equ	0xFD8
 11659                           
 11660 ;; *************** function i2_printf *****************
 11661 ;; Defined at:
 11662 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11665 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11666 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11667 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11668 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11669 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11670 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11671 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11672 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11673 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11674 ;;		 -> STR_2(21), STR_1(17), 
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;  printf          4    0        struct .
 11677 ;;  printf          2   39[COMRAM] int 
 11678 ;;  printf          2   35[COMRAM] unsigned int 
 11679 ;;  printf          2   33[COMRAM] unsigned int 
 11680 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11681 ;;		 -> STR_51(7), printRTC@month(4), 
 11682 ;;  printf          2   29[COMRAM] PTR void [1]
 11683 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11684 ;;  printf          1   38[COMRAM] char 
 11685 ;;  printf          1   37[COMRAM] unsigned char 
 11686 ;;  printf          1   28[COMRAM] char 
 11687 ;; Return value:  Size  Location     Type
 11688 ;;                  2   12[COMRAM] int 
 11689 ;; Registers used:
 11690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11691 ;; Tracked objects:
 11692 ;;		On entry : 0/0
 11693 ;;		On exit  : 0/0
 11694 ;;		Unchanged: 0/0
 11695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11696 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11697 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11698 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;Total ram usage:       29 bytes
 11701 ;; Hardware stack levels used:    1
 11702 ;; Hardware stack levels required when called:    2
 11703 ;; This function calls:
 11704 ;;		i2___lwdiv
 11705 ;;		i2___lwmod
 11706 ;;		i2___wmul
 11707 ;;		i2_isdigit
 11708 ;;		i2_putch
 11709 ;; This function is called by:
 11710 ;;		_change_state_to_menu_11
 11711 ;;		_change_state_to_menu_23
 11712 ;;		_change_state_to_logs_11
 11713 ;;		_change_state_to_logs_12
 11714 ;;		_change_state_to_logs_22
 11715 ;;		_change_state_to_logs_23
 11716 ;;		_change_state_to_logs_33
 11717 ;;		_change_state_to_logs_34
 11718 ;;		_printSortTimer
 11719 ;;		i2_change_state_to_menu_start
 11720 ;;		i2_change_state_to_menu_12
 11721 ;;		i2_change_state_to_menu_22
 11722 ;;		i2_printRTC
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           	psect	text58
 11727  000980                     __ptext58:
 11728                           	opt stack 0
 11729  000980                     i2_printf:
 11730                           	opt stack 19
 11731                           
 11732                           ;doprnt.c: 466: va_list ap;
 11733                           ;doprnt.c: 499: signed char c;
 11734                           ;doprnt.c: 501: int width;
 11735                           ;doprnt.c: 506: signed char prec;
 11736                           ;doprnt.c: 508: unsigned char flag;
 11737                           ;doprnt.c: 523: union {
 11738                           ;doprnt.c: 524: unsigned long vd;
 11739                           ;doprnt.c: 525: double integ;
 11740                           ;doprnt.c: 526: } tmpval;
 11741                           ;doprnt.c: 528: unsigned int val;
 11742                           ;doprnt.c: 529: unsigned len;
 11743                           ;doprnt.c: 530: const char * cp;
 11744                           ;doprnt.c: 533: *ap = __va_start();
 11745                           
 11746                           ;incstack = 0
 11747  000980  0E0F               	movlw	low (?i2_printf+2)
 11748  000982  6E1E               	movwf	i2printf@ap,c
 11749  000984  0E00               	movlw	high (?i2_printf+2)
 11750  000986  6E1F               	movwf	i2printf@ap+1,c
 11751                           
 11752                           ;doprnt.c: 536: while(c = *f++) {
 11753  000988  D190               	goto	i2l4388
 11754  00098A                     i2l4264:
 11755                           
 11756                           ;doprnt.c: 538: if(c != '%')
 11757  00098A  0E25               	movlw	37
 11758  00098C  1827               	xorwf	i2printf@c,w,c
 11759  00098E  B4D8               	btfsc	status,2,c
 11760  000990  D004               	goto	i2l4268
 11761                           
 11762                           ;doprnt.c: 540: {
 11763                           ;doprnt.c: 541: (putch(c) );
 11764  000992  5027               	movf	i2printf@c,w,c
 11765  000994  EC4F  F014         	call	i2_putch
 11766                           
 11767                           ;doprnt.c: 542: continue;
 11768  000998  D188               	goto	i2l4388
 11769  00099A                     i2l4268:
 11770                           
 11771                           ;doprnt.c: 543: }
 11772                           ;doprnt.c: 546: width = 0;
 11773  00099A  0E00               	movlw	0
 11774  00099C  6E29               	movwf	i2printf@width+1,c
 11775  00099E  0E00               	movlw	0
 11776  0009A0  6E28               	movwf	i2printf@width,c
 11777                           
 11778                           ;doprnt.c: 548: flag = 0;
 11779  0009A2  0E00               	movlw	0
 11780  0009A4  6E26               	movwf	i2printf@flag,c
 11781                           
 11782                           ;doprnt.c: 551: switch(*f) {
 11783                           
 11784                           ;doprnt.c: 550: for(;;) {
 11785  0009A6  D003               	goto	i2l4274
 11786  0009A8                     i2l4270:
 11787                           
 11788                           ;doprnt.c: 580: flag |= 0x04;
 11789  0009A8  8426               	bsf	i2printf@flag,2,c
 11790                           
 11791                           ;doprnt.c: 581: f++;
 11792  0009AA  4A0D               	infsnz	i2printf@f,f,c
 11793  0009AC  2A0E               	incf	i2printf@f+1,f,c
 11794  0009AE                     i2l4274:
 11795  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11796  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11797  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11798  0009B6  6AF8               	clrf	tblptru,c
 11799  0009B8                     	endif
 11800  0009B8                     	if	0	;tblptru may be non-zero
 11801  0009B8                     	endif
 11802  0009B8  0008               	tblrd		*
 11803  0009BA  50F5               	movf	tablat,w,c
 11804                           
 11805                           ; Switch size 1, requested type "space"
 11806                           ; Number of cases is 1, Range of values is 48 to 48
 11807                           ; switch strategies available:
 11808                           ; Name         Instructions Cycles
 11809                           ; simple_byte            4     3 (average)
 11810                           ;	Chosen strategy is simple_byte
 11811  0009BC  0A30               	xorlw	48	; case 48
 11812  0009BE  B4D8               	btfsc	status,2,c
 11813  0009C0  D7F3               	goto	i2l4270
 11814                           
 11815                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11816                           
 11817                           ;doprnt.c: 586: }
 11818                           
 11819                           ;doprnt.c: 585: break;
 11820  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11821  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11822  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11823  0009CA  6AF8               	clrf	tblptru,c
 11824  0009CC                     	endif
 11825  0009CC                     	if	0	;tblptru may be non-zero
 11826  0009CC                     	endif
 11827  0009CC  0008               	tblrd		*
 11828  0009CE  50F5               	movf	tablat,w,c
 11829  0009D0  ECF2  F013         	call	i2_isdigit
 11830  0009D4  A0D8               	btfss	status,0,c
 11831  0009D6  D0A4               	goto	i2l4320
 11832                           
 11833                           ;doprnt.c: 598: width = 0;
 11834  0009D8  0E00               	movlw	0
 11835  0009DA  6E29               	movwf	i2printf@width+1,c
 11836  0009DC  0E00               	movlw	0
 11837  0009DE  6E28               	movwf	i2printf@width,c
 11838  0009E0                     i2l4280:
 11839                           
 11840                           ;doprnt.c: 600: width *= 10;
 11841  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11842  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11843  0009E8  0E00               	movlw	0
 11844  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11845  0009EC  0E0A               	movlw	10
 11846  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 11847  0009F0  ECAA  F013         	call	i2___wmul	;wreg free
 11848  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 11849  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11850                           
 11851                           ;doprnt.c: 601: width += *f++ - '0';
 11852  0009FC  0ED0               	movlw	208
 11853  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 11854  000A00  0EFF               	movlw	255
 11855  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11856  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 11857  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11858  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11859  000A0C  6AF8               	clrf	tblptru,c
 11860  000A0E                     	endif
 11861  000A0E                     	if	0	;tblptru may be non-zero
 11862  000A0E                     	endif
 11863  000A0E  0008               	tblrd		*
 11864  000A10  50F5               	movf	tablat,w,c
 11865  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11866  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11867  000A16  5019               	movf	??i2_printf,w,c
 11868  000A18  261B               	addwf	??i2_printf+2,f,c
 11869  000A1A  501A               	movf	??i2_printf+1,w,c
 11870  000A1C  221C               	addwfc	??i2_printf+3,f,c
 11871  000A1E  501B               	movf	??i2_printf+2,w,c
 11872  000A20  2628               	addwf	i2printf@width,f,c
 11873  000A22  501C               	movf	??i2_printf+3,w,c
 11874  000A24  2229               	addwfc	i2printf@width+1,f,c
 11875  000A26  4A0D               	infsnz	i2printf@f,f,c
 11876  000A28  2A0E               	incf	i2printf@f+1,f,c
 11877                           
 11878                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11879  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11880  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11881  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11882  000A32  6AF8               	clrf	tblptru,c
 11883  000A34                     	endif
 11884  000A34                     	if	0	;tblptru may be non-zero
 11885  000A34                     	endif
 11886  000A34  0008               	tblrd		*
 11887  000A36  50F5               	movf	tablat,w,c
 11888  000A38  ECF2  F013         	call	i2_isdigit
 11889  000A3C  A0D8               	btfss	status,0,c
 11890  000A3E  D070               	goto	i2l4320
 11891  000A40  D7CF               	goto	i2l4280
 11892  000A42                     i2l4288:
 11893                           
 11894                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11895  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 11896  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 11897  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 11898  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 11899  000A52  0E02               	movlw	2
 11900  000A54  261E               	addwf	i2printf@ap,f,c
 11901  000A56  0E00               	movlw	0
 11902  000A58  221F               	addwfc	i2printf@ap+1,f,c
 11903                           
 11904                           ;doprnt.c: 740: if(!cp)
 11905  000A5A  5020               	movf	i2printf@cp,w,c
 11906  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 11907  000A5E  A4D8               	btfss	status,2,c
 11908  000A60  D004               	goto	i2l4296
 11909                           
 11910                           ;doprnt.c: 741: cp = "(null)";
 11911  000A62  0EBD               	movlw	low STR_51
 11912  000A64  6E20               	movwf	i2printf@cp,c
 11913  000A66  0EFF               	movlw	high STR_51
 11914  000A68  6E21               	movwf	i2printf@cp+1,c
 11915  000A6A                     i2l4296:
 11916                           
 11917                           ;doprnt.c: 745: len = 0;
 11918  000A6A  0E00               	movlw	0
 11919  000A6C  6E25               	movwf	i2printf@len+1,c
 11920  000A6E  0E00               	movlw	0
 11921  000A70  6E24               	movwf	i2printf@len,c
 11922                           
 11923                           ;doprnt.c: 746: while(cp[len])
 11924  000A72  D002               	goto	i2l4300
 11925  000A74                     i2l4298:
 11926                           
 11927                           ;doprnt.c: 747: len++;
 11928  000A74  4A24               	infsnz	i2printf@len,f,c
 11929  000A76  2A25               	incf	i2printf@len+1,f,c
 11930  000A78                     i2l4300:
 11931  000A78  5024               	movf	i2printf@len,w,c
 11932  000A7A  2420               	addwf	i2printf@cp,w,c
 11933  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 11934  000A7E  5025               	movf	i2printf@len+1,w,c
 11935  000A80  2021               	addwfc	i2printf@cp+1,w,c
 11936  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11937  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 11938  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 11939  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 11940  000A8E  6EF8               	movwf	tblptru,c
 11941  000A90  0E0F               	movlw	(high __ramtop+-1)
 11942  000A92  64F7               	cpfsgt	tblptrh,c
 11943  000A94  D003               	bra	i2u298_47
 11944  000A96  0008               	tblrd		*
 11945  000A98  50F5               	movf	tablat,w,c
 11946  000A9A  D005               	bra	i2u298_40
 11947  000A9C                     i2u298_47:
 11948  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 11949  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 11950  000AA4  50EF               	movf	indf0,w,c
 11951  000AA6                     i2u298_40:
 11952  000AA6  0900               	iorlw	0
 11953  000AA8  A4D8               	btfss	status,2,c
 11954  000AAA  D7E4               	goto	i2l4298
 11955                           
 11956                           ;doprnt.c: 757: if(width > len)
 11957  000AAC  5028               	movf	i2printf@width,w,c
 11958  000AAE  5C24               	subwf	i2printf@len,w,c
 11959  000AB0  5029               	movf	i2printf@width+1,w,c
 11960  000AB2  5825               	subwfb	i2printf@len+1,w,c
 11961  000AB4  B0D8               	btfsc	status,0,c
 11962  000AB6  D005               	goto	i2l4306
 11963                           
 11964                           ;doprnt.c: 758: width -= len;
 11965  000AB8  5024               	movf	i2printf@len,w,c
 11966  000ABA  5E28               	subwf	i2printf@width,f,c
 11967  000ABC  5025               	movf	i2printf@len+1,w,c
 11968  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 11969  000AC0  D008               	goto	i2l4310
 11970  000AC2                     i2l4306:
 11971                           
 11972                           ;doprnt.c: 759: else
 11973                           ;doprnt.c: 760: width = 0;
 11974  000AC2  0E00               	movlw	0
 11975  000AC4  6E29               	movwf	i2printf@width+1,c
 11976  000AC6  0E00               	movlw	0
 11977  000AC8  6E28               	movwf	i2printf@width,c
 11978                           
 11979                           ;doprnt.c: 764: while(width--)
 11980  000ACA  D003               	goto	i2l4310
 11981  000ACC                     i2l4308:
 11982                           
 11983                           ;doprnt.c: 765: (putch(' ') );
 11984  000ACC  0E20               	movlw	32
 11985  000ACE  EC4F  F014         	call	i2_putch
 11986  000AD2                     i2l4310:
 11987  000AD2  0628               	decf	i2printf@width,f,c
 11988  000AD4  A0D8               	btfss	status,0,c
 11989  000AD6  0629               	decf	i2printf@width+1,f,c
 11990  000AD8  2828               	incf	i2printf@width,w,c
 11991  000ADA  E1F8               	bnz	i2l4308
 11992  000ADC  2829               	incf	i2printf@width+1,w,c
 11993  000ADE  B4D8               	btfsc	status,2,c
 11994  000AE0  D016               	goto	i2l4316
 11995  000AE2  D7F4               	goto	i2l4308
 11996  000AE4                     i2l4312:
 11997                           
 11998                           ;doprnt.c: 768: (putch(*cp++) );
 11999  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12000  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12001  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12002  000AEE  6EF8               	movwf	tblptru,c
 12003  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12004  000AF2  64F7               	cpfsgt	tblptrh,c
 12005  000AF4  D003               	bra	i2u302_47
 12006  000AF6  0008               	tblrd		*
 12007  000AF8  50F5               	movf	tablat,w,c
 12008  000AFA  D005               	bra	i2u302_40
 12009  000AFC                     i2u302_47:
 12010  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12011  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12012  000B04  50EF               	movf	indf0,w,c
 12013  000B06                     i2u302_40:
 12014  000B06  EC4F  F014         	call	i2_putch
 12015  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12016  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12017  000B0E                     i2l4316:
 12018  000B0E  0624               	decf	i2printf@len,f,c
 12019  000B10  A0D8               	btfss	status,0,c
 12020  000B12  0625               	decf	i2printf@len+1,f,c
 12021  000B14  2824               	incf	i2printf@len,w,c
 12022  000B16  E1E6               	bnz	i2l4312
 12023  000B18  2825               	incf	i2printf@len+1,w,c
 12024  000B1A  B4D8               	btfsc	status,2,c
 12025  000B1C  D0C6               	goto	i2l4388
 12026  000B1E  D7E2               	goto	i2l4312
 12027  000B20                     i2l4320:
 12028  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12029  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12030  000B28  4A0D               	infsnz	i2printf@f,f,c
 12031  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12032  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12033  000B2C  6AF8               	clrf	tblptru,c
 12034  000B2E                     	endif
 12035  000B2E                     	if	0	;tblptru may be non-zero
 12036  000B2E                     	endif
 12037  000B2E  0008               	tblrd		*
 12038  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12039  000B34  5027               	movf	i2printf@c,w,c
 12040                           
 12041                           ; Switch size 1, requested type "space"
 12042                           ; Number of cases is 4, Range of values is 0 to 115
 12043                           ; switch strategies available:
 12044                           ; Name         Instructions Cycles
 12045                           ; simple_byte           13     7 (average)
 12046                           ;	Chosen strategy is simple_byte
 12047  000B36  0A00               	xorlw	0	; case 0
 12048  000B38  B4D8               	btfsc	status,2,c
 12049  000B3A  0012               	return	
 12050  000B3C  0A64               	xorlw	100	; case 100
 12051  000B3E  B4D8               	btfsc	status,2,c
 12052  000B40  D007               	goto	i2l4322
 12053  000B42  0A0D               	xorlw	13	; case 105
 12054  000B44  B4D8               	btfsc	status,2,c
 12055  000B46  D004               	goto	i2l4322
 12056  000B48  0A1A               	xorlw	26	; case 115
 12057  000B4A  B4D8               	btfsc	status,2,c
 12058  000B4C  D77A               	goto	i2l4288
 12059  000B4E  D0AD               	goto	i2l4388
 12060  000B50                     i2l4322:
 12061                           
 12062                           ;doprnt.c: 1253: {
 12063                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12064  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12065  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12066  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12067  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12068  000B60  0E02               	movlw	2
 12069  000B62  261E               	addwf	i2printf@ap,f,c
 12070  000B64  0E00               	movlw	0
 12071  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12072                           
 12073                           ;doprnt.c: 1261: if((int)val < 0) {
 12074  000B68  AE23               	btfss	i2printf@val+1,7,c
 12075  000B6A  D006               	goto	i2l4332
 12076                           
 12077                           ;doprnt.c: 1262: flag |= 0x03;
 12078  000B6C  0E03               	movlw	3
 12079  000B6E  1226               	iorwf	i2printf@flag,f,c
 12080                           
 12081                           ;doprnt.c: 1263: val = -val;
 12082  000B70  6C22               	negf	i2printf@val,c
 12083  000B72  1E23               	comf	i2printf@val+1,f,c
 12084  000B74  B0D8               	btfsc	status,0,c
 12085  000B76  2A23               	incf	i2printf@val+1,f,c
 12086  000B78                     i2l4332:
 12087                           
 12088                           ;doprnt.c: 1264: }
 12089                           ;doprnt.c: 1266: }
 12090                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12091  000B78  0E01               	movlw	1
 12092  000B7A  6E27               	movwf	i2printf@c,c
 12093  000B7C                     i2l4334:
 12094  000B7C  0E05               	movlw	5
 12095  000B7E  1827               	xorwf	i2printf@c,w,c
 12096  000B80  B4D8               	btfsc	status,2,c
 12097  000B82  D015               	goto	i2l4346
 12098                           
 12099                           ;doprnt.c: 1306: if(val < dpowers[c])
 12100  000B84  5027               	movf	i2printf@c,w,c
 12101  000B86  0D02               	mullw	2
 12102  000B88  0EC6               	movlw	low _dpowers
 12103  000B8A  24F3               	addwf	prodl,w,c
 12104  000B8C  6EF6               	movwf	tblptrl,c
 12105  000B8E  0EFD               	movlw	high _dpowers
 12106  000B90  20F4               	addwfc	prodh,w,c
 12107  000B92  6EF7               	movwf	tblptrh,c
 12108  000B94                     	if	1	;There are 3 active tblptr bytes
 12109  000B94  6AF8               	clrf	tblptru,c
 12110  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12111  000B98  22F8               	addwfc	tblptru,f,c
 12112  000B9A                     	endif
 12113  000B9A  0009               	tblrd		*+
 12114  000B9C  50F5               	movf	tablat,w,c
 12115  000B9E  5C22               	subwf	i2printf@val,w,c
 12116  000BA0  0009               	tblrd		*+
 12117  000BA2  50F5               	movf	tablat,w,c
 12118  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12119  000BA6  A0D8               	btfss	status,0,c
 12120  000BA8  D002               	goto	i2l4346
 12121                           
 12122                           ;doprnt.c: 1307: break;
 12123  000BAA  2A27               	incf	i2printf@c,f,c
 12124  000BAC  D7E7               	goto	i2l4334
 12125  000BAE                     i2l4346:
 12126                           
 12127                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12128  000BAE  5028               	movf	i2printf@width,w,c
 12129  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12130  000BB2  B4D8               	btfsc	status,2,c
 12131  000BB4  D009               	goto	i2l4352
 12132  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12133  000BBA  0E03               	movlw	3
 12134  000BBC  1619               	andwf	??i2_printf,f,c
 12135  000BBE  B4D8               	btfsc	status,2,c
 12136  000BC0  D003               	goto	i2l4352
 12137                           
 12138                           ;doprnt.c: 1346: width--;
 12139  000BC2  0628               	decf	i2printf@width,f,c
 12140  000BC4  A0D8               	btfss	status,0,c
 12141  000BC6  0629               	decf	i2printf@width+1,f,c
 12142  000BC8                     i2l4352:
 12143                           
 12144                           ;doprnt.c: 1381: if(width > c)
 12145  000BC8  0E80               	movlw	128
 12146  000BCA  BE27               	btfsc	i2printf@c,7,c
 12147  000BCC  0E7F               	movlw	127
 12148  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12149  000BD0  5028               	movf	i2printf@width,w,c
 12150  000BD2  5C27               	subwf	i2printf@c,w,c
 12151  000BD4  5029               	movf	i2printf@width+1,w,c
 12152  000BD6  0A80               	xorlw	128
 12153  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12154  000BDA  B0D8               	btfsc	status,0,c
 12155  000BDC  D007               	goto	i2l4356
 12156                           
 12157                           ;doprnt.c: 1382: width -= c;
 12158  000BDE  5027               	movf	i2printf@c,w,c
 12159  000BE0  5E28               	subwf	i2printf@width,f,c
 12160  000BE2  0E00               	movlw	0
 12161  000BE4  BE27               	btfsc	i2printf@c,7,c
 12162  000BE6  0EFF               	movlw	255
 12163  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12164  000BEA  D004               	goto	i2l4358
 12165  000BEC                     i2l4356:
 12166                           
 12167                           ;doprnt.c: 1383: else
 12168                           ;doprnt.c: 1384: width = 0;
 12169  000BEC  0E00               	movlw	0
 12170  000BEE  6E29               	movwf	i2printf@width+1,c
 12171  000BF0  0E00               	movlw	0
 12172  000BF2  6E28               	movwf	i2printf@width,c
 12173  000BF4                     i2l4358:
 12174                           
 12175                           ;doprnt.c: 1387: if(flag & 0x04) {
 12176  000BF4  A426               	btfss	i2printf@flag,2,c
 12177  000BF6  D014               	goto	i2l4370
 12178                           
 12179                           ;doprnt.c: 1392: if(flag & 0x03)
 12180  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12181  000BFC  0E03               	movlw	3
 12182  000BFE  1619               	andwf	??i2_printf,f,c
 12183  000C00  B4D8               	btfsc	status,2,c
 12184  000C02  D003               	goto	i2l4364
 12185                           
 12186                           ;doprnt.c: 1393: (putch('-') );
 12187  000C04  0E2D               	movlw	45
 12188  000C06  EC4F  F014         	call	i2_putch
 12189  000C0A                     i2l4364:
 12190                           
 12191                           ;doprnt.c: 1415: if(width)
 12192  000C0A  5028               	movf	i2printf@width,w,c
 12193  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12194  000C0E  B4D8               	btfsc	status,2,c
 12195  000C10  D01E               	goto	i2l4380
 12196                           
 12197                           ;doprnt.c: 1417: (putch('0') );
 12198                           
 12199                           ;doprnt.c: 1416: do
 12200  000C12  0E30               	movlw	48
 12201  000C14  EC4F  F014         	call	i2_putch
 12202                           
 12203                           ;doprnt.c: 1418: while(--width);
 12204  000C18  0628               	decf	i2printf@width,f,c
 12205  000C1A  A0D8               	btfss	status,0,c
 12206  000C1C  0629               	decf	i2printf@width+1,f,c
 12207  000C1E  D7F5               	goto	i2l4364
 12208  000C20                     i2l4370:
 12209                           
 12210                           ;doprnt.c: 1422: {
 12211                           ;doprnt.c: 1424: if(width
 12212                           ;doprnt.c: 1428: )
 12213  000C20  5028               	movf	i2printf@width,w,c
 12214  000C22  1029               	iorwf	i2printf@width+1,w,c
 12215  000C24  B4D8               	btfsc	status,2,c
 12216  000C26  D00A               	goto	i2l4376
 12217  000C28                     i2l4372:
 12218                           
 12219                           ;doprnt.c: 1430: (putch(' ') );
 12220  000C28  0E20               	movlw	32
 12221  000C2A  EC4F  F014         	call	i2_putch
 12222                           
 12223                           ;doprnt.c: 1431: while(--width);
 12224  000C2E  0628               	decf	i2printf@width,f,c
 12225  000C30  A0D8               	btfss	status,0,c
 12226  000C32  0629               	decf	i2printf@width+1,f,c
 12227  000C34  5028               	movf	i2printf@width,w,c
 12228  000C36  1029               	iorwf	i2printf@width+1,w,c
 12229  000C38  A4D8               	btfss	status,2,c
 12230  000C3A  D7F6               	goto	i2l4372
 12231  000C3C                     i2l4376:
 12232                           
 12233                           ;doprnt.c: 1438: if(flag & 0x03)
 12234  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12235  000C40  0E03               	movlw	3
 12236  000C42  1619               	andwf	??i2_printf,f,c
 12237  000C44  B4D8               	btfsc	status,2,c
 12238  000C46  D003               	goto	i2l4380
 12239                           
 12240                           ;doprnt.c: 1439: (putch('-') );
 12241  000C48  0E2D               	movlw	45
 12242  000C4A  EC4F  F014         	call	i2_putch
 12243  000C4E                     i2l4380:
 12244                           
 12245                           ;doprnt.c: 1469: }
 12246                           ;doprnt.c: 1472: prec = c;
 12247  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12248                           
 12249                           ;doprnt.c: 1474: while(prec--) {
 12250  000C52  D027               	goto	i2l4386
 12251  000C54                     i2l4382:
 12252                           
 12253                           ;doprnt.c: 1478: {
 12254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12255  000C54  501D               	movf	i2printf@prec,w,c
 12256  000C56  0D02               	mullw	2
 12257  000C58  0EC6               	movlw	low _dpowers
 12258  000C5A  24F3               	addwf	prodl,w,c
 12259  000C5C  6EF6               	movwf	tblptrl,c
 12260  000C5E  0EFD               	movlw	high _dpowers
 12261  000C60  20F4               	addwfc	prodh,w,c
 12262  000C62  6EF7               	movwf	tblptrh,c
 12263  000C64                     	if	1	;There are 3 active tblptr bytes
 12264  000C64  6AF8               	clrf	tblptru,c
 12265  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12266  000C68  22F8               	addwfc	tblptru,f,c
 12267  000C6A                     	endif
 12268  000C6A  0009               	tblrd		*+
 12269  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12270  000C70  000A               	tblrd		*-
 12271  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12272  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12273  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12274  000C7E  ECCA  F010         	call	i2___lwdiv	;wreg free
 12275  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12276  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12277  000C8A  0E00               	movlw	0
 12278  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12279  000C8E  0E0A               	movlw	10
 12280  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12281  000C92  EC88  F011         	call	i2___lwmod	;wreg free
 12282  000C96  5001               	movf	?i2___lwmod,w,c
 12283  000C98  0F30               	addlw	48
 12284  000C9A  6E27               	movwf	i2printf@c,c
 12285                           
 12286                           ;doprnt.c: 1523: }
 12287                           ;doprnt.c: 1524: (putch(c) );
 12288  000C9C  5027               	movf	i2printf@c,w,c
 12289  000C9E  EC4F  F014         	call	i2_putch
 12290  000CA2                     i2l4386:
 12291  000CA2  061D               	decf	i2printf@prec,f,c
 12292  000CA4  281D               	incf	i2printf@prec,w,c
 12293  000CA6  A4D8               	btfss	status,2,c
 12294  000CA8  D7D5               	goto	i2l4382
 12295  000CAA                     i2l4388:
 12296  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12297  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12298  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12299  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12300  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12301  000CB6  6AF8               	clrf	tblptru,c
 12302  000CB8                     	endif
 12303  000CB8                     	if	0	;tblptru may be non-zero
 12304  000CB8                     	endif
 12305  000CB8  0008               	tblrd		*
 12306  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12307  000CBE  5027               	movf	i2printf@c,w,c
 12308  000CC0  B4D8               	btfsc	status,2,c
 12309  000CC2  0012               	return	
 12310  000CC4  D662               	goto	i2l4264
 12311  000CC6                     __end_ofi2_printf:
 12312                           	opt stack 0
 12313                           pclatu	equ	0xFFB
 12314                           pclath	equ	0xFFA
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           intcon3	equ	0xFF0
 12323                           indf0	equ	0xFEF
 12324                           postinc0	equ	0xFEE
 12325                           fsr0h	equ	0xFEA
 12326                           fsr0l	equ	0xFE9
 12327                           wreg	equ	0xFE8
 12328                           postdec1	equ	0xFE5
 12329                           fsr1h	equ	0xFE2
 12330                           fsr1l	equ	0xFE1
 12331                           indf2	equ	0xFDF
 12332                           postinc2	equ	0xFDE
 12333                           postdec2	equ	0xFDD
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8
 12337                           
 12338 ;; *************** function i2_putch *****************
 12339 ;; Defined at:
 12340 ;;		line 18 in file "lcd.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;  data            1    wreg     unsigned char 
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  data            1    2[COMRAM] unsigned char 
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  1    wreg      void 
 12347 ;; Registers used:
 12348 ;;		wreg, status,2, status,0, cstack
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12357 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12358 ;;Total ram usage:        1 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:    1
 12361 ;; This function calls:
 12362 ;;		i2_lcdNibble
 12363 ;; This function is called by:
 12364 ;;		i2_printf
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text59
 12369  00289E                     __ptext59:
 12370                           	opt stack 0
 12371  00289E                     i2_putch:
 12372                           	opt stack 19
 12373                           
 12374                           ;incstack = 0
 12375                           ;i2putch@data stored from wreg
 12376  00289E  6E03               	movwf	i2putch@data,c
 12377                           
 12378                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12379  0028A0  848C               	bsf	3980,2,c	;volatile
 12380                           
 12381                           ;lcd.c: 20: lcdNibble(data);
 12382  0028A2  5003               	movf	i2putch@data,w,c
 12383  0028A4  EC9F  F010         	call	i2_lcdNibble
 12384  0028A8  0012               	return		;funcret
 12385  0028AA                     __end_ofi2_putch:
 12386                           	opt stack 0
 12387                           pclatu	equ	0xFFB
 12388                           pclath	equ	0xFFA
 12389                           tblptru	equ	0xFF8
 12390                           tblptrh	equ	0xFF7
 12391                           tblptrl	equ	0xFF6
 12392                           tablat	equ	0xFF5
 12393                           prodh	equ	0xFF4
 12394                           prodl	equ	0xFF3
 12395                           intcon	equ	0xFF2
 12396                           intcon3	equ	0xFF0
 12397                           indf0	equ	0xFEF
 12398                           postinc0	equ	0xFEE
 12399                           fsr0h	equ	0xFEA
 12400                           fsr0l	equ	0xFE9
 12401                           wreg	equ	0xFE8
 12402                           postdec1	equ	0xFE5
 12403                           fsr1h	equ	0xFE2
 12404                           fsr1l	equ	0xFE1
 12405                           indf2	equ	0xFDF
 12406                           postinc2	equ	0xFDE
 12407                           postdec2	equ	0xFDD
 12408                           fsr2h	equ	0xFDA
 12409                           fsr2l	equ	0xFD9
 12410                           status	equ	0xFD8
 12411                           
 12412 ;; *************** function i2_isdigit *****************
 12413 ;; Defined at:
 12414 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12415 ;; Parameters:    Size  Location     Type
 12416 ;;  c               1    wreg     unsigned char 
 12417 ;; Auto vars:     Size  Location     Type
 12418 ;;  c               1    2[COMRAM] unsigned char 
 12419 ;; Return value:  Size  Location     Type
 12420 ;;		None               void
 12421 ;; Registers used:
 12422 ;;		wreg, status,2, status,0
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12429 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12432 ;;Total ram usage:        3 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; This function calls:
 12435 ;;		Nothing
 12436 ;; This function is called by:
 12437 ;;		i2_printf
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           	psect	text60
 12442  0027E4                     __ptext60:
 12443                           	opt stack 0
 12444  0027E4                     i2_isdigit:
 12445                           	opt stack 20
 12446                           
 12447                           ;incstack = 0
 12448                           ;i2isdigit@c stored from wreg
 12449  0027E4  6E03               	movwf	i2isdigit@c,c
 12450  0027E6  0E00               	movlw	0
 12451  0027E8  6E02               	movwf	i2_isdigit$1703,c
 12452  0027EA  0E3A               	movlw	58
 12453  0027EC  6003               	cpfslt	i2isdigit@c,c
 12454  0027EE  D005               	goto	i2l4024
 12455  0027F0  0E2F               	movlw	47
 12456  0027F2  6403               	cpfsgt	i2isdigit@c,c
 12457  0027F4  D002               	goto	i2l4024
 12458  0027F6  0E01               	movlw	1
 12459  0027F8  6E02               	movwf	i2_isdigit$1703,c
 12460  0027FA                     i2l4024:
 12461  0027FA  C002  F001         	movff	i2_isdigit$1703,??i2_isdigit
 12462  0027FE  3001               	rrcf	??i2_isdigit,w,c
 12463  002800  0012               	return	
 12464  002802                     __end_ofi2_isdigit:
 12465                           	opt stack 0
 12466                           pclatu	equ	0xFFB
 12467                           pclath	equ	0xFFA
 12468                           tblptru	equ	0xFF8
 12469                           tblptrh	equ	0xFF7
 12470                           tblptrl	equ	0xFF6
 12471                           tablat	equ	0xFF5
 12472                           prodh	equ	0xFF4
 12473                           prodl	equ	0xFF3
 12474                           intcon	equ	0xFF2
 12475                           intcon3	equ	0xFF0
 12476                           indf0	equ	0xFEF
 12477                           postinc0	equ	0xFEE
 12478                           fsr0h	equ	0xFEA
 12479                           fsr0l	equ	0xFE9
 12480                           wreg	equ	0xFE8
 12481                           postdec1	equ	0xFE5
 12482                           fsr1h	equ	0xFE2
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           postdec2	equ	0xFDD
 12487                           fsr2h	equ	0xFDA
 12488                           fsr2l	equ	0xFD9
 12489                           status	equ	0xFD8
 12490                           
 12491 ;; *************** function i2___wmul *****************
 12492 ;; Defined at:
 12493 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;  multiplier      2    0[COMRAM] unsigned int 
 12496 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12497 ;; Auto vars:     Size  Location     Type
 12498 ;;  __wmul          2    4[COMRAM] unsigned int 
 12499 ;; Return value:  Size  Location     Type
 12500 ;;                  2    0[COMRAM] unsigned int 
 12501 ;; Registers used:
 12502 ;;		wreg, status,2, status,0, prodl, prodh
 12503 ;; Tracked objects:
 12504 ;;		On entry : 0/0
 12505 ;;		On exit  : 0/0
 12506 ;;		Unchanged: 0/0
 12507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;Total ram usage:        6 bytes
 12513 ;; Hardware stack levels used:    1
 12514 ;; This function calls:
 12515 ;;		Nothing
 12516 ;; This function is called by:
 12517 ;;		_printSortTimer
 12518 ;;		i2_printf
 12519 ;; This function uses a non-reentrant model
 12520 ;;
 12521                           
 12522                           	psect	text61
 12523  002754                     __ptext61:
 12524                           	opt stack 0
 12525  002754                     i2___wmul:
 12526                           	opt stack 20
 12527                           
 12528                           ;incstack = 0
 12529  002754  5001               	movf	i2___wmul@multiplier,w,c
 12530  002756  0203               	mulwf	i2___wmul@multiplicand,c
 12531  002758  CFF3 F005          	movff	prodl,i2___wmul@product
 12532  00275C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12533  002760  5001               	movf	i2___wmul@multiplier,w,c
 12534  002762  0204               	mulwf	i2___wmul@multiplicand+1,c
 12535  002764  50F3               	movf	prodl,w,c
 12536  002766  2606               	addwf	i2___wmul@product+1,f,c
 12537  002768  5002               	movf	i2___wmul@multiplier+1,w,c
 12538  00276A  0203               	mulwf	i2___wmul@multiplicand,c
 12539  00276C  50F3               	movf	prodl,w,c
 12540  00276E  2606               	addwf	i2___wmul@product+1,f,c
 12541  002770  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12542  002774  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12543  002778  0012               	return	
 12544  00277A                     __end_ofi2___wmul:
 12545                           	opt stack 0
 12546                           pclatu	equ	0xFFB
 12547                           pclath	equ	0xFFA
 12548                           tblptru	equ	0xFF8
 12549                           tblptrh	equ	0xFF7
 12550                           tblptrl	equ	0xFF6
 12551                           tablat	equ	0xFF5
 12552                           prodh	equ	0xFF4
 12553                           prodl	equ	0xFF3
 12554                           intcon	equ	0xFF2
 12555                           intcon3	equ	0xFF0
 12556                           indf0	equ	0xFEF
 12557                           postinc0	equ	0xFEE
 12558                           fsr0h	equ	0xFEA
 12559                           fsr0l	equ	0xFE9
 12560                           wreg	equ	0xFE8
 12561                           postdec1	equ	0xFE5
 12562                           fsr1h	equ	0xFE2
 12563                           fsr1l	equ	0xFE1
 12564                           indf2	equ	0xFDF
 12565                           postinc2	equ	0xFDE
 12566                           postdec2	equ	0xFDD
 12567                           fsr2h	equ	0xFDA
 12568                           fsr2l	equ	0xFD9
 12569                           status	equ	0xFD8
 12570                           
 12571 ;; *************** function i2___lwmod *****************
 12572 ;; Defined at:
 12573 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;  dividend        2    0[COMRAM] unsigned int 
 12576 ;;  divisor         2    2[COMRAM] unsigned int 
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  2    0[COMRAM] unsigned int 
 12581 ;; Registers used:
 12582 ;;		wreg, status,2, status,0
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;Total ram usage:        5 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; This function calls:
 12595 ;;		Nothing
 12596 ;; This function is called by:
 12597 ;;		_printSortTimer
 12598 ;;		i2_printf
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	text62
 12603  002310                     __ptext62:
 12604                           	opt stack 0
 12605  002310                     i2___lwmod:
 12606                           	opt stack 20
 12607                           
 12608                           ;incstack = 0
 12609  002310  5003               	movf	i2___lwmod@divisor,w,c
 12610  002312  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12611  002314  B4D8               	btfsc	status,2,c
 12612  002316  D018               	goto	i2l1655
 12613  002318  0E01               	movlw	1
 12614  00231A  6E05               	movwf	i2___lwmod@counter,c
 12615  00231C  D004               	goto	i2l4056
 12616  00231E                     i2l4054:
 12617  00231E  90D8               	bcf	status,0,c
 12618  002320  3603               	rlcf	i2___lwmod@divisor,f,c
 12619  002322  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12620  002324  2A05               	incf	i2___lwmod@counter,f,c
 12621  002326                     i2l4056:
 12622  002326  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12623  002328  D7FA               	goto	i2l4054
 12624  00232A                     i2l4058:
 12625  00232A  5003               	movf	i2___lwmod@divisor,w,c
 12626  00232C  5C01               	subwf	i2___lwmod@dividend,w,c
 12627  00232E  5004               	movf	i2___lwmod@divisor+1,w,c
 12628  002330  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12629  002332  A0D8               	btfss	status,0,c
 12630  002334  D004               	goto	i2l4062
 12631  002336  5003               	movf	i2___lwmod@divisor,w,c
 12632  002338  5E01               	subwf	i2___lwmod@dividend,f,c
 12633  00233A  5004               	movf	i2___lwmod@divisor+1,w,c
 12634  00233C  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12635  00233E                     i2l4062:
 12636  00233E  90D8               	bcf	status,0,c
 12637  002340  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12638  002342  3203               	rrcf	i2___lwmod@divisor,f,c
 12639  002344  2E05               	decfsz	i2___lwmod@counter,f,c
 12640  002346  D7F1               	goto	i2l4058
 12641  002348                     i2l1655:
 12642  002348  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12643  00234C  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12644  002350  0012               	return		;funcret
 12645  002352                     __end_ofi2___lwmod:
 12646                           	opt stack 0
 12647                           pclatu	equ	0xFFB
 12648                           pclath	equ	0xFFA
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           intcon3	equ	0xFF0
 12657                           indf0	equ	0xFEF
 12658                           postinc0	equ	0xFEE
 12659                           fsr0h	equ	0xFEA
 12660                           fsr0l	equ	0xFE9
 12661                           wreg	equ	0xFE8
 12662                           postdec1	equ	0xFE5
 12663                           fsr1h	equ	0xFE2
 12664                           fsr1l	equ	0xFE1
 12665                           indf2	equ	0xFDF
 12666                           postinc2	equ	0xFDE
 12667                           postdec2	equ	0xFDD
 12668                           fsr2h	equ	0xFDA
 12669                           fsr2l	equ	0xFD9
 12670                           status	equ	0xFD8
 12671                           
 12672 ;; *************** function i2___lwdiv *****************
 12673 ;; Defined at:
 12674 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;  dividend        2    5[COMRAM] unsigned int 
 12677 ;;  divisor         2    7[COMRAM] unsigned int 
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12680 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  2    5[COMRAM] unsigned int 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2, status,0
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;Total ram usage:        7 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; This function calls:
 12697 ;;		Nothing
 12698 ;; This function is called by:
 12699 ;;		_printSortTimer
 12700 ;;		i2_printf
 12701 ;; This function uses a non-reentrant model
 12702 ;;
 12703                           
 12704                           	psect	text63
 12705  002194                     __ptext63:
 12706                           	opt stack 0
 12707  002194                     i2___lwdiv:
 12708                           	opt stack 20
 12709                           
 12710                           ;incstack = 0
 12711  002194  0E00               	movlw	0
 12712  002196  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12713  002198  0E00               	movlw	0
 12714  00219A  6E0A               	movwf	i2___lwdiv@quotient,c
 12715  00219C  5008               	movf	i2___lwdiv@divisor,w,c
 12716  00219E  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12717  0021A0  B4D8               	btfsc	status,2,c
 12718  0021A2  D01C               	goto	i2l1645
 12719  0021A4  0E01               	movlw	1
 12720  0021A6  6E0C               	movwf	i2___lwdiv@counter,c
 12721  0021A8  D004               	goto	i2l4036
 12722  0021AA                     i2l4034:
 12723  0021AA  90D8               	bcf	status,0,c
 12724  0021AC  3608               	rlcf	i2___lwdiv@divisor,f,c
 12725  0021AE  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12726  0021B0  2A0C               	incf	i2___lwdiv@counter,f,c
 12727  0021B2                     i2l4036:
 12728  0021B2  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12729  0021B4  D7FA               	goto	i2l4034
 12730  0021B6                     i2l4038:
 12731  0021B6  90D8               	bcf	status,0,c
 12732  0021B8  360A               	rlcf	i2___lwdiv@quotient,f,c
 12733  0021BA  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12734  0021BC  5008               	movf	i2___lwdiv@divisor,w,c
 12735  0021BE  5C06               	subwf	i2___lwdiv@dividend,w,c
 12736  0021C0  5009               	movf	i2___lwdiv@divisor+1,w,c
 12737  0021C2  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12738  0021C4  A0D8               	btfss	status,0,c
 12739  0021C6  D005               	goto	i2l4046
 12740  0021C8  5008               	movf	i2___lwdiv@divisor,w,c
 12741  0021CA  5E06               	subwf	i2___lwdiv@dividend,f,c
 12742  0021CC  5009               	movf	i2___lwdiv@divisor+1,w,c
 12743  0021CE  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12744  0021D0  800A               	bsf	i2___lwdiv@quotient,0,c
 12745  0021D2                     i2l4046:
 12746  0021D2  90D8               	bcf	status,0,c
 12747  0021D4  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12748  0021D6  3208               	rrcf	i2___lwdiv@divisor,f,c
 12749  0021D8  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12750  0021DA  D7ED               	goto	i2l4038
 12751  0021DC                     i2l1645:
 12752  0021DC  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12753  0021E0  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12754  0021E4  0012               	return		;funcret
 12755  0021E6                     __end_ofi2___lwdiv:
 12756                           	opt stack 0
 12757                           pclatu	equ	0xFFB
 12758                           pclath	equ	0xFFA
 12759                           tblptru	equ	0xFF8
 12760                           tblptrh	equ	0xFF7
 12761                           tblptrl	equ	0xFF6
 12762                           tablat	equ	0xFF5
 12763                           prodh	equ	0xFF4
 12764                           prodl	equ	0xFF3
 12765                           intcon	equ	0xFF2
 12766                           intcon3	equ	0xFF0
 12767                           indf0	equ	0xFEF
 12768                           postinc0	equ	0xFEE
 12769                           fsr0h	equ	0xFEA
 12770                           fsr0l	equ	0xFE9
 12771                           wreg	equ	0xFE8
 12772                           postdec1	equ	0xFE5
 12773                           fsr1h	equ	0xFE2
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           fsr2h	equ	0xFDA
 12779                           fsr2l	equ	0xFD9
 12780                           status	equ	0xFD8
 12781                           
 12782 ;; *************** function i2_lcdInst *****************
 12783 ;; Defined at:
 12784 ;;		line 13 in file "lcd.c"
 12785 ;; Parameters:    Size  Location     Type
 12786 ;;  data            1    wreg     unsigned char 
 12787 ;; Auto vars:     Size  Location     Type
 12788 ;;  data            1    2[COMRAM] unsigned char 
 12789 ;; Return value:  Size  Location     Type
 12790 ;;                  1    wreg      void 
 12791 ;; Registers used:
 12792 ;;		wreg, status,2, status,0, cstack
 12793 ;; Tracked objects:
 12794 ;;		On entry : 0/0
 12795 ;;		On exit  : 0/0
 12796 ;;		Unchanged: 0/0
 12797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;Total ram usage:        1 bytes
 12803 ;; Hardware stack levels used:    1
 12804 ;; Hardware stack levels required when called:    1
 12805 ;; This function calls:
 12806 ;;		i2_lcdNibble
 12807 ;; This function is called by:
 12808 ;;		_change_state_to_menu_11
 12809 ;;		_change_state_to_menu_23
 12810 ;;		_change_state_to_logs_11
 12811 ;;		_change_state_to_logs_12
 12812 ;;		_change_state_to_logs_22
 12813 ;;		_change_state_to_logs_23
 12814 ;;		_change_state_to_logs_33
 12815 ;;		_change_state_to_logs_34
 12816 ;;		_printSortTimer
 12817 ;;		i2_change_state_to_menu_start
 12818 ;;		i2_change_state_to_menu_12
 12819 ;;		i2_change_state_to_menu_22
 12820 ;;		i2_printRTC
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text64
 12825  0028AA                     __ptext64:
 12826                           	opt stack 0
 12827  0028AA                     i2_lcdInst:
 12828                           	opt stack 19
 12829                           
 12830                           ;incstack = 0
 12831                           ;i2lcdInst@data stored from wreg
 12832  0028AA  6E03               	movwf	i2lcdInst@data,c
 12833                           
 12834                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12835  0028AC  948C               	bcf	3980,2,c	;volatile
 12836                           
 12837                           ;lcd.c: 15: lcdNibble(data);
 12838  0028AE  5003               	movf	i2lcdInst@data,w,c
 12839  0028B0  EC9F  F010         	call	i2_lcdNibble
 12840  0028B4  0012               	return		;funcret
 12841  0028B6                     __end_ofi2_lcdInst:
 12842                           	opt stack 0
 12843                           pclatu	equ	0xFFB
 12844                           pclath	equ	0xFFA
 12845                           tblptru	equ	0xFF8
 12846                           tblptrh	equ	0xFF7
 12847                           tblptrl	equ	0xFF6
 12848                           tablat	equ	0xFF5
 12849                           prodh	equ	0xFF4
 12850                           prodl	equ	0xFF3
 12851                           intcon	equ	0xFF2
 12852                           intcon3	equ	0xFF0
 12853                           indf0	equ	0xFEF
 12854                           postinc0	equ	0xFEE
 12855                           fsr0h	equ	0xFEA
 12856                           fsr0l	equ	0xFE9
 12857                           wreg	equ	0xFE8
 12858                           postdec1	equ	0xFE5
 12859                           fsr1h	equ	0xFE2
 12860                           fsr1l	equ	0xFE1
 12861                           indf2	equ	0xFDF
 12862                           postinc2	equ	0xFDE
 12863                           postdec2	equ	0xFDD
 12864                           fsr2h	equ	0xFDA
 12865                           fsr2l	equ	0xFD9
 12866                           status	equ	0xFD8
 12867                           
 12868 ;; *************** function i2_lcdNibble *****************
 12869 ;; Defined at:
 12870 ;;		line 23 in file "lcd.c"
 12871 ;; Parameters:    Size  Location     Type
 12872 ;;  data            1    wreg     unsigned char 
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;  data            1    1[COMRAM] unsigned char 
 12875 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      void 
 12878 ;; Registers used:
 12879 ;;		wreg, status,2, status,0
 12880 ;; Tracked objects:
 12881 ;;		On entry : 0/0
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;Total ram usage:        2 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; This function calls:
 12892 ;;		Nothing
 12893 ;; This function is called by:
 12894 ;;		i2_lcdInst
 12895 ;;		i2_putch
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           	psect	text65
 12900  00213E                     __ptext65:
 12901                           	opt stack 0
 12902  00213E                     i2_lcdNibble:
 12903                           	opt stack 19
 12904                           
 12905                           ;incstack = 0
 12906                           ;i2lcdNibble@data stored from wreg
 12907  00213E  6E02               	movwf	i2lcdNibble@data,c
 12908                           
 12909                           ;lcd.c: 25: char temp = data & 0xF0;
 12910  002140  5002               	movf	i2lcdNibble@data,w,c
 12911  002142  0BF0               	andlw	240
 12912  002144  6E01               	movwf	i2lcdNibble@temp,c
 12913                           
 12914                           ;lcd.c: 26: LATD = LATD & 0x0F;
 12915  002146  508C               	movf	3980,w,c	;volatile
 12916  002148  0B0F               	andlw	15
 12917  00214A  6E8C               	movwf	3980,c	;volatile
 12918                           
 12919                           ;lcd.c: 27: LATD = temp | LATD;
 12920  00214C  5001               	movf	i2lcdNibble@temp,w,c
 12921  00214E  108C               	iorwf	3980,w,c	;volatile
 12922  002150  6E8C               	movwf	3980,c	;volatile
 12923                           
 12924                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 12925  002152  868C               	bsf	3980,3,c	;volatile
 12926                           
 12927                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12928  002154  0E42               	movlw	66
 12929  002156                     i2u495_47:
 12930  002156  2EE8               	decfsz	wreg,f,c
 12931  002158  D7FE               	bra	i2u495_47
 12932  00215A  D000               	nop2	
 12933                           
 12934                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 12935  00215C  968C               	bcf	3980,3,c	;volatile
 12936                           
 12937                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12938  00215E  0E42               	movlw	66
 12939  002160                     i2u496_47:
 12940  002160  2EE8               	decfsz	wreg,f,c
 12941  002162  D7FE               	bra	i2u496_47
 12942  002164  D000               	nop2	
 12943                           
 12944                           ;lcd.c: 34: data = data << 4;
 12945  002166  3802               	swapf	i2lcdNibble@data,w,c
 12946  002168  0BF0               	andlw	240
 12947  00216A  6E02               	movwf	i2lcdNibble@data,c
 12948                           
 12949                           ;lcd.c: 36: temp = data & 0xF0;
 12950  00216C  5002               	movf	i2lcdNibble@data,w,c
 12951  00216E  0BF0               	andlw	240
 12952  002170  6E01               	movwf	i2lcdNibble@temp,c
 12953                           
 12954                           ;lcd.c: 37: LATD = LATD & 0x0F;
 12955  002172  508C               	movf	3980,w,c	;volatile
 12956  002174  0B0F               	andlw	15
 12957  002176  6E8C               	movwf	3980,c	;volatile
 12958                           
 12959                           ;lcd.c: 38: LATD = temp | LATD;
 12960  002178  5001               	movf	i2lcdNibble@temp,w,c
 12961  00217A  108C               	iorwf	3980,w,c	;volatile
 12962  00217C  6E8C               	movwf	3980,c	;volatile
 12963                           
 12964                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 12965  00217E  868C               	bsf	3980,3,c	;volatile
 12966                           
 12967                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12968  002180  0E42               	movlw	66
 12969  002182                     i2u497_47:
 12970  002182  2EE8               	decfsz	wreg,f,c
 12971  002184  D7FE               	bra	i2u497_47
 12972  002186  D000               	nop2	
 12973                           
 12974                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 12975  002188  968C               	bcf	3980,3,c	;volatile
 12976                           
 12977                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12978  00218A  0E42               	movlw	66
 12979  00218C                     i2u498_47:
 12980  00218C  2EE8               	decfsz	wreg,f,c
 12981  00218E  D7FE               	bra	i2u498_47
 12982  002190  D000               	nop2	
 12983  002192  0012               	return		;funcret
 12984  002194                     __end_ofi2_lcdNibble:
 12985                           	opt stack 0
 12986                           pclatu	equ	0xFFB
 12987                           pclath	equ	0xFFA
 12988                           tblptru	equ	0xFF8
 12989                           tblptrh	equ	0xFF7
 12990                           tblptrl	equ	0xFF6
 12991                           tablat	equ	0xFF5
 12992                           prodh	equ	0xFF4
 12993                           prodl	equ	0xFF3
 12994                           intcon	equ	0xFF2
 12995                           intcon3	equ	0xFF0
 12996                           indf0	equ	0xFEF
 12997                           postinc0	equ	0xFEE
 12998                           fsr0h	equ	0xFEA
 12999                           fsr0l	equ	0xFE9
 13000                           wreg	equ	0xFE8
 13001                           postdec1	equ	0xFE5
 13002                           fsr1h	equ	0xFE2
 13003                           fsr1l	equ	0xFE1
 13004                           indf2	equ	0xFDF
 13005                           postinc2	equ	0xFDE
 13006                           postdec2	equ	0xFDD
 13007                           fsr2h	equ	0xFDA
 13008                           fsr2l	equ	0xFD9
 13009                           status	equ	0xFD8
 13010                           
 13011 ;; *************** function i2_getRTC *****************
 13012 ;; Defined at:
 13013 ;;		line 42 in file "RTC.c"
 13014 ;; Parameters:    Size  Location     Type
 13015 ;;		None
 13016 ;; Auto vars:     Size  Location     Type
 13017 ;;  getRTC          2    3[COMRAM] int 
 13018 ;; Return value:  Size  Location     Type
 13019 ;;                  1    wreg      void 
 13020 ;; Registers used:
 13021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13022 ;; Tracked objects:
 13023 ;;		On entry : 0/0
 13024 ;;		On exit  : 0/0
 13025 ;;		Unchanged: 0/0
 13026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;Total ram usage:        2 bytes
 13032 ;; Hardware stack levels used:    1
 13033 ;; Hardware stack levels required when called:    2
 13034 ;; This function calls:
 13035 ;;		i2_I2C_Master_Read
 13036 ;;		i2_I2C_Master_Start
 13037 ;;		i2_I2C_Master_Stop
 13038 ;;		i2_I2C_Master_Write
 13039 ;; This function is called by:
 13040 ;;		_printSortTimer
 13041 ;;		i2_printRTC
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           	psect	text66
 13046  001FA2                     __ptext66:
 13047                           	opt stack 0
 13048  001FA2                     i2_getRTC:
 13049                           	opt stack 18
 13050                           
 13051                           ;RTC.c: 46: I2C_Master_Start();
 13052                           
 13053                           ;incstack = 0
 13054  001FA2  EC75  F014         	call	i2_I2C_Master_Start	;wreg free
 13055                           
 13056                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 13057  001FA6  0E00               	movlw	0
 13058  001FA8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13059  001FAA  0ED0               	movlw	208
 13060  001FAC  6E02               	movwf	i2I2C_Master_Write@d,c
 13061  001FAE  EC60  F014         	call	i2_I2C_Master_Write	;wreg free
 13062                           
 13063                           ;RTC.c: 48: I2C_Master_Write(0x00);
 13064  001FB2  0E00               	movlw	0
 13065  001FB4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13066  001FB6  0E00               	movlw	0
 13067  001FB8  6E02               	movwf	i2I2C_Master_Write@d,c
 13068  001FBA  EC60  F014         	call	i2_I2C_Master_Write	;wreg free
 13069                           
 13070                           ;RTC.c: 49: I2C_Master_Stop();
 13071  001FBE  EC71  F014         	call	i2_I2C_Master_Stop	;wreg free
 13072                           
 13073                           ;RTC.c: 52: I2C_Master_Start();
 13074  001FC2  EC75  F014         	call	i2_I2C_Master_Start	;wreg free
 13075                           
 13076                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 13077  001FC6  0E00               	movlw	0
 13078  001FC8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13079  001FCA  0ED1               	movlw	209
 13080  001FCC  6E02               	movwf	i2I2C_Master_Write@d,c
 13081  001FCE  EC60  F014         	call	i2_I2C_Master_Write	;wreg free
 13082                           
 13083                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 13084  001FD2  0E00               	movlw	0
 13085  001FD4  6E05               	movwf	i2getRTC@i+1,c
 13086  001FD6  0E00               	movlw	0
 13087  001FD8  6E04               	movwf	i2getRTC@i,c
 13088  001FDA                     i2l4250:
 13089  001FDA  BE05               	btfsc	i2getRTC@i+1,7,c
 13090  001FDC  D006               	goto	i2l4254
 13091  001FDE  5005               	movf	i2getRTC@i+1,w,c
 13092  001FE0  E111               	bnz	i2l4260
 13093  001FE2  0E06               	movlw	6
 13094  001FE4  5C04               	subwf	i2getRTC@i,w,c
 13095  001FE6  B0D8               	btfsc	status,0,c
 13096  001FE8  D00D               	goto	i2l4260
 13097  001FEA                     i2l4254:
 13098                           
 13099                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 13100  001FEA  0ED4               	movlw	low _time
 13101  001FEC  2404               	addwf	i2getRTC@i,w,c
 13102  001FEE  6ED9               	movwf	fsr2l,c
 13103  001FF0  0E00               	movlw	high _time
 13104  001FF2  2005               	addwfc	i2getRTC@i+1,w,c
 13105  001FF4  6EDA               	movwf	fsr2h,c
 13106  001FF6  0E01               	movlw	1
 13107  001FF8  ECBD  F013         	call	i2_I2C_Master_Read
 13108  001FFC  6EDF               	movwf	indf2,c
 13109  001FFE  4A04               	infsnz	i2getRTC@i,f,c
 13110  002000  2A05               	incf	i2getRTC@i+1,f,c
 13111  002002  D7EB               	goto	i2l4250
 13112  002004                     i2l4260:
 13113                           
 13114                           ;RTC.c: 56: }
 13115                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13116  002004  0E00               	movlw	0
 13117  002006  ECBD  F013         	call	i2_I2C_Master_Read
 13118  00200A  0100               	movlb	0	; () banked
 13119  00200C  6FDA               	movwf	(_time+6)& (0+255),b
 13120                           
 13121                           ;RTC.c: 58: I2C_Master_Stop();
 13122  00200E  EC71  F014         	call	i2_I2C_Master_Stop	;wreg free
 13123  002012  0012               	return		;funcret
 13124  002014                     __end_ofi2_getRTC:
 13125                           	opt stack 0
 13126                           pclatu	equ	0xFFB
 13127                           pclath	equ	0xFFA
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           intcon	equ	0xFF2
 13135                           intcon3	equ	0xFF0
 13136                           indf0	equ	0xFEF
 13137                           postinc0	equ	0xFEE
 13138                           fsr0h	equ	0xFEA
 13139                           fsr0l	equ	0xFE9
 13140                           wreg	equ	0xFE8
 13141                           postdec1	equ	0xFE5
 13142                           fsr1h	equ	0xFE2
 13143                           fsr1l	equ	0xFE1
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function i2_I2C_Master_Write *****************
 13152 ;; Defined at:
 13153 ;;		line 47 in file "I2C.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  d               2    1[COMRAM] unsigned int 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, status,2, status,0, cstack
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;Total ram usage:        2 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    1
 13174 ;; This function calls:
 13175 ;;		i2_I2C_Master_Wait
 13176 ;; This function is called by:
 13177 ;;		i2_getRTC
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           	psect	text67
 13182  0028C0                     __ptext67:
 13183                           	opt stack 0
 13184  0028C0                     i2_I2C_Master_Write:
 13185                           	opt stack 18
 13186                           
 13187                           ;I2C.c: 49: I2C_Master_Wait();
 13188                           
 13189                           ;incstack = 0
 13190  0028C0  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13191                           
 13192                           ;I2C.c: 50: SSPBUF = d;
 13193  0028C4  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13194  0028C8  0012               	return		;funcret
 13195  0028CA                     __end_ofi2_I2C_Master_Write:
 13196                           	opt stack 0
 13197                           pclatu	equ	0xFFB
 13198                           pclath	equ	0xFFA
 13199                           tblptru	equ	0xFF8
 13200                           tblptrh	equ	0xFF7
 13201                           tblptrl	equ	0xFF6
 13202                           tablat	equ	0xFF5
 13203                           prodh	equ	0xFF4
 13204                           prodl	equ	0xFF3
 13205                           intcon	equ	0xFF2
 13206                           intcon3	equ	0xFF0
 13207                           indf0	equ	0xFEF
 13208                           postinc0	equ	0xFEE
 13209                           fsr0h	equ	0xFEA
 13210                           fsr0l	equ	0xFE9
 13211                           wreg	equ	0xFE8
 13212                           postdec1	equ	0xFE5
 13213                           fsr1h	equ	0xFE2
 13214                           fsr1l	equ	0xFE1
 13215                           indf2	equ	0xFDF
 13216                           postinc2	equ	0xFDE
 13217                           postdec2	equ	0xFDD
 13218                           fsr2h	equ	0xFDA
 13219                           fsr2l	equ	0xFD9
 13220                           status	equ	0xFD8
 13221                           
 13222 ;; *************** function i2_I2C_Master_Stop *****************
 13223 ;; Defined at:
 13224 ;;		line 41 in file "I2C.c"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;		None
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;		None
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      void 
 13231 ;; Registers used:
 13232 ;;		wreg, status,2, status,0, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;Total ram usage:        0 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    1
 13245 ;; This function calls:
 13246 ;;		i2_I2C_Master_Wait
 13247 ;; This function is called by:
 13248 ;;		i2_getRTC
 13249 ;; This function uses a non-reentrant model
 13250 ;;
 13251                           
 13252                           	psect	text68
 13253  0028E2                     __ptext68:
 13254                           	opt stack 0
 13255  0028E2                     i2_I2C_Master_Stop:
 13256                           	opt stack 18
 13257                           
 13258                           ;I2C.c: 43: I2C_Master_Wait();
 13259                           
 13260                           ;incstack = 0
 13261  0028E2  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13262                           
 13263                           ;I2C.c: 44: PEN = 1;
 13264  0028E6  84C5               	bsf	4037,2,c	;volatile
 13265  0028E8  0012               	return		;funcret
 13266  0028EA                     __end_ofi2_I2C_Master_Stop:
 13267                           	opt stack 0
 13268                           pclatu	equ	0xFFB
 13269                           pclath	equ	0xFFA
 13270                           tblptru	equ	0xFF8
 13271                           tblptrh	equ	0xFF7
 13272                           tblptrl	equ	0xFF6
 13273                           tablat	equ	0xFF5
 13274                           prodh	equ	0xFF4
 13275                           prodl	equ	0xFF3
 13276                           intcon	equ	0xFF2
 13277                           intcon3	equ	0xFF0
 13278                           indf0	equ	0xFEF
 13279                           postinc0	equ	0xFEE
 13280                           fsr0h	equ	0xFEA
 13281                           fsr0l	equ	0xFE9
 13282                           wreg	equ	0xFE8
 13283                           postdec1	equ	0xFE5
 13284                           fsr1h	equ	0xFE2
 13285                           fsr1l	equ	0xFE1
 13286                           indf2	equ	0xFDF
 13287                           postinc2	equ	0xFDE
 13288                           postdec2	equ	0xFDD
 13289                           fsr2h	equ	0xFDA
 13290                           fsr2l	equ	0xFD9
 13291                           status	equ	0xFD8
 13292                           
 13293 ;; *************** function i2_I2C_Master_Start *****************
 13294 ;; Defined at:
 13295 ;;		line 29 in file "I2C.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;		None
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;		None
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      void 
 13302 ;; Registers used:
 13303 ;;		wreg, status,2, status,0, cstack
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;Total ram usage:        0 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    1
 13316 ;; This function calls:
 13317 ;;		i2_I2C_Master_Wait
 13318 ;; This function is called by:
 13319 ;;		i2_getRTC
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           	psect	text69
 13324  0028EA                     __ptext69:
 13325                           	opt stack 0
 13326  0028EA                     i2_I2C_Master_Start:
 13327                           	opt stack 18
 13328                           
 13329                           ;I2C.c: 31: I2C_Master_Wait();
 13330                           
 13331                           ;incstack = 0
 13332  0028EA  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13333                           
 13334                           ;I2C.c: 32: SEN = 1;
 13335  0028EE  80C5               	bsf	4037,0,c	;volatile
 13336  0028F0  0012               	return		;funcret
 13337  0028F2                     __end_ofi2_I2C_Master_Start:
 13338                           	opt stack 0
 13339                           pclatu	equ	0xFFB
 13340                           pclath	equ	0xFFA
 13341                           tblptru	equ	0xFF8
 13342                           tblptrh	equ	0xFF7
 13343                           tblptrl	equ	0xFF6
 13344                           tablat	equ	0xFF5
 13345                           prodh	equ	0xFF4
 13346                           prodl	equ	0xFF3
 13347                           intcon	equ	0xFF2
 13348                           intcon3	equ	0xFF0
 13349                           indf0	equ	0xFEF
 13350                           postinc0	equ	0xFEE
 13351                           fsr0h	equ	0xFEA
 13352                           fsr0l	equ	0xFE9
 13353                           wreg	equ	0xFE8
 13354                           postdec1	equ	0xFE5
 13355                           fsr1h	equ	0xFE2
 13356                           fsr1l	equ	0xFE1
 13357                           indf2	equ	0xFDF
 13358                           postinc2	equ	0xFDE
 13359                           postdec2	equ	0xFDD
 13360                           fsr2h	equ	0xFDA
 13361                           fsr2l	equ	0xFD9
 13362                           status	equ	0xFD8
 13363                           
 13364 ;; *************** function i2_I2C_Master_Read *****************
 13365 ;; Defined at:
 13366 ;;		line 53 in file "I2C.c"
 13367 ;; Parameters:    Size  Location     Type
 13368 ;;  a               1    wreg     unsigned char 
 13369 ;; Auto vars:     Size  Location     Type
 13370 ;;  a               1    1[COMRAM] unsigned char 
 13371 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13372 ;; Return value:  Size  Location     Type
 13373 ;;                  1    wreg      unsigned char 
 13374 ;; Registers used:
 13375 ;;		wreg, status,2, status,0, cstack
 13376 ;; Tracked objects:
 13377 ;;		On entry : 0/0
 13378 ;;		On exit  : 0/0
 13379 ;;		Unchanged: 0/0
 13380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;Total ram usage:        2 bytes
 13386 ;; Hardware stack levels used:    1
 13387 ;; Hardware stack levels required when called:    1
 13388 ;; This function calls:
 13389 ;;		i2_I2C_Master_Wait
 13390 ;; This function is called by:
 13391 ;;		i2_getRTC
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           	psect	text70
 13396  00277A                     __ptext70:
 13397                           	opt stack 0
 13398  00277A                     i2_I2C_Master_Read:
 13399                           	opt stack 18
 13400                           
 13401                           ;incstack = 0
 13402                           ;i2I2C_Master_Read@a stored from wreg
 13403  00277A  6E02               	movwf	i2I2C_Master_Read@a,c
 13404                           
 13405                           ;I2C.c: 55: unsigned char temp;
 13406                           ;I2C.c: 56: I2C_Master_Wait();
 13407  00277C  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13408                           
 13409                           ;I2C.c: 57: RCEN = 1;
 13410  002780  86C5               	bsf	4037,3,c	;volatile
 13411                           
 13412                           ;I2C.c: 58: I2C_Master_Wait();
 13413  002782  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13414                           
 13415                           ;I2C.c: 59: temp = SSPBUF;
 13416  002786  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13417                           
 13418                           ;I2C.c: 60: I2C_Master_Wait();
 13419  00278A  EC36  F014         	call	i2_I2C_Master_Wait	;wreg free
 13420                           
 13421                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13422  00278E  5002               	movf	i2I2C_Master_Read@a,w,c
 13423  002790  A4D8               	btfss	status,2,c
 13424  002792  D002               	goto	i2u250_40
 13425  002794  8AC5               	bsf	4037,5,c	;volatile
 13426  002796  D001               	goto	i2l4000
 13427  002798                     i2u250_40:
 13428  002798  9AC5               	bcf	4037,5,c	;volatile
 13429  00279A                     i2l4000:
 13430                           
 13431                           ;I2C.c: 62: ACKEN = 1;
 13432  00279A  88C5               	bsf	4037,4,c	;volatile
 13433                           
 13434                           ;I2C.c: 63: return temp;
 13435  00279C  5003               	movf	i2I2C_Master_Read@temp,w,c
 13436  00279E  0012               	return	
 13437  0027A0                     __end_ofi2_I2C_Master_Read:
 13438                           	opt stack 0
 13439                           pclatu	equ	0xFFB
 13440                           pclath	equ	0xFFA
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon3	equ	0xFF0
 13449                           indf0	equ	0xFEF
 13450                           postinc0	equ	0xFEE
 13451                           fsr0h	equ	0xFEA
 13452                           fsr0l	equ	0xFE9
 13453                           wreg	equ	0xFE8
 13454                           postdec1	equ	0xFE5
 13455                           fsr1h	equ	0xFE2
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function i2_I2C_Master_Wait *****************
 13465 ;; Defined at:
 13466 ;;		line 24 in file "I2C.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;		None
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;		None
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      void 
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13484 ;;Total ram usage:        1 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		i2_I2C_Master_Start
 13490 ;;		i2_I2C_Master_Stop
 13491 ;;		i2_I2C_Master_Write
 13492 ;;		i2_I2C_Master_Read
 13493 ;; This function uses a non-reentrant model
 13494 ;;
 13495                           
 13496                           	psect	text71
 13497  00286C                     __ptext71:
 13498                           	opt stack 0
 13499  00286C                     i2_I2C_Master_Wait:
 13500                           	opt stack 18
 13501  00286C                     i2l144:
 13502  00286C  B4C7               	btfsc	4039,2,c	;volatile
 13503  00286E  D7FE               	goto	i2l144
 13504  002870  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13505  002874  0E1F               	movlw	31
 13506  002876  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13507  002878  B4D8               	btfsc	status,2,c
 13508  00287A  0012               	return	
 13509  00287C  D7F7               	goto	i2l144
 13510  00287E                     __end_ofi2_I2C_Master_Wait:
 13511                           	opt stack 0
 13512                           pclatu	equ	0xFFB
 13513                           pclath	equ	0xFFA
 13514                           tblptru	equ	0xFF8
 13515                           tblptrh	equ	0xFF7
 13516                           tblptrl	equ	0xFF6
 13517                           tablat	equ	0xFF5
 13518                           prodh	equ	0xFF4
 13519                           prodl	equ	0xFF3
 13520                           intcon	equ	0xFF2
 13521                           intcon3	equ	0xFF0
 13522                           indf0	equ	0xFEF
 13523                           postinc0	equ	0xFEE
 13524                           fsr0h	equ	0xFEA
 13525                           fsr0l	equ	0xFE9
 13526                           wreg	equ	0xFE8
 13527                           postdec1	equ	0xFE5
 13528                           fsr1h	equ	0xFE2
 13529                           fsr1l	equ	0xFE1
 13530                           indf2	equ	0xFDF
 13531                           postinc2	equ	0xFDE
 13532                           postdec2	equ	0xFDD
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8
 13536                           pclatu	equ	0xFFB
 13537                           pclath	equ	0xFFA
 13538                           tblptru	equ	0xFF8
 13539                           tblptrh	equ	0xFF7
 13540                           tblptrl	equ	0xFF6
 13541                           tablat	equ	0xFF5
 13542                           prodh	equ	0xFF4
 13543                           prodl	equ	0xFF3
 13544                           intcon	equ	0xFF2
 13545                           intcon3	equ	0xFF0
 13546                           indf0	equ	0xFEF
 13547                           postinc0	equ	0xFEE
 13548                           fsr0h	equ	0xFEA
 13549                           fsr0l	equ	0xFE9
 13550                           wreg	equ	0xFE8
 13551                           postdec1	equ	0xFE5
 13552                           fsr1h	equ	0xFE2
 13553                           fsr1l	equ	0xFE1
 13554                           indf2	equ	0xFDF
 13555                           postinc2	equ	0xFDE
 13556                           postdec2	equ	0xFDD
 13557                           fsr2h	equ	0xFDA
 13558                           fsr2l	equ	0xFD9
 13559                           status	equ	0xFD8
 13560                           
 13561                           	psect	rparam
 13562  0000                     pclatu	equ	0xFFB
 13563                           pclath	equ	0xFFA
 13564                           tblptru	equ	0xFF8
 13565                           tblptrh	equ	0xFF7
 13566                           tblptrl	equ	0xFF6
 13567                           tablat	equ	0xFF5
 13568                           prodh	equ	0xFF4
 13569                           prodl	equ	0xFF3
 13570                           intcon	equ	0xFF2
 13571                           intcon3	equ	0xFF0
 13572                           indf0	equ	0xFEF
 13573                           postinc0	equ	0xFEE
 13574                           fsr0h	equ	0xFEA
 13575                           fsr0l	equ	0xFE9
 13576                           wreg	equ	0xFE8
 13577                           postdec1	equ	0xFE5
 13578                           fsr1h	equ	0xFE2
 13579                           fsr1l	equ	0xFE1
 13580                           indf2	equ	0xFDF
 13581                           postinc2	equ	0xFDE
 13582                           postdec2	equ	0xFDD
 13583                           fsr2h	equ	0xFDA
 13584                           fsr2l	equ	0xFD9
 13585                           status	equ	0xFD8
 13586                           
 13587                           	psect	temp
 13588  00007E                     btemp:
 13589                           	opt stack 0
 13590  00007E                     	ds	1
 13591  0000                     int$flags	set	btemp
 13592                           pclatu	equ	0xFFB
 13593                           pclath	equ	0xFFA
 13594                           tblptru	equ	0xFF8
 13595                           tblptrh	equ	0xFF7
 13596                           tblptrl	equ	0xFF6
 13597                           tablat	equ	0xFF5
 13598                           prodh	equ	0xFF4
 13599                           prodl	equ	0xFF3
 13600                           intcon	equ	0xFF2
 13601                           intcon3	equ	0xFF0
 13602                           indf0	equ	0xFEF
 13603                           postinc0	equ	0xFEE
 13604                           fsr0h	equ	0xFEA
 13605                           fsr0l	equ	0xFE9
 13606                           wreg	equ	0xFE8
 13607                           postdec1	equ	0xFE5
 13608                           fsr1h	equ	0xFE2
 13609                           fsr1l	equ	0xFE1
 13610                           indf2	equ	0xFDF
 13611                           postinc2	equ	0xFDE
 13612                           postdec2	equ	0xFDD
 13613                           fsr2h	equ	0xFDA
 13614                           fsr2l	equ	0xFD9
 13615                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        8
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     128
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _ID->_MAGNETISM_in
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38488
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     860
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     766
                                             10 BANK0      1     1      0
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      72
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      34        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Feb 22 01:12:29 2017

                   i2_I2C_Master_Start 28EA                     i2_I2C_Master_Write 28C0  
                                   _ID 1BBC                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0077  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l144 2832                                    l236 285A  
                                  l239 2860                                    l351 00E0  
                                  l709 1F04                                    l896 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F1  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 255C  
      __end_of_change_state_to_menu_12 23FE        __end_of_change_state_to_menu_22 23C6  
      __end_of_change_state_to_menu_23 252C           _f_can_coming_to_distribution 00E9  
                       ??_Distribution 0081        __end_of_change_state_to_logs_11 264C  
      __end_of_change_state_to_logs_12 261C        __end_of_change_state_to_logs_22 25EC  
      __end_of_change_state_to_logs_23 26D6        __end_of_change_state_to_logs_33 25BC  
      __end_of_change_state_to_logs_34 258C                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1076 2272  
                                 l1068 237E                                   l4120 0738  
                                 l4104 0696                                   l4114 070E  
                                 l4106 06A2                                   l4130 07B0  
                                 l4202 1E66                                   l4140 07E0  
                                 l4124 0764                                   l4116 071A  
                                 l4108 06A8                                   l4212 1E9C  
                                 l1645 1F98                                   l4142 07E6  
                                 l4118 0720                                   l4206 1E7C  
                                 l4230 1A96                                   l1655 20D4  
                                 l4160 0844                                   l4128 077C  
                                 l4072 0584                                   l4216 2408  
                                 l5112 024C                                   l1592 1AFC  
                                 l4154 0822                                   l4082 05B4  
                                 l4218 2414                                   l5210 0404  
                                 l5202 03E2                                   l5130 0298  
                                 l5122 0276                                   l5050 0132  
                                 l5042 0110                                   l4226 1A80  
                                 l4180 08C8                                   l4172 08A0  
                                 l4164 087C                                   l4076 0598  
                                 l4420 0D86                                   l5116 0264  
                                 l5108 0242                                   l5036 00F8  
                                 l4228 1A90                                   l4190 08FC  
                                 l4166 0886                                   l4078 05AA  
                                 l4430 0E1C                                   l4422 0DA4  
                                 l4414 0CFA                                   l5206 03EC  
                                 l5126 0280                                   l5054 0144  
                                 l5046 011A                                   l5038 00FE  
                                 l4238 1AEA                                   l4184 08E2  
                                 l4096 0664                                   l4088 05E8  
                                 l4440 0EB2                                   l4432 0E3A  
                                 l4424 0DC2                                   l5232 0464  
                                 l5152 030C                                   l5072 01A0  
                                 l4194 0954                                   l4178 08BC  
                                 l4442 0ED0                                   l4434 0E58  
                                 l4426 0DE0                                   l5250 04B0  
                                 l5242 048E                                   l5170 0358  
                                 l5162 0336                                   l5090 01EC  
                                 l5082 01CA                                   l4188 08F6  
                                 l4196 0960                                   l4436 0E76  
                                 l4428 0DFE                                   l5236 047C  
                                 l5228 045A                                   l5156 0324  
                                 l5148 0302                                   l5076 01B8  
                                 l5068 0196                                   l4540 1B1C  
                                 l4438 0E94                                   l4446 0EEE  
                                 l5246 0498                                   l5166 0340  
                                 l5086 01D4                                   l4550 1BA8  
                                 l4448 0F4C                                   l5272 0510  
                                 l5192 03B8                                   l4544 1B32  
                                 l3914 26A0                                   l5290 055C  
                                 l5282 053A                                   l4562 236E  
                                 l3932 2722                                   l5276 0528  
                                 l5268 0506                                   l5196 03D0  
                                 l5188 03AE                                   l4580 2250  
                                 l3950 1F54                                   l5286 0544  
                                 l5294 0568                                   l4662 1DDC  
                                 l4558 235C                                   l4920 19B0  
                                 l3960 1F8A                                   l3952 1F5A  
                                 l4672 1E1E                                   l4576 223E  
                                 l3970 209C                                   l4666 1DF2  
                                 l4932 19E4                                   l3948 1F48  
                                 l3972 20A2                                   l4860 1D3C  
                                 l5580 1EF0                                   l4934 19F0  
                                 l4926 19C6                                   l5590 1F06  
                                 l4952 1A48                                   l4944 1A26  
                                 l4936 19F6                                   l3976 20C6  
                                 l3968 2090                                   l4880 1D96  
                                 l5584 1EFA                                   l5576 1EE4  
                                 _ADFM 007E07                                   l4874 1D74  
                                 l5586 1F00                                   l5578 1EEA  
                                 l4948 1A34                                   l4980 1CDA  
                                 l4972 1CA4                                   l4964 1C80  
                                 l4974 1CB0                                   l4976 1CB6  
                                 l4984 1CE8                                   l4968 1C90  
                                 l4898 1C42                                   l4988 1CFC  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   u2400 269E  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3230 0D7C                                   u3215 210E  
                                 u3500 1C32                                   u2640 06E2  
                                 u3508 1C36                                   u3470 1BF2  
                                 u2647 06D8                                   u2680 075A  
                                 u3478 1BF6                                   u2687 0750  
                                 u4707 002A                                   _RCEN 007E2B  
                                 u4717 0122                                   u4807 0348  
                                 u4727 0152                                   u4817 0372  
                                 u4737 01A8                                   u4907 2034  
                                 u4827 03C0                                   u4747 01DC  
                                 u4917 203E                                   u4837 03F4  
                                 u4757 0206                                   u4677 1D2A  
                                 u4927 206A                                   u4847 041E  
                                 u4767 0254                                   u4687 22D2  
                                 u4937 2074                                   u4857 046C  
                                 u4777 0288                                   u4697 2306  
                                 u4867 04A0                                   u4787 02B2  
                                 u4877 04CA                                   u4797 0314  
                                 u4887 0518                                   u4897 054C  
                                 _RSEN 007E29                            _stopSignals 281C  
                                 _back 0061                                   _main 1EAC  
                                 _down 0065                                   _keys FDB5  
                                 _time 00D4                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 27A0                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      __end_ofi2_putch 28AA                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 1250  
                          i2_lcdNibble 213E                        __end_of_Loading 1D9A  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 1A52  
                                STR_10 FEDC                                  STR_11 FEA9  
                                STR_20 FF64                                  STR_12 FEED  
                                STR_13 FECB                                  STR_21 FE65  
                                STR_30 FE32                                  STR_22 FE76  
                                STR_14 FFFB                                  STR_15 FF97  
                                STR_23 FF53                                  STR_31 FF31  
                                STR_32 FF31                                  STR_40 FFF7  
                                STR_16 FF75                                  STR_24 FF0F  
                                STR_41 FFDF                                  STR_17 FE76  
                                STR_33 FE54                                  STR_25 FE32  
                                STR_34 FE43                                  STR_50 FDE8  
                                STR_42 FFD7                                  STR_18 FE87  
                                STR_26 FE21                                  STR_43 FFD3  
                                STR_51 FFBD                                  STR_19 FF64  
                                STR_35 FF42                                  STR_27 FF20  
                                STR_28 FF20                                  STR_44 FFE3  
                                STR_36 FFDB                        __end_of___awmod 1D06  
                                STR_45 FFEF                                  STR_37 FFCB  
                                STR_29 FE43                                  STR_46 FFF3  
                                STR_38 FFE7                                  STR_39 FFEB  
                                STR_47 FFCF                                  STR_48 FDD0  
                                STR_49 FFA8                                  ?_sort 0001  
                      __end_of___lldiv 1B0E                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                      __end_of___lwdiv 1FA2                        __end_of___lwmod 20DE  
                                i2l144 286C                                  i2l403 124C  
                      ___awdiv@counter 008A                                  i2l896 12DE  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR1L 000FCE  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _IR_in 005B  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 289E                        __end_of_handler 1994  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_initLCD 2310                         __CFG_EBTRB$OFF 000000  
                           i2isdigit@c 0003                        __end_of_loadRTC 1E26  
                                _block 007B                        __end_of_dpowers FDD0  
                                _first 00FE                                  _enter 0067  
                      __end_of_isdigit 272C                                  _input 007D  
                                _putch 287E                                  pclath 000FFA  
                                tablat 000FF5                __size_of_moveServoBlock 003C  
                     __end_ofi2___wmul 277A                       __end_ofi2_getRTC 2014  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
               moveServoCup@myPosition 0080                       __end_ofi2_strcpy 249C  
                     _count_can_no_lab 00DB                        __initialization 21E6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 1F2A  
                         __end_of_keys FDC6                           __end_of_sort 27C2  
                           i2printf@ap 001E                             i2printf@cp 0020  
                   __size_ofi2_isdigit 001E    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00D4  
                 __end_of_MAGNETISM_in 28F4                                 ??_sort 008B  
                        __activetblptr 000003                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AE                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 24CC              i2_change_state_to_menu_22 249C  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1171 1958  
                               i2l4000 279A                                 i2l4024 27FA  
                               i2l4034 21AA                                 i2l4036 21B2  
                               i2l4300 0A78                                 i2l1645 21DC  
                               i2l4046 21D2                                 i2l4038 21B6  
                               i2l4062 233E                                 i2l4054 231E  
                               i2l4310 0AD2                                 i2l1655 2348  
                               i2l4056 2326                                 i2l4312 0AE4  
                               i2l4320 0B20                                 i2l4250 1FDA  
                               i2l4058 232A                                 i2l4306 0AC2  
                               i2l4322 0B50                                 i2l4260 2004  
                               i2l4332 0B78                                 i2l4316 0B0E  
                               i2l4308 0ACC                                 i2l4254 1FEA  
                               i2l4334 0B7C                                 i2l4270 09A8  
                               i2l5310 0FD4                                 i2l4352 0BC8  
                               i2l4280 09E0                                 i2l4264 098A  
                               i2l5304 0FC0                                 i2l4370 0C20  
                               i2l4346 0BAE                                 i2l4274 09AE  
                               i2l5410 113E                                 i2l5402 1122  
                               i2l5330 100C                                 i2l5322 0FFE  
                               i2l5314 0FE2                                 i2l5306 0FC6  
                               i2l4372 0C28                                 i2l4380 0C4E  
                               i2l4364 0C0A                                 i2l4356 0BEC  
                               i2l4268 099A                                 i2l4620 12E8  
                               i2l4382 0C54                                 i2l4358 0BF4  
                               i2l4630 1356                                 i2l4622 12FE  
                               i2l4614 127C                                 i2l5430 1194  
                               i2l5422 1170                                 i2l5414 1154  
                               i2l5406 1130                                 i2l5350 1054  
                               i2l5342 1038                                 i2l5334 101A  
                               i2l5318 0FF0                                 i2l4376 0C3C  
                               i2l4296 0A6A                                 i2l4288 0A42  
                               i2l4392 2474                                 i2l4640 13C4  
                               i2l4632 136C                                 i2l4624 1314  
                               i2l4386 0CA2                                 i2l4298 0A74  
                               i2l4394 247C                                 i2l4642 13DA  
                               i2l4634 1382                                 i2l4626 132A  
                               i2l5442 11BE                                 i2l5434 11A2  
                               i2l5426 117E                                 i2l5418 1162  
                               i2l5370 10A2                                 i2l5362 107E  
                               i2l5354 1062                                 i2l5346 1046  
                               i2l5338 1028                                 i2l4388 0CAA  
                               i2l5532 14A2                                 i2l4820 180A  
                               i2l4812 17E6                                 i2l4740 16F0  
                               i2l4724 16B8                                 i2l4716 169E  
                               i2l4636 1398                                 i2l4628 1340  
                               i2l5452 11E2                                 i2l4806 17D8  
                               i2l4742 16F6                                 i2l4726 16C8  
                               i2l4734 16D6                                 i2l4638 13AE  
                               i2l4646 13F0                                 i2l5446 11D4  
                               i2l5438 11B0                                 i2l5390 10F0  
                               i2l5382 10D4                                 i2l5374 10B0  
                               i2l5366 1094                                 i2l5358 1070  
                               i2l5528 1492                                 i2l4824 181C  
                               i2l4816 17F8                                 i2l4744 16FC  
                               i2l4752 170E                                 i2l4728 16CC  
                               i2l4648 144A                                 i2l5640 18F8  
                               i2l5624 18D4                                 i2l5538 14FC  
                               i2l4746 1702                                 i2l4738 16EA  
                               i2l4834 1838                                 i2l5394 10FE  
                               i2l5386 10E2                                 i2l5378 10BE  
                               i2l5548 15BE                                 i2l4828 182E  
                               i2l4772 176A                                 i2l4764 1752  
                               i2l4748 1708                                 i2l4782 1794  
                               i2l5830 1726                                 i2l5822 1200  
                               i2l5398 1114                                 i2l4792 17B2  
                               i2l5832 1742                                 i2l5824 1222  
                               i2l5664 1930                                 i2l4794 17B6  
                               i2l4778 1778                                 i2l5826 123E  
                               i2l4788 179E                                 i2l4798 17C0  
                               i2l5678 1952                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 285A  
                          ?i2_printRTC 0001                   __end_of_Distribution 267A  
                               ___wmul 2434                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1E26                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 27E4  
                               _initUI 2802                                 clear_0 220C  
                               clear_1 2218                                 clear_2 2224  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 285A                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 23FE  
                            ??_initLCD 0083                              ??_loadRTC 0095  
 __end_ofi2_change_state_to_menu_start 2754  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 272C                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 21E6                       __end_of_printRTC 0F90  
                         __mediumconst FDB4                      __end_ofi2___lwmod 2352  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                      __end_ofi2_lcdInst 28B6  
                    __end_ofi2_isdigit 2802                             __accesstop 0080  
              __end_of__initialization 222A                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003B  
                   i2___lwmod@dividend 0001                         __pcstackCOMRAM 0001  
                         __pidataBANK0 28CA                            i2printRTC@i 0041  
                        _initSortTimer 1B0E                       _beamTimerCounter 0063  
                        __end_of_putch 288E                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1C64  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2702  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 26D6  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                            ?i2_strcpy 0001                       _count_pop_no_tab 00DF  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 2352                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                         ?_initSortTimer 0001  
                              UI@i_660 00CE                                UI@i_652 00CA  
                              UI@i_661 00CF                                UI@i_653 00CB  
                              UI@i_664 00D0                                UI@i_656 00CC  
                              UI@i_648 00C8                                UI@i_665 00D1  
                              UI@i_657 00CD                                UI@i_649 00C9  
                              UI@i_668 00D2                                UI@i_669 00D3  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 0002  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0083                                _UI$2064 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 238E  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 289E  
                            ?_initTime 0080                           _MAGNETISM_in 28F2  
                      _f_loadingNewCan 00EF                        i2printRTC@month 003D  
                __size_of_Distribution 002E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 207C                                _Loading 1D06  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1994                                ___awmod 1C64  
                              ___lldiv 1A52                        __size_of___wmul 0036  
                              ___lwdiv 1F2A                                ___lwmod 207C  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 007C  
                      __size_of_initUI 001A                                __pcinit 21E6  
                              __ramtop 1000                                _lcdInst 288E  
                              _handler 0008                                __ptext0 1EAC  
                              __ptext1 281C                                __ptext2 27A0  
                              __ptext3 1D06                                __ptext4 1B0E  
                              __ptext5 1BBC                                __ptext6 2352  
                              __ptext7 28F2                                __ptext8 264C  
                              __ptext9 2234                        __size_of_printf 040A  
                       ??_moveServoCup 0080                        __size_of_strcpy 0036  
                              _initLCD 22CA                                _loadRTC 1D9A  
                              _dpowers FDC6                                _isdigit 2702  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0079                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 264C  
                       __pintcode_body 1866                   end_of_initialization 222A  
                      _servoSelectFlag 006B                             ??_initTime 0086  
                              int_func 1866                    i2___wmul@multiplier 0001  
                  __size_of_PortTestA5 0012              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 1866                  __end_of_machineConfig 22CA  
                           _updateMenu 0F90                      i2_I2C_Master_Read 277A  
                    i2_I2C_Master_Wait 286C                      i2_I2C_Master_Stop 28E2  
                    i2___lwdiv@divisor 0008                              i2___lwdiv 2194  
                            i2___lwmod 2310                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 1486                     ?i2_I2C_Master_Stop 0001  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 28AA  
                           _total_time 00F5                            printf@width 00A9  
                      _PWMTimerCounter 005D                   __size_of_stopSignals 0016  
                           ID@magnetic 0087                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 27E4                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005F                         __end_of___wmul 246A  
                       __end_of_getRTC 1EAC                   __size_ofi2_lcdNibble 0056  
                        i2lcdInst@data 0003                         __end_of_initUI 281C  
                     i2___wmul@product 0005                         __end_of_printf 0980  
                       _timer1highbits 0073                           i2printf@flag 0026  
                       __end_of_strcpy 2434              __end_ofi2_I2C_Master_Read 27A0  
            __end_ofi2_I2C_Master_Wait 287E                           i2printf@prec 001D  
                  start_initialization 21E6              __end_ofi2_I2C_Master_Stop 28EA  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 00DD  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 2282  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F8                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2179 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1703 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 00E1                     __end_of_PortTestA5 286C  
                     _I2C_Master_Start 28DA                              _f_lastCan 00ED  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 28B6                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 2014                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0069  
                            _cur_state 00E5                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00A8  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 28F2  
           __end_ofi2_I2C_Master_Write 28CA                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u302_40 0B06                               i2u302_47 0AFC  
                             i2u250_40 2798                               i2u327_40 12DE  
                             i2u452_40 15B8                               i2u298_40 0AA6  
                             i2u298_47 0A9C                               i2u494_47 16BE  
                             i2u495_47 2156                               i2u496_47 2160  
                             i2u497_47 2182                               i2u498_47 218C  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0085  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 2754  
                        lcdNibble@data 0081                               i2_getRTC 1FA2  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0980  
                             i2_strcpy 246A                    I2C_Master_Read@temp 0082  
                            copy_data0 21FA                  __size_of_moveServoCup 004E  
                     __size_ofi2_putch 000C                          _timer1lowbits 0075  
                          _count_total 00E3                               __Hrparam 0000  
                     __size_of_Loading 0094                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1BBC  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 252C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 23C6             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 238E                _change_state_to_menu_23 24FC  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 261C  
              _change_state_to_logs_12 25EC                _change_state_to_logs_22 25BC  
              _change_state_to_logs_23 26A8                _change_state_to_logs_33 258C  
              _change_state_to_logs_34 255C                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 198C                       _timer1_20ms_high 006F  
                      _I2C_Master_Init 20DE                        _I2C_Master_Read 267A  
                     __size_of_initLCD 0046                           _f_ID_receive 00FC  
                         _moveServoCup 2234                       __size_of_loadRTC 008C  
                      _I2C_Master_Wait 2832                        _I2C_Master_Stop 28D2  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 2282                               __ptext11 2802  
                             __ptext20 23FE                               __ptext12 1D9A  
                             __ptext21 1E26                               __ptext13 20DE  
                             __ptext30 287E                               __ptext22 28B6  
                             __ptext14 1A52                               __ptext31 2702  
                             __ptext23 28D2                               __ptext15 26D6  
                             __ptext32 2434                               __ptext24 28DA  
                             __ptext16 27C2                               __ptext41 0F90  
                             __ptext33 207C                               __ptext25 267A  
                             __ptext17 22CA                               __ptext50 255C  
                             __ptext42 272C                               __ptext34 1F2A  
                             __ptext26 2832                               __ptext18 0012  
                             __ptext51 258C                               __ptext43 1250  
                             __ptext35 288E                               __ptext27 238E  
                             __ptext19 0CC6                               __ptext60 27E4  
                             __ptext52 26A8                               __ptext44 246A  
                             __ptext36 2014                               __ptext28 23C6  
                             __ptext61 2754                               __ptext53 25BC  
                             __ptext45 1680                               __ptext37 1C64  
                             __ptext29 0576                               __ptext70 277A  
                             __ptext62 2310                               __ptext54 25EC  
                             __ptext46 249C                               __ptext38 1994  
                             __ptext71 286C                               __ptext63 2194  
                             __ptext55 261C                               __ptext47 24CC  
                             __ptext39 285A                               __ptext64 28AA  
                             __ptext56 2846                               __ptext48 24FC  
                             __ptext65 213E                               __ptext57 1486  
                             __ptext49 252C                               __ptext66 1FA2  
                             __ptext58 0980                               __ptext67 28C0  
                             __ptext59 289E                               __ptext68 28E2  
                             __ptext69 28EA                               _dispLogs 2846  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1703 0002                               _initTime 27C2  
                        __size_of_main 007E                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F3  
               __size_of_machineConfig 0048                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                   _f_can_coming_to_ID 00E7                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 24FC  
    __end_ofi2_change_state_to_menu_22 24CC                               loadRTC@i 0096  
               __end_of_printSortTimer 1680                              putch@data 0082  
             __end_of_I2C_Master_Start 28E2                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 28C0                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                        _timer1_20ms_low 0071  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                        ?_MAGNETISM_in 0080                    __end_of_stopSignals 2832  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 213E  
              __end_of_I2C_Master_Read 26A8                __end_of_I2C_Master_Wait 2846  
              __end_of_I2C_Master_Stop 28DA                            lcdInst@data 0082  
                        printRTC@F3185 00F8                    __end_ofi2_lcdNibble 2194  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 00EB                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2282  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0080  
                     _sortTimerCounter 006D                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00F7  
                       ??_MAGNETISM_in 0082                          dispLogs@myLog 0001  
                   i2printRTC@INT_time 002D  
